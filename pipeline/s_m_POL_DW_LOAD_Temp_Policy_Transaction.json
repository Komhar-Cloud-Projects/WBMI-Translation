{
    "name": "s_m_POL_DW_LOAD_Temp_Policy_Transaction",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_Temp_Policy_Transaction",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_pif_4514_stage AS (\n\tSELECT DISTINCT AB.pif_symbol,\r\n\t                AB.pif_policy_number,\r\n\t                AB.pif_module,\r\n\t                AB.sar_id,\r\n\t                AB.sar_insurance_line,\r\n\t                AB.sar_location_x,\r\n\t                AB.sar_sub_location_x,\r\n\t                AB.sar_risk_unit_group,\r\n\t                AB.sar_class_code_grp_x,\r\n\t                AB.sar_class_code_mem_x,\r\n\t               (sar_unit + sar_risk_unit_continued) as sar_unit,  \r\n\t                CASE Len(Ltrim(Rtrim(Coalesce(sar_seq_rsk_unt_a, '')))) WHEN '0' THEN 'N/A'  ELSE \r\n\t\t\t\t\tCASE Len(Ltrim(Rtrim(Coalesce(sar_seq_rsk_unt_a, '')))) WHEN '1' THEN Ltrim(Rtrim(sar_seq_rsk_unt_a)) + '0' \r\n\t\t\t\t\tELSE Ltrim(Rtrim(sar_seq_rsk_unt_a))   END   END     AS sar_seq_rsk_unt_a,\r\n\t                AB.sar_type_exposure,\r\n\t                AB.sar_major_peril,\r\n\t                AB.sar_seq_no,\r\n\t                AB.sar_cov_eff_year,\r\n\t                AB.sar_cov_eff_month,\r\n\t                AB.sar_cov_eff_day,\r\n\t                AB.sar_part_code,\r\n\t                AB.sar_annual_state_line,\r\n\t                AB.sar_state,\r\n\t                AB.sar_loc_prov_territory,\r\n\t                AB.sar_county_first_two,\r\n\t                AB.sar_county_last_one,\r\n\t                AB.sar_city,\r\n\t                AB.sar_rsn_amend_one,\r\n\t                AB.sar_rsn_amend_two,\r\n\t                AB.sar_rsn_amend_three,\r\n\t                AB.sar_special_use,\r\n\t                AB.sar_stat_breakdown_line,\r\n\t                AB.sar_user_line,\r\n\t                AB.sar_section,\r\n\t                AB.sar_rating_date_ind,\r\n\t                AB.sar_class_1_4,\r\n\t                AB.sar_class_5_6,\r\n\t                AB.sar_exposure, \r\n\t                AB.sar_sub_line,\r\n\t                AB.sar_code_1,\r\n\t                AB.sar_code_2,\r\n\t                AB.sar_code_3,\r\n\t                AB.sar_code_4,\r\n\t                AB.sar_code_5,\r\n\t                AB.sar_code_6,\r\n\t                AB.sar_code_7,\r\n\t                AB.sar_code_8,\r\n\t                AB.sar_code_9,\r\n\t                AB.sar_code_10,\r\n\t                AB.sar_code_11,\r\n\t                AB.sar_code_12,\r\n\t                AB.sar_code_13,\r\n\t                AB.sar_code_14,\r\n\t                AB.sar_code_15,\r\n\t                AB.sar_zip_postal_code\r\n\tFROM   @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_4514_stage AB, @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_02_stage B\r\n\tWHERE AB.pif_symbol + AB.pif_policy_number + AB.pif_module = B.pif_symbol + B.pif_policy_number + B.pif_module \r\n\tAND (LTRIM(RTRIM(pif_eff_yr_a)) <> '9999' or LTRIM(RTRIM(pif_exp_yr_a)) <> '9999') AND\r\n\tLTRIM(RTRIM(SUBSTRING(CAST(pif_full_agency_number AS char(7)),1,2)+ SUBSTRING(CAST(pif_full_agency_number AS char(7)),5,3))) <> '99999'\r\n\t\r\n\t\r\n\t---- By joining to PIF_02_stage table we are not reading the data from PIF_4514_Stage where policy_eff_year or policy_exp_year <> '9999' or Policy which belongs to --- internal agency.\n),\nEXP_Default AS (\n\tSELECT\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module,\n\t-- *INF*: (pif_symbol  || pif_policy_number || pif_module)\n\t(pif_symbol || pif_policy_number || pif_module) AS Pol_Key,\n\tsar_id,\n\tsar_insurance_line,\n\tsar_location_x,\n\tsar_sub_location_x,\n\tsar_risk_unit_group,\n\tsar_class_code_grp_x,\n\tsar_class_code_mem_x,\n\tsar_unit,\n\tsar_seq_rsk_unt_a,\n\tsar_type_exposure,\n\tsar_major_peril,\n\tsar_seq_no,\n\tsar_cov_eff_year,\n\tsar_cov_eff_month,\n\tsar_cov_eff_day,\n\tsar_part_code,\n\tsar_annual_state_line,\n\tsar_state,\n\tsar_loc_prov_territory,\n\tsar_county_first_two,\n\tsar_county_last_one,\n\tsar_city,\n\tsar_rsn_amend_one,\n\tsar_rsn_amend_two,\n\tsar_rsn_amend_three,\n\tsar_special_use,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\tsar_section,\n\tsar_rating_date_ind,\n\tsar_class_1_4,\n\tsar_class_5_6,\n\tsar_exposure,\n\tsar_sub_line,\n\tsar_code_1,\n\tsar_code_2,\n\tsar_code_3,\n\tsar_code_4,\n\tsar_code_5,\n\tsar_code_6,\n\tsar_code_7,\n\tsar_code_8,\n\tsar_code_9,\n\tsar_code_10,\n\tsar_code_11,\n\tsar_code_12,\n\tsar_code_13,\n\tsar_code_14,\n\tsar_code_15,\n\tsar_zip_postal_code\n\tFROM SQ_pif_4514_stage\n),\nEXP_Values AS (\n\tSELECT\n\tPol_Key,\n\tsar_id,\n\tsar_insurance_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_insurance_line)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_insurance_line) AS sar_insurance_line_Out,\n\tsar_location_x,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_location_x)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_location_x) AS sar_location_Out,\n\tsar_sub_location_x,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_location_x)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_sub_location_x) AS sar_sub_location_x1,\n\tsar_risk_unit_group,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group) AS sar_risk_unit_group_Out,\n\tsar_class_code_grp_x,\n\tsar_class_code_mem_x,\n\t-- *INF*:  ( sar_class_code_grp_x || sar_class_code_mem_x)\n\t(sar_class_code_grp_x || sar_class_code_mem_x) AS v_risk_unit_group_seq,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_risk_unit_group_seq)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_risk_unit_group_seq) AS risk_unit_group_seq_Out,\n\tsar_unit,\n\t-- *INF*: IIF(LENGTH(LTRIM(RTRIM(sar_unit)))= 0 OR IS_SPACES(LTRIM(RTRIM(sar_unit))), '000000',sar_unit)\n\tIFF(\n\t    LENGTH(LTRIM(RTRIM(sar_unit))) = 0\n\t    or LENGTH(LTRIM(RTRIM(sar_unit)))>0\n\t    and TRIM(LTRIM(RTRIM(sar_unit)))='',\n\t    '000000',\n\t    sar_unit\n\t) AS v_sar_unit,\n\tv_sar_unit AS sar_risk_unit,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit) AS sar_risk_unit_Out,\n\tsar_seq_rsk_unt_a,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_rsk_unt_a)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_seq_rsk_unt_a) AS sar_rsk_unit_seq_out,\n\tsar_type_exposure,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_type_exposure)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_type_exposure) AS sar_type_exposure_out,\n\tsar_major_peril,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_major_peril)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_major_peril) AS sar_major_peril_out,\n\tsar_seq_no,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_no)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_seq_no) AS sar_major_peril_seq_no,\n\tsar_cov_eff_year,\n\t-- *INF*: TO_CHAR(sar_cov_eff_year)\n\tTO_CHAR(sar_cov_eff_year) AS v_sar_cov_eff_year,\n\tsar_cov_eff_month,\n\t-- *INF*: LPAD(TO_CHAR(sar_cov_eff_month),2,'0')\n\tLPAD(TO_CHAR(sar_cov_eff_month), 2, '0') AS v_sar_cov_eff_month,\n\tsar_cov_eff_day,\n\t-- *INF*: LPAD(TO_CHAR(sar_cov_eff_day),2,'0')\n\tLPAD(TO_CHAR(sar_cov_eff_day), 2, '0') AS v_sar_cov_eff_day,\n\t-- *INF*: LPAD(TO_CHAR(sar_cov_eff_month),2,'0') || '/' || LPAD(TO_CHAR(sar_cov_eff_day),2,'0')\t||\t'/'\t||\r\n\t-- TO_CHAR(sar_cov_eff_year)\n\tLPAD(TO_CHAR(sar_cov_eff_month), 2, '0') || '/' || LPAD(TO_CHAR(sar_cov_eff_day), 2, '0') || '/' || TO_CHAR(sar_cov_eff_year) AS v_sar_cov_eff_date,\n\t-- *INF*: TO_DATE(v_sar_cov_eff_month  || '/'  || v_sar_cov_eff_day  || '/'  || v_sar_cov_eff_year, 'MM/DD/YYYY')\n\tTO_TIMESTAMP(v_sar_cov_eff_month || '/' || v_sar_cov_eff_day || '/' || v_sar_cov_eff_year, 'MM/DD/YYYY') AS sar_cov_eff_date,\n\tsar_part_code,\n\tsar_state,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_state)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_state) AS sar_state_Out,\n\tsar_loc_prov_territory,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory) AS sar_loc_prov_territory_Out,\n\tsar_special_use,\n\t-- *INF*: IIF(IS_SPACES(sar_special_use) OR ISNULL(sar_special_use) OR LENGTH(sar_special_use)= 0,'N/A',sar_special_use)\r\n\t-- \r\n\t-- --- User Defined Function is triming the spaces on statistical code which we dont want to do since this field is used for Loss Master Bureau Reporting \r\n\t-- \r\n\t-- --:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_special_use)\n\tIFF(\n\t    LENGTH(sar_special_use)>0\n\t    and TRIM(sar_special_use)=''\n\t    or sar_special_use IS NULL\n\t    or LENGTH(sar_special_use) = 0,\n\t    'N/A',\n\t    sar_special_use\n\t) AS sar_special_use_out,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_special_use)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_special_use) AS sar_special_use_lkp,\n\tsar_class_1_4,\n\tsar_class_5_6,\n\t-- *INF*: (sar_class_1_4  || sar_class_5_6)\n\t(sar_class_1_4 || sar_class_5_6) AS v_sar_class_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_class_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_sar_class_code) AS sar_class_code_out,\n\tsar_exposure,\n\tsar_sub_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_line)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_sub_line) AS sar_sub_line_out,\n\tsar_zip_postal_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_zip_postal_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_zip_postal_code) AS sar_zip_postal_code_out,\n\tsar_annual_state_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_annual_state_line)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_annual_state_line) AS sar_annual_state_line_out,\n\tsar_county_first_two,\n\tsar_county_last_one,\n\tsar_city,\n\t-- *INF*: (sar_county_first_two  || sar_county_last_one || sar_city)\n\t(sar_county_first_two || sar_county_last_one || sar_city) AS v_sar_tax_location,\n\t-- *INF*: IIF(IS_SPACES(v_sar_tax_location) OR ISNULL(v_sar_tax_location) OR LENGTH(v_sar_tax_location)= 0,'N/A',v_sar_tax_location)\r\n\t-- \r\n\t-- --- User Defined Function is triming the spaces on statistical code which we dont want to do since this field is used for Loss Master Bureau Reporting \r\n\t-- \r\n\t-- --:UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_tax_location)\n\tIFF(\n\t    LENGTH(v_sar_tax_location)>0\n\t    and TRIM(v_sar_tax_location)=''\n\t    or v_sar_tax_location IS NULL\n\t    or LENGTH(v_sar_tax_location) = 0,\n\t    'N/A',\n\t    v_sar_tax_location\n\t) AS sar_tax_location_out,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_tax_location)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_sar_tax_location) AS sar_tax_location_lkp,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\t-- *INF*: (sar_stat_breakdown_line  ||  sar_user_line)\n\t(sar_stat_breakdown_line || sar_user_line) AS v_sar_product_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_product_line)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_sar_product_line) AS sar_product_line,\n\tsar_section,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_section)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_section) AS sar_section_Out,\n\tsar_rating_date_ind,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_rating_date_ind)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(sar_rating_date_ind) AS sar_rating_date_ind_Out,\n\t'N/A' AS default_NA,\n\t-- *INF*: TO_DATE('1/1/1800 00:00:00' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('1/1/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tSYSDATE AS created_date,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tsar_rsn_amend_one,\n\tsar_rsn_amend_two,\n\tsar_rsn_amend_three,\n\t-- *INF*: (sar_rsn_amend_one  ||  sar_rsn_amend_two  || sar_rsn_amend_three)\n\t(sar_rsn_amend_one || sar_rsn_amend_two || sar_rsn_amend_three) AS V_sar_rsn_amend_Code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(V_sar_rsn_amend_Code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(V_sar_rsn_amend_Code) AS sar_rsn_amend_code,\n\tsar_code_1,\n\tsar_code_2,\n\tsar_code_3,\n\tsar_code_4,\n\tsar_code_5,\n\tsar_code_6,\n\tsar_code_7,\n\tsar_code_8,\n\tsar_code_9,\n\tsar_code_10,\n\tsar_code_11,\n\tsar_code_12,\n\tsar_code_13,\n\tsar_code_14,\n\tsar_code_15,\n\t-- *INF*: (sar_code_1  ||  sar_code_2  ||  sar_code_3  || sar_code_4  ||  sar_code_5 ||  sar_code_6  || sar_code_7  || sar_code_8  || sar_code_9  || sar_code_10  || sar_code_11  || sar_code_12  || sar_code_13 || sar_code_14  || sar_code_15)\n\t(sar_code_1 || sar_code_2 || sar_code_3 || sar_code_4 || sar_code_5 || sar_code_6 || sar_code_7 || sar_code_8 || sar_code_9 || sar_code_10 || sar_code_11 || sar_code_12 || sar_code_13 || sar_code_14 || sar_code_15) AS v_sar_statistical_code,\n\t-- *INF*: IIF(IS_SPACES(v_sar_statistical_code) OR ISNULL(v_sar_statistical_code) OR LENGTH(v_sar_statistical_code)= 0,'N/A',v_sar_statistical_code)\r\n\t-- \r\n\t-- --- User Defined Function is triming the spaces on statistical code which we dont want to do since this field is used for Loss Master Bureau Reporting \r\n\t-- \r\n\t-- --:UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_statistical_code)\n\tIFF(\n\t    LENGTH(v_sar_statistical_code)>0\n\t    and TRIM(v_sar_statistical_code)=''\n\t    or v_sar_statistical_code IS NULL\n\t    or LENGTH(v_sar_statistical_code) = 0,\n\t    'N/A',\n\t    v_sar_statistical_code\n\t) AS sar_statistical_code_out,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_sar_statistical_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_sar_statistical_code) AS sar_statistical_code_lkp\n\tFROM EXP_Default\n),\nLKP_V2_Coverage AS (\n\tSELECT\n\tcov_ak_id,\n\tins_line,\n\tloc_unit_num,\n\tsub_loc_unit_num,\n\trisk_unit_grp,\n\trisk_unit_grp_seq_num,\n\trisk_unit,\n\trisk_unit_seq_num,\n\tmajor_peril_code,\n\tmajor_peril_seq_num,\n\tpms_type_exposure,\n\tcov_eff_date,\n\tpol_key\n\tFROM (\n\t\tSELECT C.cov_ak_id                    AS cov_ak_id,\r\n\t\t       Rtrim(C.ins_line)              AS ins_line,\r\n\t\t       Rtrim(C.loc_unit_num)          AS loc_unit_num,\r\n\t\t       Rtrim(C.sub_loc_unit_num)      AS sub_loc_unit_num,\r\n\t\t       Rtrim(C.risk_unit_grp)         AS risk_unit_grp,\r\n\t\t       Rtrim(C.risk_unit_grp_seq_num) AS risk_unit_grp_seq_num,\r\n\t\t       Rtrim(C.risk_unit)             AS risk_unit,\r\n\t\t       Rtrim(C.risk_unit_seq_num)     AS risk_unit_seq_num,\r\n\t\t       Rtrim(C.major_peril_code)      AS major_peril_code,\r\n\t\t       Rtrim(C.major_peril_seq_num)   AS major_peril_seq_num,\r\n\t\t       Rtrim(C.pms_type_exposure)     AS pms_type_exposure,\r\n\t\t       C.cov_eff_date                 AS cov_eff_date,\r\n\t\t       P.pol_key                          AS pol_key\r\n\t\tFROM   \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.coverage C, \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.policy P \r\n\t\tWHERE \r\n\t\tC.pol_ak_id = P.pol_ak_id\r\n\t\tAND  C.crrnt_snpsht_flag =1 \r\n\t\tAND P.crrnt_snpsht_flag =1\r\n\t\tAND P.pol_key \r\n\t\tIN \r\n\t\t(SELECT DISTINCT (A.pif_symbol + A.pif_policy_number + A.pif_module) \r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}..pif_4514_stage A)\r\n\t\tORDER BY P.pol_key ----\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ins_line,loc_unit_num,sub_loc_unit_num,risk_unit_grp,risk_unit_grp_seq_num,risk_unit,risk_unit_seq_num,major_peril_code,major_peril_seq_num,pms_type_exposure,cov_eff_date,pol_key ORDER BY cov_ak_id DESC) = 1\n),\nEXP_Lookup_Values AS (\n\tSELECT\n\tLKP_V2_Coverage.cov_ak_id,\n\tEXP_Values.crrnt_snpsht_flag,\n\tEXP_Values.audit_id,\n\tEXP_Values.eff_from_date,\n\tEXP_Values.eff_to_date,\n\tEXP_Values.source_sys_id,\n\tEXP_Values.created_date,\n\tEXP_Values.created_date AS modified_date,\n\tEXP_Values.sar_id,\n\tEXP_Values.sar_section_Out,\n\tEXP_Values.sar_part_code,\n\tEXP_Values.sar_state_Out,\n\tEXP_Values.sar_loc_prov_territory_Out,\n\tEXP_Values.sar_special_use_lkp,\n\tEXP_Values.sar_special_use_out,\n\tEXP_Values.sar_class_code_out,\n\tEXP_Values.sar_sub_line_out,\n\tEXP_Values.sar_zip_postal_code_out,\n\tEXP_Values.sar_annual_state_line_out,\n\tEXP_Values.sar_statistical_code_lkp,\n\tEXP_Values.sar_statistical_code_out,\n\tEXP_Values.sar_tax_location_lkp,\n\tEXP_Values.sar_tax_location_out,\n\tEXP_Values.sar_product_line,\n\tEXP_Values.sar_rsn_amend_code,\n\tEXP_Values.sar_exposure,\n\tEXP_Values.default_NA,\n\tEXP_Values.sar_rating_date_ind_Out\n\tFROM EXP_Values\n\tLEFT JOIN LKP_V2_Coverage\n\tON LKP_V2_Coverage.ins_line = EXP_Values.sar_insurance_line_Out AND LKP_V2_Coverage.loc_unit_num = EXP_Values.sar_location_Out AND LKP_V2_Coverage.sub_loc_unit_num = EXP_Values.sar_sub_location_x1 AND LKP_V2_Coverage.risk_unit_grp = EXP_Values.sar_risk_unit_group_Out AND LKP_V2_Coverage.risk_unit_grp_seq_num = EXP_Values.risk_unit_group_seq_Out AND LKP_V2_Coverage.risk_unit = EXP_Values.sar_risk_unit_Out AND LKP_V2_Coverage.risk_unit_seq_num = EXP_Values.sar_rsk_unit_seq_out AND LKP_V2_Coverage.major_peril_code = EXP_Values.sar_major_peril_out AND LKP_V2_Coverage.major_peril_seq_num = EXP_Values.sar_major_peril_seq_no AND LKP_V2_Coverage.pms_type_exposure = EXP_Values.sar_type_exposure_out AND LKP_V2_Coverage.cov_eff_date = EXP_Values.sar_cov_eff_date AND LKP_V2_Coverage.pol_key = EXP_Values.Pol_Key\n),\nLKP_Tgt_Temp_Policy_Transaction AS (\n\tSELECT\n\ttemp_pol_trans_id,\n\ttemp_pol_trans_ak_id,\n\tcov_ak_id,\n\tsar_id,\n\tpart_code,\n\tsection_code,\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_code,\n\trsn_amended_code,\n\trating_date_ind\n\tFROM (\n\t\tSELECT TPT.temp_pol_trans_id       AS temp_pol_trans_id,\r\n\t\t       TPT.temp_pol_trans_ak_id    AS temp_pol_trans_ak_id,\r\n\t\t       LTRIM(RTRIM(TPT.risk_zip_code))           AS risk_zip_code,\r\n\t\t\t LTRIM(RTRIM(TPT.terr_code))               AS terr_code,\r\n\t\t       LTRIM(RTRIM(TPT.tax_loc))                 AS tax_loc,\r\n\t\t       LTRIM(RTRIM(TPT.class_code))              AS class_code,\r\n\t\t       TPT.exposure                                   AS exposure,\r\n\t\t       LTRIM(RTRIM(TPT.sub_line_code))           AS sub_line_code,\r\n\t\t       LTRIM(RTRIM(TPT.source_sar_asl))          AS source_sar_asl,\r\n\t\t       LTRIM(RTRIM(TPT.source_sar_prdct_line))   AS source_sar_prdct_line,\r\n\t\t       LTRIM(RTRIM(TPT.source_sar_sp_use_code))  AS source_sar_sp_use_code,\r\n\t\t       LTRIM(RTRIM(TPT.source_statistical_code)) AS source_statistical_code,\r\n\t\t       LTRIM(RTRIM(TPT.rsn_amended_code))        AS rsn_amended_code,\r\n\t\t       TPT.cov_ak_id               AS cov_ak_id,\r\n\t\t       LTRIM(RTRIM(TPT.sar_id))                  AS sar_id,\r\n\t\t       LTRIM(RTRIM(TPT.part_code))               AS part_code,\r\n\t\t       LTRIM(RTRIM(TPT.section_code))            AS section_code,\r\n\t\t       LTRIM(RTRIM(TPT.risk_state_prov_code))    AS risk_state_prov_code,\r\n\t\t       LTRIM(RTRIM(TPT.rating_date_ind)) as rating_date_ind \r\n\t\tFROM   \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.Temp_policy_transaction TPT, \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.coverage C, \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.policy P \r\n\t\tWHERE \r\n\t\tTPT.cov_ak_id = C.cov_ak_id \r\n\t\tAND  C.pol_ak_id = P.pol_ak_id\r\n\t\tAND  C.crrnt_snpsht_flag =1 \r\n\t\tAND P.crrnt_snpsht_flag =1\r\n\t\tAND TPT.crrnt_snpsht_flag = 1\r\n\t\tAND P.pol_key \r\n\t\tIN \r\n\t\t(SELECT DISTINCT (A.pif_symbol + A.pif_policy_number + A.pif_module) \r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}..pif_4514_stage A)\r\n\t\tORDER BY TPT.cov_ak_id  ---\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY cov_ak_id,sar_id,part_code,section_code,risk_state_prov_code,risk_zip_code,terr_code,tax_loc,class_code,exposure,sub_line_code,source_sar_asl,source_sar_prdct_line,source_sar_sp_use_code,source_statistical_code,rsn_amended_code,rating_date_ind ORDER BY temp_pol_trans_id DESC) = 1\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tLKP_Tgt_Temp_Policy_Transaction.temp_pol_trans_id,\n\tLKP_Tgt_Temp_Policy_Transaction.temp_pol_trans_ak_id,\n\tEXP_Lookup_Values.cov_ak_id,\n\tEXP_Lookup_Values.crrnt_snpsht_flag,\n\tEXP_Lookup_Values.audit_id,\n\tEXP_Lookup_Values.eff_from_date,\n\tEXP_Lookup_Values.eff_to_date,\n\tEXP_Lookup_Values.source_sys_id,\n\tEXP_Lookup_Values.created_date,\n\tEXP_Lookup_Values.modified_date,\n\tEXP_Lookup_Values.sar_id,\n\tEXP_Lookup_Values.sar_section_Out,\n\tEXP_Lookup_Values.sar_rsn_amend_code,\n\tEXP_Lookup_Values.sar_part_code,\n\tEXP_Lookup_Values.sar_state_Out,\n\tEXP_Lookup_Values.sar_zip_postal_code_out,\n\tEXP_Lookup_Values.sar_loc_prov_territory_Out,\n\tEXP_Lookup_Values.sar_tax_location_out,\n\tEXP_Lookup_Values.sar_class_code_out,\n\tEXP_Lookup_Values.sar_exposure,\n\tEXP_Lookup_Values.sar_sub_line_out,\n\tEXP_Lookup_Values.sar_annual_state_line_out,\n\tEXP_Lookup_Values.sar_product_line,\n\tEXP_Lookup_Values.sar_special_use_out,\n\tEXP_Lookup_Values.sar_statistical_code_out,\n\tEXP_Lookup_Values.default_NA,\n\tEXP_Lookup_Values.sar_rating_date_ind_Out\n\tFROM EXP_Lookup_Values\n\tLEFT JOIN LKP_Tgt_Temp_Policy_Transaction\n\tON LKP_Tgt_Temp_Policy_Transaction.cov_ak_id = EXP_Lookup_Values.cov_ak_id AND LKP_Tgt_Temp_Policy_Transaction.sar_id = EXP_Lookup_Values.sar_id AND LKP_Tgt_Temp_Policy_Transaction.part_code = EXP_Lookup_Values.sar_part_code AND LKP_Tgt_Temp_Policy_Transaction.section_code = EXP_Lookup_Values.sar_section_Out AND LKP_Tgt_Temp_Policy_Transaction.risk_state_prov_code = EXP_Lookup_Values.sar_state_Out AND LKP_Tgt_Temp_Policy_Transaction.risk_zip_code = EXP_Lookup_Values.sar_zip_postal_code_out AND LKP_Tgt_Temp_Policy_Transaction.terr_code = EXP_Lookup_Values.sar_loc_prov_territory_Out AND LKP_Tgt_Temp_Policy_Transaction.tax_loc = EXP_Lookup_Values.sar_tax_location_lkp AND LKP_Tgt_Temp_Policy_Transaction.class_code = EXP_Lookup_Values.sar_class_code_out AND LKP_Tgt_Temp_Policy_Transaction.exposure = EXP_Lookup_Values.sar_exposure AND LKP_Tgt_Temp_Policy_Transaction.sub_line_code = EXP_Lookup_Values.sar_sub_line_out AND LKP_Tgt_Temp_Policy_Transaction.source_sar_asl = EXP_Lookup_Values.sar_annual_state_line_out AND LKP_Tgt_Temp_Policy_Transaction.source_sar_prdct_line = EXP_Lookup_Values.sar_product_line AND LKP_Tgt_Temp_Policy_Transaction.source_sar_sp_use_code = EXP_Lookup_Values.sar_special_use_lkp AND LKP_Tgt_Temp_Policy_Transaction.source_statistical_code = EXP_Lookup_Values.sar_statistical_code_lkp AND LKP_Tgt_Temp_Policy_Transaction.rsn_amended_code = EXP_Lookup_Values.sar_rsn_amend_code AND LKP_Tgt_Temp_Policy_Transaction.rating_date_ind = EXP_Lookup_Values.sar_rating_date_ind_Out\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE IIF( ISNULL(temp_pol_trans_id),TRUE,FALSE)),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE IIF( NOT ISNULL(temp_pol_trans_id),TRUE,FALSE)),\nSEQ_Temp_Trans_AK_ID AS (\n\tCREATE SEQUENCE SEQ_Temp_Trans_AK_ID\n\tSTART = 0\n\tINCREMENT = 1;\n),\ntemp_policy_transaction_Insert AS (\n\tINSERT INTO @{pipeline().parameters.SOURCE_TABLE_OWNER}.temp_policy_transaction\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, temp_pol_trans_ak_id, cov_ak_id, sar_id, section_code, rsn_amended_code, part_code, risk_state_prov_code, risk_zip_code, terr_code, tax_loc, class_code, exposure, sub_line_code, source_sar_asl, source_sar_prdct_line, source_sar_sp_use_code, source_statistical_code, rating_date_ind)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tSEQ_Temp_Trans_AK_ID.NEXTVAL AS TEMP_POL_TRANS_AK_ID, \n\tCOV_AK_ID, \n\tSAR_ID, \n\tsar_section_Out AS SECTION_CODE, \n\tsar_rsn_amend_code AS RSN_AMENDED_CODE, \n\tsar_part_code AS PART_CODE, \n\tsar_state_Out AS RISK_STATE_PROV_CODE, \n\tsar_zip_postal_code_out AS RISK_ZIP_CODE, \n\tsar_loc_prov_territory_Out AS TERR_CODE, \n\tsar_tax_location_out AS TAX_LOC, \n\tsar_class_code_out AS CLASS_CODE, \n\tsar_exposure AS EXPOSURE, \n\tsar_sub_line_out AS SUB_LINE_CODE, \n\tsar_annual_state_line_out AS SOURCE_SAR_ASL, \n\tsar_product_line AS SOURCE_SAR_PRDCT_LINE, \n\tsar_special_use_out AS SOURCE_SAR_SP_USE_CODE, \n\tsar_statistical_code_out AS SOURCE_STATISTICAL_CODE, \n\tsar_rating_date_ind_Out AS RATING_DATE_IND\n\tFROM RTR_Insert_Update_INSERT\n),\nUPD_Update AS (\n\tSELECT\n\ttemp_pol_trans_id AS temp_pol_trans_id3, \n\tcov_ak_id AS cov_ak_id3, \n\tcrrnt_snpsht_flag AS crrnt_snpsht_flag3, \n\taudit_id AS audit_id3, \n\teff_from_date AS eff_from_date3, \n\teff_to_date AS eff_to_date3, \n\tsource_sys_id AS source_sys_id3, \n\tcreated_date AS created_date3, \n\tmodified_date AS modified_date3, \n\tsar_id AS sar_id3, \n\tsar_section_Out AS sar_section_Out3, \n\tsar_rsn_amend_code AS sar_rsn_amend_code3, \n\tsar_part_code AS sar_part_code3, \n\tsar_state_Out AS sar_state_Out3, \n\tsar_zip_postal_code_out AS sar_zip_postal_code_out3, \n\tsar_loc_prov_territory_Out AS sar_loc_prov_territory_Out3, \n\tsar_tax_location_out AS sar_tax_location_out3, \n\tsar_class_code_out AS sar_class_code_out3, \n\tsar_exposure AS sar_exposure3, \n\tsar_sub_line_out AS sar_sub_line_out3, \n\tsar_annual_state_line_out AS sar_annual_state_line_out3, \n\tsar_product_line AS sar_product_line3, \n\tsar_special_use_out AS sar_special_use_out3, \n\tsar_statistical_code_out AS sar_statistical_code_out3, \n\tsar_rating_date_ind_Out AS sar_rating_date_ind_Out3\n\tFROM RTR_Insert_Update_UPDATE\n),\ntemp_policy_transaction_Update AS (\n\tMERGE INTO temp_policy_transaction AS T\n\tUSING UPD_Update AS S\n\tON T.temp_pol_trans_id = S.temp_pol_trans_id3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag3, T.eff_from_date = S.eff_from_date3, T.eff_to_date = S.eff_to_date3, T.source_sys_id = S.source_sys_id3, T.modified_date = S.modified_date3, T.sar_id = S.sar_id3, T.section_code = S.sar_section_Out3, T.rsn_amended_code = S.sar_rsn_amend_code3, T.part_code = S.sar_part_code3, T.risk_state_prov_code = S.sar_state_Out3, T.risk_zip_code = S.sar_zip_postal_code_out3, T.terr_code = S.sar_loc_prov_territory_Out3, T.tax_loc = S.sar_tax_location_out3, T.class_code = S.sar_class_code_out3, T.exposure = S.sar_exposure3, T.sub_line_code = S.sar_sub_line_out3, T.source_sar_asl = S.sar_annual_state_line_out3, T.source_sar_prdct_line = S.sar_product_line3, T.source_sar_sp_use_code = S.sar_special_use_out3, T.source_statistical_code = S.sar_statistical_code_out3, T.rating_date_ind = S.sar_rating_date_ind_Out3\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Policy DataWarehouse/"
        },
        "annotations": []
    }
}