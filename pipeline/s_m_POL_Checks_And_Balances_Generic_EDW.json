{
    "name": "s_m_POL_Checks_And_Balances_Generic_EDW",
    "properties": {
        "activities": [
            {
                "name": "m_POL_Checks_And_Balances_Generic_EDW",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_EDW_current_row_count AS (\n\t-- check multiple snapshot flag values of 1\r\n\tSELECT \r\n\t\tcount(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) as EDW_count,\r\n\t\t'Count of @{pipeline().parameters.SOURCE_TABLE_AK_ID} from @{pipeline().parameters.SOURCE_TABLE_NAME} with more than one record with crrnt snpsht flag 1 = ' + convert(varchar,count(@{pipeline().parameters.SOURCE_TABLE_AK_ID})) as check_out_message,\r\n\t\t'@{pipeline().parameters.SOURCE_TABLE_NAME}' as target_name\r\n\tFROM \r\n\t\t(SELECT @{pipeline().parameters.SOURCE_TABLE_AK_ID}, COUNT(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) AS Expr1\r\n\t             FROM   @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME}\r\n\t             WHERE  (crrnt_snpsht_flag = 1)\r\n\t             GROUP BY @{pipeline().parameters.SOURCE_TABLE_AK_ID}\r\n\t             HAVING (COUNT(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) > 1)) Generic\r\n\t\r\n\t\r\n\tUNION\r\n\t\r\n\t\r\n\t-- continuity of records check\r\n\tSELECT \r\n\t\tCOUNT(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) as EDW_count, \r\n\t\t'Count of @{pipeline().parameters.SOURCE_TABLE_AK_ID} from @{pipeline().parameters.SOURCE_TABLE_NAME} table where @{pipeline().parameters.SOURCE_TABLE_AK_ID} have no continuity in eff_from_date & eff_to_date = ' + convert(varchar,count(@{pipeline().parameters.SOURCE_TABLE_AK_ID})) as Check_Out_Message, \r\n\t\t'@{pipeline().parameters.SOURCE_TABLE_NAME}' as Target_Name \r\n\tFROM \r\n\t\t(SELECT @{pipeline().parameters.SOURCE_TABLE_AK_ID} \r\n\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME} a \r\n\t\t\tWHERE not exists \r\n\t\t\t(SELECT 1 \r\n\t\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME} b \r\n\t\t\t\twhere a.@{pipeline().parameters.SOURCE_TABLE_AK_ID} = b.@{pipeline().parameters.SOURCE_TABLE_AK_ID} and \r\n\t\t\t\t      b.eff_from_date = dateadd(ss,1,a.eff_to_date)) and\r\n\t\t\t\t      (a.eff_to_date <> '2100-12-31 23:59:59.000'))CP\r\n\t\r\n\tUNION\r\n\t\r\n\t-- effective to date check\r\n\t\r\n\tSELECT \r\n\t\tCOUNT(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) as EDW_count, \r\n\t\t'Count of @{pipeline().parameters.SOURCE_TABLE_AK_ID} in @{pipeline().parameters.SOURCE_TABLE_NAME} table with crrnt_snpsht_flag = 1 that has Eff To Date not as 12/31/2100 = ' + CONVERT(varchar,count(@{pipeline().parameters.SOURCE_TABLE_AK_ID})) as check_out_message,\r\n\t\t'@{pipeline().parameters.SOURCE_TABLE_NAME}' as target_name \r\n\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME} \r\n\t\tWHERE \r\n\t\t\tcrrnt_snpsht_flag = 1 and \r\n\t\t\teff_to_date <> '2100-12-31 23:59:59.000'\r\n\t\r\n\tUNION\r\n\t-- check that no record with snapshot=0 has max eff to date\r\n\t\r\n\tSELECT \r\n\t\tCOUNT(@{pipeline().parameters.SOURCE_TABLE_AK_ID}) as EDW_count, \r\n\t\t'Count of @{pipeline().parameters.SOURCE_TABLE_AK_ID} in @{pipeline().parameters.SOURCE_TABLE_NAME} table with crrnt_snpsht_flag = 0 that has Eff To Date as 12/31/2100 = ' + CONVERT(varchar,count(@{pipeline().parameters.SOURCE_TABLE_AK_ID})) as check_out_message,\r\n\t\t'@{pipeline().parameters.SOURCE_TABLE_NAME}' as target_name \r\n\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME} \r\n\t\tWHERE \r\n\t\t\tcrrnt_snpsht_flag = 0 and \r\n\t\t\teff_to_date = '2100-12-31 23:59:59.000'\r\n\t\r\n\t\r\n\t\r\n\t-- specific conditional checks\r\n\t\r\n\t-- multi-key need one for each table because key field will come in blank and invalidate the SQ otherwise\r\n\t----Count of Pol_ak_id from Policy where there are different Pol_key for same Pol_ak_id\r\n\t\r\n\tIF '@{pipeline().parameters.SOURCE_TABLE_NAME}' = 'Policy'\r\n\tBegin\r\n\t\r\n\tSELECT count( Pol_Ak_id) as EDW_count,'Count of Pol_Ak_id from Policy with different pol_key for same Ak_id = ' + convert(varchar,count( Pol_Ak_id)) as check_out_message,'Policy' as target_name\r\n\tFROM (select pol_ak_id,count(pol_key) as EXp1 from V2.policy \r\n\t      where crrnt_snpsht_flag =1 \r\n\t      group by pol_ak_id\r\n\t      having count(pol_key) > 1) PK\r\n\tend\n),\nEXP_AddDefaultInformation AS (\n\tSELECT\n\tEDW_count,\n\tcheck_out_message,\n\t@{pipeline().parameters.WBMI_SESSION_CONTROL_RUN_ID} AS wbmi_session_control_run_id,\n\t'InformS' AS created_user_id,\n\tSYSDATE AS created_date,\n\t'InformS' AS modified_user_id,\n\tSYSDATE AS modified_date,\n\ttarget_name,\n\t-- *INF*: 'E'\r\n\t-- \r\n\t-- //E - Error, W - Warning\n\t'E' AS checkout_type_code\n\tFROM SQ_EDW_current_row_count\n),\nFIL_FilterByEDWRecordCount AS (\n\tSELECT\n\tEDW_count, \n\tcheck_out_message, \n\twbmi_session_control_run_id, \n\tcreated_user_id, \n\tcreated_date, \n\tmodified_user_id, \n\tmodified_date, \n\ttarget_name, \n\tcheckout_type_code\n\tFROM EXP_AddDefaultInformation\n\tWHERE EDW_count>0\n),\nwbmi_checkout_curr_row_count AS (\n\tINSERT INTO wbmi_checkout\n\t(wbmi_session_control_run_id, checkout_type_code, checkout_message, target_name, target_count, created_user_id, created_date, modified_user_id, modified_date)\n\tSELECT \n\tWBMI_SESSION_CONTROL_RUN_ID, \n\tCHECKOUT_TYPE_CODE, \n\tcheck_out_message AS CHECKOUT_MESSAGE, \n\tTARGET_NAME, \n\tEDW_count AS TARGET_COUNT, \n\tCREATED_USER_ID, \n\tCREATED_DATE, \n\tMODIFIED_USER_ID, \n\tMODIFIED_DATE\n\tFROM FIL_FilterByEDWRecordCount\n),\nSQ_wbmi_checkout1 AS (\n\tselect \r\n\twbmi_checkout.checkout_message + ' <BR> <BR> ',\r\n\twbmi_batch_control_run.email_address\r\n\tfrom \r\n\tdbo.wbmi_checkout wbmi_checkout,\r\n\tdbo.wbmi_session_control_run wbmi_session_control_run,\r\n\tdbo.wbmi_batch_control_run wbmi_batch_control_run\r\n\twhere\r\n\twbmi_checkout.checkout_type_code = 'E' and \r\n\twbmi_checkout.wbmi_session_control_run_id = wbmi_session_control_run.wbmi_session_control_run_id and\r\n\twbmi_session_control_run.current_ind = 'Y'  and \r\n\twbmi_session_control_run.wbmi_batch_control_run_id = wbmi_batch_control_run.wbmi_batch_control_run_id and\r\n\twbmi_checkout.wbmi_session_control_run_id = @{pipeline().parameters.WBMI_SESSION_CONTROL_RUN_ID}\r\n\torder by wbmi_checkout_id\n),\nEXP_Email_Subject1 AS (\n\tSELECT\n\temail_address,\n\tcheckout_message,\n\t-- *INF*: Abort('There are issues with the EDW data')\n\tAbort('There are issues with the EDW data'\n\t) AS error\n\tFROM SQ_wbmi_checkout1\n),\nFIL_STOP_PROCESSING AS (\n\tSELECT\n\tcheckout_message, \n\terror\n\tFROM EXP_Email_Subject1\n\tWHERE FALSE\n),\nwbmi_checkout_dummy_target AS (\n\tINSERT INTO wbmi_checkout\n\t(checkout_message)\n\tSELECT \n\tCHECKOUT_MESSAGE\n\tFROM FIL_STOP_PROCESSING\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905516"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604223"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:21:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:54:57"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_InformaticaAuditControl"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "V2"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "SOURCE_TABLE_NAME": {
                "type": "string",
                "defaultValue": "Coverage"
            },
            "SOURCE_TABLE_AK_ID": {
                "type": "string",
                "defaultValue": "cov_ak_id"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}