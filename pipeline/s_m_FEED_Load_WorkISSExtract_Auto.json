{
    "name": "s_m_FEED_Load_WorkISSExtract_Auto",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WorkISSExtract_Auto",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_SupPackageModificationAdjustmentGroup AS (\n\tSELECT\n\tPackageModificationAdjustmentGroupDescription,\n\tSourceSystemId,\n\tPackageModificationAdjustmentGroupCode\n\tFROM (\n\t\tSELECT \n\t\t\tPackageModificationAdjustmentGroupDescription,\n\t\t\tSourceSystemId,\n\t\t\tPackageModificationAdjustmentGroupCode\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupPackageModificationAdjustmentGroup\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SourceSystemId,PackageModificationAdjustmentGroupCode ORDER BY PackageModificationAdjustmentGroupDescription) = 1\n),\nLKP_Policy AS (\n\tSELECT\n\tpol_key\n\tFROM (\n\t\tselect p.pol_key as Pol_Key \r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\ton p.pol_ak_id=pc.PolicyAKID\r\n\t\tand PC.sourcesystemid='DCT' and p.crrnt_snpsht_flag=1 and PC.CurrentSnapshotFlag=1\r\n\t\twhere pc.InsuranceLine like 'SBOP%'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_key) = 1\n),\nLKP_Policy_GL_PR AS (\n\tSELECT\n\tpol_key\n\tFROM (\n\t\tselect distinct a.pol_key  as pol_key from\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid and PC.sourcesystemid='DCT' and p.crrnt_snpsht_flag=1 and PC.CurrentSnapshotFlag=1\r\n\t\tand PC.InsuranceLine ='GeneralLiability') a  \r\n\t\tinner join\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand PC.sourcesystemid='DCT' and p.crrnt_snpsht_flag=1 and PC.CurrentSnapshotFlag=1\r\n\t\tand PC.InsuranceLine ='Property') b \r\n\t\tON  a.PolicyAKID=b.PolicyAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_key) = 1\n),\nLKP_archGLDCOccpancyType AS (\n\tSELECT\n\tOccupancyType,\n\tPolicyNumber\n\tFROM (\n\t\tselect distinct dcgl.OccupancyTypeMonoline as  OccupancyType, dr.PolicyNumber as PolicyNumber\r\n\t\t from archDCGLOccupancyStaging dcgl inner join (Select distinct dp.PolicyNumber+PolicyVersionFormatted as PolicyNumber,  max(dr.GL_RiskId) as GL_RiskId,\r\n\t\t max(dr.SessionId) as SessionId,dl.type\r\n\t\t From  VWArchWorkDCTPolicy dp inner join   archDCLineStaging dl\r\n\t\t on\r\n\t\t dp.PolicyId=dl.PolicyId and\r\n\t\t  dp.SessionId=dl.SessionId \r\n\t\t  -- and dp.AuditId=dl.AuditId \r\n\t\t inner join  archDCGLRiskStaging dr\r\n\t\t on dr.LineId=dl.LineId and\r\n\t\t dr.SessionId=dl.SessionId \r\n\t\t --and dr.AuditId=dl.AuditId\r\n\t\t where \r\n\t\t dl.type='GeneralLiability'\r\n\t\t group by\r\n\t\t dp.PolicyNumber+PolicyVersionFormatted, dr.SessionId,dl.type\r\n\t\t )  dr\r\n\t\t on dcgl.GL_RiskId=dr.GL_RiskId and\r\n\t\t dcgl.SessionId=dr.SessionId \r\n\t\t --and dcgl.AuditId=dr.AuditId\r\n\t\t where dcgl.OccupancyTypeMonoline is not null\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber ORDER BY OccupancyType) = 1\n),\nLKP_archCFDCOccpancyType AS (\n\tSELECT\n\tOccupancyType,\n\tPolicyNumber\n\tFROM (\n\t\tselect distinct \r\n\t\tdo.OccupancyType as OccupancyType, db.PolicyNumber as PolicyNumber\r\n\t\tFrom  ArchDCCFlocationStaging dloc inner join\r\n\t\t (\r\n\t\tSELECT distinct dp.PolicyNumber+PolicyVersionFormatted as PolicyNumber,max(db.CFlocationid) as CFlocationid, max(db.Sessionid) as  sessionid, max(db.CFBuildingId) as CFBuildingId,dl.type as type\r\n\t\tFrom VWArchWorkDCTPolicy dp inner join \r\n\t\t  archDCLineStaging dl\r\n\t\ton\r\n\t\tdp.PolicyId=dl.PolicyId \r\n\t\tand dp.Sessionid=dl.Sessionid\r\n\t\t inner join ArchDCCFBuildingStage db\r\n\t\ton dl.LineId=db.LineId\r\n\t\tand dl.Sessionid=db.Sessionid\r\n\t\twhere  dl.Type in('CommercialAuto','CommercialUmbrella','Property') and db.description like 'Building #1%' \r\n\t\tgroup by dp.PolicyNumber+PolicyVersionFormatted, dl.type\r\n\t\t) db\r\n\t\ton dloc.CF_locationid = db.CFlocationid AND  dloc.Sessionid=db.Sessionid and dloc.description='Primary Location'\r\n\t\tINNER JOIN archDCCFRiskStaging dr\r\n\t\ton dr.CF_BuildingId=db.CFBuildingId\r\n\t\tand dr.Sessionid=db.Sessionid\r\n\t\tinner join archDCCFOccupancyStaging do\r\n\t\ton do.CF_RiskId=dr.CF_RiskId \r\n\t\tand do.Sessionid=dr.Sessionid  and do.OccupancyType is not null\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber ORDER BY OccupancyType) = 1\n),\nLKP_Policy_SBOP AS (\n\tSELECT\n\tProgramAKId,\n\tpol_key\n\tFROM (\n\t\tselect distinct a.pol_key as pol_key,a.ProgramAKId  as ProgramAKId from\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID,P.ProgramAKId as ProgramAKId\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand PC.sourcesystemid='DCT' and p.crrnt_snpsht_flag=1 and PC.CurrentSnapshotFlag=1\r\n\t\tand PC.InsuranceLine ='SBOPGeneralLiability') a  \r\n\t\tinner join\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID,P.ProgramAKId as ProgramAKId\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON p.pol_ak_id=pc.policyakid\r\n\t\tand PC.sourcesystemid='DCT' and p.crrnt_snpsht_flag=1 and PC.CurrentSnapshotFlag=1\r\n\t\tand PC.InsuranceLine ='SBOPProperty') b \r\n\t\tON  a.PolicyAKID=b.PolicyAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY ProgramAKId) = 1\n),\nLKP_Get_Parent_CoverageGuid AS (\n\tSELECT\n\tarchWorkDCTCoverageTransactionId,\n\tCoverageGUID,\n\tPolicyKey,\n\tExtractDate,\n\tin_pol_key,\n\tin_CoverageGUID\n\tFROM (\n\t\tSELECT\r\n\t\tWorkDCTCoverageTransaction.archWorkDCTCoverageTransactionId as archWorkDCTCoverageTransactionId ,\r\n\t\tWorkDCTCoverageTransaction.CoverageGUID as CoverageGUID,\r\n\t\tWorkDCTPolicy.PolicyNumber+ WorkDCTPolicy.PolicyVersionFormatted as PolicyKey,\r\n\t\tWorkDCTCoverageTransaction.ExtractDate as ExtractDate\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archWorkDCTCoverageTransaction WorkDCTCoverageTransaction\r\n\t\t\r\n\t\tinner join \r\n\t\t( select distinct LocationAssociationId,CoverageId,LineId,SessionId From\r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archWorkDCTTransactionInsuranceLineLocationBridge WorkDCTTransactionInsuranceLineLocationBridge\r\n\t\twhere \r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,WorkDCTTransactionInsuranceLineLocationBridge.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) \r\n\t\t) WorkDCTTransactionInsuranceLineLocationBridge\r\n\t\ton WorkDCTCoverageTransaction.CoverageId=WorkDCTTransactionInsuranceLineLocationBridge.CoverageId\r\n\t\tand\r\n\t\tWorkDCTCoverageTransaction.SessionId=WorkDCTTransactionInsuranceLineLocationBridge.SessionId\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archWorkDCTLocation WorkDCTLocation\r\n\t\ton WorkDCTTransactionInsuranceLineLocationBridge.LocationAssociationId=WorkDCTLocation.LocationAssociationId\r\n\t\tand\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,WorkDCTLocation.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) \r\n\t\t\r\n\t\tinner join \r\n\t\t(select distinct LineId, SessionId,PolicyId from \r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archWorkDCTInsuranceLine WorkDCTInsuranceLine\r\n\t\twhere LineType='CommercialAuto'\r\n\t\tand \r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,WorkDCTInsuranceLine.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) \r\n\t\t) WorkDCTInsuranceLine\r\n\t\ton\r\n\t\tWorkDCTInsuranceLine.LineId=WorkDCTTransactionInsuranceLineLocationBridge.LineId\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwarchWorkDCTPolicy WorkDCTPolicy\r\n\t\ton WorkDCTInsuranceLine.PolicyId=WorkDCTPolicy.PolicyId \r\n\t\tand WorkDCTPolicy.PolicyStatus<>'Quote'\r\n\t\tand WorkDCTPolicy.TransactionState='committed'\r\n\t\tand WorkDCTPolicy.TransactionType  NOT IN ('RescindNonRenew','Reporting','VoidReporting','Information','Dividend','RevisedDividend','VoidDividend','NonRenew','RescindCancelPending','CancelPending')\r\n\t\tand \r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,WorkDCTPolicy.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) \r\n\t\t\r\n\t\tWHERE\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,WorkDCTCoverageTransaction.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) and WorkDCTCoverageTransaction.CoverageDeleteFlag!=1\r\n\t\tORDER by WorkDCTCoverageTransaction.ExtractDate --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID,PolicyKey ORDER BY archWorkDCTCoverageTransactionId DESC) = 1\n),\nLKP_Alt_CoverageGuid AS (\n\tSELECT\n\tCoverageGuid,\n\tarchWorkDCTCoverageTransactionid,\n\tin_archWorkDCTCoverageTransactionId\n\tFROM (\n\t\tselect\r\n\t\tDistinct first_value(B.Id) over(partition by B.Id, A.ExtractDate   order by A.ExtractDate desc) as CoverageGuid,\r\n\t\tC.archWorkDCTCoverageTransactionid as archWorkDCTCoverageTransactionid\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archWorkDCTCoverageTransaction C\r\n\t\tinner join\r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archDCCoverageStaging A  \r\n\t\ton A.CoverageId=C.CoverageId and A.AuditId=C.Auditid and A.SessionId=C.sessionid\r\n\t\tand DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,A.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\tinner join \r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.archDCCoverageStaging B \r\n\t\ton  A.ObjectId=B.CoverageId and A.SessionId=B.SessionId and A.AuditId=B.AuditId and B.objectid=C.ParentCoverageObjectId\r\n\t\tand DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,B.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\twhere\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,C.ExtractDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY archWorkDCTCoverageTransactionid ORDER BY CoverageGuid) = 1\n),\nLKP_CoverageDeductible_Premium_Alt_Combined_Output AS (\n\tSELECT\n\tCombinedCoverageDeductibleInfo,\n\tCoverageGUID,\n\tpol_key\n\tFROM (\n\t\tSELECT DISTINCT\r\n\t\tCD.CoverageDeductibleValue + '|' + CD.CoverageDeductibleType as CombinedCoverageDeductibleInfo,\r\n\t\tCD.CoverageDeductibleType AS CoverageDeductibleType,\r\n\t\tCD.CoverageDeductibleValue AS CoverageDeductibleValue,\r\n\t\tRC.CoverageGuid AS CoverageGUID,\r\n\t\tP.pol_key as pol_key\r\n\t\tFROM\r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD\r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\t\tON CD.CoverageDeductibleId = CDB.CoverageDeductibleId\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\tON CDB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tAND PT.SourceSystemID='DCT'\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\t\tON PT.RatingCoverageAKId = RC.RatingCoverageAKID\r\n\t\tand PT.effectivedate=RC.effectivedate\r\n\t\tInner Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC \r\n\t\tON PC.PolicyCoverageAKID=RC.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy P \r\n\t\ton P.pol_ak_id=PC.PolicyAKID and P.crrnt_snpsht_flag=1\r\n\t\tinner JOIN\r\n\t\t(\r\n\t\tselect PolicyAKID as pol_ak_id from PremiumMasterCalculation where\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,PremiumMasterCalculation.PremiumMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\tUNION\r\n\t\tselect pol_ak_id as pol_ak_id from loss_master_calculation where\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,loss_master_calculation.loss_master_run_date),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\t) Calc on calc.pol_ak_id=P.pol_ak_id\r\n\t\t--WHERE CD.CoverageDeductibleType in ('CollisionDeductible','ComprehensiveDeductible')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID,pol_key ORDER BY CombinedCoverageDeductibleInfo DESC) = 1\n),\nLKP_CoverageDeductible_Premium_Alt_LOSS_Output AS (\n\tSELECT\n\tCombinedCoverageDeductibleInfo,\n\tCoverageGUID,\n\tpol_key,\n\tEffectiveDate,\n\tExpirationDate\n\tFROM (\n\t\tSELECT DISTINCT\r\n\t\tCD.CoverageDeductibleValue + '|' + CD.CoverageDeductibleType as CombinedCoverageDeductibleInfo,\r\n\t\tCD.CoverageDeductibleType AS CoverageDeductibleType,\r\n\t\tCD.CoverageDeductibleValue AS CoverageDeductibleValue,\r\n\t\tRC.CoverageGuid AS CoverageGUID,\r\n\t\tP.pol_key as pol_key,\r\n\t\t-- use lower of date, based loosely on how coveragedetaildim takes the lower value\r\n\t\tCASE \r\n\t\tWHEN RC.RatingCoverageEffectiveDate < PT.PremiumTransactionEffectiveDate THEN RC.RatingCoverageEffectiveDate\r\n\t\tELSE PT.PremiumTransactionEffectiveDate \r\n\t\tEND as  EffectiveDate, \r\n\t\tCASE\r\n\t\tWHEN RC.RatingCoverageExpirationDate < PT.PremiumTransactionExpirationDate THEN RC.RatingCoverageExpirationDate\r\n\t\tELSE PT.PremiumTransactionExpirationDate \r\n\t\tEND as ExpirationDate\r\n\t\tFROM\r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD\r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\t\tON CD.CoverageDeductibleId = CDB.CoverageDeductibleId\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\tON CDB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tAND PT.SourceSystemID='DCT'\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\t\tON PT.RatingCoverageAKId = RC.RatingCoverageAKID\r\n\t\tand PT.effectivedate=RC.effectivedate\r\n\t\tInner Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC \r\n\t\tON PC.PolicyCoverageAKID=RC.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy P \r\n\t\ton P.pol_ak_id=PC.PolicyAKID and P.crrnt_snpsht_flag=1\r\n\t\tINNER JOIN\r\n\t\t(\r\n\t\tselect PolicyAKID as pol_ak_id from PremiumMasterCalculation where\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,PremiumMasterCalculation.PremiumMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\tUNION\r\n\t\tselect pol_ak_id as pol_ak_id from loss_master_calculation where\r\n\t\tDATEADD(QUARTER,1+DATEDIFF(QUARTER,0,loss_master_calculation.loss_master_run_date),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\t) Calc on calc.pol_ak_id=P.pol_ak_id\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID,pol_key,EffectiveDate,ExpirationDate ORDER BY CombinedCoverageDeductibleInfo DESC) = 1\n),\nLKP_GetAdditionalLimitValue AS (\n\tSELECT\n\tAdditionalLimit,\n\tin_PremiumTransactionAKID,\n\tPremiumTransactionAKId\n\tFROM (\n\t\tSELECT DISTINCT PIP.AdditionalLimit  as AdditionalLimit ,\r\n\t\tAWPT.PremiumTransactionAKId as PremiumTransactionAKId\r\n\t\tFROM\r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.ArchWorkPremiumTransaction AWPT with (nolock)\r\n\t\tINNER JOIN\r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.dbo.archWorkDCTCoverageTransaction ACT with (nolock) on AWPT.PremiumTransactionStageId=ACT.CoverageId\r\n\t\tINNER JOIN\r\n\t\t@{pipeline().parameters.STAGING_DATABASE_NAME}.dbo.archDCCACoveragePIPStage PIP with (nolock)\r\n\t\tON ACT.CoverageId=PIP.CoverageId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId ORDER BY AdditionalLimit DESC) = 1\n),\nLKP_CoverageLimitOverride AS (\n\tSELECT\n\tCoverageLimitValue,\n\tPremiumTransactionAKID,\n\tCoverageLimitType\n\tFROM (\n\t\tselect \r\n\t\tCL.CoverageLimitValue as CoverageLimitValue, \r\n\t\tCL.CoverageLimitType as CoverageLimitType,\r\n\t\tCLB.PremiumTransactionAKId as PremiumTransactionAKId \r\n\t\tFROM\r\n\t\tCoverageLimitBridge CLB with (NOLOCK)\r\n\t\t INNER JOIN \r\n\t\t CoverageLimit CL on CLB.CoverageLimitId=CL.CoverageLimitId\r\n\t\t WHERE \r\n\t\tCL.CoverageLimitType in ('PersonalInjuryProtectionBasicLimit','PersonalInjuryProtectionExcessLimit')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID,CoverageLimitType ORDER BY CoverageLimitValue) = 1\n),\nLKP_CoverageDeductible_DCT AS (\n\tSELECT\n\tCoverageDeductibleValue,\n\tPremiumTransactionAKID\n\tFROM (\n\t\tSELECT DISTINCT CD.CoverageDeductibleValue AS CoverageDeductibleValue,\r\n\t\tPT.PremiumTransactionAKID AS PremiumTransactionAKID\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB \r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible cd on CDB.CoverageDeductibleId=cd.CoverageDeductibleId\r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT ON PT.PremiumTransactionAKID = CDB.PremiumTransactionAKID\r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC on PT.RatingCoverageAKID=RC.RatingCoverageAKID and RC.EffectiveDate=PT.EffectiveDate  \r\n\t\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on PC.PolicyCoverageAKID=RC.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\t\tWHERE CDB.SourceSystemID = 'DCT' AND PT.SourceSystemID = 'DCT'\r\n\t\tAND PC.Insuranceline = 'CommercialAuto'\r\n\t\tAND CASE WHEN RC.CoverageType in ('OTC','Collision') AND CoverageDeductibleType in ('ComprehensiveDeductible','CollisionDeductible') THEN 1 \r\n\t\t         WHEN RC.CoverageType in ('OTC','Collision') AND CoverageDeductibleType NOT in ('ComprehensiveDeductible','CollisionDeductible') THEN 0\r\n\t\t         WHEN RC.CoverageType in ('CollisionBroadColl','CollisionLmtdColl') AND CoverageDeductibleType in ('ComprehensiveDeductible', 'CollisionDeductible', 'BroadCollisionStandard', 'LimitedCollisionStandard') THEN 1 \r\n\t\t \tWHEN RC.CoverageType in ('CollisionBroadColl','CollisionLmtdColl') AND CoverageDeductibleType NOT in ('ComprehensiveDeductible', 'CollisionDeductible', 'BroadCollisionStandard', 'LimitedCollisionStandard') THEN 0 \r\n\t\t    ELSE 1 END = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID ORDER BY CoverageDeductibleValue DESC) = 1\n),\nSQ_Loss AS (\n\tDECLARE @Quarterstartdate as datetime, \r\n\t        @Quarterenddate as datetime\r\n\t\r\n\tSET @Quarterstartdate = DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + @{pipeline().parameters.NO_OF_QUARTERS}, 0)             \r\n\tSET @Quarterenddate =  DATEADD(ss, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1 + @{pipeline().parameters.NO_OF_QUARTERS}, 0)) \r\n\t\r\n\t-- this is used for DCT to get unique coverage deductible when there are multiple\r\n\t;\r\n\twith LMFIDList as\r\n\t(\r\n\tselect \r\n\tDistinct \r\n\tRC.CoverageGUID,\r\n\tisnull(COV.CoverageDeductibleValue,'0') as CoverageDeductibleValue, \r\n\tisnull(COV.CoverageDeductibleType,'N/A') as CoverageDeductibleType,\r\n\tLMC.PremiumTransactionAKID as PremiumTransactionAKID,\r\n\tPOL.pol_key as PolicyKey,\r\n\tISNULL(CDCA.VehicleNumber,'0')VehicleNumber,\r\n\tISNULL(CDCA.IncludeUIM,'N/A') IncludeUIM,\r\n\tISNULL(CDCA.CoordinationOfBenefits,'N/A') CoordinationOfBenefits,\r\n\tiif(ISNULL(CDCA.CoveredByWorkersCompensationFlag,0) = 1,'T','F') as CoveredByWorkersCompensationFlag,\r\n\tISNULL(CDCA.MedicalExpensesOption,'N/A') MedicalExpensesOption,\r\n\tISNULL(CDCA.SubjectToNoFault,'N/A') SubjectToNoFault,\r\n\tISNULL(RC.CoverageType,'N/A') DCT_CoverageType\r\n\t,CDCA.AdditionalLimitKS\r\n\t,CDCA.AdditionalLimitKY\r\n\t,CDCA.AdditionalLimitMN\r\n\t,CDCA.FullGlassIndicator\r\n\tfrom \r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC \r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF\r\n\t  on LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC \r\n\t  on LMC.RatingCoverageAKId=RC.RatingCoverageAKID and RC.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC \r\n\t  on PC.PolicyCoverageAKID=LMC.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\t on PC.PolicyAKID=POL.pol_ak_id and POL.crrnt_snpsht_flag=1\r\n\tleft JOIN  \r\n\t  ( select CDB.PremiumTransactionAKID, CD.CoverageDeductibleValue, CD.CoverageDeductibleType, ROW_NUMBER() over (Partition by   CDB.PremiumTransactionAKID order by CDB.CreatedDate DESC,CD.CoverageDeductibleValue  Desc)\r\n\t  as rn\r\n\tfrom\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD \r\n\t  on CDB.CoverageDeductibleId=CD.CoverageDeductibleId\r\n\t  and  CD.CoverageDeductibleType in ('CollisionDeductible','ComprehensiveDeductible')\r\n\t) Cov \r\n\t  on LMC.PremiumTransactionAKID=COV.PremiumTransactionAKID and Cov.rn=1\r\n\t\r\n\t--- Added this piece as part of VSTS-91092\r\n\t  left JOIN  \r\n\t  ( select CDCA.IncludeUIM,CDCA.VehicleNumber,PT.PremiumTransactionAKID,CoordinationOfBenefits,CoveredByWorkersCompensationFlag,MedicalExpensesOption,SubjectToNoFault, CDCA.AdditionalLimitKS, CDCA.AdditionalLimitKY, CDCA.AdditionalLimitMN ,CDCA.FullGlassIndicator\r\n\tfrom\r\n\tDBO.CoverageDetailCommercialAuto CDCA\r\n\tinner join DBO.PremiumTransaction PT \r\n\t  on CDCA.PremiumTransactionID=PT.PremiumTransactionID\r\n\t  ) CDCA \r\n\t  on LMC.PremiumTransactionAKID=CDCA.PremiumTransactionAKID\r\n\t--- Added this piece as part of VSTS-91092\r\n\t\r\n\tWHERE\r\n\tPC.InsuranceLine in ('CommercialAuto')\r\n\tAND RC.CoverageType<>'WB516CA' \r\n\tAND LMC.trans_kind_code='D'\r\n\tAND LMC.loss_master_run_date between @Quarterstartdate and @Quarterenddate\r\n\tAND LMF.audit_id<>-9\r\n\tAnd (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0 or LMF.eom_unpaid_loss_adjust_exp <>0 or LMF.paid_exp_amt<>0)\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2} \r\n\t)\r\n\t\r\n\t\r\n\tSELECT distinct \r\n\tLMC.loss_master_calculation_id,\r\n\tLMC.loss_master_run_date,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tOCC.claim_loss_date,\r\n\tLMC.sub_line_code,\r\n\tLMC.class_code  as class_code ,\r\n\tCT.cause_of_loss,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_key,\r\n\tOCC.claim_occurrence_num,\r\n\tCPO.claimant_num,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMC.paid_loss_amt else 0 end) as paid_loss_amt,\r\n\t(case when LMC.financialtypecode = 'D' and LMC.trans_kind_code = 'D' Then LMC.outstanding_amt Else 0 End ) as outstanding_amt,\r\n\tCCD.pms_type_bureau_code,\r\n\tSC.RiskUnitGroup,\r\n\tCCD.PolicySourceID,\r\n\t'N/A' AS RiskType,\r\n\tSC.StatisticalCoverageAKID,\r\n\t-1 as RatingCoverageAKID,\r\n\tPOL.pol_exp_date,\r\n\tOCC.s3p_claim_num,\r\n\tCT.claim_trans_id,\r\n\tCCD.claimant_cov_det_ak_id,\r\n\tcase when sub_asl_num IS NULL then asl_num\r\n\twhen ltrim(rtrim(sub_asl_num))= 'N/A' then asl_num \r\n\telse sub_asl_num \r\n\tend as ASL_NUM,\r\n\tPC.InsuranceLine,\r\n\tPOL.pol_num,\r\n\tLMC.statistical_code1,\r\n\tISG.InsuranceSegmentCode,\r\n\tRL.ZipPostalCode,\r\n\tLMC.exposure,\r\n\tIRC.CoverageCode,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMF.paid_exp_amt else 0 end) as DirectALAEPaidIR,\r\n\t(case when LMC.financialtypecode = 'E' and LMC.trans_kind_code = 'D' then LMF.eom_unpaid_loss_adjust_exp else 0 End) as DirectALAEOutstandingER,\r\n\tSC.MajorPerilCode,\r\n\tPOL.pms_pol_lob_code,\r\n\tSC.CoverageGUID,\r\n\tIRC.CoverageGroupCode,\r\n\tCASE WHEN CT.trans_date < @Quarterstartdate THEN LMC.loss_master_run_date ELSE CT.trans_date END AS trans_date,\r\n\tPOL.source_sys_id,\r\n\tISNULL(CD.CoverageDeductibleValue,'0') as CoverageDeductibleValue,\r\n\tRIGHT (RTRIM(CoverageLimitValue) ,5)  CoverageLimitValue,\r\n\tFIRST_VALUE(cl.CoverageLimitType) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitType desc) as CoverageLimitType,\r\n\tLMC.PremiumTransactionAKID,\r\n\tCCD.reserve_ctgry,\r\n\t'0' VehicleNumber,\r\n\t'N/A' IncludeUIM,\r\n\t'N/A' CoordinationOfBenefits,\r\n\t'F' CoveredByWorkersCompensationFlag,\r\n\t'N/A' MedicalExpensesOption,\r\n\t'N/A' SubjectToNoFault,\r\n\t'N/A' DCT_CoverageType\r\n\t,'-1' AdditionalLimitKS\r\n\t,'-1' AdditionalLimitKY\r\n\t,'-1' AdditionalLimitMN\r\n\t,'0' FullGlassIndicator\r\n\tFROM \r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton LMF.asl_dim_id=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC\r\n\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT\r\n\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\tand LMC.crrnt_snpsht_flag=1\r\n\tand CT.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD\r\n\tON CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\tAND CCD.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO\r\n\tON CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\tAND CPO.Crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC\r\n\tON CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\tAND  OCC.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim PD with(nolock)\r\n\ton LMF.pol_dim_id=PD.pol_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_id=PD.edw_pol_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\ton SC.StatisticalCoverageAKID=CCD.StatisticalCoverageAKID\r\n\tand SC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=SC.PolicyCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=LMF.InsuranceReferenceCoverageDimId\r\n\tLEFT JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\tON CDB.PremiumTransactionAKId = LMC.PremiumTransactionAKID\r\n\tLEFT JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD \r\n\tON CD.CoverageDeductibleId = CDB.CoverageDeductibleId\r\n\tAND CD.CoverageDeductibleType in ('CollisionDeductible','ComprehensiveDeductible')\r\n\tLEFT JOIN\r\n\t(@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\ton clb.CoverageLimitId=cl.CoverageLimitId\r\n\t)\r\n\ton LMC.PremiumTransactionAKID=clb.PremiumTransactionAKID\r\n\tand CoverageLimitValue <> 'BasicPIP'\r\n\tWHERE CCD.pms_type_bureau_code IN('AL','AN','AP') \r\n\tAND LMC.trans_kind_code='D'\r\n\tAND LMC.loss_master_run_date between @Quarterstartdate and @Quarterenddate\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48') (line removed - RFC 126190)\r\n\tAnd (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0 or LMF.eom_unpaid_loss_adjust_exp <>0 or LMF.paid_exp_amt<>0) \r\n\tAND LMF.audit_id<>-9\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2}\r\n\t\r\n\t--DCT\r\n\tunion all\r\n\t\r\n\tSELECT distinct \r\n\tLMC.loss_master_calculation_id,\r\n\tLMC.loss_master_run_date,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tOCC.claim_loss_date,\r\n\tLMC.sub_line_code,\r\n\tLMC.class_code class_code,\r\n\tCT.cause_of_loss,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_key,\r\n\tOCC.claim_occurrence_num,\r\n\tCPO.claimant_num,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMC.paid_loss_amt else 0 end) as paid_loss_amt,\r\n\t(case when LMC.financialtypecode = 'D' and LMC.trans_kind_code = 'D' Then LMC.outstanding_amt Else 0 End ) as outstanding_amt,\r\n\tCCD.pms_type_bureau_code,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tCCD.PolicySourceID,\r\n\tLTRIM(RTRIM(RC.RiskType)) AS RiskType,\r\n\t-1 as StatisticalCoverageAKID,\r\n\tRC.RatingCoverageAKID,\r\n\tPOL.pol_exp_date,\r\n\tOCC.s3p_claim_num,\r\n\tCT.claim_trans_id,\r\n\tCCD.claimant_cov_det_ak_id,\r\n\tcase when sub_asl_num IS NULL then asl_num\r\n\twhen ltrim(rtrim(sub_asl_num))= 'N/A' then asl_num \r\n\telse sub_asl_num \r\n\tend as ASL_NUM,\r\n\tPC.InsuranceLine,\r\n\tPOL.pol_num,\r\n\tLMC.statistical_code1,\r\n\tISG.InsuranceSegmentCode,\r\n\tRL.ZipPostalCode,\r\n\tLMC.exposure,\r\n\tIRC.CoverageCode,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMF.paid_exp_amt else 0 end) as DirectALAEPaidIR,\r\n\t(case when LMC.financialtypecode = 'E' and LMC.trans_kind_code = 'D' then LMF.eom_unpaid_loss_adjust_exp else 0 End) as DirectALAEOutstandingER,\r\n\tCCD.major_peril_code MajorPerilCode,\r\n\tPOL.pms_pol_lob_code,\r\n\tRC.CoverageGUID,\r\n\tIRC.CoverageGroupCode,\r\n\tCASE WHEN CT.trans_date< @Quarterstartdate THEN LMC.loss_master_run_date ELSE CT.trans_date END AS trans_date,\r\n\tPOL.source_sys_id,\r\n\tISNULL(CTE.CoverageDeductibleValue,'0') as CoverageDeductibleValue,\r\n\tRIGHT (RTRIM(FIRST_VALUE(cl.CoverageLimitValue) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitValue desc)),5) as CoverageLimitValue,\r\n\tFIRST_VALUE(cl.CoverageLimitType) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitType desc) as CoverageLimitType,\r\n\tLMC.PremiumTransactionAKID,\r\n\tCCD.reserve_ctgry,\r\n\tCTE.VehicleNumber,\r\n\tCTE.IncludeUIM,\r\n\tCTE.CoordinationOfBenefits,\r\n\tCTE.CoveredByWorkersCompensationFlag,\r\n\tCTE.MedicalExpensesOption,\r\n\tCTE.SubjectToNoFault,\r\n\tCTE.DCT_CoverageType\r\n\t,CTE.AdditionalLimitKS\r\n\t,CTE.AdditionalLimitKY\r\n\t,CTE.AdditionalLimitMN\r\n\t,CTE.FullGlassIndicator\r\n\tFROM \r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton LMF.asl_dim_id=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC\r\n\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT\r\n\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\tand LMC.crrnt_snpsht_flag=1\r\n\tand CT.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD\r\n\tON CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\tAND CCD.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO\r\n\tON CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\tAND CPO.Crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC\r\n\tON CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\tAND  OCC.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim PD with(nolock)\r\n\ton LMF.pol_dim_id=PD.pol_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_id=PD.edw_pol_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton CCD.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand (case when LMC.trans_offset_onset_ind='O' and LMC.pms_acct_entered_date != '1800-01-01 01:00:00.000'\r\n\tthen LMC.pms_acct_entered_date\r\n\telse DATEADD(D,1,LMC.loss_master_run_date)  end) between RC.EffectiveDate and RC.ExpirationDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=LMF.InsuranceReferenceCoverageDimId\r\n\tleft join LMFIDList CTE on\r\n\tCTE.CoverageGuid=RC.CoverageGuid and CTE.PremiumTransactionAKID=LMC.PremiumTransactionAKID\r\n\tand CTE.PolicyKey=POL.pol_key\r\n\tleft join\r\n\t(@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\ton clb.CoverageLimitId=cl.CoverageLimitId\r\n\t)\r\n\ton LMC.PremiumTransactionAKID=clb.PremiumTransactionAKID\r\n\tand CoverageLimitValue <> 'BasicPI'\r\n\t\r\n\twhere PC.InsuranceLine in ('CommercialAuto')\r\n\tAND RC.CoverageType<>'WB516CA' \r\n\tAND LMC.trans_kind_code='D'\r\n\tAND LMC.loss_master_run_date between @Quarterstartdate and @Quarterenddate\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48') (line removed - RFC 126190)\r\n\tAnd (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0 or LMF.eom_unpaid_loss_adjust_exp <>0 or LMF.paid_exp_amt<>0) \r\n\tAND LMF.audit_id<>-9\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2}\n),\nAGG_RemoveDuplicate AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\texposure,\n\tCoverageCode,\n\tDirectALAEPaidIR,\n\tDirectALAEOutstandingER,\n\tMajorPerilCode,\n\tpms_pol_lob_code,\n\tCoverageGUID,\n\tCoverageGroupCode,\n\ttrans_date,\n\tsource_sys_id,\n\tCoverageDeductibleValue,\n\tCoverageLimitValue,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\treserve_ctgry,\n\tVehicleNumber,\n\tIncludeUIM,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpenseOption AS MedicalExpensesOption,\n\tSubjectToNoFault,\n\tDCT_CoverageType,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tFullGlassIndicator\n\tFROM SQ_Loss\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY loss_master_calculation_id ORDER BY NULL) = 1\n),\nEXP_GetParentCoveageGUID_Loss AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\texposure,\n\tCoverageCode,\n\tDirectALAEPaidIR,\n\tDirectALAEOutstandingER,\n\tMajorPerilCode,\n\tpms_pol_lob_code,\n\tCoverageGUID,\n\tCoverageGroupCode,\n\ttrans_date,\n\tsource_sys_id,\n\tCoverageDeductibleValue,\n\tCoverageLimitValue,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\treserve_ctgry,\n\tVehicleNumber,\n\tIncludeUIM,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tSubjectToNoFault,\n\tDCT_CoverageType,\n\t-- *INF*: SUBSTR(pol_key, 0, LENGTH(pol_key)-2)\n\tSUBSTR(pol_key, 0, LENGTH(pol_key) - 2) AS o_PolicyNumber,\n\t-- *INF*: SUBSTR(pol_key, -2, 2)\n\tSUBSTR(pol_key, - 2, 2) AS o_PolicyVersionFormatted,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tFullGlassIndicator\n\tFROM AGG_RemoveDuplicate\n),\nRTR_Split_Out_Missing_DCT_Deductibles AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\texposure,\n\tCoverageCode,\n\tDirectALAEPaidIR,\n\tDirectALAEOutstandingER,\n\tMajorPerilCode,\n\tpms_pol_lob_code,\n\tCoverageGUID,\n\tCoverageGroupCode,\n\ttrans_date,\n\tsource_sys_id,\n\tCoverageDeductibleValue,\n\tCoverageLimitValue,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\treserve_ctgry,\n\tVehicleNumber,\n\tIncludeUIM,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tSubjectToNoFault,\n\tDCT_CoverageType,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tFullGlassIndicator\n\tFROM EXP_GetParentCoveageGUID_Loss\n),\nRTR_Split_Out_Missing_DCT_Deductibles_DCTCoverageLookup AS (SELECT * FROM RTR_Split_Out_Missing_DCT_Deductibles WHERE source_sys_id ='DCT' and CoverageDeductibleValue = '0'),\nRTR_Split_Out_Missing_DCT_Deductibles_DEFAULT1 AS (SELECT * FROM RTR_Split_Out_Missing_DCT_Deductibles WHERE NOT ( (source_sys_id ='DCT' and CoverageDeductibleValue = '0') )),\nEXP_DoDeductibleLookupsLoss AS (\n\tSELECT\n\tpol_key,\n\tCoverageGUID,\n\t-- *INF*: :LKP.LKP_GET_PARENT_COVERAGEGUID(pol_key,CoverageGUID)\n\tLKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.archWorkDCTCoverageTransactionId AS v_archWorkDCTCoverageTransactionId,\n\t-- *INF*: IIF(NOT ISNULL(v_archWorkDCTCoverageTransactionId),:LKP.LKP_ALT_COVERAGEGUID(v_archWorkDCTCoverageTransactionId),NULL)\n\tIFF(\n\t    v_archWorkDCTCoverageTransactionId IS NOT NULL,\n\t    LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId.CoverageGuid,\n\t    NULL\n\t) AS v_altCoverageGuid,\n\tv_altCoverageGuid AS o_altCoverageGuid,\n\tclaim_loss_date\n\tFROM RTR_Split_Out_Missing_DCT_Deductibles_DCTCoverageLookup\n\tLEFT JOIN LKP_GET_PARENT_COVERAGEGUID LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID\n\tON LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.CoverageGUID = pol_key\n\tAND LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.PolicyKey = CoverageGUID\n\n\tLEFT JOIN LKP_ALT_COVERAGEGUID LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId\n\tON LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId.archWorkDCTCoverageTransactionid = v_archWorkDCTCoverageTransactionId\n\n),\nEXP_DeductibleAmount_Loss AS (\n\tSELECT\n\tpol_key AS in_pol_key,\n\tCoverageGUID AS in_CoverageGUID,\n\to_altCoverageGuid AS in_altCoverageGuid,\n\tclaim_loss_date AS in_claim_loss_date,\n\t-- *INF*: --:LKP.LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT(in_altCoverageGuid,in_pol_key)\r\n\t-- \r\n\t-- IIF(ISNULL(in_altCoverageGuid),:LKP.LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT(in_CoverageGUID,in_pol_key,in_claim_loss_date),NULL)\n\tIFF(\n\t    in_altCoverageGuid IS NULL,\n\t    LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT_in_CoverageGUID_in_pol_key_in_claim_loss_date.CombinedCoverageDeductibleInfo,\n\t    NULL\n\t) AS v_LKPCoverageDeductibleValue,\n\t-- *INF*: SUBSTR(v_LKPCoverageDeductibleValue,0,INSTR(v_LKPCoverageDeductibleValue,'|')-1)\n\tSUBSTR(v_LKPCoverageDeductibleValue, 0, REGEXP_INSTR(v_LKPCoverageDeductibleValue, '|') - 1) AS v_CoverageDeductibleValue_Value,\n\t-- *INF*: IIF(ISNULL(v_CoverageDeductibleValue_Value),'0',v_CoverageDeductibleValue_Value)\r\n\t-- \r\n\t-- \n\tIFF(v_CoverageDeductibleValue_Value IS NULL, '0', v_CoverageDeductibleValue_Value) AS o_DeductibleAmount\n\tFROM EXP_DoDeductibleLookupsLoss\n\tLEFT JOIN LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT_in_CoverageGUID_in_pol_key_in_claim_loss_date\n\tON LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT_in_CoverageGUID_in_pol_key_in_claim_loss_date.CoverageGUID = in_CoverageGUID\n\tAND LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT_in_CoverageGUID_in_pol_key_in_claim_loss_date.pol_key = in_pol_key\n\tAND LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_LOSS_OUTPUT_in_CoverageGUID_in_pol_key_in_claim_loss_date.EffectiveDate = in_claim_loss_date\n\n),\nUnion_Loss_Remerge AS (\n\tSELECT loss_master_calculation_id, loss_master_run_date, prim_bus_class_code, StateProvinceCode, claim_loss_date, sub_line_code, class_code, cause_of_loss, RiskTerritory, pol_eff_date, pol_key, claim_occurrence_num, claimant_num, paid_loss_amt, outstanding_amt, pms_type_bureau_code, RiskUnitGroup, PolicySourceID, RiskType, StatisticalCoverageAKID, RatingCoverageAKID, pol_exp_date, s3p_claim_num, claim_trans_id, claim_coverage_detail_ak_id, asl_num, InsuranceLine, pol_num, statistical_code1, InsuranceSegmentCode, ZipPostalCode, exposure, CoverageCode, DirectALAEPaidIR, DirectALAEOutstandingER, MajorPerilCode, pms_pol_lob_code, CoverageGroupCode, trans_date, CoverageDeductibleValue AS DeductibleAmount, CoverageLimitValue AS CoverageLimitValue1, CoverageLimitType AS CoverageLimitType1, PremiumTransactionAKID AS PremiumTransactionAKID1, reserve_ctgry, VehicleNumber, IncludeUIM, CoordinationOfBenefits, CoveredByWorkersCompensation, MedicalExpensesOption, SubjectToNoFault, DCT_CoverageType, AdditionalLimitKS AS AdditionalLimitKS1, AdditionalLimitKY AS AdditionalLimitKY1, AdditionalLimitMN AS AdditionalLimitMN1, FullGlassIndicator AS FullGlassIndicator1\n\tFROM RTR_Split_Out_Missing_DCT_Deductibles_DEFAULT1\n\tUNION\n\tSELECT loss_master_calculation_id, loss_master_run_date, prim_bus_class_code, StateProvinceCode, claim_loss_date, sub_line_code, class_code, cause_of_loss, RiskTerritory, pol_eff_date, pol_key, claim_occurrence_num, claimant_num, paid_loss_amt, outstanding_amt, pms_type_bureau_code, RiskUnitGroup, PolicySourceID, RiskType, StatisticalCoverageAKID, RatingCoverageAKID, pol_exp_date, s3p_claim_num, claim_trans_id, claim_coverage_detail_ak_id, asl_num, InsuranceLine, pol_num, statistical_code AS statistical_code1, InsuranceSegmentCode, ZipPostalCode, exposure, CoverageCode, DirectALAEPaidIR, DirectALAEOutstandingER, MajorPerilCode, pms_pol_lob_code, CoverageGroupCode, trans_date, o_DeductibleAmount AS DeductibleAmount, CoverageLimitValue AS CoverageLimitValue1, CoverageLimitType AS CoverageLimitType1, PremiumTransactionAKID AS PremiumTransactionAKID1, reserve_ctgry, VehicleNumber, IncludeUIM, CoordinationOfBenefits, CoveredByWorkersCompensation, MedicalExpensesOption, SubjectToNoFault, DCT_CoverageType, AdditionalLimitKS AS AdditionalLimitKS1, AdditionalLimitKY AS AdditionalLimitKY1, AdditionalLimitMN AS AdditionalLimitMN1, FullGlassIndicator AS FullGlassIndicator1\n\tFROM EXP_DeductibleAmount_Loss\n\t-- Manually join with RTR_Split_Out_Missing_DCT_Deductibles_DCTCoverageLookup\n),\nEXP_Calculate_ClaimNumber AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\t-- *INF*: TO_CHAR(loss_master_run_date, 'YYYYMMDD')\n\tTO_CHAR(loss_master_run_date, 'YYYYMMDD') AS loss_master_run_datekey,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\texposure,\n\tCoverageCode,\n\tDirectALAEPaidIR,\n\tDirectALAEOutstandingER,\n\tMajorPerilCode,\n\t-- *INF*: IIF(ISNULL(claim_occurrence_num) OR IS_SPACES(claim_occurrence_num) OR LENGTH(claim_occurrence_num)=0 OR claim_occurrence_num='N/A' OR IS_NUMBER(claim_occurrence_num)=0, 0, TO_INTEGER(claim_occurrence_num))\n\tIFF(\n\t    claim_occurrence_num IS NULL\n\t    or LENGTH(claim_occurrence_num)>0\n\t    and TRIM(claim_occurrence_num)=''\n\t    or LENGTH(claim_occurrence_num) = 0\n\t    or claim_occurrence_num = 'N/A'\n\t    or REGEXP_LIKE(claim_occurrence_num, '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(claim_occurrence_num AS INTEGER)\n\t) AS v_claim_occurrence_num,\n\t-- *INF*: LTRIM(RTRIM(pol_num))||TO_CHAR(claim_loss_date,'YYMMDD') ||SUBSTR(claim_occurrence_num,2,2)\n\tLTRIM(RTRIM(pol_num)) || TO_CHAR(claim_loss_date, 'YYMMDD') || SUBSTR(claim_occurrence_num, 2, 2) AS o_ClaimNum,\n\tpms_pol_lob_code,\n\tCoverageGroupCode,\n\ttrans_date,\n\tDeductibleAmount,\n\tCoverageLimitValue1,\n\tCoverageLimitType1,\n\tPremiumTransactionAKID1,\n\treserve_ctgry,\n\tVehicleNumber,\n\tIncludeUIM,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tSubjectToNoFault,\n\tDCT_CoverageType,\n\tAdditionalLimitKS1 AS i_AdditionalLimitKS,\n\tAdditionalLimitKY1 AS i_AdditionalLimitKY,\n\tAdditionalLimitMN1 AS i_AdditionalLimitMN,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitKS), -1, i_AdditionalLimitKS)\n\tIFF(i_AdditionalLimitKS IS NULL, - 1, i_AdditionalLimitKS) AS o_AdditionalLimitKS,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitKY), -1, i_AdditionalLimitKY)\n\tIFF(i_AdditionalLimitKY IS NULL, - 1, i_AdditionalLimitKY) AS o_AdditionalLimitKY,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitMN), -1, i_AdditionalLimitMN)\n\tIFF(i_AdditionalLimitMN IS NULL, - 1, i_AdditionalLimitMN) AS o_AdditionalLimitMN,\n\tFullGlassIndicator1\n\tFROM Union_Loss_Remerge\n),\nSRT_Sort_data AS (\n\tSELECT\n\tpol_key, \n\to_ClaimNum AS ClaimNum, \n\tloss_master_run_date, \n\tloss_master_run_datekey, \n\tclaim_coverage_detail_ak_id, \n\tloss_master_calculation_id, \n\tprim_bus_class_code, \n\tStateProvinceCode, \n\tclaim_loss_date, \n\tsub_line_code, \n\tclass_code, \n\tcause_of_loss, \n\tRiskTerritory, \n\tpol_eff_date, \n\tclaim_occurrence_num, \n\tclaimant_num, \n\tpaid_loss_amt, \n\toutstanding_amt, \n\tpms_type_bureau_code, \n\tRiskUnitGroup, \n\tPolicySourceID, \n\tRiskType, \n\tStatisticalCoverageAKID, \n\tRatingCoverageAKID, \n\tpol_exp_date, \n\ts3p_claim_num, \n\tclaim_trans_id, \n\tasl_num, \n\tInsuranceLine, \n\tpol_num, \n\tstatistical_code1, \n\tInsuranceSegmentCode, \n\tZipPostalCode, \n\texposure, \n\tCoverageCode, \n\tDirectALAEPaidIR, \n\tDirectALAEOutstandingER, \n\tMajorPerilCode, \n\tpms_pol_lob_code, \n\tDeductibleAmount, \n\tCoverageGroupCode, \n\ttrans_date, \n\tCoverageLimitValue1, \n\tCoverageLimitType1, \n\tPremiumTransactionAKID1, \n\treserve_ctgry, \n\tVehicleNumber, \n\tIncludeUIM, \n\tCoordinationOfBenefits, \n\tCoveredByWorkersCompensation, \n\tMedicalExpensesOption, \n\tSubjectToNoFault, \n\tDCT_CoverageType, \n\to_AdditionalLimitKS AS AdditionalLimitKS, \n\to_AdditionalLimitKY AS AdditionalLimitKY, \n\to_AdditionalLimitMN AS AdditionalLimitMN, \n\tFullGlassIndicator1\n\tFROM EXP_Calculate_ClaimNumber\n\tORDER BY pol_key ASC, ClaimNum ASC, loss_master_run_date ASC, claim_coverage_detail_ak_id ASC\n),\nLKP_ISSWorkTable_Loss AS (\n\tSELECT\n\tEDWLossMasterCalculationPKId\n\tFROM (\n\t\tSELECT \n\t\t\tEDWLossMasterCalculationPKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialAutoExtract\n\t\tWHERE DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,LossMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) and\r\n\t\tEDWLossMasterCalculationPKId<>-1\r\n\t\t\r\n\t\t--YEAR(LossMasterRunDate)=YEAR(dateadd(year,@{pipeline().parameters.NO_OF_YEARS},GETDATE())) and EDWLossMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWLossMasterCalculationPKId ORDER BY EDWLossMasterCalculationPKId) = 1\n),\nLKP_InceptionToDatePaidLossAmount AS (\n\tSELECT\n\tInceptionToDatePaidLossAmount,\n\tpol_key,\n\tedw_claimant_cov_det_ak_id,\n\ttrans_date,\n\tloss_master_calculation_id\n\tFROM (\n\t\tSELECT DISTINCT\r\n\t\tCASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN SUM(PaidLossAmount) OVER (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by loss_master_run_date) \r\n\t\tELSE InceptionToDatePaidLossAmount END AS InceptionToDatePaidLossAmount,\r\n\t\tpol_key AS pol_key,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date\r\n\t\t,loss_master_calculation_id AS loss_master_calculation_id\r\n\t\tFROM\r\n\t\t(\r\n\t\tSELECT distinct SUM(InceptionToDatePaidLossAmount) over (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by edw_claimant_cov_det_ak_id,trans_date,claim_trans_pk_id) AS InceptionToDatePaidLossAmount,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date,\r\n\t\tInceptionToDatePaidLossAmount AS PaidLossAmount,\r\n\t\tpol_key\r\n\t\t,loss_master_calculation_id\r\n\t\t,loss_master_run_date\r\n\t\t,claim_num\r\n\t\tFROM (\r\n\t\tSELECT  f.direct_loss_paid_including_recoveries AS InceptionToDatePaidLossAmount,  \r\n\t\t\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date<'2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O \r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\tleft join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact lmf\r\n\t\ton lmf.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = lmf.edw_loss_master_calculation_pk_id\r\n\t\tUNION ALL\r\n\t\tSELECT f.DirectLossPaidIR AS InceptionToDatePaidLossAmount,  \r\n\t\t\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date>='2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O \r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = f.edw_loss_master_calculation_pk_id\r\n\t\t) T\r\n\t\t) T\r\n\t\tWHERE cast(trans_date as date)<=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS} ,-1) \r\n\t\tORDER BY pol_key,edw_claimant_cov_det_ak_id,trans_date\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,edw_claimant_cov_det_ak_id,trans_date,loss_master_calculation_id ORDER BY InceptionToDatePaidLossAmount DESC) = 1\n),\nFIL_Exists_Loss AS (\n\tSELECT\n\tLKP_ISSWorkTable_Loss.EDWLossMasterCalculationPKId AS LKP_LossMasterCalculationId, \n\tSRT_Sort_data.pol_key, \n\tSRT_Sort_data.ClaimNum, \n\tSRT_Sort_data.loss_master_run_date, \n\tSRT_Sort_data.loss_master_calculation_id, \n\tSRT_Sort_data.prim_bus_class_code, \n\tSRT_Sort_data.StateProvinceCode, \n\tSRT_Sort_data.claim_loss_date, \n\tSRT_Sort_data.sub_line_code, \n\tSRT_Sort_data.class_code AS ClassCode, \n\tSRT_Sort_data.cause_of_loss, \n\tSRT_Sort_data.RiskTerritory, \n\tSRT_Sort_data.pol_eff_date, \n\tSRT_Sort_data.claim_occurrence_num, \n\tSRT_Sort_data.claimant_num, \n\tSRT_Sort_data.paid_loss_amt, \n\tSRT_Sort_data.outstanding_amt, \n\tSRT_Sort_data.pms_type_bureau_code AS TypeBureauCode, \n\tSRT_Sort_data.RiskUnitGroup, \n\tSRT_Sort_data.PolicySourceID, \n\tSRT_Sort_data.RiskType, \n\tSRT_Sort_data.StatisticalCoverageAKID, \n\tSRT_Sort_data.RatingCoverageAKID, \n\tSRT_Sort_data.pol_exp_date, \n\tSRT_Sort_data.s3p_claim_num, \n\tSRT_Sort_data.claim_trans_id, \n\tSRT_Sort_data.claim_coverage_detail_ak_id, \n\tLKP_InceptionToDatePaidLossAmount.InceptionToDatePaidLossAmount AS out_CumulativeInceptiontoDatePaidLoss, \n\tSRT_Sort_data.asl_num, \n\tSRT_Sort_data.InsuranceLine, \n\tSRT_Sort_data.pol_num, \n\tSRT_Sort_data.statistical_code1, \n\tSRT_Sort_data.InsuranceSegmentCode, \n\tSRT_Sort_data.ZipPostalCode, \n\tSRT_Sort_data.exposure, \n\tSRT_Sort_data.CoverageCode, \n\tSRT_Sort_data.DirectALAEPaidIR, \n\tSRT_Sort_data.DirectALAEOutstandingER, \n\tSRT_Sort_data.MajorPerilCode, \n\tSRT_Sort_data.pms_pol_lob_code, \n\tSRT_Sort_data.DeductibleAmount, \n\tSRT_Sort_data.CoverageGroupCode, \n\tSRT_Sort_data.CoverageLimitValue1, \n\tSRT_Sort_data.CoverageLimitType1, \n\tSRT_Sort_data.PremiumTransactionAKID1, \n\tSRT_Sort_data.reserve_ctgry, \n\tSRT_Sort_data.VehicleNumber, \n\tSRT_Sort_data.IncludeUIM, \n\tSRT_Sort_data.CoordinationOfBenefits, \n\tSRT_Sort_data.CoveredByWorkersCompensation, \n\tSRT_Sort_data.MedicalExpensesOption, \n\tSRT_Sort_data.SubjectToNoFault, \n\tSRT_Sort_data.DCT_CoverageType, \n\tSRT_Sort_data.AdditionalLimitKS, \n\tSRT_Sort_data.AdditionalLimitKY, \n\tSRT_Sort_data.AdditionalLimitMN, \n\tSRT_Sort_data.FullGlassIndicator1\n\tFROM SRT_Sort_data\n\tLEFT JOIN LKP_ISSWorkTable_Loss\n\tON LKP_ISSWorkTable_Loss.EDWLossMasterCalculationPKId = SRT_Sort_data.loss_master_calculation_id\n\tLEFT JOIN LKP_InceptionToDatePaidLossAmount\n\tON LKP_InceptionToDatePaidLossAmount.pol_key = SRT_Sort_data.pol_key AND LKP_InceptionToDatePaidLossAmount.edw_claimant_cov_det_ak_id = SRT_Sort_data.claim_coverage_detail_ak_id AND LKP_InceptionToDatePaidLossAmount.trans_date <= SRT_Sort_data.trans_date AND LKP_InceptionToDatePaidLossAmount.loss_master_calculation_id = SRT_Sort_data.loss_master_calculation_id\n\tWHERE ISNULL(LKP_LossMasterCalculationId) AND  \r\n(paid_loss_amt != 0 or outstanding_amt!=0 or DirectALAEOutstandingER !=0 or DirectALAEPaidIR!=0)\r\nand TO_CHAR(loss_master_run_date, 'YYYY') ||TO_CHAR(loss_master_run_date, 'QQ')=\r\nTO_CHAR( ADD_TO_DATE(sysdate, 'MM', 3*@{pipeline().parameters.NO_OF_QUARTERS}), 'YYYY') ||TO_CHAR( ADD_TO_DATE(sysdate, 'MM', 3*@{pipeline().parameters.NO_OF_QUARTERS}), 'QQ')\n),\nEXP_GetCoverageAKID AS (\n\tSELECT\n\tStatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tRatingCoverageAKID AS i_RatingCoverageAKID,\n\t-- *INF*: IIF(\r\n\t-- i_StatisticalCoverageAKID=-1,i_RatingCoverageAKID,i_StatisticalCoverageAKID\r\n\t-- )\n\tIFF(i_StatisticalCoverageAKID = - 1, i_RatingCoverageAKID, i_StatisticalCoverageAKID) AS o_CoverageAKID,\n\t-- *INF*: IIF(\r\n\t-- i_StatisticalCoverageAKID=-1,'DCT','PMS'\r\n\t-- )\n\tIFF(i_StatisticalCoverageAKID = - 1, 'DCT', 'PMS') AS o_SourceSystemID\n\tFROM FIL_Exists_Loss\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tCoverageAKID,\n\tPackageModificationAdjustmentGroupCode,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tVehicleYear,\n\tTerminalZoneCode,\n\tDeductibleBasis,\n\tPIPBureaucoverageCode,\n\tRatingZoneCode\n\tFROM (\n\t\tDECLARE @QuarterEndDate DateTime\r\n\t\t\r\n\t\tSET @QuarterEndDate = DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1)\r\n\t\t\r\n\t\t\r\n\t\tSELECT \r\n\t\tPackageModificationAdjustmentGroupCode as PackageModificationAdjustmentGroupCode,\r\n\t\tConstructionCode as ConstructionCode,\r\n\t\tIsoFireProtectionCode as IsoFireProtectionCode,\r\n\t\tBureauCode1 as BureauCode1,\r\n\t\tBureauCode2 as BureauCode2, \r\n\t\tBureauCode4 as BureauCode4,  \r\n\t\tVehicleYear as VehicleYear,\r\n\t\tTerminalZoneCode  as TerminalZoneCode,\r\n\t\tDeductibleBasis  as DeductibleBasis,\r\n\t\tPIPBureaucoverageCode as PIPBureaucoverageCode,\r\n\t\tRatingZoneCode as RatingZoneCode,\r\n\t\tCoverageAKID as CoverageAKID  \r\n\t\tFROM\r\n\t\t(\r\n\t\tSELECT distinct \r\n\t\tPremiumTransaction.StatisticalCoverageAKID AS CoverageAKID,\r\n\t\tPremiumTransaction.PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode,  \r\n\t\tPremiumTransaction.ConstructionCode AS ConstructionCode,  \r\n\t\t'NOT NEED' AS IsoFireProtectionCode,\r\n\t\t  LTRIM(RTRIM(BureauCode1)) AS BureauCode1,  LTRIM(RTRIM(BureauCode2)) AS BureauCode2,  LTRIM(RTRIM(BureauCode4)) AS BureauCode4,  \r\n\t\t  CA.VehicleYear AS VehicleYear,  \r\n\t\t  'N/A' AS TerminalZoneCode,  \r\n\t\t  PremiumTransaction.DeductibleBasis as DeductibleBasis,\r\n\t\tCA.PIPBureaucoverageCode as PIPBureaucoverageCode,\r\n\t\t'N/A' AS RatingZoneCode\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation with (nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage with (nolock) on loss_master_calculation.StatisticalCoverageAKID = StatisticalCoverage.StatisticalCoverageAKID \r\n\t\tand DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,loss_master_calculation.loss_master_run_date),-1)=@QuarterEndDate\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction with (nolock) on StatisticalCoverage.StatisticalCoverageAKID = PremiumTransaction.StatisticalCoverageAKID \r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.BureauStatisticalCode with (nolock) on BureauStatisticalCode.PremiumTransactionAKID = PremiumTransaction.PremiumTransactionAKID\r\n\t\tINNER  join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialAuto CA\r\n\t\ton CA.PremiumTransactionID=PremiumTransaction.PremiumTransactionID\r\n\t\tand CA.CurrentSnapshotFlag=1\r\n\t\tWHERE PremiumTransaction.SourceSystemID='PMS'\r\n\t\tunion all\r\n\t\tSELECT distinct \r\n\t\tPremiumTransaction.RatingCoverageAKID as CoverageAKID,\r\n\t\tPremiumTransaction.PackageModificationAdjustmentGroupCode as PackageModificationAdjustmentGroupCode, \r\n\t\tPremiumTransaction.ConstructionCode as ConstructionCode, \r\n\t\t'NOT NEED' as IsoFireProtectionCode, \r\n\t\tnull as BureauCode1,\r\n\t\tnull as BureauCode2,\r\n\t\tnull as BureauCode4,\r\n\t\tCA.VehicleYear as VehicleYear,\r\n\t\tCA.TerminalZoneCode as TerminalZoneCode,\r\n\t\tPremiumTransaction.DeductibleBasis as DeductibleBasis,\r\n\t\tCA.PIPBureaucoverageCode as PIPBureaucoverageCode,\r\n\t\tCA.RatingZoneCode as RatingZoneCode\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation with (nolock) inner join \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage with (nolock) on loss_master_calculation.RatingCoverageAKID = RatingCoverage.RatingCoverageAKID\r\n\t\tand DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,loss_master_calculation.loss_master_run_date),-1)=@QuarterEndDate\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction with (nolock) on RatingCoverage.RatingCoverageAKID = PremiumTransaction.RatingCoverageAKID \r\n\t\tand RatingCoverage.EffectiveDate=PremiumTransaction.EffectiveDate\r\n\t\tINNER  join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialAuto CA\r\n\t\ton CA.PremiumTransactionID=PremiumTransaction.PremiumTransactionID\r\n\t\tand CA.CurrentSnapshotFlag=1\r\n\t\tWHERE PremiumTransaction.SourceSystemID='DCT'\r\n\t\t) as A \r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageAKID ORDER BY CoverageAKID) = 1\n),\nEXP_Cleansing_Loss AS (\n\tSELECT\n\tFIL_Exists_Loss.pol_key AS i_pol_key,\n\tFIL_Exists_Loss.ClaimNum AS i_ClaimNum,\n\tFIL_Exists_Loss.loss_master_run_date AS i_loss_master_run_date,\n\tFIL_Exists_Loss.loss_master_calculation_id AS i_loss_master_calculation_id,\n\tFIL_Exists_Loss.prim_bus_class_code AS i_prim_bus_class_code,\n\tFIL_Exists_Loss.StateProvinceCode AS i_StateProvinceCode,\n\tFIL_Exists_Loss.claim_loss_date AS i_claim_loss_date,\n\tFIL_Exists_Loss.sub_line_code AS i_sub_line_code,\n\tFIL_Exists_Loss.ClassCode AS i_ClassCode,\n\tFIL_Exists_Loss.cause_of_loss AS i_cause_of_loss,\n\tFIL_Exists_Loss.RiskTerritory AS i_RiskTerritory,\n\tFIL_Exists_Loss.pol_eff_date AS i_pol_eff_date,\n\tFIL_Exists_Loss.claim_occurrence_num AS i_claim_occurrence_num,\n\tFIL_Exists_Loss.claimant_num AS i_claimant_num,\n\tFIL_Exists_Loss.paid_loss_amt AS i_paid_loss_amt,\n\tFIL_Exists_Loss.outstanding_amt AS i_outstanding_amt,\n\tFIL_Exists_Loss.TypeBureauCode AS i_TypeBureauCode,\n\tFIL_Exists_Loss.RiskUnitGroup AS i_RiskUnitGroup,\n\tFIL_Exists_Loss.PolicySourceID AS i_PolicySourceID,\n\tFIL_Exists_Loss.RiskType AS i_RiskType,\n\tFIL_Exists_Loss.StatisticalCoverageAKID,\n\tFIL_Exists_Loss.pol_exp_date AS i_pol_exp_date,\n\tFIL_Exists_Loss.s3p_claim_num,\n\tFIL_Exists_Loss.out_CumulativeInceptiontoDatePaidLoss AS i_CumulativeInceptiontoDatePaidLoss,\n\tFIL_Exists_Loss.asl_num AS i_asl_num,\n\tLKP_PremiumTransaction.PIPBureaucoverageCode,\n\tFIL_Exists_Loss.CoverageCode AS i_CoverageCode,\n\tLKP_PremiumTransaction.DeductibleBasis,\n\tFIL_Exists_Loss.claim_coverage_detail_ak_id,\n\ti_loss_master_calculation_id AS o_loss_master_calculation_id,\n\ti_loss_master_run_date AS o_loss_master_run_date,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\ti_claim_loss_date AS o_claim_loss_date,\n\t-- *INF*: RTRIM(LTRIM(i_sub_line_code))\n\tRTRIM(LTRIM(i_sub_line_code)) AS o_sub_line_code,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_cause_of_loss))\n\tRTRIM(LTRIM(i_cause_of_loss)) AS o_cause_of_loss,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: RTRIM(LTRIM(i_claim_occurrence_num))\n\tRTRIM(LTRIM(i_claim_occurrence_num)) AS o_claim_occurrence_num,\n\t-- *INF*: RTRIM(LTRIM(i_claimant_num))\n\tRTRIM(LTRIM(i_claimant_num)) AS o_claimant_num,\n\t-- *INF*: IIF(ISNULL(i_paid_loss_amt), 0, i_paid_loss_amt)\r\n\t-- \r\n\t-- ---i_paid_loss_amt\n\tIFF(i_paid_loss_amt IS NULL, 0, i_paid_loss_amt) AS o_PaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_outstanding_amt), 0, i_outstanding_amt)\r\n\t-- \r\n\t-- --i_outstanding_amt\n\tIFF(i_outstanding_amt IS NULL, 0, i_outstanding_amt) AS o_OutstandingLossAmount,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_PolicySourceID))\n\tLTRIM(RTRIM(i_PolicySourceID)) AS o_PolicySourceID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\tStatisticalCoverageAKID AS o_StatisticalCoverageAKID,\n\ti_pol_exp_date AS o_pol_exp_date,\n\t-- *INF*: RTRIM(LTRIM(s3p_claim_num))\n\tRTRIM(LTRIM(s3p_claim_num)) AS o_s3p_claim_num,\n\t-- *INF*: DECODE(True,\r\n\t-- direct_alae_paid_including_recoveries<>0, 0,\r\n\t-- direct_loss_outstanding_excluding_recoveries<>0,0,\r\n\t-- i_CumulativeInceptiontoDatePaidLoss\r\n\t-- )\n\tDECODE(\n\t    True,\n\t    direct_alae_paid_including_recoveries <> 0, 0,\n\t    direct_loss_outstanding_excluding_recoveries <> 0, 0,\n\t    i_CumulativeInceptiontoDatePaidLoss\n\t) AS o_CumulativeInceptiontoDatePaidLoss,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tFIL_Exists_Loss.InsuranceLine AS i_InsuranceLine,\n\t-- *INF*: LTRIM(RTRIM(i_InsuranceLine))\n\tLTRIM(RTRIM(i_InsuranceLine)) AS o_InsuranceLine,\n\tFIL_Exists_Loss.pol_num,\n\ti_ClaimNum AS o_ClaimNum,\n\tFIL_Exists_Loss.statistical_code1 AS i_statistical_code1,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- isnull(i_statistical_code1),'N/A',\r\n\t-- ltrim(rtrim(i_statistical_code1))='','N/A',\r\n\t-- length(rtrim(ltrim(i_statistical_code1))) < 5,'N/A',\r\n\t-- i_statistical_code1)\n\tDECODE(\n\t    TRUE,\n\t    i_statistical_code1 IS NULL, 'N/A',\n\t    ltrim(rtrim(i_statistical_code1)) = '', 'N/A',\n\t    length(rtrim(ltrim(i_statistical_code1))) < 5, 'N/A',\n\t    i_statistical_code1\n\t) AS v_statistical_code1,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,3,1),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 3, 1), 'N/A') AS o_pms_const_code,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,4,2),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 4, 2), 'N/A') AS o_pms_iso_ppc_code,\n\tFIL_Exists_Loss.InsuranceSegmentCode,\n\tFIL_Exists_Loss.ZipPostalCode AS i_ZipPostalCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode) AS o_ZipPostalCode,\n\tFIL_Exists_Loss.exposure AS i_exposure,\n\t-- *INF*: IIF(ISNULL(i_exposure),0,i_exposure)\n\tIFF(i_exposure IS NULL, 0, i_exposure) AS o_exposure,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(PIPBureaucoverageCode) OR PIPBureaucoverageCode='N/A', i_CoverageCode,\r\n\t-- DCT_CoverageType <> 'PIP',i_CoverageCode,\r\n\t-- PIPBureaucoverageCode)\r\n\t-- \r\n\t-- -- old logic\r\n\t-- --IIF(ISNULL(PIPBureaucoverageCode) OR PIPBureaucoverageCode='N/A',\r\n\t-- --i_CoverageCode,PIPBureaucoverageCode)\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    PIPBureaucoverageCode IS NULL OR PIPBureaucoverageCode = 'N/A', i_CoverageCode,\n\t    DCT_CoverageType <> 'PIP', i_CoverageCode,\n\t    PIPBureaucoverageCode\n\t) AS o_CoverageCode,\n\tLKP_PremiumTransaction.VehicleYear,\n\tLKP_PremiumTransaction.TerminalZoneCode,\n\tFIL_Exists_Loss.DirectALAEPaidIR AS direct_alae_paid_including_recoveries,\n\tFIL_Exists_Loss.DirectALAEOutstandingER AS direct_loss_outstanding_excluding_recoveries,\n\tFIL_Exists_Loss.MajorPerilCode,\n\tFIL_Exists_Loss.pms_pol_lob_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(pms_pol_lob_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(pms_pol_lob_code) AS v_pms_pol_lob_code,\n\t-- *INF*: IIF(v_pms_pol_lob_code  != 'N/A' , v_pms_pol_lob_code  , \r\n\t-- decode(i_InsuranceLine, 'BusinessOwners' , 'BOP',\r\n\t-- 'CommercialAuto' , 'CPP',\r\n\t-- 'CommercialUmbrella' , 'CPP',\r\n\t-- 'Crime' , 'CPP',\r\n\t-- 'DirectorsAndOfficersNFP' , 'CPP',\r\n\t-- 'DirectorsAndOffsCondos' , 'CPP',\r\n\t-- 'EmploymentPracticesLiab' , 'CPP',\r\n\t-- 'ExcessLiability' , 'CPP',\r\n\t-- 'GamesOfChance' , 'CPP',\r\n\t-- 'GeneralLiability' , 'CPP',\r\n\t-- 'HoleInOne' , 'CPP',\r\n\t-- 'InlandMarine' , 'CPP',\r\n\t-- 'Property' , 'CPP',\r\n\t-- 'SBOPGeneralLiability' , 'CPP',\r\n\t-- 'SBOPProperty' , 'CPP',\r\n\t-- i_InsuranceLine))\n\tIFF(\n\t    v_pms_pol_lob_code != 'N/A', v_pms_pol_lob_code,\n\t    decode(\n\t        i_InsuranceLine,\n\t        'BusinessOwners', 'BOP',\n\t        'CommercialAuto', 'CPP',\n\t        'CommercialUmbrella', 'CPP',\n\t        'Crime', 'CPP',\n\t        'DirectorsAndOfficersNFP', 'CPP',\n\t        'DirectorsAndOffsCondos', 'CPP',\n\t        'EmploymentPracticesLiab', 'CPP',\n\t        'ExcessLiability', 'CPP',\n\t        'GamesOfChance', 'CPP',\n\t        'GeneralLiability', 'CPP',\n\t        'HoleInOne', 'CPP',\n\t        'InlandMarine', 'CPP',\n\t        'Property', 'CPP',\n\t        'SBOPGeneralLiability', 'CPP',\n\t        'SBOPProperty', 'CPP',\n\t        i_InsuranceLine\n\t    )\n\t) AS o_Iob,\n\tFIL_Exists_Loss.DeductibleAmount,\n\tFIL_Exists_Loss.CoverageGroupCode,\n\tFIL_Exists_Loss.CoverageLimitValue1 AS CoverageLimitValue,\n\tFIL_Exists_Loss.CoverageLimitType1 AS CoverageLimitType,\n\tFIL_Exists_Loss.PremiumTransactionAKID1,\n\tFIL_Exists_Loss.reserve_ctgry,\n\tFIL_Exists_Loss.VehicleNumber,\n\tFIL_Exists_Loss.IncludeUIM,\n\tFIL_Exists_Loss.CoordinationOfBenefits,\n\tFIL_Exists_Loss.CoveredByWorkersCompensation,\n\tFIL_Exists_Loss.MedicalExpensesOption,\n\tFIL_Exists_Loss.SubjectToNoFault,\n\tFIL_Exists_Loss.DCT_CoverageType,\n\tFIL_Exists_Loss.AdditionalLimitKS,\n\tFIL_Exists_Loss.AdditionalLimitKY,\n\tFIL_Exists_Loss.AdditionalLimitMN,\n\tLKP_PremiumTransaction.RatingZoneCode,\n\tFIL_Exists_Loss.FullGlassIndicator1\n\tFROM FIL_Exists_Loss\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nEXP_Transform_Prior_to_lookup AS (\n\tSELECT\n\tLKP_PremiumTransaction.PackageModificationAdjustmentGroupCode,\n\tFIL_Exists_Loss.StatisticalCoverageAKID,\n\t-- *INF*: IIF(StatisticalCoverageAKID=-1,'DCT','PMS')\n\tIFF(StatisticalCoverageAKID = - 1, 'DCT', 'PMS') AS out_SourceSystem\n\tFROM FIL_Exists_Loss\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nEXP_Reset_Pms_ConstCode_IsoPPC AS (\n\tSELECT\n\tEXP_Cleansing_Loss.o_TypeBureauCode AS i_TypeBureauCode,\n\tEXP_Cleansing_Loss.o_pms_const_code AS i_pms_const_code,\n\tEXP_Cleansing_Loss.o_pms_iso_ppc_code AS i_pms_iso_ppc_code,\n\tEXP_Transform_Prior_to_lookup.out_SourceSystem AS i_SourceSystem,\n\tLKP_PremiumTransaction.ConstructionCode AS lkp_ConstructionCode,\n\tLKP_PremiumTransaction.IsoFireProtectionCode AS lkp_IsoFireProtectionCode,\n\t-- *INF*: IIF(i_SourceSystem='PMS' and i_pms_const_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))='CF',i_pms_const_code,lkp_ConstructionCode)\n\tIFF(\n\t    i_SourceSystem = 'PMS' and i_pms_const_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode)) = 'CF',\n\t    i_pms_const_code,\n\t    lkp_ConstructionCode\n\t) AS v_const_code,\n\t-- *INF*: IIF(i_SourceSystem='PMS' and i_pms_iso_ppc_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))='CF',i_pms_iso_ppc_code,lkp_IsoFireProtectionCode)\n\tIFF(\n\t    i_SourceSystem = 'PMS'\n\t    and i_pms_iso_ppc_code != 'N/A'\n\t    and ltrim(rtrim(i_TypeBureauCode)) = 'CF',\n\t    i_pms_iso_ppc_code,\n\t    lkp_IsoFireProtectionCode\n\t) AS v_iso_code,\n\tv_const_code AS o_ConsturctionCode,\n\tv_iso_code AS o_IsoFireProtectionCode\n\tFROM EXP_Cleansing_Loss\n\t -- Manually join with EXP_Transform_Prior_to_lookup\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nLKP_CauseOfLoss AS (\n\tSELECT\n\tBureauCauseOfLoss,\n\tCauseOfLoss,\n\tLineOfBusiness,\n\tMajorPeril\n\tFROM (\n\t\tSELECT \n\t\t\tBureauCauseOfLoss,\n\t\t\tCauseOfLoss,\n\t\t\tLineOfBusiness,\n\t\t\tMajorPeril\n\t\tFROM sup_CauseOfLoss\n\t\tWHERE CurrentSnapshotFlag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CauseOfLoss,LineOfBusiness,MajorPeril ORDER BY BureauCauseOfLoss) = 1\n),\nLKP_ExcessAttendantCare_Coverage_Loss AS (\n\tSELECT\n\tlu_PolicyKey,\n\ti_PolicyKey,\n\ti_EffectiveDate,\n\ti_ExpirationDate,\n\tlu_EffectiveDate,\n\tlu_ExpirationDate\n\tFROM (\n\t\tselect distinct POL.pol_key, RC.EffectiveDate, RC.ExpirationDate \r\n\t\t\r\n\t\tfrom v2.policy POL\r\n\t\t\r\n\t\tinner join PolicyCoverage PC\r\n\t\ton PC.PolicyAKID = POL.pol_ak_id\r\n\t\tand PC.CurrentSnapshotFlag = 1\r\n\t\t\r\n\t\tinner join RatingCoverage RC\r\n\t\ton RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\tand RC.CoverageType = 'ExcessAttendantCare'\r\n\t\tand RC.CurrentSnapshotFlag = 1\r\n\t\t\r\n\t\twhere POL.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY lu_PolicyKey,lu_EffectiveDate,lu_ExpirationDate ORDER BY lu_PolicyKey) = 1\n),\nEXP_Logic_Loss AS (\n\tSELECT\n\tEXP_Cleansing_Loss.o_loss_master_calculation_id AS loss_master_calculation_id,\n\tEXP_Cleansing_Loss.claim_coverage_detail_ak_id,\n\t-1 AS PremiumMasterCalculationID,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS PremiumMasterRunDate,\n\tEXP_Cleansing_Loss.o_loss_master_run_date AS loss_master_run_date,\n\tEXP_Cleansing_Loss.o_pol_key AS pol_key,\n\tEXP_Cleansing_Loss.o_prim_bus_class_code AS prim_bus_class_code,\n\tEXP_Cleansing_Loss.o_StateProvinceCode AS StateProvinceCode,\n\tEXP_Cleansing_Loss.o_claim_loss_date AS claim_loss_date,\n\tEXP_Cleansing_Loss.o_sub_line_code AS sub_line_code,\n\t-- *INF*: --Fix for EDWP-4028\r\n\t-- --DECODE(TRUE, \r\n\t-- --IN(StateProvinceCode,'15', '16', '21', '22') AND --sub_line_code='613','01',\r\n\t-- --IN(StateProvinceCode,'14','13', '12', '34', '24', '48') AND\r\n\t-- --sub_line_code='611','00',\r\n\t-- --IN(sub_line_code,'618','648'),'00',\r\n\t-- --sub_line_code='615','01',\r\n\t-- --IN(StateProvinceCode,'15', '16', '21', '22') AND\r\n\t-- --IN(sub_line_code,'620', '621','622', '623', '641','645'),'01',\r\n\t-- --IN(StateProvinceCode,'14','13','12','34','24','48') AND\r\n\t-- --IN(sub_line_code,'641','620', '621', '622', '623'),'00',\r\n\t-- --'N/A')\r\n\t-- \r\n\t-- \r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_CoverageCode,'COLL','COMPRH','COMRPD','CALNSECOMP','PLSPAK - BRD','CALNSECOL','TOWLABOR'),'00',\r\n\t-- IN(StateProvinceCode,'15','16','21','22')  AND  IN(i_CoverageCode,'ADLINS','BIPD','EMPLESSOR','FELEMPL',\r\n\t-- 'INJLEASEWRKS','LSECONCRN','MANU','MCCA','MEDPAY',\r\n\t-- 'MINPREM','PIP','POLLUTION','RACEXCL','RAILOPTS','UIM',\r\n\t-- 'UM','LOSSUSEEXP','LIMMEXCOV','PPI','671','672','681','682','695'),'01',\r\n\t-- '00')\r\n\t-- \r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    i_CoverageCode IN ('COLL','COMPRH','COMRPD','CALNSECOMP','PLSPAK - BRD','CALNSECOL','TOWLABOR'), '00',\n\t    StateProvinceCode IN ('15','16','21','22') AND i_CoverageCode IN ('ADLINS','BIPD','EMPLESSOR','FELEMPL','INJLEASEWRKS','LSECONCRN','MANU','MCCA','MEDPAY','MINPREM','PIP','POLLUTION','RACEXCL','RAILOPTS','UIM','UM','LOSSUSEEXP','LIMMEXCOV','PPI','671','672','681','682','695'), '01',\n\t    '00'\n\t) AS sub_line_code_out,\n\tEXP_Cleansing_Loss.o_ClassCode AS ClassCode,\n\t'N/A' AS PremiumMasterClassCode_out,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR IS_SPACES(ClassCode) OR LENGTH(ClassCode)=0 OR IN(ClassCode, 'N/A','TBD'),\r\n\t-- '00000',\r\n\t-- ClassCode\r\n\t-- )\r\n\t-- \r\n\t-- --ClassCode\n\tIFF(\n\t    ClassCode IS NULL\n\t    or LENGTH(ClassCode)>0\n\t    and TRIM(ClassCode)=''\n\t    or LENGTH(ClassCode) = 0\n\t    or ClassCode IN ('N/A','TBD'),\n\t    '00000',\n\t    ClassCode\n\t) AS LossMasterClassCode_out,\n\tLKP_CauseOfLoss.BureauCauseOfLoss AS cause_of_loss,\n\t-- *INF*: iif(in(i_CoverageCode,'COMRLIAB','COMRLIABUM','COMRLIABUIM','COMRLIABMEDICAL','COMRLIABPIP')\r\n\t-- ,'00',cause_of_loss) \n\tIFF(\n\t    i_CoverageCode IN ('COMRLIAB','COMRLIABUM','COMRLIABUIM','COMRLIABMEDICAL','COMRLIABPIP'),\n\t    '00',\n\t    cause_of_loss\n\t) AS cause_of_loss_out,\n\tEXP_Cleansing_Loss.o_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode_out,\n\tEXP_Cleansing_Loss.o_pol_eff_date AS pol_eff_date,\n\tEXP_Cleansing_Loss.o_claim_occurrence_num AS i_claim_occurrence_num,\n\tEXP_Cleansing_Loss.o_s3p_claim_num AS i_s3p_claim_num,\n\tEXP_Cleansing_Loss.o_InsuranceLine AS i_InsuranceLine,\n\tEXP_Cleansing_Loss.pol_num AS i_pol_num,\n\t-- *INF*: IIF(ISNULL(i_claim_occurrence_num) OR IS_SPACES(i_claim_occurrence_num) OR LENGTH(i_claim_occurrence_num)=0 OR i_claim_occurrence_num='N/A' OR IS_NUMBER(i_claim_occurrence_num)=0, 0, TO_INTEGER(i_claim_occurrence_num))\n\tIFF(\n\t    i_claim_occurrence_num IS NULL\n\t    or LENGTH(i_claim_occurrence_num)>0\n\t    and TRIM(i_claim_occurrence_num)=''\n\t    or LENGTH(i_claim_occurrence_num) = 0\n\t    or i_claim_occurrence_num = 'N/A'\n\t    or REGEXP_LIKE(i_claim_occurrence_num, '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(i_claim_occurrence_num AS INTEGER)\n\t) AS v_claim_occurrence_num,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_InsuranceLine='CF',\r\n\t-- IIF(TRUNC(pol_eff_date, 'MM')  <= TO_DATE('2003-10', 'YYYY-MM'), TO_CHAR(ADD_TO_DATE(claim_loss_date, 'DD', v_claim_occurrence_num), 'YYYYMMDD'), i_s3p_claim_num),\r\n\t-- i_InsuranceLine='CR',\r\n\t-- i_pol_num || TO_CHAR(claim_loss_date,'YYMMDD') || SUBSTR(i_claim_occurrence_num,2,2),\r\n\t-- --i_InsuranceLine='GL',\r\n\t-- i_s3p_claim_num\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_InsuranceLine = 'CF', IFF(\n\t        CAST(TRUNC(pol_eff_date, 'MONTH') AS TIMESTAMP_NTZ(0)) <= TO_TIMESTAMP('2003-10', 'YYYY-MM'),\n\t        TO_CHAR(DATEADD(DAY,v_claim_occurrence_num,claim_loss_date), 'YYYYMMDD'),\n\t        i_s3p_claim_num\n\t    ),\n\t    i_InsuranceLine = 'CR', i_pol_num || TO_CHAR(claim_loss_date, 'YYMMDD') || SUBSTR(i_claim_occurrence_num, 2, 2),\n\t    i_s3p_claim_num\n\t) AS v_ClaimNumber,\n\tEXP_Cleansing_Loss.o_ClaimNum AS i_ClaimNum,\n\ti_ClaimNum AS ClaimNum,\n\tEXP_Cleansing_Loss.o_claimant_num AS claimant_num,\n\t0.00 AS PremiumMasterPremium,\n\tEXP_Cleansing_Loss.o_PaidLossAmount AS PaidLossAmount,\n\tEXP_Cleansing_Loss.o_OutstandingLossAmount AS OutstandingLossAmount,\n\tEXP_Cleansing_Loss.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_Cleansing_Loss.o_RiskUnitGroup AS RiskUnitGroup,\n\tEXP_Cleansing_Loss.o_PolicySourceID AS PolicySourceID,\n\tEXP_Cleansing_Loss.o_RiskType AS RiskType,\n\tEXP_Cleansing_Loss.DeductibleAmount,\n\tLKP_PremiumTransaction.BureauCode1,\n\tLKP_PremiumTransaction.BureauCode2,\n\tLKP_PremiumTransaction.BureauCode4,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_ConsturctionCode AS i_ConstructionCode,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tEXP_Cleansing_Loss.o_CoverageCode AS i_CoverageCode,\n\tEXP_Cleansing_Loss.CoordinationOfBenefits,\n\tEXP_Cleansing_Loss.CoveredByWorkersCompensation,\n\tEXP_Cleansing_Loss.MedicalExpensesOption,\n\tEXP_Cleansing_Loss.SubjectToNoFault,\n\tEXP_Cleansing_Loss.DCT_CoverageType,\n\tEXP_Cleansing_Loss.AdditionalLimitKS,\n\tEXP_Cleansing_Loss.AdditionalLimitKY,\n\tEXP_Cleansing_Loss.AdditionalLimitMN,\n\tLKP_ExcessAttendantCare_Coverage_Loss.lu_PolicyKey,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DCT_CoverageType = 'PIP' AND IN(TypeBureauCode,'AL','AN','AP','N/A','CommercialAuto'), '1',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    DCT_CoverageType = 'PIP' AND TypeBureauCode IN ('AL','AN','AP','N/A','CommercialAuto'), '1',\n\t    '0'\n\t) AS v_CLFile_PIP,\n\t-- *INF*: DECODE(TRUE, i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '2','051',\r\n\t-- i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '3','054',\r\n\t-- i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '1','051',\r\n\t-- i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '2','056',\r\n\t-- i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '3','057',\r\n\t-- i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '1','056',\r\n\t-- i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '2','052',\r\n\t-- i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '3','059',\r\n\t-- i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '1','052',\r\n\t-- i_CoverageCode = 'COMRLIABMEDICAL' ,'053',\r\n\t-- i_CoverageCode = 'COMRLIABPIP' ,'058',\r\n\t-- i_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '2', '051',\n\t    i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '3', '054',\n\t    i_CoverageCode = 'COMRLIAB' AND reserve_ctgry = '1', '051',\n\t    i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '2', '056',\n\t    i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '3', '057',\n\t    i_CoverageCode = 'COMRLIABUM' AND reserve_ctgry = '1', '056',\n\t    i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '2', '052',\n\t    i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '3', '059',\n\t    i_CoverageCode = 'COMRLIABUIM' AND reserve_ctgry = '1', '052',\n\t    i_CoverageCode = 'COMRLIABMEDICAL', '053',\n\t    i_CoverageCode = 'COMRLIABPIP', '058',\n\t    i_CoverageCode\n\t) AS v_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '15' AND IN (AdditionalLimitKS,-1, 0) AND v_CLFile_PIP = '1', '681',\r\n\t-- StateProvinceCode = '15' AND NOT IN (AdditionalLimitKS,-1, 0) AND v_CLFile_PIP = '1', '682',\r\n\t-- v_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '15' AND AdditionalLimitKS IN (- 1,0) AND v_CLFile_PIP = '1', '681',\n\t    StateProvinceCode = '15' AND NOT AdditionalLimitKS IN (- 1,0) AND v_CLFile_PIP = '1', '682',\n\t    v_CoverageCode\n\t) AS v_KS_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '16' AND IN (AdditionalLimitKS,-1, 0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '681',\r\n\t-- StateProvinceCode = '16' AND IN (AdditionalLimitKS,-1, 0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '671',\t\t\t   \r\n\t-- StateProvinceCode = '16' AND NOT IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '682', \t\t\t\r\n\t-- StateProvinceCode = '16' AND  NOT IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '672',\r\n\t-- v_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '16' AND AdditionalLimitKS IN (- 1,0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '681',\n\t    StateProvinceCode = '16' AND AdditionalLimitKS IN (- 1,0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '671',\n\t    StateProvinceCode = '16' AND NOT AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '682',\n\t    StateProvinceCode = '16' AND NOT AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '672',\n\t    v_CoverageCode\n\t) AS v_KY_PIP_CoverageCode,\n\tPIPBureaucoverageCode AS v_MN_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- MedicalExpensesOption='Rejected','689',\r\n\t-- IN(MedicalExpensesOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'T','671',\r\n\t-- IN(MedicalExpensesOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND IN(CoordinationOfBenefits,'None','0','N/A'),'681',\r\n\t-- IN(MedicalExpensesOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'MedicalExpensess','691',\r\n\t-- IN(MedicalExpensesOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'WorkLoss','692',\r\n\t-- IN(MedicalExpensesOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'MedicalWorkLoss','693',\r\n\t-- NOT ISNULL(lu_PolicyKey),'683',\r\n\t-- '685')\n\tDECODE(\n\t    TRUE,\n\t    MedicalExpensesOption = 'Rejected', '689',\n\t    MedicalExpensesOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'T', '671',\n\t    MedicalExpensesOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits IN ('None','0','N/A'), '681',\n\t    MedicalExpensesOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'MedicalExpensess', '691',\n\t    MedicalExpensesOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'WorkLoss', '692',\n\t    MedicalExpensesOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'MedicalWorkLoss', '693',\n\t    lu_PolicyKey IS NOT NULL, '683',\n\t    '685'\n\t) AS v_MI_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- -- MI\r\n\t-- StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'ExcessAttendantCare' and pol_eff_date > TO_DATE('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),'683',\r\n\t-- \r\n\t-- StateProvinceCode = '21' AND v_CLFile_PIP='1', v_MI_PIP_CoverageCode,\r\n\t-- -- StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'PIP' and pol_eff_date > TO_DATE('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),v_MI_PIP_CoverageCode,\r\n\t-- \r\n\t-- -- KS\r\n\t-- StateProvinceCode = '15'  AND v_CLFile_PIP='1', v_KS_PIP_CoverageCode,\r\n\t-- \r\n\t-- -- KY\r\n\t-- StateProvinceCode = '16' AND v_CLFile_PIP='1', v_KY_PIP_CoverageCode,\r\n\t-- \r\n\t-- --MN\r\n\t-- StateProvinceCode = '22' AND v_CLFile_PIP='1', v_MN_PIP_CoverageCode,\r\n\t-- \r\n\t-- \r\n\t-- -- Default\r\n\t-- v_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'ExcessAttendantCare' and pol_eff_date > TO_TIMESTAMP('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), '683',\n\t    StateProvinceCode = '21' AND v_CLFile_PIP = '1', v_MI_PIP_CoverageCode,\n\t    StateProvinceCode = '15' AND v_CLFile_PIP = '1', v_KS_PIP_CoverageCode,\n\t    StateProvinceCode = '16' AND v_CLFile_PIP = '1', v_KY_PIP_CoverageCode,\n\t    StateProvinceCode = '22' AND v_CLFile_PIP = '1', v_MN_PIP_CoverageCode,\n\t    v_CoverageCode\n\t) AS o_CoverageCode,\n\tv_CLFile_PIP AS o_CLFile_PIP,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ConstructionCode) AS ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode) AS IsoFireProtectionCode,\n\tEXP_Transform_Prior_to_lookup.PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode) AS PackageModificationAdjustmentGroupCode,\n\tEXP_Cleansing_Loss.o_pol_exp_date AS pol_exp_date,\n\tEXP_Cleansing_Loss.o_CumulativeInceptiontoDatePaidLoss AS CumulativeInceptiontoDatePaidLoss,\n\tEXP_Cleansing_Loss.o_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\tEXP_Cleansing_Loss.InsuranceSegmentCode,\n\tEXP_Cleansing_Loss.o_ZipPostalCode AS ZipPostalCode,\n\tEXP_Cleansing_Loss.o_exposure AS exposure,\n\tEXP_Cleansing_Loss.VehicleYear,\n\tEXP_Cleansing_Loss.TerminalZoneCode,\n\tEXP_Cleansing_Loss.direct_alae_paid_including_recoveries,\n\tEXP_Cleansing_Loss.direct_loss_outstanding_excluding_recoveries,\n\tEXP_Cleansing_Loss.DeductibleBasis AS DeductibleBasis2,\n\tEXP_Cleansing_Loss.CoverageGroupCode,\n\t'0' AS Old_VehicleNumber,\n\tEXP_Cleansing_Loss.VehicleNumber,\n\tEXP_Cleansing_Loss.CoverageLimitValue,\n\tEXP_Cleansing_Loss.PIPBureaucoverageCode,\n\tEXP_Cleansing_Loss.CoverageLimitType,\n\tEXP_Cleansing_Loss.PremiumTransactionAKID1,\n\tEXP_Cleansing_Loss.reserve_ctgry,\n\tEXP_Cleansing_Loss.IncludeUIM,\n\tEXP_Cleansing_Loss.RatingZoneCode,\n\tEXP_Cleansing_Loss.FullGlassIndicator1\n\tFROM EXP_Cleansing_Loss\n\t -- Manually join with EXP_Reset_Pms_ConstCode_IsoPPC\n\t -- Manually join with EXP_Transform_Prior_to_lookup\n\tLEFT JOIN LKP_CauseOfLoss\n\tON LKP_CauseOfLoss.CauseOfLoss = EXP_Cleansing_Loss.o_cause_of_loss AND LKP_CauseOfLoss.LineOfBusiness = EXP_Cleansing_Loss.o_Iob AND LKP_CauseOfLoss.MajorPeril = EXP_Cleansing_Loss.MajorPerilCode\n\tLEFT JOIN LKP_ExcessAttendantCare_Coverage_Loss\n\tON LKP_ExcessAttendantCare_Coverage_Loss.lu_PolicyKey = EXP_Cleansing_Loss.o_pol_key AND LKP_ExcessAttendantCare_Coverage_Loss.lu_EffectiveDate <= EXP_Cleansing_Loss.o_pol_exp_date AND LKP_ExcessAttendantCare_Coverage_Loss.lu_ExpirationDate >= EXP_Cleansing_Loss.o_pol_eff_date\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nSQ_Premium AS (\n\tDECLARE @Quarterstartdate as datetime, \r\n\t        @Quarterenddate as datetime\r\n\t\r\n\tSET @Quarterstartdate = DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) + @{pipeline().parameters.NO_OF_QUARTERS}, 0)                 \r\n\tSET @Quarterenddate =  DATEADD(ss, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) +1 + @{pipeline().parameters.NO_OF_QUARTERS}, 0)) \r\n\t\r\n\tSELECT distinct  \r\n\tPMC.PremiumMasterCalculationID,\r\n\tPMC.PremiumMasterRunDate,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tSC.ClassCode as classcode, \r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPMC.PremiumMasterPremium,\r\n\tPMC.PremiumMasterTypeBureauCode,\r\n\tSC.RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\t'N/A' AS RiskType,\r\n\tSC.CoverageGUID,\r\n\tCase when cd.CoverageDeductibleValue = 0 or cd.CoverageDeductibleValue is null then cd_1.CoverageDeductibleType Else cd.CoverageDeductibleType end as CoverageDeductibleType,\r\n\tCase when cd.CoverageDeductibleValue = 0 or cd.CoverageDeductibleValue is null then cd_1.CoverageDeductibleValue Else cd.CoverageDeductibleValue end as CoverageDeductibleValue ,\r\n\tCASE WHEN PC.TypeBureauCode='GL' THEN bsc.BureauCode3 ELSE PT.ConstructionCode END as ConstructionCode,\r\n\t'N/A' as IsoFireProtectionCode,\r\n\tPT.PackageModificationAdjustmentGroupCode,\r\n\tbsc.BureauCode1,\r\n\t'N/A' AS BureauCode2,\r\n\t'N/A' AS BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\tCASE WHEN sub_asl_num IS NULL THEN asl_num WHEN ltrim(rtrim(sub_asl_num))= 'N/A' THEN asl_num ELSE sub_asl_num END AS ASL_NUM,\r\n\tISG.InsuranceSegmentCode,\r\n\tRL.ZipPostalCode,\r\n\tPremiumMasterExposure,\r\n\tCASE WHEN CA.PIPBureaucoverageCode IS NULL OR PIPBureaucoverageCode='N/A' THEN LTRIM(RTRIM(IRC.CoverageCode)) ELSE CA.PIPBureaucoverageCode END AS CoverageCode,\r\n\tISNULL(CA.VehicleYear,'N/A'),\r\n\tRIGHT (RTRIM(CoverageLimitValue) ,5)  CoverageLimitValue,\r\n\tCA.TerminalZoneCode,\r\n\tPT.DeductibleBasis,\r\n\tCA.PIPBureaucoverageCode,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tIRC.CoverageGroupCode,\r\n\tCA.Vehiclenumber,\r\n\tFIRST_VALUE(cl.CoverageLimitType) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitType desc) as CoverageLimitType,\r\n\tPT.PremiumTransactionAKID,\r\n\tISNULL(CA.IncludeUIM,'N/A') IncludeUIM\r\n\t,'N/A' as SubjectToNoFault\r\n\t,'N/A' as CoordinationOfBenefits\r\n\t,'N/A' as CoveredByWorkersCompensationFlag\r\n\t,'N/A' as MedicalExpensesOption\r\n\t,'N/A' as DCT_CoverageType\r\n\t,CA.AdditionalLimitKS\r\n\t,CA.AdditionalLimitKY\r\n\t,CA.AdditionalLimitMN\r\n\t,CA.RatingZoneCode\r\n\t,CA.FullGlassIndicator\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact PMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton PMF.AnnualStatementLineDimId=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\ton SC.StatisticalCoverageAKID=PT.StatisticalCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=SC.PolicyCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tjoin V2.policy POL\r\n\ton POL.pol_ak_id=RL.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.BureauStatisticalCode bsc\r\n\ton bsc.PremiumTransactionAKID = PT.PremiumTransactionAKID \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=PMF.InsuranceReferenceCoverageDimId\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialAuto CA\r\n\ton CA.PremiumTransactionID=PT.PremiumTransactionID\r\n\tand CA.CurrentSnapshotFlag=1\r\n\tleft join (@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge cdb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible cd\r\n\ton cdb.CoverageDeductibleId=cd.CoverageDeductibleId)\r\n\ton PT.PremiumTransactionAKID=cdb.PremiumTransactionAKId\r\n\tleft join\r\n\t(\r\n\tSELECT DISTINCT\r\n\tCD.CoverageDeductibleType AS CoverageDeductibleType,\r\n\tCD.CoverageDeductibleValue AS CoverageDeductibleValue,\r\n\tSC.CoverageGUID AS CoverageGUID\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD\r\n\tINNER JOIN  @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\tON CD.CoverageDeductibleId = CDB.CoverageDeductibleId\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\tON CDB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\tAND PT.SourceSystemID='PMS'\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\tON PT.StatisticalCoverageAKID= SC.StatisticalCoverageAKID\r\n\tWHERE CD.CoverageDeductibleType in ('CollisionDeductible','ComprehensiveDeductible')\r\n\t) cd_1 on cd_1.CoverageGuid=SC.CoverageGuid\r\n\tleft join\r\n\t(@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\ton clb.CoverageLimitId=cl.CoverageLimitId\r\n\t) on PT.PremiumTransactionAKID=clb.PremiumTransactionAKID and CoverageLimitValue <> 'BasicPIP'\r\n\tWHERE PMC.PremiumMasterRunDate between @Quarterstartdate and @Quarterenddate\r\n\tAND PMC.PremiumMasterTypeBureauCode IN ('AL','AN','AP') \r\n\tAND PT.SourceSystemID='PMS'\r\n\t---AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48') (line removed - RFC 126190)\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND PMC.PremiumMasterTransactionCode IN ('10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','57','67') \r\n\tAND PMC.PremiumMasterReasonAmendedCode NOT IN ( 'COL' , 'CWO')\r\n\tAND PMC.PremiumMasterPremium <>  0\r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\r\n\t\r\n\tUNION ALL\r\n\t--DCT\r\n\tSELECT distinct  \r\n\tPMC.PremiumMasterCalculationID,\r\n\tPMC.PremiumMasterRunDate,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tLTRIM(RTRIM(REPLACE(CASE WHEN CHARINDEX(',',RC.ClassCode)<>0 and RC.CoverageType like 'NonOwned%' then SUBSTRING(RC.ClassCode,CHARINDEX(',',RC.ClassCode),6) \r\n\tWHEN CHARINDEX(',',RC.ClassCode)<>0 and NOT(RC.CoverageType like 'NonOwned%') then SUBSTRING(RC.ClassCode,1,CHARINDEX(',',RC.ClassCode)-1) \r\n\tELSE RC.ClassCode END,',',''))) AS ClassCode ,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPMC.PremiumMasterPremium,\r\n\tPC.TypeBureauCode,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\tRC.RiskType,\r\n\tRC.CoverageGUID,\r\n\tnull as CoverageDeductibleType,\r\n\tnull as CoverageDeductibleValue,\r\n\tPT.ConstructionCode,\r\n\t'N/A' as IsoFireProtectionCode,\r\n\tPT.PackageModificationAdjustmentGroupCode,\r\n\t'N/A' AS BureauCode1,\r\n\t'N/A' AS BureauCode2,\r\n\t'N/A' AS BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\tCASE WHEN sub_asl_num IS NULL THEN asl_num WHEN ltrim(rtrim(sub_asl_num))= 'N/A' THEN asl_num ELSE sub_asl_num END AS ASL_NUM,\r\n\tISG.InsuranceSegmentCode,\r\n\tRL.ZipPostalCode,\r\n\tPremiumMasterExposure,\r\n\tCASE WHEN RC.CoverageType = 'PIP' THEN \r\n\tCASE WHEN CA.PIPBureaucoverageCode IS NULL OR PIPBureaucoverageCode='N/A' THEN LTRIM(RTRIM(IRC.CoverageCode)) ELSE CA.PIPBureaucoverageCode END ELSE LTRIM(RTRIM(IRC.CoverageCode)) END  AS CoverageCode,\r\n\tISNULL(CA.VehicleYear,'N/A') as VehicleYear,\r\n\tRIGHT (RTRIM(FIRST_VALUE(cl.CoverageLimitValue) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitValue desc)),5) as CoverageLimitValue,\r\n\tCA.TerminalZoneCode,\r\n\tPT.DeductibleBasis,\r\n\tCA.PIPBureaucoverageCode,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tIRC.CoverageGroupCode,\r\n\tCA.Vehiclenumber,\r\n\tFIRST_VALUE(cl.CoverageLimitType) OVER (partition by clb.PremiumTransactionAKID order by clb.CreatedDate desc, cl.CoverageLimitType desc) as CoverageLimitType,\r\n\tPT.PremiumTransactionAKID,\r\n\tISNULL(CA.IncludeUIM,'N/A') IncludeUIM\r\n\t\r\n\t,ISNULL(CA.SubjectToNoFault,'N/A') as SubjectToNoFault\r\n\t,ISNULL(CA.CoordinationOfBenefits,'N/A') as CoordinationOfBenefits\r\n\t,iif(ISNULL(CA.CoveredByWorkersCompensationFlag,0) = 1,'T','F') as CoveredByWorkersCompensationFlag\r\n\t,ISNULL(CA.MedicalExpensesOption,'N/A') as MedicalExpensesOption\r\n\t,RC.CoverageType as DCT_CoverageType\r\n\t,CA.AdditionalLimitKS\r\n\t,CA.AdditionalLimitKY\r\n\t,CA.AdditionalLimitMN\r\n\t,CA.RatingZoneCode\r\n\t,CA.FullGlassIndicator\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact PMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton PMF.AnnualStatementLineDimId=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID\r\n\tand PMC.CurrentSnapshotFlag=1\r\n\tand PT.CurrentSnapshotFlag=1\r\n\tjoin  @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand RC.EffectiveDate=PT.EffectiveDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL\r\n\ton POL.pol_ak_id=RL.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=PMF.InsuranceReferenceCoverageDimId\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialAuto CA\r\n\ton CA.PremiumTransactionID=PT.PremiumTransactionID\r\n\tand CA.CurrentSnapshotFlag=1\r\n\t--left join (@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge cdb\r\n\t--join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible cd\r\n\t--on cdb.CoverageDeductibleId=cd.CoverageDeductibleId)\r\n\t--on PT.PremiumTransactionAKID=cdb.PremiumTransactionAKId\r\n\tleft join\r\n\t(@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\ton clb.CoverageLimitId=cl.CoverageLimitId\r\n\t)\r\n\ton PT.PremiumTransactionAKID=clb.PremiumTransactionAKID\r\n\tand CoverageLimitValue <> 'BasicPIP'\r\n\twhere PMC.PremiumMasterRunDate between @Quarterstartdate and @Quarterenddate\r\n\tAND PC.InsuranceLine = 'CommercialAuto'\r\n\tAND RC.CoverageType <> 'WB516CA' \r\n\tAND PT.SourceSystemID='DCT'\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48') (line removed - RFC 126190)\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND PMC.PremiumMasterTransactionCode IN ('10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67') \r\n\tAND PMC.PremiumMasterReasonAmendedCode NOT IN ('CWO', 'CWB')\r\n\tAND PMC.PremiumMasterPremium <>0\r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\n),\nEXP_Premium_Input AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tpol_key,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tPremiumTransactionBookedDate,\n\tPremiumMasterSubLine,\n\tClassCode,\n\tRiskTerritory,\n\tpol_eff_date,\n\tPremiumMasterPremium,\n\tTypeBureauCode,\n\tRiskUnitGroup,\n\tSourceSystemID,\n\tPremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode,\n\tRiskType,\n\tCoverageGUID,\n\tCoverageDeductibleType,\n\tDeductibleAmount,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tPackageModificationAdjustmentGroupCode,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tpol_exp_date,\n\tasl_num,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\tPremiumMasterExposure,\n\tCoverageCode,\n\tVehicleYear,\n\tCoverageLimitValue,\n\tTerminalZoneCode,\n\tDeductibleBasis,\n\tPIPBureaucoverageCode,\n\tPremiumTransactionEffectiveDate,\n\tCoverageGroupCode,\n\tVehicleNumber,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\tIncludeUIM,\n\tSubjectToNoFault,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tDCT_CoverageType,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tRatingZoneCode,\n\tFullGlassIndicator\n\tFROM SQ_Premium\n),\nSRT_Premium_Sort_Order AS (\n\tSELECT\n\tpol_key, \n\tCoverageGUID, \n\tClassCode, \n\tCoverageCode, \n\tPremiumMasterPremium, \n\tPremiumMasterCalculationID, \n\tPremiumMasterRunDate, \n\tprim_bus_class_code, \n\tStateProvinceCode, \n\tPremiumTransactionBookedDate, \n\tPremiumMasterSubLine, \n\tRiskTerritory, \n\tpol_eff_date, \n\tTypeBureauCode, \n\tRiskUnitGroup, \n\tSourceSystemID, \n\tPremiumMasterTransactionCode, \n\tPremiumMasterReasonAmendedCode, \n\tRiskType, \n\tCoverageDeductibleType, \n\tDeductibleAmount, \n\tConstructionCode, \n\tIsoFireProtectionCode, \n\tPackageModificationAdjustmentGroupCode, \n\tBureauCode1, \n\tBureauCode2, \n\tBureauCode4, \n\tpol_exp_date, \n\tasl_num, \n\tInsuranceSegmentCode, \n\tZipPostalCode, \n\tPremiumMasterExposure, \n\tVehicleYear, \n\tCoverageLimitValue, \n\tTerminalZoneCode, \n\tDeductibleBasis, \n\tPIPBureaucoverageCode, \n\tPremiumTransactionEffectiveDate, \n\tCoverageGroupCode, \n\tVehicleNumber, \n\tCoverageLimitType, \n\tPremiumTransactionAKID, \n\tIncludeUIM, \n\tSubjectToNoFault, \n\tCoordinationOfBenefits, \n\tCoveredByWorkersCompensation, \n\tMedicalExpensesOption, \n\tDCT_CoverageType, \n\tAdditionalLimitKS, \n\tAdditionalLimitKY, \n\tAdditionalLimitMN, \n\tRatingZoneCode, \n\tFullGlassIndicator\n\tFROM EXP_Premium_Input\n\tORDER BY pol_key ASC, CoverageGUID ASC, ClassCode ASC, CoverageCode ASC, PremiumMasterCalculationID ASC\n),\nLKP_ISSWorkTable_Premium AS (\n\tSELECT\n\tEDWPremiumMasterCalculationPKId\n\tFROM (\n\t\tSELECT \n\t\t\tEDWPremiumMasterCalculationPKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialAutoExtract\n\t\tWHERE DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,PremiumMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) and\r\n\t\tEDWPremiumMasterCalculationPKId<>-1\r\n\t\t\r\n\t\t--YEAR(PremiumMasterRunDate)=YEAR(dateadd(year,@{pipeline().parameters.NO_OF_YEARS},GETDATE())) and EDWPremiumMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWPremiumMasterCalculationPKId ORDER BY EDWPremiumMasterCalculationPKId) = 1\n),\nFIL_Exists_Premium AS (\n\tSELECT\n\tLKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId AS LKP_PremiumMasterCalculationID, \n\tSRT_Premium_Sort_Order.PremiumMasterCalculationID, \n\tSRT_Premium_Sort_Order.PremiumMasterRunDate, \n\tSRT_Premium_Sort_Order.pol_key, \n\tSRT_Premium_Sort_Order.prim_bus_class_code, \n\tSRT_Premium_Sort_Order.StateProvinceCode, \n\tSRT_Premium_Sort_Order.PremiumTransactionBookedDate, \n\tSRT_Premium_Sort_Order.PremiumMasterSubLine, \n\tSRT_Premium_Sort_Order.ClassCode, \n\tSRT_Premium_Sort_Order.RiskTerritory, \n\tSRT_Premium_Sort_Order.pol_eff_date, \n\tSRT_Premium_Sort_Order.PremiumMasterPremium, \n\tSRT_Premium_Sort_Order.TypeBureauCode, \n\tSRT_Premium_Sort_Order.RiskUnitGroup, \n\tSRT_Premium_Sort_Order.SourceSystemID, \n\tSRT_Premium_Sort_Order.PremiumMasterTransactionCode, \n\tSRT_Premium_Sort_Order.PremiumMasterReasonAmendedCode, \n\tSRT_Premium_Sort_Order.RiskType, \n\tSRT_Premium_Sort_Order.CoverageDeductibleType, \n\tSRT_Premium_Sort_Order.DeductibleAmount, \n\tSRT_Premium_Sort_Order.ConstructionCode, \n\tSRT_Premium_Sort_Order.IsoFireProtectionCode, \n\tSRT_Premium_Sort_Order.PackageModificationAdjustmentGroupCode, \n\tSRT_Premium_Sort_Order.BureauCode1, \n\tSRT_Premium_Sort_Order.BureauCode2, \n\tSRT_Premium_Sort_Order.BureauCode4, \n\tSRT_Premium_Sort_Order.pol_exp_date, \n\tSRT_Premium_Sort_Order.asl_num, \n\tSRT_Premium_Sort_Order.InsuranceSegmentCode, \n\tSRT_Premium_Sort_Order.ZipPostalCode, \n\tSRT_Premium_Sort_Order.PremiumMasterExposure, \n\tSRT_Premium_Sort_Order.CoverageCode, \n\tSRT_Premium_Sort_Order.VehicleYear, \n\tSRT_Premium_Sort_Order.CoverageLimitValue, \n\tSRT_Premium_Sort_Order.TerminalZoneCode, \n\tSRT_Premium_Sort_Order.DeductibleBasis, \n\tSRT_Premium_Sort_Order.PIPBureaucoverageCode, \n\tSRT_Premium_Sort_Order.PremiumTransactionEffectiveDate, \n\tSRT_Premium_Sort_Order.CoverageGroupCode, \n\tSRT_Premium_Sort_Order.CoverageGUID, \n\tSRT_Premium_Sort_Order.VehicleNumber, \n\tSRT_Premium_Sort_Order.CoverageLimitType, \n\tSRT_Premium_Sort_Order.PremiumTransactionAKID, \n\tSRT_Premium_Sort_Order.IncludeUIM, \n\tSRT_Premium_Sort_Order.SubjectToNoFault, \n\tSRT_Premium_Sort_Order.CoordinationOfBenefits, \n\tSRT_Premium_Sort_Order.CoveredByWorkersCompensation, \n\tSRT_Premium_Sort_Order.MedicalExpensesOption, \n\tSRT_Premium_Sort_Order.DCT_CoverageType, \n\tSRT_Premium_Sort_Order.AdditionalLimitKS, \n\tSRT_Premium_Sort_Order.AdditionalLimitKY, \n\tSRT_Premium_Sort_Order.AdditionalLimitMN, \n\tSRT_Premium_Sort_Order.RatingZoneCode, \n\tSRT_Premium_Sort_Order.FullGlassIndicator\n\tFROM SRT_Premium_Sort_Order\n\tLEFT JOIN LKP_ISSWorkTable_Premium\n\tON LKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId = SRT_Premium_Sort_Order.PremiumMasterCalculationID\n\tWHERE ISNULL(LKP_PremiumMasterCalculationID) and PremiumMasterPremium !=0\r\n--EDWP-4232 temprary solution-------------------------------------\r\n--AND ROUND(PremiumMasterPremium,2)<>0\r\n--EDWP-4232 temprary solution-------------------------------------\n),\nEXP_GetParentCoveageGUID_Premium AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tpol_key,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tPremiumTransactionBookedDate,\n\tPremiumMasterSubLine,\n\tClassCode,\n\tRiskTerritory,\n\tpol_eff_date,\n\tPremiumMasterPremium,\n\tTypeBureauCode,\n\tRiskUnitGroup,\n\tSourceSystemID,\n\tPremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode,\n\tRiskType,\n\tCoverageDeductibleType,\n\tDeductibleAmount,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tPackageModificationAdjustmentGroupCode,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tpol_exp_date,\n\tasl_num,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\tPremiumMasterExposure,\n\tCoverageCode,\n\tVehicleYear,\n\tCoverageLimitValue,\n\tTerminalZoneCode,\n\tDeductibleBasis,\n\tPIPBureaucoverageCode,\n\tPremiumTransactionEffectiveDate,\n\tCoverageGroupCode,\n\tCoverageGUID,\n\tVehicleNumber,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\tIncludeUIM,\n\tSubjectToNoFault,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tDCT_CoverageType,\n\t-- *INF*: SUBSTR(pol_key, 0, LENGTH(pol_key)-2)\n\tSUBSTR(pol_key, 0, LENGTH(pol_key) - 2) AS o_PolicyNumber,\n\t-- *INF*: SUBSTR(pol_key, -2, 2)\n\tSUBSTR(pol_key, - 2, 2) AS o_PolicyVersionFormatted,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tRatingZoneCode,\n\tFullGlassIndicator\n\tFROM FIL_Exists_Premium\n),\nRTR_Separate_Missing_Deductible_Records AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tpol_key,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tPremiumTransactionBookedDate,\n\tPremiumMasterSubLine,\n\tClassCode,\n\tRiskTerritory,\n\tpol_eff_date,\n\tPremiumMasterPremium,\n\tTypeBureauCode,\n\tRiskUnitGroup,\n\tSourceSystemID,\n\tPremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode,\n\tRiskType,\n\tCoverageDeductibleType,\n\tDeductibleAmount,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tPackageModificationAdjustmentGroupCode,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tpol_exp_date,\n\tasl_num,\n\tInsuranceSegmentCode,\n\tZipPostalCode,\n\tPremiumMasterExposure,\n\tCoverageCode,\n\tVehicleYear,\n\tCoverageLimitValue,\n\tTerminalZoneCode,\n\tDeductibleBasis,\n\tPIPBureaucoverageCode,\n\tPremiumTransactionEffectiveDate,\n\tCoverageGroupCode,\n\tCoverageGUID,\n\tVehicleNumber,\n\tCoverageLimitType,\n\tPremiumTransactionAKID,\n\tIncludeUIM,\n\tSubjectToNoFault,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpensesOption,\n\tDCT_CoverageType,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\tRatingZoneCode,\n\tFullGlassIndicator\n\tFROM EXP_GetParentCoveageGUID_Premium\n),\nRTR_Separate_Missing_Deductible_Records_MissingDeductibleAmount AS (SELECT * FROM RTR_Separate_Missing_Deductible_Records WHERE ISNULL(DeductibleAmount) OR DeductibleAmount='0' OR DeductibleAmount='N/A'),\nRTR_Separate_Missing_Deductible_Records_DEFAULT1 AS (SELECT * FROM RTR_Separate_Missing_Deductible_Records WHERE NOT ( (ISNULL(DeductibleAmount) OR DeductibleAmount='0' OR DeductibleAmount='N/A') )),\nEXP_DoDeductibleLookupsPremium AS (\n\tSELECT\n\tpol_key,\n\tCoverageGUID,\n\t-- *INF*: :LKP.LKP_GET_PARENT_COVERAGEGUID(pol_key,CoverageGUID)\n\tLKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.archWorkDCTCoverageTransactionId AS v_archWorkDCTCoverageTransactionId,\n\t-- *INF*: IIF(NOT ISNULL(v_archWorkDCTCoverageTransactionId),:LKP.LKP_ALT_COVERAGEGUID(v_archWorkDCTCoverageTransactionId),NULL)\n\tIFF(\n\t    v_archWorkDCTCoverageTransactionId IS NOT NULL,\n\t    LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId.CoverageGuid,\n\t    NULL\n\t) AS v_altCoverageGuid,\n\t-- *INF*: --IIF(NOT ISNULL(v_altCoverageGuid) ,:LKP.LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT(v_altCoverageGuid,pol_key),NULL)\r\n\t-- \r\n\t-- IIF(ISNULL(v_altCoverageGuid),:LKP.LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT(CoverageGUID,pol_key),:LKP.LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT(v_altCoverageGuid,pol_key))\n\tIFF(\n\t    v_altCoverageGuid IS NULL,\n\t    LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_CoverageGUID_pol_key.CombinedCoverageDeductibleInfo,\n\t    LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_v_altCoverageGuid_pol_key.CombinedCoverageDeductibleInfo\n\t) AS v_combinedCoverageDeductibleValueType,\n\t-- *INF*: IIF(NOT ISNULL(v_combinedCoverageDeductibleValueType), SUBSTR(v_combinedCoverageDeductibleValueType,0,INSTR(v_combinedCoverageDeductibleValueType,'|')-1),'')\n\tIFF(\n\t    v_combinedCoverageDeductibleValueType IS NOT NULL,\n\t    SUBSTR(v_combinedCoverageDeductibleValueType, 0, REGEXP_INSTR(v_combinedCoverageDeductibleValueType, '|') - 1),\n\t    ''\n\t) AS o_splitCoverageDeductibleValue,\n\t-- *INF*: IIF(NOT ISNULL(v_combinedCoverageDeductibleValueType), SUBSTR(v_combinedCoverageDeductibleValueType,INSTR(v_combinedCoverageDeductibleValueType,'|')+1),'')\n\tIFF(\n\t    v_combinedCoverageDeductibleValueType IS NOT NULL,\n\t    SUBSTR(v_combinedCoverageDeductibleValueType, REGEXP_INSTR(v_combinedCoverageDeductibleValueType, '|') + 1),\n\t    ''\n\t) AS o_splitCoverageDeductibleType\n\tFROM RTR_Separate_Missing_Deductible_Records_MissingDeductibleAmount\n\tLEFT JOIN LKP_GET_PARENT_COVERAGEGUID LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID\n\tON LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.CoverageGUID = pol_key\n\tAND LKP_GET_PARENT_COVERAGEGUID_pol_key_CoverageGUID.PolicyKey = CoverageGUID\n\n\tLEFT JOIN LKP_ALT_COVERAGEGUID LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId\n\tON LKP_ALT_COVERAGEGUID_v_archWorkDCTCoverageTransactionId.archWorkDCTCoverageTransactionid = v_archWorkDCTCoverageTransactionId\n\n\tLEFT JOIN LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_CoverageGUID_pol_key\n\tON LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_CoverageGUID_pol_key.CoverageGUID = CoverageGUID\n\tAND LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_CoverageGUID_pol_key.pol_key = pol_key\n\n\tLEFT JOIN LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_v_altCoverageGuid_pol_key\n\tON LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_v_altCoverageGuid_pol_key.CoverageGUID = v_altCoverageGuid\n\tAND LKP_COVERAGEDEDUCTIBLE_PREMIUM_ALT_COMBINED_OUTPUT_v_altCoverageGuid_pol_key.pol_key = pol_key\n\n),\nUnion_Rejoin_Premium AS (\n\tSELECT PremiumMasterCalculationID AS PremiumMasterCalculationID2, PremiumMasterRunDate AS PremiumMasterRunDate2, pol_key AS pol_key2, prim_bus_class_code AS prim_bus_class_code2, StateProvinceCode AS StateProvinceCode2, PremiumTransactionBookedDate AS PremiumTransactionBookedDate2, PremiumMasterSubLine AS PremiumMasterSubLine2, ClassCode AS ClassCode2, RiskTerritory AS RiskTerritory2, pol_eff_date AS pol_eff_date2, PremiumMasterPremium AS PremiumMasterPremium2, TypeBureauCode AS TypeBureauCode2, RiskUnitGroup AS RiskUnitGroup2, SourceSystemID AS SourceSystemID2, PremiumMasterTransactionCode AS PremiumMasterTransactionCode2, PremiumMasterReasonAmendedCode AS PremiumMasterReasonAmendedCode2, RiskType AS RiskType2, CoverageDeductibleType AS CoverageDeductibleType2, DeductibleAmount AS DeductibleAmount2, ConstructionCode AS ConstructionCode2, IsoFireProtectionCode AS IsoFireProtectionCode2, PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode2, BureauCode1 AS BureauCode12, BureauCode AS BureauCode22, BureauCode4 AS BureauCode42, pol_exp_date AS pol_exp_date2, asl_num AS asl_num2, InsuranceSegmentCode AS InsuranceSegmentCode2, ZipPostalCode AS ZipPostalCode2, PremiumMasterExposure AS PremiumMasterExposure2, CoverageCode AS CoverageCode2, VehicleYear AS VehicleYear2, CoverageLimitValue AS CoverageLimitValue2, TerminalZoneCode AS TerminalZoneCode2, DeductibleBasis AS DeductibleBasis2, PIPBureaucoverageCode AS PIPBureaucoverageCode2, PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate2, CoverageGroupCode AS CoverageGroupCode2, CoverageGUID AS CoverageGUID2, VehicleNumber AS VehicleNumber1, CoverageLimitType AS CoverageLimitType2, PremiumTransactionAKID AS PremiumTransactionAKID1, IncludeUIM, SubjectToNoFault, CoordinationOfBenefits, CoveredByWorkersCompensation, MedicalExpensesOption AS MedicalExpenseOption, DCT_CoverageType, AdditionalLimitKS AS AdditionalLimitKS1, AdditionalLimitKY AS AdditionalLimitKY1, AdditionalLimitMN AS AdditionalLimitMN1, RatingZoneCode, FullGlassIndicator AS FullGlassIndicator1\n\tFROM RTR_Separate_Missing_Deductible_Records_DEFAULT1\n\tUNION\n\tSELECT PremiumMasterCalculationID AS PremiumMasterCalculationID2, PremiumMasterRunDate AS PremiumMasterRunDate2, pol_key AS pol_key2, prim_bus_class_code AS prim_bus_class_code2, StateProvinceCode AS StateProvinceCode2, PremiumTransactionBookedDate AS PremiumTransactionBookedDate2, PremiumMasterSubLine AS PremiumMasterSubLine2, ClassCode AS ClassCode2, RiskTerritory AS RiskTerritory2, pol_eff_date AS pol_eff_date2, PremiumMasterPremium AS PremiumMasterPremium2, TypeBureauCode AS TypeBureauCode2, RiskUnitGroup AS RiskUnitGroup2, SourceSystemID AS SourceSystemID2, PremiumMasterTransactionCode AS PremiumMasterTransactionCode2, PremiumMasterReasonAmendedCode AS PremiumMasterReasonAmendedCode2, RiskType AS RiskType2, o_splitCoverageDeductibleType AS CoverageDeductibleType2, o_splitCoverageDeductibleValue AS DeductibleAmount2, ConstructionCode AS ConstructionCode2, IsoFireProtectionCode AS IsoFireProtectionCode2, PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode2, BureauCode AS BureauCode12, BureauCode2 AS BureauCode22, BureauCode4 AS BureauCode42, pol_exp_date AS pol_exp_date2, asl_num AS asl_num2, InsuranceSegmentCode AS InsuranceSegmentCode2, ZipPostalCode AS ZipPostalCode2, PremiumMasterExposure AS PremiumMasterExposure2, CoverageCode AS CoverageCode2, VehicleYear AS VehicleYear2, CoverageLimitValue AS CoverageLimitValue2, TerminalZoneCode AS TerminalZoneCode2, DeductibleBasis AS DeductibleBasis2, PIPBureaucoverageCode AS PIPBureaucoverageCode2, PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate2, CoverageGroupCode AS CoverageGroupCode2, CoverageGUID AS CoverageGUID2, VehicleNumber AS VehicleNumber1, CoverageLimitType AS CoverageLimitType2, PremiumTransactionAKID AS PremiumTransactionAKID1, IncludeUIM, SubjectToNoFault, CoordinationOfBenefits, CoveredByWorkersCompensation, MedicalExpensesOption AS MedicalExpenseOption, DCT_CoverageType, AdditionalLimitKS AS AdditionalLimitKS1, AdditionalLimitKY AS AdditionalLimitKY1, AdditionalLimitMN AS AdditionalLimitMN1, RatingZoneCode, FullGlassIndicator AS FullGlassIndicator1\n\tFROM EXP_DoDeductibleLookupsPremium\n\t-- Manually join with RTR_Separate_Missing_Deductible_Records_MissingDeductibleAmount\n),\nEXP_Cleansing_Premium AS (\n\tSELECT\n\tPremiumMasterCalculationID2 AS i_PremiumMasterCalculationID,\n\tPremiumMasterRunDate2 AS i_PremiumMasterRunDate,\n\tpol_key2 AS i_pol_key,\n\tprim_bus_class_code2 AS i_prim_bus_class_code,\n\tStateProvinceCode2 AS i_StateProvinceCode,\n\tPremiumTransactionBookedDate2 AS i_PremiumTransactionBookedDate,\n\tPremiumMasterSubLine2 AS i_PremiumMasterSubLine,\n\tClassCode2 AS i_ClassCode,\n\tRiskTerritory2 AS i_RiskTerritory,\n\tpol_eff_date2 AS i_pol_eff_date,\n\tPremiumMasterPremium2 AS i_PremiumMasterPremium,\n\tTypeBureauCode2 AS i_TypeBureauCode,\n\tRiskUnitGroup2 AS i_RiskUnitGroup,\n\tSourceSystemID2 AS i_SourceSystemID,\n\tPremiumMasterTransactionCode2 AS i_PremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode2 AS i_PremiumMasterReasonAmendedCode,\n\tRiskType2 AS i_RiskType,\n\tCoverageDeductibleType2 AS i_CoverageDeductibleType,\n\tDeductibleAmount2 AS i_DeductibleAmount,\n\tConstructionCode2 AS i_ConstructionCode,\n\tIsoFireProtectionCode2 AS i_IsoFireProtectionCode,\n\tPackageModificationAdjustmentGroupCode2 AS i_PackageModificationAdjustmentGroupCode,\n\tBureauCode12 AS i_BureauCode1,\n\tpol_exp_date2 AS i_pol_exp_date,\n\tasl_num2 AS i_asl_num,\n\tPIPBureaucoverageCode2 AS PIPBureaucoverageCode,\n\tCoverageLimitType2 AS CoverageLimitType,\n\ti_PremiumMasterCalculationID AS o_PremiumMasterCalculationID,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\ti_PremiumTransactionBookedDate AS o_PremiumTransactionBookedDate,\n\t-- *INF*: RTRIM(LTRIM(i_PremiumMasterSubLine))\n\tRTRIM(LTRIM(i_PremiumMasterSubLine)) AS o_PremiumMasterSubLine,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: i_PremiumMasterPremium\r\n\t-- --IIF( IN(i_PremiumMasterTransactionCode, '10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','57','67') AND  NOT IN(i_PremiumMasterReasonAmendedCode, 'COL' , 'CWO'), i_PremiumMasterPremium, 0)\n\ti_PremiumMasterPremium AS o_PremiumMasterPremium,\n\t-- *INF*: IIF(ISNULL(i_TypeBureauCode),'N/A',RTRIM(LTRIM(i_TypeBureauCode)))\n\tIFF(i_TypeBureauCode IS NULL, 'N/A', RTRIM(LTRIM(i_TypeBureauCode))) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_SourceSystemID))\n\tLTRIM(RTRIM(i_SourceSystemID)) AS o_SourceSystemID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\ti_DeductibleAmount AS o_DeductibleAmount,\n\t-- *INF*: RTRIM(LTRIM(i_ConstructionCode))\n\tRTRIM(LTRIM(i_ConstructionCode)) AS o_ConstructionCode,\n\t-- *INF*: RTRIM(LTRIM(i_IsoFireProtectionCode))\n\tRTRIM(LTRIM(i_IsoFireProtectionCode)) AS o_IsoFireProtectionCode,\n\t-- *INF*: LTRIM(RTRIM(i_PackageModificationAdjustmentGroupCode))\n\tLTRIM(RTRIM(i_PackageModificationAdjustmentGroupCode)) AS o_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: RTRIM(LTRIM(i_BureauCode1))\n\tRTRIM(LTRIM(i_BureauCode1)) AS o_BureauCode1,\n\tBureauCode22 AS BureauCode2,\n\tBureauCode42 AS BureauCode4,\n\ti_pol_exp_date AS o_pol_exp_date,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tInsuranceSegmentCode2 AS InsuranceSegmentCode,\n\tZipPostalCode2 AS i_ZipPostalCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode) AS o_ZipPostalCode,\n\tPremiumMasterExposure2 AS PremiumMasterExposure,\n\tCoverageCode2 AS i_CoverageCode,\n\t-- *INF*: iif(in(i_CoverageCode,'COMRLIAB','COMRLIABUM','COMRLIABUIM','COMRLIABMEDICAL','COMRLIABPIP'),'050',i_CoverageCode)\n\tIFF(\n\t    i_CoverageCode IN ('COMRLIAB','COMRLIABUM','COMRLIABUIM','COMRLIABMEDICAL','COMRLIABPIP'),\n\t    '050',\n\t    i_CoverageCode\n\t) AS o_CoverageCode,\n\tVehicleYear2 AS VehicleYear,\n\tCoverageLimitValue2 AS CoverageLimitValue,\n\tTerminalZoneCode2 AS TerminalZoneCode,\n\tDeductibleBasis2 AS DeductibleBasis,\n\tPremiumTransactionEffectiveDate2 AS PremiumTransactionEffectiveDate,\n\tCoverageGroupCode2 AS CoverageGroupCode,\n\tVehicleNumber1 AS VehicleNumber,\n\t-- *INF*: IIF(ISNULL(VehicleNumber),'0',LTRIM(RTRIM(VehicleNumber)))\n\tIFF(VehicleNumber IS NULL, '0', LTRIM(RTRIM(VehicleNumber))) AS o_VehicleNumber,\n\tPremiumTransactionAKID1,\n\tIncludeUIM,\n\tSubjectToNoFault,\n\tCoordinationOfBenefits,\n\tCoveredByWorkersCompensation,\n\tMedicalExpenseOption,\n\tDCT_CoverageType,\n\tAdditionalLimitKS1 AS i_AdditionalLimitKS,\n\tAdditionalLimitKY1 AS i_AdditionalLimitKY,\n\tAdditionalLimitMN1 AS i_AdditionalLimitMN,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitKS), -1, i_AdditionalLimitKS)\n\tIFF(i_AdditionalLimitKS IS NULL, - 1, i_AdditionalLimitKS) AS o_AdditionalLimitKS,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitKY), -1, i_AdditionalLimitKY)\n\tIFF(i_AdditionalLimitKY IS NULL, - 1, i_AdditionalLimitKY) AS o_AdditionalLimitKY,\n\t-- *INF*: IIF(ISNULL(i_AdditionalLimitMN), -1, i_AdditionalLimitMN)\n\tIFF(i_AdditionalLimitMN IS NULL, - 1, i_AdditionalLimitMN) AS o_AdditionalLimitMN,\n\tRatingZoneCode,\n\tFullGlassIndicator1 AS FullGlassIndicator\n\tFROM Union_Rejoin_Premium\n),\nLKP_ExcessAttendantCare_Coverage_Prem AS (\n\tSELECT\n\tlu_PolicyKey,\n\ti_PolicyKey,\n\ti_EffectiveDate,\n\ti_ExpirationDate,\n\tlu_EffectiveDate,\n\tlu_ExpirationDate\n\tFROM (\n\t\tselect distinct POL.pol_key, RC.EffectiveDate, RC.ExpirationDate \r\n\t\t\r\n\t\tfrom v2.policy POL\r\n\t\t\r\n\t\tinner join PolicyCoverage PC\r\n\t\ton PC.PolicyAKID = POL.pol_ak_id\r\n\t\tand PC.CurrentSnapshotFlag = 1\r\n\t\t\r\n\t\tinner join RatingCoverage RC\r\n\t\ton RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\tand RC.CoverageType = 'ExcessAttendantCare'\r\n\t\tand RC.CurrentSnapshotFlag = 1\r\n\t\t\r\n\t\twhere POL.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY lu_PolicyKey,lu_EffectiveDate,lu_ExpirationDate ORDER BY lu_PolicyKey) = 1\n),\nEXP_Logic_Premium AS (\n\tSELECT\n\t-1 AS LossMasterCalculationId,\n\tEXP_Cleansing_Premium.o_PremiumMasterCalculationID AS PremiumMasterCalculationID,\n\tEXP_Cleansing_Premium.o_PremiumMasterRunDate AS PremiumMasterRunDate,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS loss_master_run_date,\n\tEXP_Cleansing_Premium.o_pol_key AS pol_key,\n\tEXP_Cleansing_Premium.o_prim_bus_class_code AS prim_bus_class_code,\n\tEXP_Cleansing_Premium.o_StateProvinceCode AS StateProvinceCode,\n\tEXP_Cleansing_Premium.o_PremiumTransactionBookedDate AS PremiumTransactionBookedDate,\n\tEXP_Cleansing_Premium.o_PremiumMasterSubLine AS PremiumMasterSubLine,\n\t-- *INF*: --Fix for EDWP-4028\r\n\t-- --DECODE(TRUE, \r\n\t-- --IN(StateProvinceCode,'15', '16', '21', '22') AND --PremiumMasterSubLine='613','01',\r\n\t-- --IN(StateProvinceCode,'14','13', '12', '34', '24', '48') AND\r\n\t-- ---PremiumMasterSubLine='611','00',\r\n\t-- --IN(PremiumMasterSubLine,'618','648'),'00',\r\n\t-- --PremiumMasterSubLine='615','01',\r\n\t-- --IN(StateProvinceCode,'15', '16', '21', '22') AND\r\n\t-- --IN(PremiumMasterSubLine,'620', '621','622', '623', '641','645'),'01',\r\n\t-- --IN(StateProvinceCode,'14','13','12','34','24','48') AND\r\n\t-- --IN(PremiumMasterSubLine,'641','620', '621', '622', '623'),'00',\r\n\t-- --'N/A')\r\n\t-- --4352\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_CoverageCode,'COLL','COMPRH','COMRPD','CALNSECOMP','PLSPAK - BRD','CALNSECOL','TOWLABOR'),'00',\r\n\t-- IN(StateProvinceCode,'15','16','21','22')  AND  IN(i_CoverageCode,'ADLINS','BIPD','EMPLESSOR','FELEMPL',\r\n\t-- 'INJLEASEWRKS','LSECONCRN','MANU','MCCA','MEDPAY',\r\n\t-- 'MINPREM','PIP','POLLUTION','RACEXCL','RAILOPTS','UIM',\r\n\t-- 'UM','LOSSUSEEXP','LIMMEXCOV','PPI','671','672','681','682','695'),'01',\r\n\t-- '00')\n\tDECODE(\n\t    TRUE,\n\t    i_CoverageCode IN ('COLL','COMPRH','COMRPD','CALNSECOMP','PLSPAK - BRD','CALNSECOL','TOWLABOR'), '00',\n\t    StateProvinceCode IN ('15','16','21','22') AND i_CoverageCode IN ('ADLINS','BIPD','EMPLESSOR','FELEMPL','INJLEASEWRKS','LSECONCRN','MANU','MCCA','MEDPAY','MINPREM','PIP','POLLUTION','RACEXCL','RAILOPTS','UIM','UM','LOSSUSEEXP','LIMMEXCOV','PPI','671','672','681','682','695'), '01',\n\t    '00'\n\t) AS sub_line_code_out,\n\tEXP_Cleansing_Premium.o_ClassCode AS ClassCode,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR IS_SPACES(ClassCode) OR LENGTH(ClassCode)=0\r\n\t-- OR IN(ClassCode, 'N/A','TBD'),\r\n\t-- '00000',\r\n\t-- ClassCode\r\n\t-- )\n\tIFF(\n\t    ClassCode IS NULL\n\t    or LENGTH(ClassCode)>0\n\t    and TRIM(ClassCode)=''\n\t    or LENGTH(ClassCode) = 0\n\t    or ClassCode IN ('N/A','TBD'),\n\t    '00000',\n\t    ClassCode\n\t) AS v_PremiumMasterClassCode,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR IS_SPACES(ClassCode) OR LENGTH(ClassCode)=0\r\n\t-- OR IN(ClassCode, 'N/A','TBD'),\r\n\t-- '00000',\r\n\t-- ClassCode\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- --IIF(ISNULL(ClassCode) OR LENGTH(ClassCode)=0,'N/A',ClassCode)\n\tIFF(\n\t    ClassCode IS NULL\n\t    or LENGTH(ClassCode)>0\n\t    and TRIM(ClassCode)=''\n\t    or LENGTH(ClassCode) = 0\n\t    or ClassCode IN ('N/A','TBD'),\n\t    '00000',\n\t    ClassCode\n\t) AS PremiumMasterClassCode,\n\t'N/A' AS LossMasterClassCode,\n\t'N/A' AS Cause_of_Loss,\n\tEXP_Cleansing_Premium.o_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode,\n\tEXP_Cleansing_Premium.o_pol_eff_date AS pol_eff_date,\n\t'N/A' AS ClaimNum,\n\t'N/A' AS ClaimantNum,\n\tEXP_Cleansing_Premium.o_PremiumMasterPremium AS PremiumMasterPremium,\n\t-- *INF*: ROUND(PremiumMasterPremium,2)\n\tROUND(PremiumMasterPremium, 2) AS PremiumMasterPremium_out,\n\t0.00 AS PaidLossAmt,\n\t0.00 AS OutstandingAmt,\n\tEXP_Cleansing_Premium.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_Cleansing_Premium.o_RiskUnitGroup AS RiskUnitGroup,\n\tEXP_Cleansing_Premium.o_SourceSystemID AS SourceSystemID,\n\tEXP_Cleansing_Premium.o_RiskType AS RiskType,\n\tEXP_Cleansing_Premium.o_DeductibleAmount AS DeductibleAmount,\n\t-- *INF*: :LKP.LKP_COVERAGEDEDUCTIBLE_DCT(PremiumTransactionAKID1)\n\tLKP_COVERAGEDEDUCTIBLE_DCT_PremiumTransactionAKID1.CoverageDeductibleValue AS v_DeductibleAmount_DCT,\n\t-- *INF*: IIF(SourceSystemID = 'DCT', v_DeductibleAmount_DCT, DeductibleAmount)\n\tIFF(SourceSystemID = 'DCT', v_DeductibleAmount_DCT, DeductibleAmount) AS v_DeductibleAmount,\n\t-- *INF*: IIF(LENGTH(v_DeductibleAmount)=0 OR ISNULL(v_DeductibleAmount) OR v_DeductibleAmount='FullCoverage' OR DeductibleBasis='0','0',v_DeductibleAmount)\n\tIFF(\n\t    LENGTH(v_DeductibleAmount) = 0\n\t    or v_DeductibleAmount IS NULL\n\t    or v_DeductibleAmount = 'FullCoverage'\n\t    or DeductibleBasis = '0',\n\t    '0',\n\t    v_DeductibleAmount\n\t) AS DeductibleAmount_out,\n\tEXP_Cleansing_Premium.o_BureauCode1 AS BureauCode1,\n\tEXP_Cleansing_Premium.BureauCode2,\n\tEXP_Cleansing_Premium.BureauCode4,\n\tLKP_ExcessAttendantCare_Coverage_Prem.lu_PolicyKey,\n\tEXP_Cleansing_Premium.SubjectToNoFault,\n\tEXP_Cleansing_Premium.CoordinationOfBenefits,\n\tEXP_Cleansing_Premium.CoveredByWorkersCompensation,\n\tEXP_Cleansing_Premium.MedicalExpenseOption,\n\tEXP_Cleansing_Premium.DCT_CoverageType,\n\tEXP_Cleansing_Premium.o_AdditionalLimitKS AS AdditionalLimitKS,\n\tEXP_Cleansing_Premium.o_AdditionalLimitKY AS AdditionalLimitKY,\n\tEXP_Cleansing_Premium.o_AdditionalLimitMN AS AdditionalLimitMN,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- MedicalExpenseOption='Rejected','689',\r\n\t-- IN(MedicalExpenseOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'T','671',\r\n\t-- IN(MedicalExpenseOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND IN(CoordinationOfBenefits,'None','0','N/A'),'681',\r\n\t-- IN(MedicalExpenseOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'MedicalExpenses','691',\r\n\t-- IN(MedicalExpenseOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'WorkLoss','692',\r\n\t-- IN(MedicalExpenseOption,'Unlimited','SelectedLimit','Excluded', 'N/A')\r\n\t--    AND CoveredByWorkersCompensation = 'F' \r\n\t--    AND CoordinationOfBenefits = 'MedicalWorkLoss','693',\r\n\t-- NOT ISNULL(lu_PolicyKey),'683',\r\n\t-- '685')\n\tDECODE(\n\t    TRUE,\n\t    MedicalExpenseOption = 'Rejected', '689',\n\t    MedicalExpenseOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'T', '671',\n\t    MedicalExpenseOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits IN ('None','0','N/A'), '681',\n\t    MedicalExpenseOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'MedicalExpenses', '691',\n\t    MedicalExpenseOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'WorkLoss', '692',\n\t    MedicalExpenseOption IN ('Unlimited','SelectedLimit','Excluded','N/A') AND CoveredByWorkersCompensation = 'F' AND CoordinationOfBenefits = 'MedicalWorkLoss', '693',\n\t    lu_PolicyKey IS NOT NULL, '683',\n\t    '685'\n\t) AS v_MI_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DCT_CoverageType = 'PIP' AND IN(TypeBureauCode,'AL','AN','AP','N/A','CommercialAuto'), '1',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    DCT_CoverageType = 'PIP' AND TypeBureauCode IN ('AL','AN','AP','N/A','CommercialAuto'), '1',\n\t    '0'\n\t) AS v_CLFile_PIP,\n\tEXP_Cleansing_Premium.o_CoverageCode AS i_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '15' AND IN (AdditionalLimitKS,-1, 0) AND v_CLFile_PIP = '1', '681',\r\n\t-- StateProvinceCode = '15' AND NOT IN (AdditionalLimitKS,-1, 0) AND v_CLFile_PIP = '1', '682',\r\n\t-- i_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '15' AND AdditionalLimitKS IN (- 1,0) AND v_CLFile_PIP = '1', '681',\n\t    StateProvinceCode = '15' AND NOT AdditionalLimitKS IN (- 1,0) AND v_CLFile_PIP = '1', '682',\n\t    i_CoverageCode\n\t) AS v_KS_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '16' AND IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '681',\r\n\t-- StateProvinceCode = '16' AND  IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '671',\t\r\n\t-- StateProvinceCode = '16' AND NOT IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '682',\r\n\t-- StateProvinceCode = '16' AND  NOT IN (AdditionalLimitKY, -1, 0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '672',\r\n\t-- i_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '16' AND AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '681',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '671',\n\t    StateProvinceCode = '16' AND NOT AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation <> 'T' AND v_CLFile_PIP = '1', '682',\n\t    StateProvinceCode = '16' AND NOT AdditionalLimitKY IN (- 1,0) AND CoveredByWorkersCompensation = 'T' AND v_CLFile_PIP = '1', '672',\n\t    i_CoverageCode\n\t) AS v_KY_PIP_CoverageCode,\n\tPIPBureaucoverageCode AS v_MN_PIP_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \r\n\t-- -- MI\r\n\t-- StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'ExcessAttendantCare' and pol_eff_date > TO_DATE('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),'683',\r\n\t-- \r\n\t-- StateProvinceCode = '21' AND v_CLFile_PIP='1', v_MI_PIP_CoverageCode,\r\n\t-- -- StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'PIP' and pol_eff_date > TO_DATE('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),v_MI_PIP_CoverageCode,\r\n\t-- \r\n\t-- -- KS\r\n\t-- StateProvinceCode = '15'  AND v_CLFile_PIP='1', v_KS_PIP_CoverageCode,\r\n\t-- \r\n\t-- -- KY\r\n\t-- StateProvinceCode = '16' AND v_CLFile_PIP='1', v_KY_PIP_CoverageCode,\r\n\t-- \r\n\t-- --MN\r\n\t-- StateProvinceCode = '22' AND v_CLFile_PIP='1', v_MN_PIP_CoverageCode,\r\n\t-- \r\n\t-- -- Default\r\n\t-- i_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '21' AND SubjectToNoFault = 'Yes' AND DCT_CoverageType = 'ExcessAttendantCare' and pol_eff_date > TO_TIMESTAMP('2020-07-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), '683',\n\t    StateProvinceCode = '21' AND v_CLFile_PIP = '1', v_MI_PIP_CoverageCode,\n\t    StateProvinceCode = '15' AND v_CLFile_PIP = '1', v_KS_PIP_CoverageCode,\n\t    StateProvinceCode = '16' AND v_CLFile_PIP = '1', v_KY_PIP_CoverageCode,\n\t    StateProvinceCode = '22' AND v_CLFile_PIP = '1', v_MN_PIP_CoverageCode,\n\t    i_CoverageCode\n\t) AS o_CoverageCode,\n\tv_CLFile_PIP AS o_CLFile_PIP,\n\tEXP_Cleansing_Premium.o_ConstructionCode AS ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(ConstructionCode) AS ConstructionCode_out,\n\tEXP_Cleansing_Premium.o_IsoFireProtectionCode AS IsoFireProtectionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode) AS IsoFireProtectionCode_out,\n\tEXP_Cleansing_Premium.o_PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode) AS PackageModificationAdjustmentGroupCode_out,\n\tEXP_Cleansing_Premium.o_pol_exp_date AS pol_exp_date,\n\tEXP_Cleansing_Premium.o_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\tEXP_Cleansing_Premium.InsuranceSegmentCode,\n\tEXP_Cleansing_Premium.o_ZipPostalCode AS ZipPostalCode,\n\tEXP_Cleansing_Premium.PremiumMasterExposure,\n\tEXP_Cleansing_Premium.VehicleYear,\n\tEXP_Cleansing_Premium.CoverageLimitValue,\n\tEXP_Cleansing_Premium.TerminalZoneCode,\n\tEXP_Cleansing_Premium.DeductibleBasis,\n\tEXP_Cleansing_Premium.PremiumTransactionEffectiveDate,\n\tEXP_Cleansing_Premium.CoverageGroupCode,\n\tEXP_Cleansing_Premium.o_VehicleNumber,\n\tEXP_Cleansing_Premium.PIPBureaucoverageCode,\n\tEXP_Cleansing_Premium.CoverageLimitType,\n\tEXP_Cleansing_Premium.PremiumTransactionAKID1,\n\tEXP_Cleansing_Premium.IncludeUIM,\n\tEXP_Cleansing_Premium.RatingZoneCode,\n\tEXP_Cleansing_Premium.FullGlassIndicator\n\tFROM EXP_Cleansing_Premium\n\tLEFT JOIN LKP_ExcessAttendantCare_Coverage_Prem\n\tON LKP_ExcessAttendantCare_Coverage_Prem.lu_PolicyKey = EXP_Cleansing_Premium.o_pol_key AND LKP_ExcessAttendantCare_Coverage_Prem.lu_EffectiveDate <= EXP_Cleansing_Premium.o_pol_exp_date AND LKP_ExcessAttendantCare_Coverage_Prem.lu_ExpirationDate >= EXP_Cleansing_Premium.o_pol_eff_date\n\tLEFT JOIN LKP_COVERAGEDEDUCTIBLE_DCT LKP_COVERAGEDEDUCTIBLE_DCT_PremiumTransactionAKID1\n\tON LKP_COVERAGEDEDUCTIBLE_DCT_PremiumTransactionAKID1.PremiumTransactionAKID = PremiumTransactionAKID1\n\n),\nUnion AS (\n\tSELECT LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode, LossMasterClassCode, Cause_of_Loss, TerritoryCode, pol_eff_date, ClaimNum, ClaimantNum, PremiumMasterPremium_out AS PremiumMasterPremium, PaidLossAmt, OutstandingAmt, TypeBureauCode, RiskUnitGroup, SourceSystemID, RiskType, DeductibleAmount_out AS DeductibleAmount, o_CoverageCode AS CoverageCode, ConstructionCode_out AS ConstructionCode, IsoFireProtectionCode_out AS IsoFireProtectionCode, PackageModificationAdjustmentGroupCode_out AS PackageModificationAdjustmentGroupCode, pol_exp_date AS PolicyExpirationDate, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, InsuranceSegmentCode, PremiumMasterExposure, ZipPostalCode, VehicleYear, CoverageLimitValue, TerminalZoneCode, DeductibleBasis, PremiumTransactionEffectiveDate, CoverageGroupCode, o_VehicleNumber AS VehicleNumber, PIPBureaucoverageCode, CoverageLimitType, PremiumTransactionAKID1, IncludeUIM, AdditionalLimitKS, AdditionalLimitKY, AdditionalLimitMN, o_CLFile_PIP, RatingZoneCode, FullGlassIndicator\n\tFROM EXP_Logic_Premium\n\tUNION\n\tSELECT loss_master_calculation_id AS LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode_out AS PremiumMasterClassCode, LossMasterClassCode_out AS LossMasterClassCode, cause_of_loss_out AS Cause_of_Loss, TerritoryCode_out AS TerritoryCode, pol_eff_date, ClaimNum, claimant_num AS ClaimantNum, PremiumMasterPremium, PaidLossAmount AS PaidLossAmt, OutstandingLossAmount AS OutstandingAmt, TypeBureauCode, RiskUnitGroup, PolicySourceID AS SourceSystemID, RiskType, DeductibleAmount, o_CoverageCode AS CoverageCode, ConstructionCode, IsoFireProtectionCode, PackageModificationAdjustmentGroupCode, pol_exp_date AS PolicyExpirationDate, CumulativeInceptiontoDatePaidLoss AS InceptionToDatePaidLossAmount, claim_coverage_detail_ak_id AS ClaimCoverageID, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, InsuranceSegmentCode, exposure AS PremiumMasterExposure, ZipPostalCode, VehicleYear, claim_loss_date, direct_alae_paid_including_recoveries, direct_loss_outstanding_excluding_recoveries, CoverageLimitValue, TerminalZoneCode, DeductibleBasis2 AS DeductibleBasis, CoverageGroupCode, VehicleNumber, PIPBureaucoverageCode, CoverageLimitType, PremiumTransactionAKID1, IncludeUIM, AdditionalLimitKS, AdditionalLimitKY, AdditionalLimitMN, o_CLFile_PIP, RatingZoneCode, FullGlassIndicator1 AS FullGlassIndicator\n\tFROM EXP_Logic_Loss\n),\nEXP_CombinedCoverageLimitAndDeductibleRules AS (\n\tSELECT\n\tStateProvinceCode,\n\tDeductibleAmount,\n\tCoverageCode,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\tDeductibleBasis,\n\tPIPBureaucoverageCode,\n\tPremiumTransactionAKID1 AS PremiumTransactionAKID,\n\tPremiumMasterCalculationID,\n\tAnnualStatementLineNumber,\n\tAdditionalLimitKS,\n\tAdditionalLimitKY,\n\tAdditionalLimitMN,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- in(StateProvinceCode,'16') AND in(PIPBureaucoverageCode,'682','672'),:LKP.LKP_COVERAGELIMITOVERRIDE(PremiumTransactionAKID,'PersonalInjuryProtectionExcessLimit'),\r\n\t-- \r\n\t-- in(StateProvinceCode,'22') AND v_AdditionalLimit_lookup_translated = '1',:LKP.LKP_COVERAGELIMITOVERRIDE(PremiumTransactionAKID,'PersonalInjuryProtectionExcessLimit'),\r\n\t-- \r\n\t-- CoverageLimitValue)\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode IN ('16') AND PIPBureaucoverageCode IN ('682','672'), LKP_COVERAGELIMITOVERRIDE_PremiumTransactionAKID_PersonalInjuryProtectionExcessLimit.CoverageLimitValue,\n\t    StateProvinceCode IN ('22') AND v_AdditionalLimit_lookup_translated = '1', LKP_COVERAGELIMITOVERRIDE_PremiumTransactionAKID_PersonalInjuryProtectionExcessLimit.CoverageLimitValue,\n\t    CoverageLimitValue\n\t) AS v_CoverageOverrideValue,\n\to_CLFile_PIP AS i_CLFile_PIP,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '16' AND IN (AdditionalLimitKY,-1, 0) AND i_CLFile_PIP = '1', '0',\r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 1 AND i_CLFile_PIP = '1', '10000', \r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 2 AND i_CLFile_PIP = '1', '20000',\r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 3 AND i_CLFile_PIP = '1', '30000',\r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 4 AND i_CLFile_PIP = '1', '40000',\r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 5 AND i_CLFile_PIP = '1', '65000',\r\n\t-- StateProvinceCode = '16' AND AdditionalLimitKY = 6 AND i_CLFile_PIP = '1', '90000',\r\n\t-- StateProvinceCode='16' AND IN(PIPBureaucoverageCode,'672','682'),v_CoverageOverrideValue,\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '16' AND AdditionalLimitKY IN (- 1,0) AND i_CLFile_PIP = '1', '0',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 1 AND i_CLFile_PIP = '1', '10000',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 2 AND i_CLFile_PIP = '1', '20000',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 3 AND i_CLFile_PIP = '1', '30000',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 4 AND i_CLFile_PIP = '1', '40000',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 5 AND i_CLFile_PIP = '1', '65000',\n\t    StateProvinceCode = '16' AND AdditionalLimitKY = 6 AND i_CLFile_PIP = '1', '90000',\n\t    StateProvinceCode = '16' AND PIPBureaucoverageCode IN ('672','682'), v_CoverageOverrideValue,\n\t    '0'\n\t) AS v_KY_PIP_CoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 1 AND i_CLFile_PIP = '1', '30000', \r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 2 AND i_CLFile_PIP = '1', '40000',\r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 3 AND i_CLFile_PIP = '1', '50000',\r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 4 AND i_CLFile_PIP = '1', '50000',\r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 5 AND i_CLFile_PIP = '1', '75000',\r\n\t-- StateProvinceCode = '22' AND AdditionalLimitMN= 6 AND i_CLFile_PIP = '1', '100000',\r\n\t-- StateProvinceCode = '22' AND v_AdditionalLimit_lookup_translated = '1', v_CoverageOverrideValue,\r\n\t-- StateProvinceCode = '22' AND IN (AdditionalLimitMN,-1, 0) AND i_CLFile_PIP = '1', '20000',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 1 AND i_CLFile_PIP = '1', '30000',\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 2 AND i_CLFile_PIP = '1', '40000',\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 3 AND i_CLFile_PIP = '1', '50000',\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 4 AND i_CLFile_PIP = '1', '50000',\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 5 AND i_CLFile_PIP = '1', '75000',\n\t    StateProvinceCode = '22' AND AdditionalLimitMN = 6 AND i_CLFile_PIP = '1', '100000',\n\t    StateProvinceCode = '22' AND v_AdditionalLimit_lookup_translated = '1', v_CoverageOverrideValue,\n\t    StateProvinceCode = '22' AND AdditionalLimitMN IN (- 1,0) AND i_CLFile_PIP = '1', '20000',\n\t    '0'\n\t) AS v_MN_PIP_CoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode = '16' AND IN (AdditionalLimitKY,-1, 0) AND i_CLFile_PIP = '1', 'D',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '16' AND AdditionalLimitKY IN (- 1,0) AND i_CLFile_PIP = '1', 'D',\n\t    '0'\n\t) AS v_KY_PIP_DeductibleBasis,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- StateProvinceCode='21' AND IN(CoverageCode, '683', '685', '689') AND i_CLFile_PIP = '1','0',\r\n\t-- StateProvinceCode='21' AND IN(CoverageCode,'671','681','691','692','693') AND i_CLFile_PIP = '1','D',\t\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '21' AND CoverageCode IN ('683','685','689') AND i_CLFile_PIP = '1', '0',\n\t    StateProvinceCode = '21' AND CoverageCode IN ('671','681','691','692','693') AND i_CLFile_PIP = '1', 'D',\n\t    '0'\n\t) AS v_MI_PIP_DeductibleBasis,\n\t-- *INF*: IIF(IN(StateProvinceCode,'22') AND  IS_NUMBER(PIPBureaucoverageCode), :LKP.LKP_GETADDITIONALLIMITVALUE(PremiumTransactionAKID))\n\tIFF(\n\t    StateProvinceCode IN ('22') AND REGEXP_LIKE(PIPBureaucoverageCode, '^[0-9]+$'),\n\t    LKP_GETADDITIONALLIMITVALUE_PremiumTransactionAKID.AdditionalLimit\n\t) AS v_AdditionalLimit_lookup,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- in(v_AdditionalLimit_lookup,'F','N','0'),'0',\r\n\t-- in(v_AdditionalLimit_lookup,'T','Y','1'),'1',\r\n\t-- '0')\r\n\t-- \r\n\t-- -- figure out all the ways sql can translate a bit type to a string and account for it or default to 0\n\tDECODE(\n\t    TRUE,\n\t    v_AdditionalLimit_lookup IN ('F','N','0'), '0',\n\t    v_AdditionalLimit_lookup IN ('T','Y','1'), '1',\n\t    '0'\n\t) AS v_AdditionalLimit_lookup_translated,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- CoverageCode='PPI','D',\r\n\t-- IN(CoverageCode,'BPIPNAME','MCCAI','MCCANI'),'0',\r\n\t-- CoverageCode = 'COMPRH' AND IN(CoverageGroupCode, 'COMPRH','DOC') AND i_FullGlassIndicator = 'T', 'F',\r\n\t-- StateProvinceCode='15' AND i_CLFile_PIP = '1', '0',\r\n\t-- StateProvinceCode='16' AND i_CLFile_PIP = '1', v_KY_PIP_DeductibleBasis,\r\n\t-- StateProvinceCode='16' AND IN(PIPBureaucoverageCode,'671','681'),'D',\r\n\t-- StateProvinceCode='21' AND i_CLFile_PIP = '1', v_MI_PIP_DeductibleBasis,\r\n\t-- StateProvinceCode='21' AND IS_NUMBER(PIPBureaucoverageCode),'D',\r\n\t-- StateProvinceCode='22' AND i_CLFile_PIP = '1', '0',\r\n\t-- IS_NUMBER(PIPBureaucoverageCode),'0',\r\n\t-- DeductibleBasis != 'F', DeductibleBasis,\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    CoverageCode = 'PPI', 'D',\n\t    CoverageCode IN ('BPIPNAME','MCCAI','MCCANI'), '0',\n\t    CoverageCode = 'COMPRH' AND CoverageGroupCode IN ('COMPRH','DOC') AND i_FullGlassIndicator = 'T', 'F',\n\t    StateProvinceCode = '15' AND i_CLFile_PIP = '1', '0',\n\t    StateProvinceCode = '16' AND i_CLFile_PIP = '1', v_KY_PIP_DeductibleBasis,\n\t    StateProvinceCode = '16' AND PIPBureaucoverageCode IN ('671','681'), 'D',\n\t    StateProvinceCode = '21' AND i_CLFile_PIP = '1', v_MI_PIP_DeductibleBasis,\n\t    StateProvinceCode = '21' AND REGEXP_LIKE(PIPBureaucoverageCode, '^[0-9]+$'), 'D',\n\t    StateProvinceCode = '22' AND i_CLFile_PIP = '1', '0',\n\t    REGEXP_LIKE(PIPBureaucoverageCode, '^[0-9]+$'), '0',\n\t    DeductibleBasis != 'F', DeductibleBasis,\n\t    '0'\n\t) AS v_DeductibleBasis,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- -- only calc for premium\r\n\t-- -- PremiumMasterCalculationID = -1,'N/A',\r\n\t-- \r\n\t-- --MN\r\n\t-- \r\n\t-- StateProvinceCode='22' AND \r\n\t-- --CoverageLimitType='PersonalInjuryProtectionBasicLimit' AND \r\n\t-- v_AdditionalLimit_lookup_translated = '0' AND\r\n\t-- IS_NUMBER(PIPBureaucoverageCode),'20000',\r\n\t-- \r\n\t-- StateProvinceCode='22' AND i_CLFile_PIP = '1', v_MN_PIP_CoverageLimitValue,\r\n\t-- \r\n\t-- StateProvinceCode='22' AND \r\n\t-- --CoverageLimitType='PersonalInjuryProtectionExcessLimit' AND \r\n\t-- v_AdditionalLimit_lookup_translated =  '1' AND\r\n\t-- IS_NUMBER(PIPBureaucoverageCode),v_CoverageOverrideValue,\r\n\t-- \r\n\t-- -- KY\r\n\t-- StateProvinceCode='16' AND i_CLFile_PIP = '1', v_KY_PIP_CoverageLimitValue,\r\n\t-- \r\n\t-- -- KS\r\n\t-- StateProvinceCode = '15' AND i_CLFile_PIP = '1', '0',\r\n\t-- \r\n\t-- -- Default\r\n\t-- '0'\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    StateProvinceCode = '22' AND v_AdditionalLimit_lookup_translated = '0' AND REGEXP_LIKE(PIPBureaucoverageCode, '^[0-9]+$'), '20000',\n\t    StateProvinceCode = '22' AND i_CLFile_PIP = '1', v_MN_PIP_CoverageLimitValue,\n\t    StateProvinceCode = '22' AND v_AdditionalLimit_lookup_translated = '1' AND REGEXP_LIKE(PIPBureaucoverageCode, '^[0-9]+$'), v_CoverageOverrideValue,\n\t    StateProvinceCode = '16' AND i_CLFile_PIP = '1', v_KY_PIP_CoverageLimitValue,\n\t    StateProvinceCode = '15' AND i_CLFile_PIP = '1', '0',\n\t    '0'\n\t) AS v_CoverageLimitValueRules,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- in(v_DeductibleBasis,'0','N/A'),'0',\r\n\t-- v_DeductibleBasis='D' AND CoverageCode='COMRPD','9999999',\r\n\t-- DeductibleAmount)\n\tDECODE(\n\t    TRUE,\n\t    v_DeductibleBasis IN ('0','N/A'), '0',\n\t    v_DeductibleBasis = 'D' AND CoverageCode = 'COMRPD', '9999999',\n\t    DeductibleAmount\n\t) AS v_DeductibleAmount,\n\tv_DeductibleBasis AS o_DeductibleBasis,\n\tv_CoverageLimitValueRules AS o_CoverageLimitValue,\n\tv_DeductibleAmount AS o_DeductibleAmount,\n\tTypeBureauCode,\n\tCoverageGroupCode,\n\tFullGlassIndicator AS i_FullGlassIndicator\n\tFROM Union\n\tLEFT JOIN LKP_COVERAGELIMITOVERRIDE LKP_COVERAGELIMITOVERRIDE_PremiumTransactionAKID_PersonalInjuryProtectionExcessLimit\n\tON LKP_COVERAGELIMITOVERRIDE_PremiumTransactionAKID_PersonalInjuryProtectionExcessLimit.PremiumTransactionAKID = PremiumTransactionAKID\n\tAND LKP_COVERAGELIMITOVERRIDE_PremiumTransactionAKID_PersonalInjuryProtectionExcessLimit.CoverageLimitType = 'PersonalInjuryProtectionExcessLimit'\n\n\tLEFT JOIN LKP_GETADDITIONALLIMITVALUE LKP_GETADDITIONALLIMITVALUE_PremiumTransactionAKID\n\tON LKP_GETADDITIONALLIMITVALUE_PremiumTransactionAKID.PremiumTransactionAKId = PremiumTransactionAKID\n\n),\nEXP_ConstCode_IsoPC_Rules AS (\n\tSELECT\n\tsub_line_code AS i_sub_line_code,\n\tConstructionCode AS i_ConstructionCode,\n\tIsoFireProtectionCode AS i_IsoFireProtectionCode,\n\t-- *INF*: DECODE\r\n\t-- (TRUE,\r\n\t-- in(i_ConstructionCode,'N/A',null),'00',\r\n\t-- i_ConstructionCode='B','2',\r\n\t-- i_ConstructionCode\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_ConstructionCode IN ('N/A',null), '00',\n\t    i_ConstructionCode = 'B', '2',\n\t    i_ConstructionCode\n\t) AS v_ConstructionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_IsoFireProtectionCode='N/A' and in(i_sub_line_code,'010','015','016','017','018'),'10',\r\n\t-- i_IsoFireProtectionCode='N/A', '00',\r\n\t-- i_IsoFireProtectionCode='1', '01',\r\n\t-- in (i_IsoFireProtectionCode,'2','20'),'02',\r\n\t-- in (i_IsoFireProtectionCode,'3','13','30'),'03',\r\n\t-- i_IsoFireProtectionCode='4','04',\r\n\t-- i_IsoFireProtectionCode='5','05',\r\n\t-- i_IsoFireProtectionCode='6','06',\r\n\t-- i_IsoFireProtectionCode='7','07',\r\n\t-- i_IsoFireProtectionCode='8','08',\r\n\t-- in(i_IsoFireProtectionCode,'9','92','97'),'09',\r\n\t-- i_IsoFireProtectionCode='12','10',\r\n\t-- in(i_IsoFireProtectionCode,'OR','O4'),'04',\r\n\t-- i_IsoFireProtectionCode='8B','19',\r\n\t-- i_IsoFireProtectionCode='96','06',\r\n\t-- i_IsoFireProtectionCode\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_IsoFireProtectionCode = 'N/A' and i_sub_line_code IN ('010','015','016','017','018'), '10',\n\t    i_IsoFireProtectionCode = 'N/A', '00',\n\t    i_IsoFireProtectionCode = '1', '01',\n\t    i_IsoFireProtectionCode IN ('2','20'), '02',\n\t    i_IsoFireProtectionCode IN ('3','13','30'), '03',\n\t    i_IsoFireProtectionCode = '4', '04',\n\t    i_IsoFireProtectionCode = '5', '05',\n\t    i_IsoFireProtectionCode = '6', '06',\n\t    i_IsoFireProtectionCode = '7', '07',\n\t    i_IsoFireProtectionCode = '8', '08',\n\t    i_IsoFireProtectionCode IN ('9','92','97'), '09',\n\t    i_IsoFireProtectionCode = '12', '10',\n\t    i_IsoFireProtectionCode IN ('OR','O4'), '04',\n\t    i_IsoFireProtectionCode = '8B', '19',\n\t    i_IsoFireProtectionCode = '96', '06',\n\t    i_IsoFireProtectionCode\n\t) AS v_IsoFireProtectionCode,\n\tv_ConstructionCode AS o_ConstructionCode,\n\tv_IsoFireProtectionCode AS o_IsoFireProtectionCode\n\tFROM Union\n),\nLKP_RiskTerritory AS (\n\tSELECT\n\tRiskTerritory,\n\tPolicyKey\n\tFROM (\n\t\tSELECT RL.RiskTerritory as RiskTerritory,\r\n\t\tPOL.pol_key as PolicyKey\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL \r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL on POL.pol_ak_id=RL.PolicyAKID AND RL.CurrentSnapshotFlag=1 and POL.crrnt_snpsht_flag=1\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on RL.RisklocationAKID =PC.RisklocationAKID and PC.CurrentSnapshotFlag=1  \r\n\t\tWHERE (PC.TypeBureauCode in ('AL','AN','AP') or PC.InsuranceLine = 'CommercialAuto')\r\n\t\tand RL.LocationUnitNumber not in ( '0000', '000')\r\n\t\tand RL.RiskTerritory <> 'N/A'\r\n\t\tORDER BY POL.pol_key,\r\n\t\tRL.LocationUnitNumber,\r\n\t\tRL.RiskLocationAKID\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY RiskTerritory) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tUnion.LossMasterCalculationId AS i_LossMasterCalculationId,\n\tUnion.PremiumMasterCalculationID AS i_PremiumMasterCalculationID,\n\tUnion.PremiumMasterRunDate AS i_PremiumMasterRunDate,\n\tUnion.loss_master_run_date AS i_LossMasterRunDate,\n\tUnion.pol_key AS i_pol_key,\n\tUnion.prim_bus_class_code AS i_prim_bus_class_code,\n\tUnion.StateProvinceCode AS i_StateProvinceCode,\n\tUnion.sub_line_code AS i_sub_line_code,\n\tUnion.PremiumMasterClassCode AS i_PremiumMasterClassCode,\n\tUnion.LossMasterClassCode AS i_LossMasterClassCode,\n\tUnion.Cause_of_Loss AS i_Cause_of_Loss,\n\tLKP_RiskTerritory.RiskTerritory AS i_TerritoryCode,\n\tUnion.pol_eff_date AS i_pol_eff_date,\n\tUnion.ClaimNum AS i_ClaimNum,\n\tUnion.ClaimantNum AS i_ClaimantNum,\n\tUnion.PremiumMasterPremium AS i_PremiumMasterPremium,\n\tUnion.PaidLossAmt AS i_PaidLossAmt,\n\tUnion.OutstandingAmt AS i_OutstandingAmt,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.TypeBureauCode AS i_TypeBureauCode,\n\tUnion.SourceSystemID AS i_SourceSystemID,\n\tUnion.RiskType AS i_RiskType,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.o_DeductibleAmount AS i_DeductibleAmount,\n\tUnion.CoverageCode AS i_CoverageCode,\n\tEXP_ConstCode_IsoPC_Rules.o_ConstructionCode AS i_ConstructionCode,\n\tEXP_ConstCode_IsoPC_Rules.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tUnion.PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tUnion.PolicyExpirationDate AS i_PolicyExpirationDate,\n\tUnion.InceptionToDatePaidLossAmount AS i_InceptionToDatePaidLossAmount,\n\tUnion.ClaimCoverageID AS i_ClaimCoverageID,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.AnnualStatementLineNumber AS i_AnnualStatementLineNumber,\n\tUnion.BureauCode1 AS i_BureauCode1,\n\tUnion.BureauCode2 AS i_BureauCode2,\n\tUnion.BureauCode4 AS i_BureauCode4,\n\tUnion.InsuranceSegmentCode AS i_InsuranceSegmentCode,\n\tUnion.ZipPostalCode AS i_ZipPostalCode,\n\tUnion.PremiumMasterExposure AS i_PremiumMasterExposure,\n\tUnion.VehicleYear AS i_VehicleYear,\n\tUnion.claim_loss_date AS i_claim_loss_date,\n\tUnion.direct_alae_paid_including_recoveries AS i_direct_alae_paid_including_recoveries,\n\tUnion.direct_loss_outstanding_excluding_recoveries AS i_direct_loss_outstanding_excluding_recoveries,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.o_CoverageLimitValue AS i_CoverageLimitValue,\n\tUnion.TerminalZoneCode AS i_TerminalZoneCode,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.o_DeductibleBasis AS i_DeductibleBasis,\n\tUnion.PremiumTransactionEffectiveDate AS i_PremiumTransactionEffectiveDate,\n\tEXP_CombinedCoverageLimitAndDeductibleRules.CoverageGroupCode AS i_CoverageGroupCode,\n\tUnion.VehicleNumber AS i_VehicleNumber,\n\tUnion.IncludeUIM AS i_IncludeUIM,\n\tUnion.RatingZoneCode AS i_RatingZoneCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TypeBureauCode='Property',\r\n\t-- DECODE(TRUE,\r\n\t-- i_RiskType='BLDG','01',\r\n\t-- i_RiskType='PP','02',\r\n\t-- 'N/A'\r\n\t-- ),\r\n\t-- \r\n\t-- i_TypeBureauCode='Crime',\r\n\t-- DECODE(TRUE,\r\n\t-- i_RiskType='ClientsProperty','200',\r\n\t-- i_RiskType='ClientsProperty_ETF','400',\r\n\t-- i_RiskType='ComputerFraud','200',\r\n\t-- i_RiskType='ComputerFraud_G','300',\r\n\t-- i_RiskType='EmployeeTheft','200',\r\n\t-- i_RiskType='EmployeeTheft_ETF','400',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition','200',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_ETF','400',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_G','300',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_GETF','400',\r\n\t-- i_RiskType='EmployeeTheftPerEmployee','300',\r\n\t-- i_RiskType='EmployeeTheftPerEmployee_GETF','400',\r\n\t-- i_RiskType='EmployeeTheftPerLoss','300',\r\n\t-- i_RiskType='EmployeeTheftPerLoss_GETF','400',\r\n\t-- i_RiskType='ForgeryAndAlteration','200',\r\n\t-- i_RiskType='ForgeryAndAlteration_ETF','400',\r\n\t-- i_RiskType='ForgeryAndAlteration_G','300',\r\n\t-- i_RiskType='ForgeryAndAlteration_GETF','400',\r\n\t-- i_RiskType='FundsTransfer','200',\r\n\t-- i_RiskType='FundsTransfer_G','300',\r\n\t-- i_RiskType='GuestPropertyInsidePremises','200',\r\n\t-- i_RiskType='GuestPropertySafeDeposit','200',\r\n\t-- i_RiskType='InsideRobbery','200',\r\n\t-- i_RiskType='InsideRobbery_G','300',\r\n\t-- i_RiskType='InsideRobberyOther','200',\r\n\t-- i_RiskType='InsideRobberyOther_G','300',\r\n\t-- i_RiskType='InsideRobberySecurities','200',\r\n\t-- i_RiskType='InsideRobberySecurities_G','300',\r\n\t-- i_RiskType='InsideTheftMoney','200',\r\n\t-- i_RiskType='InsideTheftMoney_G','300',\r\n\t-- i_RiskType='InsideTheftProperty','200',\r\n\t-- i_RiskType='InsideTheftProperty_G','300',\r\n\t-- i_RiskType='MoneyOrders','200',\r\n\t-- i_RiskType='OutsidePremises','200',\r\n\t-- i_RiskType='OutsidePremises_G','300',\r\n\t-- 'N/A'\r\n\t-- ),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'Property', DECODE(\n\t        TRUE,\n\t        i_RiskType = 'BLDG', '01',\n\t        i_RiskType = 'PP', '02',\n\t        'N/A'\n\t    ),\n\t    i_TypeBureauCode = 'Crime', DECODE(\n\t        TRUE,\n\t        i_RiskType = 'ClientsProperty', '200',\n\t        i_RiskType = 'ClientsProperty_ETF', '400',\n\t        i_RiskType = 'ComputerFraud', '200',\n\t        i_RiskType = 'ComputerFraud_G', '300',\n\t        i_RiskType = 'EmployeeTheft', '200',\n\t        i_RiskType = 'EmployeeTheft_ETF', '400',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition', '200',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_ETF', '400',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_G', '300',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_GETF', '400',\n\t        i_RiskType = 'EmployeeTheftPerEmployee', '300',\n\t        i_RiskType = 'EmployeeTheftPerEmployee_GETF', '400',\n\t        i_RiskType = 'EmployeeTheftPerLoss', '300',\n\t        i_RiskType = 'EmployeeTheftPerLoss_GETF', '400',\n\t        i_RiskType = 'ForgeryAndAlteration', '200',\n\t        i_RiskType = 'ForgeryAndAlteration_ETF', '400',\n\t        i_RiskType = 'ForgeryAndAlteration_G', '300',\n\t        i_RiskType = 'ForgeryAndAlteration_GETF', '400',\n\t        i_RiskType = 'FundsTransfer', '200',\n\t        i_RiskType = 'FundsTransfer_G', '300',\n\t        i_RiskType = 'GuestPropertyInsidePremises', '200',\n\t        i_RiskType = 'GuestPropertySafeDeposit', '200',\n\t        i_RiskType = 'InsideRobbery', '200',\n\t        i_RiskType = 'InsideRobbery_G', '300',\n\t        i_RiskType = 'InsideRobberyOther', '200',\n\t        i_RiskType = 'InsideRobberyOther_G', '300',\n\t        i_RiskType = 'InsideRobberySecurities', '200',\n\t        i_RiskType = 'InsideRobberySecurities_G', '300',\n\t        i_RiskType = 'InsideTheftMoney', '200',\n\t        i_RiskType = 'InsideTheftMoney_G', '300',\n\t        i_RiskType = 'InsideTheftProperty', '200',\n\t        i_RiskType = 'InsideTheftProperty_G', '300',\n\t        i_RiskType = 'MoneyOrders', '200',\n\t        i_RiskType = 'OutsidePremises', '200',\n\t        i_RiskType = 'OutsidePremises_G', '300',\n\t        'N/A'\n\t    ),\n\t    'N/A'\n\t) AS v_PolicyForm_DCT,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TypeBureauCode = 'CR',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode4,'01','02','03'),'200',\r\n\t-- IN(i_BureauCode4,'11','12','13'),'300',\r\n\t-- IN(i_BureauCode4,'21','22','23','27','28'),'400',\r\n\t-- '200'),\r\n\t-- \r\n\t-- i_TypeBureauCode = 'BT',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'01','02','03','04','05','06','09'),'120',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'07','08'),'190',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'10','20','26'),'170',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'),'110',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'31','32','39'),'130',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'42','43','44','45'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'45'),'111',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'47'),'121',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'48'),'131',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'49','41','42','43','44'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'51','59'),'150',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'52','53'),'141',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'54','55'),'151',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'56'),'161',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'57'),'171',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'58'),'181',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'60'),'191',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'61'),'160',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'62','63'),'192',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'64'),'112',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'67','68'),'142',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'69'),'152',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'70','71','72'),'180',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'73'),'122',\r\n\t-- '199'\r\n\t-- ),\r\n\t-- i_TypeBureauCode = 'FT','199',\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'CR', DECODE(\n\t        TRUE,\n\t        i_BureauCode4 IN ('01','02','03'), '200',\n\t        i_BureauCode4 IN ('11','12','13'), '300',\n\t        i_BureauCode4 IN ('21','22','23','27','28'), '400',\n\t        '200'\n\t    ),\n\t    i_TypeBureauCode = 'BT', DECODE(\n\t        TRUE,\n\t        i_BureauCode1 || i_BureauCode2 IN ('01','02','03','04','05','06','09'), '120',\n\t        i_BureauCode1 || i_BureauCode2 IN ('07','08'), '190',\n\t        i_BureauCode1 || i_BureauCode2 IN ('10','20','26'), '170',\n\t        i_BureauCode1 || i_BureauCode2 IN ('11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'), '110',\n\t        i_BureauCode1 || i_BureauCode2 IN ('31','32','39'), '130',\n\t        i_BureauCode1 || i_BureauCode2 IN ('42','43','44','45'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('45'), '111',\n\t        i_BureauCode1 || i_BureauCode2 IN ('47'), '121',\n\t        i_BureauCode1 || i_BureauCode2 IN ('48'), '131',\n\t        i_BureauCode1 || i_BureauCode2 IN ('49','41','42','43','44'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('51','59'), '150',\n\t        i_BureauCode1 || i_BureauCode2 IN ('52','53'), '141',\n\t        i_BureauCode1 || i_BureauCode2 IN ('54','55'), '151',\n\t        i_BureauCode1 || i_BureauCode2 IN ('56'), '161',\n\t        i_BureauCode1 || i_BureauCode2 IN ('57'), '171',\n\t        i_BureauCode1 || i_BureauCode2 IN ('58'), '181',\n\t        i_BureauCode1 || i_BureauCode2 IN ('60'), '191',\n\t        i_BureauCode1 || i_BureauCode2 IN ('61'), '160',\n\t        i_BureauCode1 || i_BureauCode2 IN ('62','63'), '192',\n\t        i_BureauCode1 || i_BureauCode2 IN ('64'), '112',\n\t        i_BureauCode1 || i_BureauCode2 IN ('67','68'), '142',\n\t        i_BureauCode1 || i_BureauCode2 IN ('69'), '152',\n\t        i_BureauCode1 || i_BureauCode2 IN ('70','71','72'), '180',\n\t        i_BureauCode1 || i_BureauCode2 IN ('73'), '122',\n\t        '199'\n\t    ),\n\t    i_TypeBureauCode = 'FT', '199',\n\t    'N/A'\n\t) AS v_PolicyForm_PMS,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_SourceSystemID='PMS',v_PolicyForm_PMS,\r\n\t-- IN(i_SourceSystemID,'DCT','DUC'),v_PolicyForm_DCT\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_SourceSystemID = 'PMS', v_PolicyForm_PMS,\n\t    i_SourceSystemID IN ('DCT','DUC'), v_PolicyForm_DCT\n\t) AS v_PolicyForm,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSYSDATE AS o_CreatedDate,\n\ti_PremiumMasterCalculationID AS o_PremiumMasterCalculationID,\n\ti_LossMasterCalculationId AS o_LossMasterCalculationId,\n\ti_TypeBureauCode AS o_TypeBureauCode,\n\t-- *INF*: IIF(IN(i_StateProvinceCode,'12','32'),'55','01')\n\tIFF(i_StateProvinceCode IN ('12','32'), '55', '01') AS o_BureauLineOfInsurance,\n\t-- *INF*: --Fix for EDWP-3967\r\n\t-- '0731'\r\n\t-- \r\n\t-- --'0761'\n\t'0731' AS o_BureauCompanyNumber,\n\ti_StateProvinceCode AS o_StateProvinceCode,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\ti_LossMasterRunDate AS o_LossMasterRunDate,\n\ti_pol_key AS o_pol_key,\n\t-- *INF*: LTRIM(RTRIM(i_PremiumMasterClassCode))\n\tLTRIM(RTRIM(i_PremiumMasterClassCode)) AS o_PremiumMasterClassCode,\n\t-- *INF*: LTRIM(RTRIM(i_LossMasterClassCode))\n\tLTRIM(RTRIM(i_LossMasterClassCode)) AS o_LossMasterClassCode,\n\ti_ClaimNum AS o_ClaimNum,\n\ti_ClaimantNum AS o_ClaimantNum,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_TerritoryCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_TerritoryCode) AS o_RiskTerritoryCode,\n\ti_pol_eff_date AS o_PolicyEffectiveDate,\n\ti_Cause_of_Loss AS o_CauseOfLoss,\n\t-- *INF*: IIF(ISNULL(i_DeductibleAmount),'0000000',LPAD(i_DeductibleAmount, 7, '0'))\n\tIFF(i_DeductibleAmount IS NULL, '0000000', LPAD(i_DeductibleAmount, 7, '0')) AS o_DeductibleAmount,\n\ti_CoverageCode AS o_CoverageCode,\n\t-- *INF*: 'N/A'\r\n\t-- --i_ConstructionCode\n\t'N/A' AS o_ConstructionCode,\n\t-- *INF*: 'N/A'\r\n\t-- --i_IsoFireProtectionCode\n\t'N/A' AS o_ISOFireProtectionCode,\n\ti_sub_line_code AS o_SublineCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_PolicyForm)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_PolicyForm) AS o_PolicyForm,\n\ti_PremiumMasterPremium AS o_PremiumMasterDirectWrittenPremiumAmount,\n\ti_PaidLossAmt AS o_PaidLossAmount,\n\ti_OutstandingAmt AS o_OutstandingLossAmount,\n\ti_PolicyExpirationDate AS o_PolicyExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_InceptionToDatePaidLossAmount), 0, i_InceptionToDatePaidLossAmount)\n\tIFF(i_InceptionToDatePaidLossAmount IS NULL, 0, i_InceptionToDatePaidLossAmount) AS o_InceptionToDatePaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_ClaimCoverageID), -1, i_ClaimCoverageID)\n\tIFF(i_ClaimCoverageID IS NULL, - 1, i_ClaimCoverageID) AS o_ClaimCoverageID,\n\ti_AnnualStatementLineNumber AS o_AnnualStatementLineNumber,\n\ti_ZipPostalCode AS o_ZipPostalCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_DeductibleBasis)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_DeductibleBasis) AS o_DeductibleIndicatorCode,\n\t-- *INF*: IIF(IN(i_TypeBureauCode,'RL','RN','RP'),i_VehicleYear,'N/A')\n\tIFF(i_TypeBureauCode IN ('RL','RN','RP'), i_VehicleYear, 'N/A') AS o_VehicleYear,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_CoverageLimitValue)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_CoverageLimitValue) AS o_CoverageLimitValue,\n\t'N/A' AS o_PolicyUpperLimit,\n\t-- *INF*: IIF(ISNULL(i_TerminalZoneCode),'N/A',i_TerminalZoneCode)\n\tIFF(i_TerminalZoneCode IS NULL, 'N/A', i_TerminalZoneCode) AS o_TerminalZoneCode,\n\t-- *INF*: IIF(ISNULL(i_PremiumMasterExposure), 0,i_PremiumMasterExposure )\r\n\t-- \n\tIFF(i_PremiumMasterExposure IS NULL, 0, i_PremiumMasterExposure) AS o_PremiumMasterExposure,\n\t-- *INF*: IIF(ISNULL(i_direct_alae_paid_including_recoveries),0,i_direct_alae_paid_including_recoveries)\n\tIFF(\n\t    i_direct_alae_paid_including_recoveries IS NULL, 0, i_direct_alae_paid_including_recoveries\n\t) AS o_PaidAllocatedLossAdjustmentExpenseAmount,\n\t-- *INF*: IIF(ISNULL(i_direct_loss_outstanding_excluding_recoveries),0,i_direct_loss_outstanding_excluding_recoveries)\n\tIFF(\n\t    i_direct_loss_outstanding_excluding_recoveries IS NULL, 0,\n\t    i_direct_loss_outstanding_excluding_recoveries\n\t) AS o_OutstandingAllocatedLossAdjustmentExpenseAmount,\n\t-- *INF*: IIF(ISNULL(i_claim_loss_date),TO_DATE('18000101','YYYYMMDD'),i_claim_loss_date)\n\tIFF(i_claim_loss_date IS NULL, TO_TIMESTAMP('18000101', 'YYYYMMDD'), i_claim_loss_date) AS o_ClaimLossDate,\n\t-- *INF*: IIF(ISNULL(i_PremiumTransactionEffectiveDate),TO_DATE('18000101','YYYYMMDD'),i_PremiumTransactionEffectiveDate)\n\tIFF(\n\t    i_PremiumTransactionEffectiveDate IS NULL, TO_TIMESTAMP('18000101', 'YYYYMMDD'),\n\t    i_PremiumTransactionEffectiveDate\n\t) AS o_PremiumTransactionEffectiveDate,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_CoverageGroupCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_CoverageGroupCode) AS o_CoverageGroupCode,\n\t-- *INF*: DECODE(TRUE,\t\r\n\t-- i_SourceSystemID='DUC','DCT',\r\n\t-- i_SourceSystemID='DCT','DCT',\r\n\t-- 'PMS')\n\tDECODE(\n\t    TRUE,\n\t    i_SourceSystemID = 'DUC', 'DCT',\n\t    i_SourceSystemID = 'DCT', 'DCT',\n\t    'PMS'\n\t) AS v_DCT_SRC_ID,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT',:LKP.LKP_Policy(ltrim(rtrim(i_pol_key))),'B')\n\tIFF(v_DCT_SRC_ID = 'DCT', LKP_POLICY_ltrim_rtrim_i_pol_key.pol_key, 'B') AS v_Policy_SBOP,\n\t-- *INF*: LTRIM(RTRIM(v_Policy_SBOP))\n\tLTRIM(RTRIM(v_Policy_SBOP)) AS o_Policy_SBOP,\n\t-- *INF*: IIF(v_Policy_SBOP<>'B' and v_DCT_SRC_ID='DCT',\r\n\t-- to_char(:LKP.LKP_Policy_SBOP(i_pol_key)))\n\tIFF(\n\t    v_Policy_SBOP <> 'B' and v_DCT_SRC_ID = 'DCT',\n\t    to_char(LKP_POLICY_SBOP_i_pol_key.ProgramAKId)\n\t) AS v_SBOP_GL_PR,\n\t-- *INF*: decode(true,\r\n\t-- v_SBOP_GL_PR='38','Institutional',\r\n\t-- v_SBOP_GL_PR='39','Service',\r\n\t-- v_SBOP_GL_PR='81','Service',\r\n\t-- isnull(v_SBOP_GL_PR),'N/A')\r\n\t-- \r\n\t-- -- For Programid 38 Description is Childcare\r\n\t-- -- For Programid 39 Description is  Personal apperance\r\n\t-- -- For Programid 81 Description is Circuit Workout\r\n\t-- -- Other than Program Code 38,39 and 81, we are making as N/A\n\tdecode(\n\t    true,\n\t    v_SBOP_GL_PR = '38', 'Institutional',\n\t    v_SBOP_GL_PR = '39', 'Service',\n\t    v_SBOP_GL_PR = '81', 'Service',\n\t    v_SBOP_GL_PR IS NULL, 'N/A'\n\t) AS v_Program_Desc_SBOP,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and v_Program_Desc_SBOP='N/A',\r\n\t-- :lkp.LKP_Policy_GL_PR(i_pol_key))\n\tIFF(v_DCT_SRC_ID = 'DCT' and v_Program_Desc_SBOP = 'N/A',) AS v_Non_SBOP_GL_PR,\n\t-- *INF*: :LKP.LKP_archCFDCOccpancyType(ltrim(rtrim(i_pol_key)))\n\tLKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.OccupancyType AS v_CF_Occupancy_Type,\n\t-- *INF*: IIF(ISNULL(v_CF_Occupancy_Type),:LKP.LKP_archGLDCOccpancyType(ltrim(rtrim(i_pol_key))),v_CF_Occupancy_Type)\n\tIFF(\n\t    v_CF_Occupancy_Type IS NULL, LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.OccupancyType,\n\t    v_CF_Occupancy_Type\n\t) AS v_GL_OCcupancy_Type,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and not isnull(v_Non_SBOP_GL_PR),\r\n\t-- v_GL_OCcupancy_Type,'N/A')\n\tIFF(v_DCT_SRC_ID = 'DCT' and v_Non_SBOP_GL_PR IS NOT NULL, v_GL_OCcupancy_Type, 'N/A') AS Non_SBOP_OccupancyType,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and NOT isnull(v_SBOP_GL_PR),v_Program_Desc_SBOP,\r\n\t-- IIF (v_DCT_SRC_ID='DCT' and NOT isnull(v_Non_SBOP_GL_PR),:LKP.LKP_SupPackageModificationAdjustmentGroup(v_DCT_SRC_ID,Non_SBOP_OccupancyType),\r\n\t-- IIF (v_DCT_SRC_ID='PMS',:LKP.LKP_SupPackageModificationAdjustmentGroup(v_DCT_SRC_ID,i_PackageModificationAdjustmentGroupCode),'N/A')))\n\tIFF(\n\t    v_DCT_SRC_ID = 'DCT' and v_SBOP_GL_PR IS NOT NULL, v_Program_Desc_SBOP,\n\t    IFF(\n\t        v_DCT_SRC_ID = 'DCT'\n\t    and v_Non_SBOP_GL_PR IS NOT NULL,\n\t        LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.PackageModificationAdjustmentGroupDescription,\n\t        IFF(\n\t                v_DCT_SRC_ID = 'PMS',\n\t                LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.PackageModificationAdjustmentGroupDescription,\n\t                'N/A'\n\t            )\n\t    )\n\t) AS v_Occupancy_Desc,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_Occupancy_Desc)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_Occupancy_Desc) AS PackageModificationAdjustmentGroupDescription,\n\ti_VehicleNumber AS o_VehicleNumber,\n\ti_IncludeUIM AS o_IncludeUIM,\n\t-- *INF*: IIF(ISNULL(i_RatingZoneCode),'N/A',i_RatingZoneCode)\n\tIFF(i_RatingZoneCode IS NULL, 'N/A', i_RatingZoneCode) AS o_RatingZoneCode\n\tFROM EXP_CombinedCoverageLimitAndDeductibleRules\n\t -- Manually join with EXP_ConstCode_IsoPC_Rules\n\t -- Manually join with Union\n\tLEFT JOIN LKP_RiskTerritory\n\tON LKP_RiskTerritory.PolicyKey = Union.pol_key\n\tLEFT JOIN LKP_POLICY LKP_POLICY_ltrim_rtrim_i_pol_key\n\tON LKP_POLICY_ltrim_rtrim_i_pol_key.pol_key = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_POLICY_SBOP LKP_POLICY_SBOP_i_pol_key\n\tON LKP_POLICY_SBOP_i_pol_key.pol_key = i_pol_key\n\n\tLEFT JOIN LKP_POLICY_GL_PR LKP_POLICY_GL_PR_i_pol_key\n\tON LKP_POLICY_GL_PR_i_pol_key. = i_pol_key\n\n\tLEFT JOIN LKP_ARCHCFDCOCCPANCYTYPE LKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key\n\tON LKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.PolicyNumber = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_ARCHGLDCOCCPANCYTYPE LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key\n\tON LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.PolicyNumber = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType\n\tON LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.SourceSystemId = v_DCT_SRC_ID\n\tAND LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.PackageModificationAdjustmentGroupCode = Non_SBOP_OccupancyType\n\n\tLEFT JOIN LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode\n\tON LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.SourceSystemId = v_DCT_SRC_ID\n\tAND LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.PackageModificationAdjustmentGroupCode = i_PackageModificationAdjustmentGroupCode\n\n),\nFIL_ASL AS (\n\tSELECT\n\to_AuditID AS AuditID, \n\to_CreatedDate AS CreatedDate, \n\to_PremiumMasterCalculationID AS PremiumMasterCalculationID, \n\to_LossMasterCalculationId AS LossMasterCalculationId, \n\to_TypeBureauCode AS TypeBureauCode, \n\to_BureauLineOfInsurance AS BureauLineOfInsurance, \n\to_BureauCompanyNumber AS BureauCompanyNumber, \n\to_StateProvinceCode AS StateProvinceCode, \n\to_PremiumMasterRunDate AS PremiumMasterRunDate, \n\to_LossMasterRunDate AS LossMasterRunDate, \n\to_pol_key AS pol_key, \n\to_PremiumMasterClassCode AS PremiumMasterClassCode, \n\to_LossMasterClassCode AS LossMasterClassCode, \n\to_ClaimNum AS ClaimNum, \n\to_ClaimantNum AS ClaimantNum, \n\to_RiskTerritoryCode AS RiskTerritoryCode, \n\to_PolicyEffectiveDate AS PolicyEffectiveDate, \n\to_CauseOfLoss AS CauseOfLoss, \n\to_DeductibleAmount AS DeductibleAmount, \n\to_CoverageCode AS CoverageCode, \n\to_SublineCode AS SublineCode, \n\tPackageModificationAdjustmentGroupDescription, \n\to_PremiumMasterDirectWrittenPremiumAmount AS PremiumMasterDirectWrittenPremiumAmount, \n\to_PaidLossAmount AS PaidLossAmount, \n\to_OutstandingLossAmount AS OutstandingLossAmount, \n\to_PolicyExpirationDate AS PolicyExpirationDate, \n\to_InceptionToDatePaidLossAmount AS InceptionToDatePaidLossAmount, \n\to_ClaimCoverageID AS ClaimCoverageID, \n\to_AnnualStatementLineNumber AS AnnualStatementLineNumber, \n\to_ZipPostalCode AS ZipPostalCode, \n\to_DeductibleIndicatorCode AS DeductibleIndicatorCode, \n\to_CoverageLimitValue AS CoverageLimitValue, \n\to_PolicyUpperLimit AS PolicyUpperLimit, \n\to_TerminalZoneCode AS TerminalZoneCode, \n\to_PremiumMasterExposure AS PremiumMasterExposure, \n\to_PaidAllocatedLossAdjustmentExpenseAmount AS PaidAllocatedLossAdjustmentExpenseAmount, \n\to_OutstandingAllocatedLossAdjustmentExpenseAmount AS OutstandingAllocatedLossAdjustmentExpenseAmount, \n\to_ClaimLossDate AS ClaimLossDate, \n\to_PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate, \n\to_CoverageGroupCode AS CoverageGroupCode, \n\to_VehicleNumber AS VehicleNumber, \n\to_IncludeUIM AS IncludeUIM, \n\to_RatingZoneCode AS RatingZoneCode\n\tFROM EXP_Values\n\tWHERE LTRIM(RTRIM(AnnualStatementLineNumber))<> '17.2' AND CoverageCode<>'EMPLESSOR' AND INSTR(PremiumMasterClassCode,',')=0 AND PremiumMasterClassCode<>'99999'\n),\nISSCommercialAutoExtract AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialAutoExtract\n\t(AuditId, CreatedDate, EDWPremiumMasterCalculationPKId, EDWLossMasterCalculationPKId, TypeBureauCode, BureauLineOfInsurance, BureauCompanyNumber, StateProvinceCode, PremiumMasterRunDate, LossMasterRunDate, PolicyKey, PremiumMasterClassCode, LossMasterClassCode, ClaimNumber, ClaimantNumber, RiskTerritoryCode, PolicyEffectiveDate, CauseOfLoss, DeductibleAmount, CoverageCode, SublineCode, PackageModificationAdjustmentGroupDescription, PremiumMasterDirectWrittenPremiumAmount, PaidLossAmount, OutstandingLossAmount, PolicyExpirationDate, InceptionToDatePaidLossAmount, ClaimantCoverageDetailId, AnnualStatementLineNumber, ZipPostalCode, DeductibleIndicatorCode, PolicyLowerLimit, PolicyUpperLimit, TerminalZoneCode, WrittenExposure, PaidAllocatedLossAdjustmentExpenseAmount, OutstandingAllocatedLossAdjustmentExpenseAmount, ClaimLossDate, TransactionEffectiveDate, CoverageGroupCode, VehicleNumber, IncludeUIM, RatingZoneCode)\n\tSELECT \n\tAuditID AS AUDITID, \n\tCREATEDDATE, \n\tPremiumMasterCalculationID AS EDWPREMIUMMASTERCALCULATIONPKID, \n\tLossMasterCalculationId AS EDWLOSSMASTERCALCULATIONPKID, \n\tTYPEBUREAUCODE, \n\tBUREAULINEOFINSURANCE, \n\tBUREAUCOMPANYNUMBER, \n\tSTATEPROVINCECODE, \n\tPREMIUMMASTERRUNDATE, \n\tLOSSMASTERRUNDATE, \n\tpol_key AS POLICYKEY, \n\tPREMIUMMASTERCLASSCODE, \n\tLOSSMASTERCLASSCODE, \n\tClaimNum AS CLAIMNUMBER, \n\tClaimantNum AS CLAIMANTNUMBER, \n\tRISKTERRITORYCODE, \n\tPOLICYEFFECTIVEDATE, \n\tCAUSEOFLOSS, \n\tDEDUCTIBLEAMOUNT, \n\tCOVERAGECODE, \n\tSUBLINECODE, \n\tPACKAGEMODIFICATIONADJUSTMENTGROUPDESCRIPTION, \n\tPREMIUMMASTERDIRECTWRITTENPREMIUMAMOUNT, \n\tPAIDLOSSAMOUNT, \n\tOUTSTANDINGLOSSAMOUNT, \n\tPOLICYEXPIRATIONDATE, \n\tINCEPTIONTODATEPAIDLOSSAMOUNT, \n\tClaimCoverageID AS CLAIMANTCOVERAGEDETAILID, \n\tANNUALSTATEMENTLINENUMBER, \n\tZIPPOSTALCODE, \n\tDEDUCTIBLEINDICATORCODE, \n\tCoverageLimitValue AS POLICYLOWERLIMIT, \n\tPOLICYUPPERLIMIT, \n\tTERMINALZONECODE, \n\tPremiumMasterExposure AS WRITTENEXPOSURE, \n\tPAIDALLOCATEDLOSSADJUSTMENTEXPENSEAMOUNT, \n\tOUTSTANDINGALLOCATEDLOSSADJUSTMENTEXPENSEAMOUNT, \n\tCLAIMLOSSDATE, \n\tPremiumTransactionEffectiveDate AS TRANSACTIONEFFECTIVEDATE, \n\tCOVERAGEGROUPCODE, \n\tVEHICLENUMBER, \n\tINCLUDEUIM, \n\tRATINGZONECODE\n\tFROM FIL_ASL\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "STAGING_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_QUARTERS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME_DATAMART": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_YEARS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_1": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}