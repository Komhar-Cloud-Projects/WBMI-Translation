{
    "name": "m_CLM_DW_LOAD_sup_coverage_category",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_coverage_category",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_coverage_category_stage AS (\n\tSELECT\n\t\tcov_ctgry_stage_id,\n\t\tcov_category_code,\n\t\tcov_category_descript,\n\t\tmodified_date,\n\t\tmodified_user_id,\n\t\textract_date,\n\t\tsource_sys_id\n\tFROM coverage_category_stage\n),\nEXP_default AS (\n\tSELECT\n\tcov_category_code,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(cov_category_code)))OR IS_SPACES(LTRIM(RTRIM(cov_category_code))) OR LENGTH(LTRIM(RTRIM(cov_category_code))) =0, 'N/A',LTRIM(RTRIM(cov_category_code)))\n\tIFF(LTRIM(RTRIM(cov_category_code)) IS NULL OR IS_SPACES(LTRIM(RTRIM(cov_category_code))) OR LENGTH(LTRIM(RTRIM(cov_category_code))) = 0, 'N/A', LTRIM(RTRIM(cov_category_code))) AS cov_category_code_out,\n\tcov_category_descript,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(cov_category_descript))) OR IS_SPACES(LTRIM(RTRIM(cov_category_descript))) OR LENGTH(LTRIM(RTRIM(cov_category_descript))) = 0 ,'N/A' , LTRIM(RTRIM(cov_category_descript)))\n\tIFF(LTRIM(RTRIM(cov_category_descript)) IS NULL OR IS_SPACES(LTRIM(RTRIM(cov_category_descript))) OR LENGTH(LTRIM(RTRIM(cov_category_descript))) = 0, 'N/A', LTRIM(RTRIM(cov_category_descript))) AS cov_category_descript_out\n\tFROM SQ_coverage_category_stage\n),\nLKP_sup_coverage_category AS (\n\tSELECT\n\tsup_cov_ctgry_id,\n\tcov_ctgry_descript,\n\tcov_ctgry_code\n\tFROM (\n\t\tSELECT sup_coverage_category.sup_cov_ctgry_id   as sup_cov_ctgry_id, \r\n\t\t                  sup_coverage_category.cov_ctgry_descript as cov_ctgry_descript,       \r\n\t\t                  sup_coverage_category.cov_ctgry_code       as cov_ctgry_code\r\n\t\t  FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_coverage_category \r\n\t\tWHERE crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY cov_ctgry_code ORDER BY sup_cov_ctgry_id DESC) = 1\n),\nEXP_detect_changes AS (\n\tSELECT\n\tLKP_sup_coverage_category.sup_cov_ctgry_id,\n\tLKP_sup_coverage_category.cov_ctgry_descript AS old_cov_ctgry_descript,\n\tEXP_default.cov_category_code_out AS cov_ctgry_code_out,\n\tEXP_default.cov_category_descript_out AS cov_ctgry_descript_out,\n\t-- *INF*: IIF(ISNULL( sup_cov_ctgry_id), 'NEW', \r\n\t-- IIF(LTRIM(RTRIM( old_cov_ctgry_descript)) != (LTRIM(RTRIM(cov_ctgry_descript_out))) \r\n\t-- \r\n\t-- , 'UPDATE', 'NOCHANGE'))\n\tIFF(sup_cov_ctgry_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(old_cov_ctgry_descript)) != ( LTRIM(RTRIM(cov_ctgry_descript_out)) ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS Changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: IIF(v_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),SYSDATE)\n\tIFF(v_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*:  TO_DATE('12/31/2100 11:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 11:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM EXP_default\n\tLEFT JOIN LKP_sup_coverage_category\n\tON LKP_sup_coverage_category.cov_ctgry_code = EXP_default.cov_category_code_out\n),\nFIL_new_update AS (\n\tSELECT\n\tcov_ctgry_code_out AS cov_category_code_out, \n\tcov_ctgry_descript_out AS cov_category_descript_out, \n\tChanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date\n\tFROM EXP_detect_changes\n\tWHERE Changed_flag = 'NEW' or Changed_flag = 'UPDATE'\n),\nsup_coverage_category_INS AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_coverage_category\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, cov_ctgry_code, cov_ctgry_descript)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tcov_category_code_out AS COV_CTGRY_CODE, \n\tcov_category_descript_out AS COV_CTGRY_DESCRIPT\n\tFROM FIL_new_update\n),\nSQ_sup_coverage_category AS (\n\tSELECT a.sup_cov_ctgry_id, \r\n\ta.eff_from_date,\r\n\t a.eff_to_date ,\r\n\ta.cov_ctgry_code\r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_coverage_category  a\r\n\t\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_coverage_category b\r\n\t\t\tWHERE source_sys_id= '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.cov_ctgry_code = b.cov_ctgry_code             \r\n\t\t\tGROUP BY b.cov_ctgry_code\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY a.cov_ctgry_code, a.eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the eff_to_date by utilizing a local variable to keep track\n),\nEXP_lag_eff_from_date AS (\n\tSELECT\n\tsup_cov_ctgry_id,\n\tcov_ctgry_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(\r\n\t-- TRUE,cov_ctgry_code= v_Prev_row_cov_ctgry_code, \r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\r\n\t--  \n\tDECODE(TRUE,\n\tcov_ctgry_code = v_Prev_row_cov_ctgry_code, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tcov_ctgry_code AS v_Prev_row_cov_ctgry_code,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_sup_coverage_category\n),\nFIL_First_row_in_AK_Group AS (\n\tSELECT\n\tsup_cov_ctgry_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_lag_eff_from_date\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_eff_from_date AS (\n\tSELECT\n\tsup_cov_ctgry_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_First_row_in_AK_Group\n),\nsup_coverage_category_UPD AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_coverage_category AS T\n\tUSING UPD_eff_from_date AS S\n\tON T.sup_cov_ctgry_id = S.sup_cov_ctgry_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246507"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905524"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604431"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:23:26"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:28:04"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}