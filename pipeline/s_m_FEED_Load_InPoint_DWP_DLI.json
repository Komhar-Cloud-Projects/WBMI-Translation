{
    "name": "s_m_FEED_Load_InPoint_DWP_DLI",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_InPoint_DWP_DLI",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_Loss AS (\n\tdeclare @ProcessDate as datetime\r\n\t\r\n\t\r\n\tset @ProcessDate=cast(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,-1,GETDATE()) + @{pipeline().parameters.NO_OF_MONTH},0)) as date);\r\n\t\r\n\t-- Below Temp table have Last month Policies and if it has Inforce & Future Inforce, We will take only Future Inforce information else Inforce information.\r\n\t\r\n\twith temp_policy as(select * from(\r\n\tselect B.pol_sym,B.pol_num,A.EDWPolicyAKId,\r\n\tB.pol_mod,A.PolicyStatusDescription,A.Policykey,B.pol_dim_id,Row_number() over(Partition by B.pol_num order by B.pol_mod Desc) \r\n\tPolicy_Rank,\r\n\tisnull(lead(A.PolicyKey) over(Partition by B.pol_num order by B.pol_mod Desc),A.PolicyKey) PriorPolicyKey,\r\n\tdateadd(YYYY,-3,isnull(lead(B.pol_exp_date) over(Partition by B.pol_num order by B.pol_mod Desc),B.Pol_exp_date) )PriorPolicyExpirationDate\r\n\tfrom PolicyCurrentStatusDim A\r\n\tinner join policy_dim B\r\n\ton A.PolicyDimId=B.pol_dim_id \r\n\twhere A.Rundate=@ProcessDate\r\n\tand A.PolicyStatusDescription in ('Inforce')  \r\n\t)A\r\n\twhere Policy_Rank=1) \r\n\t\r\n\t-- Result of the temp table policies used as main source for below SQL and Calculated Current Year DirectWrittenPremium for current mod policy andLast three years Premiums for previous mod.\r\n\t\r\n\tselect \r\n\tf.cust_num,\r\n\tb.pol_num,\r\n\tg.PolicyOfferingDescription,\r\n\tf.name,\r\n\tb.pol_eff_date,\r\n\tcase when B.pol_key=C.PriorPolicyKey then A.DirectLossIncurredIR else 0 end DirectLossIncurredIR,\r\n\tcase when b.pol_eff_date>=c.PriorPolicyExpirationDate then A.DirectLossIncurredIR else 0 end DirectLossIncurredIR3Yrs,\r\n\tg.StrategicProfitCenterDescription,\r\n\t b.ProgramCode,\r\n\tb.ProgramDescription,\r\n\tcdd.RiskGradeCode,\r\n\tk.AgencyCode,  \r\n\tk.AbbreviatedName , \r\n\tj.UnderwritingRegionCodeDescription,\r\n\tb.pol_issue_code,\r\n\tb.prim_bus_class_code,\r\n\tb.prim_bus_class_code_descript \r\n\tfrom dbo.vwLossMasterFact A inner join policy_dim B on A.pol_dim_id=B.pol_dim_id \r\n\tinner join temp_policy C on  B.pol_num=C.Pol_num  \r\n\tinner join calendar_dim D on A.loss_master_run_date_id=D.clndr_id\r\n\tINNER JOIN dbo.AgencyEmployeeDim e ON (e.AgencyEmployeeDimID=b.AgencyEmployeeDimID)\r\n\tINNER JOIN dbo.contract_customer_dim f ON (f.contract_cust_dim_id=a.contract_cust_dim_id)  \r\n\tINNER JOIN dbo.InsuranceReferenceDim g ON (g.InsuranceReferenceDimId=a.InsuranceReferenceDimId)\r\n\tINNER JOIN V3.AgencyDim h ON (h.AgencyDimID=a.AgencyDimId)\r\n\tINNER JOIN dbo.SalesDivisionDim i ON (i.SalesDivisionDimID=h.SalesDivisionDimId)\r\n\tINNER JOIN DBO.underwritingdivisiondim J ON J.underwritingdivisiondimid = b.underwritingdivisiondimid\r\n\tinner join dbo.CoverageDetailDim cdd on cdd.CoverageDetailDimId = a.CoverageDetailDimId\r\n\tinner join V3.AgencyDim k ON (k.EDWAgencyAKID=h.EDWAgencyAKID and  @ProcessDate between k.effectivedate and k.expirationdate)\r\n\t\r\n\twhere (\r\n\t   g.EnterpriseGroupDescription  =  'West Bend Mutual Insurance Group'\r\n\t   AND \r\n\t   g.InsuranceSegmentDescription='Commercial Lines' and\r\n\t   g.StrategicProfitCenterAbbreviation  IN  ('WB - CL', 'NSI','Argent' )) \r\n\t    and @ProcessDate >= d.CalendarDate \r\n\torder by 1,2\n),\nExp_PassThroughLoos AS (\n\tSELECT\n\tCustomerNumber,\n\tPolicyNumber,\n\tPolicyOfferingDescription,\n\tFirstNamedInsured,\n\tPolicyEffectiveDate,\n\tDirectLossIncurredIR,\n\tDirectLossIncurredIR3Yrs,\n\tStrategicProfitCenterDescription,\n\tProgramCode,\n\tProgramDescription,\n\tIndustryRiskGradeCode,\n\tAgencyCode,\n\tAbbreviatedAgencyName,\n\tUnderwritingRegionCodeDescription,\n\tPolicyIssueCode,\n\tprim_bus_class_code,\n\tprim_bus_class_code_descript\n\tFROM SQ_Loss\n),\nAgg_DirectLoss AS (\n\tSELECT\n\tCustomerNumber,\n\tPolicyNumber,\n\tPolicyOfferingDescription,\n\tFirstNamedInsured,\n\tPolicyEffectiveDate,\n\tDirectLossIncurredIR,\n\t-- *INF*: sum(DirectLossIncurredIR)\n\tsum(DirectLossIncurredIR) AS o_DirectLossIncurredIR,\n\tDirectLossIncurredIR3Yrs,\n\t-- *INF*: sum(DirectLossIncurredIR3Yrs)\n\tsum(DirectLossIncurredIR3Yrs) AS o_DirectLossIncurredIR3Yrs,\n\tStrategicProfitCenterDescription,\n\tProgramCode,\n\tProgramDescription,\n\tIndustryRiskGradeCode,\n\tAgencyCode,\n\tAbbreviatedAgencyName,\n\tUnderwritingRegionCodeDescription,\n\tPolicyIssueCode,\n\tprim_bus_class_code,\n\tprim_bus_class_code_descript\n\tFROM Exp_PassThroughLoos\n\tGROUP BY CustomerNumber, PolicyNumber\n),\nSQ_DWP AS (\n\tdeclare @ProcessDate as datetime\r\n\t\r\n\t\r\n\tset @ProcessDate=cast(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,-1,GETDATE()) + @{pipeline().parameters.NO_OF_MONTH},0)) as date);\r\n\t\r\n\t-- Below Temp table have Last month Policies and if it has Inforce & Future Inforce, We will take only Future Inforce information else Inforce information.\r\n\t\r\n\twith temp_policy as(select * from(\r\n\tselect B.pol_sym,B.pol_num,A.EDWPolicyAKId,\r\n\tB.pol_mod,A.PolicyStatusDescription,A.Policykey,B.pol_dim_id,Row_number() over(Partition by B.pol_num order by B.pol_mod Desc) \r\n\tPolicy_Rank,\r\n\tisnull(lead(A.PolicyKey) over(Partition by B.pol_num order by B.pol_mod Desc),A.PolicyKey) PriorPolicyKey,\r\n\tdateadd(YYYY,-3,isnull(lead(B.pol_exp_date) over(Partition by B.pol_num order by B.pol_mod Desc),B.Pol_exp_date) )PriorPolicyExpirationDate\r\n\tfrom PolicyCurrentStatusDim A\r\n\tinner join policy_dim B\r\n\ton A.PolicyDimId=B.pol_dim_id \r\n\twhere A.Rundate=@ProcessDate\r\n\tand A.PolicyStatusDescription in ('Inforce')  \r\n\t)A\r\n\twhere Policy_Rank=1)  \r\n\t\r\n\t-- Result of the temp table policies used as main source for below SQL and Calculated Current Year DirectWrittenPremium for current mod policy andLast three years Premiums for previous mod.\r\n\t\r\n\tselect \r\n\tFirst_Value(f.cust_num)  OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  cust_num,\r\n\tb.pol_num,\r\n\tFirst_Value(g.PolicyOfferingDescription)  OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) PolicyOfferingDescription,\r\n\tf.name,\r\n\tFIRST_VALUE(b.pol_eff_date) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) pol_eff_date,\r\n\tcase when B.pol_key=C.PolicyKey then A.PremiumMasterDirectWrittenPremium else 0 end Written_Premium,\r\n\tcase when B.pol_key=C.PriorPolicyKey then A.MonthlyChangeInDirectEarnedPremium else 0 end InforceEarnedPremium, \r\n\tcase when b.pol_eff_date>=PriorPolicyExpirationDate then A.MonthlyChangeInDirectEarnedPremium else 0 end MonthlyChangeInDirectEarnedPremium3Yrs,\r\n\tg.StrategicProfitCenterDescription,\r\n\tFIRST_VALUE(b.ProgramCode) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) ProgramCode,\r\n\tFIRST_VALUE(b.ProgramDescription) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) ProgramDescription,\r\n\t--FIRST_VALUE(b.industry_risk_grade_code) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) industry_risk_grade_code,\r\n\tc.EDWPolicyAKId,\r\n\tFIRST_VALUE(k.AgencyCode) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  AgencyCode ,  \r\n\tFIRST_VALUE(k.AbbreviatedName) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  AbbreviatedName, \r\n\tFIRST_VALUE(j.UnderwritingRegionCodeDescription) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderwritingRegionCodeDescription, \r\n\tFIRST_VALUE(B.pol_issue_code) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) pol_issue_code,\r\n\tFIRST_VALUE(B.prim_bus_class_code) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) prim_bus_class_code,\r\n\tFIRST_VALUE(B.prim_bus_class_code_descript) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc) prim_bus_class_code_descript,\r\n\tg.InsuranceReferenceLineOfBusinessDescription,\r\n\tFIRST_VALUE(j.UnderwriterDisplayName) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderWriterName, \r\n\tFIRST_VALUE(j.UnderwriterManagerDisplayName) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderWriterManagerName,\r\n\ti.SalesTerritoryCodeDescription,\r\n\tFIRST_VALUE(j.UnderwriterManagerEmailAddress) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderwriterManagerEmailAddress,\r\n\tFIRST_VALUE(j.UnderwriterManagerCode) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderwriterManagerCode,\r\n\tFIRST_VALUE(j.UnderwriterEmailAddress) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderwriterEmailAddress,\r\n\tFIRST_VALUE(j.UnderwriterCode) OVER (PARTITION BY b.pol_num,f.cust_num ORDER BY b.pol_eff_date desc)  UnderwriterCode\r\n\tFROM \r\n\tPremiumMonthlySummaryFact A inner join policy_dim B on A.PolicyDimId=B.pol_dim_id \r\n\tinner join temp_policy C on  B.pol_num=C.Pol_num \r\n\tinner join calendar_dim D on A.SnapshotDateId=D.clndr_id\r\n\tINNER JOIN dbo.AgencyEmployeeDim e ON (e.AgencyEmployeeDimID=b.AgencyEmployeeDimID)\r\n\tINNER JOIN dbo.contract_customer_dim f ON (f.contract_cust_dim_id=a.ContractCustomerDimId)  \r\n\tINNER JOIN dbo.InsuranceReferenceDim g ON (g.InsuranceReferenceDimId=a.InsuranceReferenceDimId)\r\n\tINNER JOIN V3.AgencyDim h ON (h.AgencyDimID=a.AgencyDimId)\r\n\tINNER JOIN dbo.SalesDivisionDim i ON (i.SalesDivisionDimID=h.SalesDivisionDimId)\r\n\tINNER JOIN dBO.underwritingdivisiondim J ON J.underwritingdivisiondimid = B.underwritingdivisiondimid\r\n\tinner join V3.AgencyDim k ON (k.EDWAgencyAKID=h.EDWAgencyAKID and  @ProcessDate between k.effectivedate and k.expirationdate)\r\n\twhere (\r\n\t   g.EnterpriseGroupDescription  =  'West Bend Mutual Insurance Group'\r\n\t   AND \r\n\t   g.InsuranceSegmentDescription='Commercial Lines' and\r\n\t   g.StrategicProfitCenterAbbreviation  IN  ('WB - CL', 'NSI' ,'Argent')) and @ProcessDate >= d.CalendarDate\r\n\torder by 1,2\n),\nExp_PassThrough AS (\n\tSELECT\n\tCustomerNumber,\n\tPolicyNumber,\n\tPolicyOfferingDescription,\n\tFirstNamedInsured,\n\tPolicyEffectiveDate,\n\tDirectWrittenPremium,\n\tInforceEarnedPremium,\n\tMonthlyChangeInDirectEarnedPremium3Yrs,\n\tStrategicProfitCenterDescription,\n\tProgramCode,\n\tProgramDescription,\n\tEDWPolicyAKId,\n\tAgencyCode,\n\tAbbreviatedAgencyName,\n\tUnderwritingRegionCodeDescription,\n\tPolicyIssueCode,\n\tprim_bus_class_code,\n\tprim_bus_class_code_descript,\n\tInsuranceReferenceLineOfBusinessDescription,\n\tUnderWriterName,\n\tUnderWriterManagerName,\n\tSalesTerritoryCodeDescription,\n\tUnderwriterManagerEmailAddress,\n\tUnderwriterManagerCode,\n\tUnderwriterEmailAddress,\n\tUnderwriterCode\n\tFROM SQ_DWP\n),\nSQ_policy_dim AS (\n\tdeclare @ProcessDate as datetime\r\n\tset @ProcessDate=cast(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,-1,GETDATE()) + @{pipeline().parameters.NO_OF_MONTH},0)) as date);\r\n\tselect EDWPolicyAKId from(\r\n\tselect B.pol_sym,B.pol_num,A.EDWPolicyAKId,\r\n\tB.pol_mod,A.PolicyStatusDescription,A.Policykey,B.pol_dim_id,Row_number() over(Partition by B.pol_num order by B.pol_mod Desc) \r\n\tPolicy_Rank,\r\n\tisnull(lead(A.PolicyKey) over(Partition by B.pol_num order by B.pol_mod Desc),A.PolicyKey) PriorPolicyKey,\r\n\tdateadd(YYYY,-3,isnull(lead(B.pol_exp_date) over(Partition by B.pol_num order by B.pol_mod Desc),B.Pol_exp_date) )PriorPolicyExpirationDate\r\n\tfrom PolicyCurrentStatusDim A\r\n\tinner join policy_dim B\r\n\ton A.PolicyDimId=B.pol_dim_id \r\n\twhere A.Rundate=@ProcessDate\r\n\tand A.PolicyStatusDescription in ('Inforce')  \r\n\t)A\r\n\twhere Policy_Rank=1\n),\nmplt_Determine_RiskGrade_Code_and_Description AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tLKP_PMF_CDD_RiskGradeCode AS (\n\t\tSELECT\n\t\tPremiumMasterPremium,\n\t\tRiskGradeCode,\n\t\tInsuranceLineCode,\n\t\tin_PolicyAKID,\n\t\tedw_pol_ak_id\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tSUM(pmf.PremiumMasterPremium) as PremiumMasterPremium,\r\n\t\t\tcdd.RiskGradeCode as RiskGradeCode,\r\n\t\t\tircd.InsuranceLineCode as InsuranceLineCode,\r\n\t\t\tpd.edw_pol_ak_id as edw_pol_ak_id \r\n\t\t\tFROM policy_dim pd\r\n\t\t\tinner join dbo.PremiumMasterFact pmf on pmf.PolicyDimID = pd.pol_dim_id\r\n\t\t\tinner join dbo.InsuranceReferenceCoverageDim ircd on ircd.InsuranceReferenceCoverageDimId = pmf.InsuranceReferenceCoverageDimId\r\n\t\t\tinner join dbo.CoverageDetailDim cdd on cdd.CoverageDetailDimId = pmf.CoverageDetailDimId\r\n\t\t\tgroup by cdd.RiskGradeCode,ircd.InsuranceLineCode,pd.edw_pol_ak_id\r\n\t\t\torder by pd.edw_pol_ak_id,ircd.InsuranceLineCode,cdd.RiskGradeCode\r\n\t\t\t--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY edw_pol_ak_id ORDER BY PremiumMasterPremium) = 1\n\t),\n\tAGG_Pol_InsuranceLine_RiskGrade AS (\n\t\tSELECT\n\t\tin_PolicyAKID,\n\t\tInsuranceLineCode,\n\t\tRiskGradeCode,\n\t\tPremiumMasterPremium,\n\t\t-- *INF*: ROUND(SUM(PremiumMasterPremium),4)\n\t\tROUND(SUM(PremiumMasterPremium), 4) AS NetPremium\n\t\tFROM LKP_PMF_CDD_RiskGradeCode\n\t\tGROUP BY in_PolicyAKID, InsuranceLineCode, RiskGradeCode\n\t),\n\tFLT_LOB_Premium_not_zero AS (\n\t\tSELECT\n\t\tin_PolicyAKID, \n\t\tInsuranceLineCode, \n\t\tRiskGradeCode, \n\t\tNetPremium\n\t\tFROM AGG_Pol_InsuranceLine_RiskGrade\n\t\tWHERE NetPremium<>0.0\n\t),\n\tEXP_Translate_RiskGradeCode AS (\n\t\tSELECT\n\t\tin_PolicyAKID,\n\t\tInsuranceLineCode,\n\t\tRiskGradeCode,\n\t\t-- *INF*: DECODE (TRUE, RiskGradeCode='1' , 1 ,\r\n\t\t-- RiskGradeCode='2' , 2 ,\r\n\t\t-- RiskGradeCode='3' , 3 ,\r\n\t\t-- RiskGradeCode='4' , 4 ,\r\n\t\t-- RiskGradeCode='5' , 5 ,\r\n\t\t-- RiskGradeCode='6' , 6 ,\r\n\t\t-- RiskGradeCode='7' , 7 ,\r\n\t\t-- RiskGradeCode='8' , 8 ,\r\n\t\t-- RiskGradeCode='9' , 9 ,\r\n\t\t-- RiskGradeCode='0' , 0 ,\r\n\t\t-- RiskGradeCode='D' , 10 ,\r\n\t\t-- RiskGradeCode='N/A' , -3 ,\r\n\t\t-- RiskGradeCode='DNW' , 11 ,\r\n\t\t-- RiskGradeCode='NSI' , -1 ,\r\n\t\t-- RiskGradeCode='Argent' , -2 ,-3)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    RiskGradeCode = '1', 1,\n\t\t    RiskGradeCode = '2', 2,\n\t\t    RiskGradeCode = '3', 3,\n\t\t    RiskGradeCode = '4', 4,\n\t\t    RiskGradeCode = '5', 5,\n\t\t    RiskGradeCode = '6', 6,\n\t\t    RiskGradeCode = '7', 7,\n\t\t    RiskGradeCode = '8', 8,\n\t\t    RiskGradeCode = '9', 9,\n\t\t    RiskGradeCode = '0', 0,\n\t\t    RiskGradeCode = 'D', 10,\n\t\t    RiskGradeCode = 'N/A', - 3,\n\t\t    RiskGradeCode = 'DNW', 11,\n\t\t    RiskGradeCode = 'NSI', - 1,\n\t\t    RiskGradeCode = 'Argent', - 2,\n\t\t    - 3\n\t\t) AS RiskGradeValue\n\t\tFROM FLT_LOB_Premium_not_zero\n\t),\n\tAGG_Max_RiskGrade_Pol AS (\n\t\tSELECT\n\t\tin_PolicyAKID,\n\t\tInsuranceLineCode,\n\t\tRiskGradeValue,\n\t\t-- *INF*: MAX(RiskGradeValue)\n\t\tMAX(RiskGradeValue) AS o_maxRiskGradeValue\n\t\tFROM EXP_Translate_RiskGradeCode\n\t\tGROUP BY in_PolicyAKID\n\t),\n\tEXP_Decode_RiskGradeValue AS (\n\t\tSELECT\n\t\tin_PolicyAKID,\n\t\to_maxRiskGradeValue,\n\t\t-- *INF*: DECODE (TRUE,o_maxRiskGradeValue=1 , '1' ,\r\n\t\t-- o_maxRiskGradeValue=2 , '2' ,\r\n\t\t-- o_maxRiskGradeValue=3 , '3' ,\r\n\t\t-- o_maxRiskGradeValue=4 , '4' ,\r\n\t\t-- o_maxRiskGradeValue=5 , '5' ,\r\n\t\t-- o_maxRiskGradeValue=6 , '6' ,\r\n\t\t-- o_maxRiskGradeValue=7 , '7' ,\r\n\t\t-- o_maxRiskGradeValue=8 , '8' ,\r\n\t\t-- o_maxRiskGradeValue=9 , '9' ,\r\n\t\t-- o_maxRiskGradeValue=0 , '0' ,\r\n\t\t-- o_maxRiskGradeValue=10 , 'D' ,\r\n\t\t-- o_maxRiskGradeValue=-3 , 'N/A' ,\r\n\t\t-- o_maxRiskGradeValue=11 , 'DNW' ,\r\n\t\t-- o_maxRiskGradeValue=-1 , 'NSI' ,\r\n\t\t-- o_maxRiskGradeValue=-2 , 'Argent' ,'N/A')\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    o_maxRiskGradeValue = 1, '1',\n\t\t    o_maxRiskGradeValue = 2, '2',\n\t\t    o_maxRiskGradeValue = 3, '3',\n\t\t    o_maxRiskGradeValue = 4, '4',\n\t\t    o_maxRiskGradeValue = 5, '5',\n\t\t    o_maxRiskGradeValue = 6, '6',\n\t\t    o_maxRiskGradeValue = 7, '7',\n\t\t    o_maxRiskGradeValue = 8, '8',\n\t\t    o_maxRiskGradeValue = 9, '9',\n\t\t    o_maxRiskGradeValue = 0, '0',\n\t\t    o_maxRiskGradeValue = 10, 'D',\n\t\t    o_maxRiskGradeValue = - 3, 'N/A',\n\t\t    o_maxRiskGradeValue = 11, 'DNW',\n\t\t    o_maxRiskGradeValue = - 1, 'NSI',\n\t\t    o_maxRiskGradeValue = - 2, 'Argent',\n\t\t    'N/A'\n\t\t) AS RiskGradeCode,\n\t\t-- *INF*: DECODE (TRUE,o_maxRiskGradeValue=1 , 'Excellent' ,\r\n\t\t-- o_maxRiskGradeValue=2 , 'Excellent' ,\r\n\t\t-- o_maxRiskGradeValue=3 , 'Good' ,\r\n\t\t-- o_maxRiskGradeValue=4 , 'Good' ,\r\n\t\t-- o_maxRiskGradeValue=5 , 'Average' ,\r\n\t\t-- o_maxRiskGradeValue=6 , 'Marginal' ,\r\n\t\t-- o_maxRiskGradeValue=7 , 'Marginal' ,\r\n\t\t-- o_maxRiskGradeValue=8 , 'Poor' ,\r\n\t\t-- o_maxRiskGradeValue=9 , 'Poor' ,\r\n\t\t-- o_maxRiskGradeValue=0 , 'NSI Bonds' ,\r\n\t\t-- o_maxRiskGradeValue=10 , 'Do Not Write' ,\r\n\t\t-- o_maxRiskGradeValue=-3 , 'Not Available' ,\r\n\t\t-- o_maxRiskGradeValue=11 , 'Do Not Write' ,\r\n\t\t-- o_maxRiskGradeValue=-1 , 'NSI' ,\r\n\t\t-- o_maxRiskGradeValue=-2 , 'Argent' , 'Not Available')\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    o_maxRiskGradeValue = 1, 'Excellent',\n\t\t    o_maxRiskGradeValue = 2, 'Excellent',\n\t\t    o_maxRiskGradeValue = 3, 'Good',\n\t\t    o_maxRiskGradeValue = 4, 'Good',\n\t\t    o_maxRiskGradeValue = 5, 'Average',\n\t\t    o_maxRiskGradeValue = 6, 'Marginal',\n\t\t    o_maxRiskGradeValue = 7, 'Marginal',\n\t\t    o_maxRiskGradeValue = 8, 'Poor',\n\t\t    o_maxRiskGradeValue = 9, 'Poor',\n\t\t    o_maxRiskGradeValue = 0, 'NSI Bonds',\n\t\t    o_maxRiskGradeValue = 10, 'Do Not Write',\n\t\t    o_maxRiskGradeValue = - 3, 'Not Available',\n\t\t    o_maxRiskGradeValue = 11, 'Do Not Write',\n\t\t    o_maxRiskGradeValue = - 1, 'NSI',\n\t\t    o_maxRiskGradeValue = - 2, 'Argent',\n\t\t    'Not Available'\n\t\t) AS RiskGradeDescription\n\t\tFROM AGG_Max_RiskGrade_Pol\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tin_PolicyAKID, \n\t\tRiskGradeCode, \n\t\tRiskGradeDescription\n\t\tFROM EXP_Decode_RiskGradeValue\n\t),\n),\nJNR_Mapplet_IndustryRiskGeadeCode AS (SELECT\n\tExp_PassThrough.CustomerNumber, \n\tExp_PassThrough.PolicyNumber, \n\tExp_PassThrough.PolicyOfferingDescription, \n\tExp_PassThrough.FirstNamedInsured, \n\tExp_PassThrough.PolicyEffectiveDate, \n\tExp_PassThrough.DirectWrittenPremium, \n\tExp_PassThrough.InforceEarnedPremium, \n\tExp_PassThrough.MonthlyChangeInDirectEarnedPremium3Yrs, \n\tExp_PassThrough.StrategicProfitCenterDescription, \n\tExp_PassThrough.ProgramCode, \n\tExp_PassThrough.ProgramDescription, \n\tExp_PassThrough.EDWPolicyAKId, \n\tExp_PassThrough.AgencyCode, \n\tExp_PassThrough.AbbreviatedAgencyName, \n\tExp_PassThrough.UnderwritingRegionCodeDescription, \n\tExp_PassThrough.PolicyIssueCode, \n\tExp_PassThrough.prim_bus_class_code, \n\tExp_PassThrough.prim_bus_class_code_descript, \n\tExp_PassThrough.InsuranceReferenceLineOfBusinessDescription, \n\tmplt_Determine_RiskGrade_Code_and_Description.in_PolicyAKID1, \n\tmplt_Determine_RiskGrade_Code_and_Description.RiskGradeCode, \n\tmplt_Determine_RiskGrade_Code_and_Description.RiskGradeDescription, \n\tExp_PassThrough.UnderWriterName, \n\tExp_PassThrough.UnderWriterManagerName, \n\tExp_PassThrough.SalesTerritoryCodeDescription, \n\tExp_PassThrough.UnderwriterManagerEmailAddress, \n\tExp_PassThrough.UnderwriterManagerCode, \n\tExp_PassThrough.UnderwriterEmailAddress, \n\tExp_PassThrough.UnderwriterCode\n\tFROM Exp_PassThrough\n\tINNER JOIN mplt_Determine_RiskGrade_Code_and_Description\n\tON mplt_Determine_RiskGrade_Code_and_Description.in_PolicyAKID1 = Exp_PassThrough.EDWPolicyAKId\n),\nAgg_DirectWrittenPremium AS (\n\tSELECT\n\tCustomerNumber,\n\tPolicyNumber,\n\tPolicyOfferingDescription,\n\tFirstNamedInsured,\n\tPolicyEffectiveDate,\n\tDirectWrittenPremium,\n\t-- *INF*: Sum(DirectWrittenPremium)\n\tSum(DirectWrittenPremium) AS o_DirectWrittenPremium,\n\tInforceEarnedPremium,\n\t-- *INF*: Sum(InforceEarnedPremium)\n\tSum(InforceEarnedPremium) AS o_InforceEarnedPremium,\n\tMonthlyChangeInDirectEarnedPremium3Yrs,\n\t-- *INF*: Sum(MonthlyChangeInDirectEarnedPremium3Yrs)\n\tSum(MonthlyChangeInDirectEarnedPremium3Yrs) AS o_MonthlyChangeInDirectEarnedPremium3Yrs,\n\tStrategicProfitCenterDescription,\n\tProgramCode,\n\tProgramDescription,\n\tEDWPolicyAKId,\n\tAgencyCode,\n\tAbbreviatedAgencyName,\n\tUnderwritingRegionCodeDescription,\n\tPolicyIssueCode,\n\tprim_bus_class_code,\n\tprim_bus_class_code_descript,\n\tRiskGradeCode,\n\tUnderWriterName,\n\tUnderWriterManagerName,\n\tSalesTerritoryCodeDescription,\n\tUnderwriterManagerEmailAddress,\n\tUnderwriterManagerCode,\n\tUnderwriterEmailAddress,\n\tUnderwriterCode\n\tFROM JNR_Mapplet_IndustryRiskGeadeCode\n\tGROUP BY CustomerNumber, PolicyNumber\n),\nJNR_DWP_DLI AS (SELECT\n\tAgg_DirectLoss.CustomerNumber, \n\tAgg_DirectLoss.PolicyNumber, \n\tAgg_DirectLoss.PolicyOfferingDescription, \n\tAgg_DirectLoss.FirstNamedInsured, \n\tAgg_DirectLoss.PolicyEffectiveDate, \n\tAgg_DirectLoss.o_DirectLossIncurredIR AS DirectLossIncurredIR, \n\tAgg_DirectLoss.o_DirectLossIncurredIR3Yrs AS DirectLossIncurredIR3Yrs, \n\tAgg_DirectLoss.StrategicProfitCenterDescription, \n\tAgg_DirectLoss.ProgramCode, \n\tAgg_DirectLoss.ProgramDescription, \n\tAgg_DirectLoss.IndustryRiskGradeCode, \n\tAgg_DirectLoss.AgencyCode, \n\tAgg_DirectLoss.AbbreviatedAgencyName, \n\tAgg_DirectLoss.UnderwritingRegionCodeDescription, \n\tAgg_DirectLoss.PolicyIssueCode, \n\tAgg_DirectWrittenPremium.CustomerNumber AS DWP_CustomerNumber, \n\tAgg_DirectWrittenPremium.PolicyNumber AS DWP_PolicyNumber, \n\tAgg_DirectWrittenPremium.PolicyOfferingDescription AS DWP_PolicyOfferingDescription, \n\tAgg_DirectWrittenPremium.FirstNamedInsured AS DWP_FirstNamedInsured, \n\tAgg_DirectWrittenPremium.PolicyEffectiveDate AS DWP_PolicyEffectiveDate, \n\tAgg_DirectWrittenPremium.o_DirectWrittenPremium AS DWP_DirectWrittenPremium, \n\tAgg_DirectWrittenPremium.o_InforceEarnedPremium AS DWP_InforceEarnedPremium, \n\tAgg_DirectWrittenPremium.o_MonthlyChangeInDirectEarnedPremium3Yrs AS DWP_MonthlyChangeInDirectEarnedPremium3Yrs, \n\tAgg_DirectWrittenPremium.StrategicProfitCenterDescription AS DWP_StrategicProfitCenterDescription, \n\tAgg_DirectWrittenPremium.ProgramCode AS DWP_ProgramCode, \n\tAgg_DirectWrittenPremium.ProgramDescription AS DWP_ProgramDescription, \n\tAgg_DirectWrittenPremium.RiskGradeCode AS DWP_IndustryRiskGradeCode, \n\tAgg_DirectWrittenPremium.AgencyCode AS DWP_AgencyCode, \n\tAgg_DirectWrittenPremium.AbbreviatedAgencyName AS DWP_AbbreviatedAgencyName, \n\tAgg_DirectWrittenPremium.UnderwritingRegionCodeDescription AS DWP_UnderwritingRegionCodeDescription, \n\tAgg_DirectWrittenPremium.PolicyIssueCode AS DWP_PolicyIssueCode, \n\tAgg_DirectWrittenPremium.prim_bus_class_code AS DWP_prim_bus_class_code, \n\tAgg_DirectWrittenPremium.prim_bus_class_code_descript AS DWP_prim_bus_class_code_descript, \n\tAgg_DirectWrittenPremium.UnderWriterName AS DWP_UnderWriterName, \n\tAgg_DirectWrittenPremium.UnderWriterManagerName AS DWP_UnderWriterManagerName, \n\tAgg_DirectWrittenPremium.SalesTerritoryCodeDescription AS DWP_SalesTerritoryCodeDescription, \n\tAgg_DirectWrittenPremium.UnderwriterManagerEmailAddress, \n\tAgg_DirectWrittenPremium.UnderwriterManagerCode, \n\tAgg_DirectWrittenPremium.UnderwriterEmailAddress, \n\tAgg_DirectWrittenPremium.UnderwriterCode\n\tFROM Agg_DirectLoss\n\tRIGHT OUTER JOIN Agg_DirectWrittenPremium\n\tON Agg_DirectWrittenPremium.CustomerNumber = Agg_DirectLoss.CustomerNumber AND Agg_DirectWrittenPremium.PolicyNumber = Agg_DirectLoss.PolicyNumber\n),\nFil_OldRecords AS (\n\tSELECT\n\tDWP_CustomerNumber AS CustomerNumber, \n\tDWP_PolicyNumber AS PolicyNumber, \n\tDWP_PolicyOfferingDescription AS PolicyOfferingDescription, \n\tDWP_FirstNamedInsured AS FirstNamedInsured, \n\tDWP_PolicyEffectiveDate AS PolicyEffectiveDate, \n\tDirectLossIncurredIR, \n\tDirectLossIncurredIR3Yrs, \n\tDWP_ProgramCode AS ProgramCode, \n\tDWP_ProgramDescription AS ProgramDescription, \n\tDWP_IndustryRiskGradeCode AS IndustryRiskGradeCode, \n\tDWP_AgencyCode AS AgencyCode, \n\tDWP_AbbreviatedAgencyName AS AbbreviatedAgencyName, \n\tDWP_UnderwritingRegionCodeDescription AS UnderwritingRegionCodeDescription, \n\tDWP_PolicyIssueCode AS PolicyIssueCode, \n\tDWP_DirectWrittenPremium AS DirectWrittenPremium, \n\tDWP_InforceEarnedPremium AS InforceEarnedPremium, \n\tDWP_MonthlyChangeInDirectEarnedPremium3Yrs AS MonthlyChangeInDirectEarnedPremium3Yrs, \n\tDWP_prim_bus_class_code AS o_prim_bus_class_code, \n\tDWP_prim_bus_class_code_descript AS o_prim_bus_class_code_descript, \n\tDWP_StrategicProfitCenterDescription AS StrategicProfitCenterDescription, \n\tDWP_UnderWriterName AS UnderWriterName, \n\tDWP_UnderWriterManagerName AS UnderWriterManagerName, \n\tDWP_SalesTerritoryCodeDescription AS SalesTerritoryCodeDescription, \n\tUnderwriterManagerEmailAddress, \n\tUnderwriterManagerCode, \n\tUnderwriterEmailAddress, \n\tUnderwriterCode\n\tFROM JNR_DWP_DLI\n\tWHERE GET_DATE_PART(PolicyEffectiveDate,'YYYY')>GET_DATE_PART ( Sysdate, 'YYYY' )-2\n),\nSrt_InsuranceLineofBusiness AS (\n\tSELECT\n\tCustomerNumber, \n\tPolicyNumber, \n\tInsuranceReferenceLineOfBusinessDescription\n\tFROM Exp_PassThrough\n\tORDER BY CustomerNumber ASC, PolicyNumber ASC, InsuranceReferenceLineOfBusinessDescription ASC\n),\nm_InsuranceLineofBusiness AS (WITH\n\tMap_InsuranceLineofBusiness AS (\n\t\t\n\t),\n\tExp_InsuranceLineofBusiness AS (\n\t\tSELECT\n\t\tCustomerNumber,\n\t\tPolicyNumber,\n\t\tInsuranceReferenceLineOfBusinessDescription,\n\t\t-- *INF*: IIF(CustomerNumber=v_Prev_CustomerNumber and\r\n\t\t-- PolicyNumber=v_Prev_PolicyNumber\r\n\t\t-- ,InsuranceReferenceLineOfBusinessDescription||';'||v_InsuranceReferenceLineOfBusinessDescription,InsuranceReferenceLineOfBusinessDescription)\n\t\tIFF(\n\t\t    CustomerNumber = v_Prev_CustomerNumber and PolicyNumber = v_Prev_PolicyNumber,\n\t\t    InsuranceReferenceLineOfBusinessDescription || ';' || v_InsuranceReferenceLineOfBusinessDescription,\n\t\t    InsuranceReferenceLineOfBusinessDescription\n\t\t) AS v_InsuranceReferenceLineOfBusinessDescription,\n\t\tCustomerNumber AS v_Prev_CustomerNumber,\n\t\tPolicyNumber AS v_Prev_PolicyNumber,\n\t\tv_InsuranceReferenceLineOfBusinessDescription AS o_InsuranceReferenceLineOfBusinessDescription\n\t\tFROM Map_InsuranceLineofBusiness\n\t),\n\tagg AS (\n\t\tSELECT\n\t\tCustomerNumber,\n\t\tPolicyNumber,\n\t\to_InsuranceReferenceLineOfBusinessDescription\n\t\tFROM Exp_InsuranceLineofBusiness\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CustomerNumber, PolicyNumber ORDER BY NULL) = 1\n\t),\n\tInsuranceLineofBusiness AS (\n\t\tSELECT\n\t\tCustomerNumber, \n\t\tPolicyNumber, \n\t\to_InsuranceReferenceLineOfBusinessDescription\n\t\tFROM agg\n\t),\n),\nJnr_InsuranceLineOfBusiness AS (SELECT\n\tFil_OldRecords.CustomerNumber, \n\tFil_OldRecords.PolicyNumber, \n\tFil_OldRecords.PolicyOfferingDescription, \n\tFil_OldRecords.FirstNamedInsured, \n\tFil_OldRecords.PolicyEffectiveDate, \n\tFil_OldRecords.DirectWrittenPremium, \n\tFil_OldRecords.DirectLossIncurredIR, \n\tFil_OldRecords.InforceEarnedPremium, \n\tFil_OldRecords.MonthlyChangeInDirectEarnedPremium3Yrs, \n\tFil_OldRecords.DirectLossIncurredIR3Yrs, \n\tFil_OldRecords.ProgramCode, \n\tFil_OldRecords.ProgramDescription, \n\tFil_OldRecords.IndustryRiskGradeCode, \n\tFil_OldRecords.AgencyCode, \n\tFil_OldRecords.AbbreviatedAgencyName, \n\tFil_OldRecords.UnderwritingRegionCodeDescription, \n\tFil_OldRecords.PolicyIssueCode, \n\tFil_OldRecords.o_prim_bus_class_code AS prim_bus_class_code, \n\tFil_OldRecords.o_prim_bus_class_code_descript AS prim_bus_class_code_descript, \n\tFil_OldRecords.StrategicProfitCenterDescription, \n\tm_InsuranceLineofBusiness.CustomerNumber1 AS InsuranceLOB_CustomerNumber, \n\tm_InsuranceLineofBusiness.PolicyNumber1 AS InsuranceLOB_PolicyNumber, \n\tm_InsuranceLineofBusiness.o_InsuranceReferenceLineOfBusinessDescription AS InsuranceReferenceLineOfBusinessDescription, \n\tFil_OldRecords.UnderWriterName, \n\tFil_OldRecords.UnderWriterManagerName, \n\tFil_OldRecords.SalesTerritoryCodeDescription, \n\tFil_OldRecords.UnderwriterManagerEmailAddress, \n\tFil_OldRecords.UnderwriterManagerCode, \n\tFil_OldRecords.UnderwriterEmailAddress, \n\tFil_OldRecords.UnderwriterCode\n\tFROM Fil_OldRecords\n\tLEFT OUTER JOIN m_InsuranceLineofBusiness\n\tON m_InsuranceLineofBusiness.CustomerNumber1 = Fil_OldRecords.CustomerNumber AND m_InsuranceLineofBusiness.PolicyNumber1 = Fil_OldRecords.PolicyNumber\n),\nLKP_BusinessClassDim AS (\n\tSELECT\n\tBusinessClassCode,\n\tStrategicBusinessGroupDescription,\n\tPrimaryBusinessClassificationCode\n\tFROM (\n\t\tSELECT \n\t\t\tBusinessClassCode,\n\t\t\tStrategicBusinessGroupDescription,\n\t\t\tPrimaryBusinessClassificationCode\n\t\tFROM BusinessClassDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY BusinessClassCode ORDER BY BusinessClassCode) = 1\n),\nExp_Derived AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tSysDate AS ModifiedDate,\n\tJnr_InsuranceLineOfBusiness.CustomerNumber,\n\tJnr_InsuranceLineOfBusiness.PolicyNumber,\n\tJnr_InsuranceLineOfBusiness.PolicyOfferingDescription,\n\tJnr_InsuranceLineOfBusiness.FirstNamedInsured,\n\tJnr_InsuranceLineOfBusiness.PolicyEffectiveDate,\n\tJnr_InsuranceLineOfBusiness.InforceEarnedPremium,\n\t-- *INF*: IIF(ISNULL(InforceEarnedPremium),0,InforceEarnedPremium)\n\tIFF(InforceEarnedPremium IS NULL, 0, InforceEarnedPremium) AS v_InforceEarnedPremium,\n\tJnr_InsuranceLineOfBusiness.MonthlyChangeInDirectEarnedPremium3Yrs,\n\t-- *INF*: IIF(ISNULL(MonthlyChangeInDirectEarnedPremium3Yrs),0,MonthlyChangeInDirectEarnedPremium3Yrs)\n\tIFF(\n\t    MonthlyChangeInDirectEarnedPremium3Yrs IS NULL, 0, MonthlyChangeInDirectEarnedPremium3Yrs\n\t) AS v_MonthlyChangeInDirectEarnedPremium3Yrs,\n\tJnr_InsuranceLineOfBusiness.DirectWrittenPremium,\n\t-- *INF*: IIF(ISNULL(DirectWrittenPremium),0,DirectWrittenPremium)\n\tIFF(DirectWrittenPremium IS NULL, 0, DirectWrittenPremium) AS o_DirectWrittenPremium,\n\tJnr_InsuranceLineOfBusiness.DirectLossIncurredIR,\n\t-- *INF*: IIF( ISNULL(DirectLossIncurredIR) ,0,\r\n\t-- IIF(v_InforceEarnedPremium=0,0,(DirectLossIncurredIR/v_InforceEarnedPremium) * 100 ))\n\tIFF(\n\t    DirectLossIncurredIR IS NULL, 0,\n\t    IFF(\n\t        v_InforceEarnedPremium = 0, 0, (DirectLossIncurredIR / v_InforceEarnedPremium) * 100\n\t    )\n\t) AS DirectLossIncurredRatio,\n\tJnr_InsuranceLineOfBusiness.DirectLossIncurredIR3Yrs,\n\t-- *INF*: IIF(ISNULL(DirectLossIncurredIR3Yrs),0,\r\n\t-- IIF(v_MonthlyChangeInDirectEarnedPremium3Yrs=0,0,\r\n\t-- (DirectLossIncurredIR3Yrs/v_MonthlyChangeInDirectEarnedPremium3Yrs) * 100))\n\tIFF(\n\t    DirectLossIncurredIR3Yrs IS NULL, 0,\n\t    IFF(\n\t        v_MonthlyChangeInDirectEarnedPremium3Yrs = 0, 0,\n\t        (DirectLossIncurredIR3Yrs / v_MonthlyChangeInDirectEarnedPremium3Yrs) * 100\n\t    )\n\t) AS DirectLossIncurredRatio_3Yr,\n\tJnr_InsuranceLineOfBusiness.prim_bus_class_code,\n\tJnr_InsuranceLineOfBusiness.prim_bus_class_code_descript,\n\tJnr_InsuranceLineOfBusiness.StrategicProfitCenterDescription,\n\tJnr_InsuranceLineOfBusiness.ProgramCode,\n\tJnr_InsuranceLineOfBusiness.ProgramDescription,\n\tJnr_InsuranceLineOfBusiness.IndustryRiskGradeCode,\n\tJnr_InsuranceLineOfBusiness.AgencyCode,\n\tJnr_InsuranceLineOfBusiness.AbbreviatedAgencyName,\n\tJnr_InsuranceLineOfBusiness.UnderwritingRegionCodeDescription,\n\t-- *INF*: Decode(TRUE, ltrim(rtrim(upper(UnderwritingRegionCodeDescription)))='EASTERN WISCONSIN' ,'EWI',\r\n\t-- ltrim(rtrim(upper(UnderwritingRegionCodeDescription)))='WESTERN WISCONSIN' ,'WWI' ,\r\n\t-- ltrim(rtrim(upper(UnderwritingRegionCodeDescription)))='METRO MILWAUKEE' ,'MKE',\r\n\t-- upper(SUBSTR(UnderwritingRegionCodeDescription,1,3))\r\n\t--   )\n\tDecode(\n\t    TRUE,\n\t    ltrim(rtrim(upper(UnderwritingRegionCodeDescription))) = 'EASTERN WISCONSIN', 'EWI',\n\t    ltrim(rtrim(upper(UnderwritingRegionCodeDescription))) = 'WESTERN WISCONSIN', 'WWI',\n\t    ltrim(rtrim(upper(UnderwritingRegionCodeDescription))) = 'METRO MILWAUKEE', 'MKE',\n\t    upper(SUBSTR(UnderwritingRegionCodeDescription, 1, 3))\n\t) AS o_UnderwritingRegionCodeDescription,\n\tJnr_InsuranceLineOfBusiness.PolicyIssueCode,\n\t-- *INF*: ADD_TO_DATE(SYSDATE,'MM',-1)\n\tDATEADD(MONTH,- 1,CURRENT_TIMESTAMP) AS RunDate,\n\t-- *INF*: IIF (DirectWrittenPremium > 150000 ,'1','0')\n\tIFF(DirectWrittenPremium > 150000, '1', '0') AS AcctOver150K,\n\tJnr_InsuranceLineOfBusiness.InsuranceReferenceLineOfBusinessDescription AS i_InsuranceReferenceLineOfBusinessDescription,\n\t-- *INF*: i_InsuranceReferenceLineOfBusinessDescription  -- vendor can't exceed 250 chars\n\ti_InsuranceReferenceLineOfBusinessDescription AS o_InsuranceReferenceLineOfBusinessDescription,\n\tJnr_InsuranceLineOfBusiness.UnderWriterName,\n\tJnr_InsuranceLineOfBusiness.UnderWriterManagerName,\n\tLKP_BusinessClassDim.StrategicBusinessGroupDescription,\n\tJnr_InsuranceLineOfBusiness.SalesTerritoryCodeDescription,\n\tJnr_InsuranceLineOfBusiness.UnderwriterManagerEmailAddress AS i_UnderwriterManagerEmailAddress,\n\t-- *INF*: lower(i_UnderwriterManagerEmailAddress)\n\tlower(i_UnderwriterManagerEmailAddress) AS o_UnderwriterManagerEmailAddress,\n\tJnr_InsuranceLineOfBusiness.UnderwriterManagerCode,\n\tJnr_InsuranceLineOfBusiness.UnderwriterEmailAddress AS i_UnderwriterEmailAddress,\n\t-- *INF*: lower(i_UnderwriterEmailAddress)\n\tlower(i_UnderwriterEmailAddress) AS o_UnderwriterEmailAddress,\n\tJnr_InsuranceLineOfBusiness.UnderwriterCode\n\tFROM Jnr_InsuranceLineOfBusiness\n\tLEFT JOIN LKP_BusinessClassDim\n\tON LKP_BusinessClassDim.BusinessClassCode = Jnr_InsuranceLineOfBusiness.prim_bus_class_code\n),\nCommercialProductManagementExtract AS (\n\tTRUNCATE TABLE CommercialProductManagementExtract;\n\tINSERT INTO CommercialProductManagementExtract\n\t(AuditId, ModifiedDate, CustomerNumber, PolicyNumber, PolicyOfferingDescription, FirstNamedInsured, PolicyEffectiveDate, DirectWrittenPremium, DirectLossIncurred, DirectLossIncurredRatio, DirectLossIncurred3Yrs, DirectLossIncurredRatio3Yrs, PrimaryBusinessClassCode, PrimaryBusinessClassDescription, StrategicProfitCenterDescription, ProgramCode, ProgramDescription, IndustryRiskGradeCode, AgencyCode, AbbreviatedAgencyName, UnderwritingRegionCodeDescription, PolicyIssueCode, RunDate, AccountOver150KFlag, InsuranceReferenceLineOfBusinessDescription, UnderWriterName, UnderWriterManagerName, StrategicBusinessGroupDescription, SalesTerritoryDescription, UnderwriterManagerEmailAddress, UnderwriterManagerCode, UnderwriterEmailAddress, UnderwriterCode)\n\tSELECT \n\tAuditID AS AUDITID, \n\tMODIFIEDDATE, \n\tCUSTOMERNUMBER, \n\tPOLICYNUMBER, \n\tPOLICYOFFERINGDESCRIPTION, \n\tFIRSTNAMEDINSURED, \n\tPOLICYEFFECTIVEDATE, \n\to_DirectWrittenPremium AS DIRECTWRITTENPREMIUM, \n\tDirectLossIncurredIR AS DIRECTLOSSINCURRED, \n\tDIRECTLOSSINCURREDRATIO, \n\tDirectLossIncurredIR3Yrs AS DIRECTLOSSINCURRED3YRS, \n\tDirectLossIncurredRatio_3Yr AS DIRECTLOSSINCURREDRATIO3YRS, \n\tprim_bus_class_code AS PRIMARYBUSINESSCLASSCODE, \n\tprim_bus_class_code_descript AS PRIMARYBUSINESSCLASSDESCRIPTION, \n\tSTRATEGICPROFITCENTERDESCRIPTION, \n\tPROGRAMCODE, \n\tPROGRAMDESCRIPTION, \n\tINDUSTRYRISKGRADECODE, \n\tAGENCYCODE, \n\tABBREVIATEDAGENCYNAME, \n\to_UnderwritingRegionCodeDescription AS UNDERWRITINGREGIONCODEDESCRIPTION, \n\tPOLICYISSUECODE, \n\tRUNDATE, \n\tAcctOver150K AS ACCOUNTOVER150KFLAG, \n\to_InsuranceReferenceLineOfBusinessDescription AS INSURANCEREFERENCELINEOFBUSINESSDESCRIPTION, \n\tUNDERWRITERNAME, \n\tUNDERWRITERMANAGERNAME, \n\tSTRATEGICBUSINESSGROUPDESCRIPTION, \n\tSalesTerritoryCodeDescription AS SALESTERRITORYDESCRIPTION, \n\to_UnderwriterManagerEmailAddress AS UNDERWRITERMANAGEREMAILADDRESS, \n\tUNDERWRITERMANAGERCODE, \n\to_UnderwriterEmailAddress AS UNDERWRITEREMAILADDRESS, \n\tUNDERWRITERCODE\n\tFROM Exp_Derived\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "NO_OF_MONTH": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}