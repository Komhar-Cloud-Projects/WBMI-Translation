{
    "name": "s_m_AGY_DW_Load_Producer_Code",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_Load_Producer_Code",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Agency AS (\n\tSELECT\n\tagency_ak_id,\n\tagency_key\n\tFROM (\n\t\tSELECT a.agency_ak_id as agency_ak_id, a.agency_key as agency_key FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency a\r\n\t\twhere crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY agency_key ORDER BY agency_ak_id) = 1\n),\nSQ_Producer_code_stage AS (\n\tSELECT\n\t\tproducer_code_stage_id,\n\t\tSTATE_CODE,\n\t\tAGENCY_NUM,\n\t\tPRODUCER_CODE,\n\t\tEMP_ID,\n\t\tPRODUCER_DESCRIPT,\n\t\tAGENCY_CODE,\n\t\tEXTRACT_DATE,\n\t\tAS_OF_DATE,\n\t\tRECORD_COUNT,\n\t\tSOURCE_SYSTEM_ID\n\tFROM Producer_code_stage\n),\nEXP_EDW_Convert_Agency_Key_Id_for_Producer_code AS (\n\tSELECT\n\tproducer_code_stage_id AS producer_code_Stage_id,\n\tSTATE_CODE AS IN_STATE_CODE,\n\tAGENCY_NUM AS IN_AGENCY_NUM,\n\tPRODUCER_CODE AS IN_PRODUCER_CODE,\n\tEMP_ID AS IN_EMP_ID,\n\tPRODUCER_DESCRIPT AS IN_PRODUCER_DESCRIPT,\n\tAGENCY_CODE AS IN_AGENCY_CODE,\n\t-- *INF*: iif(isnull(IN_STATE_CODE),'N/A',iif(IS_SPACES(IN_STATE_CODE),'N/A',IN_STATE_CODE))\n\tIFF(\n\t    IN_STATE_CODE IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(IN_STATE_CODE)>0 AND TRIM(IN_STATE_CODE)='', 'N/A', IN_STATE_CODE\n\t    )\n\t) AS STATE_CODE,\n\t-- *INF*: iif(isnull(IN_AGENCY_NUM),'N/A',iif(IS_SPACES(IN_AGENCY_NUM),'N/A',IN_AGENCY_NUM))\n\tIFF(\n\t    IN_AGENCY_NUM IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(IN_AGENCY_NUM)>0 AND TRIM(IN_AGENCY_NUM)='', 'N/A', IN_AGENCY_NUM\n\t    )\n\t) AS AGENCY_NUM,\n\t-- *INF*: TO_CHAR(IN_PRODUCER_CODE)\n\tTO_CHAR(IN_PRODUCER_CODE) AS v_producer_code,\n\t-- *INF*: rpad(v_producer_code,3)\n\trpad(v_producer_code, 3) AS v_producer_code_pad,\n\t-- *INF*: iif(isnull(v_producer_code),'N/A',iif(IS_SPACES(v_producer_code),'N/A',v_producer_code))\n\tIFF(\n\t    v_producer_code IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(v_producer_code)>0 AND TRIM(v_producer_code)='', 'N/A', v_producer_code\n\t    )\n\t) AS PRODUCER_CODE,\n\tv_producer_code_pad AS producer_code_out,\n\t-- *INF*: iif(isnull(IN_PRODUCER_DESCRIPT),'Not Available',iif(IS_SPACES(IN_PRODUCER_DESCRIPT),'Not Available',\r\n\t-- iif(length(IN_PRODUCER_DESCRIPT)=0,'Not Available',ltrim(rtrim(IN_PRODUCER_DESCRIPT)))))\n\tIFF(\n\t    IN_PRODUCER_DESCRIPT IS NULL, 'Not Available',\n\t    IFF(\n\t        LENGTH(IN_PRODUCER_DESCRIPT)>0\n\t    and TRIM(IN_PRODUCER_DESCRIPT)='', 'Not Available',\n\t        IFF(\n\t            length(IN_PRODUCER_DESCRIPT) = 0, 'Not Available',\n\t            ltrim(rtrim(IN_PRODUCER_DESCRIPT))\n\t        )\n\t    )\n\t) AS PRODUCER_DESCRIPT,\n\t-- *INF*: iif(isnull(IN_AGENCY_CODE),'N/A',iif(IS_SPACES(IN_AGENCY_CODE),'N/A',IN_AGENCY_CODE))\n\tIFF(\n\t    IN_AGENCY_CODE IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(IN_AGENCY_CODE)>0 AND TRIM(IN_AGENCY_CODE)='', 'N/A', IN_AGENCY_CODE\n\t    )\n\t) AS AGENCY_CODE,\n\tIN_STATE_CODE || IN_AGENCY_NUM AS v_agency_key,\n\tSTATE_CODE || AGENCY_NUM AS OUT_Agency_Key,\n\t-- *INF*: :LKP.LKP_AGENCY(v_agency_key)\n\tLKP_AGENCY_v_agency_key.agency_ak_id AS v_AGENCY_ak_ID,\n\tv_AGENCY_ak_ID AS OUT_AGENCY_ak_ID,\n\tEXTRACT_DATE,\n\tAS_OF_DATE,\n\tRECORD_COUNT,\n\tSOURCE_SYSTEM_ID\n\tFROM SQ_Producer_code_stage\n\tLEFT JOIN LKP_AGENCY LKP_AGENCY_v_agency_key\n\tON LKP_AGENCY_v_agency_key.agency_key = v_agency_key\n\n),\nLKP_Producer_code AS (\n\tSELECT\n\tproducer_code_id,\n\tprdcr_code_ak_id,\n\tproducer_descript,\n\tagency_ak_id,\n\tproducer_code,\n\tagency_key,\n\temp_id\n\tFROM (\n\t\tSELECT a.producer_code_id as producer_code_id, \r\n\t\ta.prdcr_code_ak_id as prdcr_code_ak_id,\r\n\t\ta.producer_descript as producer_descript, \r\n\t\ta.agency_ak_id as agency_ak_id, \r\n\t\ta.producer_code as producer_code, \r\n\t\ta.agency_key as agency_key, \r\n\t\ta.emp_id as emp_id \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.producer_code a\r\n\t\tWHERE a.producer_code_id in (SELECT MAX(b.producer_code_id)\r\n\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.producer_code b\r\n\t\t\tWHERE crrnt_snpsht_flag=1\r\n\t\t\tGROUP BY b.producer_code,b.agency_key,b.emp_id )\r\n\t\t\tORDER BY a.producer_code,a.agency_key,a.emp_id\r\n\t\t\r\n\t\t--IN Subquery exists so that we only pick the MAX value of the PK for each AK Group\r\n\t\t--WHERE clause is always eff_to_date = '12/31/2100'\r\n\t\t--GROUP BY clause is always the AK\r\n\t\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer generate an ORDER BY statemen\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY producer_code,agency_key,emp_id ORDER BY producer_code_id) = 1\n),\nSEQ_Producer_code AS (\n\tCREATE SEQUENCE SEQ_Producer_code\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_Producer_code.producer_code_id AS old_producer_code_id,\n\tLKP_Producer_code.prdcr_code_ak_id,\n\tLKP_Producer_code.producer_descript AS OLD_PRODUCER_DESCRIPT,\n\tLKP_Producer_code.agency_ak_id AS OLD_OUT_AGENCY_ak_ID,\n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.PRODUCER_DESCRIPT,\n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.OUT_AGENCY_ak_ID,\n\t-- *INF*: iif(isnull(old_producer_code_id),'NEW',\r\n\t-- \tiif(\t(PRODUCER_DESCRIPT <> OLD_PRODUCER_DESCRIPT) or\r\n\t-- \t( OUT_AGENCY_ak_ID<> OLD_OUT_AGENCY_ak_ID),\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\r\n\t-- \r\n\t-- \n\tIFF(\n\t    old_producer_code_id IS NULL, 'NEW',\n\t    IFF(\n\t        (PRODUCER_DESCRIPT <> OLD_PRODUCER_DESCRIPT)\n\t    or (OUT_AGENCY_ak_ID <> OLD_OUT_AGENCY_ak_ID),\n\t        'UPDATE',\n\t        'NOCHANGE'\n\t    )\n\t) AS v_changed_flag,\n\t1 AS Crrnt_SnapSht_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\r\n\t-- \r\n\t-- --sysdate normally has a time value.  We don't want the time value as our effectivity runs from day to day starting at midnight\n\tIFF(\n\t    v_changed_flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS Eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_to_date,\n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.SOURCE_SYSTEM_ID,\n\tsysdate AS Created_date,\n\tsysdate AS Modified_date,\n\tv_changed_flag AS changed_flag,\n\tSEQ_Producer_code.NEXTVAL,\n\t-- *INF*: IIF(v_changed_flag='NEW',\r\n\t-- NEXTVAL,\r\n\t-- prdcr_code_ak_id)\n\tIFF(v_changed_flag = 'NEW', NEXTVAL, prdcr_code_ak_id) AS out_prdcr_code_ak_id\n\tFROM EXP_EDW_Convert_Agency_Key_Id_for_Producer_code\n\tLEFT JOIN LKP_Producer_code\n\tON LKP_Producer_code.producer_code = EXP_EDW_Convert_Agency_Key_Id_for_Producer_code.producer_code_out AND LKP_Producer_code.agency_key = EXP_EDW_Convert_Agency_Key_Id_for_Producer_code.OUT_Agency_Key AND LKP_Producer_code.emp_id = EXP_EDW_Convert_Agency_Key_Id_for_Producer_code.IN_EMP_ID\n),\nFIL_existing_Prdcr_Codes AS (\n\tSELECT\n\tEXP_Detect_Changes.out_prdcr_code_ak_id, \n\tEXP_Detect_Changes.OUT_AGENCY_ak_ID AS OUT_AGENCY_AK_ID, \n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.PRODUCER_CODE, \n\tEXP_Detect_Changes.PRODUCER_DESCRIPT, \n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.OUT_Agency_Key, \n\tEXP_Detect_Changes.Crrnt_SnapSht_Flag, \n\tEXP_Detect_Changes.Audit_id, \n\tEXP_Detect_Changes.Eff_from_date, \n\tEXP_Detect_Changes.Eff_to_date, \n\tEXP_Detect_Changes.SOURCE_SYSTEM_ID, \n\tEXP_Detect_Changes.Created_date, \n\tEXP_Detect_Changes.Modified_date, \n\tEXP_Detect_Changes.changed_flag, \n\tEXP_EDW_Convert_Agency_Key_Id_for_Producer_code.IN_EMP_ID\n\tFROM EXP_Detect_Changes\n\t -- Manually join with EXP_EDW_Convert_Agency_Key_Id_for_Producer_code\n\tWHERE changed_flag='NEW' or changed_flag = 'UPDATE'\n),\nProducer_code_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.producer_code\n\t(prdcr_code_ak_id, agency_ak_id, producer_code, producer_descript, agency_key, emp_id, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tout_prdcr_code_ak_id AS PRDCR_CODE_AK_ID, \n\tOUT_AGENCY_AK_ID AS AGENCY_AK_ID, \n\tPRODUCER_CODE AS PRODUCER_CODE, \n\tPRODUCER_DESCRIPT AS PRODUCER_DESCRIPT, \n\tOUT_Agency_Key AS AGENCY_KEY, \n\tIN_EMP_ID AS EMP_ID, \n\tCrrnt_SnapSht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_id AS AUDIT_ID, \n\tEff_from_date AS EFF_FROM_DATE, \n\tEff_to_date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_date AS CREATED_DATE, \n\tModified_date AS MODIFIED_DATE\n\tFROM FIL_existing_Prdcr_Codes\n),\nSQ_Producer_code AS (\n\tSELECT a.producer_code_id,\r\n\ta.producer_code,\r\n\ta.agency_key, \r\n\ta.emp_id,\r\n\ta.eff_from_date,\r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.producer_code a\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.Producer_Code b\r\n\t\tWHERE eff_to_date = '12/31/2100 23:59:59'\r\n\t\tAND a.producer_code = b.producer_code\r\n\t\tAND a.agency_key = b.agency_key\r\n\t\tAND a.emp_id = b.emp_id\r\n\t\tGROUP BY producer_code,agency_key,emp_id\r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY producer_code,agency_key,emp_id,eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of eff_to_date='12/31/2100' and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the\r\n\t--eff_to_date by utilizing a local variable to keep track\n),\nEXP_UPD_Producer_Code AS (\n\tSELECT\n\tproducer_code_id,\n\tproducer_code,\n\tagency_key,\n\temp_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE, producer_code = v_PREV_ROW_producer_code and agency_key = v_PREV_ROW_agency_key and emp_id = v_prev_row_emp_id  , ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(\n\t    TRUE,\n\t    producer_code = v_PREV_ROW_producer_code and agency_key = v_PREV_ROW_agency_key and emp_id = v_prev_row_emp_id, DATEADD(SECOND,- 1,v_PREV_ROW_eff_from_date),\n\t    orig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tproducer_code AS v_PREV_ROW_producer_code,\n\tagency_key AS v_PREV_ROW_agency_key,\n\temp_id AS v_prev_row_emp_id,\n\t0 AS Crrnt_snpsht_flag,\n\tsysdate AS modified_date\n\tFROM SQ_Producer_code\n),\nFIL_AGY_Prdcr_code_updates AS (\n\tSELECT\n\tproducer_code_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tCrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_UPD_Producer_Code\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_Producer_Code AS (\n\tSELECT\n\tproducer_code_id, \n\teff_to_date, \n\tCrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_AGY_Prdcr_code_updates\n),\nproducer_code_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.producer_code AS T\n\tUSING UPD_Producer_Code AS S\n\tON T.producer_code_id = S.producer_code_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.Crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Agency DataWarehouse/"
        },
        "annotations": []
    }
}