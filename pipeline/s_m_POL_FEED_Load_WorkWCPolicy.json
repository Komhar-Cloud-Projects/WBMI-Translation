{
    "name": "s_m_POL_FEED_Load_WorkWCPolicy",
    "properties": {
        "activities": [
            {
                "name": "m_POL_FEED_Load_WorkWCPolicy",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PriorPolicy AS (\n\tselect Pol_key as Policykey,ID as Coverageguid,Historyid,Type,PriorPolicykey,Max_Historyid,Status,PolicyType,Min_Historyid,cnt\r\n\tfrom (\r\n\tselect B.PolicyNumber+B.PolicyVersionFormatted Pol_key,\r\n\tDC.ID,\r\n\tC.HistoryID,\r\n\tC.Type,\r\n\tISNULL(case when G.CarrierName='WestBend' then F.PolicySymbol else '' end,'')+ISNULL(case when G.CarrierName='WestBend' then G.PolicyNumber else '' end,'')+ISNULL(case when G.CarrierName='WestBend' then F.PolicyMod else '' end,'') PriorPolicyKey,\r\n\tmax(C.Historyid) over(partition by B.PolicyNumber+B.PolicyVersionFormatted) Max_Historyid,\r\n\tA.Status,\r\n\tmax(case when C.Type in ('Renew','Rewrite','New','Reissue') then C.Type else '' end) over (Partition by B.PolicyNumber+B.PolicyVersionFormatted) PolicyType,\r\n\tmin(Historyid) over(partition by B.PolicyNumber+B.PolicyVersionFormatted,DC.ID) Min_Historyid,count(B.PolicyNumber+B.PolicyVersionFormatted) over(partition by DC.ID) cnt\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Policy A\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy B\r\n\ton A.PolicyId=B.PolicyId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction C\r\n\ton A.SessionId=C.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session D\r\n\ton C.SessionId=D.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line E\r\n\ton D.SessionId=E.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage DC\r\n\ton C.Sessionid=DC.Sessionid\r\n\tinner join (\r\n\tselect distinct DC.ID CoverageGuid\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS\r\n\ton DT.Sessionid=DS.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL\r\n\ton DT.Sessionid=DL.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage DC\r\n\ton DT.Sessionid=DC.Sessionid\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand DT.State='Committed'\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t) X\r\n\ton DC.ID=X.CoverageGuid\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_CL_PriorInsurance F\r\n\ton E.SessionId=F.SessionId\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_PriorInsurance G\r\n\ton A.PolicyId=G.PolicyId\r\n\tand A.SessionId=G.SessionId\r\n\twhere E.Type='WorkersCompensation'\r\n\tand D.Purpose='Onset'\r\n\tand C.State='Committed'\r\n\t) A\r\n\twhere A.Historyid=A.Max_Historyid\r\n\torder by 2,Min_Historyid,3\n),\nEXP_PriorPolicy AS (\n\tSELECT\n\tPolicykey,\n\tCoverageGuid,\n\tHistoryID,\n\tType,\n\tPriorPolicykey,\n\tMax_HistoryID,\n\tStatus,\n\tPolicyType,\n\tMin_HistoryID,\n\t-- *INF*: IIF(CoverageGuid<>v_Prev_CoverageGuid,\r\n\t-- Decode(TRUE,\r\n\t-- PolicyType='New' and Status='Cancelled','',\r\n\t-- PolicyType='New',Policykey,\r\n\t-- PolicyType='Renew' and ISNULL(PriorPolicykey),'',\r\n\t-- PolicyType='Renew',PriorPolicykey,''),\r\n\t-- Decode(TRUE,\r\n\t-- PolicyType='Renew',v_PreviousPolicyKey,\r\n\t-- IN(PolicyType,'Reissue','Rewrite'),v_DerivedPolicyKey,''))\n\tIFF(\n\t    CoverageGuid <> v_Prev_CoverageGuid,\n\t    Decode(\n\t        TRUE,\n\t        PolicyType = 'New'\n\t    and Status = 'Cancelled', '',\n\t        PolicyType = 'New', Policykey,\n\t        PolicyType = 'Renew'\n\t    and PriorPolicykey IS NULL, '',\n\t        PolicyType = 'Renew', PriorPolicykey,\n\t        ''\n\t    ),\n\t    Decode(\n\t        TRUE,\n\t        PolicyType = 'Renew', v_PreviousPolicyKey,\n\t        PolicyType IN ('Reissue','Rewrite'), v_DerivedPolicyKey,\n\t        ''\n\t    )\n\t) AS v_DerivedPolicyKey,\n\tPolicykey AS v_PreviousPolicyKey,\n\tCoverageGuid AS v_Prev_CoverageGuid,\n\tStatus AS v_Prev_Status,\n\tPolicyType AS v_prev_PolicyType,\n\t-- *INF*: IIF(v_DerivedPolicyKey=Policykey,'',v_DerivedPolicyKey)\n\tIFF(v_DerivedPolicyKey = Policykey, '', v_DerivedPolicyKey) AS PreviousPolicyKey,\n\tCnt\n\tFROM SQ_PriorPolicy\n),\nFIL_NoPriorPolicy AS (\n\tSELECT\n\tPolicykey, \n\tPreviousPolicyKey, \n\tCnt\n\tFROM EXP_PriorPolicy\n\tWHERE NOT ISNULL(PreviousPolicyKey) and PreviousPolicyKey<>''\n),\nSRT_PriorPolicy_DuplicateElimination AS (\n\tSELECT\n\tPolicykey, \n\tPreviousPolicyKey, \n\tCnt\n\tFROM FIL_NoPriorPolicy\n\tORDER BY Policykey ASC, Cnt ASC\n),\nAGG_Select_Correct_PriorPolicykey AS (\n\tSELECT\n\tPolicykey,\n\tPreviousPolicyKey,\n\tCnt\n\tFROM SRT_PriorPolicy_DuplicateElimination\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY Policykey ORDER BY NULL) = 1\n),\nSQ_DC_Policy AS (\n\tselect \r\n\tDT.HistoryID,\r\n\tDS.Purpose,\r\n\tDP.SessionId,\r\n\tDP.PolicyID,\r\n\tDP.Term PolicyTerm,\r\n\tDP.PolicyNumber+WP.PolicyVersionFormatted PolicyKey,\r\n\tDP.EffectiveDate PolicyEffectiveDate,\r\n\tDP.ExpirationDate PolicyExpirationDate,\r\n\tWP.IsRollover,\r\n\tISNULL(DT.TransactionDate,DT.CreatedDate) as TransactionDate,\r\n\tDT.EffectiveDate TransactionEffectiveDate,\r\n\tDT.ExpirationDate TransactionExpirationDate,\r\n\tDT.Type TransactionType,\r\n\tDP.NAICSCode,\r\n\tWP.Division\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Policy DP with(nolock)\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP with(nolock)\r\n\ton DP.PolicyId=WP.PolicyId\r\n\tand DP.SessionId=WP.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\ton DP.SessionId=DL.SessionId\r\n\tand DP.PolicyId=DL.PolicyId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\ton DL.SessionId=DS.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\ton DL.SessionId=DT.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Transaction WT with(nolock)\r\n\ton DT.TransactionId=WT.TransactionId\r\n\tand DT.SessionId=WT.SessionId\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand DT.State='Committed'\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_SRCDataCollect AS (\n\tSELECT\n\tHistoryID,\n\tPurpose,\n\tSessionId,\n\tPolicyId,\n\tPolicyTerm,\n\tPolicyKey,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tIsRollover,\n\tTransactionDate,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tTransactionType,\n\tNAICSCode,\n\tDivision\n\tFROM SQ_DC_Policy\n),\nJNR_PriorPolicy AS (SELECT\n\tEXP_SRCDataCollect.HistoryID, \n\tEXP_SRCDataCollect.Purpose, \n\tEXP_SRCDataCollect.SessionId, \n\tEXP_SRCDataCollect.PolicyId, \n\tEXP_SRCDataCollect.PolicyTerm, \n\tEXP_SRCDataCollect.PolicyKey, \n\tEXP_SRCDataCollect.PolicyEffectiveDate, \n\tEXP_SRCDataCollect.PolicyExpirationDate, \n\tEXP_SRCDataCollect.IsRollover, \n\tEXP_SRCDataCollect.TransactionDate, \n\tEXP_SRCDataCollect.TransactionEffectiveDate, \n\tEXP_SRCDataCollect.TransactionExpirationDate, \n\tEXP_SRCDataCollect.TransactionType, \n\tEXP_SRCDataCollect.NAICSCode, \n\tEXP_SRCDataCollect.Division, \n\tAGG_Select_Correct_PriorPolicykey.Policykey AS I_Policykey, \n\tAGG_Select_Correct_PriorPolicykey.PreviousPolicyKey\n\tFROM AGG_Select_Correct_PriorPolicykey\n\tRIGHT OUTER JOIN EXP_SRCDataCollect\n\tON EXP_SRCDataCollect.PolicyKey = AGG_Select_Correct_PriorPolicykey.Policykey\n),\nEXP_PrevousNonCancelledPolicy AS (\n\tSELECT\n\tHistoryID,\n\tPurpose,\n\tSessionId,\n\tPolicyId,\n\tPolicyTerm,\n\tPolicyKey,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tIsRollover,\n\tTransactionDate,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tTransactionType,\n\tNAICSCode,\n\tDivision,\n\tPreviousPolicyKey\n\tFROM JNR_PriorPolicy\n),\nLKP_LatestSession AS (\n\tSELECT\n\tSessionId,\n\tPurpose,\n\tHistoryID\n\tFROM (\n\t\tSelect distinct DT.HistoryID AS HistoryID,\r\n\t\tDS.Purpose AS Purpose,\r\n\t\tMax(DS.Sessionid) AS Sessionid\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\t\ton DT.Sessionid=DS.Sessionid\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\t\ton DT.Sessionid=DL.Sessionid\r\n\t\twhere DL.Type='WorkersCompensation'\r\n\t\tand DS.Purpose='Onset'\r\n\t\tand DT.State='Committed'\r\n\t\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\tgroup by DT.HistoryID,DS.Purpose\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,Purpose,HistoryID ORDER BY SessionId) = 1\n),\nLKP_WorkWCTrackHistory AS (\n\tSELECT\n\tWCTrackHistoryID,\n\tAuditid,\n\tHistoryID,\n\tPurpose\n\tFROM (\n\t\tSELECT \r\n\t\tWorkWCTrackHistory.WCTrackHistoryID as WCTrackHistoryID, \r\n\t\tWorkWCTrackHistory.Auditid as Auditid, \r\n\t\tWorkWCTrackHistory.HistoryID as HistoryID, \r\n\t\tWorkWCTrackHistory.Purpose as Purpose \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkWCTrackHistory\r\n\t\torder by WorkWCTrackHistory.HistoryID,WorkWCTrackHistory.Purpose,WorkWCTrackHistory.Auditid ASC\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY HistoryID,Purpose ORDER BY WCTrackHistoryID) = 1\n),\nEXP_RecordFlagging AS (\n\tSELECT\n\tLKP_WorkWCTrackHistory.WCTrackHistoryID AS lkp_WCTrackHistoryID,\n\tLKP_WorkWCTrackHistory.Auditid AS lkp_Auditid,\n\tCURRENT_TIMESTAMP AS ExtractDate,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Auditid,\n\t-- *INF*: IIF(lkp_Auditid=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND (NOT ISNULL(lkp_SessionId)),'1','0')\n\tIFF(lkp_Auditid = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND (lkp_SessionId IS NOT NULL), '1', '0') AS FilterFlag,\n\tEXP_PrevousNonCancelledPolicy.PolicyId,\n\tEXP_PrevousNonCancelledPolicy.PolicyTerm,\n\tEXP_PrevousNonCancelledPolicy.PolicyKey,\n\tEXP_PrevousNonCancelledPolicy.PolicyEffectiveDate,\n\tEXP_PrevousNonCancelledPolicy.PolicyExpirationDate,\n\tEXP_PrevousNonCancelledPolicy.IsRollover,\n\tEXP_PrevousNonCancelledPolicy.TransactionDate,\n\tEXP_PrevousNonCancelledPolicy.TransactionEffectiveDate,\n\tEXP_PrevousNonCancelledPolicy.TransactionExpirationDate,\n\tEXP_PrevousNonCancelledPolicy.TransactionType,\n\tEXP_PrevousNonCancelledPolicy.PreviousPolicyKey,\n\tEXP_PrevousNonCancelledPolicy.NAICSCode,\n\tEXP_PrevousNonCancelledPolicy.Division,\n\tLKP_LatestSession.SessionId AS lkp_SessionId\n\tFROM EXP_PrevousNonCancelledPolicy\n\tLEFT JOIN LKP_LatestSession\n\tON LKP_LatestSession.SessionId = EXP_PrevousNonCancelledPolicy.SessionId AND LKP_LatestSession.Purpose = EXP_PrevousNonCancelledPolicy.Purpose AND LKP_LatestSession.HistoryID = EXP_PrevousNonCancelledPolicy.HistoryID\n\tLEFT JOIN LKP_WorkWCTrackHistory\n\tON LKP_WorkWCTrackHistory.HistoryID = EXP_PrevousNonCancelledPolicy.HistoryID AND LKP_WorkWCTrackHistory.Purpose = EXP_PrevousNonCancelledPolicy.Purpose\n),\nFIL_ExcludeSubmittedRecords AS (\n\tSELECT\n\tlkp_WCTrackHistoryID AS WCTrackHistoryID, \n\tExtractDate, \n\tAuditid, \n\tFilterFlag, \n\tPolicyId, \n\tPolicyTerm, \n\tPolicyKey, \n\tPolicyEffectiveDate, \n\tPolicyExpirationDate, \n\tIsRollover, \n\tTransactionDate, \n\tTransactionEffectiveDate, \n\tTransactionExpirationDate, \n\tTransactionType, \n\tPreviousPolicyKey, \n\tNAICSCode, \n\tDivision\n\tFROM EXP_RecordFlagging\n\tWHERE FilterFlag='1'\n),\nWorkWCPolicy AS (\n\tTRUNCATE TABLE WorkWCPolicy;\n\tINSERT INTO WorkWCPolicy\n\t(Auditid, ExtractDate, WCTrackHistoryID, PolicyId, PolicyKey, PolicyTerm, PolicyEffectiveDate, PolicyExpirationDate, IsRollover, TransactionDate, TransactionEffectiveDate, TransactionExpirationDate, TransactionType, PreviousPolicyKey, NAICSCode, Division)\n\tSELECT \n\tAUDITID, \n\tEXTRACTDATE, \n\tWCTRACKHISTORYID, \n\tPOLICYID, \n\tPOLICYKEY, \n\tPOLICYTERM, \n\tPOLICYEFFECTIVEDATE, \n\tPOLICYEXPIRATIONDATE, \n\tISROLLOVER, \n\tTRANSACTIONDATE, \n\tTRANSACTIONEFFECTIVEDATE, \n\tTRANSACTIONEXPIRATIONDATE, \n\tTRANSACTIONTYPE, \n\tPREVIOUSPOLICYKEY, \n\tNAICSCODE, \n\tDIVISION\n\tFROM FIL_ExcludeSubmittedRecords\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}