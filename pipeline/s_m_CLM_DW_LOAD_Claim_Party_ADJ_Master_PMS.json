{
    "name": "s_m_CLM_DW_LOAD_Claim_Party_ADJ_Master_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_ADJ_Master_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PMS_ADJUSTER_MASTER_STAGE AS (\n\tSELECT \r\n\tadnm_taxid_ssn,\r\n\tadnm_name,\r\n\t(adnm_adjustor_nbr + adnm_type_adjustor) as adnm_commnt1,\r\n\tadnm_address,\r\n\tadnm_city_state,\r\n\tadnm_zip_code\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.pms_adjuster_master_stage\n),\nEXP_Values AS (\n\tSELECT\n\tadnm_commnt1,\n\tadnm_name,\n\t-- *INF*: IIF(ISNULL(adnm_name) or IS_SPACES(adnm_name) or LENGTH(adnm_name) = 0,'N/A',LTRIM(RTRIM(adnm_name)))\n\tIFF(adnm_name IS NULL \n\t\tOR LENGTH(adnm_name)>0 AND TRIM(adnm_name)='' \n\t\tOR LENGTH(adnm_name\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(adnm_name\n\t\t\t)\n\t\t)\n\t) AS Claim_Party_Full_Name,\n\t'N/A' AS claim_party_first_name,\n\t'N/A' AS claim_party_last_name,\n\t'N/A' AS claim_party_mid_name,\n\t'N/A' AS claim_party_name_prfx,\n\t'N/A' AS claim_party_name_sfx,\n\tadnm_address,\n\t-- *INF*: IIF(ISNULL(adnm_address) or IS_SPACES(adnm_address) or LENGTH(adnm_address) = 0 ,'N/A',LTRIM(RTRIM(adnm_address)))\n\tIFF(adnm_address IS NULL \n\t\tOR LENGTH(adnm_address)>0 AND TRIM(adnm_address)='' \n\t\tOR LENGTH(adnm_address\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(adnm_address\n\t\t\t)\n\t\t)\n\t) AS Claim_Party_address,\n\tadnm_city_state,\n\t-- *INF*: IIF(INSTR(LTRIM(RTRIM(adnm_city_state)),' ' ,-1,1) = 0, SUBSTR(LTRIM(RTRIM(adnm_city_state)),1),\r\n\t-- SUBSTR(LTRIM(RTRIM(adnm_city_state)),1,INSTR(LTRIM(RTRIM(adnm_city_state)),' ' ,-1,1)))\r\n\t-- \r\n\t-- \r\n\t-- --SUBSTR(LTRIM(RTRIM(adnm_city_state)),1,INSTR(LTRIM(RTRIM(adnm_city_state)),' ' ,-1,1))\n\tIFF(REGEXP_INSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t)\n\t\t\t), ' ', - 1, 1\n\t\t) = 0,\n\t\tSUBSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t)\n\t\t\t), 1\n\t\t),\n\t\tSUBSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t)\n\t\t\t), 1, REGEXP_INSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t\t)\n\t\t\t\t), ' ', - 1, 1\n\t\t\t)\n\t\t)\n\t) AS v_claim_party_city,\n\t-- *INF*: IIF(ISNULL(v_claim_party_city) or IS_SPACES(v_claim_party_city) or LENGTH(v_claim_party_city) = 0 ,'N/A',LTRIM(RTRIM(v_claim_party_city)))\n\tIFF(v_claim_party_city IS NULL \n\t\tOR LENGTH(v_claim_party_city)>0 AND TRIM(v_claim_party_city)='' \n\t\tOR LENGTH(v_claim_party_city\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(v_claim_party_city\n\t\t\t)\n\t\t)\n\t) AS claim_party_city_out,\n\t'N/A' AS claim_party_county,\n\t-- *INF*: IIF(INSTR(LTRIM(RTRIM(adnm_city_state)),' ',-1,1) = 0 , 'N/A', SUBSTR(LTRIM(RTRIM(adnm_city_state)),(INSTR(LTRIM(RTRIM(adnm_city_state)),' ',-1,1)+1)))\r\n\t-- \r\n\t-- \r\n\t-- --SUBSTR(LTRIM(RTRIM(adnm_city_state)),(INSTR(LTRIM(RTRIM(adnm_city_state)),' ',-1,1)+1))\n\tIFF(REGEXP_INSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t)\n\t\t\t), ' ', - 1, 1\n\t\t) = 0,\n\t\t'N/A',\n\t\tSUBSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t)\n\t\t\t), ( REGEXP_INSTR(LTRIM(RTRIM(adnm_city_state\n\t\t\t\t\t\t)\n\t\t\t\t\t), ' ', - 1, 1\n\t\t\t\t) + 1 \n\t\t\t)\n\t\t)\n\t) AS v_claim_party_state,\n\t-- *INF*: IIF(ISNULL(v_claim_party_state) or IS_SPACES(v_claim_party_state) or LENGTH(v_claim_party_state) = 0 ,'N/A',LTRIM(RTRIM(v_claim_party_state)))\n\tIFF(v_claim_party_state IS NULL \n\t\tOR LENGTH(v_claim_party_state)>0 AND TRIM(v_claim_party_state)='' \n\t\tOR LENGTH(v_claim_party_state\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(v_claim_party_state\n\t\t\t)\n\t\t)\n\t) AS claim_party_state_out,\n\tadnm_zip_code,\n\t-- *INF*: IIF(ISNULL(adnm_zip_code) or IS_SPACES(adnm_zip_code) or LENGTH(adnm_zip_code) = 0 ,'N/A',LTRIM(RTRIM(adnm_zip_code)))\n\tIFF(adnm_zip_code IS NULL \n\t\tOR LENGTH(adnm_zip_code)>0 AND TRIM(adnm_zip_code)='' \n\t\tOR LENGTH(adnm_zip_code\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(adnm_zip_code\n\t\t\t)\n\t\t)\n\t) AS adnm_zip_code_out,\n\t'N/A' AS addr_type,\n\tadnm_taxid_ssn,\n\t-- *INF*: IIF(ISNULL(adnm_taxid_ssn) or IS_SPACES(adnm_taxid_ssn) or LENGTH(adnm_taxid_ssn) = 0 ,'N/A',LTRIM(RTRIM(adnm_taxid_ssn)))\n\tIFF(adnm_taxid_ssn IS NULL \n\t\tOR LENGTH(adnm_taxid_ssn)>0 AND TRIM(adnm_taxid_ssn)='' \n\t\tOR LENGTH(adnm_taxid_ssn\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(adnm_taxid_ssn\n\t\t\t)\n\t\t)\n\t) AS adnm_taxid_ssn_out,\n\t'N/A' AS tax_fed_id,\n\t-- *INF*: TO_DATE('12/31/2100','MM/DD/YYYY')\n\tTO_DATE('12/31/2100', 'MM/DD/YYYY'\n\t) AS claim_party_birthdate,\n\t'N/A' AS claim_party_gndr\n\tFROM SQ_PMS_ADJUSTER_MASTER_STAGE\n),\nLKP_Claim_Party AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_ak_id,\n\tclaim_party_key,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_addr,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tadnm_commnt1\n\tFROM (\n\t\tSELECT \r\n\t\tA.claim_party_id as claim_party_id, \r\n\t\tA.claim_party_ak_id as claim_party_ak_id, \r\n\t\tA.claim_party_full_name as claim_party_full_name, \r\n\t\tA.claim_party_first_name as claim_party_first_name, \r\n\t\tA.claim_party_last_name as claim_party_last_name, \r\n\t\tA.claim_party_mid_name as claim_party_mid_name, \r\n\t\tA.claim_party_name_prfx as claim_party_name_prfx, \r\n\t\tA.claim_party_name_sfx as claim_party_name_sfx, \r\n\t\tA.claim_party_addr as claim_party_addr, \r\n\t\tA.claim_party_city as claim_party_city, \r\n\t\tA.claim_party_county as claim_party_county, \r\n\t\tA.claim_party_state as claim_party_state, \r\n\t\tA.claim_party_zip as claim_party_zip, \r\n\t\tA.addr_type as addr_type, \r\n\t\tA.tax_ssn_id as tax_ssn_id, \r\n\t\tA.tax_fed_id as tax_fed_id, \r\n\t\tA.claim_party_birthdate as claim_party_birthdate, \r\n\t\tA.claim_party_gndr as claim_party_gndr, \r\n\t\tA.claim_party_key as claim_party_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party A\r\n\t\tWHERE A.source_sys_id ='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and A.crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_Claim_Party.claim_party_id AS Old_claim_party_id,\n\tLKP_Claim_Party.claim_party_ak_id AS Old_claim_party_ak_id,\n\tLKP_Claim_Party.claim_party_key AS Old_claim_party_key,\n\tLKP_Claim_Party.claim_party_full_name AS Old_claim_party_full_name,\n\tLKP_Claim_Party.claim_party_first_name AS Old_claim_party_first_name,\n\tLKP_Claim_Party.claim_party_last_name AS Old_claim_party_last_name,\n\tLKP_Claim_Party.claim_party_mid_name AS Old_claim_party_mid_name,\n\tLKP_Claim_Party.claim_party_name_prfx AS Old_claim_party_name_prfx,\n\tLKP_Claim_Party.claim_party_name_sfx AS Old_claim_party_name_sfx,\n\tLKP_Claim_Party.claim_party_addr AS Old_claim_party_addr,\n\tLKP_Claim_Party.claim_party_city AS Old_claim_party_city,\n\tLKP_Claim_Party.claim_party_county AS Old_claim_party_county,\n\tLKP_Claim_Party.claim_party_state AS Old_claim_party_state,\n\tLKP_Claim_Party.claim_party_zip AS Old_claim_party_zip,\n\tLKP_Claim_Party.addr_type AS Old_addr_type,\n\tLKP_Claim_Party.tax_ssn_id AS Old_tax_ssn_id,\n\tLKP_Claim_Party.tax_fed_id AS Old_tax_fed_id,\n\tLKP_Claim_Party.claim_party_birthdate AS Old_claim_party_birthdate,\n\tLKP_Claim_Party.claim_party_gndr AS Old_claim_party_gndr,\n\tEXP_Values.adnm_commnt1 AS adnm_commnt,\n\tEXP_Values.Claim_Party_Full_Name AS adnm_name,\n\tEXP_Values.claim_party_first_name,\n\tEXP_Values.claim_party_last_name,\n\tEXP_Values.claim_party_mid_name,\n\tEXP_Values.claim_party_name_prfx,\n\tEXP_Values.claim_party_name_sfx,\n\tEXP_Values.Claim_Party_address AS adnm_address,\n\tEXP_Values.claim_party_city_out,\n\tEXP_Values.claim_party_county,\n\tEXP_Values.claim_party_state_out,\n\tEXP_Values.adnm_zip_code_out AS adnm_zip_code,\n\tEXP_Values.addr_type,\n\tEXP_Values.adnm_taxid_ssn_out AS adnm_taxid_ssn,\n\tEXP_Values.tax_fed_id,\n\tEXP_Values.claim_party_birthdate,\n\tEXP_Values.claim_party_gndr,\n\t-- *INF*: iif(isnull(Old_claim_party_id),'NEW',\r\n\t-- \tiif (\r\n\t-- \t(ltrim(rtrim(adnm_name)) <> ltrim(rtrim(Old_claim_party_full_name))) or\r\n\t-- \t(ltrim(rtrim(adnm_address)) <> ltrim(rtrim(Old_claim_party_addr))) or\r\n\t-- \t(ltrim(rtrim(claim_party_city_out)) <> ltrim(rtrim(Old_claim_party_city))) or\r\n\t-- \t(ltrim(rtrim(claim_party_state_out)) <> ltrim(rtrim(Old_claim_party_state))) or\r\n\t-- \t(ltrim(rtrim(adnm_zip_code)) <> ltrim(rtrim(Old_claim_party_zip))) or\r\n\t-- \t(ltrim(rtrim(adnm_taxid_ssn)) <> ltrim(rtrim(Old_tax_ssn_id))) ,\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(Old_claim_party_id IS NULL,\n\t\t'NEW',\n\t\tIFF(( ltrim(rtrim(adnm_name\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_claim_party_full_name\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t) \n\t\t\tOR ( ltrim(rtrim(adnm_address\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_claim_party_addr\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t) \n\t\t\tOR ( ltrim(rtrim(claim_party_city_out\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_claim_party_city\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t) \n\t\t\tOR ( ltrim(rtrim(claim_party_state_out\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_claim_party_state\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t) \n\t\t\tOR ( ltrim(rtrim(adnm_zip_code\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_claim_party_zip\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t) \n\t\t\tOR ( ltrim(rtrim(adnm_taxid_ssn\n\t\t\t\t\t)\n\t\t\t\t) <> ltrim(rtrim(Old_tax_ssn_id\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t),\n\t\t\t'UPDATE',\n\t\t\t'NOCHANGE'\n\t\t)\n\t) AS V_changed_flag,\n\t'0' AS logical_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: IIF(V_changed_flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(V_changed_flag = 'NEW',\n\t\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t),\n\t\tSYSDATE\n\t) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t) AS eff_to_date,\n\tV_changed_flag AS Changed_flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t'N/A' AS Out_Default_String,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t) AS claim_party_ref_eff_from_date\n\tFROM EXP_Values\n\tLEFT JOIN LKP_Claim_Party\n\tON LKP_Claim_Party.claim_party_key = EXP_Values.adnm_commnt1\n),\nFIL_Insert AS (\n\tSELECT\n\tOld_claim_party_ak_id, \n\tadnm_commnt AS claim_party_key, \n\tadnm_name AS claim_party_full_name, \n\tclaim_party_first_name, \n\tclaim_party_last_name, \n\tclaim_party_mid_name, \n\tclaim_party_name_prfx, \n\tclaim_party_name_sfx, \n\tadnm_address AS claim_party_addr, \n\tclaim_party_city_out AS claim_party_city, \n\tclaim_party_county, \n\tclaim_party_state_out AS claim_party_state, \n\tadnm_zip_code AS claim_party_zip, \n\taddr_type, \n\tadnm_taxid_ssn AS tax_ssn_id, \n\ttax_fed_id, \n\tclaim_party_birthdate, \n\tclaim_party_gndr, \n\tlogical_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tChanged_flag, \n\tOut_Default_String, \n\tclaim_party_ref_eff_from_date\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_flag='NEW'  OR Changed_flag='UPDATE'\n),\nSEQ_claim_party AS (\n\tCREATE SEQUENCE SEQ_claim_party\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determin_AK AS (\n\tSELECT\n\tOld_claim_party_ak_id,\n\t-- *INF*: IIF(Changed_flag='NEW', NEXTVAL,Old_claim_party_ak_id)\n\tIFF(Changed_flag = 'NEW',\n\t\tNEXTVAL,\n\t\tOld_claim_party_ak_id\n\t) AS claim_party_ak_id,\n\tclaim_party_key,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_addr,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tlogical_flag,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tChanged_flag,\n\tOut_Default_String,\n\tclaim_party_ref_eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2999','MM/DD/YYYY')\n\tTO_DATE('12/31/2999', 'MM/DD/YYYY'\n\t) AS out_default_high_date,\n\tSEQ_claim_party.NEXTVAL\n\tFROM FIL_Insert\n),\nclaim_party AS (\n\tINSERT INTO claim_party\n\t(claim_party_ak_id, claim_party_key, claim_party_full_name, claim_party_first_name, claim_party_last_name, claim_party_mid_name, claim_party_name_prfx, claim_party_name_sfx, claim_party_addr, claim_party_city, claim_party_county, claim_party_state, claim_party_zip, addr_type, tax_ssn_id, tax_fed_id, claim_party_birthdate, claim_party_gndr, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, ph_num, ph_extension, ph_type, lgl_ent_code, claim_party_ref_eff_from_date, claim_party_death_date)\n\tSELECT \n\tCLAIM_PARTY_AK_ID, \n\tCLAIM_PARTY_KEY, \n\tCLAIM_PARTY_FULL_NAME, \n\tCLAIM_PARTY_FIRST_NAME, \n\tCLAIM_PARTY_LAST_NAME, \n\tCLAIM_PARTY_MID_NAME, \n\tCLAIM_PARTY_NAME_PRFX, \n\tCLAIM_PARTY_NAME_SFX, \n\tCLAIM_PARTY_ADDR, \n\tCLAIM_PARTY_CITY, \n\tCLAIM_PARTY_COUNTY, \n\tCLAIM_PARTY_STATE, \n\tCLAIM_PARTY_ZIP, \n\tADDR_TYPE, \n\tTAX_SSN_ID, \n\tTAX_FED_ID, \n\tCLAIM_PARTY_BIRTHDATE, \n\tCLAIM_PARTY_GNDR, \n\tLOGICAL_FLAG, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tOut_Default_String AS PH_NUM, \n\tOut_Default_String AS PH_EXTENSION, \n\tOut_Default_String AS PH_TYPE, \n\tOut_Default_String AS LGL_ENT_CODE, \n\tCLAIM_PARTY_REF_EFF_FROM_DATE, \n\tout_default_high_date AS CLAIM_PARTY_DEATH_DATE\n\tFROM EXP_Determin_AK\n),\nSQ_claim_party AS (\n\tSELECT \r\n\ta.claim_party_id, \r\n\ta.claim_party_key, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\tWHERE a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tand EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_party_key = b.claim_party_key\r\n\t\t\tGROUP BY claim_party_key\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_party_key, eff_from_date  DESC--\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\t\tclaim_party_key = v_PREV_ROW_party_key, DATEADD(SECOND,- 1,v_PREV_ROW_eff_from_date),\n\t\torig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_party_key AS v_PREV_ROW_party_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party AS (\n\tSELECT\n\tclaim_party_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_Update AS (\n\tMERGE INTO claim_party AS T\n\tUSING UPD_Claim_Party AS S\n\tON T.claim_party_id = S.claim_party_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604342"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}