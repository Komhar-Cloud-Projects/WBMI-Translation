{
    "name": "s_m_CLM_DW_LOAD_SupMedicalDiagnosisCode",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_SupMedicalDiagnosisCode",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_MedicalDiagnosisCodeStage AS (\n\tSELECT\n\t\tMedicalDiagnosisCodeStageId,\n\t\tcode,\n\t\tshort_descript,\n\t\tlong_descript,\n\t\tmed_class_code_type_id,\n\t\tExtractDate,\n\t\tSourceSystemId\n\tFROM MedicalDiagnosisCodeStage\n),\nEXP_Src_Values AS (\n\tSELECT\n\tcode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(code),'N/A',\r\n\t-- IS_SPACES(code),'N/A',\r\n\t-- LENGTH(code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(code)))\n\tDECODE(\n\t    TRUE,\n\t    code IS NULL, 'N/A',\n\t    LENGTH(code)>0 AND TRIM(code)='', 'N/A',\n\t    LENGTH(code) = 0, 'N/A',\n\t    LTRIM(RTRIM(code))\n\t) AS o_code,\n\tshort_descript,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(short_descript),'N/A',\r\n\t-- IS_SPACES(short_descript),'N/A',\r\n\t-- LENGTH(short_descript)=0,'N/A',\r\n\t-- LTRIM(RTRIM(short_descript)))\n\tDECODE(\n\t    TRUE,\n\t    short_descript IS NULL, 'N/A',\n\t    LENGTH(short_descript)>0 AND TRIM(short_descript)='', 'N/A',\n\t    LENGTH(short_descript) = 0, 'N/A',\n\t    LTRIM(RTRIM(short_descript))\n\t) AS o_short_descript,\n\tlong_descript,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(long_descript),'N/A',\r\n\t-- IS_SPACES(long_descript),'N/A',\r\n\t-- LENGTH(long_descript)=0,'N/A',\r\n\t-- LTRIM(RTRIM(long_descript)))\n\tDECODE(\n\t    TRUE,\n\t    long_descript IS NULL, 'N/A',\n\t    LENGTH(long_descript)>0 AND TRIM(long_descript)='', 'N/A',\n\t    LENGTH(long_descript) = 0, 'N/A',\n\t    LTRIM(RTRIM(long_descript))\n\t) AS o_long_descript,\n\tmed_class_code_type_id\n\tFROM SQ_MedicalDiagnosisCodeStage\n),\nLKP_SupMedicalClassCodeTypeStage AS (\n\tSELECT\n\tcode_type,\n\tmed_class_code_type_id\n\tFROM (\n\t\tSELECT \r\n\t\tS.code_type as code_type, \r\n\t\tS.med_class_code_type_id as med_class_code_type_id\r\n\t\t FROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.SupMedicalClassCodeTypeStage S\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_class_code_type_id ORDER BY code_type) = 1\n),\nLKP_SupMedicalClassCodeType AS (\n\tSELECT\n\tSupMedicalClassCodeTypeId,\n\tMedicalClassCodeType\n\tFROM (\n\t\tSELECT SupMedicalClassCodeType.SupMedicalClassCodeTypeId as SupMedicalClassCodeTypeId, SupMedicalClassCodeType.MedicalClassCodeType as MedicalClassCodeType\r\n\t\t\r\n\t\t FROM SupMedicalClassCodeType\r\n\t\t\r\n\t\twhere\r\n\t\tCurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY MedicalClassCodeType ORDER BY SupMedicalClassCodeTypeId) = 1\n),\nLKP_MedicalDiagnosisCode AS (\n\tSELECT\n\tSupMedicalDiagnosisCodeId,\n\tSupMedicalClassCodeTypeId,\n\tMedicalDiagnosisCode,\n\tShortDescription,\n\tLongDescription\n\tFROM (\n\t\tSELECT \r\n\t\tS.SupMedicalDiagnosisCodeId as SupMedicalDiagnosisCodeId, \r\n\t\tS.ShortDescription as ShortDescription, \r\n\t\tS.LongDescription as LongDescription, S.MedicalDiagnosisCode as MedicalDiagnosisCode, S.SupMedicalClassCodeTypeId as SupMedicalClassCodeTypeId\r\n\t\t\r\n\t\t FROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalDiagnosisCode S\r\n\t\t\r\n\t\twhere\r\n\t\tS.CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY MedicalDiagnosisCode,SupMedicalClassCodeTypeId ORDER BY SupMedicalDiagnosisCodeId) = 1\n),\nEXP_TargetLkp_Detect_Changes AS (\n\tSELECT\n\tLKP_MedicalDiagnosisCode.SupMedicalDiagnosisCodeId AS Lkp_SupMedicalCauseCodeId,\n\tLKP_MedicalDiagnosisCode.SupMedicalClassCodeTypeId AS Lkp_SupMedicalClassCodeTypeId,\n\tLKP_MedicalDiagnosisCode.MedicalDiagnosisCode AS Lkp_MedicalDiagnosisCode,\n\tLKP_MedicalDiagnosisCode.ShortDescription AS Lkp_ShortDescription,\n\tLKP_MedicalDiagnosisCode.LongDescription AS Lkp_LongDescription,\n\t-- *INF*: iif(isnull(Lkp_SupMedicalCauseCodeId),'NEW',\r\n\t-- \r\n\t--   iif(\r\n\t--    \r\n\t--        ltrim(rtrim(Lkp_SupMedicalClassCodeTypeId)) != ltrim(rtrim(SupMedicalClassCodeTypeId))\r\n\t-- \r\n\t-- or\r\n\t-- \r\n\t--        ltrim(rtrim(Lkp_MedicalDiagnosisCode)) != ltrim(rtrim(MedicalDiagnosisCode))\r\n\t-- \r\n\t-- or\r\n\t-- \r\n\t--        ltrim(rtrim(Lkp_ShortDescription)) != ltrim(rtrim(ShortDescription))\r\n\t-- \r\n\t-- or\r\n\t-- \r\n\t--        ltrim(rtrim(Lkp_LongDescription)) != ltrim(rtrim(LongDescription)),\r\n\t-- \r\n\t--    'UPDATE', 'NOCHANGE' )\r\n\t-- \r\n\t--    )\n\tIFF(\n\t    Lkp_SupMedicalCauseCodeId IS NULL, 'NEW',\n\t    IFF(\n\t        ltrim(rtrim(Lkp_SupMedicalClassCodeTypeId)) != ltrim(rtrim(SupMedicalClassCodeTypeId))\n\t        or ltrim(rtrim(Lkp_MedicalDiagnosisCode)) != ltrim(rtrim(MedicalDiagnosisCode))\n\t        or ltrim(rtrim(Lkp_ShortDescription)) != ltrim(rtrim(ShortDescription))\n\t        or ltrim(rtrim(Lkp_LongDescription)) != ltrim(rtrim(LongDescription)),\n\t        'UPDATE',\n\t        'NOCHANGE'\n\t    )\n\t) AS v_ChangedFlag,\n\tv_ChangedFlag AS ChangedFlag,\n\t-- *INF*: iif(v_ChangedFlag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(\n\t    v_ChangedFlag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tEXP_Src_Values.o_code AS MedicalDiagnosisCode,\n\tEXP_Src_Values.o_short_descript AS ShortDescription,\n\tEXP_Src_Values.o_long_descript AS LongDescription,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tLKP_SupMedicalClassCodeType.SupMedicalClassCodeTypeId\n\tFROM EXP_Src_Values\n\tLEFT JOIN LKP_MedicalDiagnosisCode\n\tON LKP_MedicalDiagnosisCode.MedicalDiagnosisCode = EXP_Src_Values.o_code AND LKP_MedicalDiagnosisCode.SupMedicalClassCodeTypeId = LKP_SupMedicalClassCodeType.SupMedicalClassCodeTypeId\n\tLEFT JOIN LKP_SupMedicalClassCodeType\n\tON LKP_SupMedicalClassCodeType.MedicalClassCodeType = LKP_SupMedicalClassCodeTypeStage.code_type\n),\nFIL_Lkp_Records AS (\n\tSELECT\n\tChangedFlag, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemId, \n\tCreatedDate, \n\tModifiedDate, \n\tMedicalDiagnosisCode, \n\tShortDescription, \n\tLongDescription, \n\tCurrentSnapshotFlag, \n\tAuditId, \n\tSupMedicalClassCodeTypeId\n\tFROM EXP_TargetLkp_Detect_Changes\n\tWHERE ChangedFlag = 'NEW' or ChangedFlag =  'UPDATE'\n),\nSupMedicalDiagnosisCode_Insert AS (\n\tINSERT INTO SupMedicalDiagnosisCode\n\t(SupMedicalClassCodeTypeId, CurrentSnapshotFlag, AuditId, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, MedicalDiagnosisCode, ShortDescription, LongDescription)\n\tSELECT \n\tSUPMEDICALCLASSCODETYPEID, \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tMEDICALDIAGNOSISCODE, \n\tSHORTDESCRIPTION, \n\tLONGDESCRIPTION\n\tFROM FIL_Lkp_Records\n),\nSQ_SupMedicalDiagnosisCode AS (\n\tSELECT\r\n\tA.SupMedicalDiagnosisCodeId,\r\n\tA.EffectiveDate,\r\n\tA.ExpirationDate,\r\n\tA.MedicalDiagnosisCode \r\n\t\r\n\tFROM   \r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalDiagnosisCode A\r\n\t\r\n\twhere Exists \r\n\t    ( \r\n\tSELECT 1 \r\n\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalDiagnosisCode B \r\n\t\r\n\twhere \r\n\tB.CurrentSnapshotFlag = 1\r\n\tAND\r\n\tA.MedicalDiagnosisCode = B.MedicalDiagnosisCode\r\n\t\r\n\tgroup by \r\n\tB.MedicalDiagnosisCode\r\n\thaving \r\n\tcount(*) > 1\r\n\t      )\r\n\t\r\n\tAND\r\n\tA.CurrentSnapshotFlag = 1\r\n\t\r\n\torder by \r\n\tA.MedicalDiagnosisCode, \r\n\tA.EffectiveDate Desc\n),\nEXP_Lag_ExpirationDate AS (\n\tSELECT\n\tSupMedicalDiagnosisCodeId,\n\tEffectiveDate,\n\tExpirationDate AS orig_ExpirationDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tMedicalDiagnosisCode= v_PREV_ROW_MedicalDiagnosisCode, ADD_TO_DATE(v_PREV_ROW_EffectiveDate,'SS',-1),\r\n\t-- \torig_ExpirationDate)\n\tDECODE(\n\t    TRUE,\n\t    MedicalDiagnosisCode = v_PREV_ROW_MedicalDiagnosisCode, DATEADD(SECOND,- 1,v_PREV_ROW_EffectiveDate),\n\t    orig_ExpirationDate\n\t) AS v_ExpirationDate,\n\tv_ExpirationDate AS ExpirationDate,\n\t0 AS CurrentSnapshotFlag,\n\tMedicalDiagnosisCode,\n\tEffectiveDate AS v_PREV_ROW_EffectiveDate,\n\tMedicalDiagnosisCode AS v_PREV_ROW_MedicalDiagnosisCode,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_SupMedicalDiagnosisCode\n),\nFIL_FirstRowAkId AS (\n\tSELECT\n\tSupMedicalDiagnosisCodeId, \n\torig_ExpirationDate, \n\tExpirationDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM EXP_Lag_ExpirationDate\n\tWHERE orig_ExpirationDate != ExpirationDate\n),\nUPD_SupMedicalCauseCode AS (\n\tSELECT\n\tSupMedicalDiagnosisCodeId, \n\tExpirationDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM FIL_FirstRowAkId\n),\nSupMedicalDiagnosisCode_Update AS (\n\tMERGE INTO SupMedicalDiagnosisCode AS T\n\tUSING UPD_SupMedicalCauseCode AS S\n\tON T.SupMedicalDiagnosisCodeId = S.SupMedicalDiagnosisCodeId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "ClaimsDataWarehouse/"
        },
        "annotations": []
    }
}