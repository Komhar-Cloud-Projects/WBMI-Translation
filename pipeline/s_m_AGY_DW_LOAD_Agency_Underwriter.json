{
    "name": "s_m_AGY_DW_LOAD_Agency_Underwriter",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_LOAD_Agency_Underwriter",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Underwriter AS (\n\tSELECT\n\tuw_ak_id,\n\tuw_code\n\tFROM (\n\t\tSELECT u.uw_ak_id as uw_ak_id, \r\n\t\tu.uw_code as uw_code FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.underwriter u\r\n\t\twhere crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY uw_code ORDER BY uw_ak_id) = 1\n),\nSQ_agency_underwriter_stage AS (\n\tSELECT\n\t\tagency_uw_stage_id,\n\t\tstate_code,\n\t\tagency_num,\n\t\tinsurance_line,\n\t\tuw_assistant_flag,\n\t\tuw_code,\n\t\tagency_code,\n\t\tEXTRACT_DATE,\n\t\tAS_OF_DATE,\n\t\tRECORD_COUNT,\n\t\tSOURCE_SYSTEM_ID\n\tFROM agency_underwriter_stage\n),\nEXP_Lkp_Agency AS (\n\tSELECT\n\tstate_code,\n\tagency_num,\n\tstate_code || agency_num AS agency_key\n\tFROM SQ_agency_underwriter_stage\n),\nLKP_Agency AS (\n\tSELECT\n\tagency_ak_id,\n\tagency_state_code,\n\tagency_key\n\tFROM (\n\t\tSELECT a.agency_ak_id as agency_ak_id, a.agency_state_code as agency_state_code, a.agency_key as agency_key FROM  \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.agency a\r\n\t\twhere crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY agency_key ORDER BY agency_ak_id) = 1\n),\nEXP_LkpValues AS (\n\tSELECT\n\tSQ_agency_underwriter_stage.state_code AS IN_state_code,\n\tSQ_agency_underwriter_stage.agency_num AS IN_agency_num,\n\tSQ_agency_underwriter_stage.insurance_line AS IN_insurance_line,\n\tSQ_agency_underwriter_stage.uw_assistant_flag AS IN_uw_assistant_flag,\n\tSQ_agency_underwriter_stage.uw_code AS IN_in_uw_code,\n\t-- *INF*: iif(isnull(IN_uw_assistant_flag),'X',iif(IS_SPACES(IN_uw_assistant_flag),'X',IN_uw_assistant_flag))\n\tIFF(IN_uw_assistant_flag IS NULL, 'X', IFF(IS_SPACES(IN_uw_assistant_flag), 'X', IN_uw_assistant_flag)) AS uw_assistant_flag,\n\t-- *INF*: iif(isnull(IN_insurance_line),'N/A',iif(IS_SPACES(IN_insurance_line),'N/A',\r\n\t-- rpad(IN_insurance_line,3)))\n\tIFF(IN_insurance_line IS NULL, 'N/A', IFF(IS_SPACES(IN_insurance_line), 'N/A', rpad(IN_insurance_line, 3))) AS insurance_line,\n\t-- *INF*: iif(isnull(IN_state_code),'N/A',iif(IS_SPACES(IN_state_code),'N/A',IN_state_code))\n\tIFF(IN_state_code IS NULL, 'N/A', IFF(IS_SPACES(IN_state_code), 'N/A', IN_state_code)) AS state_code,\n\t-- *INF*: iif(isnull(IN_agency_num),'N/A',iif(IS_SPACES(IN_agency_num),'N/A',IN_agency_num))\n\tIFF(IN_agency_num IS NULL, 'N/A', IFF(IS_SPACES(IN_agency_num), 'N/A', IN_agency_num)) AS agency_num,\n\t-- *INF*: iif(isnull(IN_in_uw_code),'N/A',iif(IS_SPACES(IN_in_uw_code),'N/A',IN_in_uw_code))\n\tIFF(IN_in_uw_code IS NULL, 'N/A', IFF(IS_SPACES(IN_in_uw_code), 'N/A', IN_in_uw_code)) AS in_uw_code,\n\tIN_state_code || IN_agency_num AS v_agency_key,\n\t-- *INF*: iif(isnull(state_code || agency_num),'N/A',\r\n\t-- iif(is_spaces(state_code || agency_num),'N/A',state_code || agency_num))\n\tIFF(state_code || agency_num IS NULL, 'N/A', IFF(is_spaces(state_code || agency_num), 'N/A', state_code || agency_num)) AS out_agency_key,\n\tLKP_Agency.agency_ak_id AS out_agency_ak_id,\n\t-- *INF*: :LKP.LKP_UNDERWRITER(IN_in_uw_code)\n\tLKP_UNDERWRITER_IN_in_uw_code.uw_ak_id AS out_uw_ak_id,\n\tSQ_agency_underwriter_stage.SOURCE_SYSTEM_ID,\n\t-- *INF*: rpad(IN_state_code,3)\n\trpad(IN_state_code, 3) AS out_state_code,\n\tLKP_Agency.agency_state_code\n\tFROM SQ_agency_underwriter_stage\n\tLEFT JOIN LKP_Agency\n\tON LKP_Agency.agency_key = EXP_Lkp_Agency.agency_key\n\tLEFT JOIN LKP_UNDERWRITER LKP_UNDERWRITER_IN_in_uw_code\n\tON LKP_UNDERWRITER_IN_in_uw_code.uw_code = IN_in_uw_code\n\n),\nLKP_Agency_Underwriter AS (\n\tSELECT\n\tagency_uw_id,\n\tagency_uw_ak_id,\n\tuw_ak_id,\n\tagency_key,\n\tinsurance_line,\n\tuw_assistant_flag,\n\tagency_ak_id\n\tFROM (\n\t\tSELECT a.agency_uw_id as agency_uw_id, \r\n\t\ta.agency_uw_ak_id as agency_uw_ak_id,\r\n\t\ta.agency_ak_id as agency_ak_id, \r\n\t\ta.uw_ak_id as uw_ak_id ,\r\n\t\ta.insurance_line as insurance_line, \r\n\t\ta.uw_assistant_flag as uw_assistant_flag, \r\n\t\ta.agency_key as agency_key\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency_underwriter a\r\n\t\tWHERE a.agency_uw_id IN(SELECT MAX(b.agency_uw_id)\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency_underwriter b\r\n\t\tWHERE crrnt_snpsht_flag=1\r\n\t\tGROUP BY  \r\n\t\t\tb.agency_ak_id,\r\n\t\t      b.insurance_line,\r\n\t\t\t  b.uw_assistant_flag )\r\n\t\t\tORDER BY \r\n\t\t     a.agency_ak_id,\r\n\t\t\ta.insurance_line,\r\n\t\t\ta.uw_assistant_flag\r\n\t\t\t\r\n\t\t\t\r\n\t\t--IN Subquery exists so that we only pick the MAX value of the PK for each AK Group\r\n\t\t--WHERE clause is always eff_to_date = '12/31/2100'\r\n\t\t--GROUP BY clause is always the AK\r\n\t\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer generate an ORDER BY statemen\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY insurance_line,uw_assistant_flag,agency_ak_id ORDER BY agency_uw_id) = 1\n),\nSEQ_Agency_Underwriter AS (\n\tCREATE SEQUENCE SEQ_Agency_Underwriter\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_DetectChanges AS (\n\tSELECT\n\tEXP_LkpValues.out_agency_key,\n\tLKP_Agency_Underwriter.agency_uw_id AS agency_uw_id_old,\n\tLKP_Agency_Underwriter.agency_uw_ak_id,\n\tLKP_Agency_Underwriter.agency_key AS agency_key_old,\n\tLKP_Agency_Underwriter.uw_ak_id AS uw_ak_id_old,\n\t-- *INF*: iif(isnull(agency_uw_id_old),'NEW',\r\n\t-- \tiif(\t(uw_ak_id_old<>out_uw_ak_id),\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(agency_uw_id_old IS NULL, 'NEW', IFF(( uw_ak_id_old <> out_uw_ak_id ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tto_date('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tv_changed_flag AS changed_flag,\n\tsysdate AS created_date,\n\tsysdate AS modified_date,\n\tEXP_LkpValues.SOURCE_SYSTEM_ID,\n\tEXP_LkpValues.out_state_code,\n\tEXP_LkpValues.agency_state_code,\n\tSEQ_Agency_Underwriter.NEXTVAL,\n\t-- *INF*: IIF(v_changed_flag='NEW',\r\n\t-- NEXTVAL,\r\n\t-- agency_uw_ak_id)\n\tIFF(v_changed_flag = 'NEW', NEXTVAL, agency_uw_ak_id) AS out_Agency_uw_ak_id,\n\tEXP_LkpValues.out_uw_ak_id\n\tFROM EXP_LkpValues\n\tLEFT JOIN LKP_Agency_Underwriter\n\tON LKP_Agency_Underwriter.insurance_line = EXP_LkpValues.insurance_line AND LKP_Agency_Underwriter.uw_assistant_flag = EXP_LkpValues.uw_assistant_flag AND LKP_Agency_Underwriter.agency_ak_id = EXP_LkpValues.out_agency_ak_id\n),\nFLT_Insert AS (\n\tSELECT\n\tEXP_DetectChanges.out_Agency_uw_ak_id, \n\tEXP_LkpValues.insurance_line, \n\tEXP_LkpValues.uw_assistant_flag, \n\tEXP_DetectChanges.out_agency_key, \n\tEXP_LkpValues.out_agency_ak_id, \n\tEXP_DetectChanges.out_uw_ak_id, \n\tEXP_DetectChanges.crrnt_snpsht_flag, \n\tEXP_DetectChanges.audit_id, \n\tEXP_DetectChanges.eff_from_date, \n\tEXP_DetectChanges.eff_to_date, \n\tEXP_DetectChanges.changed_flag, \n\tEXP_DetectChanges.created_date, \n\tEXP_DetectChanges.modified_date, \n\tEXP_DetectChanges.SOURCE_SYSTEM_ID, \n\tEXP_DetectChanges.out_state_code, \n\tEXP_DetectChanges.agency_state_code\n\tFROM EXP_DetectChanges\n\t -- Manually join with EXP_LkpValues\n\tWHERE (out_state_code= agency_state_code) and (changed_flag = 'NEW' or changed_flag = 'UPDATE')\n),\nagency_underwriter_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.agency_underwriter\n\t(agency_uw_ak_id, agency_ak_id, uw_ak_id, insurance_line, uw_assistant_flag, agency_key, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_system_id, created_date, modified_date)\n\tSELECT \n\tout_Agency_uw_ak_id AS AGENCY_UW_AK_ID, \n\tout_agency_ak_id AS AGENCY_AK_ID, \n\tout_uw_ak_id AS UW_AK_ID, \n\tINSURANCE_LINE, \n\tUW_ASSISTANT_FLAG, \n\tout_agency_key AS AGENCY_KEY, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYSTEM_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM FLT_Insert\n),\nSQ_agency_underwriter AS (\n\tSELECT a.agency_uw_id, \r\n\ta.agency_ak_id,\r\n\ta.insurance_line,\r\n\ta.uw_assistant_flag, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.Agency_Underwriter a\r\n\tWHERE EXISTS(SELECT 1\tfrom\t\t\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.Agency_Underwriter b\r\n\t\tWHERE eff_to_date = '12/31/2100 23:59:59'\r\n\t     and a.agency_ak_id = b.agency_ak_id\r\n\t\tand a.insurance_line = b.insurance_line\r\n\t\tAND a.uw_assistant_flag = b.uw_assistant_flag\r\n\t\tGROUP BY agency_ak_id,\r\n\t\t    \tinsurance_line,\r\n\t\t\t uw_assistant_flag\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY\r\n\t\tagency_ak_id,\r\n\t \tinsurance_line,\r\n\t\tuw_assistant_flag,\r\n\t\teff_from_date  DESC\r\n\t\r\n\t\r\n\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer generate an ORDER BY statemen\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tagency_uw_id,\n\tinsurance_line,\n\tuw_assistant_flag,\n\tagency_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE (TRUE, \r\n\t-- \tinsurance_line = v_Prev_Row_insurance_line and\r\n\t-- \tuw_assistant_flag = v_Prev_Row_uw_assistant_flag and\r\n\t-- \tagency_ak_id = v_Prev_Row_agency_ak_id,\r\n\t-- \t ADD_TO_DATE(v_Prev_Row_Eff_From_Date,'SS',-1),\r\n\t-- \torig_eff_to_date)\r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(TRUE,\n\t\tinsurance_line = v_Prev_Row_insurance_line AND uw_assistant_flag = v_Prev_Row_uw_assistant_flag AND agency_ak_id = v_Prev_Row_agency_ak_id, ADD_TO_DATE(v_Prev_Row_Eff_From_Date, 'SS', - 1),\n\t\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_Prev_Row_Eff_From_Date,\n\tagency_ak_id AS v_Prev_Row_agency_ak_id,\n\tinsurance_line AS v_Prev_Row_insurance_line,\n\tuw_assistant_flag AS v_Prev_Row_uw_assistant_flag,\n\t0 AS crrnt_snpsht_flag,\n\tsysdate AS modified_date\n\tFROM SQ_agency_underwriter\n),\nFLT_FirstRowInAKGroup1 AS (\n\tSELECT\n\tagency_uw_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_Agency_underwriter AS (\n\tSELECT\n\tagency_uw_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FLT_FirstRowInAKGroup1\n),\nagency_underwriter_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.agency_underwriter AS T\n\tUSING UPD_Agency_underwriter AS S\n\tON T.agency_uw_id = S.agency_uw_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246519"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905540"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604608"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:18:00"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 05:12:52"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Agency"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Agency"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "AGENCY"
            }
        },
        "folder": {
            "name": "Agency DataWarehouse/"
        },
        "annotations": []
    }
}