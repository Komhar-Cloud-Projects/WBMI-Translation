{
    "name": "m_POL_DW_LOAD_PremiumTransaction_BureauStatisticalCode",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PremiumTransaction_BureauStatisticalCode",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_StatisticalCoverage_StatisticalCoverageAKID AS (\n\tSELECT\n\tStatisticalCoverageAKID,\n\tStatisticalCoverageHashKey\n\tFROM (\n\t\tSELECT StatisticalCoverageAKID AS StatisticalCoverageAKID,\r\n\t\t       StatisticalCoverageHashKey AS StatisticalCoverageHashKey\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC\r\n\t\tINNER JOIN  @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL\r\n\t\tON LOC.PolicyAKID = POL.pol_ak_id\r\n\t\tINNER JOIN \t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV\r\n\t\tON LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t\tINNER JOIN \t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage STATCOV\r\n\t\tON POLCOV.PolicyCoverageAKID = STATCOV.PolicyCoverageAKID\r\n\t\tWHERE\tPOL.crrnt_snpsht_flag = 1 AND LOC.CurrentSnapshotFlag =1\r\n\t\t\t\tAND STATCOV.CurrentSnapshotFlag =1\r\n\t\t\t\tAND POLCOV.CurrentSnapshotFlag =1\r\n\t\t        \tAND POL.SOURCE_SYS_ID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t        \tAND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StatisticalCoverageHashKey ORDER BY StatisticalCoverageAKID DESC) = 1\n),\nLKP_Reinsurance_Coverage_CommercialLinesPolicies_Default AS (\n\tSELECT\n\treins_cov_ak_id,\n\tpol_ak_id,\n\treins_ins_line,\n\treins_co_num,\n\treins_section_code,\n\treins_prcnt_facultative_commssn,\n\treins_eff_date,\n\treins_exp_date\n\tFROM (\n\t\tSELECT reins_cov_ak_id    AS reins_cov_ak_id,\r\n\t\t       pol_ak_id          AS pol_ak_id,\r\n\t\t       reins_ins_line     AS reins_ins_line,\r\n\t\t       reins_co_num       AS reins_co_num,\r\n\t\t       reins_section_code AS reins_section_code,\r\n\t\t       reins_prcnt_facultative_commssn as reins_prcnt_facultative_commssn,\r\n\t\t       reins_eff_date         AS reins_eff_date,\r\n\t\t       reins_exp_date  AS reins_exp_date\r\n\t\tFROM   reinsurance_coverage \r\n\t\tWHERE  crrnt_snpsht_flag = 1 and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,reins_ins_line,reins_co_num,reins_section_code,reins_prcnt_facultative_commssn,reins_eff_date,reins_exp_date ORDER BY reins_cov_ak_id DESC) = 1\n),\nLKP_ReinsuranceCoverage__PersonalLinesPolicies_Default AS (\n\tSELECT\n\treins_cov_ak_id,\n\tpol_ak_id,\n\treins_section_code,\n\treins_co_num,\n\treins_prcnt_facultative_commssn,\n\treins_eff_date,\n\treins_exp_date\n\tFROM (\n\t\tSELECT \r\n\t\treins_cov_ak_id as reins_cov_ak_id, \r\n\t\tpol_ak_id as pol_ak_id, \r\n\t\treins_section_code as reins_section_code, \r\n\t\treins_co_num as reins_co_num, \r\n\t\treins_prcnt_facultative_commssn as reins_prcnt_facultative_commssn,\r\n\t\treins_eff_date as reins_eff_date, \r\n\t\treins_exp_date as reins_exp_date\r\n\t\tFROM reinsurance_coverage\r\n\t\tWHERE  crrnt_snpsht_flag = 1 and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,reins_section_code,reins_co_num,reins_prcnt_facultative_commssn,reins_eff_date,reins_exp_date ORDER BY reins_cov_ak_id DESC) = 1\n),\nLKP_Pif11Stage AS (\n\tSELECT\n\tDocumentText,\n\tPolicyKey\n\tFROM (\n\t\tselect PifSymbol+PifPolicyNumber+PifModule as PolicyKey,\r\n\t\tDocumentText as DocumentText \r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif11Stage\r\n\t\twhere DocumentName in ('140601','140603')\r\n\t\tand DocumentText is not null\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY DocumentText) = 1\n),\nLKP_SupDeductibleBasis AS (\n\tSELECT\n\tDeductibleBasis,\n\tMajorPerilCode,\n\tCoverageCode\n\tFROM (\n\t\tselect distinct\r\n\t\tMajorPerilCode as MajorPerilCode,\r\n\t\tright('000'+CoverageCode,3) as CoverageCode,\r\n\t\tDeductibleBasis as DeductibleBasis\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.SupDeductibleBasis\r\n\t\twhere LocationCode='9999' AND TypeBureauCode='AP'\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY MajorPerilCode,CoverageCode ORDER BY DeductibleBasis) = 1\n),\nLKP_SupDeductibleBasis_byState AS (\n\tSELECT\n\tDeductibleBasis,\n\ti_sar_state,\n\tMajorPerilCode,\n\tCoverageCode,\n\tMasterCompanyNumber\n\tFROM (\n\t\tselect distinct\r\n\t\tMajorPerilCode as MajorPerilCode,\r\n\t\tright('000'+CoverageCode,3) as CoverageCode,\r\n\t\tMasterCompanyNumber as MasterCompanyNumber,\r\n\t\tDeductibleBasis as DeductibleBasis\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.SupDeductibleBasis\r\n\t\twhere LocationCode='9999' AND TypeBureauCode='AP'\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY MajorPerilCode,CoverageCode,MasterCompanyNumber ORDER BY DeductibleBasis) = 1\n),\nLKP_SupConstructionCode AS (\n\tSELECT\n\tStandardConstructionCodeDescription,\n\tConstructionCode\n\tFROM (\n\t\tSELECT \n\t\t\tStandardConstructionCodeDescription,\n\t\t\tConstructionCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupConstructionCode\n\t\tWHERE CurrentSnapshotFlag=1 AND SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ConstructionCode ORDER BY StandardConstructionCodeDescription) = 1\n),\nLKP_Policy_strtgc_bus_div_code AS (\n\tSELECT\n\tstrtgc_bus_dvsn_code,\n\tpol_ak_id\n\tFROM (\n\t\tSELECT SBD.strtgc_bus_dvsn_code as strtgc_bus_dvsn_code, P.pol_ak_id as pol_ak_id \r\n\t\tFROM v2.policy P, dbo.strategic_business_division SBD\r\n\t\tWHERE P.strtgc_bus_dvsn_ak_id = SBD.strtgc_bus_dvsn_ak_id AND \r\n\t\tP.crrnt_snpsht_flag =1 AND SBD.crrnt_snpsht_flag =1 and P.source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and SBD.source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id ORDER BY strtgc_bus_dvsn_code DESC) = 1\n),\nLKP_SupClassificationWorkersCompensation AS (\n\tSELECT\n\tSupClassificationWorkersCompensationId,\n\tClassCode,\n\tRatingStateCode\n\tFROM (\n\t\tSELECT \n\t\t\tSupClassificationWorkersCompensationId,\n\t\t\tClassCode,\n\t\t\tRatingStateCode\n\t\tFROM SupClassificationWorkersCompensation\n\t\tWHERE (SubjectToExperienceModificationClassIndicator = 'Y' or ExperienceModificationClassIndicator = 'Y') and CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ClassCode,RatingStateCode ORDER BY SupClassificationWorkersCompensationId) = 1\n),\nLKP_RiskLocation_RiskLocationAKID AS (\n\tSELECT\n\tRiskLocationAKID,\n\tRiskLocationID,\n\tCurrentSnapshotFlag,\n\tPolicyAKID,\n\tLocationUnitNumber,\n\tRiskTerritory,\n\tStateProvinceCode,\n\tZipPostalCode,\n\tTaxLocation\n\tFROM (\n\t\tSELECT RiskLocationAKID   AS RiskLocationAKID,\r\n\t\t       PolicyAKID         AS PolicyAKID,\r\n\t\tLOC.RiskLocationID as RiskLocationID,\r\n\t\tLOC.CurrentSnapshotFlag AS CurrentSnapshotFlag,\r\n\t\t       LTRIM(RTRIM(LocationUnitNumber)) AS LocationUnitNumber,\r\n\t\t       LTRIM(RTRIM(RiskTerritory))      AS RiskTerritory,\r\n\t\t       LTRIM(RTRIM(StateProvinceCode))  AS StateProvinceCode,\r\n\t\t       LTRIM(RTRIM(ZipPostalCode))      AS ZipPostalCode,\r\n\t\t       LTRIM(RTRIM(TaxLocation))        AS TaxLocation\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC\r\n\t\tINNER JOIN  @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL\r\n\t\tON\tLOC.PolicyAKID = POL.pol_ak_id\r\n\t\tWHERE POL.crrnt_snpsht_flag = 1 AND LOC.CurrentSnapshotFlag =1\r\n\t\t       AND POL.SOURCE_SYS_ID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t       AND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,LocationUnitNumber,RiskTerritory,StateProvinceCode,ZipPostalCode,TaxLocation ORDER BY RiskLocationAKID DESC) = 1\n),\nLKP_PolicyCoverage_PolicyCoverageAKID AS (\n\tSELECT\n\tPolicyCoverageAKID,\n\tPolicyCoverageHashKey\n\tFROM (\n\t\tSELECT PolicyCoverageAKID    AS PolicyCoverageAKID,\r\n\t\t       \t      PolicyCoverageHashKey AS PolicyCoverageHashKey\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL\r\n\t\t         ON LOC.PolicyAKID = POL.pol_ak_id \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV\r\n\t\tON LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t\tWHERE  POL.crrnt_snpsht_flag = 1\r\n\t\t       AND LOC.CurrentSnapshotFlag = 1\r\n\t\t       AND POLCOV.CurrentSnapshotFlag = 1 \r\n\t\t       AND POL.SOURCE_SYS_ID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t       AND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageHashKey ORDER BY PolicyCoverageAKID DESC) = 1\n),\nLKP_ReinsuranceCoverage_PersonalLinesPolicies AS (\n\tSELECT\n\treins_cov_ak_id,\n\tpol_ak_id,\n\treins_risk_unit,\n\treins_section_code,\n\treins_co_num,\n\treins_prcnt_facultative_commssn,\n\treins_eff_date,\n\treins_exp_date\n\tFROM (\n\t\tSELECT reins_cov_ak_id as reins_cov_ak_id, pol_ak_id as pol_ak_id, reins_risk_unit as reins_risk_unit, reins_section_code as reins_section_code, reins_co_num as reins_co_num, \r\n\t\treins_prcnt_facultative_commssn as reins_prcnt_facultative_commssn, reins_eff_date as reins_eff_date, reins_exp_date as reins_exp_date\r\n\t\tFROM reinsurance_coverage\r\n\t\tWHERE  crrnt_snpsht_flag = 1 and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,reins_risk_unit,reins_section_code,reins_co_num,reins_prcnt_facultative_commssn,reins_eff_date,reins_exp_date ORDER BY reins_cov_ak_id DESC) = 1\n),\nLKP_ReinsuranceCoverage_CommercialLinesPolicies AS (\n\tSELECT\n\treins_cov_ak_id,\n\tpol_ak_id,\n\treins_ins_line,\n\treins_loc_unit_num,\n\treins_sub_loc_unit_num,\n\treins_section_code,\n\treins_co_num,\n\treins_prcnt_facultative_commssn,\n\treins_eff_date,\n\treins_exp_date\n\tFROM (\n\t\tSELECT reins_cov_ak_id        AS reins_cov_ak_id,\r\n\t\t       pol_ak_id              AS pol_ak_id,\r\n\t\t       reins_ins_line         AS reins_ins_line,\r\n\t\t       CASE  \r\n\t\t           WHEN reins_loc_unit_num <> 'N/A' \r\n\t\t           THEN \r\n\t\t              CASE WHEN LEN(reins_loc_unit_num)=1\r\n\t\t                   THEN \r\n\t\t                     '000' + RTRIM(reins_loc_unit_num) \r\n\t\t                   ELSE  \r\n\t\t                     CASE WHEN LEN(reins_loc_unit_num)=2\r\n\t\t                     THEN\r\n\t\t                     '00' + RTRIM(reins_loc_unit_num) \r\n\t\t\r\n\t\t                     ELSE\r\n\t\t                        CASE WHEN LEN(reins_loc_unit_num)=3\r\n\t\t                        THEN\r\n\t\t                         '000' + RTRIM(reins_loc_unit_num)  \r\n\t\t                        ELSE\r\n\t\t                         RTRIM(reins_loc_unit_num) \r\n\t\t                        END \r\n\t\t                     END\r\n\t\t              END  \r\n\t\t           ELSE \r\n\t\t               RTRIM(reins_loc_unit_num)\r\n\t\t       END     \r\n\t\t        as reins_loc_unit_num,\r\n\t\t       CASE  \r\n\t\t           WHEN reins_sub_loc_unit_num <> 'N/A' \r\n\t\t           THEN \r\n\t\t              CASE WHEN LEN(reins_sub_loc_unit_num)=1\r\n\t\t                   THEN \r\n\t\t                     '00' + RTRIM(reins_sub_loc_unit_num) \r\n\t\t                   ELSE  \r\n\t\t                     CASE WHEN LEN(reins_sub_loc_unit_num)=2\r\n\t\t                     THEN\r\n\t\t                     '0' + RTRIM(reins_sub_loc_unit_num) \r\n\t\t\r\n\t\t                     ELSE\r\n\t\t                     RTRIM(reins_sub_loc_unit_num) \r\n\t\t                     END\r\n\t\t              END  \r\n\t\t           ELSE \r\n\t\t               RTRIM(reins_sub_loc_unit_num)\r\n\t\t       END     \r\n\t\t                              as reins_sub_loc_unit_num,\r\n\t\t       reins_section_code     AS reins_section_code,\r\n\t\t       reins_co_num           AS reins_co_num,\r\n\t\t       reins_prcnt_facultative_commssn as reins_prcnt_facultative_commssn,\r\n\t\t       reins_eff_date         AS reins_eff_date,\r\n\t\t       reins_exp_date  AS reins_exp_date\r\n\t\tFROM   dbo.reinsurance_coverage\r\n\t\tWHERE  crrnt_snpsht_flag = 1 and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,reins_ins_line,reins_loc_unit_num,reins_sub_loc_unit_num,reins_section_code,reins_co_num,reins_prcnt_facultative_commssn,reins_eff_date,reins_exp_date ORDER BY reins_cov_ak_id DESC) = 1\n),\nLKP_ReinsuranceCoverage_CommercialLinesPolicies_WithoutSublocation AS (\n\tSELECT\n\treins_cov_ak_id,\n\tpol_ak_id,\n\treins_ins_line,\n\treins_loc_unit_num,\n\treins_section_code,\n\treins_co_num,\n\treins_prcnt_facultative_commssn,\n\treins_eff_date,\n\treins_exp_date\n\tFROM (\n\t\tSELECT reins_cov_ak_id        AS reins_cov_ak_id,\r\n\t\t       pol_ak_id              AS pol_ak_id,\r\n\t\t       reins_ins_line         AS reins_ins_line,\r\n\t\t       CASE  \r\n\t\t           WHEN reins_loc_unit_num <> 'N/A' \r\n\t\t           THEN \r\n\t\t              CASE WHEN LEN(reins_loc_unit_num)=1\r\n\t\t                   THEN \r\n\t\t                     '000' + RTRIM(reins_loc_unit_num) \r\n\t\t                   ELSE  \r\n\t\t                     CASE WHEN LEN(reins_loc_unit_num)=2\r\n\t\t                     THEN\r\n\t\t                     '00' + RTRIM(reins_loc_unit_num) \r\n\t\t\r\n\t\t                     ELSE\r\n\t\t                        CASE WHEN LEN(reins_loc_unit_num)=3\r\n\t\t                        THEN\r\n\t\t                         '000' + RTRIM(reins_loc_unit_num)  \r\n\t\t                        ELSE\r\n\t\t                         RTRIM(reins_loc_unit_num) \r\n\t\t                        END \r\n\t\t                     END\r\n\t\t              END  \r\n\t\t           ELSE \r\n\t\t               RTRIM(reins_loc_unit_num)\r\n\t\t       END     \r\n\t\t        as reins_loc_unit_num,\r\n\t\t       reins_section_code     AS reins_section_code,\r\n\t\t       reins_co_num           AS reins_co_num,\r\n\t\t        reins_prcnt_facultative_commssn as reins_prcnt_facultative_commssn,\r\n\t\t       reins_eff_date         AS reins_eff_date,\r\n\t\t       reins_exp_date  AS reins_exp_date\r\n\t\tFROM   dbo.reinsurance_coverage\r\n\t\tWHERE  crrnt_snpsht_flag = 1 and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,reins_ins_line,reins_loc_unit_num,reins_section_code,reins_co_num,reins_prcnt_facultative_commssn,reins_eff_date,reins_exp_date ORDER BY reins_cov_ak_id DESC) = 1\n),\nSQ_pif_4514_stage AS (\n\tSELECT pif_4514_stage_id,\r\n\t\tRTRIM(A.pif_symbol),\r\n\t       A.pif_policy_number,\r\n\t       A.pif_module,\r\n\t       sar_id,\r\n\t       LTRIM(RTRIM(sar_insurance_line)) as sar_insurance_line,\r\n\t       CASE LEN(sar_location_x) WHEN '0' THEN LTRIM(RTRIM(sar_unit)) ELSE LTRIM(RTRIM(sar_location_x)) END as sar_location_x,\r\n\t       LTRIM(RTRIM(sar_sub_location_x)) as sar_sub_location_x,\r\n\t       LTRIM(RTRIM(sar_risk_unit_group)) as sar_risk_unit_group,\r\n\t       LTRIM(RTRIM(sar_class_code_grp_x + sar_class_code_mem_x)) as sar_class_code_grp_x,\r\n\t       sar_class_code_mem_x,\r\n\t       LTRIM(RTRIM(sar_unit + sar_risk_unit_continued))      AS sar_unit,\r\n\t       sar_risk_unit_continued,\r\n\t       CASE LEN(LTRIM(RTRIM(COALESCE(sar_seq_rsk_unt_a, ''))))\r\n\t            WHEN '0' THEN 'N/A'\r\n\t                  ELSE LTRIM(RTRIM(sar_seq_rsk_unt_a))\r\n\t             END                                         AS sar_seq_rsk_unt_a,\r\n\t\t  LTRIM(RTRIM(sar_type_exposure)) as sar_type_exposure,\r\n\t        LTRIM(RTRIM(sar_major_peril)) as sar_major_peril,\r\n\t        LTRIM(RTRIM(sar_seq_no)) as sar_seq_no,\r\n\t       sar_cov_eff_year,\r\n\t       sar_cov_eff_month,\r\n\t       sar_cov_eff_day,\r\n\t       sar_part_code,\r\n\t       sar_trans_eff_year,\r\n\t       sar_trans_eff_month,\r\n\t       sar_trans_eff_day,\r\n\t       LTRIM(RTRIM(sar_reinsurance_company_no)),\r\n\t       sar_entrd_date,\r\n\t       sar_exp_year,\r\n\t       sar_exp_month,\r\n\t       sar_exp_day,\r\n\t       sar_transaction,\r\n\t       sar_premium,\r\n\t       sar_original_prem,\r\n\t       sar_agents_comm_rate,\r\n\t       sar_acct_entrd_date,\r\n\t       sar_annual_state_line,\r\n\t       sar_faculta_comm_rate,\r\n\t       LTRIM(RTRIM(sar_state)) as sar_state,\r\n\t       LTRIM(RTRIM(sar_loc_prov_territory)) as sar_loc_prov_territory,\r\n\t\tsar_company_number,\r\n\t       sar_county_first_two,\r\n\t       sar_county_last_one,\r\n\t       CASE WHEN LEN(LTRIM(RTRIM(sar_county_first_two)) + LTRIM(RTRIM(sar_county_last_one)) + LTRIM(RTRIM(sar_city))) < 6 THEN '000000' ELSE \r\n\t       LTRIM(RTRIM(sar_county_first_two)) + LTRIM(RTRIM(sar_county_last_one)) + LTRIM(RTRIM(sar_city)) END as sar_city,\r\n\tsar_city as lkp_sar_city,\r\n\t       sar_rsn_amend_one,\r\n\t       sar_rsn_amend_two,\r\n\t       sar_rsn_amend_three,\r\n\t       sar_special_use,\r\n\t\tsar_stat_breakdown_line,\r\n\t\t sar_user_line,\r\n\t       LTRIM(RTRIM(sar_section)) as sar_section,\r\n\t       sar_rating_date_ind,\r\n\t       LTRIM(RTRIM(sar_type_bureau)) as sar_type_bureau,\r\n\t       LTRIM(RTRIM(sar_class_1_4 + sar_class_5_6))  AS sar_class_1_4,\r\n\t       sar_class_5_6,\r\n\t\r\n\t      Case sar_type_bureau when 'GL' THEN\r\n\t\t    case when sar_exposure in (10000000,-9999999999, 9999999999) then 0 \r\n\t          else sar_exposure\t\r\n\t          End\r\n\t\tElse \r\n\t          sar_exposure\r\n\t\tEnd as sar_exposure,\r\n\t\r\n\t       LTRIM(RTRIM(sar_sub_line)) as sar_sub_line,\r\n\t      sar_code_1,\r\n\t      sar_code_2,\r\n\t      sar_code_3,\r\n\t      sar_code_4,\r\n\t      sar_code_5,\r\n\t      sar_code_6,\r\n\t      sar_code_7,\r\n\t      sar_code_8,\r\n\t      sar_code_9,\r\n\t      sar_code_10,\r\n\t      sar_code_11,\r\n\t      sar_code_12,\r\n\t      sar_code_13,\r\n\t      sar_code_14,\r\n\t      sar_code_15,\r\n\t      LTRIM(RTRIM(sar_zip_postal_code)) as sar_zip_postal_code,\r\n\t      sar_audit_reinst_ind,\r\n\t\tA.logical_flag\r\n\tFROM   @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_4514} A\r\n\t@{pipeline().parameters.JOIN_CONDITION}\r\n\t(SELECT DISTINCT Policykey FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.work_policytransactionstatus \r\n\tWHERE AuditID = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND PolicyStatus <> 'NOCHANGE')  B\r\n\tON  A.policykey = B.policykey\r\n\t\r\n\tWHERE A.sar_major_peril NOT IN ('078', '088', '089', '183', '255', '499', '256', '257', '258', '259', '898', '899') \r\n\tAND A.logical_flag IN ('0','1','2','3') \r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\tORDER BY pif_4514_stage_id\r\n\t\r\n\t----- Added the Order By clause on source qualifier, so that we are reading all the Transactions of a given policy as they are in the source(PIFMSTR, DAILYPIF Files).\r\n\t---- We have Premiumloadsequence in the target which preserves the order of the transactions in EDW as they in the source. This order of transactions is very \r\n\t--- important for the generation of Premium Master in EDW.\r\n\t---The join conditions on the pif43 segment tables were profiled to avoid duplicates, but in rare case that mutiple matches are still returned, we will be taking the latest record in the 43 segment table.\n),\nFIL_PassThroughCharges_Records AS (\n\tSELECT\n\tpif_4514_stage_id, \n\tpif_symbol, \n\tpif_policy_number, \n\tpif_module, \n\tsar_id, \n\tsar_insurance_line, \n\tsar_location_x, \n\tsar_sub_location_x, \n\tsar_risk_unit_group, \n\tsar_class_code_grp_x, \n\tsar_class_code_mem_x, \n\tsar_unit, \n\tsar_risk_unit_continued, \n\tsar_seq_rsk_unt_a, \n\tsar_type_exposure, \n\tsar_major_peril, \n\tsar_seq_no, \n\tsar_cov_eff_year, \n\tsar_cov_eff_month, \n\tsar_cov_eff_day, \n\tsar_part_code, \n\tsar_trans_eff_year, \n\tsar_trans_eff_month, \n\tsar_trans_eff_day, \n\tsar_reinsurance_company_no, \n\tsar_entrd_date, \n\tsar_exp_year, \n\tsar_exp_month, \n\tsar_exp_day, \n\tsar_transaction, \n\tsar_premium, \n\tsar_original_prem, \n\tsar_agents_comm_rate, \n\tsar_acct_entrd_date, \n\tsar_annual_state_line, \n\tsar_faculta_comm_rate, \n\tsar_state, \n\tsar_loc_prov_territory, \n\tsar_company_number, \n\tsar_county_first_two, \n\tsar_county_last_one, \n\tsar_city, \n\tlkp_sar_city, \n\tsar_rsn_amend_one, \n\tsar_rsn_amend_two, \n\tsar_rsn_amend_three, \n\tsar_special_use, \n\tsar_stat_breakdown_line, \n\tsar_user_line, \n\tsar_section, \n\tsar_rating_date_ind, \n\tsar_type_bureau, \n\tsar_class_1_4, \n\tsar_class_5_6, \n\tsar_exposure, \n\tsar_sub_line, \n\tsar_code_1, \n\tsar_code_2, \n\tsar_code_3, \n\tsar_code_4, \n\tsar_code_5, \n\tsar_code_6, \n\tsar_code_7, \n\tsar_code_8, \n\tsar_code_9, \n\tsar_code_10, \n\tsar_code_11, \n\tsar_code_12, \n\tsar_code_13, \n\tsar_code_14, \n\tsar_code_15, \n\tsar_zip_postal_code, \n\tsar_audit_reinst_ind, \n\tlogical_flag\n\tFROM SQ_pif_4514_stage\n\tWHERE IIF(IN(sar_major_peril,'078', '088', '089', '183', '255', '499', '256', '257', '258', '259', '898', '899'),FALSE,TRUE)\n),\nEXP_Default AS (\n\tSELECT\n\tpif_4514_stage_id,\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module,\n\tpif_symbol  ||  pif_policy_number  || pif_module AS Policy_Key,\n\tsar_id,\n\tsar_insurance_line,\n\t-- *INF*: --edwp-1344\r\n\t-- iif(sar_insurance_line='IM','GL',sar_insurance_line)\n\tIFF(sar_insurance_line = 'IM', 'GL', sar_insurance_line) AS sar_insurance_line_GL,\n\t-- *INF*: --edwp - 1344\r\n\t-- iif(sar_insurance_line='IM','CF',sar_insurance_line)\n\tIFF(sar_insurance_line = 'IM', 'CF', sar_insurance_line) AS sar_insurance_line_CF,\n\tsar_location_x,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_location_x)))=0, 0, \r\n\t-- REG_MATCH(sar_location_x, '[0-9]+'), TO_DECIMAL(sar_location_x,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_location_x))) = 0, 0,\n\tREG_MATCH(sar_location_x, '[0-9]+'), TO_DECIMAL(sar_location_x, 0),\n\t- 1) AS lkp_sar_location_x,\n\tsar_sub_location_x,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_sub_location_x)))=0, 0, \r\n\t-- REG_MATCH(sar_sub_location_x, '[0-9]+'), TO_DECIMAL(sar_sub_location_x,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_sub_location_x))) = 0, 0,\n\tREG_MATCH(sar_sub_location_x, '[0-9]+'), TO_DECIMAL(sar_sub_location_x, 0),\n\t- 1) AS lkp_sar_sub_location_x,\n\tsar_risk_unit_group,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_risk_unit_group)))=0, 0, \r\n\t-- REG_MATCH(sar_risk_unit_group, '[0-9]+'), TO_DECIMAL(sar_risk_unit_group,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_risk_unit_group))) = 0, 0,\n\tREG_MATCH(sar_risk_unit_group, '[0-9]+'), TO_DECIMAL(sar_risk_unit_group, 0),\n\t- 1) AS lkp_sar_risk_unit_group,\n\tsar_class_code_grp_x,\n\t-- *INF*: SUBSTR(sar_class_code_grp_x,1,2)\n\tSUBSTR(sar_class_code_grp_x, 1, 2) AS v_sar_class_code_grp_x,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(v_sar_class_code_grp_x)))=0, 0, \r\n\t-- REG_MATCH(v_sar_class_code_grp_x, '[0-9]+'), TO_DECIMAL(v_sar_class_code_grp_x,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(v_sar_class_code_grp_x))) = 0, 0,\n\tREG_MATCH(v_sar_class_code_grp_x, '[0-9]+'), TO_DECIMAL(v_sar_class_code_grp_x, 0),\n\t- 1) AS lkp_sar_class_code_grp_x,\n\t-- *INF*: LENGTH(LTRIM(RTRIM(sar_class_code_grp_x)))\n\tLENGTH(LTRIM(RTRIM(sar_class_code_grp_x))) AS TEST1,\n\t-- *INF*: REG_MATCH(sar_class_code_grp_x, '[0-9]+')\n\tREG_MATCH(sar_class_code_grp_x, '[0-9]+') AS TEST2,\n\tsar_class_code_mem_x,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_class_code_mem_x)))=0, 0, \r\n\t-- REG_MATCH(sar_class_code_mem_x, '[0-9]+'), TO_DECIMAL(sar_class_code_mem_x,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_class_code_mem_x))) = 0, 0,\n\tREG_MATCH(sar_class_code_mem_x, '[0-9]+'), TO_DECIMAL(sar_class_code_mem_x, 0),\n\t- 1) AS lkp_sar_class_code_mem_x,\n\t-- *INF*: SUBSTR(sar_class_code_grp_x,2,1) || sar_class_code_mem_x\n\tSUBSTR(sar_class_code_grp_x, 2, 1) || sar_class_code_mem_x AS lkp_ReportingClassSeq,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_class_code_grp_x)))=0, 0, \r\n\t-- REG_MATCH(sar_class_code_grp_x, '[0-9]+'), TO_DECIMAL(sar_class_code_grp_x,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_class_code_grp_x))) = 0, 0,\n\tREG_MATCH(sar_class_code_grp_x, '[0-9]+'), TO_DECIMAL(sar_class_code_grp_x, 0),\n\t- 1) AS lkp_sequencenumber,\n\tsar_unit,\n\t-- *INF*: LTRIM(:UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(sar_unit,1,3)),'0')\n\tLTRIM(:UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(sar_unit, 1, 3)), '0') AS o_sar_unit_1_3_trimmed,\n\t-- *INF*: length(ltrim(rtrim(sar_unit )  )  ) \n\tlength(ltrim(rtrim(sar_unit))) AS out_sar_unit,\n\t-- *INF*: SUBSTR(sar_unit,3,1)\n\tSUBSTR(sar_unit, 3, 1) AS lkp_sar_unit_3_1,\n\tsar_risk_unit_continued,\n\t-- *INF*: SUBSTR(sar_risk_unit_continued ,2,2)\n\tSUBSTR(sar_risk_unit_continued, 2, 2) AS lkp_ClassCodeSeq,\n\t-- *INF*: SUBSTR(sar_unit,1,5)\n\tSUBSTR(sar_unit, 1, 5) AS lkp_Pmduxg1ClassCode,\n\tsar_seq_rsk_unt_a,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(sar_seq_rsk_unt_a)))=0, 0, \r\n\t-- REG_MATCH(SUBSTR(sar_seq_rsk_unt_a,1,1), '[0-9]+'), TO_DECIMAL(SUBSTR(sar_seq_rsk_unt_a,1,1),0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(sar_seq_rsk_unt_a))) = 0, 0,\n\tREG_MATCH(SUBSTR(sar_seq_rsk_unt_a, 1, 1), '[0-9]+'), TO_DECIMAL(SUBSTR(sar_seq_rsk_unt_a, 1, 1), 0),\n\t- 1) AS lkp_sar_seq_rsk_unt_a,\n\t-- *INF*: DECODE(TRUE, LENGTH(LTRIM(RTRIM(SUBSTR(sar_seq_rsk_unt_a,2,1))))=0, 'B', SUBSTR(sar_seq_rsk_unt_a,2,1))\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(SUBSTR(sar_seq_rsk_unt_a, 2, 1)))) = 0, 'B',\n\tSUBSTR(sar_seq_rsk_unt_a, 2, 1)) AS lkp_sar_seq_rsk_unt_a_2_1,\n\tsar_type_exposure,\n\tsar_major_peril,\n\tsar_seq_no,\n\tsar_cov_eff_year,\n\tsar_cov_eff_month,\n\tsar_cov_eff_day,\n\tsar_part_code,\n\tsar_trans_eff_year,\n\tsar_trans_eff_month,\n\tsar_trans_eff_day,\n\tsar_reinsurance_company_no,\n\tsar_entrd_date,\n\tsar_exp_year,\n\tsar_exp_month,\n\tsar_exp_day,\n\tsar_transaction,\n\tsar_premium,\n\tsar_original_prem,\n\tsar_agents_comm_rate,\n\tsar_acct_entrd_date,\n\tsar_faculta_comm_rate,\n\tsar_state,\n\tsar_loc_prov_territory,\n\tsar_company_number,\n\tsar_county_first_two,\n\tsar_county_last_one,\n\tsar_county_first_two || sar_county_last_one AS lkp_Location,\n\tsar_city,\n\tlkp_sar_city,\n\tsar_rsn_amend_one,\n\tsar_rsn_amend_two,\n\tsar_rsn_amend_three,\n\tsar_section,\n\tsar_type_bureau,\n\tsar_class_1_4,\n\t-- *INF*: SUBSTR(sar_class_1_4,1,4)\n\tSUBSTR(sar_class_1_4, 1, 4) AS lkp_sar_class_1_4,\n\t-- *INF*: SUBSTR(sar_class_1_4,1,4)\n\tSUBSTR(sar_class_1_4, 1, 4) AS v_lkp_sar_class_1_4,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(v_lkp_sar_class_1_4)))=0, 0, \r\n\t-- REG_MATCH(v_lkp_sar_class_1_4, '[0-9]+'), TO_DECIMAL(v_lkp_sar_class_1_4,0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(v_lkp_sar_class_1_4))) = 0, 0,\n\tREG_MATCH(v_lkp_sar_class_1_4, '[0-9]+'), TO_DECIMAL(v_lkp_sar_class_1_4, 0),\n\t- 1) AS out_lkp_sar_class_1_4,\n\tsar_class_5_6,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LENGTH(LTRIM(RTRIM(SUBSTR(sar_class_1_4,1,4) || SUBSTR(sar_class_5_6,1,1))))=0, 0, \r\n\t-- REG_MATCH(SUBSTR(sar_class_1_4,1,4), '[0-9]+') AND REG_MATCH(SUBSTR(sar_class_5_6,1,1), '[0-9]+'), TO_DECIMAL(SUBSTR(sar_class_1_4,1,4) || SUBSTR(sar_class_5_6,1,1),0) \r\n\t-- , -1)\n\tDECODE(TRUE,\n\tLENGTH(LTRIM(RTRIM(SUBSTR(sar_class_1_4, 1, 4) || SUBSTR(sar_class_5_6, 1, 1)))) = 0, 0,\n\tREG_MATCH(SUBSTR(sar_class_1_4, 1, 4), '[0-9]+') AND REG_MATCH(SUBSTR(sar_class_5_6, 1, 1), '[0-9]+'), TO_DECIMAL(SUBSTR(sar_class_1_4, 1, 4) || SUBSTR(sar_class_5_6, 1, 1), 0),\n\t- 1) AS lkp_ClassCode,\n\tsar_exposure,\n\tsar_sub_line,\n\tsar_zip_postal_code,\n\tsar_annual_state_line,\n\tsar_special_use,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\tsar_rating_date_ind,\n\tsar_code_1,\n\tsar_code_2,\n\tsar_code_3,\n\tsar_code_4,\n\tsar_code_5,\n\tsar_code_6,\n\tsar_code_7,\n\tsar_code_8,\n\tsar_code_9,\n\tsar_code_10,\n\tsar_code_11,\n\tsar_code_12,\n\tsar_code_13,\n\tsar_code_14,\n\tsar_code_15,\n\tsar_audit_reinst_ind,\n\tlogical_flag,\n\t-- *INF*: (sar_code_1 || sar_code_2)\n\t( sar_code_1 || sar_code_2 ) AS Out_PMACode\n\tFROM FIL_PassThroughCharges_Records\n),\nLKP_PIF43NXCRStage AS (\n\tSELECT\n\tPMDNXC1PmaCode,\n\twb_class_of_business,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifPolicyModule,\n\tPMDNXC1InsuranceLine,\n\tPMDNXC1LocationNumber,\n\tPMDNXC1SubLocationNumber,\n\tPMDNXC1CspClassCode,\n\tPMDUYC1Coverage\n\tFROM (\n\t\tSELECT distinct crnx.PMDNXC1PmaCode as PMDNXC1PmaCode\r\n\t\t,pif.wb_class_of_business as wb_class_of_business\r\n\t\t, crnx.PifSymbol as PifSymbol\r\n\t\t,crnx.PifPolicyNumber as PifPolicyNumber \r\n\t\t,crnx.PifPolicyModule as PifPolicyModule \r\n\t\t,crnx.PMDNXC1InsuranceLine as PMDNXC1InsuranceLine\r\n\t\t,crnx.PMDNXC1LocationNumber as PMDNXC1LocationNumber\r\n\t\t,crnx.PMDNXC1SubLocationNumber as PMDNXC1SubLocationNumber\r\n\t\t,crnx.PMDNXC1CspClassCode as PMDNXC1CspClassCode\r\n\t\t,uy.PMDUYC1Coverage as PMDUYC1Coverage\r\n\t\tfrom PIF43NXCRStage crnx\r\n\t\tinner join PIF43UYCRStage uy\r\n\t\ton crnx.PifSymbol = uy.PifSymbol\r\n\t\tand crnx.PifPolicyNumber = uy.PifPolicyNumber\r\n\t\tand crnx.PifPolicyModule = uy.PifPolicyModule\r\n\t\tand crnx.PMDNXC1InsuranceLine = uy.PMDUYC1InsuranceLine\r\n\t\tinner join pif_02_stage pif\r\n\t\ton crnx.PifSymbol = pif.pif_symbol\r\n\t\tand crnx.PifPolicyNumber = pif.pif_policy_number\r\n\t\tand crnx.PifPolicyModule = pif.pif_module\r\n\t\twhere crnx.PMDNXC1PmaCode is not null\r\n\t\tand crnx.PMDNXC1InsuranceLine = 'cr'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifPolicyModule,PMDNXC1InsuranceLine,PMDNXC1LocationNumber,PMDNXC1SubLocationNumber,PMDNXC1CspClassCode,PMDUYC1Coverage ORDER BY PMDNXC1PmaCode) = 1\n),\nLKP_Pif350Stage AS (\n\tSELECT\n\tPackageModificationAssignment,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tUnitNum\n\tFROM (\n\t\tSELECT PackageModificationAssignment AS PackageModificationAssignment\r\n\t\t\t,PifSymbol AS PifSymbol\r\n\t\t\t,PifPolicyNumber AS PifPolicyNumber\r\n\t\t\t,PifModule AS PifModule\r\n\t\t\t,(CASE WHEN UnitNum=0 THEN 'N/A' ELSE CONVERT(VARCHAR(3),UnitNum) END) AS UnitNum\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif350Stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,UnitNum ORDER BY PackageModificationAssignment) = 1\n),\nLKP_Pif43IXUnmodStage AS (\n\tSELECT\n\tPif43IXUnmodWCRatingState,\n\tPif43IXUnmodReportingClassCode,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPif43IXUnmodInsuranceLine,\n\tPif43IXUnmodSplitRateSeq,\n\tPif43IXUnmodYearItemEffective,\n\tPif43IXUnmodMonthItemEffective,\n\tPif43IXUnmodDayItemEffective\n\tFROM (\n\t\tSELECT E.PifSymbol as PifSymbol, \r\n\t\tE.PifPolicyNumber as PifPolicyNumber, \r\n\t\tE.PifModule as PifModule, \r\n\t\tE.Pif43IXUnmodInsuranceLine as Pif43IXUnmodInsuranceLine, \r\n\t\tE.Pif43IXUnmodWCRatingState as Pif43IXUnmodWCRatingState, \r\n\t\tLTRIM(RTRIM(E.Pif43IXUnmodReportingClassCode)) as Pif43IXUnmodReportingClassCode, \r\n\t\tE.Pif43IXUnmodSplitRateSeq as Pif43IXUnmodSplitRateSeq, \r\n\t\tE.Pif43IXUnmodYearItemEffective as Pif43IXUnmodYearItemEffective, \r\n\t\tE.Pif43IXUnmodMonthItemEffective as Pif43IXUnmodMonthItemEffective, \r\n\t\tE.Pif43IXUnmodDayItemEffective as Pif43IXUnmodDayItemEffective \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43IXUnmodStage E\r\n\t\tWHERE E.Pif43IXUnmodStageID in (\r\n\t\tselect max(Pif43IXUnmodStageID) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43IXUnmodStage B\r\n\t\twhere E.PifSymbol=B.PifSymbol\r\n\t\tand E.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand E.PifModule=B.PifModule\r\n\t\tand B.Pif43IXUnmodWCRatingState=E.Pif43IXUnmodWCRatingState\r\n\t\tand B.Pif43IXUnmodReportingClassCode=E.Pif43IXUnmodReportingClassCode\r\n\t\tand B.Pif43IXUnmodSplitRateSeq=E.Pif43IXUnmodSplitRateSeq\r\n\t\tand B.Pif43IXUnmodYearItemEffective=E.Pif43IXUnmodYearItemEffective\r\n\t\tand B.Pif43IXUnmodMonthItemEffective=E.Pif43IXUnmodMonthItemEffective\r\n\t\tand B.Pif43IXUnmodDayItemEffective=E.Pif43IXUnmodDayItemEffective\r\n\t\tand B.Pif43IXUnmodSegmentPartCode='X'\r\n\t\tand B.Pif43IXUnmodSegmentStatus<>'D')\r\n\t\tand E.Pif43IXUnmodSegmentPartCode='X'\r\n\t\tand E.Pif43IXUnmodSegmentStatus<>'D'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pif43IXUnmodInsuranceLine,Pif43IXUnmodWCRatingState,Pif43IXUnmodReportingClassCode,Pif43IXUnmodSplitRateSeq,Pif43IXUnmodYearItemEffective,Pif43IXUnmodMonthItemEffective,Pif43IXUnmodDayItemEffective ORDER BY Pif43IXUnmodWCRatingState) = 1\n),\nLKP_Pif43IXZWCModStage AS (\n\tSELECT\n\tPmdi4w1YearItemEffective,\n\tPmdi4w1MonthItemEffective,\n\tPmdi4w1DayItemEffective,\n\tPmdi4w1ModifierDesc,\n\tPmdi4w1ModifierRate,\n\tPmdi4w1ModifierPremBasis,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdi4w1InsuranceLine,\n\tPmdi4w1WcRatingState,\n\tPmdi4w1ReportingClassCode,\n\tPmdi4w1SplitRateSeq\n\tFROM (\n\t\tSELECT G.Pmdi4w1ModifierDesc as Pmdi4w1ModifierDesc, \r\n\t\tG.Pmdi4w1ModifierRate as Pmdi4w1ModifierRate, \r\n\t\tG.Pmdi4w1ModifierPremBasis as Pmdi4w1ModifierPremBasis, \r\n\t\tG.PifSymbol as PifSymbol, \r\n\t\tG.PifPolicyNumber as PifPolicyNumber, \r\n\t\tG.PifModule as PifModule, \r\n\t\tG.Pmdi4w1InsuranceLine as Pmdi4w1InsuranceLine, \r\n\t\tG.Pmdi4w1WcRatingState as Pmdi4w1WcRatingState, \r\n\t\tLTRIM(RTRIM(G.Pmdi4w1ReportingClassCode)) as Pmdi4w1ReportingClassCode, \r\n\t\tG.Pmdi4w1ReportingClassSeq as Pmdi4w1ReportingClassSeq, \r\n\t\tG.Pmdi4w1SplitRateSeq as Pmdi4w1SplitRateSeq, \r\n\t\tG.Pmdi4w1YearItemEffective as Pmdi4w1YearItemEffective, \r\n\t\tG.Pmdi4w1MonthItemEffective as Pmdi4w1MonthItemEffective, \r\n\t\tG.Pmdi4w1DayItemEffective as Pmdi4w1DayItemEffective \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43IXZWCModStage G\r\n\t\tWHERE G.Pif43IXZWCModStageId in (\r\n\t\tselect max(Pif43IXZWCModStageID) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43IXZWCModStage B\r\n\t\twhere G.PifSymbol=B.PifSymbol\r\n\t\tand G.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand G.PifModule=B.PifModule\r\n\t\tand B.Pmdi4w1WcRatingState=G.Pmdi4w1WcRatingState\r\n\t\tand B.Pmdi4w1ReportingClassCode=G.Pmdi4w1ReportingClassCode\r\n\t\tand B.Pmdi4w1ReportingClassSeq=G.Pmdi4w1ReportingClassSeq\r\n\t\tand B.Pmdi4w1SplitRateSeq=G.Pmdi4w1SplitRateSeq\r\n\t\tand B.Pmdi4w1YearItemEffective=G.Pmdi4w1YearItemEffective\r\n\t\tand B.Pmdi4w1MonthItemEffective=G.Pmdi4w1MonthItemEffective\r\n\t\tand B.Pmdi4w1DayItemEffective=G.Pmdi4w1DayItemEffective)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdi4w1InsuranceLine,Pmdi4w1WcRatingState,Pmdi4w1ReportingClassCode,Pmdi4w1SplitRateSeq,Pmdi4w1YearItemEffective,Pmdi4w1MonthItemEffective,Pmdi4w1DayItemEffective ORDER BY Pmdi4w1YearItemEffective) = 1\n),\nLKP_Pif43LXGAStage AS (\n\tSELECT\n\tPMDLXA1PmaCode,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule\n\tFROM (\n\t\tSELECT \n\t\t\tPMDLXA1PmaCode,\n\t\t\tPifSymbol,\n\t\t\tPifPolicyNumber,\n\t\t\tPifModule\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXGAStage\n\t\tWHERE PMDLXA1PmaCode is not null and PMDLXA1InsuranceLine = 'GA'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule ORDER BY PMDLXA1PmaCode) = 1\n),\nLKP_Pif43LXGLStage AS (\n\tSELECT\n\tPmdlxg1YearRetro,\n\tPmdlxg1MonthRetro,\n\tPmdlxg1DayRetro,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdlxg1InsuranceLine\n\tFROM (\n\t\tSELECT K.Pmdlxg1YearRetro as Pmdlxg1YearRetro, \r\n\t\tK.Pmdlxg1MonthRetro as Pmdlxg1MonthRetro, \r\n\t\tK.Pmdlxg1DayRetro as Pmdlxg1DayRetro, \r\n\t\tK.PifSymbol as PifSymbol, \r\n\t\tK.PifPolicyNumber as PifPolicyNumber, \r\n\t\tK.PifModule as PifModule, \r\n\t\tK.Pmdlxg1InsuranceLine as Pmdlxg1InsuranceLine \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXGLStage K\r\n\t\tWHERE K.Pif43LXGLStageId in (\r\n\t\tselect max(Pif43LXGLStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXGLStage B\r\n\t\twhere K.PifSymbol=B.PifSymbol\r\n\t\tand K.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand K.PifModule=B.PifModule)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdlxg1InsuranceLine ORDER BY Pmdlxg1YearRetro) = 1\n),\nLKP_Pif43LXZWCStage AS (\n\tSELECT\n\tPmdl4w1RatingProgramType,\n\tPmdl4w1PolicyType,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdl4w1InsuranceLine\n\tFROM (\n\t\tSELECT D.Pmdl4w1RatingProgramType as Pmdl4w1RatingProgramType, \r\n\t\tD.Pmdl4w1PolicyType as Pmdl4w1PolicyType, \r\n\t\tD.PifSymbol as PifSymbol, \r\n\t\tD.PifPolicyNumber as PifPolicyNumber, \r\n\t\tD.PifModule as PifModule, \r\n\t\tD.Pmdl4w1InsuranceLine as Pmdl4w1InsuranceLine \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXZWCStage D\r\n\t\tWHERE D.Pif43LXZWCStageId in (\r\n\t\tselect max(Pif43LXZWCStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXZWCStage B\r\n\t\twhere D.PifSymbol=B.PifSymbol\r\n\t\tand D.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand D.PifModule=B.PifModule)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdl4w1InsuranceLine ORDER BY Pmdl4w1RatingProgramType) = 1\n),\nLKP_Pif43NXCPStage AS (\n\tSELECT\n\tPmdnxp1OtherMod,\n\tPmdnxp1CspConstrCod,\n\tPmdnxp1ProtectionClassPart1,\n\tPmdnxp1YearBuilt,\n\tPmdnxp1Irpm,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdnxp1InsuranceLine,\n\tPmdnxp1LocationNumber,\n\tPmdnxp1SubLocationNumber\n\tFROM (\n\t\tSELECT C.Pmdnxp1OtherMod as Pmdnxp1OtherMod, \r\n\t\tC.Pmdnxp1CspConstrCod as Pmdnxp1CspConstrCod, \r\n\t\tC.Pmdnxp1ProtectionClassPart1 as Pmdnxp1ProtectionClassPart1, \r\n\t\tC.Pmdnxp1YearBuilt as Pmdnxp1YearBuilt, \r\n\t\tC.PifSymbol as PifSymbol, \r\n\t\tC.PifPolicyNumber as PifPolicyNumber, \r\n\t\tC.PifModule as PifModule, \r\n\t\tC.Pmdnxp1InsuranceLine as Pmdnxp1InsuranceLine,\r\n\t\tC.Pmdnxp1LocationNumber as Pmdnxp1LocationNumber, \r\n\t\tC.Pmdnxp1SubLocationNumber as Pmdnxp1SubLocationNumber,\r\n\t\tC.Pmdnxp1Irpm AS Pmdnxp1Irpm\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43NXCPStage C\r\n\t\tWHERE C.Pif43NXCPStageId in (\r\n\t\tselect max(Pif43NXCPStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43NXCPStage B\r\n\t\twhere C.PifSymbol=B.PifSymbol\r\n\t\tand C.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand C.PifModule=B.PifModule\r\n\t\tand C.Pmdnxp1LocationNumber=B.Pmdnxp1LocationNumber\r\n\t\tand C.Pmdnxp1SubLocationNumber=B.Pmdnxp1SubLocationNumber)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdnxp1InsuranceLine,Pmdnxp1LocationNumber,Pmdnxp1SubLocationNumber ORDER BY Pmdnxp1OtherMod) = 1\n),\nLKP_Pif43RXCPStage AS (\n\tSELECT\n\tPmdrxp1PmaCode,\n\tPmdrxp1WindAndHail,\n\twb_class_of_business,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdrxp1InsuranceLine,\n\tPmdrxp1LocationNumber,\n\tPmdrxp1SubLocationNumber,\n\tPmdrxp1CspClsCode,\n\tPmdrxp1PmsDefSubjOfIns\n\tFROM (\n\t\tSELECT J.Pmdrxp1PmaCode as Pmdrxp1PmaCode, \r\n\t\tJ.PifSymbol as PifSymbol, \r\n\t\tJ.PifPolicyNumber as PifPolicyNumber, \r\n\t\tJ.PifModule as PifModule, \r\n\t\tJ.Pmdrxp1InsuranceLine as Pmdrxp1InsuranceLine, \r\n\t\tJ.Pmdrxp1LocationNumber as Pmdrxp1LocationNumber, \r\n\t\tJ.Pmdrxp1SubLocationNumber as Pmdrxp1SubLocationNumber, \r\n\t\tLTRIM(RTRIM(J.Pmdrxp1CspClsCode)) as Pmdrxp1CspClsCode, \r\n\t\tJ.Pmdrxp1PmsDefSubjOfIns as Pmdrxp1PmsDefSubjOfIns, \r\n\t\tJ.Pmdrxp1WindAndHail as Pmdrxp1WindAndHail,\r\n\t\tP.wb_class_of_business as wb_class_of_business\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43RXCPStage J\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_02_stage P\r\n\t\ton J.PifSymbol=P.pif_symbol and J.PifPolicyNumber=P.pif_policy_number and J.PifModule=P.pif_module\r\n\t\tand J.Pif43RXCPStageId in (\r\n\t\tselect max(Pif43RXCPStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43RXCPStage B\r\n\t\twhere J.PifSymbol=B.PifSymbol\r\n\t\tand J.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand J.PifModule=B.PifModule\r\n\t\tand B.Pmdrxp1LocationNumber=J.Pmdrxp1LocationNumber\r\n\t\tand B.Pmdrxp1SubLocationNumber=J.Pmdrxp1SubLocationNumber\r\n\t\tand B.Pmdrxp1CspClsCode=J.Pmdrxp1CspClsCode\r\n\t\tand B.Pmdrxp1PmsDefSubjOfIns=J.Pmdrxp1PmsDefSubjOfIns)\r\n\t\tand P.pif_02_stage_id in (\r\n\t\tselect max(pif_02_stage_id) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_02_stage P2\r\n\t\twhere P2.pif_symbol=P.pif_symbol and P2.pif_policy_number=P.pif_policy_number and P2.pif_module = P.pif_module)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdrxp1InsuranceLine,Pmdrxp1LocationNumber,Pmdrxp1SubLocationNumber,Pmdrxp1CspClsCode,Pmdrxp1PmsDefSubjOfIns ORDER BY Pmdrxp1PmaCode) = 1\n),\nLKP_Pif43RXGLStage AS (\n\tSELECT\n\tPmdrxg1ScheduleMod,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdrxg1InsuranceLine,\n\tPmdrxg1PmsDefGlSubline,\n\tPmdrxg1RiskTypeInd\n\tFROM (\n\t\tSELECT \n\t\t\tPmdrxg1ScheduleMod,\n\t\t\tPifSymbol,\n\t\t\tPifPolicyNumber,\n\t\t\tPifModule,\n\t\t\tPmdrxg1InsuranceLine,\n\t\t\tPmdrxg1PmsDefGlSubline,\n\t\t\tPmdrxg1RiskTypeInd\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43RXGLStage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdrxg1InsuranceLine,Pmdrxg1PmsDefGlSubline,Pmdrxg1RiskTypeInd ORDER BY Pmdrxg1ScheduleMod) = 1\n),\nLKP_Pif43RXIMStage AS (\n\tSELECT\n\tPMDRXI1Irpm,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPMDRXI1InsuranceLine,\n\tPMDRXI1LocationNumber,\n\tPMDRXI1SubLocationNumber,\n\tPMDRXI1RiskUnitGroup,\n\tPMDRXI1SequenceNumber\n\tFROM (\n\t\tSELECT \n\t\t\tPMDRXI1Irpm,\n\t\t\tPifSymbol,\n\t\t\tPifPolicyNumber,\n\t\t\tPifModule,\n\t\t\tPMDRXI1InsuranceLine,\n\t\t\tPMDRXI1LocationNumber,\n\t\t\tPMDRXI1SubLocationNumber,\n\t\t\tPMDRXI1RiskUnitGroup,\n\t\t\tPMDRXI1SequenceNumber\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43RXIMStage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,PMDRXI1InsuranceLine,PMDRXI1LocationNumber,PMDRXI1SubLocationNumber,PMDRXI1RiskUnitGroup,PMDRXI1SequenceNumber ORDER BY PMDRXI1Irpm) = 1\n),\nLKP_Pif43UXGLStage AS (\n\tSELECT\n\tPmduxg1IncLimitTableInd,\n\tPmduxg1PmaCode,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmduxg1InsuranceLine,\n\tPmduxg1LocationNumber,\n\tPmduxg1PmsDefGlSubline,\n\tPmduxg1ClassCodeGroup,\n\tPmduxg1ClassCodeMember,\n\tPmduxg1ClassCode,\n\tPmduxg1RiskSequence,\n\tPmduxg1RiskTypeInd\n\tFROM (\n\t\tSELECT I.Pmduxg1IncLimitTableInd as Pmduxg1IncLimitTableInd, \r\n\t\tI.Pmduxg1PmaCode as Pmduxg1PmaCode, \r\n\t\tI.PifSymbol as PifSymbol, \r\n\t\tI.PifPolicyNumber as PifPolicyNumber, \r\n\t\tI.PifModule as PifModule, \r\n\t\tI.Pmduxg1InsuranceLine as Pmduxg1InsuranceLine, \r\n\t\tI.Pmduxg1LocationNumber as Pmduxg1LocationNumber, \r\n\t\tI.Pmduxg1PmsDefGlSubline as Pmduxg1PmsDefGlSubline, \r\n\t\tI.Pmduxg1ClassCodeGroup as Pmduxg1ClassCodeGroup, \r\n\t\tI.Pmduxg1ClassCodeMember as Pmduxg1ClassCodeMember, \r\n\t\tI.Pmduxg1ClassCode as Pmduxg1ClassCode, \r\n\t\tI.Pmduxg1RiskSequence as Pmduxg1RiskSequence, \r\n\t\tI.Pmduxg1RiskTypeInd as Pmduxg1RiskTypeInd\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UXGLStage I\r\n\t\tWHERE I.Pif43UXGLStageId in (\r\n\t\tselect max(Pif43UXGLStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UXGLStage B\r\n\t\twhere I.PifSymbol=B.PifSymbol\r\n\t\tand I.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand I.PifModule=B.PifModule\r\n\t\tand B.Pmduxg1LocationNumber=I.Pmduxg1LocationNumber\r\n\t\tand B.Pmduxg1PmsDefGlSubline=I.Pmduxg1PmsDefGlSubline\r\n\t\tand B.Pmduxg1ClassCodeGroup=I.Pmduxg1ClassCodeGroup\r\n\t\tand B.Pmduxg1ClassCodeMember=I.Pmduxg1ClassCodeMember\r\n\t\tand B.Pmduxg1ClassCode=I.Pmduxg1ClassCode\r\n\t\tand B.Pmduxg1RiskSequence=I.Pmduxg1RiskSequence\r\n\t\tand B.Pmduxg1RiskTypeInd=I.Pmduxg1RiskTypeInd\r\n\t\tand B.Pmduxg1RiskTypeInd in ('O','P'))\r\n\t\tand I.Pmduxg1RiskTypeInd in ('O','P')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmduxg1InsuranceLine,Pmduxg1LocationNumber,Pmduxg1PmsDefGlSubline,Pmduxg1ClassCodeGroup,Pmduxg1ClassCodeMember,Pmduxg1ClassCode,Pmduxg1RiskSequence,Pmduxg1RiskTypeInd ORDER BY Pmduxg1IncLimitTableInd) = 1\n),\nLKP_Pif43UXWCStage AS (\n\tSELECT\n\tPmdu4w1Rate,\n\tin_pif_symbol,\n\tin_pif_policy_number,\n\tin_pif_module,\n\tin_sar_insurance_line,\n\tin_sar_location_x,\n\tin_sar_state,\n\tlkp_sar_class_1_4,\n\tin_sar_class_5_6,\n\tin_sar_seq_no,\n\tin_sar_cov_eff_year,\n\tin_sar_cov_eff_month,\n\tin_sar_cov_eff_day,\n\tin_ClassCodeSeq,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmdu4w1InsuranceLine,\n\tPmdu4w1WcRatingState,\n\tPmdu4w1LocationNumber,\n\tPmdu4w1ClassCode,\n\tPmdu4w1SplitRateSeq,\n\tPmdu4w1YearItemEffective,\n\tPmdu4w1MonthItemEffective,\n\tPmdu4w1DayItemEffective,\n\tPmdu4w1ClassCodeSeq\n\tFROM (\n\t\tSELECT L.Pmdu4w1Rate as Pmdu4w1Rate, \r\n\t\tL.PifSymbol as PifSymbol, \r\n\t\tL.PifPolicyNumber as PifPolicyNumber, \r\n\t\tL.PifModule as PifModule, \r\n\t\tL.Pmdu4w1InsuranceLine as Pmdu4w1InsuranceLine, \r\n\t\tL.Pmdu4w1WcRatingState as Pmdu4w1WcRatingState, \r\n\t\tL.Pmdu4w1LocationNumber as Pmdu4w1LocationNumber, \r\n\t\tLTRIM(RTRIM(L.Pmdu4w1ClassCode)) as Pmdu4w1ClassCode, \r\n\t\tL.Pmdu4w1ClassDescInd as Pmdu4w1ClassDescInd, \r\n\t\tL.Pmdu4w1SplitRateSeq as Pmdu4w1SplitRateSeq, \r\n\t\tL.Pmdu4w1YearItemEffective as Pmdu4w1YearItemEffective, \r\n\t\tL.Pmdu4w1MonthItemEffective as Pmdu4w1MonthItemEffective, \r\n\t\tL.Pmdu4w1DayItemEffective as Pmdu4w1DayItemEffective, \r\n\t\tL.Pmdu4w1ClassCodeSeq as Pmdu4w1ClassCodeSeq \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UXWCStage L\r\n\t\tWHERE L.Pif43UXWCStageId in (\r\n\t\tselect max(Pif43UXWCStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UXWCStage B\r\n\t\twhere L.PifSymbol=B.PifSymbol\r\n\t\tand L.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand L.PifModule=B.PifModule\r\n\t\tand B.Pmdu4w1WcRatingState=L.Pmdu4w1WcRatingState\r\n\t\tand B.Pmdu4w1LocationNumber=L.Pmdu4w1LocationNumber\r\n\t\tand B.Pmdu4w1ClassCode=L.Pmdu4w1ClassCode\r\n\t\tand B.Pmdu4w1ClassDescInd=L.Pmdu4w1ClassDescInd\r\n\t\tand B.Pmdu4w1SplitRateSeq=L.Pmdu4w1SplitRateSeq\r\n\t\t--and B.Pmdu4w1PremiumBasisAmt=L.Pmdu4w1PremiumBasisAmt\r\n\t\tand B.Pmdu4w1YearItemEffective=L.Pmdu4w1YearItemEffective\r\n\t\tand B.Pmdu4w1MonthItemEffective=L.Pmdu4w1MonthItemEffective\r\n\t\tand B.Pmdu4w1DayItemEffective=L.Pmdu4w1DayItemEffective\r\n\t\tand B.Pmdu4w1ClassCodeSeq=L.Pmdu4w1ClassCodeSeq)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmdu4w1InsuranceLine,Pmdu4w1WcRatingState,Pmdu4w1LocationNumber,Pmdu4w1ClassCode,Pmdu4w1SplitRateSeq,Pmdu4w1YearItemEffective,Pmdu4w1MonthItemEffective,Pmdu4w1DayItemEffective,Pmdu4w1ClassCodeSeq ORDER BY Pmdu4w1Rate) = 1\n),\nLKP_Pif43UYGLStage AS (\n\tSELECT\n\tPmduyg1PkgModFactor,\n\tPmduyg1IncreaseLimitsFactor,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule,\n\tPmduyg1InsuranceLine,\n\tPmduyg1LocationNumber,\n\tPmduyg1PmsDefGlSubline,\n\tPmduyg1RiskSequence,\n\tPmduyg1RiskTypeInd,\n\tPmduyg1ClassCode,\n\tPmduyg1YearItemEffective,\n\tPmduyg1MonthItemEffective,\n\tPmduyg1DayItemEffective\n\tFROM (\n\t\tSELECT F.Pmduyg1PkgModFactor as Pmduyg1PkgModFactor, \r\n\t\tF.Pmduyg1IncreaseLimitsFactor as Pmduyg1IncreaseLimitsFactor, \r\n\t\tF.PifSymbol as PifSymbol, \r\n\t\tF.PifPolicyNumber as PifPolicyNumber, \r\n\t\tF.PifModule as PifModule, \r\n\t\tF.Pmduyg1InsuranceLine as Pmduyg1InsuranceLine, \r\n\t\tF.Pmduyg1LocationNumber as Pmduyg1LocationNumber, \r\n\t\tF.Pmduyg1PmsDefGlSubline as Pmduyg1PmsDefGlSubline, \r\n\t\tF.Pmduyg1RiskSequence as Pmduyg1RiskSequence, \r\n\t\tCase When LEN(LTRIM(RTRIM(F.Pmduyg1RiskTypeInd)))=0 Then 'B' Else F.Pmduyg1RiskTypeInd end as Pmduyg1RiskTypeInd, \r\n\t\tF.Pmduyg1ClassCode as Pmduyg1ClassCode, \r\n\t\tF.Pmduyg1YearItemEffective as Pmduyg1YearItemEffective, \r\n\t\tF.Pmduyg1MonthItemEffective as Pmduyg1MonthItemEffective, \r\n\t\tF.Pmduyg1DayItemEffective as Pmduyg1DayItemEffective\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UYGLStage F\r\n\t\tWHERE F.Pif43UYGLStageId in (\r\n\t\tselect max(Pif43UYGLStageID) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UYGLStage B\r\n\t\twhere F.PifSymbol=B.PifSymbol\r\n\t\tand F.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand F.PifModule=B.PifModule\r\n\t\tand B.Pmduyg1InsuranceLine=F.Pmduyg1InsuranceLine\r\n\t\tand B.Pmduyg1LocationNumber=F.Pmduyg1LocationNumber\r\n\t\tand B.Pmduyg1PmsDefGlSubline=F.Pmduyg1PmsDefGlSubline\r\n\t\tand B.Pmduyg1RiskSequence=F.Pmduyg1RiskSequence\r\n\t\tand B.Pmduyg1RiskTypeInd=F.Pmduyg1RiskTypeInd\r\n\t\tand B.Pmduyg1ClassCode=F.Pmduyg1ClassCode\r\n\t\tand B.Pmduyg1YearItemEffective=F.Pmduyg1YearItemEffective\r\n\t\tand B.Pmduyg1MonthItemEffective=F.Pmduyg1MonthItemEffective\r\n\t\tand B.Pmduyg1DayItemEffective=F.Pmduyg1DayItemEffective)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule,Pmduyg1InsuranceLine,Pmduyg1LocationNumber,Pmduyg1PmsDefGlSubline,Pmduyg1RiskSequence,Pmduyg1RiskTypeInd,Pmduyg1ClassCode,Pmduyg1YearItemEffective,Pmduyg1MonthItemEffective,Pmduyg1DayItemEffective ORDER BY Pmduyg1PkgModFactor) = 1\n),\nLKP_Pif43UZWCStage AS (\n\tSELECT\n\tPmdu4w1Rate,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifPolicyModule,\n\tPMDU4W1InsuranceLine,\n\tPMDU4W1WCRatingState,\n\tPMDU4W1LocationNumber,\n\tPMDU4W1ClassCode,\n\tPMDU4W1SplitRateSeq,\n\tPMDU4W1YearItemEffective,\n\tPMDU4W1MonthItemEffective,\n\tPMDU4W1DayItemEffective,\n\tPMDU4W1ClassCodeSeq\n\tFROM (\n\t\tSELECT L.Pmdu4w1Rate as Pmdu4w1Rate, \r\n\t\tL.PifSymbol as PifSymbol, \r\n\t\tL.PifPolicyNumber as PifPolicyNumber, \r\n\t\tL.PifPolicyModule as PifPolicyModule, \r\n\t\tL.Pmdu4w1InsuranceLine as Pmdu4w1InsuranceLine, \r\n\t\tL.Pmdu4w1WcRatingState as Pmdu4w1WcRatingState, \r\n\t\tL.Pmdu4w1LocationNumber as Pmdu4w1LocationNumber, \r\n\t\tLTRIM(RTRIM(L.Pmdu4w1ClassCode)) as Pmdu4w1ClassCode, \r\n\t\tL.Pmdu4w1ClassDescInd as Pmdu4w1ClassDescInd, \r\n\t\tL.Pmdu4w1SplitRateSeq as Pmdu4w1SplitRateSeq, \r\n\t\tL.Pmdu4w1YearItemEffective as Pmdu4w1YearItemEffective, \r\n\t\tL.Pmdu4w1MonthItemEffective as Pmdu4w1MonthItemEffective, \r\n\t\tL.Pmdu4w1DayItemEffective as Pmdu4w1DayItemEffective, \r\n\t\tL.Pmdu4w1ClassCodeSeq as Pmdu4w1ClassCodeSeq \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UZWCStage L\r\n\t\tWHERE L.Pif43UZWCStageId in (\r\n\t\tselect max(Pif43UZWCStageId) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43UZWCStage B\r\n\t\twhere L.PifSymbol=B.PifSymbol\r\n\t\tand L.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand L.PifPolicyModule=B.PifPolicyModule\r\n\t\tand B.Pmdu4w1WcRatingState=L.Pmdu4w1WcRatingState\r\n\t\tand B.Pmdu4w1LocationNumber=L.Pmdu4w1LocationNumber\r\n\t\tand B.Pmdu4w1ClassCode=L.Pmdu4w1ClassCode\r\n\t\tand B.Pmdu4w1ClassDescInd=L.Pmdu4w1ClassDescInd\r\n\t\tand B.Pmdu4w1SplitRateSeq=L.Pmdu4w1SplitRateSeq\r\n\t\tand B.Pmdu4w1YearItemEffective=L.Pmdu4w1YearItemEffective\r\n\t\tand B.Pmdu4w1MonthItemEffective=L.Pmdu4w1MonthItemEffective\r\n\t\tand B.Pmdu4w1DayItemEffective=L.Pmdu4w1DayItemEffective\r\n\t\tand B.Pmdu4w1ClassCodeSeq =L.Pmdu4w1ClassCodeSeq )\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifPolicyModule,PMDU4W1InsuranceLine,PMDU4W1WCRatingState,PMDU4W1LocationNumber,PMDU4W1ClassCode,PMDU4W1SplitRateSeq,PMDU4W1YearItemEffective,PMDU4W1MonthItemEffective,PMDU4W1DayItemEffective,PMDU4W1ClassCodeSeq ORDER BY Pmdu4w1Rate) = 1\n),\nLKP_PifPUHM17Stage AS (\n\tSELECT\n\tHRRConstruction,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifPolicyModule,\n\tHRRUnitAlph,\n\tHRRZipCode,\n\tHRRCountyLocation,\n\tHRRCityLocation\n\tFROM (\n\t\tSELECT M.HRRConstruction as HRRConstruction, \r\n\t\tM.PifSymbol as PifSymbol, \r\n\t\tM.PifPolicyNumber as PifPolicyNumber, \r\n\t\tM.PifPolicyModule as PifPolicyModule, \r\n\t\t(case M.HRRUnitAlph \r\n\t\t      when '0' then '1'\r\n\t\t      when '1' then '2' \r\n\t\t      when '2' then '3' \r\n\t\t else \r\n\t\t      '-1' \r\n\t\t end) as HRRUnitAlph, \r\n\t\tLTRIM(RTRIM(M.HRRZipCode)) as HRRZipCode, \r\n\t\tLTRIM(RTRIM(M.HRRCountyLocation)) as HRRCountyLocation, \r\n\t\tLTRIM(RTRIM(M.HRRCityLocation)) as HRRCityLocation \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PifPUHM17Stage M\r\n\t\tWHERE M.PifPUHM17StageID in (\r\n\t\tselect max(PifPUHM17StageID) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PifPUHM17Stage B\r\n\t\twhere M.PifSymbol=B.PifSymbol\r\n\t\tand M.PifPolicyNumber=B.PifPolicyNumber\r\n\t\tand M.PifPolicyModule=B.PifPolicyModule\r\n\t\tand M.HRRUnitAlph=B.HRRUnitAlph\r\n\t\tand M.HRRTerritory=B.HRRTerritory\r\n\t\tand M.HRRZipCode=B.HRRZipCode\r\n\t\tand M.HRRCountyLocation=B.HRRCountyLocation\r\n\t\tand M.HRRCityLocation=B.HRRCityLocation)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifPolicyModule,HRRUnitAlph,HRRZipCode,HRRCountyLocation,HRRCityLocation ORDER BY HRRConstruction) = 1\n),\nLKP_Policy_PolicyAKID AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT policy.pol_ak_id as pol_ak_id, ltrim(rtrim(policy.pol_key)) as pol_key FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\r\n\t\tWHERE crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id DESC) = 1\n),\nLKP_pif_02_stage AS (\n\tSELECT\n\tpif_eff_yr_a,\n\tpif_eff_mo_a,\n\tpif_eff_da_a,\n\tCLBCode,\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module\n\tFROM (\n\t\tSELECT N.pif_eff_yr_a as pif_eff_yr_a, \r\n\t\tN.pif_eff_mo_a as pif_eff_mo_a, \r\n\t\tN.pif_eff_da_a as pif_eff_da_a, \r\n\t\tN.pif_symbol as pif_symbol, \r\n\t\tN.pif_policy_number as pif_policy_number, \r\n\t\tN.pif_module as pif_module ,\r\n\t\tN.wb_class_of_business as CLBCode \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_02_stage N\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pif_symbol,pif_policy_number,pif_module ORDER BY pif_eff_yr_a) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tLKP_Policy_PolicyAKID.pol_ak_id,\n\tEXP_Default.Policy_Key,\n\tEXP_Default.sar_location_x,\n\t-- *INF*: LTRIM(RTRIM(sar_location_x))\n\tLTRIM(RTRIM(sar_location_x)) AS v_RiskLocation_Unit,\n\tEXP_Default.sar_state,\n\t-- *INF*: LTRIM(RTRIM(sar_state))\n\tLTRIM(RTRIM(sar_state)) AS v_sar_state,\n\tv_sar_state AS o_sar_state,\n\tEXP_Default.sar_loc_prov_territory,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory)\r\n\t-- \r\n\t-- --IIF(ISNULL(sar_loc_prov_territory) OR IS_SPACES(sar_loc_prov_territory) OR LENGTH(sar_loc_prov_territory) = 0, 'N/A',\r\n\t-- -- LTRIM(RTRIM(sar_loc_prov_territory)))\r\n\t-- \r\n\t-- \r\n\t-- \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory) AS v_sar_loc_prov_territory,\n\tEXP_Default.sar_city,\n\t-- *INF*: LTRIM(RTRIM(sar_city))\r\n\t-- \r\n\t-- --IIF(IS_SPACES(LTRIM(RTRIM(sar_city)))  OR ISNULL(LTRIM(RTRIM(sar_city))) OR LENGTH(LTRIM(RTRIM(sar_city))) < 3, '000', LTRIM(RTRIM(sar_city)))\r\n\t-- \r\n\t-- \n\tLTRIM(RTRIM(sar_city)) AS v_sar_city,\n\t-- *INF*: IIF(REG_MATCH(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city) ,'(\\d{6})')\r\n\t-- ,:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city)\r\n\t-- ,'000000')\r\n\t-- \r\n\t-- --v_sar_county_first_two  ||  v_sar_county_last_one  ||  v_sar_city\r\n\t-- \r\n\t-- --IIF(ISNULL(Tax_Location)  OR IS_SPACES(Tax_Location)  OR LENGTH(Tax_Location) = 0 , '000000', Tax_Location)\n\tIFF(REG_MATCH(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city), '(\\d{6})'), :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city), '000000') AS v_Tax_Location,\n\tEXP_Default.sar_zip_postal_code,\n\t-- *INF*: IIF(ISNULL(sar_zip_postal_code)  OR IS_SPACES(sar_zip_postal_code)  OR LENGTH(sar_zip_postal_code) = 0 , 'N/A', LTRIM(RTRIM(sar_zip_postal_code)))\n\tIFF(sar_zip_postal_code IS NULL OR IS_SPACES(sar_zip_postal_code) OR LENGTH(sar_zip_postal_code) = 0, 'N/A', LTRIM(RTRIM(sar_zip_postal_code))) AS v_sar_zip_postal_code,\n\t-- *INF*: :LKP.LKP_RISKLOCATION_RISKLOCATIONAKID(pol_ak_id, v_RiskLocation_Unit, v_sar_loc_prov_territory, v_sar_state, v_sar_zip_postal_code, v_Tax_Location)\n\tLKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.RiskLocationAKID AS v_RiskLocationAKID,\n\tEXP_Default.sar_insurance_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_insurance_line)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_insurance_line) AS v_sar_insurance_line,\n\tEXP_Default.sar_type_bureau,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_type_bureau)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_type_bureau) AS v_sar_type_bureau,\n\tEXP_Default.sar_sub_location_x,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_location_x)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_location_x) AS v_sar_sub_location_x,\n\tEXP_Default.sar_risk_unit_group,\n\t-- *INF*: IIF(REG_MATCH(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group) ,'(\\d{3})')\r\n\t-- ,:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group)\r\n\t-- ,'N/A')\r\n\t-- \r\n\t-- ---- Checking the length of the field to 3 and all the positions of the field are any one of 0-9, if it is not then we are defaulting it to 'N/A', by this way we are cleansing junk values from the source.\r\n\t-- \r\n\t-- \r\n\t-- ---:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group)\n\tIFF(REG_MATCH(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group), '(\\d{3})'), :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_risk_unit_group), 'N/A') AS v_sar_risk_unit_group,\n\tEXP_Default.sar_class_code_grp_x,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_class_code_grp_x)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_class_code_grp_x) AS v_sar_class_code_grp_x,\n\tEXP_Default.sar_unit,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_unit)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_unit) AS v_sar_unit,\n\t-- *INF*: SUBSTR(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_unit),1,3)\n\tSUBSTR(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_unit), 1, 3) AS v_sar_unit_3pos,\n\tEXP_Default.sar_seq_rsk_unt_a,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_rsk_unt_a)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_rsk_unt_a) AS v_sar_seq_rsk_unt_a,\n\tEXP_Default.sar_type_exposure,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_type_exposure)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_type_exposure) AS v_sar_type_exposure,\n\tEXP_Default.sar_major_peril,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_major_peril)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_major_peril) AS v_sar_major_peril,\n\tEXP_Default.sar_seq_no,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_no)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_seq_no) AS v_sar_seq_no,\n\t-- *INF*: LTRIM(RTRIM(v_sar_seq_no))\n\tLTRIM(RTRIM(v_sar_seq_no)) AS o_sar_seq_no,\n\tEXP_Default.sar_cov_eff_year,\n\t-- *INF*: TO_CHAR(sar_cov_eff_year)\n\tTO_CHAR(sar_cov_eff_year) AS v_sar_cov_eff_year,\n\tEXP_Default.sar_cov_eff_month,\n\t-- *INF*: TO_CHAR(sar_cov_eff_month)\n\tTO_CHAR(sar_cov_eff_month) AS v_sar_cov_eff_month,\n\tEXP_Default.sar_cov_eff_day,\n\t-- *INF*: TO_CHAR(sar_cov_eff_day)\n\tTO_CHAR(sar_cov_eff_day) AS v_sar_cov_eff_day,\n\t-- *INF*: TO_DATE(v_sar_cov_eff_month || '/' || v_sar_cov_eff_day || '/'|| v_sar_cov_eff_year ,'MM/DD/YYYY')\n\tTO_DATE(v_sar_cov_eff_month || '/' || v_sar_cov_eff_day || '/' || v_sar_cov_eff_year, 'MM/DD/YYYY') AS v_sar_cov_eff_date,\n\tEXP_Default.sar_agents_comm_rate,\n\t-- *INF*: IIF(ISNULL(sar_agents_comm_rate) , 0.00000 , sar_agents_comm_rate)\n\tIFF(sar_agents_comm_rate IS NULL, 0.00000, sar_agents_comm_rate) AS v_sar_agents_comm_rate,\n\t-- *INF*: MD5(TO_CHAR(pol_ak_id)  || \r\n\t--  TO_CHAR(v_RiskLocationAKID)  || \r\n\t--  TO_CHAR(v_sar_insurance_line)  || \r\n\t--  TO_CHAR(v_sar_type_bureau) )\n\tMD5(TO_CHAR(pol_ak_id) || TO_CHAR(v_RiskLocationAKID) || TO_CHAR(v_sar_insurance_line) || TO_CHAR(v_sar_type_bureau)) AS v_PolicyCoverageHashKey,\n\t-- *INF*: :LKP.LKP_POLICYCOVERAGE_POLICYCOVERAGEAKID(v_PolicyCoverageHashKey)\n\tLKP_POLICYCOVERAGE_POLICYCOVERAGEAKID_v_PolicyCoverageHashKey.PolicyCoverageAKID AS v_PolicyCoverageAKID,\n\tEXP_Default.sar_section,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_section)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_section) AS v_sar_section,\n\tEXP_Default.sar_class_1_4 AS sar_class_code,\n\tEXP_Default.lkp_sar_class_1_4 AS in_sar_class_1_4,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_class_1_4)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_class_1_4) AS v_sar_class_1_4,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_class_code)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_class_code) AS v_sar_class_code,\n\tEXP_Default.out_lkp_sar_class_1_4,\n\tEXP_Default.sar_exposure,\n\t-- *INF*: IIF(ISNULL(sar_exposure),0,IIF(IN(ltrim(rtrim(v_sar_class_code)),'770901','090801','0913','091301','091342', '910801','9108A','942801','942802') AND IN( ltrim(rtrim( sar_code_13)),'U','UA','UD','UP') AND ltrim(rtrim(v_sar_insurance_line))='WC', sar_exposure/10,sar_exposure))\r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(sar_exposure IS NULL, 0, IFF(IN(ltrim(rtrim(v_sar_class_code)), '770901', '090801', '0913', '091301', '091342', '910801', '9108A', '942801', '942802') AND IN(ltrim(rtrim(sar_code_13)), 'U', 'UA', 'UD', 'UP') AND ltrim(rtrim(v_sar_insurance_line)) = 'WC', sar_exposure / 10, sar_exposure)) AS v_sar_exposure,\n\t-- *INF*: IIF(ISNULL(sar_exposure),0,IIF(IN(ltrim(rtrim(v_sar_class_code)),'770901','090801','0913','091301','091342', '910801','9108A','942801','942802') AND IN( ltrim(rtrim( sar_code_13)),'U','UA','UD','UP') AND ltrim(rtrim(v_sar_insurance_line))='WC', sar_exposure/10, IIF(ltrim(rtrim(v_sar_insurance_line))='WC',sar_exposure, 0)))\n\tIFF(sar_exposure IS NULL, 0, IFF(IN(ltrim(rtrim(v_sar_class_code)), '770901', '090801', '0913', '091301', '091342', '910801', '9108A', '942801', '942802') AND IN(ltrim(rtrim(sar_code_13)), 'U', 'UA', 'UD', 'UP') AND ltrim(rtrim(v_sar_insurance_line)) = 'WC', sar_exposure / 10, IFF(ltrim(rtrim(v_sar_insurance_line)) = 'WC', sar_exposure, 0))) AS v_writtenexposure,\n\t-- *INF*: TO_CHAR(sar_cov_eff_year) || LPAD(TO_CHAR(LTRIM(RTRIM(sar_cov_eff_month))), 2, '0') || LPAD(TO_CHAR(LTRIM(RTRIM(sar_cov_eff_day))), 2, '0')\n\tTO_CHAR(sar_cov_eff_year) || LPAD(TO_CHAR(LTRIM(RTRIM(sar_cov_eff_month))), 2, '0') || LPAD(TO_CHAR(LTRIM(RTRIM(sar_cov_eff_day))), 2, '0') AS v_cov_eff_date,\n\t-- *INF*: TO_DATE(v_cov_eff_date, 'YYYYMMDD')\n\tTO_DATE(v_cov_eff_date, 'YYYYMMDD') AS cov_eff_date,\n\tEXP_Default.sar_sub_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_line)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_sub_line) AS v_sar_sub_line,\n\t-- *INF*: MD5(\r\n\t-- IIF(ISNULL(v_PolicyCoverageAKID),'-1',TO_CHAR(v_PolicyCoverageAKID))   || \r\n\t-- v_sar_sub_location_x   || \r\n\t-- v_sar_risk_unit_group   || \r\n\t-- v_sar_class_code_grp_x   || \r\n\t-- v_sar_unit   || \r\n\t-- v_sar_seq_rsk_unt_a   || \r\n\t-- v_sar_major_peril   || \r\n\t-- v_sar_seq_no   || \r\n\t-- v_sar_sub_line   || \r\n\t-- v_sar_type_exposure   || \r\n\t-- v_sar_class_code   || \r\n\t-- v_sar_section\r\n\t-- )\n\tMD5(IFF(v_PolicyCoverageAKID IS NULL, '-1', TO_CHAR(v_PolicyCoverageAKID)) || v_sar_sub_location_x || v_sar_risk_unit_group || v_sar_class_code_grp_x || v_sar_unit || v_sar_seq_rsk_unt_a || v_sar_major_peril || v_sar_seq_no || v_sar_sub_line || v_sar_type_exposure || v_sar_class_code || v_sar_section) AS v_CoverageDetailHashKey,\n\t-- *INF*: :LKP.LKP_STATISTICALCOVERAGE_STATISTICALCOVERAGEAKID(v_CoverageDetailHashKey)\n\tLKP_STATISTICALCOVERAGE_STATISTICALCOVERAGEAKID_v_CoverageDetailHashKey.StatisticalCoverageAKID AS v_CoverageDetailAKID,\n\t-- *INF*: IIF(NOT ISNULL(v_CoverageDetailAKID), v_CoverageDetailAKID, -1)\n\tIFF(NOT v_CoverageDetailAKID IS NULL, v_CoverageDetailAKID, - 1) AS CoverageDetailAKID,\n\tEXP_Default.sar_id,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_id)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_id) AS v_PMSFunctionCode,\n\tv_PMSFunctionCode AS PMSFunctionCode,\n\tEXP_Default.sar_part_code,\n\t-- *INF*: IIF(sar_part_code = '1', 'D','C')\n\tIFF(sar_part_code = '1', 'D', 'C') AS v_PremiumType,\n\tv_PremiumType AS PremiumType,\n\tEXP_Default.sar_trans_eff_year,\n\t-- *INF*: TO_CHAR(sar_trans_eff_year)\n\tTO_CHAR(sar_trans_eff_year) AS v_sar_trans_eff_year,\n\tEXP_Default.sar_trans_eff_month,\n\t-- *INF*: IIF(TO_CHAR(sar_trans_eff_month) = '0','1',TO_CHAR(sar_trans_eff_month)\r\n\t-- )\n\tIFF(TO_CHAR(sar_trans_eff_month) = '0', '1', TO_CHAR(sar_trans_eff_month)) AS v_sar_trans_eff_month,\n\tEXP_Default.sar_trans_eff_day,\n\t-- *INF*: IIF(TO_CHAR(sar_trans_eff_day) ='0','1',TO_CHAR(sar_trans_eff_day))\n\tIFF(TO_CHAR(sar_trans_eff_day) = '0', '1', TO_CHAR(sar_trans_eff_day)) AS v_sar_trans_eff_day,\n\t-- *INF*: TO_DATE(v_sar_trans_eff_month || '/' || v_sar_trans_eff_day || '/'|| v_sar_trans_eff_year ,'MM/DD/YYYY')\n\tTO_DATE(v_sar_trans_eff_month || '/' || v_sar_trans_eff_day || '/' || v_sar_trans_eff_year, 'MM/DD/YYYY') AS v_sar_trans_eff_date,\n\tv_sar_trans_eff_date AS Trans_eff_date,\n\tEXP_Default.sar_reinsurance_company_no,\n\tEXP_Default.sar_entrd_date,\n\t-- *INF*: TO_DATE(sar_entrd_date,'YYYYMMDD')\n\tTO_DATE(sar_entrd_date, 'YYYYMMDD') AS v_sar_entrd_date,\n\tv_sar_entrd_date AS Trans_entered_date,\n\tEXP_Default.sar_exp_year,\n\t-- *INF*: TO_CHAR(sar_exp_year)\n\tTO_CHAR(sar_exp_year) AS v_sar_exp_year,\n\tEXP_Default.sar_exp_month,\n\t-- *INF*: TO_CHAR(sar_exp_month)\n\tTO_CHAR(sar_exp_month) AS v_sar_exp_month,\n\tEXP_Default.sar_exp_day,\n\t-- *INF*: TO_CHAR(sar_exp_day)\n\tTO_CHAR(sar_exp_day) AS v_sar_exp_day,\n\t-- *INF*: TO_DATE(v_sar_exp_month || '/' || v_sar_exp_day || '/'|| v_sar_exp_year ,'MM/DD/YYYY')\n\tTO_DATE(v_sar_exp_month || '/' || v_sar_exp_day || '/' || v_sar_exp_year, 'MM/DD/YYYY') AS v_sar_exp_date,\n\tv_sar_exp_date AS Trans_expiration_date,\n\tEXP_Default.sar_transaction,\n\tEXP_Default.sar_premium,\n\tEXP_Default.sar_original_prem,\n\tEXP_Default.sar_acct_entrd_date,\n\t-- *INF*: TO_DATE('01'  || sar_acct_entrd_date, 'DDYYYYMM')\n\tTO_DATE('01' || sar_acct_entrd_date, 'DDYYYYMM') AS v_sar_acct_entrd_date,\n\t-- *INF*: TO_DATE('12312100', 'MMDDYYYY')\n\tTO_DATE('12312100', 'MMDDYYYY') AS v_dummy_start_date,\n\t-- *INF*: TO_DATE('01011800', 'MMDDYYYY')\n\tTO_DATE('01011800', 'MMDDYYYY') AS v_dummy_end_date,\n\tv_sar_acct_entrd_date AS Trans_Booked_date,\n\t-- *INF*: :LKP.LKP_POLICY_STRTGC_BUS_DIV_CODE(pol_ak_id)\n\tLKP_POLICY_STRTGC_BUS_DIV_CODE_pol_ak_id.strtgc_bus_dvsn_code AS v_PolicyStrategicBusinessDivisionCode,\n\tEXP_Default.sar_faculta_comm_rate,\n\t-- *INF*: IIF(ISNULL(sar_faculta_comm_rate),0.0,sar_faculta_comm_rate)\n\tIFF(sar_faculta_comm_rate IS NULL, 0.0, sar_faculta_comm_rate) AS v_sar_faculta_comm_rate,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--              NULL, \r\n\t--             :LKP.LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES(pol_ak_id, v_sar_insurance_line, v_RiskLocation_Unit, v_sar_sub_location_x, v_sar_section, sar_reinsurance_company_no,v_sar_faculta_comm_rate,v_sar_trans_eff_date, v_sar_exp_date)\r\n\t--           )\r\n\t--          )\r\n\t-- \r\n\t-- ---- This provides a full key match with location, sublocation and date bounds along with insurance line for CL with InsuranceLine <> 'N/A'\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_cov_ak_id)) AS v_ReinsuranceCoverageAKID_CommercialLineslocsubwd,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--              NULL, \r\n\t--              IIF (ISNULL(v_ReinsuranceCoverageAKID_CommercialLineslocsubwd),\r\n\t--                   :LKP.LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES(pol_ak_id, v_sar_insurance_line,   v_RiskLocation_Unit, v_sar_sub_location_x, v_sar_section, sar_reinsurance_company_no,v_sar_faculta_comm_rate, v_dummy_start_date, v_dummy_end_date),\r\n\t--     v_ReinsuranceCoverageAKID_CommercialLineslocsubwd)\r\n\t--                 )\r\n\t--              )\r\n\t--                    \r\n\t-- --- This provides a full key match with location, sublocation and no date bounds along with insurance line for CL with InsuranceLine <> 'N/A' , we try this lookup if a full key match fails. The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, IFF(v_ReinsuranceCoverageAKID_CommercialLineslocsubwd IS NULL, LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_CommercialLineslocsubwd))) AS v_ReinsuranceCoverageAKID_CommercialLineslocsub,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--            NULL, \r\n\t--               IIF(ISNULL(v_ReinsuranceCoverageAKID_CommercialLineslocsub),\r\n\t--            :LKP.LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION(pol_ak_id, v_sar_insurance_line, v_RiskLocation_Unit, v_sar_section, sar_reinsurance_company_no,v_sar_faculta_comm_rate, v_sar_trans_eff_date, v_sar_exp_date),\r\n\t--              v_ReinsuranceCoverageAKID_CommercialLineslocsub)\r\n\t--                 )\r\n\t--             )\r\n\t-- \r\n\t-- --- This provides a full key match with location, no sublocation and date bounds along with insurance line for CL with InsuranceLine <> 'N/A', we try this only if a full key match failed\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, IFF(v_ReinsuranceCoverageAKID_CommercialLineslocsub IS NULL, LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_CommercialLineslocsub))) AS v_ReinsuranceCoverageAKID_CommercialLines_locwd,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--            NULL,\r\n\t--               IIF(ISNULL (v_ReinsuranceCoverageAKID_CommercialLines_locwd),\r\n\t--                 :LKP.LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION(pol_ak_id, v_sar_insurance_line, v_RiskLocation_Unit, v_sar_section, sar_reinsurance_company_no,v_sar_faculta_comm_rate, v_dummy_start_date,v_dummy_end_date),\r\n\t--                  v_ReinsuranceCoverageAKID_CommercialLines_locwd)\r\n\t--                  )\r\n\t--            )\r\n\t-- \r\n\t-- ---- This provides a full key match with location, no sublocation and no date bounds along with insurance line for CL with InsuranceLine <> 'N/A', we try this also if there was no full key match or match with date range and location alone. The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, IFF(v_ReinsuranceCoverageAKID_CommercialLines_locwd IS NULL, LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_CommercialLines_locwd))) AS v_ReinsuranceCoverageAKID_CommercialLines_loc,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--            NULL,\r\n\t--             IIF(ISNULL(v_ReinsuranceCoverageAKID_CommercialLines_loc),\r\n\t-- :LKP.LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT(pol_ak_id,v_sar_insurance_line,sar_reinsurance_company_no,v_sar_section, v_sar_faculta_comm_rate,v_sar_trans_eff_date, v_sar_exp_date),\r\n\t--             v_ReinsuranceCoverageAKID_CommercialLines_loc)\r\n\t--                  )\r\n\t--          )\r\n\t-- \r\n\t-- --- When we are not getting a hit on commercial line policies using location and sublocation or only location with and without dates,  we just default to a lookup on polakid, insline, reinscompanyno, sectioncode with dates\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, IFF(v_ReinsuranceCoverageAKID_CommercialLines_loc IS NULL, LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_CommercialLines_loc))) AS v_ReinsuranceCoverageAKID_CommercialLines_defwd,\n\t-- *INF*: IIF (v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--        NULL,\r\n\t--         IIF (v_sar_insurance_line = 'N/A',\r\n\t--            NULL,\r\n\t--                 IIF(ISNULL(v_ReinsuranceCoverageAKID_CommercialLines_defwd),\r\n\t-- :LKP.LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT(pol_ak_id,v_sar_insurance_line,sar_reinsurance_company_no,v_sar_section,v_sar_faculta_comm_rate, v_dummy_start_date,v_dummy_end_date),\r\n\t--                  v_ReinsuranceCoverageAKID_CommercialLines_defwd)\r\n\t--                 )\r\n\t--           )\r\n\t-- \r\n\t-- ---- When we are not getting a hit on commercial line policies using location and sublocation or only location with and without dates,  or even default key with dates we finally default to a lookup on polakid, insline, reinscompanyno, sectioncode without dates, The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_PolicyStrategicBusinessDivisionCode = '1', NULL, IFF(v_sar_insurance_line = 'N/A', NULL, IFF(v_ReinsuranceCoverageAKID_CommercialLines_defwd IS NULL, LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_CommercialLines_defwd))) AS v_ReinsuranceCoverageAKID_CommercialLines_def,\n\t-- *INF*: IIF(v_sar_insurance_line = 'N/A' or v_PolicyStrategicBusinessDivisionCode = '1', :LKP.LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES(pol_ak_id, v_sar_unit_3pos,\r\n\t-- v_sar_section,sar_reinsurance_company_no,v_sar_faculta_comm_rate,v_sar_trans_eff_date, v_sar_exp_date),NULL)\r\n\t-- \r\n\t-- ------- This provides a full key match with reinsurance risk unit, section code, reinsurance company number and date bounds along for PL and CL with InsuranceLine = 'N/A'\r\n\t-- \n\tIFF(v_sar_insurance_line = 'N/A' OR v_PolicyStrategicBusinessDivisionCode = '1', LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_cov_ak_id, NULL) AS v_ReinsuranceCoverageAKID_PersonalLineswd,\n\t-- *INF*: IIF(v_sar_insurance_line = 'N/A' or v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--  IIF(ISNULL(v_ReinsuranceCoverageAKID_PersonalLineswd),      \r\n\t--        :LKP.LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES(pol_ak_id, v_sar_unit_3pos,\r\n\t-- v_sar_section,sar_reinsurance_company_no,v_sar_faculta_comm_rate,v_dummy_start_date, v_dummy_end_date),\r\n\t--        v_ReinsuranceCoverageAKID_PersonalLineswd), NULL\r\n\t--          )\r\n\t-- \r\n\t-- --- ------- This provides a full key match with reinsurance risk unit, section code, reinsurance company number and no date date bounds along for PL and CL with InsuranceLine = 'N/A' if we don't get a hit with dates. The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_sar_insurance_line = 'N/A' OR v_PolicyStrategicBusinessDivisionCode = '1', IFF(v_ReinsuranceCoverageAKID_PersonalLineswd IS NULL, LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_PersonalLineswd), NULL) AS v_ReinsuranceCoverageAKID_PersonalLines,\n\t-- *INF*: IIF(v_sar_insurance_line = 'N/A' or v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--    IIF(ISNULL(v_ReinsuranceCoverageAKID_PersonalLines),        \r\n\t--      :LKP.LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT(pol_ak_id, \r\n\t-- v_sar_section,sar_reinsurance_company_no,v_sar_faculta_comm_rate,v_sar_trans_eff_date, v_sar_exp_date),\r\n\t--       v_ReinsuranceCoverageAKID_PersonalLines), NULL\r\n\t--        )\r\n\t-- \r\n\t-- ------------- This provides a default key match with section code, reinsurance company number and date bounds for PL and CL with InsuranceLine = 'N/A' if we don't get a hit with full key including risk unit with and without dates. The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_sar_insurance_line = 'N/A' OR v_PolicyStrategicBusinessDivisionCode = '1', IFF(v_ReinsuranceCoverageAKID_PersonalLines IS NULL, LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_PersonalLines), NULL) AS v_ReinsuranceCoverageAKID_PersonalLines_defwd,\n\t-- *INF*: IIF(v_sar_insurance_line = 'N/A' or v_PolicyStrategicBusinessDivisionCode = '1', \r\n\t--  IIF(ISNULL(v_ReinsuranceCoverageAKID_PersonalLines_defwd),      \r\n\t--        :LKP.LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT(pol_ak_id, \r\n\t-- v_sar_section,sar_reinsurance_company_no,v_sar_faculta_comm_rate,v_dummy_start_date, v_dummy_end_date),\r\n\t--        v_ReinsuranceCoverageAKID_PersonalLines_defwd), NULL\r\n\t--          )\r\n\t-- \r\n\t-- ------------- This provides a default key match with section code, reinsurance company number and no date bounds for PL and CL with InsuranceLine = 'N/A' if we don't get a hit with full key including risk unit with and without dates or default key with dates. The dummy date ports allow us to reuse the existing lookups with datebounds that satisfy the condition\n\tIFF(v_sar_insurance_line = 'N/A' OR v_PolicyStrategicBusinessDivisionCode = '1', IFF(v_ReinsuranceCoverageAKID_PersonalLines_defwd IS NULL, LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_cov_ak_id, v_ReinsuranceCoverageAKID_PersonalLines_defwd), NULL) AS v_ReinsuranceCoverageAKID_PersonalLines_def,\n\t-- *INF*: IIF(v_sar_insurance_line = 'N/A' or v_PolicyStrategicBusinessDivisionCode = '1' , v_ReinsuranceCoverageAKID_PersonalLines_def, v_ReinsuranceCoverageAKID_CommercialLines_def)\r\n\t-- \r\n\t-- \r\n\t-- ---- If the Strategic Business DivisionCode value is 1 then get the personalline lookup value otherwise commerciallines lookup value.\n\tIFF(v_sar_insurance_line = 'N/A' OR v_PolicyStrategicBusinessDivisionCode = '1', v_ReinsuranceCoverageAKID_PersonalLines_def, v_ReinsuranceCoverageAKID_CommercialLines_def) AS v_ReinsuranceCoverageAKID_PL_CL,\n\t-- *INF*: IIF(sar_part_code = '4',IIF(ISNULL(v_ReinsuranceCoverageAKID_PL_CL), -1, v_ReinsuranceCoverageAKID_PL_CL),-1)\n\tIFF(sar_part_code = '4', IFF(v_ReinsuranceCoverageAKID_PL_CL IS NULL, - 1, v_ReinsuranceCoverageAKID_PL_CL), - 1) AS v_ReinsuranceCoverageAKID,\n\tv_ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID,\n\tEXP_Default.sar_rsn_amend_one,\n\tEXP_Default.sar_rsn_amend_two,\n\tEXP_Default.sar_rsn_amend_three,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_rsn_amend_one  ||  sar_rsn_amend_two || sar_rsn_amend_three)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_rsn_amend_one || sar_rsn_amend_two || sar_rsn_amend_three) AS v_sar_rsn_amend_code,\n\tv_sar_rsn_amend_code AS Reason_amend_code,\n\t-- *INF*: Policy_Key  ||  TO_CHAR(v_PolicyCoverageAKID)\n\tPolicy_Key || TO_CHAR(v_PolicyCoverageAKID) AS v_CoverageKey,\n\t-- *INF*: Policy_Key  ||  TO_CHAR(v_PolicyCoverageAKID)\n\tPolicy_Key || TO_CHAR(v_PolicyCoverageAKID) AS CoverageKey,\n\t-- *INF*: MD5(\r\n\t-- TO_CHAR(v_ReinsuranceCoverageAKID)  ||  \r\n\t-- TO_CHAR(v_CoverageDetailAKID)  ||  \r\n\t-- TO_CHAR(v_PMSFunctionCode)  ||  \r\n\t-- TO_CHAR(sar_transaction)  ||  \r\n\t-- TO_CHAR(v_sar_entrd_date)  ||  \r\n\t-- TO_CHAR(v_sar_trans_eff_date)  ||  \r\n\t-- TO_CHAR(v_sar_exp_date)  ||  \r\n\t-- TO_CHAR(v_sar_acct_entrd_date)  ||  \r\n\t-- TO_CHAR(sar_premium)  ||  \r\n\t-- TO_CHAR(sar_original_prem)  ||  \r\n\t-- TO_CHAR(v_PremiumType)  ||  \r\n\t-- TO_CHAR(v_sar_rsn_amend_code) \r\n\t-- )\n\tMD5(TO_CHAR(v_ReinsuranceCoverageAKID) || TO_CHAR(v_CoverageDetailAKID) || TO_CHAR(v_PMSFunctionCode) || TO_CHAR(sar_transaction) || TO_CHAR(v_sar_entrd_date) || TO_CHAR(v_sar_trans_eff_date) || TO_CHAR(v_sar_exp_date) || TO_CHAR(v_sar_acct_entrd_date) || TO_CHAR(sar_premium) || TO_CHAR(sar_original_prem) || TO_CHAR(v_PremiumType) || TO_CHAR(v_sar_rsn_amend_code)) AS v_PremiumTransactionHashKey,\n\tv_PremiumTransactionHashKey AS PremiumTransactionHashKey,\n\t-- *INF*: IIF(Policy_Key = v_prev_row_Pol_Key, v_prev_row_Premium_Sequence + 1,1)\n\tIFF(Policy_Key = v_prev_row_Pol_Key, v_prev_row_Premium_Sequence + 1, 1) AS v_premium_sequence,\n\tv_premium_sequence AS PremiumLoadSequence,\n\tv_premium_sequence AS v_prev_row_Premium_Sequence,\n\t-- *INF*: IIF(v_prev_row_CoverageDetailAKID = v_CoverageDetailAKID AND \r\n\t-- v_prev_row_ReinsuranceCoverageAKID = v_ReinsuranceCoverageAKID AND\r\n\t-- v_prev_row_PMSFunctionCode = v_PMSFunctionCode AND\r\n\t-- v_prev_row_sar_entrd_date = v_sar_entrd_date AND\r\n\t-- v_prev_row_sar_trans_eff_date = v_sar_trans_eff_date AND\r\n\t-- v_prev_row_sar_premium = sar_premium AND\r\n\t-- v_prev_row_sar_acct_entrd_date = v_sar_acct_entrd_date AND\r\n\t-- v_prev_row_sar_transaction = sar_transaction AND\r\n\t-- v_prev_row_sar_exp_date = v_sar_exp_date AND\r\n\t-- v_prev_row_sar_original_prem = sar_original_prem AND\r\n\t-- v_prev_row_PremiumType = v_PremiumType AND\r\n\t-- v_prev_row_sar_rsn_amend_code = v_sar_rsn_amend_code\r\n\t-- , v_DuplicateSequenceNum + 1,1)\n\tIFF(v_prev_row_CoverageDetailAKID = v_CoverageDetailAKID AND v_prev_row_ReinsuranceCoverageAKID = v_ReinsuranceCoverageAKID AND v_prev_row_PMSFunctionCode = v_PMSFunctionCode AND v_prev_row_sar_entrd_date = v_sar_entrd_date AND v_prev_row_sar_trans_eff_date = v_sar_trans_eff_date AND v_prev_row_sar_premium = sar_premium AND v_prev_row_sar_acct_entrd_date = v_sar_acct_entrd_date AND v_prev_row_sar_transaction = sar_transaction AND v_prev_row_sar_exp_date = v_sar_exp_date AND v_prev_row_sar_original_prem = sar_original_prem AND v_prev_row_PremiumType = v_PremiumType AND v_prev_row_sar_rsn_amend_code = v_sar_rsn_amend_code, v_DuplicateSequenceNum + 1, 1) AS v_DuplicateSequenceNum,\n\tv_DuplicateSequenceNum AS DuplicateSequenceNum,\n\tPolicy_Key AS v_prev_row_Pol_Key,\n\tv_CoverageDetailAKID AS v_prev_row_CoverageDetailAKID,\n\tv_ReinsuranceCoverageAKID AS v_prev_row_ReinsuranceCoverageAKID,\n\tv_PMSFunctionCode AS v_prev_row_PMSFunctionCode,\n\tv_sar_entrd_date AS v_prev_row_sar_entrd_date,\n\tv_sar_trans_eff_date AS v_prev_row_sar_trans_eff_date,\n\tsar_premium AS v_prev_row_sar_premium,\n\tv_sar_acct_entrd_date AS v_prev_row_sar_acct_entrd_date,\n\tsar_transaction AS v_prev_row_sar_transaction,\n\tv_sar_exp_date AS v_prev_row_sar_exp_date,\n\tsar_original_prem AS v_prev_row_sar_original_prem,\n\tv_PremiumType AS v_prev_row_PremiumType,\n\tv_sar_rsn_amend_code AS v_prev_row_sar_rsn_amend_code,\n\tv_DuplicateSequenceNum AS v_prev_row_DuplicateSequenceNum,\n\tsar_location_x AS v_prev_row_sar_location_x,\n\t'' AS sar_zip_postal_code1,\n\t'' AS sar_insurance_line1,\n\t'' AS sar_type_bureau1,\n\t'' AS sar_sub_location_x1,\n\t'' AS sar_risk_unit_group1,\n\t'' AS sar_class_code_grp_x1,\n\t'' AS sar_unit1,\n\t'' AS sar_seq_rsk_unt_a1,\n\t'' AS sar_type_exposure1,\n\t'' AS sar_major_peril1,\n\t'' AS sar_seq_no1,\n\tsar_state AS v_prev_row_sar_state,\n\tsar_loc_prov_territory AS v_prev_row_sar_loc_prov_territory,\n\tsar_city AS v_prev_row_sar_city,\n\tEXP_Default.sar_annual_state_line,\n\tEXP_Default.sar_special_use,\n\tEXP_Default.sar_stat_breakdown_line,\n\tEXP_Default.sar_user_line,\n\tEXP_Default.sar_rating_date_ind,\n\tEXP_Default.sar_code_1,\n\tEXP_Default.sar_code_2,\n\tEXP_Default.sar_code_3,\n\tEXP_Default.sar_code_4,\n\tEXP_Default.sar_code_5,\n\tEXP_Default.sar_code_6,\n\tEXP_Default.sar_code_7,\n\tEXP_Default.sar_code_8,\n\tEXP_Default.sar_code_9,\n\tEXP_Default.sar_code_10,\n\tEXP_Default.sar_code_11,\n\tEXP_Default.sar_code_12,\n\tEXP_Default.sar_code_13,\n\tEXP_Default.sar_code_14,\n\tEXP_Default.sar_code_15,\n\tEXP_Default.sar_audit_reinst_ind,\n\tEXP_Default.logical_flag,\n\tEXP_Default.sar_company_number AS in_sar_company_number,\n\tLKP_Pif43NXCPStage.Pmdnxp1OtherMod AS in_Pmdnxp1OtherMod,\n\tLKP_Pif43NXCPStage.Pmdnxp1CspConstrCod AS in_Pmdnxp1CspConstrCod,\n\tLKP_Pif43NXCPStage.Pmdnxp1ProtectionClassPart1 AS in_Pmdnxp1ProtectionClassPart1,\n\tLKP_Pif43NXCPStage.Pmdnxp1YearBuilt AS in_Pmdnxp1YearBuilt,\n\tLKP_Pif43NXCPStage.Pmdnxp1Irpm AS in_Pmdnxp1Irpm,\n\tLKP_Pif43LXZWCStage.Pmdl4w1RatingProgramType AS in_Pmdl4w1RatingProgramType,\n\tLKP_Pif43LXZWCStage.Pmdl4w1PolicyType AS in_Pmdl4w1PolicyType,\n\tLKP_Pif43IXUnmodStage.Pif43IXUnmodWCRatingState AS in_Pif43IXUnmodWCRatingState,\n\tLKP_Pif43IXUnmodStage.Pif43IXUnmodReportingClassCode AS in_Pif43IXUnmodReportingClassCode,\n\tLKP_Pif43UYGLStage.Pmduyg1PkgModFactor AS in_Pmduyg1PkgModFactor,\n\tLKP_Pif43UYGLStage.Pmduyg1IncreaseLimitsFactor AS in_Pmduyg1IncreaseLimitsFactor,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1YearItemEffective AS in_Pmdi4w1YearItemEffective,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1MonthItemEffective AS in_Pmdi4w1MonthItemEffective,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1DayItemEffective AS in_Pmdi4w1DayItemEffective,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1ModifierDesc AS in_Pmdi4w1ModifierDesc,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1ModifierRate AS in_Pmdi4w1ModifierRate,\n\tLKP_Pif43IXZWCModStage.Pmdi4w1ModifierPremBasis AS in_Pmdi4w1ModifierPremBasis,\n\tLKP_Pif43UXGLStage.Pmduxg1IncLimitTableInd AS in_Pmduxg1IncLimitTableInd,\n\tLKP_Pif43UXGLStage.Pmduxg1PmaCode AS in_Pmduxg1PmaCode,\n\tLKP_Pif43RXCPStage.Pmdrxp1PmaCode AS in_Pmdrxp1PmaCode,\n\tLKP_Pif43RXCPStage.wb_class_of_business AS in_wb_class_of_business,\n\tLKP_PIF43NXCRStage.PMDNXC1PmaCode AS in_PMDNXC1PmaCode,\n\tLKP_PIF43NXCRStage.wb_class_of_business AS in_wb_class_of_business_cr,\n\tEXP_Default.Out_PMACode AS in_PMACode,\n\tLKP_pif_02_stage.CLBCode AS Lkp_CLBCode,\n\tLKP_Pif43LXGLStage.Pmdlxg1YearRetro AS in_Pmdlxg1YearRetro,\n\tLKP_Pif43LXGLStage.Pmdlxg1MonthRetro AS in_Pmdlxg1MonthRetro,\n\tLKP_Pif43LXGLStage.Pmdlxg1DayRetro AS in_Pmdlxg1DayRetro,\n\tLKP_Pif43UXWCStage.Pmdu4w1Rate AS in_Pmdu4w1Rate,\n\tLKP_Pif43UZWCStage.Pmdu4w1Rate AS in_Pmdu4w1Rate_UZWC,\n\tLKP_PifPUHM17Stage.HRRConstruction AS in_HRRConstruction,\n\tLKP_pif_02_stage.pif_eff_yr_a AS in_pif_eff_yr_a,\n\tLKP_pif_02_stage.pif_eff_mo_a AS in_pif_eff_mo_a,\n\tLKP_pif_02_stage.pif_eff_da_a AS in_pif_eff_da_a,\n\tLKP_Pif350Stage.PackageModificationAssignment AS in_PackageModificationAssignment,\n\tLKP_Pif43RXIMStage.PMDRXI1Irpm AS in_PMDRXI1Irpm,\n\tLKP_Pif43RXGLStage.Pmdrxg1ScheduleMod AS in_Pmdrxg1ScheduleMod,\n\tLKP_Pif43LXGAStage.PMDLXA1PmaCode AS in_PMDLXA1PmaCode,\n\t-- *INF*: LTRIM(RTRIM(in_wb_class_of_business_cr))\n\tLTRIM(RTRIM(in_wb_class_of_business_cr)) AS v_wb_class_of_business_cr,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_sar_type_bureau='FT',LTRIM(RTRIM(sar_code_4)),\r\n\t-- v_sar_type_bureau='BT',LTRIM(RTRIM(sar_code_7)),\r\n\t-- v_sar_type_bureau='CR',LTRIM(RTRIM(sar_code_11)),\r\n\t-- '00'\r\n\t-- )\n\tDECODE(TRUE,\n\tv_sar_type_bureau = 'FT', LTRIM(RTRIM(sar_code_4)),\n\tv_sar_type_bureau = 'BT', LTRIM(RTRIM(sar_code_7)),\n\tv_sar_type_bureau = 'CR', LTRIM(RTRIM(sar_code_11)),\n\t'00') AS v_OriginalPMACode_CR,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMACode)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMACode) AS v_PMACode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PackageModificationAssignment)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PackageModificationAssignment) AS v_PackageModificationAssignment,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmduxg1PmaCode)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmduxg1PmaCode) AS v_Pmduxg1PmaCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdrxp1PmaCode)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdrxp1PmaCode) AS v_Pmdrxp1PmaCode,\n\t-- *INF*: IIF(ISNULL(in_wb_class_of_business) OR IS_SPACES(in_wb_class_of_business) OR LENGTH(in_wb_class_of_business)=0, '00', LTRIM(RTRIM(in_wb_class_of_business)))\n\tIFF(in_wb_class_of_business IS NULL OR IS_SPACES(in_wb_class_of_business) OR LENGTH(in_wb_class_of_business) = 0, '00', LTRIM(RTRIM(in_wb_class_of_business))) AS v_wb_class_of_business,\n\t-- *INF*: IIF(NOT ISNULL(in_Pmdnxp1OtherMod), in_Pmdnxp1OtherMod, 0)\n\tIFF(NOT in_Pmdnxp1OtherMod IS NULL, in_Pmdnxp1OtherMod, 0) AS v_Pmdnxp1OtherMod,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMDNXC1PmaCode)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMDNXC1PmaCode) AS v_PMDNXC1PmaCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMDLXA1PmaCode)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PMDLXA1PmaCode) AS v_PMDLXA1PmaCode,\n\t-- *INF*: DECODE(v_PMACode,\r\n\t-- 'N/A', 'N/A' ,\r\n\t-- '10','N/A',\r\n\t-- '31','MH',\r\n\t-- '32','A',\r\n\t-- '33','O',\r\n\t-- '34', 'M',\r\n\t-- '35', IIF(Lkp_CLBCode ='AL' ,'AL', 'I'),\r\n\t-- '36','N/A', \r\n\t-- '37', IIF(Lkp_CLBCode = 'I'  , 'MW',IIF(Lkp_CLBCode ='O' , 'WW' ,'IP')) ,\r\n\t-- '38', IIF(Lkp_CLBCode = 'AG' , 'AG' , IIF(Lkp_CLBCode = 'AM', 'AM', 'C')),\r\n\t-- v_PMACode)\r\n\t-- \n\tDECODE(v_PMACode,\n\t'N/A', 'N/A',\n\t'10', 'N/A',\n\t'31', 'MH',\n\t'32', 'A',\n\t'33', 'O',\n\t'34', 'M',\n\t'35', IFF(Lkp_CLBCode = 'AL', 'AL', 'I'),\n\t'36', 'N/A',\n\t'37', IFF(Lkp_CLBCode = 'I', 'MW', IFF(Lkp_CLBCode = 'O', 'WW', 'IP')),\n\t'38', IFF(Lkp_CLBCode = 'AG', 'AG', IFF(Lkp_CLBCode = 'AM', 'AM', 'C')),\n\tv_PMACode) AS v_PMACODE_IM,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- v_OriginalPMACode_CR = '','N/A',\r\n\t-- v_OriginalPMACode_CR='10','N/A',\r\n\t-- v_OriginalPMACode_CR='31','MH',\r\n\t-- v_OriginalPMACode_CR='32','A',\r\n\t-- v_OriginalPMACode_CR='33','O',\r\n\t-- v_OriginalPMACode_CR='34','M',\r\n\t-- v_OriginalPMACode_CR='35' and v_wb_class_of_business_cr = 'AL','AL',\r\n\t-- v_OriginalPMACode_CR='35','I',\r\n\t-- v_OriginalPMACode_CR='36', v_PMDNXC1PmaCode,\r\n\t-- v_OriginalPMACode_CR='37' and v_wb_class_of_business_cr = 'I','MW',\r\n\t-- v_OriginalPMACode_CR='37' and v_wb_class_of_business_cr = 'O','WW',\r\n\t-- v_OriginalPMACode_CR='37','IP',\r\n\t-- v_OriginalPMACode_CR='38' and v_wb_class_of_business_cr = 'AG','AG',\r\n\t-- v_OriginalPMACode_CR='38' and v_wb_class_of_business_cr = 'AM','AM',\r\n\t-- v_OriginalPMACode_CR='38','C',\r\n\t-- 'N/A'\r\n\t-- )\n\tDECODE(TRUE,\n\tv_OriginalPMACode_CR = '', 'N/A',\n\tv_OriginalPMACode_CR = '10', 'N/A',\n\tv_OriginalPMACode_CR = '31', 'MH',\n\tv_OriginalPMACode_CR = '32', 'A',\n\tv_OriginalPMACode_CR = '33', 'O',\n\tv_OriginalPMACode_CR = '34', 'M',\n\tv_OriginalPMACode_CR = '35' AND v_wb_class_of_business_cr = 'AL', 'AL',\n\tv_OriginalPMACode_CR = '35', 'I',\n\tv_OriginalPMACode_CR = '36', v_PMDNXC1PmaCode,\n\tv_OriginalPMACode_CR = '37' AND v_wb_class_of_business_cr = 'I', 'MW',\n\tv_OriginalPMACode_CR = '37' AND v_wb_class_of_business_cr = 'O', 'WW',\n\tv_OriginalPMACode_CR = '37', 'IP',\n\tv_OriginalPMACode_CR = '38' AND v_wb_class_of_business_cr = 'AG', 'AG',\n\tv_OriginalPMACode_CR = '38' AND v_wb_class_of_business_cr = 'AM', 'AM',\n\tv_OriginalPMACode_CR = '38', 'C',\n\t'N/A') AS v_PMACODE_CR,\n\t-- *INF*: IIF(v_sar_insurance_line='CF', v_Pmdnxp1OtherMod, 0)\n\tIFF(v_sar_insurance_line = 'CF', v_Pmdnxp1OtherMod, 0) AS v_PreferredPropertyFactor,\n\t-- *INF*: IIF(ISNULL(sar_code_1) OR IS_SPACES(sar_code_1) OR LENGTH(sar_code_1)=0, '0', sar_code_1)\n\tIFF(sar_code_1 IS NULL OR IS_SPACES(sar_code_1) OR LENGTH(sar_code_1) = 0, '0', sar_code_1) AS v_sar_code_1,\n\t-- *INF*: IIF(ISNULL(sar_code_2) OR IS_SPACES(sar_code_2) OR LENGTH(sar_code_2)=0, '0', sar_code_2)\n\tIFF(sar_code_2 IS NULL OR IS_SPACES(sar_code_2) OR LENGTH(sar_code_2) = 0, '0', sar_code_2) AS v_sar_code_2,\n\t-- *INF*: IIF(ISNULL(sar_code_3) OR IS_SPACES(sar_code_3) OR LENGTH(sar_code_3)=0, '0', sar_code_3)\n\tIFF(sar_code_3 IS NULL OR IS_SPACES(sar_code_3) OR LENGTH(sar_code_3) = 0, '0', sar_code_3) AS v_sar_code_3,\n\t-- *INF*: IIF(ISNULL(sar_code_4) OR IS_SPACES(sar_code_4) OR LENGTH(sar_code_4)=0, '00', LTRIM(RTRIM(sar_code_4)))\n\tIFF(sar_code_4 IS NULL OR IS_SPACES(sar_code_4) OR LENGTH(sar_code_4) = 0, '00', LTRIM(RTRIM(sar_code_4))) AS v_sar_code_4,\n\t-- *INF*: IIF(ISNULL(sar_code_5) OR IS_SPACES(sar_code_5) OR LENGTH(sar_code_5)=0, '00', LTRIM(RTRIM(sar_code_5)))\n\tIFF(sar_code_5 IS NULL OR IS_SPACES(sar_code_5) OR LENGTH(sar_code_5) = 0, '00', LTRIM(RTRIM(sar_code_5))) AS v_sar_code_5,\n\t-- *INF*: IIF(ISNULL(sar_code_6) OR IS_SPACES(sar_code_6) OR LENGTH(sar_code_6)=0, '000', LTRIM(RTRIM(sar_code_6)))\n\tIFF(sar_code_6 IS NULL OR IS_SPACES(sar_code_6) OR LENGTH(sar_code_6) = 0, '000', LTRIM(RTRIM(sar_code_6))) AS v_sar_code_6,\n\t-- *INF*: IIF(ISNULL(sar_code_7) OR IS_SPACES(sar_code_7) OR LENGTH(sar_code_7)=0, '000', LTRIM(RTRIM(sar_code_7)))\n\tIFF(sar_code_7 IS NULL OR IS_SPACES(sar_code_7) OR LENGTH(sar_code_7) = 0, '000', LTRIM(RTRIM(sar_code_7))) AS v_sar_code_7,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_sar_code_6 = '32' , 'A',\r\n\t-- v_sar_code_6 = '38' and  IN (v_wb_class_of_business, 'AG', 'AM')=0, 'C',\r\n\t-- v_sar_code_6 = '35' and IN(v_wb_class_of_business, 'AL')=0, 'I',\r\n\t-- v_sar_code_6 = '37' and IN(v_wb_class_of_business,  'I', 'O')=0, 'IP',\r\n\t-- v_sar_code_6 = '34' , 'M',\r\n\t-- v_sar_code_6 = '31' , 'MH',\r\n\t-- v_sar_code_6 = '33',  'O',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'S' , 'S',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'TA', 'TA',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'BA', 'BA',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'AD', 'AD',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'TD','TD',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'BD', 'BD',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'N' , 'N',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'TN', 'TN',\r\n\t-- v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'BN' , 'BN',\r\n\t-- v_sar_code_6 = '38' and v_wb_class_of_business = 'AG', 'AG',\r\n\t-- v_sar_code_6 = '38' and v_wb_class_of_business = 'AM','AM',\r\n\t-- v_sar_code_6 = '37' and v_wb_class_of_business = 'I' , 'MW',\r\n\t-- v_sar_code_6 = '37' and v_wb_class_of_business = 'O','WW',\r\n\t-- (v_sar_code_6 = '35' and v_wb_class_of_business = 'AL') OR (v_sar_code_6 = '45'), 'AL',\r\n\t-- (v_sar_code_6 = '36' and v_Pmdrxp1PmaCode= 'HC') OR (v_sar_code_6 = '46'), 'HC',\r\n\t-- v_sar_code_6 = '10' or v_sar_code_6='000',  'N/A',\r\n\t-- v_Pmdrxp1PmaCode)\n\tDECODE(TRUE,\n\tv_sar_code_6 = '32', 'A',\n\tv_sar_code_6 = '38' AND IN(v_wb_class_of_business, 'AG', 'AM') = 0, 'C',\n\tv_sar_code_6 = '35' AND IN(v_wb_class_of_business, 'AL') = 0, 'I',\n\tv_sar_code_6 = '37' AND IN(v_wb_class_of_business, 'I', 'O') = 0, 'IP',\n\tv_sar_code_6 = '34', 'M',\n\tv_sar_code_6 = '31', 'MH',\n\tv_sar_code_6 = '33', 'O',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'S', 'S',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'TA', 'TA',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'BA', 'BA',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'AD', 'AD',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'TD', 'TD',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'BD', 'BD',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'N', 'N',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'TN', 'TN',\n\tv_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'BN', 'BN',\n\tv_sar_code_6 = '38' AND v_wb_class_of_business = 'AG', 'AG',\n\tv_sar_code_6 = '38' AND v_wb_class_of_business = 'AM', 'AM',\n\tv_sar_code_6 = '37' AND v_wb_class_of_business = 'I', 'MW',\n\tv_sar_code_6 = '37' AND v_wb_class_of_business = 'O', 'WW',\n\t( v_sar_code_6 = '35' AND v_wb_class_of_business = 'AL' ) OR ( v_sar_code_6 = '45' ), 'AL',\n\t( v_sar_code_6 = '36' AND v_Pmdrxp1PmaCode = 'HC' ) OR ( v_sar_code_6 = '46' ), 'HC',\n\tv_sar_code_6 = '10' OR v_sar_code_6 = '000', 'N/A',\n\tv_Pmdrxp1PmaCode) AS v_Pmdrxp1PmaCode_Final,\n\t-- *INF*: IIF(ISNULL(in_sar_company_number), 0, in_sar_company_number)\n\tIFF(in_sar_company_number IS NULL, 0, in_sar_company_number) AS v_sar_company_number,\n\t-- *INF*: to_char(in_Pmdlxg1YearRetro) || LPAD(to_char(in_Pmdlxg1MonthRetro), 2, '0')  || LPAD(to_char(in_Pmdlxg1DayRetro), 2, '0')\n\tto_char(in_Pmdlxg1YearRetro) || LPAD(to_char(in_Pmdlxg1MonthRetro), 2, '0') || LPAD(to_char(in_Pmdlxg1DayRetro), 2, '0') AS v_RetroactiveDate,\n\t-- *INF*: IIF(ISNULL(in_Pif43IXUnmodWCRatingState) OR IS_SPACES(in_Pif43IXUnmodWCRatingState) OR LENGTH(in_Pif43IXUnmodWCRatingState)=0, '00', LTRIM(RTRIM(in_Pif43IXUnmodWCRatingState)))\n\tIFF(in_Pif43IXUnmodWCRatingState IS NULL OR IS_SPACES(in_Pif43IXUnmodWCRatingState) OR LENGTH(in_Pif43IXUnmodWCRatingState) = 0, '00', LTRIM(RTRIM(in_Pif43IXUnmodWCRatingState))) AS v_Pif43IXUnmodWCRatingState,\n\t-- *INF*: IIF(ISNULL(in_Pif43IXUnmodReportingClassCode) OR IS_SPACES(in_Pif43IXUnmodReportingClassCode) OR LENGTH(in_Pif43IXUnmodReportingClassCode)=0, '0000', LTRIM(RTRIM(in_Pif43IXUnmodReportingClassCode)))\n\tIFF(in_Pif43IXUnmodReportingClassCode IS NULL OR IS_SPACES(in_Pif43IXUnmodReportingClassCode) OR LENGTH(in_Pif43IXUnmodReportingClassCode) = 0, '0000', LTRIM(RTRIM(in_Pif43IXUnmodReportingClassCode))) AS v_Pif43IXUnmodReportingClassCode,\n\t-- *INF*: IIF(ISNULL(in_Pmdi4w1ModifierRate), 0, in_Pmdi4w1ModifierRate)\n\tIFF(in_Pmdi4w1ModifierRate IS NULL, 0, in_Pmdi4w1ModifierRate) AS v_Pmdi4w1ModifierRate,\n\t-- *INF*: IIF(ISNULL(in_Pmdnxp1YearBuilt), '0000', TO_CHAR(in_Pmdnxp1YearBuilt))\n\tIFF(in_Pmdnxp1YearBuilt IS NULL, '0000', TO_CHAR(in_Pmdnxp1YearBuilt)) AS v_Pmdnxp1YearBuilt,\n\t-- *INF*: TO_CHAR(in_Pmdi4w1YearItemEffective) || LPAD(TO_CHAR(LTRIM(RTRIM(in_Pmdi4w1MonthItemEffective))), 2, '0') || LPAD(TO_CHAR(LTRIM(RTRIM(in_Pmdi4w1DayItemEffective))), 2, '0')\n\tTO_CHAR(in_Pmdi4w1YearItemEffective) || LPAD(TO_CHAR(LTRIM(RTRIM(in_Pmdi4w1MonthItemEffective))), 2, '0') || LPAD(TO_CHAR(LTRIM(RTRIM(in_Pmdi4w1DayItemEffective))), 2, '0') AS v_ExperienceModificationEffectiveDate,\n\t-- *INF*: IIF(ISNULL(in_Pmdnxp1CspConstrCod), 'N/A', TO_CHAR(in_Pmdnxp1CspConstrCod))\n\tIFF(in_Pmdnxp1CspConstrCod IS NULL, 'N/A', TO_CHAR(in_Pmdnxp1CspConstrCod)) AS v_Pmdnxp1CspConstrCod,\n\t-- *INF*: IIF(ISNULL(in_HRRConstruction) OR IS_SPACES(in_HRRConstruction) OR LENGTH(in_HRRConstruction)=0, 'N/A', LTRIM(RTRIM(in_HRRConstruction)))\n\tIFF(in_HRRConstruction IS NULL OR IS_SPACES(in_HRRConstruction) OR LENGTH(in_HRRConstruction) = 0, 'N/A', LTRIM(RTRIM(in_HRRConstruction))) AS v_HRRConstruction,\n\tin_pif_eff_yr_a||in_pif_eff_mo_a||in_pif_eff_da_a AS v_StateRatingEffectiveDate,\n\t-- *INF*: IIF(ISNULL(in_Pmdi4w1ModifierPremBasis),0,in_Pmdi4w1ModifierPremBasis)\n\tIFF(in_Pmdi4w1ModifierPremBasis IS NULL, 0, in_Pmdi4w1ModifierPremBasis) AS v_Pmdi4w1ModifierPremBasis,\n\t-- *INF*: LTRIM(RTRIM(:LKP.LKP_PIF11STAGE(Policy_Key)))\n\tLTRIM(RTRIM(LKP_PIF11STAGE_Policy_Key.DocumentText)) AS v_DocumentText,\n\t-- *INF*: LTRIM(RTRIM(REPLACESTR(TRUE,DECODE(TRUE,\r\n\t-- LENGTH(v_DocumentText)>14,SUBSTR(v_DocumentText,8,LENGTH(v_DocumentText)-14),\r\n\t-- LENGTH(v_DocumentText)<=14,SUBSTR(v_DocumentText,8),\r\n\t-- '0'),',','')))\n\tLTRIM(RTRIM(REPLACESTR(TRUE, DECODE(TRUE,\n\tLENGTH(v_DocumentText) > 14, SUBSTR(v_DocumentText, 8, LENGTH(v_DocumentText) - 14),\n\tLENGTH(v_DocumentText) <= 14, SUBSTR(v_DocumentText, 8),\n\t'0'), ',', ''))) AS v_DocumentText_Trim,\n\tEXP_Default.pif_4514_stage_id,\n\tLKP_Pif43RXCPStage.Pmdrxp1WindAndHail,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_sar_insurance_line='IM',\r\n\t-- DECODE(v_sar_code_7, '02', '50', '03', '100', '04', '250', '05', '500', '06', '750', '07', '1000', '08', '2500', '09', '5000', '10', '10000', '11', '25000', '90', 'over 25000', '0'),\r\n\t-- v_sar_insurance_line='CF',\r\n\t-- DECODE(v_sar_code_5, '01', 'FullCoverage', '03', '100', '04', '250', '05', '500', '07', '1000', '08', '2500', '09', '5000', '10', '10000', '11', '25000', '12', '50000', '13', '75000', '0'),\r\n\t-- v_sar_insurance_line='GL',\r\n\t-- DECODE(v_sar_code_4 || v_sar_code_6, '0101', 'FullCoverage', '0'),\r\n\t-- v_sar_insurance_line= 'CR' and v_sar_company_number=20,\r\n\t-- DECODE(v_sar_code_7, '0', 'Blank', '100', '100', '0'),\r\n\t-- v_sar_insurance_line= 'CR' and v_sar_company_number != 20,\r\n\t-- DECODE(v_sar_code_7, '04', '250', '05', '500', '07', '1000', '08', '2500', '09', '5000', '10', '10000', '11', '25000', '0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '12' and v_Pif43IXUnmodReportingClassCode = '9931','1000',\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '13',DECODE(v_Pif43IXUnmodReportingClassCode,'9940','500','9941','1000','9942','1500','9943','2000','9944','2500','9900','3000','9904','3500','9905','4000','9906','4500','9945','5000','9915','500','9916','1000','9917','1500','9918','2000','9919','2500','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '15',DECODE(v_Pif43IXUnmodReportingClassCode,'9940','500','9941','1000','9942','1500','9943','2000','9944','2500','9945','5000','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '21' and v_Pif43IXUnmodReportingClassCode = '9664',DECODE(v_Pmdi4w1ModifierPremBasis,500,'500',1000,'1000',1500,'1500',2000,'2000',2500,'2500','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '22',DECODE(v_Pif43IXUnmodReportingClassCode,'9940','500','9941','1000','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '24',DECODE(v_Pif43IXUnmodReportingClassCode,'9940','500','9941','1000','9942','1500','9943','2000','9944','2500','9945','5000','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '26' and v_Pif43IXUnmodReportingClassCode = '9664',DECODE(v_Pmdi4w1ModifierPremBasis,500,'500',1000,'1000',1500,'1500',2000,'2000',2500,'2500','0'),\r\n\t-- v_sar_insurance_line = 'WC' and v_Pif43IXUnmodWCRatingState = '14' and IN(v_DocumentText_Trim,'100','150','200','250','300','350','400','450','500','550','600','650','700','750','800','850','900','950','1000','1050','2000','2050','3000','3050','4000','4050','5000','5050','6000','6050','7000','7050','8000','8050','9000','9050','10000'),v_DocumentText_Trim,\r\n\t-- --EDWP 4517\r\n\t-- v_sar_type_bureau= 'PI',\r\n\t-- DECODE(v_sar_code_5,'01','0','03','50','10','100','25','250','50','500','82','1000','99','10000','0'),\r\n\t-- '0')\n\tDECODE(TRUE,\n\tv_sar_insurance_line = 'IM', DECODE(v_sar_code_7,\n\t'02', '50',\n\t'03', '100',\n\t'04', '250',\n\t'05', '500',\n\t'06', '750',\n\t'07', '1000',\n\t'08', '2500',\n\t'09', '5000',\n\t'10', '10000',\n\t'11', '25000',\n\t'90', 'over 25000',\n\t'0'),\n\tv_sar_insurance_line = 'CF', DECODE(v_sar_code_5,\n\t'01', 'FullCoverage',\n\t'03', '100',\n\t'04', '250',\n\t'05', '500',\n\t'07', '1000',\n\t'08', '2500',\n\t'09', '5000',\n\t'10', '10000',\n\t'11', '25000',\n\t'12', '50000',\n\t'13', '75000',\n\t'0'),\n\tv_sar_insurance_line = 'GL', DECODE(v_sar_code_4 || v_sar_code_6,\n\t'0101', 'FullCoverage',\n\t'0'),\n\tv_sar_insurance_line = 'CR' AND v_sar_company_number = 20, DECODE(v_sar_code_7,\n\t'0', 'Blank',\n\t'100', '100',\n\t'0'),\n\tv_sar_insurance_line = 'CR' AND v_sar_company_number != 20, DECODE(v_sar_code_7,\n\t'04', '250',\n\t'05', '500',\n\t'07', '1000',\n\t'08', '2500',\n\t'09', '5000',\n\t'10', '10000',\n\t'11', '25000',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '12' AND v_Pif43IXUnmodReportingClassCode = '9931', '1000',\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '13', DECODE(v_Pif43IXUnmodReportingClassCode,\n\t'9940', '500',\n\t'9941', '1000',\n\t'9942', '1500',\n\t'9943', '2000',\n\t'9944', '2500',\n\t'9900', '3000',\n\t'9904', '3500',\n\t'9905', '4000',\n\t'9906', '4500',\n\t'9945', '5000',\n\t'9915', '500',\n\t'9916', '1000',\n\t'9917', '1500',\n\t'9918', '2000',\n\t'9919', '2500',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '15', DECODE(v_Pif43IXUnmodReportingClassCode,\n\t'9940', '500',\n\t'9941', '1000',\n\t'9942', '1500',\n\t'9943', '2000',\n\t'9944', '2500',\n\t'9945', '5000',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '21' AND v_Pif43IXUnmodReportingClassCode = '9664', DECODE(v_Pmdi4w1ModifierPremBasis,\n\t500, '500',\n\t1000, '1000',\n\t1500, '1500',\n\t2000, '2000',\n\t2500, '2500',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '22', DECODE(v_Pif43IXUnmodReportingClassCode,\n\t'9940', '500',\n\t'9941', '1000',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '24', DECODE(v_Pif43IXUnmodReportingClassCode,\n\t'9940', '500',\n\t'9941', '1000',\n\t'9942', '1500',\n\t'9943', '2000',\n\t'9944', '2500',\n\t'9945', '5000',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '26' AND v_Pif43IXUnmodReportingClassCode = '9664', DECODE(v_Pmdi4w1ModifierPremBasis,\n\t500, '500',\n\t1000, '1000',\n\t1500, '1500',\n\t2000, '2000',\n\t2500, '2500',\n\t'0'),\n\tv_sar_insurance_line = 'WC' AND v_Pif43IXUnmodWCRatingState = '14' AND IN(v_DocumentText_Trim, '100', '150', '200', '250', '300', '350', '400', '450', '500', '550', '600', '650', '700', '750', '800', '850', '900', '950', '1000', '1050', '2000', '2050', '3000', '3050', '4000', '4050', '5000', '5050', '6000', '6050', '7000', '7050', '8000', '8050', '9000', '9050', '10000'), v_DocumentText_Trim,\n\tv_sar_type_bureau = 'PI', DECODE(v_sar_code_5,\n\t'01', '0',\n\t'03', '50',\n\t'10', '100',\n\t'25', '250',\n\t'50', '500',\n\t'82', '1000',\n\t'99', '10000',\n\t'0'),\n\t'0') AS out_DeductibleAmount,\n\t-- *INF*: IIF(IS_DATE(v_RetroactiveDate, 'YYYYMMDD'), TO_DATE(v_RetroactiveDate, 'YYYYMMDD'), TO_DATE('2100-12-31', 'YYYY-MM-DD'))\n\tIFF(IS_DATE(v_RetroactiveDate, 'YYYYMMDD'), TO_DATE(v_RetroactiveDate, 'YYYYMMDD'), TO_DATE('2100-12-31', 'YYYY-MM-DD')) AS out_RetroactiveDate,\n\t-- *INF*: IIF(LTRIM(RTRIM(in_Pmdi4w1ModifierDesc))='EXPER MOD', v_Pmdi4w1ModifierRate,0)\n\tIFF(LTRIM(RTRIM(in_Pmdi4w1ModifierDesc)) = 'EXPER MOD', v_Pmdi4w1ModifierRate, 0) AS out_ExperienceModificationFactor,\n\t-- *INF*: IIF(IS_DATE(v_ExperienceModificationEffectiveDate, 'YYYYMMDD') AND LTRIM(RTRIM(in_Pmdi4w1ModifierDesc))='EXPER MOD', TO_DATE(v_ExperienceModificationEffectiveDate, 'YYYYMMDD'), TO_DATE('2100-12-31', 'YYYY-MM-DD'))\n\tIFF(IS_DATE(v_ExperienceModificationEffectiveDate, 'YYYYMMDD') AND LTRIM(RTRIM(in_Pmdi4w1ModifierDesc)) = 'EXPER MOD', TO_DATE(v_ExperienceModificationEffectiveDate, 'YYYYMMDD'), TO_DATE('2100-12-31', 'YYYY-MM-DD')) AS out_ExperienceModificationEffectiveDate,\n\t-- *INF*: IIF(ISNULL(in_Pmduyg1PkgModFactor), 0, in_Pmduyg1PkgModFactor)\n\tIFF(in_Pmduyg1PkgModFactor IS NULL, 0, in_Pmduyg1PkgModFactor) AS out_PackageModificationAdjustmentFactor,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_sar_insurance_line= 'GL', v_Pmduxg1PmaCode, \r\n\t-- v_sar_insurance_line='CF', v_Pmdrxp1PmaCode_Final, \r\n\t-- v_sar_insurance_line='CR',v_PMACODE_CR, \r\n\t-- v_sar_insurance_line='IM',v_PMACODE_IM,\r\n\t-- v_sar_insurance_line='GA',v_PMDLXA1PmaCode,\r\n\t-- IN(v_sar_type_bureau,'AL','AP','AN'),v_PackageModificationAssignment,\r\n\t-- 'N/A')\n\tDECODE(TRUE,\n\tv_sar_insurance_line = 'GL', v_Pmduxg1PmaCode,\n\tv_sar_insurance_line = 'CF', v_Pmdrxp1PmaCode_Final,\n\tv_sar_insurance_line = 'CR', v_PMACODE_CR,\n\tv_sar_insurance_line = 'IM', v_PMACODE_IM,\n\tv_sar_insurance_line = 'GA', v_PMDLXA1PmaCode,\n\tIN(v_sar_type_bureau, 'AL', 'AP', 'AN'), v_PackageModificationAssignment,\n\t'N/A') AS out_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: IIF(ISNULL(in_Pmduyg1IncreaseLimitsFactor), 0, in_Pmduyg1IncreaseLimitsFactor)\n\tIFF(in_Pmduyg1IncreaseLimitsFactor IS NULL, 0, in_Pmduyg1IncreaseLimitsFactor) AS out_IncreasedLimitFactor,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmduxg1IncLimitTableInd)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmduxg1IncLimitTableInd) AS out_IncreasedLimitGroupCode,\n\t-- *INF*: IIF(v_sar_insurance_line='CF', v_Pmdnxp1YearBuilt, '0000')\n\tIFF(v_sar_insurance_line = 'CF', v_Pmdnxp1YearBuilt, '0000') AS out_YearBuilt,\n\tv_sar_agents_comm_rate AS out_AgencyActualCommissionRate,\n\t-- *INF*: DECODE(TRUE,NOT ISNULL(in_Pmdu4w1Rate), in_Pmdu4w1Rate,\r\n\t--  NOT ISNULL(in_Pmdu4w1Rate_UZWC),in_Pmdu4w1Rate_UZWC,0)\n\tDECODE(TRUE,\n\tNOT in_Pmdu4w1Rate IS NULL, in_Pmdu4w1Rate,\n\tNOT in_Pmdu4w1Rate_UZWC IS NULL, in_Pmdu4w1Rate_UZWC,\n\t0) AS out_BaseRate,\n\t-- *INF*: DECODE(TRUE,v_sar_insurance_line='CF',v_Pmdnxp1CspConstrCod,SUBSTR(Policy_Key,1,2)='HH', v_HRRConstruction,'N/A')\n\tDECODE(TRUE,\n\tv_sar_insurance_line = 'CF', v_Pmdnxp1CspConstrCod,\n\tSUBSTR(Policy_Key, 1, 2) = 'HH', v_HRRConstruction,\n\t'N/A') AS out_ConstructionCode,\n\t-- *INF*: IIF(IS_DATE(v_StateRatingEffectiveDate, 'YYYYMMDD'), TO_DATE(v_StateRatingEffectiveDate, 'YYYYMMDD'),\r\n\t-- TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\tIFF(IS_DATE(v_StateRatingEffectiveDate, 'YYYYMMDD'), TO_DATE(v_StateRatingEffectiveDate, 'YYYYMMDD'), TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) AS out_StateRatingEffectiveDate,\n\t-- *INF*: IIF(LTRIM(RTRIM(in_Pmdl4w1RatingProgramType))='R', 1, 0)\n\tIFF(LTRIM(RTRIM(in_Pmdl4w1RatingProgramType)) = 'R', 1, 0) AS out_WCRetrospectiveRatingIndicator,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdl4w1PolicyType)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdl4w1PolicyType) AS out_WCPolicyRatingType,\n\t-- *INF*: DECODE(LTRIM(RTRIM(in_Pmdl4w1PolicyType)), 'S', '01', 'A', '02', '01')\n\tDECODE(LTRIM(RTRIM(in_Pmdl4w1PolicyType)),\n\t'S', '01',\n\t'A', '02',\n\t'01') AS out_WCPolicyPlanCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdnxp1ProtectionClassPart1)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Pmdnxp1ProtectionClassPart1) AS out_IsoFireProtectionCode,\n\tv_PreferredPropertyFactor AS out_MultiLocationCreditFactor,\n\tv_PreferredPropertyFactor AS out_PreferredPropertyFactor,\n\t-- *INF*: DECODE(sar_insurance_line,'CP',in_Pmdnxp1Irpm,'IM',in_PMDRXI1Irpm,'GL',in_Pmdrxg1ScheduleMod,0)\n\tDECODE(sar_insurance_line,\n\t'CP', in_Pmdnxp1Irpm,\n\t'IM', in_PMDRXI1Irpm,\n\t'GL', in_Pmdrxg1ScheduleMod,\n\t0) AS out_IndividualRiskPremiumModification,\n\t-- *INF*: DECODE(Pmdrxp1WindAndHail, 'Y', 0, 1)\n\tDECODE(Pmdrxp1WindAndHail,\n\t'Y', 0,\n\t1) AS out_WindCoverageIndicator,\n\t-- *INF*: :LKP.LKP_SupClassificationWorkersCompensation(v_sar_class_1_4,sar_state)\n\tLKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_sar_state.SupClassificationWorkersCompensationId AS SupClassificationWorkersCompensationId,\n\t-- *INF*: :LKP.LKP_SupClassificationWorkersCompensation(v_sar_class_1_4,'99')\n\tLKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_99.SupClassificationWorkersCompensationId AS SupClassificationWorkersCompensationId99,\n\t-- *INF*: DECODE(v_sar_type_bureau,\r\n\t-- 'AL','0',\r\n\t-- 'AN','D',\r\n\t-- 'AP',\r\n\t-- IIF(ISNULL(:LKP.LKP_SUPDEDUCTIBLEBASIS_BYSTATE(v_sar_major_peril,v_sar_code_1||sar_code_2||sar_code_3,v_sar_state)),\r\n\t-- :LKP.LKP_SUPDEDUCTIBLEBASIS(v_sar_major_peril,v_sar_code_1||sar_code_2||sar_code_3))\r\n\t-- )\n\tDECODE(v_sar_type_bureau,\n\t'AL', '0',\n\t'AN', 'D',\n\t'AP', IFF(LKP_SUPDEDUCTIBLEBASIS_BYSTATE_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3_v_sar_state.DeductibleBasis IS NULL, LKP_SUPDEDUCTIBLEBASIS_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3.DeductibleBasis)) AS v_DeductibleBasis,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_DeductibleBasis)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(v_DeductibleBasis) AS o_DeductibleBasis,\n\tv_sar_exposure AS out_Exposure,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- v_sar_rsn_amend_code='CWO', 0, \r\n\t-- v_writtenexposure)\r\n\t-- --We actively zero out written exposure for CWO type transactions else we use the incoming exposure value\n\tDECODE(TRUE,\n\tv_sar_rsn_amend_code = 'CWO', 0,\n\tv_writtenexposure) AS out_writtenexposure,\n\t-- *INF*: LTRIM(RTRIM(v_sar_class_1_4))\n\tLTRIM(RTRIM(v_sar_class_1_4)) AS o_sar_class_1_4\n\tFROM EXP_Default\n\tLEFT JOIN LKP_PIF43NXCRStage\n\tON LKP_PIF43NXCRStage.PifSymbol = EXP_Default.pif_symbol AND LKP_PIF43NXCRStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_PIF43NXCRStage.PifPolicyModule = EXP_Default.pif_module AND LKP_PIF43NXCRStage.PMDNXC1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_PIF43NXCRStage.PMDNXC1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_PIF43NXCRStage.PMDNXC1SubLocationNumber = EXP_Default.lkp_sar_sub_location_x AND LKP_PIF43NXCRStage.PMDNXC1CspClassCode = EXP_Default.out_lkp_sar_class_1_4 AND LKP_PIF43NXCRStage.PMDUYC1Coverage = EXP_Default.out_sar_unit\n\tLEFT JOIN LKP_Pif350Stage\n\tON LKP_Pif350Stage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif350Stage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif350Stage.PifModule = EXP_Default.pif_module AND LKP_Pif350Stage.UnitNum = EXP_Default.o_sar_unit_1_3_trimmed\n\tLEFT JOIN LKP_Pif43IXUnmodStage\n\tON LKP_Pif43IXUnmodStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43IXUnmodStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43IXUnmodStage.PifModule = EXP_Default.pif_module AND LKP_Pif43IXUnmodStage.Pif43IXUnmodInsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43IXUnmodStage.Pif43IXUnmodWCRatingState = EXP_Default.sar_state AND LKP_Pif43IXUnmodStage.Pif43IXUnmodReportingClassCode = EXP_Default.lkp_sar_class_1_4 AND LKP_Pif43IXUnmodStage.Pif43IXUnmodSplitRateSeq = EXP_Default.sar_seq_no AND LKP_Pif43IXUnmodStage.Pif43IXUnmodYearItemEffective = EXP_Default.sar_cov_eff_year AND LKP_Pif43IXUnmodStage.Pif43IXUnmodMonthItemEffective = EXP_Default.sar_cov_eff_month AND LKP_Pif43IXUnmodStage.Pif43IXUnmodDayItemEffective = EXP_Default.sar_cov_eff_day\n\tLEFT JOIN LKP_Pif43IXZWCModStage\n\tON LKP_Pif43IXZWCModStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43IXZWCModStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43IXZWCModStage.PifModule = EXP_Default.pif_module AND LKP_Pif43IXZWCModStage.Pmdi4w1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43IXZWCModStage.Pmdi4w1WcRatingState = EXP_Default.sar_state AND LKP_Pif43IXZWCModStage.Pmdi4w1ReportingClassCode = EXP_Default.lkp_sar_class_1_4 AND LKP_Pif43IXZWCModStage.Pmdi4w1SplitRateSeq = EXP_Default.sar_seq_no AND LKP_Pif43IXZWCModStage.Pmdi4w1YearItemEffective = EXP_Default.sar_cov_eff_year AND LKP_Pif43IXZWCModStage.Pmdi4w1MonthItemEffective = EXP_Default.sar_cov_eff_month AND LKP_Pif43IXZWCModStage.Pmdi4w1DayItemEffective = EXP_Default.sar_cov_eff_day\n\tLEFT JOIN LKP_Pif43LXGAStage\n\tON LKP_Pif43LXGAStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43LXGAStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43LXGAStage.PifModule = EXP_Default.pif_module\n\tLEFT JOIN LKP_Pif43LXGLStage\n\tON LKP_Pif43LXGLStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43LXGLStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43LXGLStage.PifModule = EXP_Default.pif_module AND LKP_Pif43LXGLStage.Pmdlxg1InsuranceLine = EXP_Default.sar_insurance_line\n\tLEFT JOIN LKP_Pif43LXZWCStage\n\tON LKP_Pif43LXZWCStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43LXZWCStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43LXZWCStage.PifModule = EXP_Default.pif_module AND LKP_Pif43LXZWCStage.Pmdl4w1InsuranceLine = EXP_Default.sar_insurance_line\n\tLEFT JOIN LKP_Pif43NXCPStage\n\tON LKP_Pif43NXCPStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43NXCPStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43NXCPStage.PifModule = EXP_Default.pif_module AND LKP_Pif43NXCPStage.Pmdnxp1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43NXCPStage.Pmdnxp1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_Pif43NXCPStage.Pmdnxp1SubLocationNumber = EXP_Default.lkp_sar_sub_location_x\n\tLEFT JOIN LKP_Pif43RXCPStage\n\tON LKP_Pif43RXCPStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43RXCPStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43RXCPStage.PifModule = EXP_Default.pif_module AND LKP_Pif43RXCPStage.Pmdrxp1InsuranceLine = EXP_Default.sar_insurance_line_CF AND LKP_Pif43RXCPStage.Pmdrxp1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_Pif43RXCPStage.Pmdrxp1SubLocationNumber = EXP_Default.lkp_sar_sub_location_x AND LKP_Pif43RXCPStage.Pmdrxp1CspClsCode = EXP_Default.lkp_sar_class_1_4 AND LKP_Pif43RXCPStage.Pmdrxp1PmsDefSubjOfIns = EXP_Default.lkp_sar_risk_unit_group\n\tLEFT JOIN LKP_Pif43RXGLStage\n\tON LKP_Pif43RXGLStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43RXGLStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43RXGLStage.PifModule = EXP_Default.pif_module AND LKP_Pif43RXGLStage.Pmdrxg1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43RXGLStage.Pmdrxg1PmsDefGlSubline = EXP_Default.sar_risk_unit_group AND LKP_Pif43RXGLStage.Pmdrxg1RiskTypeInd = EXP_Default.lkp_sar_seq_rsk_unt_a_2_1\n\tLEFT JOIN LKP_Pif43RXIMStage\n\tON LKP_Pif43RXIMStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43RXIMStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43RXIMStage.PifModule = EXP_Default.pif_module AND LKP_Pif43RXIMStage.PMDRXI1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43RXIMStage.PMDRXI1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_Pif43RXIMStage.PMDRXI1SubLocationNumber = EXP_Default.lkp_sar_sub_location_x AND LKP_Pif43RXIMStage.PMDRXI1RiskUnitGroup = EXP_Default.lkp_sar_risk_unit_group AND LKP_Pif43RXIMStage.PMDRXI1SequenceNumber = EXP_Default.lkp_sequencenumber\n\tLEFT JOIN LKP_Pif43UXGLStage\n\tON LKP_Pif43UXGLStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43UXGLStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43UXGLStage.PifModule = EXP_Default.pif_module AND LKP_Pif43UXGLStage.Pmduxg1InsuranceLine = EXP_Default.sar_insurance_line_GL AND LKP_Pif43UXGLStage.Pmduxg1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_Pif43UXGLStage.Pmduxg1PmsDefGlSubline = EXP_Default.lkp_sar_risk_unit_group AND LKP_Pif43UXGLStage.Pmduxg1ClassCodeGroup = EXP_Default.lkp_sar_class_code_grp_x AND LKP_Pif43UXGLStage.Pmduxg1ClassCodeMember = EXP_Default.lkp_sar_class_code_mem_x AND LKP_Pif43UXGLStage.Pmduxg1ClassCode = EXP_Default.lkp_Pmduxg1ClassCode AND LKP_Pif43UXGLStage.Pmduxg1RiskSequence = EXP_Default.lkp_sar_seq_rsk_unt_a AND LKP_Pif43UXGLStage.Pmduxg1RiskTypeInd = EXP_Default.lkp_sar_seq_rsk_unt_a_2_1\n\tLEFT JOIN LKP_Pif43UXWCStage\n\tON LKP_Pif43UXWCStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43UXWCStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43UXWCStage.PifModule = EXP_Default.pif_module AND LKP_Pif43UXWCStage.Pmdu4w1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43UXWCStage.Pmdu4w1WcRatingState = EXP_Default.sar_state AND LKP_Pif43UXWCStage.Pmdu4w1LocationNumber = EXP_Default.sar_location_x AND LKP_Pif43UXWCStage.Pmdu4w1ClassCode = EXP_Default.lkp_sar_class_1_4 AND LKP_Pif43UXWCStage.Pmdu4w1SplitRateSeq = EXP_Default.sar_seq_no AND LKP_Pif43UXWCStage.Pmdu4w1YearItemEffective = EXP_Default.sar_cov_eff_year AND LKP_Pif43UXWCStage.Pmdu4w1MonthItemEffective = EXP_Default.sar_cov_eff_month AND LKP_Pif43UXWCStage.Pmdu4w1DayItemEffective = EXP_Default.sar_cov_eff_day AND LKP_Pif43UXWCStage.Pmdu4w1ClassCodeSeq = EXP_Default.lkp_ClassCodeSeq\n\tLEFT JOIN LKP_Pif43UYGLStage\n\tON LKP_Pif43UYGLStage.PifSymbol = EXP_Default.pif_symbol AND LKP_Pif43UYGLStage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_Pif43UYGLStage.PifModule = EXP_Default.pif_module AND LKP_Pif43UYGLStage.Pmduyg1InsuranceLine = EXP_Default.sar_insurance_line AND LKP_Pif43UYGLStage.Pmduyg1LocationNumber = EXP_Default.lkp_sar_location_x AND LKP_Pif43UYGLStage.Pmduyg1PmsDefGlSubline = EXP_Default.lkp_sar_risk_unit_group AND LKP_Pif43UYGLStage.Pmduyg1RiskSequence = EXP_Default.lkp_sar_seq_rsk_unt_a AND LKP_Pif43UYGLStage.Pmduyg1RiskTypeInd = EXP_Default.lkp_sar_seq_rsk_unt_a_2_1 AND LKP_Pif43UYGLStage.Pmduyg1ClassCode = EXP_Default.lkp_ClassCode AND LKP_Pif43UYGLStage.Pmduyg1YearItemEffective = EXP_Default.sar_cov_eff_year AND LKP_Pif43UYGLStage.Pmduyg1MonthItemEffective = EXP_Default.sar_cov_eff_month AND LKP_Pif43UYGLStage.Pmduyg1DayItemEffective = EXP_Default.sar_cov_eff_day\n\tLEFT JOIN LKP_Pif43UZWCStage\n\tON LKP_Pif43UZWCStage.PifSymbol = LKP_Pif43UXWCStage.in_pif_symbol AND LKP_Pif43UZWCStage.PifPolicyNumber = LKP_Pif43UXWCStage.in_pif_policy_number AND LKP_Pif43UZWCStage.PifPolicyModule = LKP_Pif43UXWCStage.in_pif_module AND LKP_Pif43UZWCStage.PMDU4W1InsuranceLine = LKP_Pif43UXWCStage.in_sar_insurance_line AND LKP_Pif43UZWCStage.PMDU4W1WCRatingState = LKP_Pif43UXWCStage.in_sar_state AND LKP_Pif43UZWCStage.PMDU4W1LocationNumber = LKP_Pif43UXWCStage.in_sar_location_x AND LKP_Pif43UZWCStage.PMDU4W1ClassCode = LKP_Pif43UXWCStage.lkp_sar_class_1_4 AND LKP_Pif43UZWCStage.PMDU4W1SplitRateSeq = LKP_Pif43UXWCStage.in_sar_seq_no AND LKP_Pif43UZWCStage.PMDU4W1YearItemEffective = LKP_Pif43UXWCStage.in_sar_cov_eff_year AND LKP_Pif43UZWCStage.PMDU4W1MonthItemEffective = LKP_Pif43UXWCStage.in_sar_cov_eff_month AND LKP_Pif43UZWCStage.PMDU4W1DayItemEffective = LKP_Pif43UXWCStage.in_sar_cov_eff_day AND LKP_Pif43UZWCStage.PMDU4W1ClassCodeSeq = LKP_Pif43UXWCStage.in_ClassCodeSeq\n\tLEFT JOIN LKP_PifPUHM17Stage\n\tON LKP_PifPUHM17Stage.PifSymbol = EXP_Default.pif_symbol AND LKP_PifPUHM17Stage.PifPolicyNumber = EXP_Default.pif_policy_number AND LKP_PifPUHM17Stage.PifPolicyModule = EXP_Default.pif_module AND LKP_PifPUHM17Stage.HRRUnitAlph = EXP_Default.lkp_sar_unit_3_1 AND LKP_PifPUHM17Stage.HRRZipCode = EXP_Default.sar_zip_postal_code AND LKP_PifPUHM17Stage.HRRCountyLocation = EXP_Default.lkp_Location AND LKP_PifPUHM17Stage.HRRCityLocation = EXP_Default.lkp_sar_city\n\tLEFT JOIN LKP_Policy_PolicyAKID\n\tON LKP_Policy_PolicyAKID.pol_key = EXP_Default.Policy_Key\n\tLEFT JOIN LKP_pif_02_stage\n\tON LKP_pif_02_stage.pif_symbol = EXP_Default.pif_symbol AND LKP_pif_02_stage.pif_policy_number = EXP_Default.pif_policy_number AND LKP_pif_02_stage.pif_module = EXP_Default.pif_module\n\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONAKID LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location\n\tON LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.PolicyAKID = pol_ak_id\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.LocationUnitNumber = v_RiskLocation_Unit\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.RiskTerritory = v_sar_loc_prov_territory\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.StateProvinceCode = v_sar_state\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.ZipPostalCode = v_sar_zip_postal_code\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_pol_ak_id_v_RiskLocation_Unit_v_sar_loc_prov_territory_v_sar_state_v_sar_zip_postal_code_v_Tax_Location.TaxLocation = v_Tax_Location\n\n\tLEFT JOIN LKP_POLICYCOVERAGE_POLICYCOVERAGEAKID LKP_POLICYCOVERAGE_POLICYCOVERAGEAKID_v_PolicyCoverageHashKey\n\tON LKP_POLICYCOVERAGE_POLICYCOVERAGEAKID_v_PolicyCoverageHashKey.PolicyCoverageHashKey = v_PolicyCoverageHashKey\n\n\tLEFT JOIN LKP_STATISTICALCOVERAGE_STATISTICALCOVERAGEAKID LKP_STATISTICALCOVERAGE_STATISTICALCOVERAGEAKID_v_CoverageDetailHashKey\n\tON LKP_STATISTICALCOVERAGE_STATISTICALCOVERAGEAKID_v_CoverageDetailHashKey.StatisticalCoverageHashKey = v_CoverageDetailHashKey\n\n\tLEFT JOIN LKP_POLICY_STRTGC_BUS_DIV_CODE LKP_POLICY_STRTGC_BUS_DIV_CODE_pol_ak_id\n\tON LKP_POLICY_STRTGC_BUS_DIV_CODE_pol_ak_id.pol_ak_id = pol_ak_id\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date\n\tON LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_loc_unit_num = v_RiskLocation_Unit\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_sub_loc_unit_num = v_sar_sub_location_x\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_eff_date = v_sar_trans_eff_date\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_exp_date = v_sar_exp_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date\n\tON LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_loc_unit_num = v_RiskLocation_Unit\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_sub_loc_unit_num = v_sar_sub_location_x\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_eff_date = v_dummy_start_date\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_sub_location_x_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_exp_date = v_dummy_end_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date\n\tON LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_loc_unit_num = v_RiskLocation_Unit\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_eff_date = v_sar_trans_eff_date\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_exp_date = v_sar_exp_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date\n\tON LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_loc_unit_num = v_RiskLocation_Unit\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_eff_date = v_dummy_start_date\n\tAND LKP_REINSURANCECOVERAGE_COMMERCIALLINESPOLICIES_WITHOUTSUBLOCATION_pol_ak_id_v_sar_insurance_line_v_RiskLocation_Unit_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_exp_date = v_dummy_end_date\n\n\tLEFT JOIN LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date\n\tON LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_eff_date = v_sar_trans_eff_date\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_exp_date = v_sar_exp_date\n\n\tLEFT JOIN LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date\n\tON LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_ins_line = v_sar_insurance_line\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_eff_date = v_dummy_start_date\n\tAND LKP_REINSURANCE_COVERAGE_COMMERCIALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_insurance_line_sar_reinsurance_company_no_v_sar_section_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_exp_date = v_dummy_end_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date\n\tON LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_risk_unit = v_sar_unit_3pos\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_eff_date = v_sar_trans_eff_date\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_exp_date = v_sar_exp_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date\n\tON LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_risk_unit = v_sar_unit_3pos\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_eff_date = v_dummy_start_date\n\tAND LKP_REINSURANCECOVERAGE_PERSONALLINESPOLICIES_pol_ak_id_v_sar_unit_3pos_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_exp_date = v_dummy_end_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date\n\tON LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_eff_date = v_sar_trans_eff_date\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_sar_trans_eff_date_v_sar_exp_date.reins_exp_date = v_sar_exp_date\n\n\tLEFT JOIN LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date\n\tON LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.pol_ak_id = pol_ak_id\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_section_code = v_sar_section\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_co_num = sar_reinsurance_company_no\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_prcnt_facultative_commssn = v_sar_faculta_comm_rate\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_eff_date = v_dummy_start_date\n\tAND LKP_REINSURANCECOVERAGE__PERSONALLINESPOLICIES_DEFAULT_pol_ak_id_v_sar_section_sar_reinsurance_company_no_v_sar_faculta_comm_rate_v_dummy_start_date_v_dummy_end_date.reins_exp_date = v_dummy_end_date\n\n\tLEFT JOIN LKP_PIF11STAGE LKP_PIF11STAGE_Policy_Key\n\tON LKP_PIF11STAGE_Policy_Key.PolicyKey = Policy_Key\n\n\tLEFT JOIN LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_sar_state\n\tON LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_sar_state.ClassCode = v_sar_class_1_4\n\tAND LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_sar_state.RatingStateCode = sar_state\n\n\tLEFT JOIN LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_99\n\tON LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_99.ClassCode = v_sar_class_1_4\n\tAND LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_v_sar_class_1_4_99.RatingStateCode = '99'\n\n\tLEFT JOIN LKP_SUPDEDUCTIBLEBASIS_BYSTATE LKP_SUPDEDUCTIBLEBASIS_BYSTATE_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3_v_sar_state\n\tON LKP_SUPDEDUCTIBLEBASIS_BYSTATE_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3_v_sar_state.MajorPerilCode = v_sar_major_peril\n\tAND LKP_SUPDEDUCTIBLEBASIS_BYSTATE_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3_v_sar_state.CoverageCode = v_sar_code_1 || sar_code_2 || sar_code_3\n\tAND LKP_SUPDEDUCTIBLEBASIS_BYSTATE_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3_v_sar_state.MasterCompanyNumber = v_sar_state\n\n\tLEFT JOIN LKP_SUPDEDUCTIBLEBASIS LKP_SUPDEDUCTIBLEBASIS_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3\n\tON LKP_SUPDEDUCTIBLEBASIS_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3.MajorPerilCode = v_sar_major_peril\n\tAND LKP_SUPDEDUCTIBLEBASIS_v_sar_major_peril_v_sar_code_1_sar_code_2_sar_code_3.CoverageCode = v_sar_code_1 || sar_code_2 || sar_code_3\n\n),\nLKP_PremiumTrans_Exp AS (\n\tSELECT\n\tPolKey,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tin_ExperienceModificationEffectiveDate,\n\tMajorPerilSequenceNumber,\n\tStateProvinceCode\n\tFROM (\n\t\tselect  distinct Substring(PremiumTransaction.PremiumTransactionKey,1,12) as PolKey,\r\n\t\tPremiumTransaction.ExperienceModificationFactor as ExperienceModificationFactor,\r\n\t\tPremiumTransaction.ExperienceModificationEffectiveDate as ExperienceModificationEffectiveDate,\r\n\t\tStatisticalCoverage.MajorPerilSequenceNumber as MajorPerilSequenceNumber,\r\n\t\tSUBSTRING(RiskLocation.StateProvinceCode,1,2) as StateProvinceCode\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation \r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage \r\n\t\ton RiskLocation.RiskLocationAKID=PolicyCoverage.RiskLocationAKID\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage\r\n\t\ton PolicyCoverage.PolicyCoverageAKID=StatisticalCoverage.PolicyCoverageAKID\r\n\t\tand StatisticalCoverage.CurrentSnapshotFlag=1  and PolicyCoverage.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction\r\n\t\ton StatisticalCoverage.StatisticalCoverageAKID=PremiumTransaction.StatisticalCoverageAKID\r\n\t\tand  PremiumTransaction.CurrentSnapshotFlag=1\r\n\t\twhere PolicyCoverage.TypeBureauCode in ('WC','WP','WorkersCompensation') \r\n\t\tand  PremiumTransaction.PremiumType='D'   \r\n\t\tand PremiumTransaction.ReasonAmendedCode != 'CWO'\r\n\t\tand StatisticalCoverage.ClassCode = '9898' \r\n\t\tand PremiumTransaction.SourceSystemID = 'PMS'\r\n\t\torder by PolKey--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolKey,ExperienceModificationEffectiveDate,MajorPerilSequenceNumber,StateProvinceCode ORDER BY PolKey) = 1\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionID,\n\tPremiumTransactionAKID,\n\tPremiumTransactionHashKey,\n\tDuplicateSequence\n\tFROM (\n\t\tSELECT PremiumTransactionID as PremiumTransactionID,\r\n\t\t\t            PremiumtransactionAKID as PremiumtransactionAKID,\r\n\t\t                  PremiumtransactionHashKey as PremiumtransactionHashKey,\r\n\t\t\t            DuplicateSequence as DuplicateSequence\r\n\t\tFROM\t\r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL,\r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV,\r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage STATCOV,\r\n\t\t                    @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction PT\r\n\t\tWHERE\tPOLCOV.PolicyAKID = POL.pol_ak_id\r\n\t\t\t\tAND POLCOV.PolicyCoverageAKID = STATCOV.PolicyCoverageAKID\r\n\t\t             AND STATCOV.StatisticalCoverageAKID = PT.StatisticalCoverageAKID\r\n\t\t\t\tAND POL.crrnt_snpsht_flag = 1 \r\n\t\t\t\tAND STATCOV.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND POLCOV.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND PT.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW} )\r\n\t\t             AND PT.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionHashKey,DuplicateSequence ORDER BY PremiumTransactionID DESC) = 1\n),\nLKP_sup_premium_transaction_code AS (\n\tSELECT\n\tsup_prem_trans_code_id,\n\tprem_trans_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_prem_trans_code_id,\n\t\t\tprem_trans_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_premium_transaction_code\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id= '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY prem_trans_code ORDER BY sup_prem_trans_code_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_PremiumTransaction.PremiumTransactionID,\n\tLKP_PremiumTransaction.PremiumTransactionAKID AS PremiumTransactionAKID_lkp,\n\tEXP_Values.CoverageDetailAKID AS StatisticalCoverageAKID,\n\t0 AS logicalIndicator,\n\tEXP_Values.PremiumTransactionHashKey,\n\tEXP_Values.CoverageKey,\n\t'1' AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemID,\n\tSYSDATE AS CreateDate,\n\tSYSDATE AS ModifiedDate,\n\tEXP_Values.PMSFunctionCode,\n\tEXP_Values.PremiumType,\n\tEXP_Values.Trans_eff_date,\n\tEXP_Values.Trans_entered_date,\n\tEXP_Values.Trans_expiration_date,\n\tEXP_Values.sar_transaction,\n\tEXP_Values.sar_premium,\n\tEXP_Values.sar_original_prem,\n\tEXP_Values.Trans_Booked_date,\n\tEXP_Values.ReinsuranceCoverageAKID,\n\tEXP_Values.Reason_amend_code,\n\tLKP_sup_premium_transaction_code.sup_prem_trans_code_id AS in_sup_prem_trans_code_id,\n\t'N/A' AS o_OffsetOnsetIndicator,\n\t-- *INF*: IIF(ISNULL(in_sup_prem_trans_code_id),-1,in_sup_prem_trans_code_id)\n\tIFF(in_sup_prem_trans_code_id IS NULL, - 1, in_sup_prem_trans_code_id) AS o_sup_prem_trans_code_id,\n\tEXP_Values.logical_flag,\n\t-- *INF*: TO_INTEGER(logical_flag)\n\tTO_INTEGER(logical_flag) AS logical_flag_out,\n\tEXP_Values.PremiumLoadSequence,\n\tEXP_Values.DuplicateSequenceNum,\n\tEXP_Values.sar_annual_state_line,\n\tEXP_Values.sar_special_use,\n\tEXP_Values.sar_stat_breakdown_line,\n\tEXP_Values.sar_user_line,\n\tEXP_Values.sar_rating_date_ind,\n\tEXP_Values.sar_code_1,\n\tEXP_Values.sar_code_2,\n\tEXP_Values.sar_code_3,\n\tEXP_Values.sar_code_4,\n\tEXP_Values.sar_code_5,\n\tEXP_Values.sar_code_6,\n\tEXP_Values.sar_code_7,\n\tEXP_Values.sar_code_8,\n\tEXP_Values.sar_code_9,\n\tEXP_Values.sar_code_10,\n\tEXP_Values.sar_code_11,\n\tEXP_Values.sar_code_12,\n\tEXP_Values.sar_code_13,\n\tEXP_Values.sar_code_14,\n\tEXP_Values.sar_code_15,\n\tEXP_Values.sar_audit_reinst_ind,\n\tEXP_Values.pif_4514_stage_id,\n\tEXP_Values.out_DeductibleAmount AS DeductibleAmount,\n\tEXP_Values.out_RetroactiveDate AS RetroactiveDate,\n\tEXP_Values.o_sar_class_1_4 AS sar_class_1_4,\n\tLKP_PremiumTrans_Exp.PolKey AS LKP_PremiumTransactionKey,\n\tLKP_PremiumTrans_Exp.ExperienceModificationFactor AS LKP_ExperienceModificationFactor,\n\tLKP_PremiumTrans_Exp.ExperienceModificationEffectiveDate AS LKP_ExperienceModificationEffectiveDate,\n\tEXP_Values.SupClassificationWorkersCompensationId,\n\tEXP_Values.SupClassificationWorkersCompensationId99,\n\tEXP_Values.out_ExperienceModificationFactor AS ExperienceModificationFactor,\n\tEXP_Values.out_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate,\n\t-- *INF*: IIF(LTRIM(RTRIM(sar_class_1_4))='9898', ExperienceModificationFactor,IIF((NOT ISNULL(LKP_PremiumTransactionKey)) AND ((NOT ISNULL(SupClassificationWorkersCompensationId)) OR (NOT ISNULL(SupClassificationWorkersCompensationId99))), LKP_ExperienceModificationFactor, ExperienceModificationFactor))\n\tIFF(LTRIM(RTRIM(sar_class_1_4)) = '9898', ExperienceModificationFactor, IFF(( NOT LKP_PremiumTransactionKey IS NULL ) AND ( ( NOT SupClassificationWorkersCompensationId IS NULL ) OR ( NOT SupClassificationWorkersCompensationId99 IS NULL ) ), LKP_ExperienceModificationFactor, ExperienceModificationFactor)) AS out_ExperienceModificationFactor,\n\t-- *INF*: IIF(LTRIM(RTRIM(sar_class_1_4)) = '9898', ExperienceModificationEffectiveDate,IIF((NOT ISNULL(LKP_PremiumTransactionKey)) AND ((NOT ISNULL(SupClassificationWorkersCompensationId)) OR (NOT ISNULL(SupClassificationWorkersCompensationId99))), LKP_ExperienceModificationEffectiveDate, ExperienceModificationEffectiveDate))\n\tIFF(LTRIM(RTRIM(sar_class_1_4)) = '9898', ExperienceModificationEffectiveDate, IFF(( NOT LKP_PremiumTransactionKey IS NULL ) AND ( ( NOT SupClassificationWorkersCompensationId IS NULL ) OR ( NOT SupClassificationWorkersCompensationId99 IS NULL ) ), LKP_ExperienceModificationEffectiveDate, ExperienceModificationEffectiveDate)) AS out_ExperienceModificationEffectiveDate,\n\tEXP_Values.out_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor,\n\tEXP_Values.out_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode,\n\tEXP_Values.out_IncreasedLimitFactor AS IncreasedLimitFactor,\n\tEXP_Values.out_IncreasedLimitGroupCode AS IncreasedLimitGroupCode,\n\tEXP_Values.out_YearBuilt AS YearBuilt,\n\tEXP_Values.out_AgencyActualCommissionRate AS AgencyActualCommissionRate,\n\tEXP_Values.out_BaseRate AS BaseRate,\n\tEXP_Values.out_ConstructionCode AS i_ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(:LKP.LKP_SUPCONSTRUCTIONCODE(i_ConstructionCode))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(LKP_SUPCONSTRUCTIONCODE_i_ConstructionCode.StandardConstructionCodeDescription) AS o_ConstructionCode,\n\tEXP_Values.out_StateRatingEffectiveDate AS StateRatingEffectiveDate,\n\tEXP_Values.out_WCRetrospectiveRatingIndicator AS WCRetrospectiveRatingIndicator,\n\tEXP_Values.out_WCPolicyRatingType AS WCPolicyRatingType,\n\tEXP_Values.out_WCPolicyPlanCode AS WCPolicyPlanCode,\n\tEXP_Values.out_IsoFireProtectionCode AS IsoFireProtectionCode,\n\tEXP_Values.out_MultiLocationCreditFactor AS MultiLocationCreditFactor,\n\tEXP_Values.out_PreferredPropertyFactor AS PreferredPropertyFactor,\n\tEXP_Values.out_IndividualRiskPremiumModification AS IndividualRiskPremiumModification,\n\tEXP_Values.out_WindCoverageIndicator AS WindCoverageIndicator,\n\tEXP_Values.o_DeductibleBasis AS DeductibleBasis,\n\tEXP_Values.out_Exposure AS Exposure,\n\tEXP_Values.out_writtenexposure AS WriitenExposure,\n\t0 AS NumberOfEmployee,\n\t0 AS DeclaredEventFlag\n\tFROM EXP_Values\n\tLEFT JOIN LKP_PremiumTrans_Exp\n\tON LKP_PremiumTrans_Exp.PolKey = EXP_Values.Policy_Key AND LKP_PremiumTrans_Exp.ExperienceModificationEffectiveDate = EXP_Values.cov_eff_date AND LKP_PremiumTrans_Exp.MajorPerilSequenceNumber = EXP_Values.o_sar_seq_no AND LKP_PremiumTrans_Exp.StateProvinceCode = EXP_Values.o_sar_state\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.PremiumTransactionHashKey = EXP_Values.PremiumTransactionHashKey AND LKP_PremiumTransaction.DuplicateSequence = EXP_Values.DuplicateSequenceNum\n\tLEFT JOIN LKP_sup_premium_transaction_code\n\tON LKP_sup_premium_transaction_code.prem_trans_code = EXP_Values.sar_transaction\n\tLEFT JOIN LKP_SUPCONSTRUCTIONCODE LKP_SUPCONSTRUCTIONCODE_i_ConstructionCode\n\tON LKP_SUPCONSTRUCTIONCODE_i_ConstructionCode.ConstructionCode = i_ConstructionCode\n\n),\nRTR_Insert_Update_PremTran AS (\n\tSELECT\n\tPremiumTransactionID,\n\tPremiumTransactionAKID_lkp AS PremiumTransactionAKID_lookup,\n\tStatisticalCoverageAKID,\n\tPremiumTransactionHashKey,\n\tCoverageKey,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tPMSFunctionCode,\n\tPremiumType,\n\tTrans_eff_date,\n\tTrans_entered_date,\n\tTrans_expiration_date,\n\tsar_transaction,\n\tsar_premium,\n\tsar_original_prem,\n\tTrans_Booked_date,\n\tReinsuranceCoverageAKID,\n\tReason_amend_code,\n\to_OffsetOnsetIndicator AS OffsetOnsetIndicator,\n\to_sup_prem_trans_code_id AS sup_prem_trans_code_id,\n\tlogical_flag_out,\n\tPremiumLoadSequence,\n\tDuplicateSequenceNum,\n\tsar_annual_state_line,\n\tsar_special_use,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\tsar_rating_date_ind,\n\tsar_code_1,\n\tsar_code_2,\n\tsar_code_3,\n\tsar_code_4,\n\tsar_code_5,\n\tsar_code_6,\n\tsar_code_7,\n\tsar_code_8,\n\tsar_code_9,\n\tsar_code_10,\n\tsar_code_11,\n\tsar_code_12,\n\tsar_code_13,\n\tsar_code_14,\n\tsar_code_15,\n\tsar_audit_reinst_ind,\n\tpif_4514_stage_id,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tout_ExperienceModificationFactor AS ExperienceModificationFactor,\n\tout_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\to_ConstructionCode AS ConstructionCode,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tWCPolicyRatingType,\n\tWCPolicyPlanCode,\n\tIsoFireProtectionCode,\n\tMultiLocationCreditFactor,\n\tPreferredPropertyFactor,\n\tIndividualRiskPremiumModification,\n\tWindCoverageIndicator,\n\tDeductibleBasis,\n\tExposure,\n\tWriitenExposure AS WrittenExposure,\n\tNumberOfEmployee,\n\tDeclaredEventFlag\n\tFROM EXP_Detect_Changes\n),\nRTR_Insert_Update_PremTran_UPDATE AS (SELECT * FROM RTR_Insert_Update_PremTran WHERE NOT ISNULL(PremiumTransactionAKID_lookup)),\nRTR_Insert_Update_PremTran_INSERT AS (SELECT * FROM RTR_Insert_Update_PremTran WHERE ISNULL(PremiumTransactionAKID_lookup) OR NOT ISNULL(PremiumTransactionAKID_lookup)),\nUPD_PremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionID AS PremiumTransactionID1, \n\tPremiumTransactionAKID_lookup, \n\tStatisticalCoverageAKID AS StatisticalCoverageAKID1, \n\tPremiumTransactionHashKey AS PremiumTransactionHashKey1, \n\tCoverageKey AS CoverageKey1, \n\tCurrentSnapshotFlag AS CurrentSnapshotFlag1, \n\tAuditID AS AuditID1, \n\tEffectiveDate AS EffectiveDate1, \n\tExpirationDate AS ExpirationDate1, \n\tSourceSystemID AS SourceSystemID1, \n\tCreateDate AS CreateDate1, \n\tModifiedDate AS ModifiedDate1, \n\tPMSFunctionCode AS PMSFunctionCode1, \n\tPremiumType AS PremiumType1, \n\tTrans_eff_date AS Trans_eff_date1, \n\tTrans_entered_date AS Trans_entered_date1, \n\tTrans_expiration_date AS Trans_expiration_date1, \n\tsar_transaction AS sar_transaction1, \n\tsar_premium AS sar_premium1, \n\tsar_original_prem AS sar_original_prem1, \n\tTrans_Booked_date AS Trans_Booked_date1, \n\tReinsuranceCoverageAKID AS ReinsuranceCoverageAKID1, \n\tReason_amend_code AS Reason_amend_code1, \n\tlogical_flag_out AS logical_flag_out1, \n\tWindCoverageIndicator AS WindCoverageIndicator1, \n\tPremiumLoadSequence AS PremiumLoadSequence1, \n\tExperienceModificationFactor AS ExperienceModificationFactor1, \n\tExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate1, \n\tNumberOfEmployee AS NumberOfEmployee1, \n\tDeclaredEventFlag AS DeclaredEventFlag1\n\tFROM RTR_Insert_Update_PremTran_UPDATE\n),\nPremiumTransactionUpdate AS (\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPD_PremiumTransaction AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID1\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate1, T.PremiumLoadSequence = S.PremiumLoadSequence1, T.ExperienceModificationFactor = S.ExperienceModificationFactor1, T.ExperienceModificationEffectiveDate = S.ExperienceModificationEffectiveDate1, T.NumberOfEmployee = S.NumberOfEmployee1, T.DeclaredEventFlag = S.DeclaredEventFlag1\n),\nSEQ_PremiumTransactionAKID AS (\n\tCREATE SEQUENCE SEQ_PremiumTransactionAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Detemine_AK_ID AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tlogical_flag_out AS logical_flag_out3,\n\t1 AS LogicalDeleteFlag,\n\tPremiumTransactionAKID_lookup,\n\tSEQ_PremiumTransactionAKID.NEXTVAL,\n\tPremiumTransactionHashKey,\n\tPremiumLoadSequence,\n\tDuplicateSequenceNum AS DuplicateSequenceNum3,\n\t-- *INF*: IIF(ISNULL(PremiumTransactionAKID_lookup), NEXTVAL, PremiumTransactionAKID_lookup)\n\tIFF(PremiumTransactionAKID_lookup IS NULL, NEXTVAL, PremiumTransactionAKID_lookup) AS PremiumTransactionAKID_Out,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tCoverageKey,\n\tPMSFunctionCode,\n\tsar_transaction,\n\tTrans_entered_date,\n\tTrans_eff_date,\n\tTrans_expiration_date,\n\tTrans_Booked_date,\n\tsar_premium,\n\tsar_original_prem,\n\tPremiumType,\n\tReason_amend_code,\n\tOffsetOnsetIndicator,\n\tsup_prem_trans_code_id,\n\t-1 AS RatingCoverageAKID,\n\tsar_annual_state_line,\n\tsar_special_use,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\tsar_rating_date_ind,\n\tsar_code_18 AS sar_code_1,\n\tsar_code_2,\n\tsar_code_ AS sar_code_3,\n\tsar_code_4,\n\tsar_code_5,\n\tsar_code_6,\n\tsar_code_7,\n\tsar_code_8,\n\tsar_code_9,\n\tsar_code_10,\n\tsar_code_11,\n\tsar_code_12,\n\tsar_code_1 AS sar_code_13,\n\tsar_code_14,\n\tsar_code_15,\n\tsar_audit_reinst_ind,\n\tpif_4514_stage_id,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tWCPolicyRatingType,\n\tWCPolicyPlanCode,\n\tIsoFireProtectionCode,\n\tMultiLocationCreditFactor,\n\tPreferredPropertyFactor,\n\tIndividualRiskPremiumModification,\n\tWindCoverageIndicator AS WindCoverageIndicator3,\n\tDeductibleBasis,\n\tExposure,\n\tWrittenExposure,\n\tNumberOfEmployee AS NumberOfEmployee3,\n\t'N/A' AS NegateRestateCode,\n\tDeclaredEventFlag AS DeclaredEventFlag3\n\tFROM RTR_Insert_Update_PremTran_INSERT\n),\nFIL_Insert_PremiumTransaction AS (\n\tSELECT\n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreateDate, \n\tModifiedDate, \n\tlogical_flag_out3, \n\tLogicalDeleteFlag, \n\tPremiumTransactionAKID_lookup, \n\tPremiumTransactionHashKey, \n\tPremiumLoadSequence, \n\tDuplicateSequenceNum3, \n\tPremiumTransactionAKID_Out, \n\tReinsuranceCoverageAKID, \n\tStatisticalCoverageAKID, \n\tCoverageKey, \n\tPMSFunctionCode, \n\tsar_transaction, \n\tTrans_entered_date, \n\tTrans_eff_date, \n\tTrans_expiration_date, \n\tTrans_Booked_date, \n\tsar_premium, \n\tsar_original_prem, \n\tPremiumType, \n\tReason_amend_code, \n\tOffsetOnsetIndicator, \n\tsup_prem_trans_code_id, \n\tRatingCoverageAKID, \n\tpif_4514_stage_id, \n\tDeductibleAmount, \n\tRetroactiveDate, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPackageModificationAdjustmentFactor, \n\tPackageModificationAdjustmentGroupCode, \n\tIncreasedLimitFactor, \n\tIncreasedLimitGroupCode, \n\tYearBuilt, \n\tAgencyActualCommissionRate, \n\tBaseRate, \n\tConstructionCode, \n\tStateRatingEffectiveDate, \n\tWCRetrospectiveRatingIndicator, \n\tWCPolicyRatingType, \n\tWCPolicyPlanCode, \n\tIsoFireProtectionCode, \n\tMultiLocationCreditFactor, \n\tPreferredPropertyFactor, \n\tIndividualRiskPremiumModification, \n\tWindCoverageIndicator3, \n\tDeductibleBasis, \n\tExposure, \n\tWrittenExposure, \n\tNumberOfEmployee3, \n\tNegateRestateCode, \n\tDeclaredEventFlag3\n\tFROM EXP_Detemine_AK_ID\n\tWHERE IIF(ISNULL(PremiumTransactionAKID_lookup), TRUE, FALSE)\n),\nEXPTRANS AS (\n\tSELECT\n\tAuditID,\n\tSourceSystemID,\n\tPremiumTransactionAKID_Out AS PremiumTransactionAKID,\n\tSYSDATE AS o_CreatedDate,\n\tpif_4514_stage_id,\n\tWindCoverageIndicator3,\n\tDeductibleBasis,\n\t'N/A' AS o_ExposureBasis,\n\t'N/A' AS o_TransactionCreatedUserId,\n\t'N/A' AS o_ServiceCentreName\n\tFROM FIL_Insert_PremiumTransaction\n),\nPremiumTransactionInsert AS (\n\tINSERT INTO PremiumTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, PremiumTransactionHashKey, PremiumLoadSequence, DuplicateSequence, PremiumTransactionAKID, ReinsuranceCoverageAKID, StatisticalCoverageAKID, PremiumTransactionKey, PMSFunctionCode, PremiumTransactionCode, PremiumTransactionEnteredDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionBookedDate, PremiumTransactionAmount, FullTermPremium, PremiumType, ReasonAmendedCode, OffsetOnsetCode, SupPremiumTransactionCodeId, RatingCoverageAKId, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, IndividualRiskPremiumModification, WindCoverageFlag, DeductibleBasis, ExposureBasis, TransactionCreatedUserId, ServiceCentreName, Exposure, NumberOfEmployee, NegateRestateCode, WrittenExposure, DeclaredEventFlag)\n\tSELECT \n\tFIL_Insert_PremiumTransaction.CURRENTSNAPSHOTFLAG, \n\tFIL_Insert_PremiumTransaction.AUDITID, \n\tFIL_Insert_PremiumTransaction.EFFECTIVEDATE, \n\tFIL_Insert_PremiumTransaction.EXPIRATIONDATE, \n\tFIL_Insert_PremiumTransaction.SOURCESYSTEMID, \n\tFIL_Insert_PremiumTransaction.CreateDate AS CREATEDDATE, \n\tFIL_Insert_PremiumTransaction.MODIFIEDDATE, \n\tFIL_Insert_PremiumTransaction.logical_flag_out3 AS LOGICALINDICATOR, \n\tFIL_Insert_PremiumTransaction.LOGICALDELETEFLAG, \n\tFIL_Insert_PremiumTransaction.PREMIUMTRANSACTIONHASHKEY, \n\tFIL_Insert_PremiumTransaction.PREMIUMLOADSEQUENCE, \n\tFIL_Insert_PremiumTransaction.DuplicateSequenceNum3 AS DUPLICATESEQUENCE, \n\tFIL_Insert_PremiumTransaction.PremiumTransactionAKID_Out AS PREMIUMTRANSACTIONAKID, \n\tFIL_Insert_PremiumTransaction.REINSURANCECOVERAGEAKID, \n\tFIL_Insert_PremiumTransaction.STATISTICALCOVERAGEAKID, \n\tFIL_Insert_PremiumTransaction.CoverageKey AS PREMIUMTRANSACTIONKEY, \n\tFIL_Insert_PremiumTransaction.PMSFUNCTIONCODE, \n\tFIL_Insert_PremiumTransaction.sar_transaction AS PREMIUMTRANSACTIONCODE, \n\tFIL_Insert_PremiumTransaction.Trans_entered_date AS PREMIUMTRANSACTIONENTEREDDATE, \n\tFIL_Insert_PremiumTransaction.Trans_eff_date AS PREMIUMTRANSACTIONEFFECTIVEDATE, \n\tFIL_Insert_PremiumTransaction.Trans_expiration_date AS PREMIUMTRANSACTIONEXPIRATIONDATE, \n\tFIL_Insert_PremiumTransaction.Trans_Booked_date AS PREMIUMTRANSACTIONBOOKEDDATE, \n\tFIL_Insert_PremiumTransaction.sar_premium AS PREMIUMTRANSACTIONAMOUNT, \n\tFIL_Insert_PremiumTransaction.sar_original_prem AS FULLTERMPREMIUM, \n\tFIL_Insert_PremiumTransaction.PREMIUMTYPE, \n\tFIL_Insert_PremiumTransaction.Reason_amend_code AS REASONAMENDEDCODE, \n\tFIL_Insert_PremiumTransaction.OffsetOnsetIndicator AS OFFSETONSETCODE, \n\tFIL_Insert_PremiumTransaction.sup_prem_trans_code_id AS SUPPREMIUMTRANSACTIONCODEID, \n\tFIL_Insert_PremiumTransaction.RatingCoverageAKID AS RATINGCOVERAGEAKID, \n\tFIL_Insert_PremiumTransaction.DEDUCTIBLEAMOUNT, \n\tFIL_Insert_PremiumTransaction.EXPERIENCEMODIFICATIONFACTOR, \n\tFIL_Insert_PremiumTransaction.EXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tFIL_Insert_PremiumTransaction.PACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tFIL_Insert_PremiumTransaction.PACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tFIL_Insert_PremiumTransaction.INCREASEDLIMITFACTOR, \n\tFIL_Insert_PremiumTransaction.INCREASEDLIMITGROUPCODE, \n\tFIL_Insert_PremiumTransaction.YEARBUILT, \n\tFIL_Insert_PremiumTransaction.AGENCYACTUALCOMMISSIONRATE, \n\tFIL_Insert_PremiumTransaction.BASERATE, \n\tFIL_Insert_PremiumTransaction.CONSTRUCTIONCODE, \n\tFIL_Insert_PremiumTransaction.STATERATINGEFFECTIVEDATE, \n\tFIL_Insert_PremiumTransaction.INDIVIDUALRISKPREMIUMMODIFICATION, \n\tEXPTRANS.WindCoverageIndicator3 AS WINDCOVERAGEFLAG, \n\tEXPTRANS.DEDUCTIBLEBASIS, \n\tEXPTRANS.o_ExposureBasis AS EXPOSUREBASIS, \n\tEXPTRANS.o_TransactionCreatedUserId AS TRANSACTIONCREATEDUSERID, \n\tEXPTRANS.o_ServiceCentreName AS SERVICECENTRENAME, \n\tFIL_Insert_PremiumTransaction.EXPOSURE, \n\tFIL_Insert_PremiumTransaction.NumberOfEmployee3 AS NUMBEROFEMPLOYEE, \n\tFIL_Insert_PremiumTransaction.NEGATERESTATECODE, \n\tFIL_Insert_PremiumTransaction.WRITTENEXPOSURE, \n\tFIL_Insert_PremiumTransaction.DeclaredEventFlag3 AS DECLAREDEVENTFLAG\n\tFROM FIL_Insert_PremiumTransaction\n),\nWorkPremiumTransaction AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, PremiumTransactionStageId)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\to_CreatedDate AS CREATEDDATE, \n\tPremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tpif_4514_stage_id AS PREMIUMTRANSACTIONSTAGEID\n\tFROM EXPTRANS\n),\nEXP_Pre_BureauCodeLkp AS (\n\tSELECT\n\tPremiumTransactionAKID_Out AS PremiumTransactionAKID,\n\tCoverageKey,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tLogicalDeleteFlag AS logical_flag,\n\tsar_stat_breakdown_line,\n\tsar_user_line,\n\tsar_code_1 AS BureauCode1,\n\tsar_code_2 AS BureauCode2,\n\tsar_code_3 AS BureauCode3,\n\tsar_code_4 AS BureauCode4,\n\tsar_code_5 AS BureauCode5,\n\tsar_code_6 AS BureauCode6,\n\tsar_code_7 AS BureauCode7,\n\tsar_code_8 AS BureauCode8,\n\tsar_code_9 AS BureauCode9,\n\tsar_code_10 AS BureauCode10,\n\tsar_code_11 AS BureauCode11,\n\tsar_code_12 AS BureauCode12,\n\tsar_code_13 AS BureauCode13,\n\tsar_code_14 AS BureauCode14,\n\tsar_code_15 AS BureauCode15,\n\tsar_special_use AS BureauSpecialUseCode,\n\tsar_annual_state_line AS PMSAnnualStatementLine,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(PMSAnnualStatementLine)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(PMSAnnualStatementLine) AS v_PMSAnnualStatementLine,\n\tv_PMSAnnualStatementLine AS PMSAnnualStatementLine_out,\n\tsar_rating_date_ind AS RatingDateIndicator,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(RatingDateIndicator)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(RatingDateIndicator) AS v_RatingDateIndicator,\n\tv_RatingDateIndicator AS RatingDateIndicator_out,\n\tsar_stat_breakdown_line || sar_user_line AS v_BureauStatisticalUserLine,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_BureauStatisticalUserLine)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(v_BureauStatisticalUserLine) AS BureauStatisticalUserLine,\n\tsar_audit_reinst_ind AS AuditReinstatementIndicator,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(AuditReinstatementIndicator)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(AuditReinstatementIndicator) AS v_AuditReinstatementIndicator,\n\tv_AuditReinstatementIndicator AS AuditReinstatementIndicator_out,\n\t-- *INF*: MD5(\r\n\t-- TO_CHAR(PremiumTransactionAKID)  ||  \r\n\t-- BureauCode1  ||  \r\n\t-- BureauCode2  ||  \r\n\t-- BureauCode3  ||  \r\n\t-- BureauCode4  ||  \r\n\t-- BureauCode5  ||  \r\n\t-- BureauCode6  ||  \r\n\t-- BureauCode7  ||  \r\n\t-- BureauCode8  ||  \r\n\t-- BureauCode9  ||  \r\n\t-- BureauCode10  ||  \r\n\t-- BureauCode11  ||  \r\n\t-- BureauCode12  ||  \r\n\t-- BureauCode13  ||  \r\n\t-- BureauCode14  ||  \r\n\t-- BureauCode15  ||  \r\n\t-- BureauSpecialUseCode  ||  \r\n\t-- PMSAnnualStatementLine  ||  \r\n\t-- RatingDateIndicator  ||  \r\n\t-- v_BureauStatisticalUserLine  ||\r\n\t-- AuditReinstatementIndicator )\r\n\t-- \n\tMD5(TO_CHAR(PremiumTransactionAKID) || BureauCode1 || BureauCode2 || BureauCode3 || BureauCode4 || BureauCode5 || BureauCode6 || BureauCode7 || BureauCode8 || BureauCode9 || BureauCode10 || BureauCode11 || BureauCode12 || BureauCode13 || BureauCode14 || BureauCode15 || BureauSpecialUseCode || PMSAnnualStatementLine || RatingDateIndicator || v_BureauStatisticalUserLine || AuditReinstatementIndicator) AS v_BureauStatisticalCodeHashKey,\n\tv_BureauStatisticalCodeHashKey AS BureauStatisticalCodeHashKey\n\tFROM EXP_Detemine_AK_ID\n),\nLKP_BureauStatisticalCode AS (\n\tSELECT\n\tBureauStatisticalCodeAKID,\n\tBureauStatisticalCodeHashKey\n\tFROM (\n\t\tSELECT BureauStatisticalCodeAKID as BureauStatisticalCodeAKID,\r\n\t\t                  BureauStatisticalCodeHashKey as BureauStatisticalCodeHashKey\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC, \r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL,\r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV,\r\n\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage STATCOV,\r\n\t\t                   @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction PT,\r\n\t\t                   @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.BureauStatisticalCode STATCD\r\n\t\tWHERE\tLOC.PolicyAKID = POL.pol_ak_id\r\n\t\t\t\tAND LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t\t\t\tAND POLCOV.PolicyCoverageAKID = STATCOV.PolicyCoverageAKID\r\n\t\t             AND STATCOV.StatisticalCoverageAKID = PT.StatisticalCoverageAKID\r\n\t\t             AND PT.PremiumTransactionAKID = STATCD.PremiumTransactionAKID\r\n\t\t\t\tAND POL.crrnt_snpsht_flag = 1 AND LOC.CurrentSnapshotFlag =1\r\n\t\t\t\tAND STATCOV.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND POLCOV.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND PT.CurrentSnapshotFlag =1 \r\n\t\t             AND STATCD.CurrentSnapshotFlag =1 \r\n\t\t\t\tAND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\r\n\t\t             AND STATCD.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY BureauStatisticalCodeHashKey ORDER BY BureauStatisticalCodeAKID DESC) = 1\n),\nFIL_Insert_BureauStatisticalCode_Rows AS (\n\tSELECT\n\tLKP_BureauStatisticalCode.BureauStatisticalCodeAKID, \n\tEXP_Pre_BureauCodeLkp.CurrentSnapshotFlag, \n\tEXP_Pre_BureauCodeLkp.AuditID, \n\tEXP_Pre_BureauCodeLkp.EffectiveDate, \n\tEXP_Pre_BureauCodeLkp.ExpirationDate, \n\tEXP_Pre_BureauCodeLkp.SourceSystemID, \n\tEXP_Pre_BureauCodeLkp.CreateDate, \n\tEXP_Pre_BureauCodeLkp.ModifiedDate, \n\tEXP_Pre_BureauCodeLkp.logical_flag, \n\tEXP_Pre_BureauCodeLkp.BureauStatisticalCodeHashKey, \n\tEXP_Pre_BureauCodeLkp.PremiumTransactionAKID, \n\tEXP_Pre_BureauCodeLkp.BureauCode1, \n\tEXP_Pre_BureauCodeLkp.BureauCode2, \n\tEXP_Pre_BureauCodeLkp.BureauCode3, \n\tEXP_Pre_BureauCodeLkp.BureauCode4, \n\tEXP_Pre_BureauCodeLkp.BureauCode5, \n\tEXP_Pre_BureauCodeLkp.BureauCode6, \n\tEXP_Pre_BureauCodeLkp.BureauCode7, \n\tEXP_Pre_BureauCodeLkp.BureauCode8, \n\tEXP_Pre_BureauCodeLkp.BureauCode9, \n\tEXP_Pre_BureauCodeLkp.BureauCode10, \n\tEXP_Pre_BureauCodeLkp.BureauCode11, \n\tEXP_Pre_BureauCodeLkp.BureauCode12, \n\tEXP_Pre_BureauCodeLkp.BureauCode13, \n\tEXP_Pre_BureauCodeLkp.BureauCode14, \n\tEXP_Pre_BureauCodeLkp.BureauCode15, \n\tEXP_Pre_BureauCodeLkp.BureauSpecialUseCode, \n\tEXP_Pre_BureauCodeLkp.PMSAnnualStatementLine_out AS PMSAnnualStatementLine, \n\tEXP_Pre_BureauCodeLkp.RatingDateIndicator_out AS RatingDateIndicator, \n\tEXP_Pre_BureauCodeLkp.BureauStatisticalUserLine, \n\tEXP_Pre_BureauCodeLkp.AuditReinstatementIndicator_out AS AuditReinstatementIndicator\n\tFROM EXP_Pre_BureauCodeLkp\n\tLEFT JOIN LKP_BureauStatisticalCode\n\tON LKP_BureauStatisticalCode.BureauStatisticalCodeHashKey = EXP_Pre_BureauCodeLkp.BureauStatisticalCodeHashKey\n\tWHERE IIF(ISNULL(BureauStatisticalCodeAKID), TRUE, FALSE)\n),\nSEQ_BureauStatisticalCode_AKID AS (\n\tCREATE SEQUENCE SEQ_BureauStatisticalCode_AKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_BureauCode_AKID AS (\n\tSELECT\n\tBureauStatisticalCodeAKID,\n\tSEQ_BureauStatisticalCode_AKID.NEXTVAL,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tlogical_flag,\n\t1 AS LogicalDeleteFlag,\n\tBureauStatisticalCodeHashKey,\n\t-- *INF*: IIF(ISNULL(BureauStatisticalCodeAKID), NEXTVAL, BureauStatisticalCodeAKID)\n\tIFF(BureauStatisticalCodeAKID IS NULL, NEXTVAL, BureauStatisticalCodeAKID) AS BureauStatisticalCodeAKID_Out,\n\tPremiumTransactionAKID,\n\t-1 AS PassThroughChargeTransactionAKID,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode3,\n\tBureauCode4,\n\tBureauCode5,\n\tBureauCode6,\n\tBureauCode7,\n\tBureauCode8,\n\tBureauCode9,\n\tBureauCode10,\n\tBureauCode11,\n\tBureauCode12,\n\tBureauCode13,\n\tBureauCode14,\n\tBureauCode15,\n\tBureauSpecialUseCode,\n\tPMSAnnualStatementLine,\n\tRatingDateIndicator,\n\tBureauStatisticalUserLine,\n\tAuditReinstatementIndicator\n\tFROM FIL_Insert_BureauStatisticalCode_Rows\n),\nBureauStatisticalCode AS (\n\tINSERT INTO BureauStatisticalCode\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, BureauStatisticalCodeHashKey, BureauStatisticalCodeAKID, PremiumTransactionAKID, PassThroughChargeTransactionAKID, BureauCode1, BureauCode2, BureauCode3, BureauCode4, BureauCode5, BureauCode6, BureauCode7, BureauCode8, BureauCode9, BureauCode10, BureauCode11, BureauCode12, BureauCode13, BureauCode14, BureauCode15, BureauSpecialUseCode, PMSAnnualStatementLine, RatingDateIndicator, BureauStatisticalUserLine, AuditReinstatementIndicator)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCreateDate AS CREATEDDATE, \n\tMODIFIEDDATE, \n\tlogical_flag AS LOGICALINDICATOR, \n\tLOGICALDELETEFLAG, \n\tBUREAUSTATISTICALCODEHASHKEY, \n\tBureauStatisticalCodeAKID_Out AS BUREAUSTATISTICALCODEAKID, \n\tPREMIUMTRANSACTIONAKID, \n\tPASSTHROUGHCHARGETRANSACTIONAKID, \n\tBUREAUCODE1, \n\tBUREAUCODE2, \n\tBUREAUCODE3, \n\tBUREAUCODE4, \n\tBUREAUCODE5, \n\tBUREAUCODE6, \n\tBUREAUCODE7, \n\tBUREAUCODE8, \n\tBUREAUCODE9, \n\tBUREAUCODE10, \n\tBUREAUCODE11, \n\tBUREAUCODE12, \n\tBUREAUCODE13, \n\tBUREAUCODE14, \n\tBUREAUCODE15, \n\tBUREAUSPECIALUSECODE, \n\tPMSANNUALSTATEMENTLINE, \n\tRATINGDATEINDICATOR, \n\tBUREAUSTATISTICALUSERLINE, \n\tAUDITREINSTATEMENTINDICATOR\n\tFROM EXP_Determine_BureauCode_AKID\n),\nSQ_PremiumTransaction_Exp AS (\n\twith lkp as\r\n\t(\r\n\tselect *\r\n\tfrom\r\n\t(select *,\r\n\tROW_NUMBER() over (partition by PolicyAKID,MajorPerilSequenceNumber,StateProvinceCode,StatisticalCoverageEffectiveDate order by CreatedDate desc,ExperienceModificationEffectiveDate desc) as rownum\r\n\tfrom\r\n\t(select distinct pc.PolicyAKID as PolicyAKID,\r\n\tpt.ExperienceModificationFactor as ExperienceModificationFactor,\r\n\tpt.ExperienceModificationEffectiveDate as ExperienceModificationEffectiveDate,\r\n\tsc.MajorPerilSequenceNumber as MajorPerilSequenceNumber,\r\n\tSUBSTRING(rl.StateProvinceCode,1,2) as StateProvinceCode,\r\n\tsc.StatisticalCoverageEffectiveDate as StatisticalCoverageEffectiveDate,\r\n\tcast(pt.CreatedDate as date) as CreatedDate\r\n\tfrom RiskLocation rl\r\n\tinner join PolicyCoverage pc\r\n\ton rl.RiskLocationAKID=pc.RiskLocationAKID\r\n\tinner join StatisticalCoverage sc\r\n\ton pc.PolicyCoverageAKID=sc.PolicyCoverageAKID\r\n\tinner join PremiumTransaction pt\r\n\ton sc.StatisticalCoverageAKID=pt.StatisticalCoverageAKID\r\n\tjoin v2.policy pol\r\n\ton rl.PolicyAKID=pol.pol_ak_id\r\n\tand pol.crrnt_snpsht_flag=1\r\n\twhere pc.TypeBureauCode in ('WC','WP','WorkersCompensation') \r\n\tand pt.PremiumType='D'   \r\n\tand pt.ReasonAmendedCode != 'CWO'\r\n\tand sc.ClassCode = '9898' \r\n\tand pt.SourceSystemID = 'PMS'\r\n\t)t)t\r\n\twhere rownum=1\r\n\t)\r\n\tselect PremiumTransactionID,\r\n\tExperienceModificationFactor,\r\n\tExperienceModificationEffectiveDate\r\n\tfrom\r\n\t(\r\n\tselect pt.PremiumTransactionID, \r\n\tlkp.ExperienceModificationFactor,\r\n\tlkp.ExperienceModificationEffectiveDate,\r\n\twpmc1.ClassCode as ClassCode1,\r\n\twpmc2.ClassCode as ClassCode2,\r\n\tsc.StatisticalCoverageEffectiveDate as StatisticalCoverageEffectiveDate,\r\n\tROW_NUMBER() over (partition by pt.PremiumTransactionID order by lkp.ExperienceModificationEffectiveDate desc) as rownum,\r\n\tpt.ExperienceModificationFactor as current_ExperienceModificationFactor,\r\n\tpt.ExperienceModificationEffectiveDate as current_ExperienceModificationEffectiveDate\r\n\tfrom RiskLocation rl\r\n\tinner join PolicyCoverage pc\r\n\ton rl.RiskLocationAKID=pc.RiskLocationAKID\r\n\tinner join StatisticalCoverage sc\r\n\ton pc.PolicyCoverageAKID=sc.PolicyCoverageAKID\r\n\tinner join PremiumTransaction pt\r\n\ton sc.StatisticalCoverageAKID=pt.StatisticalCoverageAKID\r\n\tinner join lkp\r\n\ton lkp.PolicyAKID=pc.PolicyAKID\r\n\tand lkp.StateProvinceCode=rl.StateProvinceCode\r\n\tand lkp.MajorPerilSequenceNumber=sc.MajorPerilSequenceNumber\r\n\tand lkp.ExperienceModificationEffectiveDate<=sc.StatisticalCoverageEffectiveDate\r\n\tleft join SupClassificationWorkersCompensation wpmc1\r\n\ton wpmc1.SubjectToExperienceModificationClassIndicator = 'Y'\r\n\tand wpmc1.RatingStateCode = rl.StateProvinceCode\r\n\tand wpmc1.ClassCode = sc.ClassCode\r\n\tleft join SupClassificationWorkersCompensation wpmc2\r\n\ton wpmc2.SubjectToExperienceModificationClassIndicator = 'Y'\r\n\tand wpmc2.RatingStateCode = '99'\r\n\tand wpmc2.ClassCode = sc.ClassCode\r\n\twhere pc.TypeBureauCode in ('WC','WP','WorkersCompensation') \r\n\tand pt.PremiumType='D' \r\n\tand pt.ReasonAmendedCode!='CWO'\r\n\t--and sc.ClassCode<>'9898' \r\n\tand pt.SourceSystemID='PMS'\r\n\t) t\r\n\twhere rownum = 1 and (ClassCode1 is not null or ClassCode2 is not null) \r\n\tand (ExperienceModificationFactor<>current_ExperienceModificationFactor\r\n\tor ExperienceModificationEffectiveDate<>current_ExperienceModificationEffectiveDate)\r\n\torder by 1\n),\nUPD_Exp_Mod_Exp_Mod_Date AS (\n\tSELECT\n\tPremiumTransactionID, \n\tExperienceModificationFactor AS Exp_Mod_Factor, \n\tExperienceModificationEffectiveDate AS Exp_Mod_Eff_date\n\tFROM SQ_PremiumTransaction_Exp\n),\nPremiumTransaction_Update_Exp_Mod AS (\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPD_Exp_Mod_Exp_Mod_Date AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ExperienceModificationFactor = S.Exp_Mod_Factor, T.ExperienceModificationEffectiveDate = S.Exp_Mod_Eff_date\n),\nSQ_PMA AS (\n\tselect c.PolicyAKID,\r\n\tc.InsuranceLine,\r\n\ta.PremiumTransactionID,\r\n\ta.PackageModificationAdjustmentGroupCode\r\n\tfrom PremiumTransaction a\r\n\tjoin BureauStatisticalCode t\r\n\ton t.PremiumTransactionAKID=a.PremiumTransactionAKID\r\n\tand t.CurrentSnapshotFlag=1\r\n\tjoin StatisticalCoverage b\r\n\ton a.StatisticalCoverageAKID=b.StatisticalCoverageAKID\r\n\tjoin PolicyCoverage c\r\n\ton c.PolicyCoverageAKID=b.PolicyCoverageAKID\r\n\tand (((c.InsuranceLine in ('GL','CF','GA')\r\n\tor c.TypeBureauCode in ('AL','AP','AN'))\r\n\tand ISNULL(a.PackageModificationAdjustmentGroupCode,'N/A')<>'N/A')\r\n\tor (c.InsuranceLine='IM' and ISNULL(a.PackageModificationAdjustmentGroupCode,'N/A')='N/A'))\r\n\twhere c.PolicyAKID in (\r\n\tselect D.PolicyAKID from PremiumTransaction a\r\n\tjoin BureauStatisticalCode b\r\n\ton a.PremiumTransactionAKID=b.PremiumTransactionAKID\r\n\tand b.CurrentSnapshotFlag=1\r\n\tand b.BureauCode1='3'\r\n\tand b.BureauCode2='6'\r\n\tand ISNULL(a.PackageModificationAdjustmentGroupCode,'N/A')='N/A'\r\n\tjoin StatisticalCoverage c\r\n\ton c.StatisticalCoverageAKID=a.StatisticalCoverageAKID\r\n\tjoin PolicyCoverage d\r\n\ton d.PolicyCoverageAKID=c.PolicyCoverageAKId\r\n\tand d.InsuranceLine='IM')\r\n\t@{pipeline().parameters.WHERE_CLAUSE_PMA}\r\n\tORDER BY c.PolicyAKID,\r\n\tcase when c.InsuranceLine='GL' then 1\r\n\twhen c.InsuranceLine='CF' then 2\r\n\twhen c.TypeBureauCode in ('AL','AP','AN') then 3\r\n\twhen c.InsuranceLine='GA' then 4\r\n\telse 5 end,a.PremiumTransactionID\n),\nEXP_CalculatePMA AS (\n\tSELECT\n\tPolicyAKID AS i_PolicyAKID,\n\tInsuranceLine,\n\tPremiumTransactionID,\n\tPackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: IIF(i_PolicyAKID=v_prev_PolicyAKID,v_PackageModificationAdjustmentGroupCode,i_PackageModificationAdjustmentGroupCode)\n\tIFF(i_PolicyAKID = v_prev_PolicyAKID, v_PackageModificationAdjustmentGroupCode, i_PackageModificationAdjustmentGroupCode) AS v_PackageModificationAdjustmentGroupCode,\n\ti_PolicyAKID AS v_prev_PolicyAKID,\n\tv_PackageModificationAdjustmentGroupCode AS o_PackageModificationAdjustmentGroupCode\n\tFROM SQ_PMA\n),\nFILTRANS AS (\n\tSELECT\n\tInsuranceLine, \n\tPremiumTransactionID, \n\to_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode\n\tFROM EXP_CalculatePMA\n\tWHERE InsuranceLine='IM'\n),\nUPDTRANS AS (\n\tSELECT\n\tPremiumTransactionID, \n\tPackageModificationAdjustmentGroupCode\n\tFROM FILTRANS\n),\nPremiumTransaction_Update_PMA AS (\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPDTRANS AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.PackageModificationAdjustmentGroupCode = S.PackageModificationAdjustmentGroupCode\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905516"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604219"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:21:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:54:57"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "JOIN_CONDITION": {
                "type": "string",
                "defaultValue": "INNER JOIN"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_NAME_4514": {
                "type": "string",
                "defaultValue": "pif_4514_stage"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "AND 1=1"
            },
            "WHERE_CLAUSE_EDW": {
                "type": "string",
                "defaultValue": "1=1"
            },
            "WHERE_CLAUSE_PMA": {
                "type": "string",
                "defaultValue": "AND 1=2"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}