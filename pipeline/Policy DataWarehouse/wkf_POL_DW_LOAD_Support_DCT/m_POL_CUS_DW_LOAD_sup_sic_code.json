{
    "name": "m_POL_CUS_DW_LOAD_sup_sic_code",
    "properties": {
        "activities": [
            {
                "name": "m_POL_CUS_DW_LOAD_sup_sic_code",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_gtam_wbsiccod_stage AS (\n\tSELECT\n\t\tgtam_wbsiccod_stage_id,\n\t\tsic_code_number,\n\t\tsic_code_description,\n\t\textract_date,\n\t\tas_of_date,\n\t\trecord_count,\n\t\tsource_system_id\n\tFROM gtam_wbsiccod_stage\n\tWHERE 1=0\n),\nEXP_values AS (\n\tSELECT\n\tsic_code_number AS in_sic_code_number,\n\t-- *INF*: IIF(ISNULL(in_sic_code_number) OR IS_SPACES(in_sic_code_number) OR LENGTH(in_sic_code_number)=0\r\n\t-- ,'N/A'\r\n\t-- ,ltrim(rtrim(in_sic_code_number)))\n\tIFF(in_sic_code_number IS NULL OR IS_SPACES(in_sic_code_number) OR LENGTH(in_sic_code_number) = 0, 'N/A', ltrim(rtrim(in_sic_code_number))) AS sic_code_number,\n\tsic_code_description AS in_sic_code_description,\n\t-- *INF*: IIF(ISNULL(in_sic_code_description) OR IS_SPACES(in_sic_code_description) OR\r\n\t-- LENGTH(in_sic_code_description)=0,'N/A',UPPER(ltrim(rtrim(in_sic_code_description))))\n\tIFF(in_sic_code_description IS NULL OR IS_SPACES(in_sic_code_description) OR LENGTH(in_sic_code_description) = 0, 'N/A', UPPER(ltrim(rtrim(in_sic_code_description)))) AS sic_code_description\n\tFROM SQ_gtam_wbsiccod_stage\n),\nLKP_sup_sic_code AS (\n\tSELECT\n\tsup_sic_code_id,\n\tsic_code_descript,\n\tsic_code\n\tFROM (\n\t\tSELECT \r\n\t\t\tsup_sic_code.sup_sic_code_id as sup_sic_code_id, \r\n\t\t\tsup_sic_code.sic_code_descript as sic_code_descript, \r\n\t\t\tLTRIM(RTRIM(sup_sic_code.sic_code)) as sic_code \r\n\t\tFROM  \r\n\t\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\r\n\t\tWHERE \r\n\t\t\tsup_sic_code.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY sic_code ORDER BY sup_sic_code_id DESC) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_values.sic_code_number,\n\tEXP_values.sic_code_description,\n\tLKP_sup_sic_code.sup_sic_code_id AS lkp_sup_sic_code_id,\n\tLKP_sup_sic_code.sic_code_descript AS lkp_sic_code_description,\n\t1 AS crrnt_snapshot_flag,\n\t-- *INF*: IIF(ISNULL(lkp_sup_sic_code_id),'NEW',\r\n\t-- \tIIF(\r\n\t-- \t(ltrim(rtrim(sic_code_description)) <> UPPER(ltrim(rtrim(lkp_sic_code_description)))),\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(lkp_sup_sic_code_id IS NULL, 'NEW', IFF(( ltrim(rtrim(sic_code_description)) <> UPPER(ltrim(rtrim(lkp_sic_code_description))) ), 'UPDATE', 'NOCHANGE')) AS v_Changed_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_ID,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tTO_DATE(TO_CHAR(SYSDATE,'MM/DD/YYYY HH24:MI:SS'),'MM/DD/YYYY HH24:MI:SS'))\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), TO_DATE(TO_CHAR(SYSDATE, 'MM/DD/YYYY HH24:MI:SS'), 'MM/DD/YYYY HH24:MI:SS')) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS Source_System_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date\n\tFROM EXP_values\n\tLEFT JOIN LKP_sup_sic_code\n\tON LKP_sup_sic_code.sic_code = EXP_values.sic_code_number\n),\nFIL_insert AS (\n\tSELECT\n\tsic_code_number, \n\tsic_code_description, \n\tcrrnt_snapshot_flag, \n\tAudit_ID, \n\tEff_From_Date, \n\tEff_To_Date, \n\tChanged_Flag, \n\tSource_System_ID, \n\tCreated_Date, \n\tModified_Date\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nTGT_sup_sic_code_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, sic_code, sic_code_descript)\n\tSELECT \n\tcrrnt_snapshot_flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_ID AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSource_System_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tsic_code_number AS SIC_CODE, \n\tsic_code_description AS SIC_CODE_DESCRIPT\n\tFROM FIL_insert\n),\nSQ_DCPolicyStaging AS (\n\tSELECT DISTINCT A.SICCode, \r\n\tA.SICCodeDesc \r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging A\r\n\tWHERE A.SICCode IS NOT NULL AND LTRIM(RTRIM(A.SICCode))<>'' AND A.SICCodeDesc IS NOT NULL AND LTRIM(RTRIM(A.SICCodeDesc))<>''\r\n\tAND LEN(LTRIM(RTRIM(A.SICCode)))<=4\r\n\tAND  A.SessionId = (SELECT MAX(B.SessionId) FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging B where RIGHT('0000'+LTRIM(RTRIM(B.SICCode)), 4) = RIGHT('0000'+LTRIM(RTRIM(A.SICCode)), 4))\n),\nEXP_GetValues_DCT AS (\n\tSELECT\n\tSICCode AS i_SICCode,\n\tSICCodeDesc AS i_SICCodeDesc,\n\t-- *INF*: LTRIM(RTRIM(i_SICCode))\n\tLTRIM(RTRIM(i_SICCode)) AS v_SICCode,\n\t-- *INF*: UPPER(LTRIM(RTRIM(i_SICCodeDesc)))\n\tUPPER(LTRIM(RTRIM(i_SICCodeDesc))) AS v_SICCodeDesc,\n\t'[' || v_SICCode || ']' AS v_SICCode2,\n\t-- *INF*: LPAD(v_SICCode, 4, '0')\n\tLPAD(v_SICCode, 4, '0') AS sic_code_number,\n\t-- *INF*: IIF(INSTR(v_SICCodeDesc, v_SICCode2)=0, v_SICCodeDesc, LTRIM(RTRIM(REPLACESTR(0, v_SICCodeDesc, v_SICCode2, ''))))\n\tIFF(INSTR(v_SICCodeDesc, v_SICCode2) = 0, v_SICCodeDesc, LTRIM(RTRIM(REPLACESTR(0, v_SICCodeDesc, v_SICCode2, '')))) AS sic_code_description\n\tFROM SQ_DCPolicyStaging\n),\nLKP_sup_sic_code_DCT_new AS (\n\tSELECT\n\tsup_sic_code_id,\n\tsic_code_descript,\n\tsic_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_sic_code_id,\n\t\t\tsic_code_descript,\n\t\t\tsic_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\n\t\tWHERE crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY sic_code ORDER BY sup_sic_code_id) = 1\n),\nEXP_Detect_Changes_DCT AS (\n\tSELECT\n\tLKP_sup_sic_code_DCT_new.sic_code_descript AS lkp_sic_code_description,\n\tLKP_sup_sic_code_DCT_new.sup_sic_code_id AS lkp_sup_sic_code_id,\n\tEXP_GetValues_DCT.sic_code_number,\n\tEXP_GetValues_DCT.sic_code_description,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_sic_code_description),\r\n\t-- 'NEW',\r\n\t-- UPPER(LTRIM(RTRIM(lkp_sic_code_description))) <> sic_code_description,\r\n\t-- 'UPDATE',\r\n\t-- 'NOCHANGE'\r\n\t-- )\n\tDECODE(TRUE,\n\tlkp_sic_code_description IS NULL, 'NEW',\n\tUPPER(LTRIM(RTRIM(lkp_sic_code_description))) <> sic_code_description, 'UPDATE',\n\t'NOCHANGE') AS v_Changed_Flag,\n\t1 AS o_crrnt_snapshot_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_Audit_ID,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS o_Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_Eff_To_Date,\n\t'DCT' AS o_Source_System_ID,\n\tSYSDATE AS o_Created_Date,\n\tSYSDATE AS o_Modified_Date,\n\tv_Changed_Flag AS o_Changed_Flag\n\tFROM EXP_GetValues_DCT\n\tLEFT JOIN LKP_sup_sic_code_DCT_new\n\tON LKP_sup_sic_code_DCT_new.sic_code = EXP_GetValues_DCT.sic_code_number\n),\nRTRTRANS AS (\n\tSELECT\n\tlkp_sup_sic_code_id,\n\tsic_code_number,\n\tsic_code_description,\n\to_crrnt_snapshot_flag,\n\to_Audit_ID,\n\to_Eff_From_Date,\n\to_Eff_To_Date,\n\to_Source_System_ID,\n\to_Created_Date,\n\to_Modified_Date,\n\to_Changed_Flag\n\tFROM EXP_Detect_Changes_DCT\n),\nRTRTRANS_INSERT AS (SELECT * FROM RTRTRANS WHERE o_Changed_Flag= 'NEW'),\nRTRTRANS_UPDATE AS (SELECT * FROM RTRTRANS WHERE o_Changed_Flag='UPDATE'),\nUPD_sup_sic_code_desc AS (\n\tSELECT\n\tlkp_sup_sic_code_id AS lkp_sup_sic_code_id3, \n\to_Modified_Date AS o_Modified_Date3, \n\tsic_code_number AS sic_code_number3, \n\tsic_code_description AS sic_code_description3\n\tFROM RTRTRANS_UPDATE\n),\nTGT_sup_sic_code_UPD_DCT AS (\n\tMERGE INTO sup_sic_code AS T\n\tUSING UPD_sup_sic_code_desc AS S\n\tON T.sup_sic_code_id = S.lkp_sup_sic_code_id3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.modified_date = S.o_Modified_Date3, T.sic_code = S.sic_code_number3, T.sic_code_descript = S.sic_code_description3\n),\nTGT_sup_sic_code_INSERT_DCT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, sic_code, sic_code_descript)\n\tSELECT \n\to_crrnt_snapshot_flag AS CRRNT_SNPSHT_FLAG, \n\to_Audit_ID AS AUDIT_ID, \n\to_Eff_From_Date AS EFF_FROM_DATE, \n\to_Eff_To_Date AS EFF_TO_DATE, \n\to_Source_System_ID AS SOURCE_SYS_ID, \n\to_Created_Date AS CREATED_DATE, \n\to_Modified_Date AS MODIFIED_DATE, \n\tsic_code_number AS SIC_CODE, \n\tsic_code_description AS SIC_CODE_DESCRIPT\n\tFROM RTRTRANS_INSERT\n),\nSQ_sup_sic_code AS (\n\tSELECT \r\n\t\tsup_sic_code_id, \r\n\t\teff_from_date, \r\n\t\teff_to_date, \r\n\t\tsic_code \r\n\tFROM\r\n\t \t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\r\n\tWHERE sic_code IN \r\n\t\t   (SELECT sic_code FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code\r\n\t           WHERE crrnt_snpsht_flag = 1 GROUP BY sic_code HAVING count(*) > 1)\r\n\tORDER BY  sic_code, eff_from_date  DESC\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_Eff_dates AS (\n\tSELECT\n\tsup_sic_code_id,\n\tsic_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tsic_code = v_PREV_ROW_sic_code_number, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tsic_code = v_PREV_ROW_sic_code_number, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tsic_code AS v_PREV_ROW_sic_code_number,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snapshot_flag\n\tFROM SQ_sup_sic_code\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tsup_sic_code_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snapshot_flag\n\tFROM EXP_Lag_Eff_dates\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_Sup_Sic_Code AS (\n\tSELECT\n\tsup_sic_code_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snapshot_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nTGT_sup_sic_code_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_sic_code AS T\n\tUSING UPD_Sup_Sic_Code AS S\n\tON T.sup_sic_code_id = S.sup_sic_code_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snapshot_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905515"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604172"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:20:53"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:53:42"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}