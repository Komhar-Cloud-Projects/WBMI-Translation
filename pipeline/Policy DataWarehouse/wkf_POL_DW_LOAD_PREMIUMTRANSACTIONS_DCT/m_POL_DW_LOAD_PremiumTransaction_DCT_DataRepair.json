{
    "name": "m_POL_DW_LOAD_PremiumTransaction_DCT_DataRepair",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PremiumTransaction_DCT_DataRepair",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_DCModifierStaging_DCLine AS (\n\tSELECT\n\tValue,\n\tObjectId\n\tFROM (\n\t\tSELECT \n\t\t\tValue,\n\t\t\tObjectId\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCModifierStaging\n\t\tWHERE ObjectName='DC_Line' and Type='IRPM'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ObjectId ORDER BY Value) = 1\n),\nLKP_WBCUPremiumDetailStage AS (\n\tSELECT\n\tOverride,\n\tWBCUPremiumDetailId\n\tFROM (\n\t\tselect WBCUPremiumDetailId as WBCUPremiumDetailId,\r\n\t\tCONVERT(varchar,Override) as Override\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCUPremiumDetailStage\r\n\t\torder by WBCUPremiumDetailId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WBCUPremiumDetailId ORDER BY Override) = 1\n),\nLKP_DCDeductibleStaging_Value AS (\n\tSELECT\n\tValue,\n\tCoverageId\n\tFROM (\n\t\tSELECT\r\n\t\t  CoverageId AS CoverageId,\r\n\t\t  MAX(Value) AS Value\r\n\t\tFROM (\r\n\t\t--BusinessOwners\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCoverageStaging b\r\n\t\t  ON a.ObjectId = b.ObjectId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_BP_Risk'\r\n\t\t  AND a.ObjectName = b.ObjectName\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\t--CommercialCrime\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCRBuildingStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectId = b.CR_BuildingId\r\n\t\t  AND a.ObjectName = 'DC_CR_Building'\r\n\t\tINNER JOIN DCCRBuildingCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND c.CR_BuildingId = b.CR_BuildingId\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_CR_RiskCrime'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_GL_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\t--Commercial Property\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCFBuilderStaging b\r\n\t\t  ON a.ObjectId = b.CF_BuilderId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Builder'\r\n\t\tINNER JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_CF_Building'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  d.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCFBuildingStage b\r\n\t\t  ON a.ObjectId = b.CFBuildingId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Building'\r\n\t\tINNER JOIN DCCFRiskStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND c.CF_BuildingId = b.CFBuildingId\r\n\t\tINNER JOIN DCCoverageStaging d\r\n\t\t  ON c.SessionId = d.SessionId\r\n\t\t  AND c.CF_RiskId = d.ObjectId\r\n\t\t  AND d.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCFPropertyStaging b\r\n\t\t  ON a.ObjectId = b.CF_PropertyId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Property'\r\n\t\tINNER JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCFRatingGroupStaging b\r\n\t\t  ON a.ObjectId = b.CF_RatingGroupId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_RatingGroup'\r\n\t\tINNER JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_WC_StateTerm'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0) temp\r\n\t\tGROUP BY CoverageId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY Value) = 1\n),\nLKP_WorkDCTPolicy AS (\n\tSELECT\n\tBookedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionCreatedDate,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.PolicyNumber AS PolicyNumber, \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate, \r\n\t\tCASE WHEN T.TransactionCreatedDate>T.TransactionEffectiveDate THEN T.TransactionCreatedDate ELSE T.TransactionEffectiveDate END AS BookedDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\twhere T.TransactionState='committed'\r\n\t\tand T.PolicyStatus<>'Quote'\r\n\t\tand T.TransactionPurpose<>'Offset'\r\n\t\tORDER BY T.PolicyNumber ,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY BookedDate) = 1\n),\nLKP_WorkDCTPolicy_EnteredDate_Initial AS (\n\tSELECT\n\tTransactionCreatedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.PolicyNumber AS PolicyNumber, \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\twhere T.TransactionState='committed'\r\n\t\tand T.PolicyStatus<>'Quote'\r\n\t\tand T.TransactionPurpose<>'Offset'\r\n\t\tORDER BY  T.PolicyNumber,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY TransactionCreatedDate) = 1\n),\nLKP_ArchWorkPremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionStageId,\n\tPremiumTransactionAKId\n\tFROM (\n\t\tSELECT \n\t\t\tPremiumTransactionStageId,\n\t\t\tPremiumTransactionAKId\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.ArchWorkPremiumTransaction\n\t\tWHERE SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId ORDER BY PremiumTransactionStageId) = 1\n),\nLKP_WorkDCTPolicy_Initial AS (\n\tSELECT\n\tBookedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionCreatedDate,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.PolicyNumber AS PolicyNumber, \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate, \r\n\t\tCASE WHEN T.TransactionCreatedDate>T.TransactionEffectiveDate THEN T.TransactionCreatedDate ELSE T.TransactionEffectiveDate END AS BookedDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\twhere T.TransactionState='committed'\r\n\t\tand T.PolicyStatus<>'Quote'\r\n\t\tand T.TransactionPurpose<>'Offset'\r\n\t\tORDER BY T.PolicyNumber ,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY BookedDate) = 1\n),\nLKP_WorkDCTPolicy_EnteredDate AS (\n\tSELECT\n\tTransactionCreatedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.PolicyNumber AS PolicyNumber, \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\twhere T.TransactionState='committed'\r\n\t\tand T.PolicyStatus<>'Quote'\r\n\t\tand T.TransactionPurpose<>'Offset'\r\n\t\tORDER BY T.PolicyNumber,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY TransactionCreatedDate) = 1\n),\nLKP_PremiumTransaction_Offset AS (\n\tSELECT\n\tPremiumTransactionHashKey\n\tFROM (\n\t\tSELECT \r\n\t\t      DISTINCT pt.PremiumTransactionHashKey AS PremiumTransactionHashKey\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction pt\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\tON RC.RatingCoverageAKId=pt.RatingCoverageAKId\r\n\t\tAND RC.EffectiveDate=pt.EffectiveDate\r\n\t\tINNER JOIN (\r\n\t\tselect DISTINCT WCT.CoverageGUId from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction WCT\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.workdctpolicy  wpol on WCT.SessionId = wpol.sessionid \r\n\t\tWHERE wPol.DataFix='Y'\r\n\t\tAND wPol.DataFixType=@{pipeline().parameters.DATAFIX_TYPE}\r\n\t\t) WCT\r\n\t\ton WCT.CoverageGUID=RC.CoverageGUID\r\n\t\tWHERE pt.CurrentSnapshotFlag='1' AND pt.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tAnd pt.ReasonAmendedCode not in ('Claw Back','CWO')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionHashKey ORDER BY PremiumTransactionHashKey) = 1\n),\nSEQ_PremiumTransactionAKID AS (\n\tCREATE SEQUENCE SEQ_PremiumTransactionAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_SEQ_OFFSET AS (\n\tSELECT\n\tNEXTVAL\n\tFROM SEQ_PremiumTransactionAKID\n),\nSQ_DCStaging_Tables AS (\n\tSELECT\n\t\tWorkDCTCoverageTransaction.CoverageGUID,\n\t\tWorkDCTPolicy.TransactionCreatedDate,\n\t\tWorkDCTPolicy.TransactionPurpose,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.SessionId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CoverageId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.LineId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.IndividualRiskPremiumModification,\n\t\tWorkDCTPolicy.TransactionType,\n\t\tWorkDCTCoverageTransaction.CoverageType,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CoverageForm,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RiskType,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.Exposure,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CommissionPercentage,\n\t\tWorkDCTInsuranceLine.LineType,\n\t\tWorkDCTPolicy.PolicyGUId,\n\t\tWorkDCTPolicy.PolicyEffectiveDate,\n\t\tWorkDCTPolicy.PolicyStatus,\n\t\tWorkDCTPolicy.TransactionEffectiveDate,\n\t\tWorkDCTPolicy.TransactionExpirationDate,\n\t\tWorkDCTPolicy.TransactionCancellationDate,\n\t\tWorkDCTLocation.LocationNumber,\n\t\tWorkDCTPolicy.PolicyVersion,\n\t\tWorkDCTPolicy.PolicyExpirationDate,\n\t\tWorkDCTCoverageTransaction.Premium,\n\t\tWorkDCTCoverageTransaction.Change,\n\t\tWorkDCTCoverageTransaction.Written,\n\t\tWorkDCTCoverageTransaction.Prior,\n\t\tWorkDCTPolicy.ReasonCode,\n\t\tWorkDCTPolicy.ReasonCodeCaption,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ILFTableAssignmentCode,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.OccupancyType,\n\t\tWorkDCTCoverageTransaction.BaseRate,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RetroactiveDate,\n\t\tWorkDCTInsuranceLine.ExperienceModifier,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.OrginalPackageModifier AS OriginalPackageModifier,\n\t\tWorkDCTCoverageTransaction.IncreasedLimitFactor,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.YearBuilt,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ExperienceModEffectiveDate,\n\t\tWorkDCTInsuranceLine.FinalCommission,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ConstructionCode,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RateEffectiveDate,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.WindCoverageIndicator,\n\t\tWorkDCTCoverageTransaction.CoverageDeleteFlag,\n\t\tWorkDCTCoverageTransaction.ParentCoverageObjectId,\n\t\tWorkDCTCoverageTransaction.ParentCoverageObjectName,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ExposureBasis,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.FullCoverageGlass,\n\t\tWorkDCTPolicy.TransactionCreatedUserId AS TransactionCreatedUserID,\n\t\tWorkDCTPolicy.EndorsedProcessedBy,\n\t\tWorkDCTPolicy.DeclaredEvent,\n\t\tWorkDCTPolicy.PolicyNumber,\n\t\tWorkDCTLocation.Territory,\n\t\tWorkDCTLocation.LocationXmlId,\n\t\tWorkDCTLocation.StateProvince\n\tFROM WorkDCTPolicy\n\tINNER JOIN WorkDCTTransactionInsuranceLineLocationBridge\n\tINNER JOIN WorkDCTLocation\n\tINNER JOIN WorkDCTInsuranceLine\n\tINNER JOIN WorkDCTCoverageTransaction\n\tON WorkDCTCoverageTransaction.CoverageId=WorkDCTTransactionInsuranceLineLocationBridge.CoverageId\r\n\tand\r\n\tWorkDCTTransactionInsuranceLineLocationBridge.LocationAssociationId=WorkDCTLocation.LocationAssociationId\r\n\tand\r\n\tWorkDCTInsuranceLine.LineId=WorkDCTTransactionInsuranceLineLocationBridge.LineId\r\n\tand\r\n\tWorkDCTInsuranceLine.PolicyId=WorkDCTPolicy.PolicyId\r\n\tand\r\n\tWorkDCTPolicy.PolicyStatus<>'Quote'\r\n\tand\r\n\tWorkDCTPolicy.TransactionState='committed'\r\n\t--For line level Umbrella coverage, only load 'PolicyMinimum'\r\n\tand not (WorkDCTInsuranceLine.LineType='CommercialUmbrella'\r\n\tand \r\n\t\r\n\tWorkDCTCoverageTransaction.ParentCoverageObjectName='DC_Line'\r\n\tand WorkDCTCoverageTransaction.CoverageType<>'PolicyMinimum'\r\n\t\r\n\t)\r\n\tAND WorkDCTPolicy.TransactionPurpose='Onset'\r\n\tAND WorkDCTPolicy.datafix='Y'\r\n\tAND WorkDCTPolicy.datafixTYPE = @{pipeline().parameters.DATAFIX_TYPE} \r\n\tAND WorkDCTPolicy.TransactionType @{pipeline().parameters.EXCLUDE_TTYPE}\n),\nLKP_DCWCStateTermStaging AS (\n\tSELECT\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tWC_StateTermId,\n\tObjectName\n\tFROM (\n\t\tSELECT PeriodStartDate as PeriodStartDate, \r\n\t\tPeriodEndDate as PeriodEndDate, \r\n\t\tWC_StateTermId as WC_StateTermId,\r\n\t\t'DC_WC_StateTerm' as ObjectName\r\n\t\tFROM DCWCStateTermStaging\r\n\t\torder by WC_StateTermId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WC_StateTermId,ObjectName ORDER BY PeriodStartDate) = 1\n),\nLKP_WBWCCoverageTermStage AS (\n\tSELECT\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tCoverageId\n\tFROM (\n\t\tSELECT CT.PeriodStartDate as PeriodStartDate, \r\n\t\tCT.PeriodEndDate as PeriodEndDate, \r\n\t\tWBC.CoverageId as CoverageId\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCCoverageTermStage CT\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCoverageStage WBC\r\n\t\tON CT.WB_CoverageId=WBC.WBCoverageId\r\n\t\tORDER BY WBC.CoverageId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY PeriodStartDate) = 1\n),\nLKP_WorkDCTInBalancePolicy AS (\n\tSELECT\n\tAccountingDate,\n\tManualOverrideAccountingDate,\n\tSessionID,\n\tPolicyNumber\n\tFROM (\n\t\tSELECT \n\t\t\tAccountingDate,\n\t\t\tManualOverrideAccountingDate,\n\t\t\tSessionID,\n\t\t\tPolicyNumber\n\t\tFROM WorkDCTInBalancePolicy\n\t\tWHERE HistoryId=(select max(HistoryId) from WorkDCTInBalancePolicy B where B.SessionId=WorkDCTInBalancePolicy.SessionId)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionID,PolicyNumber ORDER BY AccountingDate) = 1\n),\nEXP_Default AS (\n\tSELECT\n\tLKP_WBWCCoverageTermStage.PeriodStartDate AS lkp_PeriodStartDate,\n\tLKP_WBWCCoverageTermStage.PeriodEndDate AS lkp_PeriodEndDate,\n\tLKP_DCWCStateTermStaging.PeriodStartDate AS i_PeriodStartDate,\n\tLKP_DCWCStateTermStaging.PeriodEndDate AS i_PeriodEndDate,\n\tSQ_DCStaging_Tables.SessionId AS i_SessionId,\n\tSQ_DCStaging_Tables.CoverageId AS i_CoverageId,\n\tSQ_DCStaging_Tables.TransactionType AS i_Type,\n\tSQ_DCStaging_Tables.CoverageGUID AS i_CoverageGUID,\n\tSQ_DCStaging_Tables.CoverageType AS i_CoverageType,\n\tSQ_DCStaging_Tables.CoverageForm AS i_CoverageForm,\n\tSQ_DCStaging_Tables.RiskType AS i_RiskType,\n\tSQ_DCStaging_Tables.Exposure AS i_Exposure,\n\tSQ_DCStaging_Tables.CommissionPercentage AS i_CommissionPercentage,\n\tSQ_DCStaging_Tables.LineType AS i_LineType,\n\tSQ_DCStaging_Tables.PolicyGUId AS i_Id,\n\tSQ_DCStaging_Tables.PolicyEffectiveDate AS i_PolicyEffectiveDate,\n\tSQ_DCStaging_Tables.PolicyStatus,\n\tSQ_DCStaging_Tables.TransactionEffectiveDate AS i_EffectiveDate,\n\tSQ_DCStaging_Tables.TransactionExpirationDate AS i_ExpirationDate,\n\tSQ_DCStaging_Tables.TransactionCreatedDate AS i_CreatedDate,\n\tSQ_DCStaging_Tables.TransactionCancellationDate AS i_TransactionCancellationDate,\n\tSQ_DCStaging_Tables.LocationNumber AS i_LocationNumber,\n\tSQ_DCStaging_Tables.PolicyVersion AS i_PolicyVersion,\n\tSQ_DCStaging_Tables.PolicyExpirationDate AS i_PolicyExpirationDate,\n\tSQ_DCStaging_Tables.Premium AS i_Premium,\n\tSQ_DCStaging_Tables.Change AS i_Change,\n\tSQ_DCStaging_Tables.Written AS i_Written,\n\tSQ_DCStaging_Tables.Prior AS i_Prior,\n\tSQ_DCStaging_Tables.ReasonCode AS i_Code,\n\tSQ_DCStaging_Tables.ReasonCodeCaption AS i_CodeCaption,\n\tSQ_DCStaging_Tables.ILFTableAssignmentCode AS i_ILFTableAssignmentCode,\n\tSQ_DCStaging_Tables.OccupancyType AS i_OccupancyType,\n\tSQ_DCStaging_Tables.BaseRate AS i_BaseRate,\n\tSQ_DCStaging_Tables.RetroactiveDate AS i_RetroactiveDate,\n\tSQ_DCStaging_Tables.ExperienceModifier AS i_ExperienceMod_DCModifier,\n\tSQ_DCStaging_Tables.OriginalPackageModifier AS i_OriginalPackageModifier,\n\tSQ_DCStaging_Tables.IncreasedLimitFactor AS i_IncreasedLimitFactor,\n\tSQ_DCStaging_Tables.YearBuilt AS i_YearBuilt,\n\tSQ_DCStaging_Tables.ExperienceModEffectiveDate AS i_ExperienceModEffectiveDate,\n\tSQ_DCStaging_Tables.FinalCommission AS i_FinalCommission,\n\tSQ_DCStaging_Tables.ConstructionCode AS i_ConstructionCode,\n\tSQ_DCStaging_Tables.RateEffectiveDate AS i_RateEffectiveDate,\n\tSQ_DCStaging_Tables.LineId AS i_LineId,\n\tSQ_DCStaging_Tables.IndividualRiskPremiumModification AS i_Value,\n\tSQ_DCStaging_Tables.WindCoverageIndicator AS i_WindCoverageFlag,\n\tSQ_DCStaging_Tables.CoverageDeleteFlag AS i_CoverageDeleteFlag,\n\tSQ_DCStaging_Tables.TransactionPurpose AS i_TransactionPurpose,\n\tSQ_DCStaging_Tables.ParentCoverageObjectId AS i_ParentCoverageObjectId,\n\tSQ_DCStaging_Tables.ParentCoverageObjectName AS i_ParentCoverageObjectName,\n\tSQ_DCStaging_Tables.ExposureBasis AS i_ExposureBasis,\n\tSQ_DCStaging_Tables.FullCoverageGlass AS i_FullCoverageGlass,\n\tLKP_WorkDCTInBalancePolicy.AccountingDate AS i_AccountingDate,\n\tSQ_DCStaging_Tables.PolicyNumber AS i_PolicyNumber,\n\tSQ_DCStaging_Tables.Territory AS i_Territory,\n\tSQ_DCStaging_Tables.LocationXmlId AS i_LocationXmlId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(i_PeriodStartDate) AND ISNULL(lkp_PeriodStartDate),i_EffectiveDate,\r\n\t-- NOT ISNULL(lkp_PeriodStartDate),GREATEST(lkp_PeriodStartDate,i_EffectiveDate),\r\n\t-- GREATEST(i_PeriodStartDate,i_EffectiveDate))\n\tDECODE(TRUE,\n\ti_PeriodStartDate IS NULL AND lkp_PeriodStartDate IS NULL, i_EffectiveDate,\n\tNOT lkp_PeriodStartDate IS NULL, GREATEST(lkp_PeriodStartDate, i_EffectiveDate),\n\tGREATEST(i_PeriodStartDate, i_EffectiveDate)) AS v_EffectiveDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(i_PeriodEndDate) AND ISNULL(lkp_PeriodEndDate),i_ExpirationDate,\r\n\t-- NOT ISNULL(lkp_PeriodEndDate),LEAST(lkp_PeriodEndDate,i_ExpirationDate),\r\n\t-- LEAST(i_PeriodEndDate,i_ExpirationDate))\n\tDECODE(TRUE,\n\ti_PeriodEndDate IS NULL AND lkp_PeriodEndDate IS NULL, i_ExpirationDate,\n\tNOT lkp_PeriodEndDate IS NULL, LEAST(lkp_PeriodEndDate, i_ExpirationDate),\n\tLEAST(i_PeriodEndDate, i_ExpirationDate)) AS v_ExpirationDate,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_CommissionPercentage),\r\n\t--   -1,\r\n\t--   i_CommissionPercentage\r\n\t-- )\n\tIFF(i_CommissionPercentage IS NULL, - 1, i_CommissionPercentage) AS v_CommissionPercentage,\n\t-- *INF*: IIF(ISNULL(i_Exposure),0,i_Exposure)\n\tIFF(i_Exposure IS NULL, 0, i_Exposure) AS v_Exposure,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_CoverageForm) OR LENGTH(LTRIM(RTRIM(i_CoverageForm)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_CoverageForm))\r\n\t-- )\n\tIFF(i_CoverageForm IS NULL OR LENGTH(LTRIM(RTRIM(i_CoverageForm))) = 0, 'N/A', LTRIM(RTRIM(i_CoverageForm))) AS v_CoverageForm,\n\t-- *INF*: IIF(ISNULL(i_Id) or IS_SPACES(i_Id) or LENGTH(i_Id)=0,'N/A',LTRIM(RTRIM(i_Id)))\n\tIFF(i_Id IS NULL OR IS_SPACES(i_Id) OR LENGTH(i_Id) = 0, 'N/A', LTRIM(RTRIM(i_Id))) AS v_Id,\n\t-- *INF*: IIF(ISNULL(i_PolicyVersion),'00',LPAD(TO_CHAR(i_PolicyVersion),2,'0'))\n\tIFF(i_PolicyVersion IS NULL, '00', LPAD(TO_CHAR(i_PolicyVersion), 2, '0')) AS v_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_PolicyNumber) or IS_SPACES(i_PolicyNumber) or LENGTH(i_PolicyNumber)=0, 'N/A', LTRIM(RTRIM(i_PolicyNumber)))\n\tIFF(i_PolicyNumber IS NULL OR IS_SPACES(i_PolicyNumber) OR LENGTH(i_PolicyNumber) = 0, 'N/A', LTRIM(RTRIM(i_PolicyNumber))) AS v_PolicyNumber,\n\t-- *INF*: IIF(ISNULL(i_LocationNumber) or IS_SPACES(i_LocationNumber) or LENGTH(i_LocationNumber)=0,'0000', LPAD(LTRIM(RTRIM (i_LocationNumber)), 4, '0')) \n\tIFF(i_LocationNumber IS NULL OR IS_SPACES(i_LocationNumber) OR LENGTH(i_LocationNumber) = 0, '0000', LPAD(LTRIM(RTRIM(i_LocationNumber)), 4, '0')) AS v_LocationNumber,\n\t-- *INF*: IIF(ISNULL(i_Territory) OR IS_SPACES(i_Territory) OR LENGTH(i_Territory)=0,'N/A',LTRIM(RTRIM(i_Territory)))\n\tIFF(i_Territory IS NULL OR IS_SPACES(i_Territory) OR LENGTH(i_Territory) = 0, 'N/A', LTRIM(RTRIM(i_Territory))) AS v_Territory,\n\t-- *INF*: IIF(ISNULL(i_LocationXmlId) OR IS_SPACES(i_LocationXmlId) OR LENGTH(i_LocationXmlId)=0,'N/A',LTRIM(RTRIM(i_LocationXmlId)))\n\tIFF(i_LocationXmlId IS NULL OR IS_SPACES(i_LocationXmlId) OR LENGTH(i_LocationXmlId) = 0, 'N/A', LTRIM(RTRIM(i_LocationXmlId))) AS v_LocationXmlId,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_LineType) OR LENGTH(LTRIM(RTRIM(i_LineType)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_LineType))\r\n\t-- )\n\tIFF(i_LineType IS NULL OR LENGTH(LTRIM(RTRIM(i_LineType))) = 0, 'N/A', LTRIM(RTRIM(i_LineType))) AS v_LineType,\n\t-- *INF*: IIF(ISNULL(i_PolicyEffectiveDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_PolicyEffectiveDate)\n\tIFF(i_PolicyEffectiveDate IS NULL, TO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_PolicyEffectiveDate) AS v_PolicyEffectiveDate,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_RiskType) OR LENGTH(LTRIM(RTRIM(i_RiskType)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_RiskType))\r\n\t-- )\n\tIFF(i_RiskType IS NULL OR LENGTH(LTRIM(RTRIM(i_RiskType))) = 0, 'N/A', LTRIM(RTRIM(i_RiskType))) AS v_RiskType,\n\t-- *INF*: IIF(ISNULL(i_CoverageType) OR IS_SPACES(i_CoverageType) OR LENGTH(i_CoverageType)=0,'N/A',LTRIM(RTRIM(i_CoverageType)))\n\tIFF(i_CoverageType IS NULL OR IS_SPACES(i_CoverageType) OR LENGTH(i_CoverageType) = 0, 'N/A', LTRIM(RTRIM(i_CoverageType))) AS v_CoverageType,\n\t-- *INF*: IIF(ISNULL(i_ILFTableAssignmentCode) OR IS_SPACES(i_ILFTableAssignmentCode) OR LENGTH(i_ILFTableAssignmentCode)=0, 'N/A', i_ILFTableAssignmentCode)\n\tIFF(i_ILFTableAssignmentCode IS NULL OR IS_SPACES(i_ILFTableAssignmentCode) OR LENGTH(i_ILFTableAssignmentCode) = 0, 'N/A', i_ILFTableAssignmentCode) AS v_ILFTableAssignmentCode,\n\t-- *INF*: IIF(ISNULL(i_Value) OR i_Value='N/A',:LKP.LKP_DCMODIFIERSTAGING_DCLINE(i_LineId),i_Value)\n\tIFF(i_Value IS NULL OR i_Value = 'N/A', LKP_DCMODIFIERSTAGING_DCLINE_i_LineId.Value, i_Value) AS v_IndividualRiskPremiumModification,\n\t-- *INF*: IIF(ISNULL(i_TransactionPurpose) or IS_SPACES(i_TransactionPurpose) or LENGTH(i_TransactionPurpose)=0,'N/A', LTRIM(RTRIM (i_TransactionPurpose))) \n\tIFF(i_TransactionPurpose IS NULL OR IS_SPACES(i_TransactionPurpose) OR LENGTH(i_TransactionPurpose) = 0, 'N/A', LTRIM(RTRIM(i_TransactionPurpose))) AS v_TransactionPurpose,\n\t-- *INF*: IIF(v_TransactionPurpose!='Offset',i_CreatedDate,:LKP.LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL(v_PolicyNumber,v_PolicyVersion,i_CreatedDate,i_EffectiveDate))\n\tIFF(v_TransactionPurpose != 'Offset', i_CreatedDate, LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate) AS v_PremiumTransactionEnteredDate_Initial,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionEnteredDate_Initial),v_PremiumTransactionEnteredDate_Initial,:LKP.LKP_WORKDCTPOLICY_ENTEREDDATE(v_PolicyNumber,v_PolicyVersion,i_CreatedDate,i_EffectiveDate))\n\tIFF(NOT v_PremiumTransactionEnteredDate_Initial IS NULL, v_PremiumTransactionEnteredDate_Initial, LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate) AS v_PremiumTransactionEnteredDate,\n\t-- *INF*: IIF(ISNULL(i_AccountingDate), TO_DATE('1800-01-01', 'YYYY-MM-DD'), TRUNC(i_AccountingDate, 'MM'))\r\n\t-- \r\n\t-- --The lookup to get the AccountingDate may fail, we have to do regular null check and assign the default date '1800-01-01' to pass the job. Then support team need to investigate why and correct the data.\r\n\t-- \r\n\t-- --IIF(\r\n\t-- --  i_EffectiveDate<i_CreatedDate,\r\n\t-- --  TRUNC(i_CreatedDate,'MM'),\r\n\t-- --  TRUNC(i_EffectiveDate,'MM')\r\n\t-- --)\n\tIFF(i_AccountingDate IS NULL, TO_DATE('1800-01-01', 'YYYY-MM-DD'), TRUNC(i_AccountingDate, 'MM')) AS v_BookedDate,\n\t-- *INF*: IIF(v_TransactionPurpose!='Offset',v_BookedDate,GREATEST(TRUNC(:LKP.LKP_WORKDCTPOLICY_INITIAL(v_PolicyNumber,v_PolicyVersion,i_CreatedDate,i_EffectiveDate),'MM'),v_BookedDate))\n\tIFF(v_TransactionPurpose != 'Offset', v_BookedDate, GREATEST(TRUNC(LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.BookedDate, 'MM'), v_BookedDate)) AS v_PremiumTransactionBookedDate_Initial,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionBookedDate_Initial),v_PremiumTransactionBookedDate_Initial,GREATEST(TRUNC(:LKP.LKP_WORKDCTPOLICY(v_PolicyNumber,v_PolicyVersion,i_CreatedDate,i_EffectiveDate),'MM'),v_BookedDate))\n\tIFF(NOT v_PremiumTransactionBookedDate_Initial IS NULL, v_PremiumTransactionBookedDate_Initial, GREATEST(TRUNC(LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.BookedDate, 'MM'), v_BookedDate)) AS v_PremiumTransactionBookedDate,\n\t-- *INF*: IIF(ISNULL(i_ExposureBasis) OR IS_SPACES(i_ExposureBasis) OR LENGTH(i_ExposureBasis)=0,'N/A',LTRIM(RTRIM(i_ExposureBasis)))\n\tIFF(i_ExposureBasis IS NULL OR IS_SPACES(i_ExposureBasis) OR LENGTH(i_ExposureBasis) = 0, 'N/A', LTRIM(RTRIM(i_ExposureBasis))) AS v_ExposureBasis,\n\tv_PolicyVersion AS o_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_Written),0,i_Written)\n\tIFF(i_Written IS NULL, 0, i_Written) AS o_Written,\n\t-- *INF*: v_Id||v_PolicyVersion||v_LocationNumber\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --v_CustomerNumber||v_PolicyNumber||v_PolicyVersion||v_LocationNumber\n\tv_Id || v_PolicyVersion || v_LocationNumber AS o_PremiumTransactionKey,\n\t-- *INF*: LTRIM(RTRIM(i_Type))\n\tLTRIM(RTRIM(i_Type)) AS o_Type,\n\t-- *INF*: IIF(ISNULL(i_CreatedDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_CreatedDate)\n\tIFF(i_CreatedDate IS NULL, TO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_CreatedDate) AS o_CreatedDate,\n\t-- *INF*: IIF(ISNULL(v_EffectiveDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),v_EffectiveDate)\n\tIFF(v_EffectiveDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), v_EffectiveDate) AS o_EffectiveDate,\n\t-- *INF*: IIF(ISNULL(v_ExpirationDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),v_ExpirationDate) \n\tIFF(v_ExpirationDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), v_ExpirationDate) AS o_ExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_TransactionCancellationDate),TO_DATE('21001231235959','YYYYMMDDHH24MISS'),i_TransactionCancellationDate)\n\tIFF(i_TransactionCancellationDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), i_TransactionCancellationDate) AS o_TransactionCancellationDate,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionEnteredDate),v_PremiumTransactionEnteredDate,i_CreatedDate)\n\tIFF(NOT v_PremiumTransactionEnteredDate IS NULL, v_PremiumTransactionEnteredDate, i_CreatedDate) AS o_PremiumTransactionEnteredDate,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionBookedDate),v_PremiumTransactionBookedDate,v_BookedDate)\n\tIFF(NOT v_PremiumTransactionBookedDate IS NULL, v_PremiumTransactionBookedDate, v_BookedDate) AS o_PremiumTransactionBookedDate,\n\tv_PolicyEffectiveDate AS o_PolicyEffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_PolicyExpirationDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_PolicyExpirationDate)\n\tIFF(i_PolicyExpirationDate IS NULL, TO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_PolicyExpirationDate) AS o_PolicyExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_Exposure),0,i_Exposure)\n\tIFF(i_Exposure IS NULL, 0, i_Exposure) AS o_Exposure,\n\t-- *INF*: IIF(ISNULL(i_Premium),0,i_Premium)\n\tIFF(i_Premium IS NULL, 0, i_Premium) AS o_Premium,\n\t-- *INF*: IIF(ISNULL(i_Change),0,i_Change)\n\tIFF(i_Change IS NULL, 0, i_Change) AS o_Change,\n\t-- *INF*: IIF(ISNULL(i_Prior),0,i_Prior)\n\tIFF(i_Prior IS NULL, 0, i_Prior) AS o_Prior,\n\t'D' AS o_PremiumType,\n\t-- *INF*: IIF(ISNULL(i_Code) or IS_SPACES(i_Code) or LENGTH(i_Code)=0,'N/A', LTRIM(RTRIM (i_Code))) \n\tIFF(i_Code IS NULL OR IS_SPACES(i_Code) OR LENGTH(i_Code) = 0, 'N/A', LTRIM(RTRIM(i_Code))) AS v_ReasonAmendedCode,\n\t-- *INF*: --Updated as per PROD-15901. Removed tranlation for Audit transaction types\r\n\t-- \r\n\t-- DECODE(TRUE,IN(LTRIM(RTRIM(i_Type)),'FinalReporting','VoidFinalReporting'),'OX1', :UDF.DEFAULT_VALUE_FOR_STRINGS(i_Code))\n\tDECODE(TRUE,\n\tIN(LTRIM(RTRIM(i_Type)), 'FinalReporting', 'VoidFinalReporting'), 'OX1',\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_Code)) AS o_ReasonAmendedCode,\n\t-- *INF*: IIF(ISNULL(i_CodeCaption) or IS_SPACES(i_CodeCaption) or LENGTH(i_CodeCaption)=0,'N/A', LTRIM(RTRIM (i_CodeCaption))) \n\tIFF(i_CodeCaption IS NULL OR IS_SPACES(i_CodeCaption) OR LENGTH(i_CodeCaption) = 0, 'N/A', LTRIM(RTRIM(i_CodeCaption))) AS o_CodeCaption,\n\ti_CoverageGUID AS o_CoverageGUID,\n\t-- *INF*: IIF(ISNULL(:LKP.LKP_DCDEDUCTIBLESTAGING_VALUE(i_CoverageId)),'0',:LKP.LKP_DCDEDUCTIBLESTAGING_VALUE(i_CoverageId))\n\tIFF(LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.Value IS NULL, '0', LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.Value) AS o_DeductibleAmount,\n\t-- *INF*: IIF(ISNULL(i_RetroactiveDate), TO_DATE('2100-12-31', 'YYYY-MM-DD'), TRUNC(i_RetroactiveDate, 'DD'))\n\tIFF(i_RetroactiveDate IS NULL, TO_DATE('2100-12-31', 'YYYY-MM-DD'), TRUNC(i_RetroactiveDate, 'DD')) AS o_RetroactiveDate,\n\t-- *INF*: 0\r\n\t-- --we set Experience Modification Factor to zero for all transactions. For workers Comp policies, it will be correctly determined from the base rate of the ExperienceModification coverage transactions and suitably applied to all applicable underlying transactions\r\n\t-- --IIF(ISNULL(i_ExperienceMod_DCModifier) OR IS_SPACES(i_ExperienceMod_DCModifier) OR LENGTH(i_ExperienceMod_DCModifier)=0 OR IS_NUMBER(LTRIM(RTRIM(i_ExperienceMod_DCModifier)))=0,  0,  TO_DECIMAL(LTRIM(RTRIM(i_ExperienceMod_DCModifier))))\r\n\t-- \r\n\t-- --DECODE(TRUE, ISNULL(i_ExperienceMod_DCModifier) OR IS_SPACES(i_ExperienceMod_DCModifier) OR LENGTH(i_ExperienceMod_DCModifier)=0,  0,  LOWER(i_LineType)='workerscompensation' AND IS_NUMBER(LTRIM(RTRIM(i_ExperienceMod_DCModifier))), TO_DECIMAL(LTRIM(RTRIM(i_ExperienceMod_DCModifier))), 0)\n\t0 AS o_ExperienceModificationFactor,\n\t-- *INF*: IIF(i_CoverageType = 'ExperienceModification', i_ExperienceModEffectiveDate,TO_DATE('2100-12-31 00:00:00', 'YYYY-MM-DD HH24:MI:SS') ) \r\n\t-- -- we retain the correctly derived Experience Modification Effective date from DC_WC_StateTerm for ExperienceModification. All other applicable transactions will receive the date in a later mapping, while we default them and all other transactions for now\r\n\t-- \r\n\t-- --IIF(ISNULL(i_ExperienceModEffectiveDate), TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), i_ExperienceModEffectiveDate) \n\tIFF(i_CoverageType = 'ExperienceModification', i_ExperienceModEffectiveDate, TO_DATE('2100-12-31 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) AS o_ExperienceModificationEffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_OriginalPackageModifier), 0, i_OriginalPackageModifier)\n\tIFF(i_OriginalPackageModifier IS NULL, 0, i_OriginalPackageModifier) AS o_PackageModificationAdjustmentFactor,\n\t-- *INF*: IIF(ISNULL(i_OccupancyType) OR IS_SPACES(i_OccupancyType) OR LENGTH(i_OccupancyType)=0,'N/A',LTRIM(RTRIM(i_OccupancyType)))\n\tIFF(i_OccupancyType IS NULL OR IS_SPACES(i_OccupancyType) OR LENGTH(i_OccupancyType) = 0, 'N/A', LTRIM(RTRIM(i_OccupancyType))) AS o_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: IIF(ISNULL(i_IncreasedLimitFactor) OR IS_SPACES(i_IncreasedLimitFactor) OR LENGTH(i_IncreasedLimitFactor)=0 OR IS_NUMBER(LTRIM(RTRIM(i_IncreasedLimitFactor)))=0, 0, TO_DECIMAL(LTRIM(RTRIM(i_IncreasedLimitFactor))))\n\tIFF(i_IncreasedLimitFactor IS NULL OR IS_SPACES(i_IncreasedLimitFactor) OR LENGTH(i_IncreasedLimitFactor) = 0 OR IS_NUMBER(LTRIM(RTRIM(i_IncreasedLimitFactor))) = 0, 0, TO_DECIMAL(LTRIM(RTRIM(i_IncreasedLimitFactor)))) AS o_IncreasedLimitFactor,\n\t-- *INF*: DECODE(TRUE, v_ILFTableAssignmentCode='N/A', 'N/A', v_CoverageType='PremisesOperations', SUBSTR(v_ILFTableAssignmentCode,1,1), v_CoverageType='ProductsCompletedOps' and SUBSTR(v_ILFTableAssignmentCode,2,1) = '-', 'I', SUBSTR(v_ILFTableAssignmentCode,2,1))\n\tDECODE(TRUE,\n\tv_ILFTableAssignmentCode = 'N/A', 'N/A',\n\tv_CoverageType = 'PremisesOperations', SUBSTR(v_ILFTableAssignmentCode, 1, 1),\n\tv_CoverageType = 'ProductsCompletedOps' AND SUBSTR(v_ILFTableAssignmentCode, 2, 1) = '-', 'I',\n\tSUBSTR(v_ILFTableAssignmentCode, 2, 1)) AS o_IncreasedLimitGroupCode,\n\t-- *INF*: IIF(ISNULL(i_YearBuilt), '0000', TO_CHAR(i_YearBuilt))\n\tIFF(i_YearBuilt IS NULL, '0000', TO_CHAR(i_YearBuilt)) AS o_YearBuilt,\n\t-- *INF*: IIF(ISNULL(i_CommissionPercentage) or i_CommissionPercentage=-1,\r\n\t-- iif(isnull(i_FinalCommission),0,i_FinalCommission)\r\n\t--  ,iif(isnull(i_CommissionPercentage),0,i_CommissionPercentage)\r\n\t-- )\r\n\t-- \r\n\t-- --IIF(ISNULL(i_FinalCommission), 0 , i_FinalCommission)\n\tIFF(i_CommissionPercentage IS NULL OR i_CommissionPercentage = - 1, IFF(i_FinalCommission IS NULL, 0, i_FinalCommission), IFF(i_CommissionPercentage IS NULL, 0, i_CommissionPercentage)) AS o_AgencyActualCommissionRate,\n\t-- *INF*: ROUND(IIF(NOT ISNULL(i_BaseRate), i_BaseRate, 0),4)\n\tROUND(IFF(NOT i_BaseRate IS NULL, i_BaseRate, 0), 4) AS o_BaseRate,\n\t-- *INF*: IIF(ISNULL(i_ConstructionCode) OR IS_SPACES(i_ConstructionCode) OR LENGTH(i_ConstructionCode)=0, 'N/A', LTRIM(RTRIM(i_ConstructionCode)))\n\tIFF(i_ConstructionCode IS NULL OR IS_SPACES(i_ConstructionCode) OR LENGTH(i_ConstructionCode) = 0, 'N/A', LTRIM(RTRIM(i_ConstructionCode))) AS o_ConstructionCode,\n\t-- *INF*: IIF(NOT ISNULL(i_RateEffectiveDate),i_RateEffectiveDate,TO_DATE('18000101','YYYYMMDD'))\n\tIFF(NOT i_RateEffectiveDate IS NULL, i_RateEffectiveDate, TO_DATE('18000101', 'YYYYMMDD')) AS o_StateRatingEffectiveDate,\n\ti_CoverageId AS o_CoverageId,\n\t-- *INF*: IIF(IS_NUMBER(v_IndividualRiskPremiumModification),TO_DECIMAL(v_IndividualRiskPremiumModification,4),0)\n\tIFF(IS_NUMBER(v_IndividualRiskPremiumModification), TO_DECIMAL(v_IndividualRiskPremiumModification, 4), 0) AS o_IndividualRiskPremiumModification,\n\t-- *INF*: DECODE(i_WindCoverageFlag,'T','1','0')\n\tDECODE(i_WindCoverageFlag,\n\t'T', '1',\n\t'0') AS o_WindCoverageFlag,\n\t-- *INF*: IIF(NOT ISNULL(i_CoverageDeleteFlag),i_CoverageDeleteFlag,'0')\n\tIFF(NOT i_CoverageDeleteFlag IS NULL, i_CoverageDeleteFlag, '0') AS o_CoverageDeleteFlag,\n\tv_TransactionPurpose AS o_TransactionPurpose,\n\ti_ParentCoverageObjectId AS o_ParentCoverageObjectId,\n\t-- *INF*: LTRIM(RTRIM(i_ParentCoverageObjectName))\n\tLTRIM(RTRIM(i_ParentCoverageObjectName)) AS o_ParentCoverageObjectName,\n\t-- *INF*: LTRIM(RTRIM(i_CoverageType))\n\tLTRIM(RTRIM(i_CoverageType)) AS o_CoverageType,\n\tv_ExposureBasis AS o_ExposureBasis,\n\t-- *INF*: IIF(i_FullCoverageGlass='T','F','D')\n\tIFF(i_FullCoverageGlass = 'T', 'F', 'D') AS o_DeductibleBasis,\n\tSQ_DCStaging_Tables.TransactionCreatedUserID,\n\t-- *INF*: IIF(ISNULL(TransactionCreatedUserID),'N/A',TransactionCreatedUserID)\n\tIFF(TransactionCreatedUserID IS NULL, 'N/A', TransactionCreatedUserID) AS o_TransactionCreatedUserId,\n\tSQ_DCStaging_Tables.EndorsedProcessedBy,\n\tSQ_DCStaging_Tables.DeclaredEvent,\n\t-- *INF*: IIF(ISNULL(EndorsedProcessedBy),'N/A',EndorsedProcessedBy)\n\tIFF(EndorsedProcessedBy IS NULL, 'N/A', EndorsedProcessedBy) AS o_ServiceCentreName,\n\tv_LineType AS o_LineType,\n\tv_PolicyNumber||v_PolicyVersion AS v_PolicyKey,\n\tv_PolicyKey AS o_PolicyKey,\n\tv_LocationNumber AS o_LocationNumber,\n\tv_Territory AS o_Territory,\n\tSQ_DCStaging_Tables.StateProvince,\n\tv_LocationXmlId AS o_LocationXmlId\n\tFROM SQ_DCStaging_Tables\n\tLEFT JOIN LKP_DCWCStateTermStaging\n\tON LKP_DCWCStateTermStaging.WC_StateTermId = SQ_DCStaging_Tables.ParentCoverageObjectId AND LKP_DCWCStateTermStaging.ObjectName = SQ_DCStaging_Tables.ParentCoverageObjectName\n\tLEFT JOIN LKP_WBWCCoverageTermStage\n\tON LKP_WBWCCoverageTermStage.CoverageId = SQ_DCStaging_Tables.CoverageId\n\tLEFT JOIN LKP_WorkDCTInBalancePolicy\n\tON LKP_WorkDCTInBalancePolicy.SessionID = SQ_DCStaging_Tables.SessionId AND LKP_WorkDCTInBalancePolicy.PolicyNumber = SQ_DCStaging_Tables.PolicyNumber\n\tLEFT JOIN LKP_DCMODIFIERSTAGING_DCLINE LKP_DCMODIFIERSTAGING_DCLINE_i_LineId\n\tON LKP_DCMODIFIERSTAGING_DCLINE_i_LineId.ObjectId = i_LineId\n\n\tLEFT JOIN LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate\n\tON LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate = i_CreatedDate\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionEffectiveDate = i_EffectiveDate\n\n\tLEFT JOIN LKP_WORKDCTPOLICY_ENTEREDDATE LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate\n\tON LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate = i_CreatedDate\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionEffectiveDate = i_EffectiveDate\n\n\tLEFT JOIN LKP_WORKDCTPOLICY_INITIAL LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate\n\tON LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate = i_CreatedDate\n\tAND LKP_WORKDCTPOLICY_INITIAL_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionEffectiveDate = i_EffectiveDate\n\n\tLEFT JOIN LKP_WORKDCTPOLICY LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate\n\tON LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionCreatedDate = i_CreatedDate\n\tAND LKP_WORKDCTPOLICY_v_PolicyNumber_v_PolicyVersion_i_CreatedDate_i_EffectiveDate.TransactionEffectiveDate = i_EffectiveDate\n\n\tLEFT JOIN LKP_DCDEDUCTIBLESTAGING_VALUE LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId\n\tON LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.CoverageId = i_CoverageId\n\n),\nLKP_Pol_AK_ID AS (\n\tSELECT\n\tpol_ak_id,\n\ti_pol_key,\n\tpol_key\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\ti_pol_key,\n\t\t\tpol_key\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy\n\t\tWHERE crrnt_snpsht_flag = '1' AND source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND EXISTS ( SELECT 1 FROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT WHERE WCT.PolicyNumber = pol_num AND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n),\nAGG_Remove_Duplicate AS (\n\tSELECT\n\tEXP_Default.PolicyStatus, \n\tEXP_Default.o_PolicyVersion AS PolicyVersion, \n\tEXP_Default.o_Written AS Written, \n\tEXP_Default.o_Type AS Type, \n\tEXP_Default.o_CoverageGUID AS CoverageGUID, \n\tEXP_Default.o_CreatedDate AS CreatedDate, \n\tEXP_Default.o_EffectiveDate AS EffectiveDate, \n\tEXP_Default.o_ExpirationDate AS ExpirationDate, \n\tEXP_Default.o_TransactionCancellationDate AS TransactionCancellationDate, \n\tEXP_Default.o_PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate, \n\tEXP_Default.o_PremiumTransactionBookedDate AS PremiumTransactionBookedDate, \n\tEXP_Default.o_PolicyEffectiveDate AS PolicyEffectiveDate, \n\tEXP_Default.o_PolicyExpirationDate AS PolicyExpirationDate, \n\tEXP_Default.o_Exposure AS Exposure, \n\tEXP_Default.o_Premium AS Premium, \n\tEXP_Default.o_Change AS Change, \n\tEXP_Default.o_Prior AS Prior, \n\tEXP_Default.o_PremiumType AS PremiumType, \n\tEXP_Default.o_ReasonAmendedCode AS ReasonAmendedCode, \n\tEXP_Default.o_CodeCaption AS CodeCaption, \n\tEXP_Default.o_DeductibleAmount AS DeductibleAmount, \n\tEXP_Default.o_RetroactiveDate AS RetroactiveDate, \n\tEXP_Default.o_ExperienceModificationFactor AS ExperienceModificationFactor, \n\tEXP_Default.o_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate, \n\tEXP_Default.o_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor, \n\tEXP_Default.o_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode, \n\tEXP_Default.o_IncreasedLimitFactor AS IncreasedLimitFactor, \n\tEXP_Default.o_IncreasedLimitGroupCode AS IncreasedLimitGroupCode, \n\tEXP_Default.o_YearBuilt AS YearBuilt, \n\tEXP_Default.o_AgencyActualCommissionRate AS AgencyActualCommissionRate, \n\tEXP_Default.o_BaseRate AS BaseRate, \n\tEXP_Default.o_ConstructionCode AS ConstructionCode, \n\tEXP_Default.o_StateRatingEffectiveDate AS StateRatingEffectiveDate, \n\tEXP_Default.o_CoverageId AS CoverageId, \n\tEXP_Default.o_IndividualRiskPremiumModification AS IndividualRiskPremiumModification, \n\tEXP_Default.o_WindCoverageFlag AS WindCoverageFlag, \n\tEXP_Default.o_CoverageDeleteFlag AS CoverageDeleteFlag, \n\tEXP_Default.o_TransactionPurpose AS TransactionPurpose, \n\tEXP_Default.o_ParentCoverageObjectId AS ParentCoverageObjectId, \n\tEXP_Default.o_ParentCoverageObjectName AS ParentCoverageObjectName, \n\tEXP_Default.o_CoverageType AS CoverageType, \n\tEXP_Default.o_ExposureBasis AS ExposureBasis, \n\tEXP_Default.o_DeductibleBasis AS DeductibleBasis, \n\tEXP_Default.o_TransactionCreatedUserId AS TransactionCreatedUserId, \n\tEXP_Default.DeclaredEvent, \n\tEXP_Default.o_ServiceCentreName AS ServiceCentreName, \n\tLKP_Pol_AK_ID.pol_ak_id, \n\tIFF(pol_ak_id IS NULL, - 1, pol_ak_id) AS o_pol_ak_id, \n\tEXP_Default.o_PolicyKey AS PolicyKey\n\tFROM EXP_Default\n\tGROUP BY CoverageGUID, CreatedDate, TransactionPurpose, o_pol_ak_id\n),\nLKP_DCCoverageStaging AS (\n\tSELECT\n\tCoverageDeleteFlag,\n\tType,\n\ti_PolicyKey,\n\tCoverageGUID,\n\tPol_Key,\n\tEffectiveDate,\n\tCreatedDate,\n\tOffsetCreatedDate\n\tFROM (\n\t\tSELECT T.PolicyNumber + CASE \r\n\t\t\t\tWHEN len(T.policyversion) = 1\r\n\t\t\t\t\tTHEN '0' + CONVERT(VARCHAR(1), T.policyversion)\r\n\t\t\t\tELSE CONVERT(VARCHAR(2), T.policyversion)\r\n\t\t\t\tEND AS Pol_Key,\r\n\t\t\tA.CoverageGUID AS CoverageGUID,\r\n\t\t\tCASE \r\n\t\t\t\tWHEN CT.PeriodStartDate > T.TransactionEffectiveDate\r\n\t\t\t\t\tTHEN CT.PeriodStartDate\r\n\t\t\t\tWHEN ST.PeriodStartDate > T.TransactionEffectiveDate\r\n\t\t\t\t\tTHEN ST.PeriodStartDate\r\n\t\t\t\tELSE T.TransactionEffectiveDate\r\n\t\t\t\tEND AS EffectiveDate,\r\n\t\t\tT.TransactionCreatedDate AS CreatedDate,\r\n\t\t\tISNULL(F.OffsetCreatedDate, '2100-12-31 23:59:59') AS OffsetCreatedDate,\r\n\t\t\tA.CoverageDeleteFlag AS CoverageDeleteFlag,\r\n\t\t\tT.TransactionType AS Type,\r\n\t\t\tA.CoverageId AS CoverageId\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction A\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\t\tON A.SessionId = T.SessionId\r\n\t\t\t\tAND T.TransactionState = 'committed'\r\n\t\t\t\tAND T.PolicyStatus <> 'Quote'\r\n\t\t\t\tAND T.TransactionPurpose <> 'Offset'\r\n\t\t\t\tAND T.TransactionType @{pipeline().parameters.EXCLUDE_TTYPE}\r\n\t\tLEFT JOIN (\r\n\t\t\tSELECT F.PolicyNumber,\r\n\t\t\t\tF.PolicyVersion,\r\n\t\t\t\tF.TransactionCreatedDate,\r\n\t\t\t\tMIN(ISNULL(O.TransactionCreatedDate, O1.TransactionCreatedDate)) OffsetCreatedDate\r\n\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy F\r\n\t\t\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy O\r\n\t\t\t\tON O.PolicyNumber = F.PolicyNumber\r\n\t\t\t\t\tAND ISNULL(O.PolicyVersion, 0) = ISNULL(F.PolicyVersion, 0)\r\n\t\t\t\t\tAND O.TransactionCreatedDate > F.TransactionCreatedDate\r\n\t\t\t\t\tAND O.TransactionEffectiveDate < F.TransactionEffectiveDate\r\n\t\t\t\t\tAND O.TransactionState = 'committed'\r\n\t\t\t\t\tAND O.PolicyStatus <> 'Quote'\r\n\t\t\t\t\tAND O.TransactionPurpose <> 'Offset'\r\n\t\t\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy O1\r\n\t\t\t\tON O1.PolicyNumber = F.PolicyNumber\r\n\t\t\t\t\tAND ISNULL(O1.PolicyVersion, 0) = ISNULL(F.PolicyVersion, 0)\r\n\t\t\t\t\tAND O1.TransactionCreatedDate > F.TransactionCreatedDate\r\n\t\t\t\t\tAND O1.TransactionEffectiveDate <= F.TransactionEffectiveDate\r\n\t\t\t\t\tAND O1.TransactionState = 'committed'\r\n\t\t\t\t\tAND O1.PolicyStatus <> 'Quote'\r\n\t\t\t\t\tAND O1.TransactionPurpose <> 'Offset'\r\n\t\t\tWHERE F.TransactionState = 'committed'\r\n\t\t\t\tAND F.PolicyStatus <> 'Quote'\r\n\t\t\t\tAND F.TransactionPurpose = 'Offset'\r\n\t\t\tGROUP BY F.PolicyNumber,\r\n\t\t\t\tF.PolicyVersion,\r\n\t\t\t\tF.TransactionCreatedDate\r\n\t\t\t) F\r\n\t\t\tON T.PolicyNumber = F.PolicyNumber\r\n\t\t\t\tAND ISNULL(T.PolicyVersion, 0) = ISNULL(F.PolicyVersion, 0)\r\n\t\t\t\tAND F.TransactionCreatedDate = T.TransactionCreatedDate\r\n\t\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCoverageStage WBC\r\n\t\t\tON WBC.CoverageId = A.CoverageId\r\n\t\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCCoverageTermStage CT\r\n\t\t\tON CT.WB_CoverageId = WBC.WBCoverageId\r\n\t\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCStateTermStaging ST\r\n\t\t\tON ST.WC_StateTermId = A.ParentCoverageObjectId\r\n\t\t\t\tAND A.ParentCoverageObjectName = 'DC_WC_StateTerm'\r\n\t\tORDER BY T.PolicyNumber + CASE \r\n\t\t\t\tWHEN len(T.policyversion) = 1\r\n\t\t\t\t\tTHEN '0' + convert(VARCHAR(1), T.policyversion)\r\n\t\t\t\tELSE convert(VARCHAR(2), T.policyversion)\r\n\t\t\t\tEND,\r\n\t\t\tA.CoverageGUID,\r\n\t\t\tCASE \r\n\t\t\t\tWHEN CT.PeriodStartDate > T.TransactionEffectiveDate\r\n\t\t\t\t\tTHEN CT.PeriodStartDate\r\n\t\t\t\tWHEN ST.PeriodStartDate > T.TransactionEffectiveDate\r\n\t\t\t\t\tTHEN ST.PeriodStartDate\r\n\t\t\t\tELSE T.TransactionEffectiveDate\r\n\t\t\t\tEND,\r\n\t\t\tT.TransactionCreatedDate,\r\n\t\t\tISNULL(F.OffsetCreatedDate, '2100-12-31 23:59:59'),\r\n\t\t\tA.CoverageId\r\n\t\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID,Pol_Key,EffectiveDate,CreatedDate,OffsetCreatedDate ORDER BY CoverageDeleteFlag DESC) = 1\n),\nLKP_RatingCoverage AS (\n\tSELECT\n\tRatingCoverageCancellationDate,\n\tPremiumTransactionCode,\n\tExposure,\n\tCoverageGUID,\n\tPolicyAKID,\n\tTEffectiveDate,\n\tTCreatedDate,\n\tOffsetCreatedDate\n\tFROM (\n\t\tSELECT distinct a.RatingCoverageCancellationDate as RatingCoverageCancellationDate,\r\n\t\ta.CoverageGUID as CoverageGUID,\r\n\t\tb.PremiumTransactionCode as PremiumTransactionCode,\r\n\t\tb.PremiumTransactionEffectiveDate as TEffectiveDate,\r\n\t\tb.PremiumTransactionEnteredDate as TCreatedDate,\r\n\t\tISNULL(c.PremiumTransactionEnteredDate,'2100-12-31 23:59:59') as OffsetCreatedDate,\r\n\t\ta.Exposure as Exposure,\r\n\t\tpc.PolicyAKID as PolicyAKID\r\n\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage pc \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage a on PC.PolicyCoverageAKID=a.PolicyCoverageAKID\r\n\t\tAND pc.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND pc.CurrentSnapshotFlag=1\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction b on a.RatingCoverageAKId=b.RatingCoverageAKid\r\n\t\tAND b.EffectiveDate=a.EffectiveDate AND b.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tAND not b.OffsetOnsetCode in ('Offset','Deprecated')\r\n\t\tLEFT JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction c on c.RatingCoverageAKId=b.RatingCoverageAKid\r\n\t\tAND c.EffectiveDate=a.EffectiveDate AND c.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND c.OffsetOnsetCode='Deprecated'\r\n\t\tINNER JOIN (\r\n\t\tselect DISTINCT WCT.CoverageGUId from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction WCT) WCT\r\n\t\ton WCT.CoverageGUID=a.CoverageGUID\r\n\t\torder by pc.PolicyAKID,a.CoverageGUID,b.PremiumTransactionEffectiveDate,b.PremiumTransactionEnteredDate,ISNULL(c.PremiumTransactionEnteredDate,'2100-12-31 23:59:59')\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID,PolicyAKID,TEffectiveDate,TCreatedDate,OffsetCreatedDate ORDER BY RatingCoverageCancellationDate DESC) = 1\n),\nmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy AS (WITH\n\tInput_Policy AS (\n\t\t\n\t),\n\tEXP_Get_Value AS (\n\t\tSELECT\n\t\tPolicyAKID,\n\t\tCoverageGuid,\n\t\tTransactionCreatedDate,\n\t\t-- *INF*: IIF(ISNULL(PolicyAKID),-1,PolicyAKID)\n\t\tIFF(PolicyAKID IS NULL, - 1, PolicyAKID) AS o_PolicyAKID\n\t\tFROM Input_Policy\n\t),\n\tLKP_Policy_Heirarchy_With_Date AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tPolicyCoverageAKID,\n\t\tPolicyAKID,\n\t\tCoverageGUID,\n\t\tEffectiveDate,\n\t\tLocationUnitNumber,\n\t\tRatingCoverageCancellationDate,\n\t\tRatingCoverageAKID,\n\t\tRatingCoverageKey,\n\t\tRatingCoverageHashKey,\n\t\tRatingCoverageId,\n\t\tRatingCoverageEffectivedate,\n\t\tRatingCoverageExpirationdate,\n\t\tClassCode,\n\t\tCoverageType,\n\t\tProductAbbreviation\n\t\tFROM (\n\t\t\tSELECT R.RiskLocationAKID AS RiskLocationAKID,\r\n\t\t\t\tPC.PolicyCoverageAKID AS PolicyCoverageAKID,\r\n\t\t\t\tR.PolicyAKID AS PolicyAKID,\r\n\t\t\t\tRC.CoverageGUID AS CoverageGUID,\r\n\t\t\t\tRC.EffectiveDate AS EffectiveDate,\r\n\t\t\t\tR.LocationUnitNumber AS LocationUnitNumber,\r\n\t\t\t\tRC.RatingCoverageCancellationDate AS RatingCoverageCancellationDate,\r\n\t\t\t\tRC.RatingCoverageAKID AS RatingCoverageAKID,\r\n\t\t\t\tRC.RatingCoverageKey AS RatingCoverageKey,\r\n\t\t\t\tRC.RatingCoverageHashKey AS RatingCoverageHashKey,\r\n\t\t\t\tRC.RatingCoverageid AS RatingCoverageid,\r\n\t\t\t\tRC.RatingCoverageEffectivedate AS RatingCoverageEffectivedate,\r\n\t\t\t\tRC.RatingCoverageExpirationdate AS RatingCoverageExpirationdate ,\r\n\t\t\t\tRC.ClassCode AS ClassCode,\r\n\t\t\t\tRC.coveragetype as coveragetype,\r\n\t\t\t\tPR.ProductAbbreviation as ProductAbbreviation\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC\r\n\t\t\t\tON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\t\t\t\tAND RC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation R\r\n\t\t\t\tON R.RiskLocationAKID = PC.RiskLocationAKID\r\n\t\t\t\t\t\tAND PC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\t\t\t\tAND R.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND R.CurrentSnapshotFlag = 1\r\n\t\t\t LEFT JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}. product PR on\r\n\t\t\t\tPR.productakid=RC.productakid and PR.CurrentSnapshotFlag=1\r\n\t\t\t\t\twhere EXISTS (\r\n\t\t\t\t\t\tSELECT 1\r\n\t\t\t\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\t\t\t\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\t\t\t\t\t\tON WCT.PolicyNumber = pol.pol_num\r\n\t\t\t\t\t\t\t\tAND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = pol.pol_mod\r\n\t\t\t\t\t\t\t\tAND pol.crrnt_snpsht_flag = 1\r\n\t\t\t\t\t\t\t\tAND R.PolicyAKId = pol.pol_ak_id\r\n\t\t\t\t\t\t)\r\n\t\t\tORDER BY PC.Policyakid,RC.Coverageguid,RC.Createddate,RC.effectivedate--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID,EffectiveDate ORDER BY RiskLocationAKID DESC) = 1\n\t),\n\tLKP_Policy_Heirarchy_Without_Date AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tPolicyCoverageAKID,\n\t\tPolicyAKID,\n\t\tCoverageGUID,\n\t\tLocationUnitNumber,\n\t\tRatingCoverageCancellationDate,\n\t\tRatingCoverageAKID,\n\t\tRatingCoverageKey,\n\t\tRatingCoverageHashKey,\n\t\tRatingCoverageId,\n\t\tRatingCoverageEffectivedate,\n\t\tRatingCoverageExpirationdate,\n\t\tCoverageType,\n\t\tProductAbbreviation\n\t\tFROM (\n\t\t\tSELECT R.RiskLocationAKID AS RiskLocationAKID,\r\n\t\t\t\tPC.PolicyCoverageAKID AS PolicyCoverageAKID,\r\n\t\t\t\tR.PolicyAKID AS PolicyAKID,\r\n\t\t\t\tRC.CoverageGUID AS CoverageGUID,\r\n\t\t\t\tRC.EffectiveDate AS EffectiveDate,\r\n\t\t\t\tR.LocationUnitNumber AS LocationUnitNumber,\r\n\t\t\t\tRC.RatingCoverageCancellationDate AS RatingCoverageCancellationDate,\r\n\t\t\t\tRC.RatingCoverageAKID AS RatingCoverageAKID,\r\n\t\t\t\tRC.RatingCoverageKey AS RatingCoverageKey,\r\n\t\t\t\tRC.RatingCoverageHashKey AS RatingCoverageHashKey,\r\n\t\t\t\tRC.RatingCoverageid AS RatingCoverageid,\r\n\t\t\t\tRC.RatingCoverageEffectivedate AS RatingCoverageEffectivedate,\r\n\t\t\t\tRC.RatingCoverageExpirationdate AS RatingCoverageExpirationdate ,\r\n\t\t\t\t\tRC.coveragetype as coveragetype,\r\n\t\t\t\tPR.ProductAbbreviation as ProductAbbreviation\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC\r\n\t\t\t\tON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\t\t\t\tAND RC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation R\r\n\t\t\t\tON R.RiskLocationAKID = PC.RiskLocationAKID\r\n\t\t\t\t\t\tAND PC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\t\t\t\tAND R.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND R.CurrentSnapshotFlag = 1\r\n\t\t\tLEFT JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}. product PR on\r\n\t\t\t\tPR.productakid=RC.productakid and PR.CurrentSnapshotFlag=1\r\n\t\t\t\t\twhere EXISTS (\r\n\t\t\t\t\t\tSELECT 1\r\n\t\t\t\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\t\t\t\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\t\t\t\t\t\tON WCT.PolicyNumber = pol.pol_num\r\n\t\t\t\t\t\t\t\tAND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = pol.pol_mod\r\n\t\t\t\t\t\t\t\tAND pol.crrnt_snpsht_flag = 1\r\n\t\t\t\t\t\t\t\tAND R.PolicyAKId = pol.pol_ak_id\r\n\t\t\t\t\t\t)\r\n\t\t\tORDER BY PC.Policyakid,RC.Coverageguid,RC.Createddate,RC.effectivedate--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID ORDER BY RiskLocationAKID DESC) = 1\n\t),\n\tEXP_Calculate_PremiumtransactionKey AS (\n\t\tSELECT\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageAKID AS RatingCoverageAKID_WithDate,\n\t\t-- *INF*: IIF(isnull(RatingCoverageAKID_WithDate),0,1)\n\t\tIFF(RatingCoverageAKID_WithDate IS NULL, 0, 1) AS Flag,\n\t\tLKP_Policy_Heirarchy_With_Date.RiskLocationAKID AS RiskLocationAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.PolicyCoverageAKID AS PolicyCoverageAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.PolicyAKID AS PolicyAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.CoverageGUID AS CoverageGUID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.LocationUnitNumber AS LocationUnitNumber_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageCancellationDate AS RatingCoverageCancellationDate_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageKey AS RatingCoverageKey_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageHashKey AS RatingCoverageHashKey_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageId AS RatingCoverageId_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageEffectivedate AS RatingCoverageEffectivedate_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageExpirationdate AS RatingCoverageExpirationdate_Date,\n\t\tLKP_Policy_Heirarchy_Without_Date.PolicyAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.RiskLocationAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.PolicyCoverageAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.CoverageGUID,\n\t\tLKP_Policy_Heirarchy_Without_Date.LocationUnitNumber,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageCancellationDate,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageKey,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageHashKey,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageId,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageEffectivedate,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageExpirationdate,\n\t\t-- *INF*: iif(Flag=1,PolicyAKID_Date,PolicyAKID)\n\t\tIFF(Flag = 1, PolicyAKID_Date, PolicyAKID) AS v_PolicyAKID,\n\t\t-- *INF*: IIF(Flag=1,RiskLocationAKID_Date,RiskLocationAKID)\n\t\tIFF(Flag = 1, RiskLocationAKID_Date, RiskLocationAKID) AS v_RiskLocationAKID,\n\t\t-- *INF*: iif(Flag=1,PolicyCoverageAKID_Date,PolicyCoverageAKID)\n\t\tIFF(Flag = 1, PolicyCoverageAKID_Date, PolicyCoverageAKID) AS v_PolicyCoverageAKID,\n\t\t-- *INF*: iif(Flag=1,CoverageGUID_Date,CoverageGUID)\n\t\tIFF(Flag = 1, CoverageGUID_Date, CoverageGUID) AS v_CoverageGUID,\n\t\tv_CoverageGUID AS o_CoverageGUID,\n\t\t-- *INF*: iif(Flag=1,LocationUnitNumber_Date,LocationUnitNumber)\n\t\tIFF(Flag = 1, LocationUnitNumber_Date, LocationUnitNumber) AS v_LocationUnitNumber,\n\t\tv_RiskLocationAKID AS o_RiskLocationAKID,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageCancellationDate_Date)\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageCancellationDate_Date) AS o_RatingCoverageCancellationDate,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,iif(Flag=1,RatingCoverageAKID_WithDate,RatingCoverageAKID))\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, IFF(Flag = 1, RatingCoverageAKID_WithDate, RatingCoverageAKID)) AS o_RatingCoverageAKID,\n\t\tv_PolicyCoverageAKID AS o_PolicyCoverageAKID,\n\t\t-- *INF*: TO_CHAR(v_PolicyAKID) || '~'  || TO_CHAR(v_RiskLocationAKID)  || '~' || TO_CHAR( v_PolicyCoverageAKID)  || '~' || v_CoverageGUID  || '~'  || v_LocationUnitNumber\n\t\tTO_CHAR(v_PolicyAKID) || '~' || TO_CHAR(v_RiskLocationAKID) || '~' || TO_CHAR(v_PolicyCoverageAKID) || '~' || v_CoverageGUID || '~' || v_LocationUnitNumber AS o_PremiumTransactionKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageKey_Date)\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageKey_Date) AS o_RatingCoverageKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageHashKey_Date)\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageHashKey_Date) AS o_RatingCoverageHashKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageId_Date)\r\n\t\t-- \r\n\t\t-- --IIF(Flag=1,RatingCoverageId_Date,RatingCoverageId)\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- \n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageId_Date) AS o_RatingCoverageId,\n\t\tLKP_Policy_Heirarchy_With_Date.ClassCode,\n\t\tLKP_Policy_Heirarchy_With_Date.CoverageType AS i_CoverageType_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.ProductAbbreviation AS i_ProductAbbreviation_Date,\n\t\tLKP_Policy_Heirarchy_Without_Date.CoverageType AS i_CoverageType,\n\t\tLKP_Policy_Heirarchy_Without_Date.ProductAbbreviation AS i_ProductAbbreviation,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,RatingCoverageEffectivedate_Date,RatingCoverageEffectivedate))\r\n\t\t-- \r\n\t\t-- ---IIF(Flag=1,RatingCoverageEffectivedate_Date,RatingCoverageEffectivedate)\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, IFF(Flag = 1, RatingCoverageEffectivedate_Date, RatingCoverageEffectivedate)) AS o_RatingCoverageEffectivedate,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,RatingCoverageExpirationdate_Date,RatingCoverageExpirationdate))\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- --IIF(Flag=1,RatingCoverageExpirationdate_Date,RatingCoverageExpirationdate)\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, IFF(Flag = 1, RatingCoverageExpirationdate_Date, RatingCoverageExpirationdate)) AS o_RatingCoverageExpirationdate,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,i_CoverageType_Date,i_CoverageType))\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, IFF(Flag = 1, i_CoverageType_Date, i_CoverageType)) AS o_CoverageType,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,i_ProductAbbreviation_Date,i_ProductAbbreviation))\n\t\tIFF(@{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, IFF(Flag = 1, i_ProductAbbreviation_Date, i_ProductAbbreviation)) AS o_ProductAbbreviation\n\t\tFROM \n\t\tLEFT JOIN LKP_Policy_Heirarchy_With_Date\n\t\tON LKP_Policy_Heirarchy_With_Date.PolicyAKID = EXP_Get_Value.o_PolicyAKID AND LKP_Policy_Heirarchy_With_Date.CoverageGUID = EXP_Get_Value.CoverageGuid AND LKP_Policy_Heirarchy_With_Date.EffectiveDate = EXP_Get_Value.TransactionCreatedDate\n\t\tLEFT JOIN LKP_Policy_Heirarchy_Without_Date\n\t\tON LKP_Policy_Heirarchy_Without_Date.PolicyAKID = EXP_Get_Value.o_PolicyAKID AND LKP_Policy_Heirarchy_Without_Date.CoverageGUID = EXP_Get_Value.CoverageGuid\n\t),\n\tOutput_Policy AS (\n\t\tSELECT\n\t\to_CoverageGUID AS CoverageGUID, \n\t\to_RiskLocationAKID AS RiskLocationAKID, \n\t\to_RatingCoverageCancellationDate AS RatingCoverageCancellationDate, \n\t\to_RatingCoverageAKID AS RatingCoverageAKID, \n\t\to_PremiumTransactionKey AS PremiumTransactionKey, \n\t\to_RatingCoverageKey AS RatingCoverageKey, \n\t\to_RatingCoverageHashKey AS RatingCoverageHashKey, \n\t\to_RatingCoverageId AS RatingCoverageId, \n\t\to_PolicyCoverageAKID AS PolicyCoverageAKID, \n\t\to_RatingCoverageEffectivedate AS RatingCoverageEffectivedate, \n\t\to_RatingCoverageExpirationdate AS RatingCoverageExpirationdate, \n\t\tClassCode, \n\t\to_CoverageType AS CoverageType, \n\t\to_ProductAbbreviation AS ProductAbbreviation\n\t\tFROM EXP_Calculate_PremiumtransactionKey\n\t),\n),\nEXP_CoverageStatus AS (\n\tSELECT\n\tLKP_DCCoverageStaging.CoverageDeleteFlag AS lkp_StageCoverageDeleteFlag,\n\tLKP_DCCoverageStaging.Type AS lkp_StageTransactionType,\n\tAGG_Remove_Duplicate.TransactionCancellationDate AS i_TCancellationDate,\n\tAGG_Remove_Duplicate.PolicyVersion AS i_PolicyVersion,\n\tAGG_Remove_Duplicate.ParentCoverageObjectId AS i_ParentCoverageObjectId,\n\tAGG_Remove_Duplicate.ParentCoverageObjectName AS i_ParentCoverageObjectName,\n\tAGG_Remove_Duplicate.CoverageType,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.RatingCoverageAKID,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.RatingCoverageCancellationDate,\n\tAGG_Remove_Duplicate.Exposure,\n\tAGG_Remove_Duplicate.PolicyStatus,\n\tAGG_Remove_Duplicate.Written,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.PremiumTransactionKey,\n\tAGG_Remove_Duplicate.Type AS TType,\n\tAGG_Remove_Duplicate.CreatedDate,\n\tAGG_Remove_Duplicate.EffectiveDate,\n\tAGG_Remove_Duplicate.ExpirationDate,\n\tAGG_Remove_Duplicate.PremiumTransactionEnteredDate,\n\tAGG_Remove_Duplicate.PremiumTransactionBookedDate,\n\tAGG_Remove_Duplicate.PolicyEffectiveDate,\n\tAGG_Remove_Duplicate.PolicyExpirationDate,\n\tAGG_Remove_Duplicate.Premium,\n\tAGG_Remove_Duplicate.Change,\n\tAGG_Remove_Duplicate.Prior,\n\tAGG_Remove_Duplicate.PremiumType,\n\t'N/A' AS o_New_OffsetOnsetCode,\n\t'Onset' AS o_Endorse_OnsetCode,\n\t'Offset' AS o_Endorse_OffsetCode,\n\tLKP_RatingCoverage.RatingCoverageCancellationDate AS lkp_RatingCoverageCancellationDate,\n\tLKP_RatingCoverage.PremiumTransactionCode AS lkp_PremiumTransactionCode,\n\tAGG_Remove_Duplicate.ReasonAmendedCode,\n\tAGG_Remove_Duplicate.CodeCaption,\n\tAGG_Remove_Duplicate.CoverageGUID,\n\tAGG_Remove_Duplicate.DeductibleAmount,\n\tAGG_Remove_Duplicate.RetroactiveDate,\n\tAGG_Remove_Duplicate.ExperienceModificationFactor,\n\tAGG_Remove_Duplicate.ExperienceModificationEffectiveDate,\n\tAGG_Remove_Duplicate.PackageModificationAdjustmentFactor,\n\tAGG_Remove_Duplicate.PackageModificationAdjustmentGroupCode,\n\tAGG_Remove_Duplicate.IncreasedLimitFactor,\n\tAGG_Remove_Duplicate.IncreasedLimitGroupCode,\n\tAGG_Remove_Duplicate.YearBuilt,\n\tAGG_Remove_Duplicate.AgencyActualCommissionRate,\n\tAGG_Remove_Duplicate.BaseRate,\n\tAGG_Remove_Duplicate.ConstructionCode,\n\tAGG_Remove_Duplicate.StateRatingEffectiveDate,\n\tAGG_Remove_Duplicate.CoverageId,\n\tAGG_Remove_Duplicate.IndividualRiskPremiumModification,\n\tAGG_Remove_Duplicate.WindCoverageFlag AS i_WindCoverageFlag,\n\tAGG_Remove_Duplicate.CoverageDeleteFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- CoverageDeleteFlag='1',1,\r\n\t-- PolicyStatus='Cancelled',1,\r\n\t-- 0)\n\tDECODE(TRUE,\n\tCoverageDeleteFlag = '1', 1,\n\tPolicyStatus = 'Cancelled', 1,\n\t0) AS v_RatingCoverageCancellationFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TType='New' OR TType='Renew', 'New',\r\n\t-- TType='Endorse', 'Endorse',\r\n\t-- 'Other')\n\tDECODE(TRUE,\n\tTType = 'New' OR TType = 'Renew', 'New',\n\tTType = 'Endorse', 'Endorse',\n\t'Other') AS o_EndorsementFlag,\n\t-- *INF*: IIF(i_ParentCoverageObjectName!='WB_CU_PremiumDetail','0',:LKP.LKP_WBCUPREMIUMDETAILSTAGE(i_ParentCoverageObjectId))\n\tIFF(i_ParentCoverageObjectName != 'WB_CU_PremiumDetail', '0', LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId.Override) AS o_Override,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- PremiumTransactionBookedDate=TO_DATE('1800-01-01', 'YYYY-MM-DD'),0,\r\n\t-- CoverageDeleteFlag='0',1,\r\n\t-- CoverageDeleteFlag='1' AND lkp_StageCoverageDeleteFlag='0',1,\r\n\t-- CoverageDeleteFlag='1' AND lkp_RatingCoverageCancellationDate>=TO_DATE('21001231','YYYYMMDD'),1,\r\n\t-- Change<>0,1,\r\n\t-- 0)\n\tDECODE(TRUE,\n\tPremiumTransactionBookedDate = TO_DATE('1800-01-01', 'YYYY-MM-DD'), 0,\n\tCoverageDeleteFlag = '0', 1,\n\tCoverageDeleteFlag = '1' AND lkp_StageCoverageDeleteFlag = '0', 1,\n\tCoverageDeleteFlag = '1' AND lkp_RatingCoverageCancellationDate >= TO_DATE('21001231', 'YYYYMMDD'), 1,\n\tChange <> 0, 1,\n\t0) AS o_FilterFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TType='New','10',\r\n\t-- TType='Renew','11',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='0' AND Change>=0, '12',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='0' AND Change<0, '22',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='1' AND Change<=0, '28',\r\n\t-- TType='Cancel' AND i_TCancellationDate=PolicyEffectiveDate AND i_PolicyVersion='00','20',\r\n\t-- TType='Cancel' AND i_TCancellationDate>PolicyEffectiveDate AND i_PolicyVersion='00','23',\r\n\t-- TType='Cancel' AND i_TCancellationDate=PolicyEffectiveDate AND i_PolicyVersion<>'00','21',\r\n\t-- TType='Cancel' AND i_TCancellationDate>PolicyEffectiveDate AND i_PolicyVersion<>'00','25',\r\n\t-- TType='Reinstate','15',\r\n\t-- TType='Reissue','30',\r\n\t-- TType='Rewrite','31',\r\n\t-- IN(TType,'FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change>=0,'14',\r\n\t-- IN(TType,'FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change<0,'24',\r\n\t-- IN(TType,'RetroCalculation','RevisedRetroCalculation') AND Change>=0,'57',\r\n\t-- IN(TType,'RetroCalculation','RevisedRetroCalculation') AND Change<0,'67',\r\n\t-- IN(TType,'FinalReporting','VoidFinalReporting') AND Change>=0,'12',\r\n\t-- IN(TType,'FinalReporting','VoidFinalReporting') AND Change<0,'22'\r\n\t-- )\t\n\tDECODE(TRUE,\n\tTType = 'New', '10',\n\tTType = 'Renew', '11',\n\tTType = 'Endorse' AND CoverageDeleteFlag = '0' AND Change >= 0, '12',\n\tTType = 'Endorse' AND CoverageDeleteFlag = '0' AND Change < 0, '22',\n\tTType = 'Endorse' AND CoverageDeleteFlag = '1' AND Change <= 0, '28',\n\tTType = 'Cancel' AND i_TCancellationDate = PolicyEffectiveDate AND i_PolicyVersion = '00', '20',\n\tTType = 'Cancel' AND i_TCancellationDate > PolicyEffectiveDate AND i_PolicyVersion = '00', '23',\n\tTType = 'Cancel' AND i_TCancellationDate = PolicyEffectiveDate AND i_PolicyVersion <> '00', '21',\n\tTType = 'Cancel' AND i_TCancellationDate > PolicyEffectiveDate AND i_PolicyVersion <> '00', '25',\n\tTType = 'Reinstate', '15',\n\tTType = 'Reissue', '30',\n\tTType = 'Rewrite', '31',\n\tIN(TType, 'FinalAudit', 'VoidFinalAudit', 'RevisedFinalAudit') AND Change >= 0, '14',\n\tIN(TType, 'FinalAudit', 'VoidFinalAudit', 'RevisedFinalAudit') AND Change < 0, '24',\n\tIN(TType, 'RetroCalculation', 'RevisedRetroCalculation') AND Change >= 0, '57',\n\tIN(TType, 'RetroCalculation', 'RevisedRetroCalculation') AND Change < 0, '67',\n\tIN(TType, 'FinalReporting', 'VoidFinalReporting') AND Change >= 0, '12',\n\tIN(TType, 'FinalReporting', 'VoidFinalReporting') AND Change < 0, '22') AS o_StandardTransactionCode,\n\tAGG_Remove_Duplicate.TransactionPurpose,\n\tAGG_Remove_Duplicate.ExposureBasis,\n\tAGG_Remove_Duplicate.DeductibleBasis,\n\tAGG_Remove_Duplicate.TransactionCreatedUserId,\n\tAGG_Remove_Duplicate.DeclaredEvent,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DeclaredEvent = 'T',1,\r\n\t-- DeclaredEvent ='F',0,\r\n\t-- ISNULL(DeclaredEvent),0\r\n\t-- )\n\tDECODE(TRUE,\n\tDeclaredEvent = 'T', 1,\n\tDeclaredEvent = 'F', 0,\n\tDeclaredEvent IS NULL, 0) AS O_DeclaredEvent,\n\tAGG_Remove_Duplicate.ServiceCentreName,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.CoverageType AS i_ProductAbbreviation,\n\t-- *INF*: IIF\r\n\t-- ((i_CoverageType='Building' and i_ProductAbbreviation='SBOP') \r\n\t-- or (i_CoverageType='BLDG' and i_ProductAbbreviation='SBOP') \r\n\t-- or (IN(i_CoverageType,'Building', 'FunctionalBuildingValuation')  and i_ProductAbbreviation='SMART') \r\n\t-- or (i_CoverageType='OTC' and i_ProductAbbreviation='Garage Liab'),'1',i_WindCoverageFlag)\r\n\t-- \r\n\t-- \r\n\t-- --IIF((i_CoverageType='Building' and i_ProductAbbreviation='SBOP') or (i_CoverageType='BLDG' and i_ProductAbbreviation='SBOP') or i_CoverageType='Building' and i_ProductAbbreviation='SMART') or (i_CoverageType='OTC' and i_ProductAbbreviation='Garage Liab'),'1',i_WindCoverageFlag) \n\tIFF(( i_CoverageType = 'Building' AND i_ProductAbbreviation = 'SBOP' ) OR ( i_CoverageType = 'BLDG' AND i_ProductAbbreviation = 'SBOP' ) OR ( IN(i_CoverageType, 'Building', 'FunctionalBuildingValuation') AND i_ProductAbbreviation = 'SMART' ) OR ( i_CoverageType = 'OTC' AND i_ProductAbbreviation = 'Garage Liab' ), '1', i_WindCoverageFlag) AS v_WindCoverageFlag,\n\tv_WindCoverageFlag AS o_WindCoverageFlag\n\tFROM AGG_Remove_Duplicate\n\t -- Manually join with mplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy\n\tLEFT JOIN LKP_DCCoverageStaging\n\tON LKP_DCCoverageStaging.CoverageGUID = AGG_Remove_Duplicate.CoverageGUID AND LKP_DCCoverageStaging.Pol_Key = AGG_Remove_Duplicate.PolicyKey AND LKP_DCCoverageStaging.EffectiveDate <= AGG_Remove_Duplicate.EffectiveDate AND LKP_DCCoverageStaging.CreatedDate < AGG_Remove_Duplicate.CreatedDate AND LKP_DCCoverageStaging.OffsetCreatedDate > AGG_Remove_Duplicate.CreatedDate\n\tLEFT JOIN LKP_RatingCoverage\n\tON LKP_RatingCoverage.CoverageGUID = AGG_Remove_Duplicate.CoverageGUID AND LKP_RatingCoverage.PolicyAKID = AGG_Remove_Duplicate.o_pol_ak_id AND LKP_RatingCoverage.TEffectiveDate <= AGG_Remove_Duplicate.EffectiveDate AND LKP_RatingCoverage.TCreatedDate < AGG_Remove_Duplicate.CreatedDate AND LKP_RatingCoverage.OffsetCreatedDate > AGG_Remove_Duplicate.CreatedDate\n\tLEFT JOIN LKP_WBCUPREMIUMDETAILSTAGE LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId\n\tON LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId.WBCUPremiumDetailId = i_ParentCoverageObjectId\n\n),\nFIL_DefaultCoverages AS (\n\tSELECT\n\tRatingCoverageAKID, \n\tRatingCoverageCancellationDate, \n\tWritten, \n\tPremiumTransactionKey, \n\tTType AS Type, \n\tCreatedDate, \n\tEffectiveDate, \n\tExpirationDate, \n\tPremiumTransactionEnteredDate, \n\tPremiumTransactionBookedDate, \n\tPolicyEffectiveDate, \n\tPolicyExpirationDate, \n\tPremium, \n\tChange, \n\tPrior, \n\tPremiumType, \n\to_New_OffsetOnsetCode AS New_OffsetOnsetCode, \n\to_Endorse_OnsetCode AS Endorse_OnsetCode, \n\to_Endorse_OffsetCode AS Endorse_OffsetCode, \n\tReasonAmendedCode, \n\tCodeCaption, \n\tCoverageGUID, \n\tDeductibleAmount, \n\tRetroactiveDate, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPackageModificationAdjustmentFactor, \n\tPackageModificationAdjustmentGroupCode, \n\tIncreasedLimitFactor, \n\tIncreasedLimitGroupCode, \n\tYearBuilt, \n\tAgencyActualCommissionRate, \n\tBaseRate, \n\tConstructionCode, \n\tStateRatingEffectiveDate, \n\tCoverageId, \n\tIndividualRiskPremiumModification, \n\to_WindCoverageFlag AS WindCoverageFlag, \n\to_EndorsementFlag AS EndorsementFlag, \n\to_FilterFlag AS FilterFlag, \n\to_StandardTransactionCode AS StandardTransactionCode, \n\tTransactionPurpose, \n\to_Override AS Override, \n\tCoverageType, \n\tExposureBasis, \n\tDeductibleBasis, \n\tExposure, \n\tTransactionCreatedUserId, \n\tO_DeclaredEvent AS DeclaredEvent, \n\tServiceCentreName\n\tFROM EXP_CoverageStatus\n\tWHERE FilterFlag=1\n),\nRTR_Classify_New_Endorse_GRP AS (\n\tSELECT\n\tRatingCoverageAKID,\n\tRatingCoverageCancellationDate,\n\tWritten,\n\tPremiumTransactionKey,\n\tType,\n\tCreatedDate,\n\tEffectiveDate,\n\tExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPremium,\n\tChange,\n\tPrior,\n\tPremiumType,\n\tNew_OffsetOnsetCode,\n\tEndorse_OnsetCode,\n\tEndorse_OffsetCode,\n\tReasonAmendedCode,\n\tCodeCaption,\n\tCoverageGUID,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tEndorsementFlag,\n\tStandardTransactionCode,\n\tTransactionPurpose,\n\tOverride,\n\tCoverageType,\n\tPremiumTransactionEnteredDate,\n\tExposureBasis,\n\tDeductibleBasis,\n\tExposure,\n\tTransactionCreatedUserId,\n\tDeclaredEvent,\n\tServiceCentreName\n\tFROM FIL_DefaultCoverages\n),\nRTR_Classify_New_Endorse_GRP_GRP_NEW AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='New'),\nRTR_Classify_New_Endorse_GRP_GRP_ENDORSE AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='Endorse'),\nRTR_Classify_New_Endorse_GRP_GRP_OTHER AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='Other'),\nEXP_Calculate_Endorse_Onset_Offset AS (\n\tSELECT\n\tEffectiveDate AS i_EffectiveDate,\n\tExpirationDate AS i_ExpirationDate,\n\tPolicyEffectiveDate AS i_PolicyEffectiveDate,\n\tPolicyExpirationDate AS i_PolicyExpirationDate,\n\tPremium AS i_Premium,\n\tChange AS i_Change,\n\tPrior AS i_Prior,\n\t-- *INF*: DATE_DIFF(i_ExpirationDate,i_EffectiveDate,'D')\n\tDATE_DIFF(i_ExpirationDate, i_EffectiveDate, 'D') AS v_TransactionPeriod,\n\t-- *INF*: DATE_DIFF(i_PolicyExpirationDate,i_PolicyEffectiveDate,'D')\n\tDATE_DIFF(i_PolicyExpirationDate, i_PolicyEffectiveDate, 'D') AS v_PolicyPeriod,\n\t-- *INF*: -1*IIF(\r\n\t--   v_TransactionPeriod<=0 OR v_PolicyPeriod<=0,\r\n\t--   i_Prior,\r\n\t--   i_Prior*v_TransactionPeriod/v_PolicyPeriod\r\n\t-- )\n\t- 1 * IFF(v_TransactionPeriod <= 0 OR v_PolicyPeriod <= 0, i_Prior, i_Prior * v_TransactionPeriod / v_PolicyPeriod) AS o_PremiumTransactionAmount_Offset,\n\t-1*i_Prior AS o_FullTermPremium_Offset,\n\t-- *INF*: IIF(\r\n\t--   v_TransactionPeriod<=0 OR v_PolicyPeriod<=0,\r\n\t--   i_Change+i_Prior,\r\n\t-- i_Change+i_Prior*v_TransactionPeriod/v_PolicyPeriod\r\n\t-- )\n\tIFF(v_TransactionPeriod <= 0 OR v_PolicyPeriod <= 0, i_Change + i_Prior, i_Change + i_Prior * v_TransactionPeriod / v_PolicyPeriod) AS o_PremiumTransactionAmount_Onset,\n\ti_Premium AS o_FullTermPremium_Onset\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n),\nEXP_Calculate_Others AS (\n\tSELECT\n\tRatingCoverageAKID AS RatingCoverageAKID4,\n\tRatingCoverageCancellationDate AS i_RatingCoverageCancellationDate4,\n\tWritten AS Written4,\n\tPremiumTransactionKey AS PremiumTransactionKey4,\n\tType AS Type4,\n\tCreatedDate AS CreatedDate4,\n\tEffectiveDate AS EffectiveDate4,\n\tExpirationDate AS ExpirationDate4,\n\tPremiumTransactionBookedDate AS PremiumTransactionBookedDate4,\n\tPremium AS i_Premium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_RatingCoverageCancellationDate4<TO_DATE('21001231','YYYYMMDD'),-1*i_Premium,\r\n\t-- Change4=0,0,\r\n\t-- i_Premium)\n\tDECODE(TRUE,\n\ti_RatingCoverageCancellationDate4 < TO_DATE('21001231', 'YYYYMMDD'), - 1 * i_Premium,\n\tChange4 = 0, 0,\n\ti_Premium) AS o_Premium,\n\tChange AS Change4,\n\tPremiumType AS PremiumType4,\n\tNew_OffsetOnsetCode AS New_OffsetOnsetCode4,\n\tReasonAmendedCode AS ReasonAmendedCode4,\n\tCodeCaption AS CodeCaption4,\n\tCoverageGUID AS CoverageGUID4,\n\tDeductibleAmount AS DeductibleAmount4,\n\tExperienceModificationFactor AS ExperienceModificationFactor4,\n\tExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate4,\n\tPackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor4,\n\tPackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode4,\n\tIncreasedLimitFactor AS IncreasedLimitFactor4,\n\tIncreasedLimitGroupCode AS IncreasedLimitGroupCode4,\n\tYearBuilt AS YearBuilt4,\n\tAgencyActualCommissionRate AS AgencyActualCommissionRate4,\n\tBaseRate AS BaseRate4,\n\tConstructionCode AS ConstructionCode4,\n\tStateRatingEffectiveDate AS StateRatingEffectiveDate4,\n\tCoverageId AS CoverageId4,\n\tIndividualRiskPremiumModification AS IndividualRiskPremiumModification4,\n\tWindCoverageFlag AS WindCoverageFlag4,\n\tStandardTransactionCode AS StandardTransactionCode4,\n\tTransactionPurpose AS TransactionPurpose4,\n\tOverride AS Override4,\n\tCoverageType AS CoverageType4,\n\tPremiumTransactionEnteredDate AS PremiumTransactionEnteredDate4,\n\tExposureBasis AS ExposureBasis4,\n\tDeductibleBasis AS DeductibleBasis4,\n\tExposure AS Exposure4\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_OTHER\n),\nUn_New_Endorse_GRP AS (\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, EffectiveDate AS PremiumTransactionEffectiveDate, ExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, Written AS PremiumTransactionAmount, Premium AS FullTermPremium, PremiumType, New_OffsetOnsetCode AS OffsetOnsetIndicator, CodeCaption, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, DeclaredEvent\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_NEW\n\tUNION\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, EffectiveDate AS PremiumTransactionEffectiveDate, ExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, o_PremiumTransactionAmount_Onset AS PremiumTransactionAmount, o_FullTermPremium_Onset AS FullTermPremium, PremiumType, Endorse_OnsetCode AS OffsetOnsetIndicator, CodeCaption, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, DeclaredEvent\n\tFROM EXP_Calculate_Endorse_Onset_Offset\n\t-- Manually join with RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n\tUNION\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, EffectiveDate AS PremiumTransactionEffectiveDate, ExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, o_PremiumTransactionAmount_Offset AS PremiumTransactionAmount, o_FullTermPremium_Offset AS FullTermPremium, PremiumType, Endorse_OffsetCode AS OffsetOnsetIndicator, CodeCaption, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, DeclaredEvent\n\tFROM EXP_Calculate_Endorse_Onset_Offset\n\t-- Manually join with RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n\tUNION\n\tSELECT RatingCoverageAKID4 AS RatingCoverageAKID, Written4 AS Written, PremiumTransactionKey4 AS PremiumTransactionKey, Type4 AS PremiumTransactionCode, CreatedDate4 AS CreatedDate, EffectiveDate4 AS PremiumTransactionEffectiveDate, ExpirationDate4 AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate4 AS PremiumTransactionBookedDate, Change4 AS PremiumTransactionAmount, o_Premium AS FullTermPremium, PremiumType4 AS PremiumType, New_OffsetOnsetCode4 AS OffsetOnsetIndicator, CodeCaption4 AS CodeCaption, CoverageGUID4 AS CoverageGUID, ReasonAmendedCode4 AS ReasonAmendedCode, DeductibleAmount4 AS DeductibleAmount, ExperienceModificationFactor4 AS ExperienceModificationFactor, ExperienceModificationEffectiveDate4 AS ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor4 AS PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode4 AS PackageModificationAdjustmentGroupCode, IncreasedLimitFactor4 AS IncreasedLimitFactor, IncreasedLimitGroupCode4 AS IncreasedLimitGroupCode, YearBuilt4 AS YearBuilt, AgencyActualCommissionRate4 AS AgencyActualCommissionRate, BaseRate4 AS BaseRate, ConstructionCode4 AS ConstructionCode, StateRatingEffectiveDate4 AS StateRatingEffectiveDate, CoverageId4 AS CoverageId, IndividualRiskPremiumModification4 AS IndividualRiskPremiumModification, WindCoverageFlag4 AS WindCoverageFlag, StandardTransactionCode4 AS StandardTransactionCode, TransactionPurpose4 AS TransactionPurpose, Override4 AS Override, CoverageType4 AS CoverageType, PremiumTransactionEnteredDate4 AS PremiumTransactionEnteredDate, ExposureBasis4 AS ExposureBasis, DeductibleBasis4 AS DeductibleBasis, Exposure4 AS Exposure, TransactionCreatedUserId, ServiceCentreName, DeclaredEvent\n\tFROM EXP_Calculate_Others\n\t-- Manually join with RTR_Classify_New_Endorse_GRP_GRP_OTHER\n),\nEXP_Calculate_PremiumTransactionHashKey AS (\n\tSELECT\n\tRatingCoverageAKID AS i_RatingCoverageAKID,\n\tWritten AS i_Written,\n\tPremiumTransactionKey AS i_PremiumTransactionCode,\n\tOverride AS i_Override,\n\tCoverageType AS i_CoverageType,\n\tPremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tFullTermPremium AS i_FullTermPremium,\n\tTransactionPurpose AS i_TransactionPurpose,\n\tOffsetOnsetIndicator AS i_OffsetOnsetCode,\n\tPremiumTransactionKey,\n\tCreatedDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPremiumType,\n\tCodeCaption,\n\tCoverageGUID,\n\tReasonAmendedCode,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tStandardTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tDeductibleBasis,\n\tExposureBasis,\n\tExposure,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_PremiumTransactionAmount,-1*i_PremiumTransactionAmount)\n\tIFF(i_TransactionPurpose != 'Offset', i_PremiumTransactionAmount, - 1 * i_PremiumTransactionAmount) AS v_PremiumTransactionAmount,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_FullTermPremium,-1*i_FullTermPremium)\n\tIFF(i_TransactionPurpose != 'Offset', i_FullTermPremium, - 1 * i_FullTermPremium) AS v_FullTermPremium,\n\t-- *INF*: IIF(NOT ISNULL(i_RatingCoverageAKID), i_RatingCoverageAKID,-1)\n\tIFF(NOT i_RatingCoverageAKID IS NULL, i_RatingCoverageAKID, - 1) AS v_RatingCoverageAKId,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_OffsetOnsetCode,'Deprecated')\n\tIFF(i_TransactionPurpose != 'Offset', i_OffsetOnsetCode, 'Deprecated') AS o_OffsetOnsetCode,\n\t-- *INF*: LTRIM(RTRIM(i_PremiumTransactionCode))\n\tLTRIM(RTRIM(i_PremiumTransactionCode)) AS o_PremiumTransactionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_Override='0',v_PremiumTransactionAmount,\r\n\t-- i_Override='1',v_PremiumTransactionAmount,\r\n\t-- i_CoverageType='Revised',v_PremiumTransactionAmount,\r\n\t-- 0\r\n\t-- )\r\n\t-- \r\n\t-- -- Added condition for i_Override='1' as part of PROD-9733\n\tDECODE(TRUE,\n\ti_Override = '0', v_PremiumTransactionAmount,\n\ti_Override = '1', v_PremiumTransactionAmount,\n\ti_CoverageType = 'Revised', v_PremiumTransactionAmount,\n\t0) AS o_PremiumTransactionAmount,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_Override='0',v_FullTermPremium,\r\n\t-- i_CoverageType='Revised',v_FullTermPremium,\r\n\t-- 0\r\n\t-- )\n\tDECODE(TRUE,\n\ti_Override = '0', v_FullTermPremium,\n\ti_CoverageType = 'Revised', v_FullTermPremium,\n\t0) AS o_FullTermPremium,\n\tv_RatingCoverageAKId AS o_RatingCoverageAKId,\n\t-- *INF*: -- New logic based on UID changes\r\n\t-- MD5(v_RatingCoverageAKId||CoverageGUID||TO_CHAR(CreatedDate)||\r\n\t-- i_OffsetOnsetCode || i_TransactionPurpose)\r\n\t-- \r\n\t-- --MD5(CoverageGUID||TO_CHAR(CreatedDate)||\r\n\t-- --i_OffsetOnsetCode || \r\n\t-- --i_TransactionPurpose\r\n\t-- --)\r\n\t-- --'2520A253F64D7A8AE73D25F6DA4962AD'\n\tMD5(v_RatingCoverageAKId || CoverageGUID || TO_CHAR(CreatedDate) || i_OffsetOnsetCode || i_TransactionPurpose) AS o_PremiumTransactionHashKey,\n\ti_TransactionPurpose AS o_TransactionPurpose_Onset,\n\ti_OffsetOnsetCode AS o_OffsetOnsetCode_Interm,\n\tDeclaredEvent\n\tFROM Un_New_Endorse_GRP\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tEffectiveDate,\n\tLogicalIndicator,\n\tLogicalDeleteFlag,\n\tPremiumTransactionKey,\n\tPremiumLoadSequence,\n\tDuplicateSequence,\n\tPremiumTransactionAKID,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tPMSFunctionCode,\n\tPremiumTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionAmount,\n\tFullTermPremium,\n\tPremiumType,\n\tReasonAmendedCode,\n\tOffsetOnsetCode,\n\tSupPremiumTransactionCodeId,\n\tRatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tExposure,\n\tNumberOfEmployee,\n\tPremiumTransactionHashKey\n\tFROM (\n\t\tSELECT \r\n\t\t      pt.EffectiveDate as EffectiveDate\r\n\t\t      ,pt.LogicalIndicator AS LogicalIndicator\r\n\t\t      ,CASE WHEN pt.LogicalDeleteFlag =0 THEN 0 ELSE 1 END AS LogicalDeleteFlag\r\n\t\t      ,pt.PremiumTransactionKey AS PremiumTransactionKey\r\n\t\t      ,pt.PremiumLoadSequence AS PremiumLoadSequence\r\n\t\t      ,pt.DuplicateSequence AS DuplicateSequence\r\n\t\t      ,pt.PremiumTransactionAKID AS PremiumTransactionAKID\r\n\t\t      ,pt.ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID\r\n\t\t      ,pt.StatisticalCoverageAKID AS StatisticalCoverageAKID\r\n\t\t      ,pt.PMSFunctionCode AS PMSFunctionCode\r\n\t\t      ,pt.PremiumTransactionCode AS PremiumTransactionCode\r\n\t\t      ,pt.PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate\r\n\t\t      ,pt.PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate\r\n\t\t      ,pt.PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate\r\n\t\t      ,pt.PremiumTransactionAmount AS PremiumTransactionAmount\r\n\t\t      ,pt.FullTermPremium AS FullTermPremium\r\n\t\t      ,pt.PremiumType AS PremiumType\r\n\t\t      ,pt.ReasonAmendedCode AS ReasonAmendedCode\r\n\t\t      ,pt.OffsetOnsetCode AS OffsetOnsetCode\r\n\t\t      ,pt.SupPremiumTransactionCodeId AS SupPremiumTransactionCodeId\r\n\t\t      ,pt.RatingCoverageAKId AS RatingCoverageAKId\r\n\t\t      ,pt.DeductibleAmount AS DeductibleAmount\r\n\t\t      ,pt.ExperienceModificationFactor AS ExperienceModificationFactor\r\n\t\t      ,pt.ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate\r\n\t\t      ,pt.PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor\r\n\t\t      ,pt.PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode\r\n\t\t      ,pt.IncreasedLimitFactor AS IncreasedLimitFactor\r\n\t\t      ,pt.IncreasedLimitGroupCode AS IncreasedLimitGroupCode\r\n\t\t      ,pt.YearBuilt AS YearBuilt\r\n\t\t      ,pt.AgencyActualCommissionRate AS AgencyActualCommissionRate\r\n\t\t      ,pt.BaseRate AS BaseRate\r\n\t\t      ,pt.ConstructionCode AS ConstructionCode\r\n\t\t      ,pt.StateRatingEffectiveDate AS StateRatingEffectiveDate\r\n\t\t      ,pt.IndividualRiskPremiumModification AS IndividualRiskPremiumModification\r\n\t\t      ,CASE WHEN pt.WindCoverageFlag=0 THEN 0 ELSE 1 END  AS WindCoverageFlag\r\n\t\t      ,pt.DeductibleBasis AS DeductibleBasis\r\n\t\t      ,pt.ExposureBasis AS ExposureBasis\r\n\t\t      ,pt.TransactionCreatedUserId AS TransactionCreatedUserId\r\n\t\t      ,pt.ServiceCentreName AS ServiceCentreName\r\n\t\t      ,pt.Exposure AS Exposure\r\n\t\t\t  ,pt.NumberOfEmployee  AS NumberOfEmployee\r\n\t\t\t  ,pt.PremiumTransactionHashKey AS PremiumTransactionHashKey\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction pt\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\tON RC.RatingCoverageAKId=pt.RatingCoverageAKId\r\n\t\tAND RC.EffectiveDate=pt.EffectiveDate\r\n\t\tINNER JOIN (\r\n\t\tselect DISTINCT WCT.CoverageGUId from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction WCT\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.workdctpolicy  wpol on WCT.SessionId = wpol.sessionid \r\n\t\tWHERE wPol.DataFix='Y'\r\n\t\tAND wPol.DataFixType=@{pipeline().parameters.DATAFIX_TYPE}\r\n\t\t) WCT\r\n\t\ton WCT.CoverageGUID=RC.CoverageGUID\r\n\t\tWHERE pt.CurrentSnapshotFlag='1' AND pt.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tAND pt.ReasonAmendedCode NOT IN ('Claw Back','CWO')\r\n\t\tORDER BY pt.CreatedDate ASC\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionHashKey ORDER BY EffectiveDate DESC) = 1\n),\nEXP_GENERATE_OFFSET AS (\n\tSELECT\n\tLKP_PremiumTransaction.EffectiveDate,\n\tLKP_PremiumTransaction.LogicalIndicator,\n\tLKP_PremiumTransaction.LogicalDeleteFlag,\n\tLKP_PremiumTransaction.PremiumTransactionKey,\n\tLKP_PremiumTransaction.PremiumLoadSequence,\n\tLKP_PremiumTransaction.DuplicateSequence,\n\tLKP_PremiumTransaction.PremiumTransactionAKID,\n\tLKP_PremiumTransaction.ReinsuranceCoverageAKID,\n\tLKP_PremiumTransaction.StatisticalCoverageAKID,\n\tLKP_PremiumTransaction.PMSFunctionCode,\n\tLKP_PremiumTransaction.PremiumTransactionCode,\n\tLKP_PremiumTransaction.PremiumTransactionEnteredDate,\n\tLKP_PremiumTransaction.PremiumTransactionEffectiveDate,\n\tLKP_PremiumTransaction.PremiumTransactionExpirationDate,\n\tLKP_PremiumTransaction.PremiumTransactionAmount,\n\tLKP_PremiumTransaction.FullTermPremium,\n\tLKP_PremiumTransaction.PremiumType,\n\tLKP_PremiumTransaction.ReasonAmendedCode,\n\tLKP_PremiumTransaction.OffsetOnsetCode,\n\tLKP_PremiumTransaction.SupPremiumTransactionCodeId,\n\tLKP_PremiumTransaction.RatingCoverageAKId,\n\tLKP_PremiumTransaction.DeductibleAmount,\n\tLKP_PremiumTransaction.ExperienceModificationFactor,\n\tLKP_PremiumTransaction.ExperienceModificationEffectiveDate,\n\tLKP_PremiumTransaction.PackageModificationAdjustmentFactor,\n\tLKP_PremiumTransaction.PackageModificationAdjustmentGroupCode,\n\tLKP_PremiumTransaction.IncreasedLimitFactor,\n\tLKP_PremiumTransaction.IncreasedLimitGroupCode,\n\tLKP_PremiumTransaction.YearBuilt,\n\tLKP_PremiumTransaction.AgencyActualCommissionRate,\n\tLKP_PremiumTransaction.BaseRate,\n\tLKP_PremiumTransaction.ConstructionCode,\n\tLKP_PremiumTransaction.StateRatingEffectiveDate,\n\tLKP_PremiumTransaction.IndividualRiskPremiumModification,\n\tLKP_PremiumTransaction.WindCoverageFlag,\n\tLKP_PremiumTransaction.DeductibleBasis,\n\tLKP_PremiumTransaction.ExposureBasis,\n\tLKP_PremiumTransaction.TransactionCreatedUserId,\n\tLKP_PremiumTransaction.ServiceCentreName,\n\tLKP_PremiumTransaction.Exposure,\n\tLKP_PremiumTransaction.NumberOfEmployee,\n\t-- *INF*: IIF(ISNULL(NumberOfEmployee),0,NumberOfEmployee)\n\tIFF(NumberOfEmployee IS NULL, 0, NumberOfEmployee) AS o_NumberOfEmployee,\n\tLKP_PremiumTransaction.PremiumTransactionHashKey,\n\tEXP_Calculate_PremiumTransactionHashKey.o_OffsetOnsetCode AS i_OffsetOnsetCode,\n\tEXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tEXP_Calculate_PremiumTransactionHashKey.o_FullTermPremium AS i_FullTermPremium,\n\tEXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionHashKey AS i_PremiumTransactionHashKey,\n\tEXP_Calculate_PremiumTransactionHashKey.o_TransactionPurpose_Onset AS i_TransactionPurpose_Onset,\n\tEXP_Calculate_PremiumTransactionHashKey.o_OffsetOnsetCode_Interm AS i_OffsetOnsetCode_Interm,\n\tEXP_Calculate_PremiumTransactionHashKey.CreatedDate AS i_CreatedDate,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionBookedDate AS i_PremiumTransactionBookedDate,\n\tEXP_Calculate_PremiumTransactionHashKey.CoverageGUID AS i_CoverageGUID,\n\tEXP_Calculate_PremiumTransactionHashKey.CoverageId AS i_CoverageId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TransactionPurpose_Onset='Onset','Offset',\r\n\t-- i_TransactionPurpose_Onset='Offset','Onset',\r\n\t-- 'N/A'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(TRUE,\n\ti_TransactionPurpose_Onset = 'Onset', 'Offset',\n\ti_TransactionPurpose_Onset = 'Offset', 'Onset',\n\t'N/A') AS v_TransactionPurpose_Offset,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_OffsetOnsetCode_Interm='Onset','Offset',\r\n\t-- i_OffsetOnsetCode_Interm='Offset','Onset',\r\n\t-- 'N/A'\r\n\t-- )\n\tDECODE(TRUE,\n\ti_OffsetOnsetCode_Interm = 'Onset', 'Offset',\n\ti_OffsetOnsetCode_Interm = 'Offset', 'Onset',\n\t'N/A') AS v_OffsetOnsetCode_Interm_Offset,\n\t-- *INF*: MD5(\r\n\t-- RatingCoverageAKId||i_CoverageGUID||\r\n\t-- TO_CHAR(i_CreatedDate)||\r\n\t-- v_OffsetOnsetCode_Interm_Offset || \r\n\t-- v_TransactionPurpose_Offset\r\n\t-- )\n\tMD5(RatingCoverageAKId || i_CoverageGUID || TO_CHAR(i_CreatedDate) || v_OffsetOnsetCode_Interm_Offset || v_TransactionPurpose_Offset) AS v_PremiumTransactionHashKey_Offset,\n\tv_PremiumTransactionHashKey_Offset AS o_PremiumTransactionHashKey_Offset,\n\t-- *INF*: IIF(v_TransactionPurpose_Offset  !='Offset', v_OffsetOnsetCode_Interm_Offset ,'Deprecated')\n\tIFF(v_TransactionPurpose_Offset != 'Offset', v_OffsetOnsetCode_Interm_Offset, 'Deprecated') AS o_OffsetOnsetCode_Offset,\n\ti_OffsetOnsetCode AS o_OffsetOnsetCode,\n\ti_PremiumTransactionBookedDate AS o_PremiumTransactionBookedDate,\n\t-1*PremiumTransactionAmount AS o_PremiumTransactionAmount_Offset,\n\t-1*FullTermPremium AS o_FullTermPremium_Offset,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\t-- *INF*: :LKP.LKP_PremiumTransaction_Offset(v_PremiumTransactionHashKey_Offset)\n\tLKP_PREMIUMTRANSACTION_OFFSET_v_PremiumTransactionHashKey_Offset.PremiumTransactionHashKey AS o_PremiumTransactionHashKey_Offset_LKP,\n\t'PremiumChange' AS NegateRestateCode,\n\tEXP_Calculate_PremiumTransactionHashKey.DeclaredEvent\n\tFROM EXP_Calculate_PremiumTransactionHashKey\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.PremiumTransactionHashKey = EXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionHashKey\n\tLEFT JOIN LKP_PREMIUMTRANSACTION_OFFSET LKP_PREMIUMTRANSACTION_OFFSET_v_PremiumTransactionHashKey_Offset\n\tON LKP_PREMIUMTRANSACTION_OFFSET_v_PremiumTransactionHashKey_Offset.PremiumTransactionHashKey = v_PremiumTransactionHashKey_Offset\n\n),\nRTR_Offset_Onset AS (\n\tSELECT\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\tEffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\tLogicalIndicator,\n\tLogicalDeleteFlag,\n\tPremiumTransactionHashKey,\n\tPremiumLoadSequence,\n\tDuplicateSequence,\n\tPremiumTransactionAKID,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tPremiumTransactionKey,\n\tPMSFunctionCode,\n\tPremiumTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\ti_PremiumTransactionAmount AS PremiumTransactionAmount_Onset,\n\ti_FullTermPremium AS FullTermPremium,\n\tPremiumType,\n\tReasonAmendedCode,\n\tOffsetOnsetCode,\n\tSupPremiumTransactionCodeId,\n\tRatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tExposure,\n\tPremiumTransactionHashKey AS lkp_PremiumTransactionHashKey_Original,\n\to_PremiumTransactionHashKey_Offset AS PremiumTransactionHashKey_Offset,\n\to_OffsetOnsetCode_Offset AS OffsetOnsetCode_Offset,\n\to_PremiumTransactionBookedDate AS PremiumTransactionBookedDate_Onset,\n\to_PremiumTransactionAmount_Offset AS PremiumTransactionAmount_Offset,\n\to_FullTermPremium_Offset AS FullTermPremium_Offset,\n\ti_CoverageId AS CoverageId,\n\to_NumberOfEmployee AS NumberOfEmployee,\n\to_PremiumTransactionHashKey_Offset_LKP AS PremiumTransactionHashKey_Offset_LKP,\n\tPremiumTransactionAmount AS PremiumTransactionAmount_Original,\n\tNegateRestateCode,\n\tDeclaredEvent\n\tFROM EXP_GENERATE_OFFSET\n),\nRTR_Offset_Onset_Offset AS (SELECT * FROM RTR_Offset_Onset WHERE NOT ISNULL(lkp_PremiumTransactionHashKey_Original)\r\n--Original Transaction Found in table PremiumTransaction\r\nAND\r\n--Exclude the following scenario\r\nNOT \r\n(\r\n--1.Premiums for original and onset transactions equal\r\n(PremiumTransactionAmount_Onset- PremiumTransactionAmount_Original)=0\r\nAND\r\n--2.Offset transactions already existing in table PremiumTransaction\r\nNOT ISNULL(PremiumTransactionHashKey_Offset_LKP)\r\n)),\nRTR_Offset_Onset_Onset AS (SELECT * FROM RTR_Offset_Onset WHERE NOT ISNULL(lkp_PremiumTransactionHashKey_Original)\r\n--Original Transaction Found in table PremiumTransaction\r\nAND\r\n--Exclude the following scenario\r\nNOT \r\n(\r\n--1.Premiums for original and onset transactions equal\r\n(PremiumTransactionAmount_Onset- PremiumTransactionAmount_Original)=0\r\nAND\r\n--2.Offset transactions already existing in table PremiumTransaction\r\nNOT ISNULL(PremiumTransactionHashKey_Offset_LKP)\r\n)),\nEXP_Offset_PremiumTransaction AS (\n\tSELECT\n\tRTR_Offset_Onset_Offset.CurrentSnapshotFlag AS CurrentSnapshotFlag1,\n\tRTR_Offset_Onset_Offset.AuditID AS AuditID1,\n\tRTR_Offset_Onset_Offset.EffectiveDate AS EffectiveDate1,\n\tRTR_Offset_Onset_Offset.ExpirationDate AS ExpirationDate1,\n\tRTR_Offset_Onset_Offset.SourceSystemID AS SourceSystemID1,\n\tRTR_Offset_Onset_Offset.CreatedDate AS CreatedDate1,\n\tRTR_Offset_Onset_Offset.ModifiedDate AS ModifiedDate1,\n\tRTR_Offset_Onset_Offset.LogicalIndicator AS LogicalIndicator1,\n\tRTR_Offset_Onset_Offset.LogicalDeleteFlag AS LogicalDeleteFlag1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionHashKey_Offset AS PremiumTransactionHashKey1,\n\tRTR_Offset_Onset_Offset.PremiumLoadSequence AS PremiumLoadSequence1,\n\tRTR_Offset_Onset_Offset.DuplicateSequence AS DuplicateSequence1,\n\tRTR_Offset_Onset_Offset.ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID1,\n\tRTR_Offset_Onset_Offset.StatisticalCoverageAKID AS StatisticalCoverageAKID1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionKey AS PremiumTransactionKey1,\n\tRTR_Offset_Onset_Offset.PMSFunctionCode AS PMSFunctionCode1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionCode AS PremiumTransactionCode1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionBookedDate_Onset AS PremiumTransactionBookedDate_Onset1,\n\tRTR_Offset_Onset_Offset.PremiumTransactionAmount_Offset AS PremiumTransactionAmount_Offset1,\n\tRTR_Offset_Onset_Offset.FullTermPremium_Offset AS FullTermPremium_Offset1,\n\tRTR_Offset_Onset_Offset.PremiumType AS PremiumType1,\n\tRTR_Offset_Onset_Offset.ReasonAmendedCode AS ReasonAmendedCode1,\n\tRTR_Offset_Onset_Offset.OffsetOnsetCode_Offset AS OffsetOnsetCode_Offset1,\n\tRTR_Offset_Onset_Offset.SupPremiumTransactionCodeId AS SupPremiumTransactionCodeId1,\n\tRTR_Offset_Onset_Offset.RatingCoverageAKId AS RatingCoverageAKId1,\n\tRTR_Offset_Onset_Offset.DeductibleAmount AS DeductibleAmount1,\n\tRTR_Offset_Onset_Offset.ExperienceModificationFactor AS ExperienceModificationFactor1,\n\tRTR_Offset_Onset_Offset.ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate1,\n\tRTR_Offset_Onset_Offset.PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor1,\n\tRTR_Offset_Onset_Offset.PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode1,\n\tRTR_Offset_Onset_Offset.IncreasedLimitFactor AS IncreasedLimitFactor1,\n\tRTR_Offset_Onset_Offset.IncreasedLimitGroupCode AS IncreasedLimitGroupCode1,\n\tRTR_Offset_Onset_Offset.YearBuilt AS YearBuilt1,\n\tRTR_Offset_Onset_Offset.AgencyActualCommissionRate AS AgencyActualCommissionRate1,\n\tRTR_Offset_Onset_Offset.BaseRate AS BaseRate1,\n\tRTR_Offset_Onset_Offset.ConstructionCode AS ConstructionCode1,\n\tRTR_Offset_Onset_Offset.StateRatingEffectiveDate AS StateRatingEffectiveDate1,\n\tRTR_Offset_Onset_Offset.IndividualRiskPremiumModification AS IndividualRiskPremiumModification1,\n\tRTR_Offset_Onset_Offset.WindCoverageFlag AS WindCoverageFlag1,\n\tRTR_Offset_Onset_Offset.DeductibleBasis AS DeductibleBasis1,\n\tRTR_Offset_Onset_Offset.ExposureBasis AS ExposureBasis1,\n\tRTR_Offset_Onset_Offset.TransactionCreatedUserId AS TransactionCreatedUserId1,\n\tRTR_Offset_Onset_Offset.ServiceCentreName AS ServiceCentreName1,\n\tRTR_Offset_Onset_Offset.Exposure AS Exposure1,\n\tRTR_Offset_Onset_Offset.NumberOfEmployee AS NumberOfEmployee1,\n\tRTR_Offset_Onset_Offset.CoverageId AS CoverageId1,\n\tEXP_SEQ_OFFSET.NEXTVAL,\n\tRTR_Offset_Onset_Offset.NegateRestateCode AS NegateRestateCode1,\n\t0 AS WrittenExposure,\n\tRTR_Offset_Onset_Offset.DeclaredEvent AS DeclaredEvent1\n\tFROM EXP_SEQ_OFFSET\n\t -- Manually join with RTR_Offset_Onset_Offset\n),\nWorkPremiumTransaction_Offset AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, PremiumTransactionStageId)\n\tSELECT \n\tAuditID1 AS AUDITID, \n\tSourceSystemID1 AS SOURCESYSTEMID, \n\tCreatedDate1 AS CREATEDDATE, \n\tNEXTVAL AS PREMIUMTRANSACTIONAKID, \n\tCoverageId1 AS PREMIUMTRANSACTIONSTAGEID\n\tFROM EXP_Offset_PremiumTransaction\n),\nEXP_SEQ_ONSET AS (\n\tSELECT\n\tNEXTVAL\n\tFROM SEQ_PremiumTransactionAKID\n),\nEXP_Onset_PremiumTransaction AS (\n\tSELECT\n\tRTR_Offset_Onset_Onset.CurrentSnapshotFlag AS CurrentSnapshotFlag3,\n\tRTR_Offset_Onset_Onset.AuditID AS AuditID3,\n\tRTR_Offset_Onset_Onset.EffectiveDate AS EffectiveDate3,\n\tRTR_Offset_Onset_Onset.ExpirationDate AS ExpirationDate3,\n\tRTR_Offset_Onset_Onset.SourceSystemID AS SourceSystemID3,\n\tRTR_Offset_Onset_Onset.CreatedDate AS CreatedDate3,\n\tRTR_Offset_Onset_Onset.ModifiedDate AS ModifiedDate3,\n\tRTR_Offset_Onset_Onset.LogicalIndicator AS LogicalIndicator3,\n\tRTR_Offset_Onset_Onset.LogicalDeleteFlag AS LogicalDeleteFlag3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionHashKey AS PremiumTransactionHashKey3,\n\tRTR_Offset_Onset_Onset.PremiumLoadSequence AS PremiumLoadSequence3,\n\tRTR_Offset_Onset_Onset.DuplicateSequence AS DuplicateSequence3,\n\tRTR_Offset_Onset_Onset.ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID3,\n\tRTR_Offset_Onset_Onset.StatisticalCoverageAKID AS StatisticalCoverageAKID3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionKey AS PremiumTransactionKey3,\n\tRTR_Offset_Onset_Onset.PMSFunctionCode AS PMSFunctionCode3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionCode AS PremiumTransactionCode3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionAmount_Onset AS PremiumTransactionAmount_Onset3,\n\tRTR_Offset_Onset_Onset.PremiumTransactionBookedDate_Onset AS PremiumTransactionBookedDate_Onset3,\n\tRTR_Offset_Onset_Onset.FullTermPremium AS FullTermPremium3,\n\tRTR_Offset_Onset_Onset.PremiumType AS PremiumType3,\n\tRTR_Offset_Onset_Onset.ReasonAmendedCode AS ReasonAmendedCode3,\n\tRTR_Offset_Onset_Onset.OffsetOnsetCode AS OffsetOnsetCode3,\n\tRTR_Offset_Onset_Onset.SupPremiumTransactionCodeId AS SupPremiumTransactionCodeId3,\n\tRTR_Offset_Onset_Onset.RatingCoverageAKId AS RatingCoverageAKId3,\n\tRTR_Offset_Onset_Onset.DeductibleAmount AS DeductibleAmount3,\n\tRTR_Offset_Onset_Onset.ExperienceModificationFactor AS ExperienceModificationFactor3,\n\tRTR_Offset_Onset_Onset.ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate3,\n\tRTR_Offset_Onset_Onset.PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor3,\n\tRTR_Offset_Onset_Onset.PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode3,\n\tRTR_Offset_Onset_Onset.IncreasedLimitFactor AS IncreasedLimitFactor3,\n\tRTR_Offset_Onset_Onset.IncreasedLimitGroupCode AS IncreasedLimitGroupCode3,\n\tRTR_Offset_Onset_Onset.YearBuilt AS YearBuilt3,\n\tRTR_Offset_Onset_Onset.AgencyActualCommissionRate AS AgencyActualCommissionRate3,\n\tRTR_Offset_Onset_Onset.BaseRate AS BaseRate3,\n\tRTR_Offset_Onset_Onset.ConstructionCode AS ConstructionCode3,\n\tRTR_Offset_Onset_Onset.StateRatingEffectiveDate AS StateRatingEffectiveDate3,\n\tRTR_Offset_Onset_Onset.IndividualRiskPremiumModification AS IndividualRiskPremiumModification3,\n\tRTR_Offset_Onset_Onset.WindCoverageFlag AS WindCoverageFlag3,\n\tRTR_Offset_Onset_Onset.DeductibleBasis AS DeductibleBasis3,\n\tRTR_Offset_Onset_Onset.ExposureBasis AS ExposureBasis3,\n\tRTR_Offset_Onset_Onset.TransactionCreatedUserId AS TransactionCreatedUserId3,\n\tRTR_Offset_Onset_Onset.ServiceCentreName AS ServiceCentreName3,\n\tRTR_Offset_Onset_Onset.Exposure AS Exposure3,\n\tRTR_Offset_Onset_Onset.NumberOfEmployee AS NumberOfEmployee3,\n\tRTR_Offset_Onset_Onset.CoverageId AS CoverageId3,\n\tEXP_SEQ_ONSET.NEXTVAL,\n\tRTR_Offset_Onset_Onset.NegateRestateCode AS NegateRestateCode3,\n\t0 AS WrittenExposure,\n\tRTR_Offset_Onset_Onset.DeclaredEvent AS DeclaredEvent3\n\tFROM EXP_SEQ_ONSET\n\t -- Manually join with RTR_Offset_Onset_Onset\n),\nTGT_PremiumTransaction_Onset AS (\n\tINSERT INTO PremiumTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, PremiumTransactionHashKey, PremiumLoadSequence, DuplicateSequence, PremiumTransactionAKID, ReinsuranceCoverageAKID, StatisticalCoverageAKID, PremiumTransactionKey, PMSFunctionCode, PremiumTransactionCode, PremiumTransactionEnteredDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionBookedDate, PremiumTransactionAmount, FullTermPremium, PremiumType, ReasonAmendedCode, OffsetOnsetCode, SupPremiumTransactionCodeId, RatingCoverageAKId, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, IndividualRiskPremiumModification, WindCoverageFlag, DeductibleBasis, ExposureBasis, TransactionCreatedUserId, ServiceCentreName, Exposure, NumberOfEmployee, NegateRestateCode, WrittenExposure, DeclaredEventFlag)\n\tSELECT \n\tCurrentSnapshotFlag3 AS CURRENTSNAPSHOTFLAG, \n\tAuditID3 AS AUDITID, \n\tEffectiveDate3 AS EFFECTIVEDATE, \n\tExpirationDate3 AS EXPIRATIONDATE, \n\tSourceSystemID3 AS SOURCESYSTEMID, \n\tCreatedDate3 AS CREATEDDATE, \n\tModifiedDate3 AS MODIFIEDDATE, \n\tLogicalIndicator3 AS LOGICALINDICATOR, \n\tLogicalDeleteFlag3 AS LOGICALDELETEFLAG, \n\tPremiumTransactionHashKey3 AS PREMIUMTRANSACTIONHASHKEY, \n\tPremiumLoadSequence3 AS PREMIUMLOADSEQUENCE, \n\tDuplicateSequence3 AS DUPLICATESEQUENCE, \n\tNEXTVAL AS PREMIUMTRANSACTIONAKID, \n\tReinsuranceCoverageAKID3 AS REINSURANCECOVERAGEAKID, \n\tStatisticalCoverageAKID3 AS STATISTICALCOVERAGEAKID, \n\tPremiumTransactionKey3 AS PREMIUMTRANSACTIONKEY, \n\tPMSFunctionCode3 AS PMSFUNCTIONCODE, \n\tPremiumTransactionCode3 AS PREMIUMTRANSACTIONCODE, \n\tPremiumTransactionEnteredDate3 AS PREMIUMTRANSACTIONENTEREDDATE, \n\tPremiumTransactionEffectiveDate3 AS PREMIUMTRANSACTIONEFFECTIVEDATE, \n\tPremiumTransactionExpirationDate3 AS PREMIUMTRANSACTIONEXPIRATIONDATE, \n\tPremiumTransactionBookedDate_Onset3 AS PREMIUMTRANSACTIONBOOKEDDATE, \n\tPremiumTransactionAmount_Onset3 AS PREMIUMTRANSACTIONAMOUNT, \n\tFullTermPremium3 AS FULLTERMPREMIUM, \n\tPremiumType3 AS PREMIUMTYPE, \n\tReasonAmendedCode3 AS REASONAMENDEDCODE, \n\tOffsetOnsetCode3 AS OFFSETONSETCODE, \n\tSupPremiumTransactionCodeId3 AS SUPPREMIUMTRANSACTIONCODEID, \n\tRatingCoverageAKId3 AS RATINGCOVERAGEAKID, \n\tDeductibleAmount3 AS DEDUCTIBLEAMOUNT, \n\tExperienceModificationFactor3 AS EXPERIENCEMODIFICATIONFACTOR, \n\tExperienceModificationEffectiveDate3 AS EXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPackageModificationAdjustmentFactor3 AS PACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tPackageModificationAdjustmentGroupCode3 AS PACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tIncreasedLimitFactor3 AS INCREASEDLIMITFACTOR, \n\tIncreasedLimitGroupCode3 AS INCREASEDLIMITGROUPCODE, \n\tYearBuilt3 AS YEARBUILT, \n\tAgencyActualCommissionRate3 AS AGENCYACTUALCOMMISSIONRATE, \n\tBaseRate3 AS BASERATE, \n\tConstructionCode3 AS CONSTRUCTIONCODE, \n\tStateRatingEffectiveDate3 AS STATERATINGEFFECTIVEDATE, \n\tIndividualRiskPremiumModification3 AS INDIVIDUALRISKPREMIUMMODIFICATION, \n\tWindCoverageFlag3 AS WINDCOVERAGEFLAG, \n\tDeductibleBasis3 AS DEDUCTIBLEBASIS, \n\tExposureBasis3 AS EXPOSUREBASIS, \n\tTransactionCreatedUserId3 AS TRANSACTIONCREATEDUSERID, \n\tServiceCentreName3 AS SERVICECENTRENAME, \n\tExposure3 AS EXPOSURE, \n\tNumberOfEmployee3 AS NUMBEROFEMPLOYEE, \n\tNegateRestateCode3 AS NEGATERESTATECODE, \n\tWRITTENEXPOSURE, \n\tDeclaredEvent3 AS DECLAREDEVENTFLAG\n\tFROM EXP_Onset_PremiumTransaction\n),\nWorkPremiumTransaction_Onset AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, PremiumTransactionStageId)\n\tSELECT \n\tAuditID3 AS AUDITID, \n\tSourceSystemID3 AS SOURCESYSTEMID, \n\tCreatedDate3 AS CREATEDDATE, \n\tNEXTVAL AS PREMIUMTRANSACTIONAKID, \n\tCoverageId3 AS PREMIUMTRANSACTIONSTAGEID\n\tFROM EXP_Onset_PremiumTransaction\n),\nTGT_PremiumTransaction_Insert_Offset AS (\n\tINSERT INTO PremiumTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, PremiumTransactionHashKey, PremiumLoadSequence, DuplicateSequence, PremiumTransactionAKID, ReinsuranceCoverageAKID, StatisticalCoverageAKID, PremiumTransactionKey, PMSFunctionCode, PremiumTransactionCode, PremiumTransactionEnteredDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionBookedDate, PremiumTransactionAmount, FullTermPremium, PremiumType, ReasonAmendedCode, OffsetOnsetCode, SupPremiumTransactionCodeId, RatingCoverageAKId, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, IndividualRiskPremiumModification, WindCoverageFlag, DeductibleBasis, ExposureBasis, TransactionCreatedUserId, ServiceCentreName, Exposure, NumberOfEmployee, NegateRestateCode, WrittenExposure, DeclaredEventFlag)\n\tSELECT \n\tCurrentSnapshotFlag1 AS CURRENTSNAPSHOTFLAG, \n\tAuditID1 AS AUDITID, \n\tEffectiveDate1 AS EFFECTIVEDATE, \n\tExpirationDate1 AS EXPIRATIONDATE, \n\tSourceSystemID1 AS SOURCESYSTEMID, \n\tCreatedDate1 AS CREATEDDATE, \n\tModifiedDate1 AS MODIFIEDDATE, \n\tLogicalIndicator1 AS LOGICALINDICATOR, \n\tLogicalDeleteFlag1 AS LOGICALDELETEFLAG, \n\tPremiumTransactionHashKey1 AS PREMIUMTRANSACTIONHASHKEY, \n\tPremiumLoadSequence1 AS PREMIUMLOADSEQUENCE, \n\tDuplicateSequence1 AS DUPLICATESEQUENCE, \n\tNEXTVAL AS PREMIUMTRANSACTIONAKID, \n\tReinsuranceCoverageAKID1 AS REINSURANCECOVERAGEAKID, \n\tStatisticalCoverageAKID1 AS STATISTICALCOVERAGEAKID, \n\tPremiumTransactionKey1 AS PREMIUMTRANSACTIONKEY, \n\tPMSFunctionCode1 AS PMSFUNCTIONCODE, \n\tPremiumTransactionCode1 AS PREMIUMTRANSACTIONCODE, \n\tPremiumTransactionEnteredDate1 AS PREMIUMTRANSACTIONENTEREDDATE, \n\tPremiumTransactionEffectiveDate1 AS PREMIUMTRANSACTIONEFFECTIVEDATE, \n\tPremiumTransactionExpirationDate1 AS PREMIUMTRANSACTIONEXPIRATIONDATE, \n\tPremiumTransactionBookedDate_Onset1 AS PREMIUMTRANSACTIONBOOKEDDATE, \n\tPremiumTransactionAmount_Offset1 AS PREMIUMTRANSACTIONAMOUNT, \n\tFullTermPremium_Offset1 AS FULLTERMPREMIUM, \n\tPremiumType1 AS PREMIUMTYPE, \n\tReasonAmendedCode1 AS REASONAMENDEDCODE, \n\tOffsetOnsetCode_Offset1 AS OFFSETONSETCODE, \n\tSupPremiumTransactionCodeId1 AS SUPPREMIUMTRANSACTIONCODEID, \n\tRatingCoverageAKId1 AS RATINGCOVERAGEAKID, \n\tDeductibleAmount1 AS DEDUCTIBLEAMOUNT, \n\tExperienceModificationFactor1 AS EXPERIENCEMODIFICATIONFACTOR, \n\tExperienceModificationEffectiveDate1 AS EXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPackageModificationAdjustmentFactor1 AS PACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tPackageModificationAdjustmentGroupCode1 AS PACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tIncreasedLimitFactor1 AS INCREASEDLIMITFACTOR, \n\tIncreasedLimitGroupCode1 AS INCREASEDLIMITGROUPCODE, \n\tYearBuilt1 AS YEARBUILT, \n\tAgencyActualCommissionRate1 AS AGENCYACTUALCOMMISSIONRATE, \n\tBaseRate1 AS BASERATE, \n\tConstructionCode1 AS CONSTRUCTIONCODE, \n\tStateRatingEffectiveDate1 AS STATERATINGEFFECTIVEDATE, \n\tIndividualRiskPremiumModification1 AS INDIVIDUALRISKPREMIUMMODIFICATION, \n\tWindCoverageFlag1 AS WINDCOVERAGEFLAG, \n\tDeductibleBasis1 AS DEDUCTIBLEBASIS, \n\tExposureBasis1 AS EXPOSUREBASIS, \n\tTransactionCreatedUserId1 AS TRANSACTIONCREATEDUSERID, \n\tServiceCentreName1 AS SERVICECENTRENAME, \n\tExposure1 AS EXPOSURE, \n\tNumberOfEmployee1 AS NUMBEROFEMPLOYEE, \n\tNegateRestateCode1 AS NEGATERESTATECODE, \n\tWRITTENEXPOSURE, \n\tDeclaredEvent1 AS DECLAREDEVENTFLAG\n\tFROM EXP_Offset_PremiumTransaction\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603225"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "EXCLUDE_TTYPE": {
                "type": "string",
                "defaultValue": "NOT IN ('RescindNonRenew','Reporting','VoidReporting','Information','Dividend','RevisedDividend','VoidDividend','NonRenew','RescindCancelPending','CancelPending')"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "DBCONNECTION_TARGET_LKP": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DATAFIX_TYPE": {
                "type": "string",
                "defaultValue": "'PremiumChange'"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "WHERE_CLAUSE_AUDIT": {
                "type": "string",
                "defaultValue": "and premiumtransaction.premiumtransactioncode not in ('FinalAudit','RevisedFinalAudit','VoidFinalAudit')"
            },
            "PMSESSIONNAME": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}