{
    "name": "m_POL_DW_LOAD_DCT_CWO_ClawBack_From_Billing",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_DCT_CWO_ClawBack_From_Billing",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_TotalPremium_PerPolicy AS (\n\tSELECT\n\tTotalEDWPremium,\n\tPolicyNumber\n\tFROM (\n\t\tselect pol.pol_num as PolicyNumber, sum(PremiumTransactionAmount) as TotalEDWPremium\r\n\t\tfrom PremiumTransaction pt\t\r\n\t\tinner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId\tand rc.EffectiveDate = pt.EffectiveDate\t\r\n\t\tinner join PolicyCoverage pc\ton pc.PolicyCoverageAKID = rc.PolicyCoverageAKID\tand pc.CurrentSnapshotFlag = 1\t\r\n\t\tinner join RiskLocation rl\ton pc.RiskLocationAKID = rl.RiskLocationAKID\tand rl.CurrentSnapshotFlag = 1\t\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\ton pol.pol_ak_id = pc.PolicyAKID\tand pol.crrnt_snpsht_flag = 1\t\r\n\t\twhere pol.pol_num in (select distinct PolicyReference from @{pipeline().parameters.SOURCE_DATABASE_NAME}..WorkDCBILCommissionCWOClawBack)\r\n\t\tand pt.ReasonAmendedCode not in ('CWO','Claw Back')\r\n\t\tgroup by pol.pol_num\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber ORDER BY TotalEDWPremium) = 1\n),\nLKP_LastUpdateDate_PerPolicyAndRate AS (\n\tSELECT\n\tLastUpdatedTimestamp,\n\tPolicyReference,\n\tAuthorizationDate,\n\tCommissionPercent\n\tFROM (\n\t\tSELECT PolicyReference as PolicyReference, AuthorizationDate as AuthorizationDate, CommissionPercent  as CommissionPercent , LastUpdatedTimestamp as LastUpdatedTimestamp \r\n\t\tFROM  (\r\n\t\tSELECT Pt.PolicyReference as PolicyReference, convert(date , ca.AuthorizationDateTime) as AuthorizationDate, ca.CommissionPercent as CommissionPercent, min(ca.LastUpdatedTimestamp) as LastUpdatedTimestamp\r\n\t\t from DCBILCommissionAuthorizationStage ca\r\n\t\tjoin DCBILPolicyTermStage PT on CA.PolicyTermId=PT.PolicyTermId\r\n\t\twhere ca.Activity in ('WriteOff', 'WriteOffReversal')\r\n\t\tgroup by Pt.PolicyReference, convert(date , ca.AuthorizationDateTime), ca.CommissionPercent\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tSELECT PT.PolicyReference as PolicyReference, GJ.ActivityEffectiveDate as AuthorizationDate, 0 as CommissionPercent, min(GJ.LastUpdatedTimestamp) as LastUpdatedTimestamp\r\n\t\tfrom DCBILGeneralJounalStage GJ join DCBILPolicyTermStage PT on PT.PolicyTermId=GJ.PolicyTermId\r\n\t\twhere GJ.ActivityTypeCode in ('WO', 'RCWR') and AccountingClassCode in ('AR0','AR1') and GJ.JournalTypeCode='PREM'\r\n\t\tgroup by PT.PolicyReference,GJ.ActivityEffectiveDate\r\n\t\t) S\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyReference,AuthorizationDate,CommissionPercent ORDER BY LastUpdatedTimestamp) = 1\n),\nLKP_LastUpdateDate_PerPolicy AS (\n\tSELECT\n\tLastUpdatedTimestamp,\n\tPolicyReference,\n\tAuthorizationDate\n\tFROM (\n\t\tSELECT PolicyReference as PolicyReference, AuthorizationDate as AuthorizationDate , LastUpdatedTimestamp as LastUpdatedTimestamp\r\n\t\tFROM  (\r\n\t\tSELECT Pt.PolicyReference as PolicyReference, convert(date , ca.AuthorizationDateTime) as AuthorizationDate, min(ca.LastUpdatedTimestamp) as LastUpdatedTimestamp\r\n\t\t FROM DCBILCommissionAuthorizationStage ca\r\n\t\tINNER JOIN DCBILPolicyTermStage PT on CA.PolicyTermId=PT.PolicyTermId\r\n\t\tWHERE ca.Activity in ('WriteOff', 'WriteOffReversal')\r\n\t\tGROUP BY Pt.PolicyReference, convert(date , ca.AuthorizationDateTime)\r\n\t\t\r\n\t\tUNION ALL\r\n\t\t\r\n\t\tSELECT PT.PolicyReference as PolicyReference, GJ.ActivityEffectiveDate as AuthorizationDate, min(GJ.LastUpdatedTimestamp) as LastUpdatedTimestamp\r\n\t\tFROM DCBILGeneralJounalStage GJ INNER JOIN DCBILPolicyTermStage PT on PT.PolicyTermId=GJ.PolicyTermId\r\n\t\tWHERE GJ.ActivityTypeCode in ('WO', 'RCWR') and AccountingClassCode in ('AR0','AR1') and GJ.JournalTypeCode='PREM'\r\n\t\tGROUP BY PT.PolicyReference,GJ.ActivityEffectiveDate) S\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyReference,AuthorizationDate ORDER BY LastUpdatedTimestamp) = 1\n),\nLKP_TotalPremium_PerPolicyAndRate AS (\n\tSELECT\n\tTotalEDWPremium,\n\tPolicyNumber,\n\tAgencyActualCommissionRate\n\tFROM (\n\t\tselect pol.pol_num as PolicyNumber, pt.AgencyActualCommissionRate as AgencyActualCommissionRate, sum(PremiumTransactionAmount) as TotalEDWPremium\r\n\t\tfrom PremiumTransaction pt\t\r\n\t\tinner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId\tand rc.EffectiveDate = pt.EffectiveDate\t\r\n\t\tinner join PolicyCoverage pc\ton pc.PolicyCoverageAKID = rc.PolicyCoverageAKID\tand pc.CurrentSnapshotFlag = 1\t\r\n\t\tinner join RiskLocation rl\ton pc.RiskLocationAKID = rl.RiskLocationAKID\tand rl.CurrentSnapshotFlag = 1\t\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\ton pol.pol_ak_id = pc.PolicyAKID\tand pol.crrnt_snpsht_flag = 1\t\r\n\t\twhere pol.pol_num in (select distinct PolicyReference from @{pipeline().parameters.SOURCE_DATABASE_NAME}..WorkDCBILCommissionCWOClawBack)\r\n\t\tand pt.ReasonAmendedCode not in ('CWO','Claw Back')\r\n\t\tgroup by pol.pol_num, pt.AgencyActualCommissionRate\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,AgencyActualCommissionRate ORDER BY TotalEDWPremium) = 1\n),\nSQ_PremiumTransaction_DCT_CWO_ClawBack AS (\n\tWITH OnlyPolicyMatch as\r\n\t(select distinct pol.pol_num, DCBIL2.PolicyTermEffectiveDate, DCBIL2.PolicyTermExpirationDate\r\n\tfrom PremiumTransaction pt inner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId and rc.EffectiveDate = pt.EffectiveDate\r\n\tinner join PolicyCoverage pc on pc.PolicyCoverageAKID = rc.PolicyCoverageAKID and pc.CurrentSnapshotFlag = 1\r\n\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol on pol.pol_ak_id = pc.PolicyAKID and pol.crrnt_snpsht_flag = 1\r\n\tleft join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCBILCommissionCWOClawBack DCBIL on DCBIL.PolicyReference=pol.pol_num and DCBIL.CommissionPercent=PT.AgencyActualCommissionRate\r\n\tand DCBIL.PolicyTermEffectiveDate = pol.pol_eff_date and DCBIL.PolicyTermExpirationDate=pol.pol_exp_date\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCBILCommissionCWOClawBack  DCBIL2 \r\n\ton DCBIL2.PolicyReference=pol.pol_num and DCBIL2.PolicyTermEffectiveDate = pol.pol_eff_date and DCBIL2.PolicyTermExpirationDate=pol.pol_exp_date\r\n\twhere pt.ReasonAmendedCode not in ('CWO','Claw Back')\r\n\tand pt.SourceSystemID = 'DCT'\r\n\tand DCBIL.WorkDCBILCommissionCWOClawBackId is null)\r\n\tselect distinct pol.pol_num,\r\n\tpt.EffectiveDate,\r\n\tpt.LogicalIndicator,pt.LogicalDeleteFlag,pt.PremiumTransactionHashKey,pt.PremiumLoadSequence,\r\n\tpt.DuplicateSequence,pt.ReinsuranceCoverageAKID,pt.StatisticalCoverageAKID,pt.PremiumTransactionKey, pt.PMSFunctionCode,\r\n\tpt.PremiumTransactionExpirationDate,\r\n\tpt.PremiumTransactionAmount,\r\n\tpt.PremiumType,pt.RatingCoverageAkID, pt.DeductibleAmount,pt.ExperienceModificationFactor,pt.ExperienceModificationEffectiveDate,\r\n\tpt.PackageModificationAdjustmentFactor, pt.PackageModificationAdjustmentGroupCode,pt.IncreasedLimitFactor,pt.IncreasedLimitGroupCode,\r\n\tpt.YearBuilt,pt.AgencyActualCommissionRate,pt.BaseRate,pt.ConstructionCode,pt.StateRatingEffectiveDate,pt.IndividualRiskPremiumModification,\r\n\tpt.WindCoverageFlag,pt.DeductibleBasis,pt.ExposureBasis,\r\n\tcase when DCBIL2.PolicyReference is null then DCBIL.AuthorizationDate else DCBIL2.AuthorizationDate end as AuthorizationDate,\r\n\tcase when DCBIL2.PolicyReference is null then DCBIL.CWOAmount else DCBIL2.CWOAmount end as CWOAmount,\r\n\tcase when DCBIL2.PolicyReference is null then 'BothMatch' else 'OnlyPolicyMatch' end as CWOType,\r\n\tcase when DCBIL2.PolicyReference is null then DCBIL.AuthorizedAmount else DCBIL2.AuthorizedAmount end as AuthorizedAmount ,\r\n\tcase when DCBIL2.PolicyReference is null then 'BothMatch' else 'OnlyPolicyMatch' end as CWBType,\r\n\tpol.pol_eff_date, pol.pol_exp_date, PT.TransactionCreatedUserId, PT.ServiceCentreName,\r\n\tPT.NumberOfEmployee,\r\n\tISNULL(case when DCBIL2.PolicyReference is null then DCBIL.CWOAmount else DCBIL2.CWOAmount end,0) as CWOAmounts\r\n\tFROM PremiumTransaction pt\r\n\tinner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId and rc.EffectiveDate = pt.EffectiveDate\r\n\tinner join PolicyCoverage pc on pc.PolicyCoverageAKID = rc.PolicyCoverageAKID and pc.CurrentSnapshotFlag = 1\r\n\tinner join RiskLocation rl on pc.RiskLocationAKID = rl.RiskLocationAKID and rl.CurrentSnapshotFlag = 1\r\n\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol on pol.pol_ak_id = pc.PolicyAKID and pol.crrnt_snpsht_flag = 1\r\n\tinner join (select distinct PolicyReference,PolicyTermEffectiveDate,PolicyTermExpirationDate from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCBILCommissionCWOClawBack ) a \r\n\tON a.Policyreference = pol.pol_num and a.PolicyTermEffectiveDate = pol.pol_eff_date and a.PolicyTermExpirationDate = pol.pol_exp_date\r\n\tleft join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCBILCommissionCWOClawBack DCBIL on DCBIL.PolicyReference=pol.pol_num and DCBIL.CommissionPercent=PT.AgencyActualCommissionRate\r\n\tand DCBIL.PolicyTermEffectiveDate = pol.pol_eff_date and DCBIL.PolicyTermExpirationDate=pol.pol_exp_date\r\n\tleft join (select PolicyReference, PolicyTermEffectiveDate, PolicyTermExpirationDate, AuthorizationDate, sum(CWOAmount) as CWOAmount, sum(AuthorizedAmount ) as AuthorizedAmount from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCBILCommissionCWOClawBack \r\n\tgroup by PolicyReference, PolicyTermEffectiveDate, PolicyTermExpirationDate, AuthorizationDate ) DCBIL2\r\n\ton exists(select 1 from OnlyPolicyMatch where OnlyPolicyMatch.pol_num=DCBIL2.PolicyReference and OnlyPolicyMatch.PolicyTermEffectiveDate=DCBIL2.PolicyTermEffectiveDate and OnlyPolicyMatch.PolicyTermExpirationDate=DCBIL2.PolicyTermExpirationDate)\r\n\tand DCBIL2.PolicyReference=pol.pol_num and DCBIL2.PolicyTermEffectiveDate=pol.pol_eff_date and DCBIL2.PolicyTermExpirationDate=pol.pol_exp_date\r\n\twhere pt.ReasonAmendedCode not in ('CWO','Claw Back')\r\n\tand pt.SourceSystemID = 'DCT'\r\n\tand pt.PremiumTransactionAmount !=0\n),\nRTR_Split_CWO_and_ClawBack AS (\n\tSELECT\n\tpol_num,\n\tEffectiveDate,\n\tLogicalIndicator,\n\tLogicalDeleteFlag,\n\tPremiumTransactionHashKey,\n\tPremiumLoadSequence,\n\tDuplicateSequence,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tPremiumTransactionKey,\n\tPMSFunctionCode,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionAmount,\n\tPremiumType,\n\tRatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\tAuthorizationDate,\n\tCWOAmount,\n\tCWOType,\n\tAuthorizedAmount,\n\tCWBType,\n\tpol_eff_date,\n\tpol_exp_date,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tNumberOfEmployee,\n\tCWOAmounts\n\tFROM SQ_PremiumTransaction_DCT_CWO_ClawBack\n),\nRTR_Split_CWO_and_ClawBack_CWO AS (SELECT * FROM RTR_Split_CWO_and_ClawBack WHERE CWOAmounts!=0),\nRTR_Split_CWO_and_ClawBack_CLAWBACK AS (SELECT * FROM RTR_Split_CWO_and_ClawBack WHERE CWOAmounts!=0),\nEXP_CWOAmountCal AS (\n\tSELECT\n\tpol_num AS i_pol_num,\n\tEffectiveDate AS i_EffectiveDate,\n\tLogicalIndicator AS i_LogicalIndicator,\n\tLogicalDeleteFlag AS i_LogicalDeleteFlag,\n\tPremiumTransactionHashKey AS i_PremiumTransactionHashKey,\n\tPremiumLoadSequence AS i_PremiumLoadSequence,\n\tDuplicateSequence AS i_DuplicateSequence,\n\tReinsuranceCoverageAKID AS i_ReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tPremiumTransactionKey AS i_PremiumTransactionKey,\n\tPMSFunctionCode AS i_PMSFunctionCode,\n\tPremiumTransactionExpirationDate AS i_PremiumTransactionExpirationDate,\n\tPremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tPremiumType AS i_PremiumType,\n\tRatingCoverageAKId AS i_RatingCoverageAKId,\n\tDeductibleAmount AS i_DeductibleAmount,\n\tExperienceModificationFactor AS i_ExperienceModificationFactor,\n\tExperienceModificationEffectiveDate AS i_ExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor AS i_PackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor AS i_IncreasedLimitFactor,\n\tIncreasedLimitGroupCode AS i_IncreasedLimitGroupCode,\n\tYearBuilt AS i_YearBuilt,\n\tAgencyActualCommissionRate AS i_AgencyActualCommissionRate,\n\tBaseRate AS i_BaseRate,\n\tConstructionCode AS i_ConstructionCode,\n\tStateRatingEffectiveDate AS i_StateRatingEffectiveDate,\n\tIndividualRiskPremiumModification AS i_IndividualRiskPremiumModification,\n\tWindCoverageFlag AS i_WindCoverageFlag,\n\tDeductibleBasis AS i_DeductibleBasis,\n\tExposureBasis AS i_ExposureBasis,\n\tAuthorizationDate AS i_AuthorizationDate,\n\tCWOAmount AS i_CWOAmount,\n\tCWOType AS i_CWOType,\n\tpol_eff_date AS i_pol_eff_date,\n\tpol_exp_date AS i_pol_exp_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_CWOType='BothMatch', :LKP.LKP_TOTALPREMIUM_PERPOLICYANDRATE(i_pol_num,i_AgencyActualCommissionRate),\r\n\t-- i_CWOType='OnlyPolicyMatch',\r\n\t-- :LKP.LKP_TOTALPREMIUM_PERPOLICY(i_pol_num),\r\n\t-- 0\r\n\t-- )\n\tDECODE(TRUE,\n\ti_CWOType = 'BothMatch', LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.TotalEDWPremium,\n\ti_CWOType = 'OnlyPolicyMatch', LKP_TOTALPREMIUM_PERPOLICY_i_pol_num.TotalEDWPremium,\n\t0) AS v_TotalPremium,\n\t-- *INF*: IIF(v_TotalPremium=0 or ISNULL(v_TotalPremium), 0, i_PremiumTransactionAmount/v_TotalPremium)\n\tIFF(v_TotalPremium = 0 OR v_TotalPremium IS NULL, 0, i_PremiumTransactionAmount / v_TotalPremium) AS v_AllocationFactor,\n\ti_CWOAmount*v_AllocationFactor AS v_CWOAmount,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: i_EffectiveDate\r\n\t-- --i_AuthorizationDate\n\ti_EffectiveDate AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\ti_LogicalIndicator AS o_LogicalIndicator,\n\t-- *INF*: DECODE(TRUE,i_LogicalDeleteFlag='T','1',i_LogicalDeleteFlag='F','0','0')\n\tDECODE(TRUE,\n\ti_LogicalDeleteFlag = 'T', '1',\n\ti_LogicalDeleteFlag = 'F', '0',\n\t'0') AS o_LogicalDeleteFlag,\n\ti_PremiumTransactionHashKey AS o_PremiumTransactionHashKey,\n\ti_PremiumLoadSequence AS o_PremiumLoadSequence,\n\ti_DuplicateSequence AS o_DuplicateSequence,\n\ti_ReinsuranceCoverageAKID AS o_ReinsuranceCoverageAKID,\n\ti_StatisticalCoverageAKID AS o_StatisticalCoverageAKID,\n\ti_PremiumTransactionKey AS o_PremiumTransactionKey,\n\ti_PMSFunctionCode AS o_PMSFunctionCode,\n\t'Endorse' AS o_PremiumTransactionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_CWOType='BothMatch', :LKP.LKP_LASTUPDATEDATE_PERPOLICYANDRATE(i_pol_num,i_AuthorizationDate,i_AgencyActualCommissionRate),\r\n\t-- i_CWOType='OnlyPolicyMatch',\r\n\t-- :LKP.LKP_LASTUPDATEDATE_PERPOLICY(i_pol_num,i_AuthorizationDate),\r\n\t-- TO_DATE('18000101','YYYYMMDD')\r\n\t-- )\n\tDECODE(TRUE,\n\ti_CWOType = 'BothMatch', LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.LastUpdatedTimestamp,\n\ti_CWOType = 'OnlyPolicyMatch', LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.LastUpdatedTimestamp,\n\tTO_DATE('18000101', 'YYYYMMDD')) AS o_PremiumTransactionEnteredDate,\n\ti_AuthorizationDate AS o_PremiumTransactionEffectiveDate,\n\t-- *INF*: ADD_TO_DATE(i_AuthorizationDate,'DD',1)\n\tADD_TO_DATE(i_AuthorizationDate, 'DD', 1) AS o_PremiumTransactionExpirationDate,\n\t-- *INF*: TRUNC(i_AuthorizationDate,'MM')\n\tTRUNC(i_AuthorizationDate, 'MM') AS o_PremiumTransactionBookedDate,\n\tv_CWOAmount AS o_PremiumTransactionAmount,\n\t0.00 AS o_FullTermPremium,\n\ti_PremiumType AS o_PremiumType,\n\t'CWO' AS o_ReasonAmendedCode,\n\t-- *INF*: 'N/A'\r\n\t-- --'Offset'\n\t'N/A' AS o_OffsetOnsetCode,\n\t28 AS o_sup_premium_transaction_id,\n\ti_RatingCoverageAKId AS o_RatingCoverageAKId,\n\ti_DeductibleAmount AS o_DeductibleAmount,\n\ti_ExperienceModificationFactor AS o_ExperienceModificationFactor,\n\ti_ExperienceModificationEffectiveDate AS o_ExperienceModificationEffectiveDate,\n\ti_PackageModificationAdjustmentFactor AS o_PackageModificationAdjustmentFactor,\n\ti_PackageModificationAdjustmentGroupCode AS o_PackageModificationAdjustmentGroupCode,\n\ti_IncreasedLimitFactor AS o_IncreasedLimitFactor,\n\ti_IncreasedLimitGroupCode AS o_IncreasedLimitGroupCode,\n\ti_YearBuilt AS o_YearBuilt,\n\ti_AgencyActualCommissionRate AS o_AgencyActualCommissionRate,\n\ti_BaseRate AS o_BaseRate,\n\ti_ConstructionCode AS o_ConstructionCode,\n\ti_StateRatingEffectiveDate AS o_StateRatingEffectiveDate,\n\ti_IndividualRiskPremiumModification AS o_IndividualRiskPremiumModification,\n\t-- *INF*: DECODE(TRUE, i_WindCoverageFlag='T','1',\r\n\t-- i_WindCoverageFlag='F','0',\r\n\t-- '0')\n\tDECODE(TRUE,\n\ti_WindCoverageFlag = 'T', '1',\n\ti_WindCoverageFlag = 'F', '0',\n\t'0') AS o_WindCoverageFlag,\n\ti_DeductibleBasis AS o_DeductibleBasis,\n\ti_ExposureBasis AS o_ExposureBasis,\n\ti_pol_eff_date AS o_pol_eff_date,\n\ti_pol_exp_date AS o_pol_exp_date,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tNumberOfEmployee AS NumberOfEmployee1\n\tFROM RTR_Split_CWO_and_ClawBack_CWO\n\tLEFT JOIN LKP_TOTALPREMIUM_PERPOLICYANDRATE LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate\n\tON LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.PolicyNumber = i_pol_num\n\tAND LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.AgencyActualCommissionRate = i_AgencyActualCommissionRate\n\n\tLEFT JOIN LKP_TOTALPREMIUM_PERPOLICY LKP_TOTALPREMIUM_PERPOLICY_i_pol_num\n\tON LKP_TOTALPREMIUM_PERPOLICY_i_pol_num.PolicyNumber = i_pol_num\n\n\tLEFT JOIN LKP_LASTUPDATEDATE_PERPOLICYANDRATE LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate\n\tON LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.PolicyReference = i_pol_num\n\tAND LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.AuthorizationDate = i_AuthorizationDate\n\tAND LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.CommissionPercent = i_AgencyActualCommissionRate\n\n\tLEFT JOIN LKP_LASTUPDATEDATE_PERPOLICY LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate\n\tON LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.PolicyReference = i_pol_num\n\tAND LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.AuthorizationDate = i_AuthorizationDate\n\n),\nEXP_ClawBackAmountCal AS (\n\tSELECT\n\tpol_num AS i_pol_num,\n\tEffectiveDate AS i_EffectiveDate,\n\tLogicalIndicator AS i_LogicalIndicator,\n\tLogicalDeleteFlag AS i_LogicalDeleteFlag,\n\tPremiumTransactionHashKey AS i_PremiumTransactionHashKey,\n\tPremiumLoadSequence AS i_PremiumLoadSequence,\n\tDuplicateSequence AS i_DuplicateSequence,\n\tReinsuranceCoverageAKID AS i_ReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tPremiumTransactionKey AS i_PremiumTransactionKey,\n\tPMSFunctionCode AS i_PMSFunctionCode,\n\tPremiumTransactionExpirationDate AS i_PremiumTransactionExpirationDate,\n\tPremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tPremiumType AS i_PremiumType,\n\tRatingCoverageAKId AS i_RatingCoverageAKId,\n\tDeductibleAmount AS i_DeductibleAmount,\n\tExperienceModificationFactor AS i_ExperienceModificationFactor,\n\tExperienceModificationEffectiveDate AS i_ExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor AS i_PackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor AS i_IncreasedLimitFactor,\n\tIncreasedLimitGroupCode AS i_IncreasedLimitGroupCode,\n\tYearBuilt AS i_YearBuilt,\n\tAgencyActualCommissionRate AS i_AgencyActualCommissionRate,\n\tBaseRate AS i_BaseRate,\n\tConstructionCode AS i_ConstructionCode,\n\tStateRatingEffectiveDate AS i_StateRatingEffectiveDate,\n\tIndividualRiskPremiumModification AS i_IndividualRiskPremiumModification,\n\tWindCoverageFlag AS i_WindCoverageFlag,\n\tDeductibleBasis AS i_DeductibleBasis,\n\tExposureBasis AS i_ExposureBasis,\n\tAuthorizationDate AS i_AuthorizationDate,\n\tAuthorizedAmount AS i_AuthorizedAmount,\n\tCWBType AS i_CWBType,\n\tpol_eff_date AS i_pol_eff_date,\n\tpol_exp_date AS i_pol_exp_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_CWBType='BothMatch', :LKP.LKP_TOTALPREMIUM_PERPOLICYANDRATE(i_pol_num,i_AgencyActualCommissionRate),\r\n\t-- i_CWBType='OnlyPolicyMatch',\r\n\t-- :LKP.LKP_TOTALPREMIUM_PERPOLICY(i_pol_num),\r\n\t-- 0\r\n\t-- )\n\tDECODE(TRUE,\n\ti_CWBType = 'BothMatch', LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.TotalEDWPremium,\n\ti_CWBType = 'OnlyPolicyMatch', LKP_TOTALPREMIUM_PERPOLICY_i_pol_num.TotalEDWPremium,\n\t0) AS v_TotalPremium,\n\t-- *INF*: IIF(v_TotalPremium=0 or ISNULL(v_TotalPremium), 0, i_PremiumTransactionAmount/v_TotalPremium)\n\tIFF(v_TotalPremium = 0 OR v_TotalPremium IS NULL, 0, i_PremiumTransactionAmount / v_TotalPremium) AS v_AllocationFactor,\n\ti_AuthorizedAmount*v_AllocationFactor AS v_ClawBackAmount,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: i_EffectiveDate\r\n\t-- --i_AuthorizationDate\n\ti_EffectiveDate AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\ti_LogicalIndicator AS o_LogicalIndicator,\n\t-- *INF*: DECODE(TRUE,i_LogicalDeleteFlag='T','1',i_LogicalDeleteFlag='F','0','0')\n\tDECODE(TRUE,\n\ti_LogicalDeleteFlag = 'T', '1',\n\ti_LogicalDeleteFlag = 'F', '0',\n\t'0') AS o_LogicalDeleteFlag,\n\ti_PremiumTransactionHashKey AS o_PremiumTransactionHashKey,\n\ti_PremiumLoadSequence AS o_PremiumLoadSequence,\n\ti_DuplicateSequence AS o_DuplicateSequence,\n\ti_ReinsuranceCoverageAKID AS o_ReinsuranceCoverageAKID,\n\ti_StatisticalCoverageAKID AS o_StatisticalCoverageAKID,\n\ti_PremiumTransactionKey AS o_PremiumTransactionKey,\n\ti_PMSFunctionCode AS o_PMSFunctionCode,\n\t'Endorse' AS o_PremiumTransactionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_CWBType='BothMatch', :LKP.LKP_LASTUPDATEDATE_PERPOLICYANDRATE(i_pol_num,i_AuthorizationDate,i_AgencyActualCommissionRate),\r\n\t-- i_CWBType='OnlyPolicyMatch',\r\n\t-- :LKP.LKP_LASTUPDATEDATE_PERPOLICY(i_pol_num,i_AuthorizationDate),\r\n\t-- TO_DATE('18000101','YYYYMMDD')\r\n\t-- )\n\tDECODE(TRUE,\n\ti_CWBType = 'BothMatch', LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.LastUpdatedTimestamp,\n\ti_CWBType = 'OnlyPolicyMatch', LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.LastUpdatedTimestamp,\n\tTO_DATE('18000101', 'YYYYMMDD')) AS o_PremiumTransactionEnteredDate,\n\ti_AuthorizationDate AS o_PremiumTransactionEffectiveDate,\n\t-- *INF*: ADD_TO_DATE(i_AuthorizationDate,'DD',1)\n\tADD_TO_DATE(i_AuthorizationDate, 'DD', 1) AS o_PremiumTransactionExpirationDate,\n\t-- *INF*: TRUNC(i_AuthorizationDate,'MM')\n\tTRUNC(i_AuthorizationDate, 'MM') AS o_PremiumTransactionBookedDate,\n\tv_ClawBackAmount AS o_PremiumTransactionAmount,\n\t0.00 AS o_FullTermPremium,\n\ti_PremiumType AS o_PremiumType,\n\t'Claw Back' AS o_ReasonAmendedCode,\n\t-- *INF*: 'N/A'\r\n\t-- --'Offset'\n\t'N/A' AS o_OffsetOnsetCode,\n\t28 AS o_sup_premium_transaction_id,\n\ti_RatingCoverageAKId AS o_RatingCoverageAKId,\n\ti_DeductibleAmount AS o_DeductibleAmount,\n\ti_ExperienceModificationFactor AS o_ExperienceModificationFactor,\n\ti_ExperienceModificationEffectiveDate AS o_ExperienceModificationEffectiveDate,\n\ti_PackageModificationAdjustmentFactor AS o_PackageModificationAdjustmentFactor,\n\ti_PackageModificationAdjustmentGroupCode AS o_PackageModificationAdjustmentGroupCode,\n\ti_IncreasedLimitFactor AS o_IncreasedLimitFactor,\n\ti_IncreasedLimitGroupCode AS o_IncreasedLimitGroupCode,\n\ti_YearBuilt AS o_YearBuilt,\n\ti_AgencyActualCommissionRate AS o_AgencyActualCommissionRate,\n\ti_BaseRate AS o_BaseRate,\n\ti_ConstructionCode AS o_ConstructionCode,\n\ti_StateRatingEffectiveDate AS o_StateRatingEffectiveDate,\n\ti_IndividualRiskPremiumModification AS o_IndividualRiskPremiumModification,\n\t-- *INF*: DECODE(TRUE, i_WindCoverageFlag='T','1',\r\n\t-- i_WindCoverageFlag='F','0',\r\n\t-- '0')\n\tDECODE(TRUE,\n\ti_WindCoverageFlag = 'T', '1',\n\ti_WindCoverageFlag = 'F', '0',\n\t'0') AS o_WindCoverageFlag,\n\ti_DeductibleBasis AS o_DeductibleBasis,\n\ti_ExposureBasis AS o_ExposureBasis,\n\ti_pol_eff_date AS o_pol_eff_date,\n\ti_pol_exp_date AS o_pol_exp_date,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tNumberOfEmployee AS NumberOfEmployee3\n\tFROM RTR_Split_CWO_and_ClawBack_CLAWBACK\n\tLEFT JOIN LKP_TOTALPREMIUM_PERPOLICYANDRATE LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate\n\tON LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.PolicyNumber = i_pol_num\n\tAND LKP_TOTALPREMIUM_PERPOLICYANDRATE_i_pol_num_i_AgencyActualCommissionRate.AgencyActualCommissionRate = i_AgencyActualCommissionRate\n\n\tLEFT JOIN LKP_TOTALPREMIUM_PERPOLICY LKP_TOTALPREMIUM_PERPOLICY_i_pol_num\n\tON LKP_TOTALPREMIUM_PERPOLICY_i_pol_num.PolicyNumber = i_pol_num\n\n\tLEFT JOIN LKP_LASTUPDATEDATE_PERPOLICYANDRATE LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate\n\tON LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.PolicyReference = i_pol_num\n\tAND LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.AuthorizationDate = i_AuthorizationDate\n\tAND LKP_LASTUPDATEDATE_PERPOLICYANDRATE_i_pol_num_i_AuthorizationDate_i_AgencyActualCommissionRate.CommissionPercent = i_AgencyActualCommissionRate\n\n\tLEFT JOIN LKP_LASTUPDATEDATE_PERPOLICY LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate\n\tON LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.PolicyReference = i_pol_num\n\tAND LKP_LASTUPDATEDATE_PERPOLICY_i_pol_num_i_AuthorizationDate.AuthorizationDate = i_AuthorizationDate\n\n),\nLKP_ClawBack_Policy AS (\n\tSELECT\n\tAuthorizedAmount,\n\ti_pol_num,\n\ti_AuthorizationDate,\n\tPolicyReference,\n\tAuthorizationDate\n\tFROM (\n\t\tselect PolicyReference as PolicyReference,\r\n\t\tAuthorizationDate as AuthorizationDate,\r\n\t\tSUM(AuthorizedAmount) as AuthorizedAmount\r\n\t\tfrom WorkDCBILCommissionCWOClawBack\r\n\t\tgroup by PolicyReference ,AuthorizationDate\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyReference,AuthorizationDate ORDER BY AuthorizedAmount) = 1\n),\nLKP_CWBExist AS (\n\tSELECT\n\tpol_num,\n\ti_AuthorizationDate,\n\ti_AuthorizedAmount,\n\ti_pol_eff_date,\n\ti_pol_exp_date,\n\tPremiumTransactionEffectiveDate,\n\tTotalCWBAmount,\n\tpol_eff_date,\n\tpol_exp_date\n\tFROM (\n\t\tselect pol.pol_num as pol_num, pt.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate, sum(PremiumTransactionAmount) as TotalCWBAmount, pol.pol_eff_date as pol_eff_date, pol.pol_exp_date as pol_exp_date\r\n\t\tfrom PremiumTransaction pt\t\r\n\t\tinner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId\tand rc.EffectiveDate = pt.EffectiveDate\t\r\n\t\tinner join PolicyCoverage pc\ton pc.PolicyCoverageAKID = rc.PolicyCoverageAKID\tand pc.CurrentSnapshotFlag = 1\t\r\n\t\tinner join RiskLocation rl\ton pc.RiskLocationAKID = rl.RiskLocationAKID\tand rl.CurrentSnapshotFlag = 1\t\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\ton pol.pol_ak_id = pc.PolicyAKID\tand pol.crrnt_snpsht_flag = 1\r\n\t\twhere pt.ReasonAmendedCode='Claw Back'\r\n\t\tgroup by pol.pol_num, pt.PremiumTransactionEffectiveDate, pol.pol_eff_date ,pol.pol_exp_date\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_num,PremiumTransactionEffectiveDate,TotalCWBAmount,pol_eff_date,pol_exp_date ORDER BY pol_num) = 1\n),\nLKP_CWO_Policy AS (\n\tSELECT\n\tCWOAmount,\n\ti_pol_num,\n\ti_AuthorizationDate,\n\tPolicyReference,\n\tAuthorizationDate\n\tFROM (\n\t\tselect PolicyReference as PolicyReference,\r\n\t\tAuthorizationDate as AuthorizationDate,\r\n\t\tSUM(CWOAmount) as CWOAmount\r\n\t\tfrom WorkDCBILCommissionCWOClawBack\r\n\t\tgroup by PolicyReference, AuthorizationDate\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyReference,AuthorizationDate ORDER BY CWOAmount) = 1\n),\nLKP_CWOExist AS (\n\tSELECT\n\tpol_num,\n\tPremiumTransactionEffectiveDate,\n\tTotalCWOAmount,\n\tpol_eff_date,\n\tpol_exp_date\n\tFROM (\n\t\tselect pol.pol_num as pol_num , pt.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate, sum(PremiumTransactionAmount) as TotalCWOAmount, pol.pol_eff_date as pol_eff_date, pol.pol_exp_date as pol_exp_date\r\n\t\tfrom PremiumTransaction pt\t\r\n\t\tinner join RatingCoverage rc on rc.RatingCoverageAKID = pt.RatingCoverageAKId\tand rc.EffectiveDate = pt.EffectiveDate\t\r\n\t\tinner join PolicyCoverage pc\ton pc.PolicyCoverageAKID = rc.PolicyCoverageAKID\tand pc.CurrentSnapshotFlag = 1\t\r\n\t\tinner join RiskLocation rl\ton pc.RiskLocationAKID = rl.RiskLocationAKID\tand rl.CurrentSnapshotFlag = 1\t\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\ton pol.pol_ak_id = pc.PolicyAKID\tand pol.crrnt_snpsht_flag = 1\r\n\t\twhere pt.ReasonAmendedCode='CWO'\r\n\t\tgroup by pol.pol_num, pt.PremiumTransactionEffectiveDate,pol.pol_eff_date, pol.pol_exp_date\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_num,PremiumTransactionEffectiveDate,TotalCWOAmount,pol_eff_date,pol_exp_date ORDER BY pol_num) = 1\n),\nUnion AS (\n\tSELECT pol_num AS lkp_PolicyNumber, o_CurrentSnapshotFlag AS CurrentSnapshotFlag, o_AuditID AS AuditID, o_EffectiveDate AS EffectiveDate, o_ExpirationDate AS ExpirationDate, o_SourceSystemID AS SourceSystemID, o_CreatedDate AS CreatedDate, o_ModifiedDate AS ModifiedDate, o_LogicalIndicator AS LogicalIndicator, o_LogicalDeleteFlag AS LogicalDeleteFlag, o_PremiumTransactionHashKey AS PremiumTransactionHashKey, o_PremiumLoadSequence AS PremiumLoadSequence, o_DuplicateSequence AS DuplicateSequence, o_ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID, o_StatisticalCoverageAKID AS StatisticalCoverageAKID, o_PremiumTransactionKey AS PremiumTransactionKey, o_PMSFunctionCode AS PMSFunctionCode, o_PremiumTransactionCode AS PremiumTransactionCode, o_PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate, o_PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate, o_PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate, o_PremiumTransactionBookedDate AS PremiumTransactionBookedDate, o_PremiumTransactionAmount AS PremiumTransactionAmount, o_FullTermPremium AS FullTermPremium, o_PremiumType AS PremiumType, o_ReasonAmendedCode AS ReasonAmendedCode, o_OffsetOnsetCode AS OffsetOnsetCode, o_sup_premium_transaction_id AS sup_premium_transaction_id, o_RatingCoverageAKId AS RatingCoverageAKId, o_DeductibleAmount AS DeductibleAmount, o_ExperienceModificationFactor AS ExperienceModificationFactor, o_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate, o_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor, o_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode, o_IncreasedLimitFactor AS IncreasedLimitFactor, o_IncreasedLimitGroupCode AS IncreasedLimitGroupCode, o_YearBuilt AS YearBuilt, o_AgencyActualCommissionRate AS AgencyActualCommissionRate, o_BaseRate AS BaseRate, o_ConstructionCode AS ConstructionCode, o_StateRatingEffectiveDate AS StateRatingEffectiveDate, o_IndividualRiskPremiumModification AS IndividualRiskPremiumModification, o_WindCoverageFlag AS WindCoverageFlag, o_DeductibleBasis AS DeductibleBasis, o_ExposureBasis AS ExposureBasis, TransactionCreatedUserId, ServiceCentreName, NumberOfEmployee1 AS NumberOfEmployee3\n\tFROM EXP_CWOAmountCal\n\t-- Manually join with LKP_CWOExist\n\tUNION\n\tSELECT pol_num AS lkp_PolicyNumber, o_CurrentSnapshotFlag AS CurrentSnapshotFlag, o_AuditID AS AuditID, o_EffectiveDate AS EffectiveDate, o_ExpirationDate AS ExpirationDate, o_SourceSystemID AS SourceSystemID, o_CreatedDate AS CreatedDate, o_ModifiedDate AS ModifiedDate, o_LogicalIndicator AS LogicalIndicator, o_LogicalDeleteFlag AS LogicalDeleteFlag, o_PremiumTransactionHashKey AS PremiumTransactionHashKey, o_PremiumLoadSequence AS PremiumLoadSequence, o_DuplicateSequence AS DuplicateSequence, o_ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID, o_StatisticalCoverageAKID AS StatisticalCoverageAKID, o_PremiumTransactionKey AS PremiumTransactionKey, o_PMSFunctionCode AS PMSFunctionCode, o_PremiumTransactionCode AS PremiumTransactionCode, o_PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate, o_PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate, o_PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate, o_PremiumTransactionBookedDate AS PremiumTransactionBookedDate, o_PremiumTransactionAmount AS PremiumTransactionAmount, o_FullTermPremium AS FullTermPremium, o_PremiumType AS PremiumType, o_ReasonAmendedCode AS ReasonAmendedCode, o_OffsetOnsetCode AS OffsetOnsetCode, o_sup_premium_transaction_id AS sup_premium_transaction_id, o_RatingCoverageAKId AS RatingCoverageAKId, o_DeductibleAmount AS DeductibleAmount, o_ExperienceModificationFactor AS ExperienceModificationFactor, o_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate, o_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor, o_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode, o_IncreasedLimitFactor AS IncreasedLimitFactor, o_IncreasedLimitGroupCode AS IncreasedLimitGroupCode, o_YearBuilt AS YearBuilt, o_AgencyActualCommissionRate AS AgencyActualCommissionRate, o_BaseRate AS BaseRate, o_ConstructionCode AS ConstructionCode, o_StateRatingEffectiveDate AS StateRatingEffectiveDate, o_IndividualRiskPremiumModification AS IndividualRiskPremiumModification, o_WindCoverageFlag AS WindCoverageFlag, o_DeductibleBasis AS DeductibleBasis, o_ExposureBasis AS ExposureBasis, TransactionCreatedUserId, ServiceCentreName, NumberOfEmployee3\n\tFROM EXP_ClawBackAmountCal\n\t-- Manually join with LKP_CWBExist\n),\nFIL_Exist AS (\n\tSELECT\n\tlkp_PolicyNumber, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\tLogicalIndicator, \n\tLogicalDeleteFlag, \n\tPremiumTransactionHashKey, \n\tPremiumLoadSequence, \n\tDuplicateSequence, \n\tReinsuranceCoverageAKID, \n\tStatisticalCoverageAKID, \n\tPremiumTransactionKey, \n\tPMSFunctionCode, \n\tPremiumTransactionCode, \n\tPremiumTransactionEnteredDate, \n\tPremiumTransactionEffectiveDate, \n\tPremiumTransactionExpirationDate, \n\tPremiumTransactionBookedDate, \n\tPremiumTransactionAmount, \n\tFullTermPremium, \n\tPremiumType, \n\tReasonAmendedCode, \n\tOffsetOnsetCode, \n\tsup_premium_transaction_id, \n\tRatingCoverageAKId, \n\tDeductibleAmount, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPackageModificationAdjustmentFactor, \n\tPackageModificationAdjustmentGroupCode, \n\tIncreasedLimitFactor, \n\tIncreasedLimitGroupCode, \n\tYearBuilt, \n\tAgencyActualCommissionRate, \n\tBaseRate, \n\tConstructionCode, \n\tStateRatingEffectiveDate, \n\tIndividualRiskPremiumModification, \n\tWindCoverageFlag, \n\tDeductibleBasis, \n\tExposureBasis, \n\tTransactionCreatedUserId, \n\tServiceCentreName, \n\tNumberOfEmployee3\n\tFROM Union\n\tWHERE ISNULL(lkp_PolicyNumber)\n),\nSEQ_PremiumTransactionAKID AS (\n\tCREATE SEQUENCE SEQ_PremiumTransactionAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_AKID AS (\n\tSELECT\n\tSEQ_PremiumTransactionAKID.NEXTVAL,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tLogicalIndicator,\n\tLogicalDeleteFlag,\n\tPremiumTransactionHashKey,\n\tPremiumLoadSequence,\n\tDuplicateSequence,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tPremiumTransactionKey,\n\tPMSFunctionCode,\n\tPremiumTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPremiumTransactionAmount,\n\tFullTermPremium,\n\tPremiumType,\n\tReasonAmendedCode,\n\tOffsetOnsetCode,\n\tsup_premium_transaction_id,\n\tRatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\t0.00 AS Exposure,\n\tNumberOfEmployee3,\n\t'N/A' AS NegateRestateCode,\n\t0 AS DeclaredEventFlag\n\tFROM FIL_Exist\n),\nPremiumTransaction_Insert AS (\n\tINSERT INTO PremiumTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, PremiumTransactionHashKey, PremiumLoadSequence, DuplicateSequence, PremiumTransactionAKID, ReinsuranceCoverageAKID, StatisticalCoverageAKID, PremiumTransactionKey, PMSFunctionCode, PremiumTransactionCode, PremiumTransactionEnteredDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionBookedDate, PremiumTransactionAmount, FullTermPremium, PremiumType, ReasonAmendedCode, OffsetOnsetCode, SupPremiumTransactionCodeId, RatingCoverageAKId, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, IndividualRiskPremiumModification, WindCoverageFlag, DeductibleBasis, ExposureBasis, TransactionCreatedUserId, ServiceCentreName, Exposure, NumberOfEmployee, NegateRestateCode, WrittenExposure, DeclaredEventFlag)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tLOGICALINDICATOR, \n\tLOGICALDELETEFLAG, \n\tPREMIUMTRANSACTIONHASHKEY, \n\tPREMIUMLOADSEQUENCE, \n\tDUPLICATESEQUENCE, \n\tNEXTVAL AS PREMIUMTRANSACTIONAKID, \n\tREINSURANCECOVERAGEAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tPREMIUMTRANSACTIONKEY, \n\tPMSFUNCTIONCODE, \n\tPREMIUMTRANSACTIONCODE, \n\tPREMIUMTRANSACTIONENTEREDDATE, \n\tPREMIUMTRANSACTIONEFFECTIVEDATE, \n\tPREMIUMTRANSACTIONEXPIRATIONDATE, \n\tPREMIUMTRANSACTIONBOOKEDDATE, \n\tPREMIUMTRANSACTIONAMOUNT, \n\tFULLTERMPREMIUM, \n\tPREMIUMTYPE, \n\tREASONAMENDEDCODE, \n\tOFFSETONSETCODE, \n\tsup_premium_transaction_id AS SUPPREMIUMTRANSACTIONCODEID, \n\tRATINGCOVERAGEAKID, \n\tDEDUCTIBLEAMOUNT, \n\tEXPERIENCEMODIFICATIONFACTOR, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tPACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tINCREASEDLIMITFACTOR, \n\tINCREASEDLIMITGROUPCODE, \n\tYEARBUILT, \n\tAGENCYACTUALCOMMISSIONRATE, \n\tBASERATE, \n\tCONSTRUCTIONCODE, \n\tSTATERATINGEFFECTIVEDATE, \n\tINDIVIDUALRISKPREMIUMMODIFICATION, \n\tWINDCOVERAGEFLAG, \n\tDEDUCTIBLEBASIS, \n\tEXPOSUREBASIS, \n\tTRANSACTIONCREATEDUSERID, \n\tSERVICECENTRENAME, \n\tEXPOSURE, \n\tNumberOfEmployee3 AS NUMBEROFEMPLOYEE, \n\tNEGATERESTATECODE, \n\tExposure AS WRITTENEXPOSURE, \n\tDECLAREDEVENTFLAG\n\tFROM EXP_AKID\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}