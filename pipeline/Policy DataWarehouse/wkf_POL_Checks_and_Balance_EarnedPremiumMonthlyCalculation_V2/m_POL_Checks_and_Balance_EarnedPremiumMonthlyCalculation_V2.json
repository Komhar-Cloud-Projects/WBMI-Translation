{
    "name": "m_POL_Checks_and_Balance_EarnedPremiumMonthlyCalculation_V2",
    "properties": {
        "activities": [
            {
                "name": "m_POL_Checks_and_Balance_EarnedPremiumMonthlyCalcula_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_EarnedPremiumMonthlyCalculation AS (\n\tIF OBJECT_ID('tempdb.dbo.#EPM', 'U') IS NOT NULL\r\n\tdrop table #EPM;\r\n\tIF OBJECT_ID('tempdb.dbo.#WEPM', 'U') IS NOT NULL\r\n\tdrop table #WEPM;\r\n\tIF OBJECT_ID('tempdb.dbo.#WFAM', 'U') IS NOT NULL\r\n\tdrop table #WFAM;\r\n\tIF OBJECT_ID('tempdb.dbo.#PM', 'U') IS NOT NULL\r\n\tdrop table #PM;\r\n\tIF OBJECT_ID('tempdb.dbo.#EPMData', 'U') IS NOT NULL\r\n\tdrop table #EPMData;\r\n\tIF OBJECT_ID('tempdb.dbo.#EPData', 'U') IS NOT NULL\r\n\tdrop table #EPData;\r\n\t\r\n\t\r\n\tDeclare @RunDate as datetime\r\n\t\r\n\tset @RunDate=dateadd(ss,-1,dateadd(MM,Datediff(MM,0,getdate())+@{pipeline().parameters.NO_OF_MONTHS},0));\r\n\t\r\n\t\r\n\t\r\n\tselect\r\n\tA.PolicyKey,A.PolicyAKID,A.StatisticalCoverageAKID,A.RatingCoverageAKId,ProductCode,A.PremiumMasterCalculationPKID,PremiumTransactionExpirationDate,A.rundate,sum(A.EarnedPremium) EarnedPremium,sum(A.UnearnedPremium) UnearnedPremium,PremiumType,PremiumTransactionEffectiveDate\r\n\tinto #EPM\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.EarnedPremiumMonthlyCalculation A\r\n\twhere RunDate=@RunDate\r\n\tgroup by A.PolicyKey,A.PolicyAKID,A.StatisticalCoverageAKID,A.RatingCoverageAKId,ProductCode,A.PremiumMasterCalculationPKID,PremiumTransactionExpirationDate,A.rundate,PremiumType,PremiumTransactionEffectiveDate\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tselect WorkEarnedPremiumCoverageMonthlyID,StatisticalCoverageAkid,RatingCoverageAKId,MinimumPremium,PremiumType,RunDate,StatisticalCoverageCancellationDate, PolicyAKID \r\n\tinto #WEPM\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkEarnedPremiumCoverageMonthly B\r\n\twhere RunDate=@RunDate\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tselect WorkFirstAuditId,PolicyKey,StatisticalCoverageAKID,PremiumMasterCalculationID,RatingCoverageAKId,PremiumMasterPremiumType,Rundate,PolicyAKID \r\n\tinto #WFAM\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkFirstAudit A\r\n\twhere RunDate=@RunDate\r\n\t\r\n\t\r\n\t\r\n\tselect PremiumMasterCalculationID,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterPremium,PremiumMasterPremiumType,PremiumMasterRundate, PolicyAKID\r\n\tinto #PM\r\n\t from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation A\r\n\twhere PremiumMasterRunDate<=@RunDate\r\n\tand exists (select 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.EarnedPremiumMonthlyCalculation B where RunDate=@RunDate and A.PremiumMasterCalculationID=B.PremiumMasterCalculationPKID)\r\n\t\r\n\t\r\n\tselect A.PolicyKey,A.PolicyAKID,A.StatisticalCoverageAKID,A.RatingCoverageAKId,A.ProductCode,A.PremiumMasterCalculationPKID,A.PremiumType,A.rundate,A.EarnedPremium,A.UnearnedPremium,\r\n\tC.PremiumMasterPremium,B.MinimumPremium,WorkFirstAuditId,WorkEarnedPremiumCoverageMonthlyID,A.PremiumTransactionEffectiveDate \r\n\tinto #EPMData\r\n\tfrom #EPM A\r\n\tleft outer join #WEPM B\r\n\ton A.StatisticalCoverageAKID=B.StatisticalCoverageAKID\r\n\tand A.RatingCoverageAKId=B.RatingCoverageAKId\r\n\tand A.PolicyAKId=B.PolicyAKId\r\n\tand A.PremiumType=B.PremiumType\r\n\tand A.RunDate=B.RunDate\r\n\tand convert(varchar(6),B.StatisticalCoverageCancellationDate,112)<=convert(varchar(6),A.RunDate,112)\r\n\tleft outer join #WFAM D\r\n\ton A.StatisticalCoverageAKID=D.StatisticalCoverageAKID\r\n\tand A.RatingCoverageAKId=D.RatingCoverageAKId\r\n\tand A.PolicyAKId=D.PolicyAKId\r\n\tand A.PremiumType=D.PremiumMasterPremiumType\r\n\tand A.RunDate=D.Rundate\r\n\tinner join #PM C\r\n\ton A.PremiumMasterCalculationPKID=C.PremiumMasterCalculationID\r\n\tand A.PremiumType=C.PremiumMasterPremiumType\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tselect A.PolicyKey,A.PolicyAKID,A.StatisticalCoverageAKID,A.RatingCoverageAKId,A.ProductCode,A.PremiumMasterCalculationPKID,A.PremiumType,A.rundate,A.EarnedPremium,A.UnearnedPremium,\r\n\tC.PremiumMasterPremium,A.PremiumTransactionExpirationDate\r\n\tinto #EPData\r\n\tfrom #EPM A\r\n\tinner join #PM C\r\n\ton A.PremiumMasterCalculationPKID=C.PremiumMasterCalculationID\r\n\tand A.PremiumType=C.PremiumMasterPremiumType\r\n\t\r\n\t\r\n\tinsert into WorkCheckandBalanceEarnedPremiumMonthlyCalculation\r\n\tselect getdate(),getdate(),PolicyKey,-1,-1,-1, ProductCode,-1,'1800-01-01',Rundate,EarnedPremium,UnearnedPremium,'','1800-01-01',-1,-1,'1800-01-01',-1,-1,' ',PremiumMasterPremium,'1800-01-01',TypeOfData\r\n\tfrom \r\n\t(\r\n\t\r\n\t--------------------Validation for WP-EP=UEP--------------------------------------------------------\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium, '1' TypeOfData\r\n\tfrom #EPMData\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving abs(PremiumMasterPremium-sum(EarnedPremium)-sum(UnearnedPremium))>0.01\r\n\t\r\n\tUNION\r\n\t\r\n\t--------------------Validation for Cancellation subjected to Audit----------------------------------\r\n\t\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium,'2' TypeOfData \r\n\tfrom #EPMData\r\n\twhere WorkFirstAuditId is not null\r\n\tand PremiumTransactionEffectiveDate<=RunDate\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium=sum(EarnedPremium) and sum(UnearnedPremium)<>0.0\r\n\t\r\n\tUNION\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium,'3' TypeOfData \r\n\tfrom #EPMData\r\n\twhere WorkFirstAuditId is not null\r\n\tand PremiumTransactionEffectiveDate<=RunDate\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium<>sum(EarnedPremium)\r\n\t\r\n\t\r\n\tUNION\r\n\t-----------------------------------------Validation for regular cancellation----------------------------\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium, '4' TypeOfData \r\n\tfrom #EPMData\r\n\twhere WorkFirstAuditId is null\r\n\tand WorkEarnedPremiumCoverageMonthlyID is not null\r\n\tand MinimumPremium<>0.0\r\n\tand PremiumTransactionEffectiveDate<=RunDate\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium=sum(EarnedPremium) and sum(UnearnedPremium)<>0.0\r\n\t\r\n\tUNION\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium, '5' TypeOfData \r\n\tfrom #EPMData\r\n\twhere WorkFirstAuditId is null\r\n\tand WorkEarnedPremiumCoverageMonthlyID is not null\r\n\tand MinimumPremium<>0.0\r\n\tand PremiumTransactionEffectiveDate<=RunDate\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumTransactionEffectiveDate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium<>sum(EarnedPremium)\r\n\t\r\n\t\r\n\tUNION\r\n\t\r\n\t---------------------------------Validation for regular expiration------------------------------------------\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium, '6' TypeOfData \r\n\tfrom #EPData\r\n\twhere convert(varchar(6),rundate,112)>=convert(varchar(6),PremiumTransactionExpirationDate,112)\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium=sum(EarnedPremium) and sum(UnearnedPremium)<>0.0\r\n\t\r\n\tUNION\r\n\t\r\n\t\r\n\tselect @RunDate as Rundate,PolicyKey,ProductCode,PremiumMasterPremium,sum(EarnedPremium) EarnedPremium, sum(UnearnedPremium) UnearnedPremium, '7' TypeOfData \r\n\tfrom #EPData\r\n\twhere convert(varchar(6),rundate,112)>=convert(varchar(6),PremiumTransactionExpirationDate,112)\r\n\tgroup by PolicyKey,StatisticalCoverageAKID,RatingCoverageAKId,PremiumMasterCalculationPKID,Rundate,PremiumMasterPremium,ProductCode\r\n\thaving PremiumMasterPremium<>sum(EarnedPremium)\r\n\t\r\n\t) a\n),\nWorkCheckAndBalanceEarnedPremiumMonthlyCalculation1 AS (\n\tTRUNCATE TABLE WorkCheckAndBalanceEarnedPremiumMonthlyCalculation;\n\tINSERT INTO WorkCheckAndBalanceEarnedPremiumMonthlyCalculation\n\t(PolicyKey)\n\tSELECT \n\tPOLICYKEY\n\tFROM SQ_EarnedPremiumMonthlyCalculation\n),\nSQ_WorkCheckAndBalanceEarnedPremiumMonthlyCalculation AS (\n\tselect rundate, policykey, productcode, \r\n\t CONVERT(money,PremiumMasterPremium,0) as PremiumMasterPremium,\r\n\t CONVERT(money,EarnedPremium,0) as EarnedPremium,\r\n\t  CONVERT(money,UnearnedPremium,0) as UnearnedPremium,\r\n\t  TypeofData from \r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkCheckandBalanceEarnedPremiumMonthlyCalculation\r\n\torder by 2,4\n),\nXP_SRC_DataCollect AS (\n\tSELECT\n\tRunDate,\n\tPolicyKey AS pol_key,\n\tProductCode,\n\tPremiumMasterPremium AS PremiumTransactionAmount,\n\tEarnedPremium,\n\tUnearnedPremium,\n\tTypeOfData AS I_Message,\n\t-- *INF*: DECODE(I_Message,\r\n\t-- '1','Sum of Earned Premium and UnEarned Premium is not equal to Written Premium',\r\n\t-- '2','Policy Life cycle end event: Cancellation subjected to audit: Earned Premium Eaquals Written but Unearned<>0',\r\n\t-- '3','Policy Life cycle end event: Cancellation subjected to audit: Earned Premium <> Written',\r\n\t-- '4','Policy Life cycle end event: Regular Cancellation: Earned Premium = Written but unearned premium<>0',\r\n\t-- '5','Policy Life cycle end event: Regular Cancellation: Earned Premium <> Written' ,\r\n\t-- '6','Policy Life cycle end event: Regular Expiration: Earned Premium = Written but unearned premium<>0',\r\n\t-- '7','Policy Life cycle end event: Regular Expiration: Earned Premium <> Written'\r\n\t-- )\n\tDECODE(I_Message,\n\t'1', 'Sum of Earned Premium and UnEarned Premium is not equal to Written Premium',\n\t'2', 'Policy Life cycle end event: Cancellation subjected to audit: Earned Premium Eaquals Written but Unearned<>0',\n\t'3', 'Policy Life cycle end event: Cancellation subjected to audit: Earned Premium <> Written',\n\t'4', 'Policy Life cycle end event: Regular Cancellation: Earned Premium = Written but unearned premium<>0',\n\t'5', 'Policy Life cycle end event: Regular Cancellation: Earned Premium <> Written',\n\t'6', 'Policy Life cycle end event: Regular Expiration: Earned Premium = Written but unearned premium<>0',\n\t'7', 'Policy Life cycle end event: Regular Expiration: Earned Premium <> Written') AS V_Message,\n\tV_Message AS O_Message\n\tFROM SQ_WorkCheckAndBalanceEarnedPremiumMonthlyCalculation\n),\nLKP_Product AS (\n\tSELECT\n\tProductDescription,\n\tIN_ProductCode,\n\tProductCode\n\tFROM (\n\t\tSELECT \n\t\t\tProductDescription,\n\t\t\tIN_ProductCode,\n\t\t\tProductCode\n\t\tFROM Product\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ProductCode ORDER BY ProductDescription DESC) = 1\n),\nXP_GetLKP_Values AS (\n\tSELECT\n\tXP_SRC_DataCollect.pol_key,\n\tLKP_Product.ProductDescription,\n\t-- *INF*: IIF(ISNULL(ProductDescription),'',ProductDescription)\n\tIFF(ProductDescription IS NULL, '', ProductDescription) AS v_ProductDescription,\n\tXP_SRC_DataCollect.PremiumTransactionAmount,\n\tXP_SRC_DataCollect.EarnedPremium,\n\tXP_SRC_DataCollect.UnearnedPremium,\n\tXP_SRC_DataCollect.O_Message AS Message,\n\tXP_SRC_DataCollect.RunDate\n\tFROM XP_SRC_DataCollect\n\tLEFT JOIN LKP_Product\n\tON LKP_Product.ProductCode = XP_SRC_DataCollect.ProductCode\n),\nAGG_Detail AS (\n\tSELECT\n\tpol_key, \n\tProductDescription, \n\tPremiumTransactionAmount, \n\tTO_CHAR(SUM(PremiumTransactionAmount)) AS O_PremiumTransactionAmount, \n\tEarnedPremium, \n\tTO_CHAR(SUM(EarnedPremium)) AS O_EarnedPremium, \n\tUnearnedPremium, \n\tTO_CHAR(SUM(UnearnedPremium)) AS O_UnearnedPremium, \n\tTO_CHAR(SUM(PremiumTransactionAmount) - sum(EarnedPremium)) AS DIFF, \n\tMessage, \n\tRunDate\n\tFROM XP_GetLKP_Values\n\tGROUP BY pol_key, ProductDescription, Message\n),\nEXP_Format_Email_Message AS (\n\tSELECT\n\tpol_key,\n\tMessage,\n\tProductDescription AS i_ProductDescription,\n\tO_PremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tO_EarnedPremium AS i_EarnedPremium,\n\tO_UnearnedPremium AS i_UnearnedPremium,\n\tDIFF,\n\tRunDate AS i_RunDate,\n\t'Policy: '\r\n || pol_key\r\n || ' Product Description: '\r\n || i_ProductDescription\r\n || ' Written Premium: '\r\n || i_PremiumTransactionAmount\r\n || ' Earned Premium: '\r\n || i_EarnedPremium\r\n || ' Difference: '\r\n || DIFF\t\r\n || ' UnEarned Premium: '\r\n || i_UnearnedPremium AS v_policy_info,\n\tv_row_count AS v_row_count_temp,\n\t@{pipeline().parameters.EMAIL_ADDRESS} AS email_address,\n\t-- *INF*: TO_CHAR(i_RunDate) || '  ' || @{pipeline().parameters.EMAIL_SUBJECT}\n\tTO_CHAR(i_RunDate) || '  ' || @{pipeline().parameters.EMAIL_SUBJECT} AS email_subject,\n\tv_row_count_temp + 1 AS v_row_count,\n\t-- *INF*: '</table>' ||  CHR(10) ||'<br></br>' || CHR(10) ||   '<table width=\"100%\" style=\"border-collapse: collapse\" bordercolor=\"#111111\" cellpadding=\"3\" cellspacing=\"0\">' || CHR(10) ||\r\n\t-- '\t<tr><td width=\"50\"><b><font face=\"Arial\" size=\"5\">Details</font></b></td></tr>' || CHR(10) \n\t'</table>' || CHR(10) || '<br></br>' || CHR(10) || '<table width=\"100%\" style=\"border-collapse: collapse\" bordercolor=\"#111111\" cellpadding=\"3\" cellspacing=\"0\">' || CHR(10) || '\t<tr><td width=\"50\"><b><font face=\"Arial\" size=\"5\">Details</font></b></td></tr>' || CHR(10) AS v_email_body_header,\n\t-- *INF*: '\t<tr><td width=\"100\"><font face=\"Arial\" size=\"2\">' || Message || ':' || '</font></td>' ||CHR(10)\r\n\t--  || '<td width=\"200\"><font face=\"Arial\" size=\"2\">' || v_policy_info || '</font></td></tr>' || CHR(10)\n\t'\t<tr><td width=\"100\"><font face=\"Arial\" size=\"2\">' || Message || ':' || '</font></td>' || CHR(10) || '<td width=\"200\"><font face=\"Arial\" size=\"2\">' || v_policy_info || '</font></td></tr>' || CHR(10) AS v_email_body_content,\n\t-- *INF*: IIF(v_row_count = 1,\r\n\t-- \tv_email_body_header || CHR(10) || v_email_body_content,\r\n\t-- \tv_email_body_content)\n\tIFF(v_row_count = 1, v_email_body_header || CHR(10) || v_email_body_content, v_email_body_content) AS v_email_body,\n\tv_email_body AS out_email_body,\n\t-- *INF*: IIF(v_row_count = 1, 'C','D')\n\tIFF(v_row_count = 1, 'C', 'D') AS sort_indicator\n\tFROM AGG_Detail\n),\nAGG_Distinct_Email_Address_Subject AS (\n\tSELECT\n\temail_address, \n\temail_subject\n\tFROM EXP_Format_Email_Message\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY email_address, email_subject ORDER BY NULL) = 1\n),\nemail_subject AS (\n\tINSERT INTO email_subject\n\t(FIELD1)\n\tSELECT \n\temail_subject AS FIELD1\n\tFROM AGG_Distinct_Email_Address_Subject\n),\nSRT_ErrorMessage AS (\n\tSELECT\n\tMessage, \n\tpol_key\n\tFROM XP_GetLKP_Values\n\tORDER BY Message ASC, pol_key ASC\n),\nAGG_PolicyCount AS (\n\tSELECT\n\tpol_key, \n\tMessage, \n\tTO_CHAR(count(pol_key)) AS PolicyCount\n\tFROM SRT_ErrorMessage\n\tGROUP BY Message\n),\nEXP_Format_Email_Message1 AS (\n\tSELECT\n\tMessage,\n\tPolicyCount,\n\tv_row_count AS v_row_count_temp,\n\tv_row_count_temp + 1 AS v_row_count,\n\t-- *INF*: '<table width=\"100%\" style=\"border-collapse: collapse\" bordercolor=\"#111111\" cellpadding=\"3\" cellspacing=\"0\">' || CHR(10) ||\r\n\t-- '\t<tr><td width=\"50\"><b><font face=\"Arial\" size=\"5\">Summary</font></b></td></tr>' || CHR(10)\n\t'<table width=\"100%\" style=\"border-collapse: collapse\" bordercolor=\"#111111\" cellpadding=\"3\" cellspacing=\"0\">' || CHR(10) || '\t<tr><td width=\"50\"><b><font face=\"Arial\" size=\"5\">Summary</font></b></td></tr>' || CHR(10) AS v_email_body_header,\n\t-- *INF*: '\t<tr><td width=\"150\"><font face=\"Arial\" size=\"2\">' || Message||':     ' ||   'Count of Policies: '||PolicyCount || '</font></td></tr>' || CHR(10)\n\t'\t<tr><td width=\"150\"><font face=\"Arial\" size=\"2\">' || Message || ':     ' || 'Count of Policies: ' || PolicyCount || '</font></td></tr>' || CHR(10) AS v_email_body_content,\n\t-- *INF*: IIF(v_row_count = 1,\r\n\t-- \tv_email_body_header || CHR(10) || v_email_body_content,\r\n\t-- \tv_email_body_content)\n\tIFF(v_row_count = 1, v_email_body_header || CHR(10) || v_email_body_content, v_email_body_content) AS v_email_body,\n\tv_email_body AS out_email_body,\n\t-- *INF*: IIF(v_row_count = 1,'A','B')\n\tIFF(v_row_count = 1, 'A', 'B') AS sort_indicator\n\tFROM AGG_PolicyCount\n),\nUnion AS (\n\tSELECT out_email_body, sort_indicator\n\tFROM EXP_Format_Email_Message1\n\tUNION\n\tSELECT out_email_body, sort_indicator\n\tFROM EXP_Format_Email_Message\n),\nSRT_POlicyCount_Details AS (\n\tSELECT\n\tout_email_body, \n\tsort_indicator\n\tFROM Union\n\tORDER BY sort_indicator ASC\n),\nemail_body AS (\n\tINSERT INTO email_body\n\t(FIELD1)\n\tSELECT \n\tout_email_body AS FIELD1\n\tFROM SRT_POlicyCount_Details\n),\nemail_address AS (\n\tINSERT INTO email_address\n\t(FIELD1)\n\tSELECT \n\temail_address AS FIELD1\n\tFROM AGG_Distinct_Email_Address_Subject\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "0"
            },
            "EMAIL_ADDRESS": {
                "type": "string",
                "defaultValue": "JBembenek@WBMI.com;NRemich@wbmi.com;JGreisch@wbmi.com; DRicke-Smith@wbmi.com;KLord@wbmi.com"
            },
            "EMAIL_SUBJECT": {
                "type": "string",
                "defaultValue": "Earned Premium Monthly validation"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}