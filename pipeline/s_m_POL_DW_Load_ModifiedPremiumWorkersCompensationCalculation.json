{
    "name": "s_m_POL_DW_Load_ModifiedPremiumWorkersCompensationCalculation",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_Load_ModifiedPremiumWorkersCompensationCalc_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PremiumMasterCalculation AS (\n\twith f as \r\n\t(SELECT [LineOfBusinessAbbreviation],\r\n\t       Ext_RatingStateCode AS [RatingStateCode],\r\n\t       [ClassCode] class_code,\r\n\t       [RatableClassIndicator] ratable_class_ind,\r\n\t       [SubjectToExperienceModificationClassIndicator] subject_to_exprnc_modfctn_class_ind,\r\n\t       [ExperienceModificationClassIndicator] exprnc_modfctn_class_ind,\r\n\t       [ScheduledModificationClassIndicator] sched_modfctn_class_ind,\r\n\t       [SurchargeClassIndicator] surchg_class_ind,\r\n\t       [OtherModificationClassIndicator] other_modfctn_class_ind\r\n\tFROM (SELECT [LineOfBusinessAbbreviation],\r\n\t             supState.state_abbrev Ext_RatingStateCode,\r\n\t             [RatingStateCode],\r\n\t             MIN([RatingStateCode]) OVER (PARTITION BY ClassCode, state_abbrev) MinRatingStateCode,\r\n\t             [ClassCode],\r\n\t             [RatableClassIndicator],\r\n\t             [SubjectToExperienceModificationClassIndicator],\r\n\t             [ExperienceModificationClassIndicator],\r\n\t             [ScheduledModificationClassIndicator],\r\n\t             [SurchargeClassIndicator],\r\n\t             [OtherModificationClassIndicator]\r\n\tFROM SupClassificationWorkersCompensation\r\n\tINNER JOIN (SELECT Allstate.state_abbrev AllAtateAbbrev,\r\n\t                   otherstate.state_abbrev\r\n\tFROM sup_state Allstate,\r\n\t     sup_state otherstate  --FULL OUTER JOIN\r\n\tWHERE Allstate.state_abbrev = '99'\r\n\tAND otherstate.state_abbrev != '99'\r\n\tUNION\r\n\tSELECT otherstate.state_abbrev allAtateAbbrev,\r\n\t       otherstate.state_abbrev\r\n\tFROM sup_state otherstate\r\n\tWHERE otherstate.state_abbrev != '99') AS supState\r\n\t  ON SupClassificationWorkersCompensation.RatingStateCode = supState.AllAtateAbbrev\r\n\tWHERE CurrentSnapshotFlag = 1) Extent_SupClassificationWorkersCompensation\r\n\tWHERE MinRatingStateCode = [RatingStateCode])\r\n\t----------------------------------------------------------------------\r\n\tSELECT *\r\n\tFROM (SELECT a.PremiumMasterCalculationID,\r\n\t             a.PremiumMasterPremium AS DirectWrittenPremium,\r\n\t             LEFT(b.ClassCode, 4) AS ClassCode,\r\n\t             f.ratable_class_ind,\r\n\t             f.subject_to_exprnc_modfctn_class_ind,\r\n\t             f.surchg_class_ind,\r\n\t             w.RunDate,\r\n\t             w.PolicyAKId,\r\n\t             w.RatingState,\r\n\t             w.SubjectDirectWrittenPremium,\r\n\t             w.ExperienceModifiedDirectWrittenPremium,\r\n\t             w.ScheduleModifiedDirectWrittenPremium,\r\n\t             w.OtherModifiedDirectWrittenPremium,\r\n\t             ROUND(SUM(CASE\r\n\t               WHEN z.TransactionCount > 0 THEN 0\r\n\t               WHEN f.ratable_class_ind = 'Y' AND\r\n\t                 f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t                 w.SubjectDirectWrittenPremium != 0 THEN a.PremiumMasterPremium * (w.OtherModifiedDirectWrittenPremium / w.SubjectDirectWrittenPremium)\r\n\t               WHEN f.ratable_class_ind = 'Y' AND\r\n\t                 f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t                 w.SubjectDirectWrittenPremium = 0 THEN a.PremiumMasterPremium + w.OtherModifiedDirectWrittenPremium / w.SubjectTransactionCount\r\n\t               WHEN f.ratable_class_ind = 'Y' AND\r\n\t                 f.subject_to_exprnc_modfctn_class_ind = 'N' THEN a.PremiumMasterPremium\r\n\t               ELSE 0\r\n\t             END)\r\n\t             OVER (PARTITION BY w.PolicyAKId, w.RatingState, w.RunDate), 4) AS RateableDirectWrittenPremium,\r\n\t             w.ClassifiedAdjustmentAmount +\r\n\t             ROUND(SUM(CASE\r\n\t               WHEN f.ratable_class_ind = 'N' AND\r\n\t                 f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t                 w.SubjectDirectWrittenPremium != 0 THEN a.PremiumMasterPremium * (w.OtherModifiedDirectWrittenPremium / w.SubjectDirectWrittenPremium)\r\n\t               WHEN f.ratable_class_ind = 'N' AND\r\n\t                 f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t                 w.SubjectDirectWrittenPremium = 0 THEN a.PremiumMasterPremium + w.OtherModifiedDirectWrittenPremium / w.SubjectTransactionCount\r\n\t               ELSE 0\r\n\t             END)\r\n\t             OVER (PARTITION BY w.PolicyAKId, w.RatingState, w.RunDate), 4) AS ClassifiedAdjustmentAmount,\r\n\t             w.SubjectTransactionCount,\r\n\t             w.RateableTransactionCount - ISNULL(z.TransactionCount, 0) RateableTransactionCount,\r\n\t             z.TransactionCount,\r\n\t             a.SourceSystemId,\r\n\ta.PremiumMasterRunDate as PremiumMasterRunDate\r\n\tFROM PremiumMasterCalculation a\r\n\tJOIN StatisticalCoverage b\r\n\t  ON a.StatisticalCoverageAKID = b.StatisticalCoverageAKID\r\n\tJOIN PolicyCoverage c\r\n\t  ON c.PolicyCoverageAKID = a.PolicyCoverageAKID\r\n\t  AND c.TypeBureauCode in ('WC','WP') \r\n\tJOIN RiskLocation d\r\n\t  ON d.RiskLocationAKID = a.RiskLocationAKID  \r\n\t@{pipeline().parameters.JOIN_POLICY_LIST}  \r\n\tJOIN --master_classification_sup \r\n\t\tf\r\n\t  ON f.class_code = LEFT(b.ClassCode, 4) and f.RatingStateCode=d.StateProvinceCode --add  RatingStateCode as part of join condition\r\n\tJOIN WorkRatingStatePremiumAggregation w\r\n\t  ON w.PolicyAKId = d.PolicyAKID\r\n\t  AND w.RatingState = d.StateProvinceCode\r\n\t  AND\r\n\t     CASE\r\n\t       WHEN a.PremiumMasterCoverageEffectiveDate >= a.PremiumTransactionEnteredDate THEN a.PremiumMasterCoverageEffectiveDate\r\n\t       ELSE a.PremiumTransactionEnteredDate\r\n\t     END <= w.RunDate\r\n\tLEFT JOIN WorkZeroedOutRatableClassCode z\r\n\t  ON z.PolicyAKId = d.PolicyAKID\r\n\t  AND z.RatingState = d.StateProvinceCode\r\n\t  AND z.ClassCode = LEFT(b.ClassCode, 4)\r\n\t  AND w.RunDate = z.RunDate\r\n\tWHERE a.CurrentSnapshotFlag = 1\r\n\tAND a.PremiumMasterPremiumType = 'D'\r\n\tAND a.PremiumMasterReasonAmendedCode NOT IN ('COL', 'CWO', 'Claw Back','CWB')\r\n\tAND a.SourceSystemId = 'PMS'\r\n\t@{pipeline().parameters.WHERE_CLAUSE_PMS}\r\n\tUNION ALL\r\n\tSELECT a.PremiumMasterCalculationID,\r\n\t       a.PremiumMasterPremium AS DirectWrittenPremium,\r\n\t       LEFT(b.ClassCode, 4) AS ClassCode,\r\n\t       f.ratable_class_ind,\r\n\t       f.subject_to_exprnc_modfctn_class_ind,\r\n\t       f.surchg_class_ind,\r\n\t       w.RunDate,\r\n\t       w.PolicyAKId,\r\n\t       w.RatingState,\r\n\t       w.SubjectDirectWrittenPremium,\r\n\t       w.ExperienceModifiedDirectWrittenPremium,\r\n\t       w.ScheduleModifiedDirectWrittenPremium,\r\n\t       w.OtherModifiedDirectWrittenPremium,\r\n\t       ROUND(SUM(CASE\r\n\t         WHEN z.TransactionCount > 0 THEN 0\r\n\t         WHEN f.ratable_class_ind = 'Y' AND\r\n\t           f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t           w.SubjectDirectWrittenPremium != 0 THEN a.PremiumMasterPremium * (w.OtherModifiedDirectWrittenPremium / w.SubjectDirectWrittenPremium)\r\n\t         WHEN f.ratable_class_ind = 'Y' AND\r\n\t           f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t           w.SubjectDirectWrittenPremium = 0 THEN a.PremiumMasterPremium + w.OtherModifiedDirectWrittenPremium / w.SubjectTransactionCount\r\n\t         WHEN f.ratable_class_ind = 'Y' AND\r\n\t           f.subject_to_exprnc_modfctn_class_ind = 'N' THEN a.PremiumMasterPremium\r\n\t         ELSE 0\r\n\t       END)\r\n\t       OVER (PARTITION BY w.PolicyAKId, w.RatingState, w.RunDate), 4) AS RateableDirectWrittenPremium,\r\n\t       w.ClassifiedAdjustmentAmount +\r\n\t       ROUND(SUM(CASE\r\n\t         WHEN f.ratable_class_ind = 'N' AND\r\n\t           f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t           w.SubjectDirectWrittenPremium != 0 THEN a.PremiumMasterPremium * (w.OtherModifiedDirectWrittenPremium / w.SubjectDirectWrittenPremium)\r\n\t         WHEN f.ratable_class_ind = 'N' AND\r\n\t           f.subject_to_exprnc_modfctn_class_ind = 'Y' AND\r\n\t           w.SubjectDirectWrittenPremium = 0 THEN a.PremiumMasterPremium + w.OtherModifiedDirectWrittenPremium / w.SubjectTransactionCount\r\n\t         ELSE 0\r\n\t       END)\r\n\t       OVER (PARTITION BY w.PolicyAKId, w.RatingState, w.RunDate), 4) AS ClassifiedAdjustmentAmount,\r\n\t       w.SubjectTransactionCount,\r\n\t       w.RateableTransactionCount - ISNULL(z.TransactionCount, 0) RateableTransactionCount,\r\n\t       z.TransactionCount,\r\n\t       a.SourceSystemId,\r\n\ta.PremiumMasterRunDate as PremiumMasterRunDate\r\n\tFROM PremiumMasterCalculation a\r\n\tJOIN RatingCoverage b\r\n\t  ON a.RatingCoverageAKID = b.RatingCoverageAKID\r\n\t  AND b.EffectiveDate = a.RatingCoverageEffectiveDate\r\n\tJOIN PolicyCoverage c\r\n\t  ON c.PolicyCoverageAKID = a.PolicyCoverageAKID\r\n\t  AND c.CurrentSnapshotFlag = 1\r\n\t  AND c.InsuranceLine = 'WorkersCompensation'\r\n\tJOIN RiskLocation d\r\n\t  ON d.RiskLocationAKID = a.RiskLocationAKID\r\n\t  AND d.CurrentSnapshotFlag = 1  \r\n\t@{pipeline().parameters.JOIN_POLICY_LIST}  \r\n\tJOIN --master_classification_sup \r\n\t\tf\r\n\t  ON f.class_code = LEFT(b.ClassCode, 4) and f.RatingStateCode=d.StateProvinceCode --add  RatingStateCode as part of join condition\r\n\tJOIN WorkRatingStatePremiumAggregation w\r\n\t  ON w.PolicyAKId = d.PolicyAKID\r\n\t  AND w.RatingState = d.StateProvinceCode\r\n\t  AND\r\n\t     CASE\r\n\t       WHEN a.PremiumMasterCoverageEffectiveDate >= a.PremiumTransactionEnteredDate THEN a.PremiumMasterCoverageEffectiveDate\r\n\t       ELSE a.PremiumTransactionEnteredDate\r\n\t     END <= w.RunDate\r\n\tLEFT JOIN WorkZeroedOutRatableClassCode z\r\n\t  ON z.PolicyAKId = d.PolicyAKID\r\n\t  AND z.RatingState = d.StateProvinceCode\r\n\t  AND z.ClassCode = LEFT(b.ClassCode, 4)\r\n\t  AND w.RunDate = z.RunDate\r\n\tWHERE a.CurrentSnapshotFlag = 1\r\n\tAND a.PremiumMasterPremiumType = 'D'\r\n\tAND a.PremiumMasterReasonAmendedCode NOT IN ('COL', 'CWO', 'Claw Back','CWB')\r\n\tAND a.SourceSystemId = 'DCT'\r\n\t@{pipeline().parameters.WHERE_CLAUSE_DCT}\r\n\t) a\r\n\tORDER BY PremiumMasterCalculationID, RunDate\n),\nEXP_ModifiedPremium_Calculate AS (\n\tSELECT\n\tPremiumMasterCalculationId,\n\tDirectWrittenPremium AS i_DirectWrittenPremium,\n\tClassCode,\n\tratable_class_ind AS i_ratable_class_ind,\n\tsubject_to_exprnc_modfctn_class_ind AS i_subject_to_exprnc_modfctn_class_ind,\n\tsurchg_class_ind AS i_surchg_class_ind,\n\tRunDate,\n\tPolicyAKId,\n\tRatingState,\n\tSubjectDirectWrittenPremium AS i_SubjectDirectWrittenPremium,\n\tExperienceModifiedDirectWrittenPremium AS i_ExperienceModifiedDirectWrittenPremium,\n\tScheduleModifiedDirectWrittenPremium AS i_ScheduleModifiedDirectWrittenPremium,\n\tOtherModifiedDirectWrittenPremium AS i_OtherModifiedDirectWrittenPremium,\n\tRateableDirectWrittenPremium AS i_RateableDirectWrittenPremium,\n\t-- *INF*: IIF(i_RateableDirectWrittenPremium<0.0010,0,i_RateableDirectWrittenPremium)\n\tIFF(i_RateableDirectWrittenPremium < 0.0010, 0, i_RateableDirectWrittenPremium) AS v_CorrectedRateableDirectWrittenPremium,\n\tClassifiedAdjustmentAmount AS i_ClassifiedAdjustmentAmount,\n\tSubjectTransactionCount AS i_SubjectTransactionCount,\n\tRateableTransactionCount AS i_RateableTransactionCount,\n\tTransactionCount AS i_TransactionCount,\n\tPremiumMasterRunDate AS i_PremiumMasterRunDate,\n\t-- *INF*:  i_RateableTransactionCount+IIF(ISNULL(i_TransactionCount),0,i_TransactionCount)\n\ti_RateableTransactionCount + IFF(i_TransactionCount IS NULL, 0, i_TransactionCount) AS v_TrueRateableCount,\n\t-- *INF*: IIF(PremiumMasterCalculationId=v_prev_PremiumMasterCalculationId,1,0)\n\tIFF(PremiumMasterCalculationId = v_prev_PremiumMasterCalculationId, 1, 0) AS v_GeneratedRecordIndicator,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',0,i_DirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', 0, i_DirectWrittenPremium) AS v_DirectWrittenPremium,\n\t-- *INF*: IIF(i_subject_to_exprnc_modfctn_class_ind='Y',i_DirectWrittenPremium,0)\n\tIFF(i_subject_to_exprnc_modfctn_class_ind = 'Y', i_DirectWrittenPremium, 0) AS v_SubjectDirectWrittenPremium,\n\t-- *INF*: ROUND(DECODE(TRUE,\r\n\t-- i_SubjectDirectWrittenPremium!=0,v_SubjectDirectWrittenPremium*i_ExperienceModifiedDirectWrittenPremium/i_SubjectDirectWrittenPremium,\r\n\t-- i_subject_to_exprnc_modfctn_class_ind='Y',v_SubjectDirectWrittenPremium+i_ExperienceModifiedDirectWrittenPremium/i_SubjectTransactionCount,\r\n\t-- 0),4)\n\tROUND(DECODE(TRUE,\n\t\ti_SubjectDirectWrittenPremium != 0, v_SubjectDirectWrittenPremium * i_ExperienceModifiedDirectWrittenPremium / i_SubjectDirectWrittenPremium,\n\t\ti_subject_to_exprnc_modfctn_class_ind = 'Y', v_SubjectDirectWrittenPremium + i_ExperienceModifiedDirectWrittenPremium / i_SubjectTransactionCount,\n\t\t0), 4) AS v_ExperienceModifiedDirectWrittenPremium,\n\t-- *INF*: ROUND(DECODE(TRUE,\r\n\t-- i_SubjectDirectWrittenPremium!=0,v_SubjectDirectWrittenPremium*i_ScheduleModifiedDirectWrittenPremium/i_SubjectDirectWrittenPremium,\r\n\t-- i_subject_to_exprnc_modfctn_class_ind='Y',v_SubjectDirectWrittenPremium+i_ScheduleModifiedDirectWrittenPremium/i_SubjectTransactionCount,\r\n\t-- 0),4)\n\tROUND(DECODE(TRUE,\n\t\ti_SubjectDirectWrittenPremium != 0, v_SubjectDirectWrittenPremium * i_ScheduleModifiedDirectWrittenPremium / i_SubjectDirectWrittenPremium,\n\t\ti_subject_to_exprnc_modfctn_class_ind = 'Y', v_SubjectDirectWrittenPremium + i_ScheduleModifiedDirectWrittenPremium / i_SubjectTransactionCount,\n\t\t0), 4) AS v_ScheduleModifiedDirectWrittenPremium,\n\t-- *INF*: ROUND(DECODE(TRUE,\r\n\t-- i_SubjectDirectWrittenPremium!=0,v_SubjectDirectWrittenPremium*i_OtherModifiedDirectWrittenPremium/i_SubjectDirectWrittenPremium,\r\n\t-- i_subject_to_exprnc_modfctn_class_ind='Y',v_SubjectDirectWrittenPremium+i_OtherModifiedDirectWrittenPremium/i_SubjectTransactionCount\r\n\t-- ,0),4)\n\tROUND(DECODE(TRUE,\n\t\ti_SubjectDirectWrittenPremium != 0, v_SubjectDirectWrittenPremium * i_OtherModifiedDirectWrittenPremium / i_SubjectDirectWrittenPremium,\n\t\ti_subject_to_exprnc_modfctn_class_ind = 'Y', v_SubjectDirectWrittenPremium + i_OtherModifiedDirectWrittenPremium / i_SubjectTransactionCount,\n\t\t0), 4) AS v_OtherModifiedDirectWrittenPremium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_ratable_class_ind='Y' AND i_subject_to_exprnc_modfctn_class_ind='Y',v_OtherModifiedDirectWrittenPremium,\r\n\t-- i_ratable_class_ind='Y' AND i_subject_to_exprnc_modfctn_class_ind='N',i_DirectWrittenPremium,\r\n\t-- 0)\n\tDECODE(TRUE,\n\t\ti_ratable_class_ind = 'Y' AND i_subject_to_exprnc_modfctn_class_ind = 'Y', v_OtherModifiedDirectWrittenPremium,\n\t\ti_ratable_class_ind = 'Y' AND i_subject_to_exprnc_modfctn_class_ind = 'N', i_DirectWrittenPremium,\n\t\t0) AS v_RateableDirectWrittenPremium,\n\t-- *INF*: ROUND(DECODE(TRUE,\r\n\t-- i_surchg_class_ind='Y',i_DirectWrittenPremium,\r\n\t-- i_ratable_class_ind='Y' AND NOT ISNULL(i_TransactionCount),v_RateableDirectWrittenPremium,\r\n\t-- i_ratable_class_ind='Y' AND v_CorrectedRateableDirectWrittenPremium!=0 AND i_RateableTransactionCount!=0,v_RateableDirectWrittenPremium*(i_ClassifiedAdjustmentAmount+v_CorrectedRateableDirectWrittenPremium)/v_CorrectedRateableDirectWrittenPremium,\r\n\t-- i_ratable_class_ind='Y' AND v_CorrectedRateableDirectWrittenPremium=0 AND i_RateableTransactionCount!=0,v_RateableDirectWrittenPremium+i_ClassifiedAdjustmentAmount/i_RateableTransactionCount,\r\n\t-- v_TrueRateableCount=0,i_DirectWrittenPremium,\r\n\t-- v_RateableDirectWrittenPremium),4)\n\tROUND(DECODE(TRUE,\n\t\ti_surchg_class_ind = 'Y', i_DirectWrittenPremium,\n\t\ti_ratable_class_ind = 'Y' AND NOT i_TransactionCount IS NULL, v_RateableDirectWrittenPremium,\n\t\ti_ratable_class_ind = 'Y' AND v_CorrectedRateableDirectWrittenPremium != 0 AND i_RateableTransactionCount != 0, v_RateableDirectWrittenPremium * ( i_ClassifiedAdjustmentAmount + v_CorrectedRateableDirectWrittenPremium ) / v_CorrectedRateableDirectWrittenPremium,\n\t\ti_ratable_class_ind = 'Y' AND v_CorrectedRateableDirectWrittenPremium = 0 AND i_RateableTransactionCount != 0, v_RateableDirectWrittenPremium + i_ClassifiedAdjustmentAmount / i_RateableTransactionCount,\n\t\tv_TrueRateableCount = 0, i_DirectWrittenPremium,\n\t\tv_RateableDirectWrittenPremium), 4) AS v_ClassifiedDirectWrittenPremium,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',v_SubjectDirectWrittenPremium-v_prev_SubjectDirectWrittenPremium,v_SubjectDirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', v_SubjectDirectWrittenPremium - v_prev_SubjectDirectWrittenPremium, v_SubjectDirectWrittenPremium) AS v_ChangeInSubjectDirectWrittenPremium,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',v_ExperienceModifiedDirectWrittenPremium-v_prev_ExperienceModifiedDirectWrittenPremium,v_ExperienceModifiedDirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', v_ExperienceModifiedDirectWrittenPremium - v_prev_ExperienceModifiedDirectWrittenPremium, v_ExperienceModifiedDirectWrittenPremium) AS v_ChangeInExperienceModifiedDirectWrittenPremium,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',v_ScheduleModifiedDirectWrittenPremium-v_prev_ScheduleModifiedDirectWrittenPremium,v_ScheduleModifiedDirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', v_ScheduleModifiedDirectWrittenPremium - v_prev_ScheduleModifiedDirectWrittenPremium, v_ScheduleModifiedDirectWrittenPremium) AS v_ChangeInScheduleModifiedDirectWrittenPremium,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',v_OtherModifiedDirectWrittenPremium-v_prev_OtherModifiedDirectWrittenPremium,v_OtherModifiedDirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', v_OtherModifiedDirectWrittenPremium - v_prev_OtherModifiedDirectWrittenPremium, v_OtherModifiedDirectWrittenPremium) AS v_ChangeInOtherModifiedDirectWrittenPremium,\n\t-- *INF*: IIF(v_GeneratedRecordIndicator='1',v_RateableDirectWrittenPremium-v_prev_RateableDirectWrittenPremium,v_RateableDirectWrittenPremium)\n\tIFF(v_GeneratedRecordIndicator = '1', v_RateableDirectWrittenPremium - v_prev_RateableDirectWrittenPremium, v_RateableDirectWrittenPremium) AS v_ChangeInRateableDirectWrittenPremium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_GeneratedRecordIndicator='1' AND v_TrueRateableCount!=0,v_ClassifiedDirectWrittenPremium-v_prev_ClassifiedDirectWrittenPremium,\r\n\t-- v_GeneratedRecordIndicator='1' AND v_TrueRateableCount=0,v_DirectWrittenPremium,\r\n\t-- v_ClassifiedDirectWrittenPremium)\n\tDECODE(TRUE,\n\t\tv_GeneratedRecordIndicator = '1' AND v_TrueRateableCount != 0, v_ClassifiedDirectWrittenPremium - v_prev_ClassifiedDirectWrittenPremium,\n\t\tv_GeneratedRecordIndicator = '1' AND v_TrueRateableCount = 0, v_DirectWrittenPremium,\n\t\tv_ClassifiedDirectWrittenPremium) AS v_ChangeInClassifiedDirectWrittenPremium,\n\tPremiumMasterCalculationId AS v_prev_PremiumMasterCalculationId,\n\tv_SubjectDirectWrittenPremium AS v_prev_SubjectDirectWrittenPremium,\n\tv_ExperienceModifiedDirectWrittenPremium AS v_prev_ExperienceModifiedDirectWrittenPremium,\n\tv_ScheduleModifiedDirectWrittenPremium AS v_prev_ScheduleModifiedDirectWrittenPremium,\n\tv_OtherModifiedDirectWrittenPremium AS v_prev_OtherModifiedDirectWrittenPremium,\n\tv_RateableDirectWrittenPremium AS v_prev_RateableDirectWrittenPremium,\n\tv_ClassifiedDirectWrittenPremium AS v_prev_ClassifiedDirectWrittenPremium,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tv_GeneratedRecordIndicator AS GeneratedRecordIndicator,\n\tv_DirectWrittenPremium AS DirectWrittenPremium,\n\tv_ChangeInSubjectDirectWrittenPremium AS SubjectDirectWrittenPremium,\n\tv_ChangeInExperienceModifiedDirectWrittenPremium AS ExperienceModifiedDirectWrittenPremium,\n\tv_ChangeInScheduleModifiedDirectWrittenPremium AS ScheduleModifiedDirectWrittenPremium,\n\tv_ChangeInOtherModifiedDirectWrittenPremium AS OtherModifiedDirectWrittenPremium,\n\tv_ChangeInRateableDirectWrittenPremium AS RateableDirectWrittenPremium,\n\tv_ChangeInClassifiedDirectWrittenPremium AS ClassifiedDirectWrittenPremium,\n\t-- *INF*: --ADD_TO_DATE(trunc(sysdate,'MM'),'MM', -1-(@{pipeline().parameters.NO_OF_MONTHS}))\r\n\t-- \r\n\t-- ADD_TO_DATE(trunc(sysdate,'MM'),'MM',@{pipeline().parameters.NO_OF_MONTHS})\n\tADD_TO_DATE(trunc(sysdate, 'MM'), 'MM', @{pipeline().parameters.NO_OF_MONTHS}) AS v_FirstDayOfRunMonth,\n\t-- *INF*: IIF(\r\n\t-- TO_DATE(@{pipeline().parameters.SELECTION_START_TS},'MM/DD/YYYY HH24:MI:SS') < TO_DATE('1800-01-02' , 'YYYY-MM-DD'), TO_DATE('1800-01-01' , 'YYYY-MM-DD'),\r\n\t-- v_FirstDayOfRunMonth)\n\tIFF(TO_DATE(@{pipeline().parameters.SELECTION_START_TS}, 'MM/DD/YYYY HH24:MI:SS') < TO_DATE('1800-01-02', 'YYYY-MM-DD'), TO_DATE('1800-01-01', 'YYYY-MM-DD'), v_FirstDayOfRunMonth) AS v_StartDate,\n\t-- *INF*: ADD_TO_DATE(v_FirstDayOfRunMonth,'MM',1)\n\tADD_TO_DATE(v_FirstDayOfRunMonth, 'MM', 1) AS V_EndDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_PremiumMasterRunDate<v_StartDate,0,\r\n\t-- i_PremiumMasterRunDate>=V_EndDate,0,\r\n\t-- v_DirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInSubjectDirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInExperienceModifiedDirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInScheduleModifiedDirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInOtherModifiedDirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInRateableDirectWrittenPremium!=0,1,\r\n\t-- v_ChangeInClassifiedDirectWrittenPremium!=0,1,\r\n\t-- 0)\n\tDECODE(TRUE,\n\t\ti_PremiumMasterRunDate < v_StartDate, 0,\n\t\ti_PremiumMasterRunDate >= V_EndDate, 0,\n\t\tv_DirectWrittenPremium != 0, 1,\n\t\tv_ChangeInSubjectDirectWrittenPremium != 0, 1,\n\t\tv_ChangeInExperienceModifiedDirectWrittenPremium != 0, 1,\n\t\tv_ChangeInScheduleModifiedDirectWrittenPremium != 0, 1,\n\t\tv_ChangeInOtherModifiedDirectWrittenPremium != 0, 1,\n\t\tv_ChangeInRateableDirectWrittenPremium != 0, 1,\n\t\tv_ChangeInClassifiedDirectWrittenPremium != 0, 1,\n\t\t0) AS FilterFlag\n\tFROM SQ_PremiumMasterCalculation\n),\nFIL_Records_ValidModifiedPremium AS (\n\tSELECT\n\tAuditId, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\tPolicyAKId, \n\tRatingState, \n\tClassCode, \n\tRunDate, \n\tPremiumMasterCalculationId, \n\tGeneratedRecordIndicator, \n\tDirectWrittenPremium, \n\tSubjectDirectWrittenPremium, \n\tExperienceModifiedDirectWrittenPremium, \n\tScheduleModifiedDirectWrittenPremium, \n\tOtherModifiedDirectWrittenPremium, \n\tRateableDirectWrittenPremium, \n\tClassifiedDirectWrittenPremium, \n\tFilterFlag\n\tFROM EXP_ModifiedPremium_Calculate\n\tWHERE FilterFlag=1\n),\nLKP_ModifiedPremiumWorkersCompensationCalculation AS (\n\tSELECT\n\tModifiedPremiumWorkersCompensationCalculationId,\n\tRunDate,\n\tPremiumMasterCalculationId\n\tFROM (\n\t\tSELECT \n\t\t\tModifiedPremiumWorkersCompensationCalculationId,\n\t\t\tRunDate,\n\t\t\tPremiumMasterCalculationId\n\t\tFROM ModifiedPremiumWorkersCompensationCalculation\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumMasterCalculationId,RunDate ORDER BY ModifiedPremiumWorkersCompensationCalculationId) = 1\n),\nEXP_TgtExists AS (\n\tSELECT\n\tFIL_Records_ValidModifiedPremium.AuditId,\n\tFIL_Records_ValidModifiedPremium.SourceSystemID,\n\tFIL_Records_ValidModifiedPremium.CreatedDate,\n\tFIL_Records_ValidModifiedPremium.ModifiedDate,\n\tFIL_Records_ValidModifiedPremium.PolicyAKId,\n\tFIL_Records_ValidModifiedPremium.RatingState,\n\tFIL_Records_ValidModifiedPremium.ClassCode,\n\tFIL_Records_ValidModifiedPremium.RunDate,\n\tFIL_Records_ValidModifiedPremium.PremiumMasterCalculationId,\n\tFIL_Records_ValidModifiedPremium.GeneratedRecordIndicator,\n\tFIL_Records_ValidModifiedPremium.DirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.SubjectDirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.ExperienceModifiedDirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.ScheduleModifiedDirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.OtherModifiedDirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.RateableDirectWrittenPremium,\n\tFIL_Records_ValidModifiedPremium.ClassifiedDirectWrittenPremium,\n\tLKP_ModifiedPremiumWorkersCompensationCalculation.ModifiedPremiumWorkersCompensationCalculationId AS lkp_ModifiedPremiumWorkersCompensationCalculationId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_ModifiedPremiumWorkersCompensationCalculationId),'NEW',\r\n\t-- 'NOCHANGE')\n\tDECODE(TRUE,\n\t\tlkp_ModifiedPremiumWorkersCompensationCalculationId IS NULL, 'NEW',\n\t\t'NOCHANGE') AS o_ChangeFlag\n\tFROM FIL_Records_ValidModifiedPremium\n\tLEFT JOIN LKP_ModifiedPremiumWorkersCompensationCalculation\n\tON LKP_ModifiedPremiumWorkersCompensationCalculation.PremiumMasterCalculationId = FIL_Records_ValidModifiedPremium.PremiumMasterCalculationId AND LKP_ModifiedPremiumWorkersCompensationCalculation.RunDate = FIL_Records_ValidModifiedPremium.RunDate\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tAuditId,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tPolicyAKId,\n\tRatingState,\n\tClassCode,\n\tRunDate,\n\tPremiumMasterCalculationId,\n\tGeneratedRecordIndicator,\n\tDirectWrittenPremium,\n\tSubjectDirectWrittenPremium,\n\tExperienceModifiedDirectWrittenPremium,\n\tScheduleModifiedDirectWrittenPremium,\n\tOtherModifiedDirectWrittenPremium,\n\tRateableDirectWrittenPremium,\n\tClassifiedDirectWrittenPremium,\n\to_ChangeFlag\n\tFROM EXP_TgtExists\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE o_ChangeFlag='NEW'),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE o_ChangeFlag='UPDATE'),\nModifiedPremiumWorkersCompensationCalculation_Insert AS (\n\tINSERT INTO ModifiedPremiumWorkersCompensationCalculation\n\t(AuditId, SourceSystemID, CreatedDate, ModifiedDate, RunDate, PremiumMasterCalculationId, GeneratedRecordIndicator, PolicyAKId, RatingState, ClassCode, DirectWrittenPremium, SubjectDirectWrittenPremium, ExperienceModifiedDirectWrittenPremium, ScheduleModifiedDirectWrittenPremium, OtherModifiedDirectWrittenPremium, RatableDirectWrittenPremium, ClassifiedDirectWrittenPremium)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tRUNDATE, \n\tPREMIUMMASTERCALCULATIONID, \n\tGENERATEDRECORDINDICATOR, \n\tPOLICYAKID, \n\tRATINGSTATE, \n\tCLASSCODE, \n\tDIRECTWRITTENPREMIUM, \n\tSUBJECTDIRECTWRITTENPREMIUM, \n\tEXPERIENCEMODIFIEDDIRECTWRITTENPREMIUM, \n\tSCHEDULEMODIFIEDDIRECTWRITTENPREMIUM, \n\tOTHERMODIFIEDDIRECTWRITTENPREMIUM, \n\tRateableDirectWrittenPremium AS RATABLEDIRECTWRITTENPREMIUM, \n\tCLASSIFIEDDIRECTWRITTENPREMIUM\n\tFROM RTR_Insert_Update_INSERT\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244834"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893408"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7543479"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 09:08:21"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/01/2023 23:13:55"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_CLAIM"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_CLAIM"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "-1"
            },
            "JOIN_POLICY_LIST": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_PMS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_DCT": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}