{
    "name": "s_m_POL_DIV_DW_LOAD_Dividend_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DIV_DW_LOAD_Dividend_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WBWCDividendStage AS (\n\tselect \r\n\t DividendPaid,\r\n\tpol_ak_id,\r\n\tTransactionDate,\r\n\tPrimaryLocationState,\r\n\tDividendType,\r\n\tDividendOptions,\r\n\tRatingPlan,\r\n\tPolicyNumber\r\n\t from (\r\n\t\r\n\tSELECT  \r\n\tRank() over(partition by pol.pol_ak_id,ISNULL(WBWCD.State,DCWCL.PrimaryLocationState) order by DCT.TransactionDate desc) rankperstate,\r\n\tcase when WBWCL.DividendPaidDate is not null then \r\n\tISNULL(WBWCL.DividendPremium,0) else 0 end DividendPaid,\r\n\tpol.pol_ak_id, \r\n\tDCT.TransactionDate, \r\n\tISNULL(WBWCD.State,DCWCL.PrimaryLocationState) as PrimaryLocationState, \r\n\tWBWCD.DividendType, \r\n\tWBWCD.DividendOptions, \r\n\tDCWCL.RatingPlan, \r\n\tDCP.PolicyNumber \r\n\tFROM DCPolicyStaging DCP\r\n\tjoin WBPolicyStaging WBP on DCP.SessionId=WBP.SessionId and DCP.PolicyId=WBP.PolicyId \r\n\tjoin DCTransactionStaging DCT on DCT.SessionId=DCP.SessionId  \r\n\t----and DCT.HistoryID=( select max(A.HistoryID) from DCTransactionStaging A where A.SessionId=DCT.SessionId) \r\n\tand DCT.State='Committed'\r\n\tjoin DCLineStaging DCL on WBP.SessionID = DCL.SessionID and WBP.PolicyID = DCL.PolicyID\r\n\tjoin DCWCLineStaging DCWCL on DCL.SessionID = DCWCL.SessionID and DCL.LineID = DCWCL.LineID\r\n\tjoin WBWCLineStage WBWCL on WBWCL.SessionId = DCWCL.SessionId and WBWCL.WCLineId = DCWCL.WC_LineId\r\n\tjoin WBWCDividendStage WBWCD on WBWCL.SessionId=WBWCD.SessionId  and WBWCD.WCLineId = WBWCL.WCLineId\r\n\tinner hash join @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\ton DCP.PolicyNumber=pol.pol_num \r\n\tand pol.pol_mod=WBP.PolicyVersionFormatted \r\n\tand pol.source_sys_id='DCT'\r\n\tand pol.crrnt_snpsht_flag=1\r\n\twhere not ((ISNULL(WBWCD.DividendType,'None')='None'\r\n\t or ISNULL(DividendOptions,'0')='0') and ISNULL(WBWCL.DividendPremium,0)=0) \r\n\t ) a where rankperstate=1\n),\nFLT_Remove_Invalid_Policies AS (\n\tSELECT\n\tDividendPaid, \n\tpol_ak_id, \n\tTransactionDate, \n\tPrimaryLocationState, \n\tDividendType, \n\tDividendOption, \n\tRatingPlan, \n\tPolicyNumber\n\tFROM SQ_WBWCDividendStage\n\tWHERE LENGTH(PolicyNumber)=7\n),\nEXP_GetValue AS (\n\tSELECT\n\tDividendPaid AS i_DividendPaid,\n\tpol_ak_id AS i_pol_ak_id,\n\tTransactionDate AS i_TransactionDate,\n\tPrimaryLocationState AS i_PrimaryLocationState,\n\tDividendType AS i_DividendType,\n\tDividendOption AS i_DividendOption,\n\tRatingPlan AS i_RatingPlan,\n\t-- *INF*: REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(IIF(LTRIM(RTRIM(i_DividendType))='None','N/A',LTRIM(RTRIM(i_DividendType)))),' ','')\n\tREGEXP_REPLACE(UDF_DEFAULT_VALUE_FOR_STRINGS(\n\t        IFF(\n\t            LTRIM(RTRIM(i_DividendType)) = 'None', 'N/A', LTRIM(RTRIM(i_DividendType))\n\t        )),' ','') AS v_DividendType,\n\t-- *INF*: REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_DividendOption))),' ','')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(IIF(LTRIM(RTRIM(i_DividendOption))='0','N/A',LTRIM(RTRIM(i_DividendOption)))),' ','')\r\n\t-- \r\n\t-- \r\n\t-- \n\tREGEXP_REPLACE(UDF_DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_DividendOption))),' ','') AS v_DividendOption,\n\ti_pol_ak_id AS o_pol_ak_id,\n\ti_DividendPaid AS o_DividendPaid,\n\t-- *INF*: TO_DATE(TO_CHAR(\r\n\t-- IIF(ISNULL(i_TransactionDate),TO_DATE('1800-01-01 00:00:00.000','YYYY-MM-DD HH24:MI:SS.MS'),i_TransactionDate)\r\n\t-- ,'YYYYMMDD'),'YYYYMMDD')\n\tTO_TIMESTAMP(TO_CHAR(\n\t        IFF(\n\t            i_TransactionDate IS NULL,\n\t            TO_TIMESTAMP('1800-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\t            i_TransactionDate\n\t        ), 'YYYYMMDD'), 'YYYYMMDD') AS o_TransactionDate,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_PrimaryLocationState)))\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_PrimaryLocationState))) AS o_PrimaryLocationState,\n\t-- *INF*: v_DividendType\r\n\t-- \r\n\t-- --IIF(v_DividendType!='FlatCapped',v_DividendType,'CappedFlat')\n\tv_DividendType AS o_DividendType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_DividendOption='0','N/A',\r\n\t-- IS_NUMBER(v_DividendOption),v_DividendOption||'%',\r\n\t-- REPLACESTR(0,v_DividendOption,'with','w/'))\n\tDECODE(\n\t    TRUE,\n\t    v_DividendOption = '0', 'N/A',\n\t    REGEXP_LIKE(v_DividendOption, '^[0-9]+$'), v_DividendOption || '%',\n\t    REGEXP_REPLACE(v_DividendOption,'with','w/','i')\n\t) AS o_DividendOption,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_RatingPlan)))\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_RatingPlan))) AS o_RatingPlan\n\tFROM FLT_Remove_Invalid_Policies\n),\nAGG_RemoveDuplicate AS (\n\tSELECT\n\to_pol_ak_id AS pol_ak_id,\n\to_DividendPaid AS DividendPaid,\n\to_TransactionDate AS TransactionDate,\n\to_PrimaryLocationState AS PrimaryLocationState,\n\to_DividendType AS DividendType,\n\to_DividendOption AS DividendOption,\n\to_RatingPlan AS RatingPlan\n\tFROM EXP_GetValue\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id, TransactionDate, PrimaryLocationState, DividendType, DividendOption, RatingPlan ORDER BY NULL) = 1\n),\nLKP_SupDividendType AS (\n\tSELECT\n\tSupDividendTypeID,\n\tPMSStateCode,\n\tDividendType,\n\tDividendPlan,\n\tStandardDividendType,\n\tStandardDividendPlan\n\tFROM (\n\t\tSELECT a.SupDividendTypeID as SupDividendTypeID,\r\n\t\treplace(a.StandardDividendType,'?','') as StandardDividendType, \r\n\t\treplace(replace(a.StandardDividendPlan,' ',''),'?','') as StandardDividendPlan,\r\n\t\ta.PMSStateCode as PMSStateCode, \r\n\t\treplace(a.DividendType,' ','') as DividendType, \r\n\t\treplace(replace(a.DividendPlan,' ',''),'?','') as DividendPlan\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupDividendType a\r\n\t\twhere a.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PMSStateCode,DividendType,DividendPlan ORDER BY SupDividendTypeID) = 1\n),\nEXP_PlanandType AS (\n\tSELECT\n\tAGG_RemoveDuplicate.pol_ak_id AS i_pol_ak_id,\n\tAGG_RemoveDuplicate.DividendPaid AS i_DividendPaid,\n\tAGG_RemoveDuplicate.TransactionDate AS i_TransactionDate,\n\tAGG_RemoveDuplicate.PrimaryLocationState AS i_PrimaryLocationState,\n\tLKP_SupDividendType.SupDividendTypeID AS lkp_SupDividendTypeID,\n\tLKP_SupDividendType.PMSStateCode AS lkp_PMSStateCode,\n\tLKP_SupDividendType.DividendType AS lkp_DividendType,\n\tLKP_SupDividendType.DividendPlan AS lkp_DividendPlan,\n\tLKP_SupDividendType.StandardDividendType AS lkp_StandardDividendType,\n\tLKP_SupDividendType.StandardDividendPlan AS lkp_StandardDividendPlan,\n\tAGG_RemoveDuplicate.RatingPlan AS i_RatingPlan,\n\ti_pol_ak_id AS o_PolicyAKId,\n\t-- *INF*: IIF(ISNULL(i_DividendPaid),0,i_DividendPaid)\n\tIFF(i_DividendPaid IS NULL, 0, i_DividendPaid) AS o_DividendAmount,\n\t-- *INF*: IIF(ISNULL(i_TransactionDate),TO_DATE('1800-01-01 00:00:00.000','YYYY-MM-DD HH24:MI:SS.MS'),i_TransactionDate)\n\tIFF(\n\t    i_TransactionDate IS NULL,\n\t    TO_TIMESTAMP('1800-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\t    i_TransactionDate\n\t) AS o_DividendTransactionEnteredDate,\n\t-- *INF*: IIF(ISNULL(i_PrimaryLocationState),'N/A',i_PrimaryLocationState)\r\n\t-- \r\n\t-- --IIF(ISNULL(lkp_PMSStateCode),'N/A',lkp_PMSStateCode)\n\tIFF(i_PrimaryLocationState IS NULL, 'N/A', i_PrimaryLocationState) AS o_StateCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_DividendPlan) or lkp_DividendPlan='N/A','No Dividend',\r\n\t-- lkp_DividendType='FlatVariable', 'Flat '||lkp_StandardDividendPlan||' Variable',\r\n\t-- lkp_DividendType='Flat',lkp_StandardDividendPlan||' Flat',\r\n\t-- lkp_StandardDividendType||' '||lkp_StandardDividendPlan\r\n\t-- )\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    lkp_DividendPlan IS NULL or lkp_DividendPlan = 'N/A', 'No Dividend',\n\t    lkp_DividendType = 'FlatVariable', 'Flat ' || lkp_StandardDividendPlan || ' Variable',\n\t    lkp_DividendType = 'Flat', lkp_StandardDividendPlan || ' Flat',\n\t    lkp_StandardDividendType || ' ' || lkp_StandardDividendPlan\n\t) AS v_DividendPlan,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- NOT ISNULL(lkp_DividendType),lkp_StandardDividendType,\r\n\t-- 'No Dividend')\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    lkp_DividendType IS NOT NULL, lkp_StandardDividendType,\n\t    'No Dividend'\n\t) AS v_DividendType,\n\t-- *INF*: IIF(ISNULL(v_DividendPlan),'N/A',v_DividendPlan)\r\n\t-- \n\tIFF(v_DividendPlan IS NULL, 'N/A', v_DividendPlan) AS o_DividendPlan,\n\t-- *INF*: IIF(ISNULL(v_DividendType),'N/A',v_DividendType)\r\n\t-- \n\tIFF(v_DividendType IS NULL, 'N/A', v_DividendType) AS o_DividendType,\n\t-- *INF*: IIF(ISNULL(lkp_SupDividendTypeID),-1,lkp_SupDividendTypeID)\n\tIFF(lkp_SupDividendTypeID IS NULL, - 1, lkp_SupDividendTypeID) AS o_SupDividendTypeId\n\tFROM AGG_RemoveDuplicate\n\tLEFT JOIN LKP_SupDividendType\n\tON LKP_SupDividendType.PMSStateCode = AGG_RemoveDuplicate.PrimaryLocationState AND LKP_SupDividendType.DividendType = AGG_RemoveDuplicate.DividendType AND LKP_SupDividendType.DividendPlan = AGG_RemoveDuplicate.DividendOption\n),\nLKP_sup_state AS (\n\tSELECT\n\tsup_state_id,\n\tstate_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_state_id,\n\t\t\tstate_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_state\n\t\tWHERE crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY state_code ORDER BY sup_state_id) = 1\n),\nEXP_sup_state AS (\n\tSELECT\n\tEXP_PlanandType.o_PolicyAKId AS PolicyAKId,\n\tEXP_PlanandType.o_DividendAmount AS DividendAmount,\n\tEXP_PlanandType.o_DividendTransactionEnteredDate AS DividendTransactionEnteredDate,\n\tEXP_PlanandType.o_StateCode AS StateCode,\n\tEXP_PlanandType.o_DividendPlan AS DividendPlan,\n\tEXP_PlanandType.o_DividendType AS DividendType,\n\tEXP_PlanandType.o_SupDividendTypeId AS SupDividendTypeId,\n\tLKP_sup_state.sup_state_id AS lkp_sup_state_id,\n\t-- *INF*: IIF(ISNULL(lkp_sup_state_id),-1,lkp_sup_state_id)\n\tIFF(lkp_sup_state_id IS NULL, - 1, lkp_sup_state_id) AS o_sup_state_id\n\tFROM EXP_PlanandType\n\tLEFT JOIN LKP_sup_state\n\tON LKP_sup_state.state_code = EXP_PlanandType.o_StateCode\n),\nLKP_Dividend AS (\n\tSELECT\n\tDividendId,\n\tDividendPayableAmount,\n\tDividendPlan,\n\tDividendType,\n\tSupStateId,\n\tSupDividendTypeId,\n\tDividendPaidAmount,\n\tPolicyAKId,\n\tStateCode\n\tFROM (\n\t\tSELECT \n\t\t\tDividendId,\n\t\t\tDividendPayableAmount,\n\t\t\tDividendPlan,\n\t\t\tDividendType,\n\t\t\tSupStateId,\n\t\t\tSupDividendTypeId,\n\t\t\tDividendPaidAmount,\n\t\t\tPolicyAKId,\n\t\t\tStateCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.Dividend\n\t\tWHERE Dividend.CurrentSnapshotFlag = 1\r\n\t\tAND Dividend.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,StateCode ORDER BY DividendId) = 1\n),\nEXP_MetaData AS (\n\tSELECT\n\tLKP_Dividend.DividendId AS lkp_DividendId,\n\tLKP_Dividend.DividendPayableAmount AS lkp_DividendPayableAmount,\n\tLKP_Dividend.DividendPlan AS lkp_DividendPlan,\n\tLKP_Dividend.DividendType AS lkp_DividendType,\n\tLKP_Dividend.SupStateId AS lkp_SupStateId,\n\tLKP_Dividend.SupDividendTypeId AS lkp_SupDividendTypeId,\n\tLKP_Dividend.DividendPaidAmount AS lkp_DividendPaidAmount,\n\tEXP_sup_state.PolicyAKId,\n\tEXP_sup_state.DividendAmount,\n\tEXP_sup_state.DividendTransactionEnteredDate,\n\t-- *INF*: ADD_TO_DATE(TRUNC(ADD_TO_DATE(DividendTransactionEnteredDate,'MM',1), 'MM'),'DD',-1)\r\n\t-- \n\tDATEADD(DAY,- 1,CAST(TRUNC(DATEADD(MONTH,1,DividendTransactionEnteredDate), 'MONTH') AS TIMESTAMP_NTZ(0))) AS DividendRunDate,\n\tEXP_sup_state.StateCode,\n\tEXP_sup_state.DividendPlan,\n\tEXP_sup_state.DividendType,\n\tEXP_sup_state.SupDividendTypeId,\n\tEXP_sup_state.o_sup_state_id AS sup_state_id,\n\tlkp_DividendId AS o_DividendId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_DividendId), 'NEW', \r\n\t-- lkp_DividendPayableAmount <>DividendAmount OR\r\n\t-- lkp_DividendPlan<>DividendPlan OR\r\n\t-- lkp_DividendType<>DividendType OR\r\n\t-- lkp_SupStateId<>sup_state_id OR\r\n\t-- lkp_SupDividendTypeId<>SupDividendTypeId OR\r\n\t-- lkp_DividendPaidAmount<>DividendAmount,'UPDATE',\r\n\t-- 'NOCHANGE')\n\tDECODE(\n\t    TRUE,\n\t    lkp_DividendId IS NULL, 'NEW',\n\t    lkp_DividendPayableAmount <> DividendAmount OR lkp_DividendPlan <> DividendPlan OR lkp_DividendType <> DividendType OR lkp_SupStateId <> sup_state_id OR lkp_SupDividendTypeId <> SupDividendTypeId OR lkp_DividendPaidAmount <> DividendAmount, 'UPDATE',\n\t    'NOCHANGE'\n\t) AS o_ChangeFlag,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_TIMESTAMP('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_TIMESTAMP('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate\n\tFROM EXP_sup_state\n\tLEFT JOIN LKP_Dividend\n\tON LKP_Dividend.PolicyAKId = EXP_sup_state.PolicyAKId AND LKP_Dividend.StateCode = EXP_sup_state.StateCode\n),\nRTR_Target AS (\n\tSELECT\n\to_ChangeFlag AS ChangeFlag,\n\to_DividendId AS DividendId,\n\tPolicyAKId,\n\tDividendAmount,\n\tDividendTransactionEnteredDate,\n\tDividendRunDate,\n\tStateCode,\n\tDividendPlan,\n\tDividendType,\n\tSupDividendTypeId,\n\tsup_state_id AS SupStateId,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate\n\tFROM EXP_MetaData\n),\nRTR_Target_NEW AS (SELECT * FROM RTR_Target WHERE ChangeFlag='NEW'),\nRTR_Target_UPDATE AS (SELECT * FROM RTR_Target WHERE ChangeFlag='UPDATE'),\nSEQ_DividendAKId AS (\n\tCREATE SEQUENCE SEQ_DividendAKId\n\tSTART = 1\n\tINCREMENT = 1;\n),\nDividend_INSERT AS (\n\tINSERT INTO Dividend\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, DividendAKId, PolicyAKId, DividendPayableAmount, DividendTransactionEnteredDate, DividendRunDate, StateCode, DividendPlan, DividendType, SupStateId, SupDividendTypeId, DividendPaidAmount)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSourceSystemID AS SOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tSEQ_DividendAKId.NEXTVAL AS DIVIDENDAKID, \n\tPOLICYAKID, \n\tDividendAmount AS DIVIDENDPAYABLEAMOUNT, \n\tDIVIDENDTRANSACTIONENTEREDDATE, \n\tDIVIDENDRUNDATE, \n\tSTATECODE, \n\tDIVIDENDPLAN, \n\tDIVIDENDTYPE, \n\tSUPSTATEID, \n\tSUPDIVIDENDTYPEID, \n\tDividendAmount AS DIVIDENDPAIDAMOUNT\n\tFROM RTR_Target_NEW\n),\nUPD_UPDATE AS (\n\tSELECT\n\tDividendId, \n\tPolicyAKId, \n\tDividendAmount, \n\tDividendTransactionEnteredDate, \n\tDividendRunDate, \n\tStateCode, \n\tDividendPlan, \n\tDividendType, \n\tSupDividendTypeId, \n\tSupStateId, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate\n\tFROM RTR_Target_UPDATE\n),\nDividend_UPDATE AS (\n\tMERGE INTO Dividend AS T\n\tUSING UPD_UPDATE AS S\n\tON T.DividendId = S.DividendId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditID = S.AuditID, T.ModifiedDate = S.ModifiedDate, T.DividendPayableAmount = S.DividendAmount, T.DividendPlan = S.DividendPlan, T.DividendType = S.DividendType, T.SupStateId = S.SupStateId, T.SupDividendTypeId = S.SupDividendTypeId, T.DividendPaidAmount = S.DividendAmount\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Policy DataWarehouse/"
        },
        "annotations": []
    }
}