{
    "name": "m_CLM_DW_LOAD_Claim_Medical_Plan_EXD_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Medical_Plan_EXD_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_clm_med_plan_type_stage AS (\n\tSELECT\n\t\tclm_med_plan_type_stage_id,\n\t\tcms_doc_cntl_num,\n\t\tinjured_party_id,\n\t\twbm_plan_ins_type,\n\t\tstate_venue,\n\t\tmed_oblig_to_clmt,\n\t\torm_terminate_dt,\n\t\tno_fault_ins_limit,\n\t\texhaust_limit_dt,\n\t\ttpoc_date1,\n\t\ttpoc_amount1,\n\t\ttpoc_fund_dlay_dt1,\n\t\ttpoc_date2,\n\t\ttpoc_amount2,\n\t\ttpoc_fund_dlay_dt2,\n\t\ttpoc_date3,\n\t\ttpoc_amount3,\n\t\ttpoc_fund_dlay_dt3,\n\t\ttpoc_date4,\n\t\ttpoc_amount4,\n\t\ttpoc_fund_dlay_dt4,\n\t\ttpoc_date5,\n\t\ttpoc_amount5,\n\t\ttpoc_fund_dlay_dt5,\n\t\textract_date,\n\t\tas_of_date,\n\t\trecord_count,\n\t\tsource_system_id,\n\t\tplan_type_deleted\n\tFROM clm_med_plan_type_stage\n),\nLKP_Claim_Medical_Ak_Id AS (\n\tSELECT\n\tclaim_med_ak_id,\n\tinjured_party_id\n\tFROM (\n\t\tSELECT claim_medical.claim_med_ak_id as claim_med_ak_id, claim_medical.injured_party_id as injured_party_id\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical\r\n\t\tWHERE crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY injured_party_id ORDER BY claim_med_ak_id) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tSQ_clm_med_plan_type_stage.cms_doc_cntl_num,\n\tSQ_clm_med_plan_type_stage.wbm_plan_ins_type,\n\tSQ_clm_med_plan_type_stage.state_venue,\n\tSQ_clm_med_plan_type_stage.med_oblig_to_clmt,\n\tSQ_clm_med_plan_type_stage.orm_terminate_dt,\n\tSQ_clm_med_plan_type_stage.no_fault_ins_limit,\n\tSQ_clm_med_plan_type_stage.exhaust_limit_dt,\n\tSQ_clm_med_plan_type_stage.plan_type_deleted,\n\tLKP_Claim_Medical_Ak_Id.claim_med_ak_id,\n\tcms_doc_cntl_num AS cms_doc_cntl_num1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(wbm_plan_ins_type)\r\n\t-- \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(wbm_plan_ins_type) AS wbm_plan_ins_type1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(state_venue)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(state_venue) AS state_venue1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(med_oblig_to_clmt)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(med_oblig_to_clmt) AS med_oblig_to_clmt1,\n\t-- *INF*: IIF(ISNULL(orm_terminate_dt), TO_DATE('1/1/1800','MM/DD/YYYY'), orm_terminate_dt)\r\n\t-- \n\tIFF(orm_terminate_dt IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), orm_terminate_dt) AS orm_terminate_dt1,\n\t-- *INF*: IIF(ISNULL(no_fault_ins_limit),0.00,no_fault_ins_limit)\n\tIFF(no_fault_ins_limit IS NULL, 0.00, no_fault_ins_limit) AS no_fault_ins_limit1,\n\t-- *INF*: IIF(ISNULL(exhaust_limit_dt), TO_DATE('1/1/1800','MM/DD/YYYY'), exhaust_limit_dt)\r\n\t-- \n\tIFF(exhaust_limit_dt IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), exhaust_limit_dt) AS exhaust_limit_dt1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(plan_type_deleted)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(plan_type_deleted) AS plan_type_deleted1\n\tFROM SQ_clm_med_plan_type_stage\n\tLEFT JOIN LKP_Claim_Medical_Ak_Id\n\tON LKP_Claim_Medical_Ak_Id.injured_party_id = SQ_clm_med_plan_type_stage.injured_party_id\n),\nLKP_Target AS (\n\tSELECT\n\tclaim_med_plan_ak_id,\n\tstate_venue,\n\tmed_obligation_to_claimant,\n\torm_termination_date,\n\tno_fault_ins_lmt,\n\texhaust_lmt_date,\n\tplan_type_deleted,\n\tclaim_med_ak_id,\n\twbmi_plan_ins_type\n\tFROM (\n\t\tSELECT claim_medical_plan.claim_med_plan_ak_id as claim_med_plan_ak_id, claim_medical_plan.state_venue as state_venue, claim_medical_plan.med_obligation_to_claimant as med_obligation_to_claimant, claim_medical_plan.orm_termination_date as orm_termination_date, claim_medical_plan.no_fault_ins_lmt as no_fault_ins_lmt, claim_medical_plan.exhaust_lmt_date as exhaust_lmt_date, claim_medical_plan.plan_type_deleted as plan_type_deleted, claim_medical_plan.claim_med_ak_id as claim_med_ak_id, claim_medical_plan.wbmi_plan_ins_type as wbmi_plan_ins_type \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_plan\r\n\t\tWHERE crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_med_ak_id,wbmi_plan_ins_type ORDER BY claim_med_plan_ak_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_Target.claim_med_plan_ak_id AS lkp_claim_med_plan_ak_id,\n\tLKP_Target.state_venue AS lkp_state_venue,\n\tLKP_Target.med_obligation_to_claimant AS lkp_med_obligation_to_claimant,\n\tLKP_Target.orm_termination_date AS lkp_orm_termination_date,\n\tLKP_Target.no_fault_ins_lmt AS lkp_no_fault_ins_lmt,\n\tLKP_Target.exhaust_lmt_date AS lkp_exhaust_lmt_date,\n\tLKP_Target.plan_type_deleted AS lkp_plan_type_deleted,\n\tEXP_Values.claim_med_ak_id,\n\tEXP_Values.cms_doc_cntl_num1,\n\tEXP_Values.wbm_plan_ins_type1,\n\tEXP_Values.state_venue1,\n\tEXP_Values.med_oblig_to_clmt1,\n\tEXP_Values.orm_terminate_dt1,\n\tEXP_Values.no_fault_ins_limit1,\n\tEXP_Values.exhaust_limit_dt1,\n\tEXP_Values.plan_type_deleted1,\n\t-- *INF*: iif(isnull(lkp_claim_med_plan_ak_id),'NEW',\t\r\n\t-- \tiif (\r\n\t-- (lkp_state_venue != state_venue1 OR\r\n\t-- lkp_med_obligation_to_claimant != med_oblig_to_clmt1 OR\r\n\t-- lkp_orm_termination_date != orm_terminate_dt1 OR\r\n\t-- lkp_no_fault_ins_lmt != no_fault_ins_limit1 OR\r\n\t-- lkp_exhaust_lmt_date != exhaust_limit_dt1 OR\r\n\t-- lkp_plan_type_deleted != plan_type_deleted1),\r\n\t--  'UPDATE','NOCHANGE'))\n\tIFF(lkp_claim_med_plan_ak_id IS NULL, 'NEW', IFF(( lkp_state_venue != state_venue1 OR lkp_med_obligation_to_claimant != med_oblig_to_clmt1 OR lkp_orm_termination_date != orm_terminate_dt1 OR lkp_no_fault_ins_lmt != no_fault_ins_limit1 OR lkp_exhaust_lmt_date != exhaust_limit_dt1 OR lkp_plan_type_deleted != plan_type_deleted1 ), 'UPDATE', 'NOCHANGE')) AS v_Changed_Flag,\n\t1 AS Crrnt_Snpsht_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date\n\tFROM EXP_Values\n\tLEFT JOIN LKP_Target\n\tON LKP_Target.claim_med_ak_id = EXP_Values.claim_med_ak_id AND LKP_Target.wbmi_plan_ins_type = EXP_Values.wbm_plan_ins_type1\n),\nFIL_Insert AS (\n\tSELECT\n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tChanged_Flag, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tlkp_claim_med_plan_ak_id, \n\tclaim_med_ak_id, \n\tcms_doc_cntl_num1, \n\twbm_plan_ins_type1, \n\tstate_venue1, \n\tmed_oblig_to_clmt1, \n\torm_terminate_dt1, \n\tno_fault_ins_limit1, \n\texhaust_limit_dt1, \n\tplan_type_deleted1\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_medical_plan AS (\n\tCREATE SEQUENCE SEQ_claim_medical_plan\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Insert AS (\n\tSELECT\n\tlkp_claim_med_plan_ak_id,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tChanged_Flag,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tSEQ_claim_medical_plan.NEXTVAL,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, lkp_claim_med_plan_ak_id)\n\tIFF(Changed_Flag = 'NEW', NEXTVAL, lkp_claim_med_plan_ak_id) AS claim_med_plan_ak_id_out,\n\tclaim_med_ak_id,\n\tcms_doc_cntl_num1,\n\twbm_plan_ins_type1,\n\tstate_venue1,\n\tmed_oblig_to_clmt1,\n\torm_terminate_dt1,\n\tno_fault_ins_limit1,\n\texhaust_limit_dt1,\n\tplan_type_deleted1\n\tFROM FIL_Insert\n),\nclaim_medical_plan_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_plan\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, claim_med_plan_ak_id, claim_med_ak_id, cms_document_cntl_num, wbmi_plan_ins_type, state_venue, med_obligation_to_claimant, orm_termination_date, no_fault_ins_lmt, exhaust_lmt_date, plan_type_deleted)\n\tSELECT \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tclaim_med_plan_ak_id_out AS CLAIM_MED_PLAN_AK_ID, \n\tCLAIM_MED_AK_ID, \n\tcms_doc_cntl_num1 AS CMS_DOCUMENT_CNTL_NUM, \n\twbm_plan_ins_type1 AS WBMI_PLAN_INS_TYPE, \n\tstate_venue1 AS STATE_VENUE, \n\tmed_oblig_to_clmt1 AS MED_OBLIGATION_TO_CLAIMANT, \n\torm_terminate_dt1 AS ORM_TERMINATION_DATE, \n\tno_fault_ins_limit1 AS NO_FAULT_INS_LMT, \n\texhaust_limit_dt1 AS EXHAUST_LMT_DATE, \n\tplan_type_deleted1 AS PLAN_TYPE_DELETED\n\tFROM EXP_Insert\n),\nSQ_claim_medical_plan AS (\n\tSELECT \r\n\ta.claim_med_plan_id, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date, \r\n\ta.claim_med_plan_ak_id \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_plan a\r\n\tWHERE \r\n\t a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND  \r\n\t EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_plan b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_med_plan_ak_id  = b.claim_med_plan_ak_id \r\n\t\t\tGROUP BY claim_med_plan_ak_id \r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_med_plan_ak_id, eff_from_date  DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_med_plan_id,\n\tclaim_med_plan_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_med_plan_ak_id = v_PREV_ROW_claim_med_plan_ak_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_med_plan_ak_id = v_PREV_ROW_claim_med_plan_ak_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_med_plan_ak_id AS v_PREV_ROW_claim_med_plan_ak_id,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_medical_plan\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_med_plan_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Occurrence AS (\n\tSELECT\n\tclaim_med_plan_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_medical_plan_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_plan AS T\n\tUSING UPD_Claim_Occurrence AS S\n\tON T.claim_med_plan_id = S.claim_med_plan_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604337"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}