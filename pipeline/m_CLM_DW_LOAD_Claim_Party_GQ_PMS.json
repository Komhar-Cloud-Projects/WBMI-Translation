{
    "name": "s_m_CLM_DW_LOAD_Claim_Party_GQ_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_GQ_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PIF_42GQ_ATY_stage AS (\n\tSELECT \r\n\tPIF_SYMBOL, PIF_POLICY_NUMBER, PIF_MODULE, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'ATTY') as IPFCGQ_REC_LENGTH, IPFCGQ_YEAR_OF_LOSS, IPFCGQ_MONTH_OF_LOSS, IPFCGQ_DAY_OF_LOSS, IPFCGQ_LOSS_OCCURENCE, IPFCGQ_LOSS_CLAIMANT, IPFCGQ_ATTORNEY_NAME_1 \r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_ATTORNEY_NAME_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_ATTORNEY_NAME_1)) <> 0 \r\n\tAND pif_42gq_aty_stage.logical_flag='0'\r\n\tUNION \r\n\tSELECT \r\n\tPIF_SYMBOL, PIF_POLICY_NUMBER, PIF_MODULE, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + CAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'PLAT') as IPFCGQ_REC_LENGTH, IPFCGQ_YEAR_OF_LOSS, IPFCGQ_MONTH_OF_LOSS, IPFCGQ_DAY_OF_LOSS, IPFCGQ_LOSS_OCCURENCE, IPFCGQ_LOSS_CLAIMANT, IPFCGQ_PLAINTIFF_1\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_PLAINTIFF_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_PLAINTIFF_1)) <> 0 \r\n\tAND pif_42gq_aty_stage.logical_flag='0'\r\n\tUNION \r\n\tSELECT \r\n\tPIF_SYMBOL, PIF_POLICY_NUMBER, PIF_MODULE, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + CAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'DEFD') as IPFCGQ_REC_LENGTH, IPFCGQ_YEAR_OF_LOSS, IPFCGQ_MONTH_OF_LOSS, IPFCGQ_DAY_OF_LOSS, IPFCGQ_LOSS_OCCURENCE, IPFCGQ_LOSS_CLAIMANT, IPFCGQ_DEFENDANT_1\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_DEFENDANT_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_DEFENDANT_1)) <> 0\r\n\tAND pif_42gq_aty_stage.logical_flag='0'\n),\nEXP_Values AS (\n\tSELECT\n\tIPFCGQ_REC_LENGTH AS CLIENT_ID,\n\tIPFCGQ_ATTORNEY_NAME_1 AS CICL_FULL_NM,\n\tPIF_SYMBOL,\n\tPIF_POLICY_NUMBER,\n\tPIF_MODULE,\n\tIPFCGQ_YEAR_OF_LOSS,\n\tIPFCGQ_MONTH_OF_LOSS,\n\tIPFCGQ_DAY_OF_LOSS,\n\tIPFCGQ_LOSS_OCCURENCE,\n\tIPFCGQ_LOSS_CLAIMANT\n\tFROM SQ_PIF_42GQ_ATY_stage\n),\nLKP_PIF_4578_STAGE AS (\n\tSELECT\n\tLOSS_1099_NUMBER,\n\tPIF_SYMBOL,\n\tPIF_POLICY_NUMBER,\n\tPIF_MODULE,\n\tLOSS_YEAR,\n\tLOSS_MONTH,\n\tLOSS_DAY,\n\tLOSS_OCCURENCE,\n\tLOSS_CLAIMANT\n\tFROM (\n\t\tSELECT \n\t\t\tLOSS_1099_NUMBER,\n\t\t\tPIF_SYMBOL,\n\t\t\tPIF_POLICY_NUMBER,\n\t\t\tPIF_MODULE,\n\t\t\tLOSS_YEAR,\n\t\t\tLOSS_MONTH,\n\t\t\tLOSS_DAY,\n\t\t\tLOSS_OCCURENCE,\n\t\t\tLOSS_CLAIMANT\n\t\tFROM PIF_4578_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PIF_SYMBOL,PIF_POLICY_NUMBER,PIF_MODULE,LOSS_YEAR,LOSS_MONTH,LOSS_DAY,LOSS_OCCURENCE,LOSS_CLAIMANT ORDER BY LOSS_1099_NUMBER DESC) = 1\n),\nEXP_Lkp_Values AS (\n\tSELECT\n\tEXP_Values.CLIENT_ID,\n\tEXP_Values.CICL_FULL_NM AS in_CICL_FULL_NM,\n\t-- *INF*: iif(isnull(in_CICL_FULL_NM),'N/A',\r\n\t--    iif(is_spaces(in_CICL_FULL_NM),'N/A',\r\n\t--     rtrim(in_CICL_FULL_NM)))\n\tIFF(in_CICL_FULL_NM IS NULL, 'N/A', IFF(is_spaces(in_CICL_FULL_NM), 'N/A', rtrim(in_CICL_FULL_NM))) AS CICL_FULL_NM,\n\t'N/A' AS CICL_FST_NM,\n\t'N/A' AS CICL_LST_NM,\n\t'N/A' AS CICL_MDL_NM,\n\t'N/A' AS NM_PFX,\n\t'N/A' AS NM_SFX,\n\t'N/A' AS CICA_ADR,\n\t'N/A' AS CICA_CIT_NM,\n\t'N/A' AS CICA_CTY,\n\t'N/A' AS ST_CD,\n\t'N/A' AS CICA_PST_CD,\n\t'N/A' AS ADR_TYP_CD,\n\tLKP_PIF_4578_STAGE.LOSS_1099_NUMBER AS in_CICA_TAX_ID,\n\t'N/A' AS CICA_TAX_SSN_ID,\n\t-- *INF*: 'N/A'\r\n\t-- --iif(isnull(in_CICA_TAX_ID),'N/A',   iif(is_spaces(in_CICA_TAX_ID),'N/A',    rtrim(in_CICA_TAX_ID)))\n\t'N/A' AS CICA_TAX_FED_ID,\n\t-- *INF*: TO_DATE('12/31/2100','MM/DD/YYYY')\r\n\t-- \n\tTO_DATE('12/31/2100', 'MM/DD/YYYY') AS BIRTH_DATE,\n\t'N/A' AS GENDER\n\tFROM EXP_Values\n\tLEFT JOIN LKP_PIF_4578_STAGE\n\tON LKP_PIF_4578_STAGE.PIF_SYMBOL = EXP_Values.PIF_SYMBOL AND LKP_PIF_4578_STAGE.PIF_POLICY_NUMBER = EXP_Values.PIF_POLICY_NUMBER AND LKP_PIF_4578_STAGE.PIF_MODULE = EXP_Values.PIF_MODULE AND LKP_PIF_4578_STAGE.LOSS_YEAR = EXP_Values.IPFCGQ_YEAR_OF_LOSS AND LKP_PIF_4578_STAGE.LOSS_MONTH = EXP_Values.IPFCGQ_MONTH_OF_LOSS AND LKP_PIF_4578_STAGE.LOSS_DAY = EXP_Values.IPFCGQ_DAY_OF_LOSS AND LKP_PIF_4578_STAGE.LOSS_OCCURENCE = EXP_Values.IPFCGQ_LOSS_OCCURENCE AND LKP_PIF_4578_STAGE.LOSS_CLAIMANT = EXP_Values.IPFCGQ_LOSS_CLAIMANT\n),\nLKP_Claim_Party AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_ak_id,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_addr,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tclaim_party_key\n\tFROM (\n\t\tSELECT a.claim_party_id as claim_party_id, \r\n\t\ta.claim_party_ak_id as claim_party_ak_id,\r\n\t\ta.claim_party_full_name as claim_party_full_name,\r\n\t\ta.claim_party_first_name as claim_party_first_name, \r\n\t\ta.claim_party_last_name as claim_party_last_name, \r\n\t\ta.claim_party_mid_name as claim_party_mid_name, \r\n\t\ta.claim_party_name_prfx as claim_party_name_prfx, \r\n\t\ta.claim_party_name_sfx as claim_party_name_sfx, \r\n\t\ta.claim_party_addr as claim_party_addr, \r\n\t\ta.claim_party_city as claim_party_city, \r\n\t\ta.claim_party_county as claim_party_county, \r\n\t\ta.claim_party_state as claim_party_state, \r\n\t\ta.claim_party_zip as claim_party_zip, \r\n\t\ta.addr_type as addr_type, \r\n\t\ta.tax_ssn_id as tax_ssn_id, \r\n\t\ta.tax_fed_id as tax_fed_id, \r\n\t\ta.claim_party_birthdate as claim_party_birthdate,\r\n\t\ta.claim_party_gndr as claim_party_gndr,\r\n\t\ta.claim_party_key as claim_party_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\t\tWHERE  a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND a.crrnt_snpsht_flag = 1\r\n\t\tORDER BY claim_party_key --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_Lkp_Values.CLIENT_ID,\n\tEXP_Lkp_Values.CICL_FULL_NM,\n\tEXP_Lkp_Values.CICL_FST_NM,\n\tEXP_Lkp_Values.CICL_LST_NM,\n\tEXP_Lkp_Values.CICL_MDL_NM,\n\tEXP_Lkp_Values.NM_PFX,\n\tEXP_Lkp_Values.NM_SFX,\n\tEXP_Lkp_Values.ADR_TYP_CD,\n\tEXP_Lkp_Values.CICA_ADR,\n\tEXP_Lkp_Values.CICA_CIT_NM,\n\tEXP_Lkp_Values.CICA_CTY,\n\tEXP_Lkp_Values.ST_CD,\n\tEXP_Lkp_Values.CICA_PST_CD,\n\tEXP_Lkp_Values.CICA_TAX_SSN_ID,\n\tEXP_Lkp_Values.CICA_TAX_FED_ID,\n\tEXP_Lkp_Values.BIRTH_DATE,\n\tEXP_Lkp_Values.GENDER,\n\tLKP_Claim_Party.claim_party_id AS lkp_claim_party_id,\n\tLKP_Claim_Party.claim_party_ak_id AS lkp_claim_party_ak_id,\n\tLKP_Claim_Party.claim_party_full_name AS lkp_claim_party_full_name,\n\tLKP_Claim_Party.claim_party_first_name AS lkp_claim_party_first_name,\n\tLKP_Claim_Party.claim_party_last_name AS lkp_claim_party_last_name,\n\tLKP_Claim_Party.claim_party_mid_name AS lkp_claim_party_mid_name,\n\tLKP_Claim_Party.claim_party_name_prfx AS lkp_claim_party_name_prfx,\n\tLKP_Claim_Party.claim_party_name_sfx AS lkp_claim_party_name_sfx,\n\tLKP_Claim_Party.claim_party_addr AS lkp_claimant_addr,\n\tLKP_Claim_Party.claim_party_city AS lkp_claimant_city,\n\tLKP_Claim_Party.claim_party_county AS lkp_claimant_county,\n\tLKP_Claim_Party.claim_party_state AS lkp_claimant_state,\n\tLKP_Claim_Party.claim_party_zip AS lkp_claimant_zip,\n\tLKP_Claim_Party.addr_type AS lkp_addr_type,\n\tLKP_Claim_Party.tax_ssn_id AS lkp_tax_ssn_id,\n\tLKP_Claim_Party.tax_fed_id AS lkp_tax_fed_id,\n\tLKP_Claim_Party.claim_party_birthdate AS lkp_claim_party_birthdate,\n\tLKP_Claim_Party.claim_party_gndr AS lkp_claim_party_gndr,\n\t'0' AS logical_flag_op,\n\t1 AS Crrnt_Snpsht_Flag,\n\t-- *INF*: iif(isnull(lkp_claim_party_id),'NEW',\r\n\t-- \tiif (\r\n\t-- \t(ltrim(rtrim(CICL_FULL_NM)) <> ltrim(rtrim(lkp_claim_party_full_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_FST_NM)) <> ltrim(rtrim(lkp_claim_party_first_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_LST_NM)) <> ltrim(rtrim(lkp_claim_party_last_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_MDL_NM)) <> ltrim(rtrim(lkp_claim_party_mid_name))) or\r\n\t-- \t(ltrim(rtrim(NM_PFX)) <> ltrim(rtrim(lkp_claim_party_name_prfx))) or\r\n\t-- \t(ltrim(rtrim(NM_SFX)) <> ltrim(rtrim(lkp_claim_party_name_sfx))) or\r\n\t-- \t(ltrim(rtrim(CICA_ADR)) <> ltrim(rtrim(lkp_claimant_addr) )) or\r\n\t-- \t(ltrim(rtrim(CICA_CTY)) <> ltrim(rtrim(lkp_claimant_city) )) or\r\n\t-- \t(ltrim(rtrim(CICA_CIT_NM)) <>  ltrim(rtrim(lkp_claimant_county))) or\r\n\t-- \t(ltrim(rtrim(ST_CD)) <> ltrim(rtrim(lkp_claimant_state))) or\r\n\t-- \t(ltrim(rtrim(CICA_PST_CD)) <> ltrim(rtrim(lkp_claimant_zip))) or\r\n\t--       (ltrim(rtrim(CICA_TAX_FED_ID)) <>  ltrim(rtrim(lkp_tax_fed_id))) or\r\n\t--        (ltrim(rtrim(CICA_TAX_SSN_ID)) <> ltrim(rtrim(lkp_tax_ssn_id))) or\r\n\t-- \t(BIRTH_DATE <> lkp_claim_party_birthdate) or\r\n\t--       (ltrim(rtrim(GENDER)) <>  ltrim(rtrim(lkp_claim_party_gndr))) or\r\n\t-- \t(ltrim(rtrim(ADR_TYP_CD)) <> ltrim(rtrim(lkp_addr_type))) ,\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(lkp_claim_party_id IS NULL, 'NEW', IFF(( ltrim(rtrim(CICL_FULL_NM)) <> ltrim(rtrim(lkp_claim_party_full_name)) ) OR ( ltrim(rtrim(CICL_FST_NM)) <> ltrim(rtrim(lkp_claim_party_first_name)) ) OR ( ltrim(rtrim(CICL_LST_NM)) <> ltrim(rtrim(lkp_claim_party_last_name)) ) OR ( ltrim(rtrim(CICL_MDL_NM)) <> ltrim(rtrim(lkp_claim_party_mid_name)) ) OR ( ltrim(rtrim(NM_PFX)) <> ltrim(rtrim(lkp_claim_party_name_prfx)) ) OR ( ltrim(rtrim(NM_SFX)) <> ltrim(rtrim(lkp_claim_party_name_sfx)) ) OR ( ltrim(rtrim(CICA_ADR)) <> ltrim(rtrim(lkp_claimant_addr)) ) OR ( ltrim(rtrim(CICA_CTY)) <> ltrim(rtrim(lkp_claimant_city)) ) OR ( ltrim(rtrim(CICA_CIT_NM)) <> ltrim(rtrim(lkp_claimant_county)) ) OR ( ltrim(rtrim(ST_CD)) <> ltrim(rtrim(lkp_claimant_state)) ) OR ( ltrim(rtrim(CICA_PST_CD)) <> ltrim(rtrim(lkp_claimant_zip)) ) OR ( ltrim(rtrim(CICA_TAX_FED_ID)) <> ltrim(rtrim(lkp_tax_fed_id)) ) OR ( ltrim(rtrim(CICA_TAX_SSN_ID)) <> ltrim(rtrim(lkp_tax_ssn_id)) ) OR ( BIRTH_DATE <> lkp_claim_party_birthdate ) OR ( ltrim(rtrim(GENDER)) <> ltrim(rtrim(lkp_claim_party_gndr)) ) OR ( ltrim(rtrim(ADR_TYP_CD)) <> ltrim(rtrim(lkp_addr_type)) ), 'UPDATE', 'NOCHANGE')) AS v_Changed_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date,\n\t'N/A' AS Out_Default_String,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS claim_party_ref_eff_from_date\n\tFROM EXP_Lkp_Values\n\tLEFT JOIN LKP_Claim_Party\n\tON LKP_Claim_Party.claim_party_key = EXP_Lkp_Values.CLIENT_ID\n),\nFIL_Insert AS (\n\tSELECT\n\tlkp_claim_party_ak_id, \n\tCLIENT_ID, \n\tCICL_FULL_NM, \n\tCICL_FST_NM, \n\tCICL_LST_NM, \n\tCICL_MDL_NM, \n\tNM_PFX, \n\tNM_SFX, \n\tADR_TYP_CD, \n\tCICA_ADR, \n\tCICA_CIT_NM, \n\tCICA_CTY, \n\tST_CD, \n\tCICA_PST_CD, \n\tCICA_TAX_SSN_ID, \n\tCICA_TAX_FED_ID, \n\tBIRTH_DATE, \n\tGENDER, \n\tlogical_flag_op, \n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tChanged_Flag, \n\tOut_Default_String, \n\tclaim_party_ref_eff_from_date\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_party AS (\n\tCREATE SEQUENCE SEQ_claim_party\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\tlkp_claim_party_ak_id,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, lkp_claim_party_ak_id)\n\tIFF(Changed_Flag = 'NEW', NEXTVAL, lkp_claim_party_ak_id) AS claim_party_ak_id,\n\tCLIENT_ID,\n\tCICL_FULL_NM,\n\tCICL_FST_NM,\n\tCICL_LST_NM,\n\tCICL_MDL_NM,\n\tNM_PFX,\n\tNM_SFX,\n\tADR_TYP_CD,\n\tCICA_ADR,\n\tCICA_CIT_NM,\n\tCICA_CTY,\n\tST_CD,\n\tCICA_PST_CD,\n\tCICA_TAX_SSN_ID,\n\tCICA_TAX_FED_ID,\n\tBIRTH_DATE,\n\tGENDER,\n\tlogical_flag_op,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tChanged_Flag,\n\tOut_Default_String,\n\tclaim_party_ref_eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2999','MM/DD/YYYY')\n\tTO_DATE('12/31/2999', 'MM/DD/YYYY') AS out_default_high_date,\n\tSEQ_claim_party.NEXTVAL\n\tFROM FIL_Insert\n),\nclaim_party_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party\n\t(claim_party_ak_id, claim_party_key, claim_party_full_name, claim_party_first_name, claim_party_last_name, claim_party_mid_name, claim_party_name_prfx, claim_party_name_sfx, claim_party_addr, claim_party_city, claim_party_county, claim_party_state, claim_party_zip, addr_type, tax_ssn_id, tax_fed_id, claim_party_birthdate, claim_party_gndr, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, ph_num, ph_extension, ph_type, lgl_ent_code, claim_party_ref_eff_from_date, claim_party_death_date)\n\tSELECT \n\tCLAIM_PARTY_AK_ID, \n\tCLIENT_ID AS CLAIM_PARTY_KEY, \n\tCICL_FULL_NM AS CLAIM_PARTY_FULL_NAME, \n\tCICL_FST_NM AS CLAIM_PARTY_FIRST_NAME, \n\tCICL_LST_NM AS CLAIM_PARTY_LAST_NAME, \n\tCICL_MDL_NM AS CLAIM_PARTY_MID_NAME, \n\tNM_PFX AS CLAIM_PARTY_NAME_PRFX, \n\tNM_SFX AS CLAIM_PARTY_NAME_SFX, \n\tCICA_ADR AS CLAIM_PARTY_ADDR, \n\tCICA_CIT_NM AS CLAIM_PARTY_CITY, \n\tCICA_CTY AS CLAIM_PARTY_COUNTY, \n\tST_CD AS CLAIM_PARTY_STATE, \n\tCICA_PST_CD AS CLAIM_PARTY_ZIP, \n\tADR_TYP_CD AS ADDR_TYPE, \n\tCICA_TAX_SSN_ID AS TAX_SSN_ID, \n\tCICA_TAX_FED_ID AS TAX_FED_ID, \n\tBIRTH_DATE AS CLAIM_PARTY_BIRTHDATE, \n\tGENDER AS CLAIM_PARTY_GNDR, \n\tlogical_flag_op AS LOGICAL_FLAG, \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tOut_Default_String AS PH_NUM, \n\tOut_Default_String AS PH_EXTENSION, \n\tOut_Default_String AS PH_TYPE, \n\tOut_Default_String AS LGL_ENT_CODE, \n\tCLAIM_PARTY_REF_EFF_FROM_DATE, \n\tout_default_high_date AS CLAIM_PARTY_DEATH_DATE\n\tFROM EXP_Determine_AK\n),\nSQ_claim_party AS (\n\tSELECT \r\n\ta.claim_party_id, \r\n\ta.claim_party_key, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\tWHERE \r\n\t a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_party_key = b.claim_party_key\r\n\t\t\tGROUP BY claim_party_key\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_party_key, eff_from_date  DESC--\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_party_key AS v_PREV_ROW_party_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party AS (\n\tSELECT\n\tclaim_party_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party AS T\n\tUSING UPD_Claim_Party AS S\n\tON T.claim_party_id = S.claim_party_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604341"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}