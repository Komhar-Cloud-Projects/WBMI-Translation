{
    "name": "s_m_POL_DW_LOAD_WorkPremiumTransactionOffsetLineage_Offset",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_WorkPremiumTransactionOffsetLineage_Of_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WorkPremiumTransactionOnsetOffsetPreProcessing AS (\n\tselect \r\n\tLineage.PolicyKey,\r\n\tLineage.RatingCoverageAKID,\r\n\tLineage.PremiumTransactionID,\r\n\tLineage.PremiumTransactionAKID,\r\n\tLineage.PreviousPremiumTransactionID,\r\n\tLineage.PreviousPremiumTransactionAKID\r\n\tfrom \r\n\t(select \r\n\toffset.PolicyKey,\r\n\toffset.RatingCoverageAKID,\r\n\toffset.PremiumTransactionID,\r\n\toffset.PremiumTransactionAKID,\r\n\tonset.PremiumTransactionID as PreviousPremiumTransactionID,\r\n\tonset.PremiumTransactionAKID as PreviousPremiumTransactionAKID,\r\n\tROW_NUMBER() OVER (PARTITION BY offset.PremiumTransactionAKID ORDER BY onset.WorkPremiumTransactionOnsetOffsetPreProcessingId DESC) AS RowNum\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkPremiumTransactionOnsetOffsetPreProcessing offset WITH (NOLOCK)\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkPremiumTransactionOnsetOffsetPreProcessing onset WITH (NOLOCK) on\r\n\tonset.OffsetOnsetCode not in ('Offset','Deprecated')\r\n\t  AND onset.PolicyKey = offset.PolicyKey\r\n\t  AND onset.RatingCoverageAKID = offset.RatingCoverageAKID\r\n\t  AND onset.WorkPremiumTransactionOnsetOffsetPreProcessingId < offset.WorkPremiumTransactionOnsetOffsetPreProcessingId\r\n\t  -- The onset occurred before the Offset\r\n\t  AND (\r\n\t    (onset.DCTTransactionSequence < offset.DCTTransactionSequence)\r\n\t    OR \r\n\t    (onset.DCTTransactionSequence = offset.DCTTransactionSequence AND onset.DCTTransactionIndex < offset.DCTTransactionIndex)\r\n\t   )\r\n\t  -- The onset should have been deprecated after the offset was created, or not be deprecated at all\r\n\t  AND (\r\n\t    (onset.DeprecatedOnDCTTransactionSequence is NULL and onset.DeprecatedOnDCTTransactionIndex is NULL)\r\n\t    or\r\n\t    (onset.DeprecatedOnDCTTransactionSequence > offset.DCTTransactionSequence)\r\n\t    or\r\n\t    (onset.DeprecatedOnDCTTransactionSequence = offset.DCTTransactionSequence and onset.DeprecatedOnDCTTransactionIndex > offset.DCTTransactionIndex)\r\n\t   )\r\n\t   where offset.OffsetOnsetCode = 'Offset'\r\n\t   @{pipeline().parameters.INCREMENTALLOADFILTER} \r\n\t) Lineage\r\n\tWHERE Lineage.RowNum = 1\n),\nEXP_Pass_Value AS (\n\tSELECT\n\tPolicyKey,\n\tRatingCoverageAKID,\n\tPremiumTransactionID,\n\tPremiumTransactionAKID,\n\tPreviousPremiumTransactionID,\n\tPreviousPremiumTransactionAKID,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\t'1' AS UpdateAttributeFlag\n\tFROM SQ_WorkPremiumTransactionOnsetOffsetPreProcessing\n),\nWorkPremiumTransactionOffsetLineage AS (\n\tTRUNCATE TABLE WorkPremiumTransactionOffsetLineage;\n\tINSERT INTO WorkPremiumTransactionOffsetLineage\n\t(AuditID, CreatedDate, ModifiedDate, PolicyKey, RatingCoverageAKID, PremiumTransactionID, PremiumTransactionAKID, PreviousPremiumTransactionID, PreviousPremiumTransactionAKID, UpdateAttributeFlag)\n\tSELECT \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPOLICYKEY, \n\tRATINGCOVERAGEAKID, \n\tPREMIUMTRANSACTIONID, \n\tPREMIUMTRANSACTIONAKID, \n\tPREVIOUSPREMIUMTRANSACTIONID, \n\tPREVIOUSPREMIUMTRANSACTIONAKID, \n\tUPDATEATTRIBUTEFLAG\n\tFROM EXP_Pass_Value\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603242"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "v2"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "INCREMENTALLOADFILTER": {
                "type": "string",
                "defaultValue": "AND EXISTS (SELECT 1 FROM $$SOURCE_TABLE_OWNER.WorkDCTPremiumTransactionTracking t WHERE offset.PremiumTransactionID = t.PremiumTransactionID AND t.AuditID = $$WBMI_AUDIT_CONTROL_RUN_ID)"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}