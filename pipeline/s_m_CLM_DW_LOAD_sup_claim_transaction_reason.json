{
    "name": "s_m_CLM_DW_LOAD_sup_claim_transaction_reason",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_claim_transaction_reason",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_SUP_CHANGE_REASON_STAGE AS (\n\tSELECT\n\t\tSUP_CHANGE_REASON_ID,\n\t\tREASON_CODE,\n\t\tREASON_DESC,\n\t\tMODIFIED_DATE,\n\t\tMODIFIED_USER_ID,\n\t\tEXTRACT_DATE,\n\t\tAS_OF_DATE,\n\t\tRECORD_COUNT,\n\t\tSOURCE_SYSTEM_ID\n\tFROM SUP_CHANGE_REASON_STAGE\n),\nEXP_default_values AS (\n\tSELECT\n\tREASON_CODE AS in_REASON_CODE,\n\tREASON_DESC AS in_REASON_DESC,\n\t-- *INF*: iif(isnull(in_REASON_CODE),'NA',in_REASON_CODE)\n\tIFF(in_REASON_CODE IS NULL, 'NA', in_REASON_CODE) AS out_reason_code,\n\t-- *INF*: iif(isnull(in_REASON_DESC),'N/A',in_REASON_DESC)\n\tIFF(in_REASON_DESC IS NULL, 'N/A', in_REASON_DESC) AS out_reason_desc\n\tFROM SQ_SUP_CHANGE_REASON_STAGE\n),\nLKP_sup_transaction_reason AS (\n\tSELECT\n\tsup_claim_trans_rsn_id,\n\ttrans_rsn_descript,\n\ttrans_rsn_code\n\tFROM (\n\t\tSELECT \r\n\t\ta.sup_claim_trans_rsn_id as sup_claim_trans_rsn_id, \r\n\t\ta.trans_rsn_descript as trans_rsn_descript, \r\n\t\ta.trans_rsn_code as trans_rsn_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_transaction_reason a\r\n\t\tWHERE a.sup_claim_trans_rsn_id\r\n\t\tin (select MAX(b. sup_claim_trans_rsn_id )\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_transaction_reason  b\r\n\t\tWHERE crrnt_snpsht_flag=1\r\n\t\t\tGROUP BY b.trans_rsn_code)\r\n\t\tORDER BY trans_rsn_code\r\n\t\t\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY trans_rsn_code ORDER BY sup_claim_trans_rsn_id) = 1\n),\nEXP_lkp_Values AS (\n\tSELECT\n\tLKP_sup_transaction_reason.sup_claim_trans_rsn_id AS old_sup_claim_trans_rsn_id,\n\tLKP_sup_transaction_reason.trans_rsn_descript AS old_trans_rsn_descript,\n\tEXP_default_values.out_reason_code,\n\tEXP_default_values.out_reason_desc,\n\t-- *INF*: iif(isnull(old_sup_claim_trans_rsn_id),'NEW',\r\n\t-- \tiif((old_trans_rsn_descript<> out_reason_desc),\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(old_sup_claim_trans_rsn_id IS NULL, 'NEW', IFF(( old_trans_rsn_descript <> out_reason_desc ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tsysdate AS created_date,\n\tsysdate AS modified_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS Source_sys_id\n\tFROM EXP_default_values\n\tLEFT JOIN LKP_sup_transaction_reason\n\tON LKP_sup_transaction_reason.trans_rsn_code = EXP_default_values.out_reason_code\n),\nFIL_sup_transaction_reason AS (\n\tSELECT\n\tout_reason_code, \n\tout_reason_desc, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tcreated_date, \n\tmodified_date, \n\tSource_sys_id\n\tFROM EXP_lkp_Values\n\tWHERE changed_flag = 'NEW' or changed_flag = 'UPDATE'\n),\nsup_claims_transaction_reason_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_transaction_reason\n\t(trans_rsn_code, trans_rsn_descript, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tout_reason_code AS TRANS_RSN_CODE, \n\tout_reason_desc AS TRANS_RSN_DESCRIPT, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSource_sys_id AS SOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM FIL_sup_transaction_reason\n),\nSQ_sup_transaction_reason AS (\n\tSELECT \r\n\ta.sup_claim_trans_rsn_id, a.trans_rsn_code, \r\n\ta.eff_from_date, a.eff_to_date\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_transaction_reason a\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}. sup_claim_transaction_reason  b\t\r\n\tWHERE eff_to_date = '12/31/2100 23:59:59'\r\n\t\tAND a.trans_rsn_code = b.trans_rsn_code\r\n\t\tGROUP BY trans_rsn_code\r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY trans_rsn_code, eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the eff_to_date by utilizing a local variable to keep track\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tsup_trans_rsn_id,\n\ttrans_rsn_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \ttrans_rsn_code = v_PREV_ROW_trans_rsn_code, ADD_TO_DATE(v_PREV_ROW_EFF_FROM_DATE,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\t\ttrans_rsn_code = v_PREV_ROW_trans_rsn_code, ADD_TO_DATE(v_PREV_ROW_EFF_FROM_DATE, 'SS', - 1),\n\t\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\t0 AS crrnt_snpsht_flag,\n\tsysdate AS modified_date,\n\teff_from_date AS v_PREV_ROW_EFF_FROM_DATE,\n\ttrans_rsn_code AS v_PREV_ROW_trans_rsn_code\n\tFROM SQ_sup_transaction_reason\n),\nFIL_FirstrowinAKgroup AS (\n\tSELECT\n\tsup_trans_rsn_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date, \n\torig_eff_to_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_sup_transaction_reason AS (\n\tSELECT\n\tsup_trans_rsn_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_FirstrowinAKgroup\n),\nsup_claims_transaction_reason_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_transaction_reason AS T\n\tUSING UPD_sup_transaction_reason AS S\n\tON T.sup_claim_trans_rsn_id = S.sup_trans_rsn_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246507"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905524"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604409"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:23:26"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:28:04"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED AND PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}