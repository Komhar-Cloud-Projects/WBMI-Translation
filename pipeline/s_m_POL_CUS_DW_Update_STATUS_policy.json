{
    "name": "s_m_POL_CUS_DW_Update_STATUS_policy",
    "properties": {
        "activities": [
            {
                "name": "m_POL_CUS_DW_Update_STATUS_policy",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_policy AS (\n\tSELECT policy.pol_id,\r\n\tcase when convert(varchar(6),policy.eff_from_date,112)='180001' then policy.created_date else policy.eff_from_date end compare_date,\r\n\t       policy.pol_sym,\r\n\t       policy.pol_num,\r\n\t       policy.pol_mod,\r\n\t       policy.pol_eff_date,\r\n\t       policy.pol_exp_date,\r\n\t       policy.pol_cancellation_date,\r\n\t       policy.pol_status_code,\r\n\t       policy.renl_code\r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy  policy\r\n\tWHERE \r\n\tpolicy.crrnt_snpsht_flag =1\r\n\tand (policy.pol_status_code <> 'N'\r\n\tor (policy.pol_status_code = 'N'\r\n\t                   AND policy.pol_exp_date >= dateadd(yyyy, -1, getdate())))\r\n\t--Fix for Defect EDWP-3378 to add filter to select only PMS records \r\n\t AND policy.source_sys_id='PMS'\r\n\t--the last part of the filter condition checks for only those policies that are either \"Not InForce(Non-Expired)\" or policies that have been expired in the last year. Policies that have been expired more than a year ago, we will not calculate the status of those ones again'\n),\nEXP_values AS (\n\tSELECT\n\tpol_id,\n\tpol_sym,\n\tpol_num,\n\tpol_mod,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tpol_status_code,\n\trenl_code,\n\t-- *INF*: ltrim(rtrim(pol_sym)) || ltrim(rtrim(pol_num)) || ltrim(rtrim(pol_mod))\n\tltrim(rtrim(pol_sym)) || ltrim(rtrim(pol_num)) || ltrim(rtrim(pol_mod)) AS v_pol_key,\n\tv_pol_key AS out_pol_key,\n\tcompare_date\n\tFROM SQ_policy\n),\nLKP_4514_Stage_pol_cancellation_date AS (\n\tSELECT\n\tpol_cancellationdate,\n\tsar_reason_amend_code,\n\tsar_entrd_date,\n\tsar_transaction,\n\tin_policy_key,\n\tpol_key\n\tFROM (\n\t\tSELECT PIF4514.pol_cancellationdate AS pol_cancellationdate,\r\n\t\tPIF4514.sar_reason_amend_code AS sar_reason_amend_code,\r\n\t\tPIF4514.sar_entrd_date AS sar_entrd_date,\r\n\t\tPIF4514.sar_transaction AS sar_transaction,\r\n\t\tPIF4514.pol_key AS pol_key FROM\r\n\t\t(\r\n\t\tSELECT      \r\n\t\t\t  case  when sar_transaction in (20,21) then min(\r\n\t\t\t\t\t                        concat(\r\n\t\t\t\t\t\t\t\t\t\t\tcast(ltrim(rtrim(a.sar_trans_eff_year)) as varchar(4)),\r\n\t\t\t\t\t\t\t\t\t\t\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),a.sar_trans_eff_month),2),'00'), \r\n\t\t\t\t\t\t\t\t\t\t\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),a.sar_trans_eff_day),2),'00')\r\n\t\t\t\t\t       \t\t\t\t\t))\r\n\t\t\t\t\t\t\r\n\t\t\t\t    when  sar_transaction in (23,25,29) then max(\r\n\t\t\t\t\t    \t\t\t\tconcat(\r\n\t\t\t\t\t\t\t\t\t\tcast(ltrim(rtrim(a.sar_trans_eff_year)) as varchar(4)),\r\n\t\t\t\t\t\t\t\t\t\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),a.sar_trans_eff_month),2),'00'), \r\n\t\t\t\t\t\t\t\t\t\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),a.sar_trans_eff_day),2),'00')\r\n\t\t\t\t\t\t\t\t\t\t))\t \r\n\t\t\t\t\t\t \r\n\t\t            else '21001231' end  as pol_cancellationdate,\r\n\t\t            a.sar_rsn_amend_one + a.sar_rsn_amend_two + a.sar_rsn_amend_three as sar_reason_amend_code,\r\n\t\t\t\t\tmax(a.sar_entrd_date) as sar_entrd_date,\r\n\t\t\t\t\t      SAR_TRANSACTION as sar_transaction,\r\n\t\t\t\t\t\t  ltrim(rtrim(pif_symbol)) + ltrim(rtrim(pif_policy_number)) + ltrim(rtrim(pif_module)) as pol_key\r\n\t\t        from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME}  a ,\r\n\t\t\t\t\t   (SELECT max(cc.sar_entrd_date)      AS sar_entrd_date,\r\n\t\t\t\t\t\t\t  cc.pif_symbol +cc.pif_policy_number+cc.pif_module as policy_key\r\n\t\t\t\t\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME} cc\r\n\t\t\t\t\t\tWHERE cc.sar_rsn_amend_one IN ('S', 'P') and sar_transaction in (20,21,23,25,29)\r\n\t\t\t\t\t\tGROUP BY cc.pif_symbol +cc.pif_policy_number+cc.pif_module\r\n\t\t\t\t\t\t)  b\r\n\t\t        where a.sar_rsn_amend_one IN ('S', 'P')\r\n\t\t\t\t    \tand a.pif_symbol +a.pif_policy_number+a.pif_module = b.policy_key\r\n\t\t\t\t\t\tand a.sar_entrd_date = b.sar_entrd_date \r\n\t\t\t\t\t\tand a.sar_transaction in(20,21,23,25,29)\r\n\t\t--and b.policy_key like 'CPD170650900'\r\n\t\t\t\t\t GROUP BY \t\t\r\n\t\t\t\t\t ltrim(rtrim(pif_symbol)) + ltrim(rtrim(pif_policy_number)) + ltrim(rtrim(pif_module))\r\n\t\t\t\t\t,a.sar_rsn_amend_one + a.sar_rsn_amend_two + a.sar_rsn_amend_three\r\n\t\t\t\t\t,SAR_TRANSACTION\r\n\t\t\t\t\t) PIF4514\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_cancellationdate DESC) = 1\n),\nEXP_Detect_CancellationDate_And_Status AS (\n\tSELECT\n\tEXP_values.pol_id,\n\tEXP_values.pol_eff_date,\n\tEXP_values.pol_exp_date,\n\tEXP_values.pol_cancellation_date,\n\tEXP_values.pol_status_code AS pol_cancellation_ind,\n\tEXP_values.pol_status_code,\n\tEXP_values.renl_code,\n\tLKP_4514_Stage_pol_cancellation_date.pol_cancellationdate,\n\tLKP_4514_Stage_pol_cancellation_date.sar_reason_amend_code,\n\tLKP_4514_Stage_pol_cancellation_date.sar_entrd_date,\n\tLKP_4514_Stage_pol_cancellation_date.sar_transaction,\n\tEXP_values.compare_date,\n\t-- *INF*: IIF(IS_DATE(pol_cancellationdate,'yyyymmdd')\r\n\t-- ,TO_DATE(pol_cancellationdate,'yyyymmdd')\r\n\t-- ,TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS'))\r\n\t-- \r\n\t-- --we are building the entire trans_eff_date with the above expression. if it is not a correct date, then populate a default date of 12/31/2100\n\tIFF(IS_DATE(pol_cancellationdate, 'yyyymmdd'), TO_DATE(pol_cancellationdate, 'yyyymmdd'), TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS')) AS v_sar_trans_eff_date,\n\t-- *INF*: IIF( NOT ISNULL(v_sar_trans_eff_date) AND renl_code = '9',    v_sar_trans_eff_date,\r\n\t-- TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\r\n\t-- )\n\tIFF(NOT v_sar_trans_eff_date IS NULL AND renl_code = '9', v_sar_trans_eff_date, TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS')) AS v_new_cancellation_date,\n\tv_new_cancellation_date AS out_new_cancellation_date,\n\t-- *INF*: iif( pol_eff_date<=compare_date AND \r\n\t-- \t      compare_date< (iif (pol_exp_date< v_new_cancellation_date, pol_exp_date,v_new_cancellation_date)),'I' ,\r\n\t-- iif(v_new_cancellation_date<=compare_date OR (v_new_cancellation_date=pol_eff_date AND compare_date<=pol_eff_date),'C',\r\n\t-- iif(compare_date>=pol_exp_date,'N' ,\r\n\t-- iif(compare_date<pol_eff_date AND (v_new_cancellation_date>compare_date OR v_new_cancellation_date>pol_eff_date),'F', 'N/A' \r\n\t-- )))\r\n\t-- )\n\tIFF(pol_eff_date <= compare_date AND compare_date < ( IFF(pol_exp_date < v_new_cancellation_date, pol_exp_date, v_new_cancellation_date) ), 'I', IFF(v_new_cancellation_date <= compare_date OR ( v_new_cancellation_date = pol_eff_date AND compare_date <= pol_eff_date ), 'C', IFF(compare_date >= pol_exp_date, 'N', IFF(compare_date < pol_eff_date AND ( v_new_cancellation_date > compare_date OR v_new_cancellation_date > pol_eff_date ), 'F', 'N/A')))) AS v_new_pol_status_code,\n\tv_new_pol_status_code AS out_new_pol_status_code,\n\t-- *INF*: IIF(NOT ISNULL(sar_reason_amend_code) AND renl_code='9',sar_reason_amend_code,'N/A')\n\tIFF(NOT sar_reason_amend_code IS NULL AND renl_code = '9', sar_reason_amend_code, 'N/A') AS v_PolicyCancellationReasonCode,\n\tv_PolicyCancellationReasonCode AS out_PolicyCancellationReasonCode,\n\t-- *INF*: DECODE(true,\r\n\t-- pol_cancellation_date != v_new_cancellation_date,'Y'\r\n\t-- ,pol_status_code != v_new_pol_status_code,'Y'\r\n\t-- ,'N')\r\n\t-- \r\n\t-- --set the status to  'Y' if either cancellation date or policy satus codes are different else set it to N. \r\n\t-- \n\tDECODE(true,\n\t\tpol_cancellation_date != v_new_cancellation_date, 'Y',\n\t\tpol_status_code != v_new_pol_status_code, 'Y',\n\t\t'N') AS Update_Flag,\n\tsysdate AS Modified_date\n\tFROM EXP_values\n\tLEFT JOIN LKP_4514_Stage_pol_cancellation_date\n\tON LKP_4514_Stage_pol_cancellation_date.pol_key = EXP_values.out_pol_key\n),\nFIL_Update AS (\n\tSELECT\n\tpol_id, \n\tout_new_cancellation_date AS new_pol_cancellation_date, \n\tout_new_pol_status_code AS new_pol_status_code, \n\tUpdate_Flag, \n\tModified_date, \n\tout_PolicyCancellationReasonCode AS PolicyCancellationReasonCode\n\tFROM EXP_Detect_CancellationDate_And_Status\n\tWHERE Update_Flag = 'Y'\r\n\r\n--only pass the records if either cancellation date or policy satus codes are different\n),\nLKP_sup_policy_status_code AS (\n\tSELECT\n\tsup_pol_status_code_id,\n\tpol_status_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_pol_status_code_id,\n\t\t\tpol_status_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_policy_status_code\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_status_code ORDER BY sup_pol_status_code_id) = 1\n),\nUpd_Target AS (\n\tSELECT\n\tFIL_Update.pol_id, \n\tFIL_Update.new_pol_cancellation_date, \n\tFIL_Update.new_pol_status_code, \n\tFIL_Update.Update_Flag, \n\tFIL_Update.Modified_date, \n\tLKP_sup_policy_status_code.sup_pol_status_code_id, \n\tFIL_Update.PolicyCancellationReasonCode\n\tFROM FIL_Update\n\tLEFT JOIN LKP_sup_policy_status_code\n\tON LKP_sup_policy_status_code.pol_status_code = FIL_Update.new_pol_status_code\n),\nTGT_policy_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy AS T\n\tUSING Upd_Target AS S\n\tON T.pol_id = S.pol_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.modified_date = S.Modified_date, T.pol_cancellation_date = S.new_pol_cancellation_date, T.pol_cancellation_rsn_code = S.PolicyCancellationReasonCode, T.pol_status_code = S.new_pol_status_code, T.sup_pol_status_code_id = S.sup_pol_status_code_id\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905516"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604239"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:21:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:54:57"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_NAME": {
                "type": "string",
                "defaultValue": "arch_pif_4514_stage"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_STAGE"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "AND policy.pol_eff_date < getdate() AND policy.pol_exp_date > getdate()"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}