{
    "name": "s_m_FEED_Load_DataCompromise_Work_Table",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_DataCompromise_Work_Table",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_DefenseAndLiability AS (\n\tSELECT\n\tCoverageDeductibleValue,\n\tPremiumTransactionAKID\n\tFROM (\n\t\tselect b.PremiumTransactionAKID as PremiumTransactionAKID,\r\n\t\t a.CoverageDeductibleValue  as CoverageDeductibleValue  \r\n\t\tfrom CoverageDeductible a join CoverageDeductibleBridge b on a.CoverageDeductibleId=b.CoverageDeductibleId and a.CoverageDeductibleType='DataCompromiseDefenseAndLiability' and a.CoverageDeductibleValue<>'0'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID ORDER BY CoverageDeductibleValue DESC) = 1\n),\nLKP_ProgramCodeForNSI AS (\n\tSELECT\n\tProgramDescription,\n\tProgramAKId\n\tFROM (\n\t\tSELECT \n\t\t\tProgramDescription,\n\t\t\tProgramAKId\n\t\tFROM Program\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ProgramAKId ORDER BY ProgramDescription) = 1\n),\nSQ_DataCompromise AS (\n\tDeclare @STARTDATE as datetime,\r\n\t        @ENDDATE as datetime\r\n\tset @STARTDATE=@{pipeline().parameters.STARTDATE}\r\n\tset @ENDDATE=@{pipeline().parameters.ENDDATE}\r\n\tSELECT \r\n\tPremiumMasterCalculation.SourceSystemID, policy.pol_id, RiskLocation.RiskLocationID, PolicyCoverage.PolicyCoverageID, RatingCoverage.RatingCoverageId, \r\n\tPremiumTransaction.PremiumTransactionID, PremiumMasterCalculation.PremiumMasterCalculationID, contract_customer.contract_cust_id, contract_customer_address.contract_cust_addr_id, Agency.AgencyID, policy.pol_sym, policy.pol_num, policy.pol_mod, policy.PolicyOfferingAKId, policy.StrategicProfitCenterAKId, policy.pol_eff_date, policy.pol_exp_date, contract_customer.name, contract_customer_address.addr_line_1, contract_customer_address.addr_line_2, contract_customer_address.addr_line_3, contract_customer_address.city_name, contract_customer_address.state_prov_code, contract_customer_address.zip_postal_code, \r\n\t---------------------------------------------------------------------------------------------------------------\r\n\tResponseExpenses.CoverageLimitValue as FirstPartyLimit,\r\n\tResponseExpensesDeductible.CoverageDeductibleValue as DeductibleAmount,\r\n\tDefenseandLiability .CoverageLimitValue as ThirdPartyIndicator,\r\n\tPremiumTransaction.PremiumTransactionCode,\r\n\t----------------------------------------------------------------------------------------------------------------\r\n\tpolicy.prim_bus_class_code,RatingCoverage.ClassCode,\r\n\t policy.prior_pol_key, Agency.AgencyCode, PremiumMasterCalculation.PremiumMasterTransactionCode, PremiumMasterCalculation.PremiumMasterCoverageEffectiveDate, \r\n\t---RatingCoverage.RatingCoverageEffectiveDate,\r\n\t --RatingCoverage.RatingCoverageExpirationDate, \r\n\tPremiumMasterCalculation.PremiumMasterCoverageExpirationDate, \r\n\tPremiumMasterCalculation.PremiumMasterPremium ,\r\n\tPremiumTransaction.PremiumTransactionAKID,\r\n\tPremiumMasterCalculation.premiummasterfulltermpremium,\r\n\tPremiumMasterCalculation.PremiumMasterRunDate,\r\n\tPolicyCoverage.PolicyAKID,\r\n\tPolicyCoverage.PolicyCoverageEffectiveDate,\r\n\tRatingCoverage.RatingCoverageCancellationDate,\r\n\tpolicy.ProgramAKId\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy \r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage on PolicyCoverage.PolicyAKID=policy.pol_ak_id and PolicyCoverage.CurrentSnapshotFlag=1 and policy.crrnt_snpsht_flag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer on policy.contract_cust_ak_id=contract_customer.contract_cust_ak_id and contract_customer.crrnt_snpsht_flag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_address on contract_customer_address.contract_cust_ak_id=contract_customer.contract_cust_ak_id and contract_customer_address.crrnt_snpsht_flag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency on policy.AgencyAKId=Agency.AgencyAKID and Agency.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation on PolicyCoverage.RiskLocationAKID= RiskLocation.RiskLocationAKID and RiskLocation.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage on RatingCoverage.PolicyCoverageAKID=PolicyCoverage.PolicyCoverageAKID  and PolicyCoverage.CurrentSnapshotFlag=1\r\n\tleft  join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction on PremiumTransaction.RatingCoverageAKId=RatingCoverage.RatingCoverageAKID and PremiumTransaction.EffectiveDate=RatingCoverage.EffectiveDate and PremiumTransaction.CurrentSnapshotFlag=1\r\n\tleft  join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation on  PremiumMasterCalculation.PremiumTransactionAKID=PremiumTransaction.PremiumTransactionAKID and  PremiumMasterCalculation.CurrentSnapshotFlag =1\r\n\t--------------------------------\r\n\tleft join (select CoverageLimitBridge.PremiumTransactionAKID , CoverageLimit.CoverageLimitType,  CoverageLimit.CoverageLimitValue\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit on CoverageLimit.CoverageLimitId=CoverageLimitBridge.CoverageLimitId  ) as  ResponseExpenses\r\n\t on ResponseExpenses.PremiumTransactionAKID= PremiumTransaction.PremiumTransactionAKID \r\n\tand ResponseExpenses.CoverageLimitType='ResponseExpense' and ResponseExpenses.CoverageLimitValue<>0\r\n\t--------------------------------\r\n\tleft join (select CoveragedeductibleBridge.PremiumTransactionAKID , CoverageDeductible.CoverageDeductibleType,  CoverageDeductible.CoverageDeductibleValue\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoveragedeductibleBridge inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible on CoverageDeductible.CoverageDeductibleId=CoverageDeductibleBridge.CoverageDeductibleId  ) as  ResponseExpensesDeductible\r\n\t on ResponseExpensesDeductible.PremiumTransactionAKID= PremiumTransaction.PremiumTransactionAKID \r\n\tand ResponseExpensesDeductible.CoverageDeductibleType='DataCompromiseResponseExpense'\r\n\t and ResponseExpensesDeductible.CoverageDeductibleValue<>0\r\n\t--------------------------------\r\n\tleft join (select CoverageLimitBridge.PremiumTransactionAKID , CoverageLimit.CoverageLimitType,  CoverageLimit.CoverageLimitValue\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit on CoverageLimit.CoverageLimitId=CoverageLimitBridge.CoverageLimitId  ) as  DefenseandLiability\r\n\t on DefenseandLiability.PremiumTransactionAKID= PremiumTransaction.PremiumTransactionAKID \r\n\tand DefenseandLiability.CoverageLimitType='DefenseandLiability' and DefenseandLiability.CoverageLimitValue<>0\r\n\t\r\n\tWHERE\r\n\t\r\n\tPremiumMasterCalculation.PremiumMasterPremiumType='D'\r\n\tand \r\n\tPremiumMasterCalculation.PremiumMasterReasonAmendedCode not in ('COL','CWO')\r\n\tand\r\n\t((PremiumMasterCalculation.PremiumMasterRunDate between @STARTDATE and @ENDDATE)\r\n\t OR\r\n\t(PremiumMasterCoverageEffectiveDate < @ENDDATE AND PremiumMasterCoverageExpirationDate >@ENDDATE))\r\n\t\r\n\tand\r\n\t\r\n\t-------------------------------------------------------------------\r\n\t--PremiumMasterCalculation.PremiumMasterRunDate  between ----PremiumTransaction.PremiumTransactionEffectiveDate and --PremiumTransaction.PremiumTransactionExpirationDate\r\n\t------------------------------------------------------------------\r\n\t--start fix for Defect 3350\r\n\t--exists (\r\n\t--select 1 from PremiumTransaction PT\r\n\t--join RatingCoverage a\r\n\t--on PT.RatingCoverageAKId=a.RatingCoverageAKId\r\n\t--and PT.EffectiveDate=a.EffectiveDate\r\n\t--where a.RatingCoverageAKID=RatingCoverage.RatingCoverageAKID\r\n\t--and PremiumMasterCalculation.PremiumMasterRunDate>=PremiumTransactionEffectiveDate\r\n\t--and PremiumMasterCalculation.PremiumMasterRunDate<PremiumTransactionExpirationDate\r\n\t--and a.CoverageType='DataCompromise')\r\n\t--end of fix 3350\r\n\t--and \r\n\tPremiumMasterCalculation.PremiumMasterRunDate  between policy.pol_eff_date and policy.pol_exp_date\r\n\tand PolicyCoverage.SourceSystemID='DCT' and policy.source_sys_id='DCT'\r\n\tand contract_customer.source_sys_id='DCT'\r\n\tand contract_customer_address.source_sys_id='DCT'\r\n\tand RiskLocation.SourceSystemID='DCT'\r\n\tand RatingCoverage.SourceSystemID='DCT'\r\n\tand \r\n\t------------------------------------------------\r\n\tRatingCoverage.CoverageType='DataCompromise'\r\n\t@{pipeline().parameters.WHERE}\n),\nLKP_PolicyCurrentStatusDim AS (\n\tSELECT\n\tPolicyCancellationDate,\n\tEDWPolicyAKId\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyCancellationDate,\n\t\t\tEDWPolicyAKId\n\t\tFROM @{pipeline().parameters.DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCurrentStatusDim\n\t\tWHERE RunDate between @{pipeline().parameters.STARTDATE} and @{pipeline().parameters.ENDDATE}\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWPolicyAKId ORDER BY PolicyCancellationDate) = 1\n),\nLKP_PolicyOffering AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tPolicyOfferingAKId,\n\tPolicyOfferingCode,\n\tin_PolicyOfferingAKId\n\tFROM (\n\t\tSELECT \n\t\t\tCurrentSnapshotFlag,\n\t\t\tPolicyOfferingAKId,\n\t\t\tPolicyOfferingCode,\n\t\t\tin_PolicyOfferingAKId\n\t\tFROM PolicyOffering\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyOfferingAKId ORDER BY CurrentSnapshotFlag) = 1\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionEffectiveDate,\n\tPolicyAKID,\n\tin_PolicyAKID\n\tFROM (\n\t\tDeclare @defaultcanceldate as datetime\r\n\t\t        \r\n\t\tset @defaultcanceldate = '2100-12-31'\r\n\t\t\r\n\t\tselect  pt.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,pc.PolicyAKID as PolicyAKID\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt join \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc \r\n\t\ton rc.RatingCoverageAKID = pt.RatingCoverageAKId and rc.EffectiveDate = pt.EffectiveDate\r\n\t\tand rc.RatingCoverageCancellationDate > @defaultcanceldate\r\n\t\tand rc.CoverageType = 'DataCompromise'\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.policycoverage pc\r\n\t\ton pc.PolicyCoverageAKID = rc.PolicyCoverageAKID and pc.CurrentSnapshotFlag = 1\r\n\t\twhere not exists \r\n\t\t(select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt1 \r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc1 \r\n\t\ton rc1.RatingCoverageAKID = pt1.RatingCoverageAKId and rc1.EffectiveDate = pt1.EffectiveDate\r\n\t\tand rc1.RatingCoverageCancellationDate > @defaultcanceldate\r\n\t\tand rc1.CoverageType = 'DataCompromise'\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.policycoverage pc1\r\n\t\ton pc1.PolicyCoverageAKID = rc1.PolicyCoverageAKID and pc1.CurrentSnapshotFlag = 1\r\n\t\twhere pc1.PolicyAKID = pc.PolicyAKID\r\n\t\tand pt1.PremiumTransactionEnteredDate < pt.PremiumTransactionEnteredDate )\r\n\t\tand not exists \r\n\t\t(select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc1 \r\n\t\ton rc1.RatingCoverageAKID = pt1.RatingCoverageAKId and rc1.EffectiveDate = pt1.EffectiveDate\r\n\t\tand rc1.RatingCoverageCancellationDate < @defaultcanceldate\r\n\t\tand rc1.CoverageType = 'DataCompromise'\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.policycoverage pc1\r\n\t\ton pc1.PolicyCoverageAKID = rc1.PolicyCoverageAKID and pc1.CurrentSnapshotFlag = 1\r\n\t\twhere pc1.PolicyAKID = pc.PolicyAKID\r\n\t\tand pt1.PremiumTransactionEnteredDate > pt.PremiumTransactionEnteredDate)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID ORDER BY PremiumTransactionEffectiveDate) = 1\n),\nLKP_StrategicProfitCenter AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tStrategicProfitCenterAKId,\n\tStrategicProfitCenterCode,\n\tStrategicProfitCenterAbbreviation,\n\tStrategicProfitCenterDescription,\n\tin_StrategicProfitCenterAKId\n\tFROM (\n\t\tSELECT \n\t\t\tCurrentSnapshotFlag,\n\t\t\tStrategicProfitCenterAKId,\n\t\t\tStrategicProfitCenterCode,\n\t\t\tStrategicProfitCenterAbbreviation,\n\t\t\tStrategicProfitCenterDescription,\n\t\t\tin_StrategicProfitCenterAKId\n\t\tFROM StrategicProfitCenter\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StrategicProfitCenterAKId ORDER BY CurrentSnapshotFlag) = 1\n),\nLKP_WorkDatacompromise AS (\n\tSELECT\n\tWorkDataCompromiseId,\n\tPremiumMasterCalculationID,\n\tin_PremiumMasterCalculationID\n\tFROM (\n\t\tSELECT \n\t\t\tWorkDataCompromiseId,\n\t\t\tPremiumMasterCalculationID,\n\t\t\tin_PremiumMasterCalculationID\n\t\tFROM WorkDataCompromise\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumMasterCalculationID ORDER BY WorkDataCompromiseId DESC) = 1\n),\nEXP_GetValues AS (\n\tSELECT\n\tLKP_WorkDatacompromise.WorkDataCompromiseId AS lkp_WorkDataCompromiseId,\n\tLKP_PremiumTransaction.PremiumTransactionEffectiveDate AS lkp_PremiumTransactionEffectiveDate,\n\tSQ_DataCompromise.SourceSystemID AS in_SourceSystemID,\n\tSQ_DataCompromise.pol_id AS in_pol_id,\n\tSQ_DataCompromise.RiskLocationID AS in_RiskLocationID,\n\tSQ_DataCompromise.PolicyCoverageID AS in_PolicyCoverageID,\n\tSQ_DataCompromise.RatingCoverageId AS in_RatingCoverageId,\n\tSQ_DataCompromise.PremiumTransactionID AS in_PremiumTransactionID,\n\tSQ_DataCompromise.PremiumMasterCalculationID AS in_PremiumMasterCalculationID,\n\tSQ_DataCompromise.contract_cust_id AS in_contract_cust_id,\n\tSQ_DataCompromise.contract_cust_addr_id AS in_contract_cust_addr_id,\n\tSQ_DataCompromise.AgencyID AS in_AgencyID,\n\tSQ_DataCompromise.pol_sym AS in_pol_sym,\n\tSQ_DataCompromise.pol_num AS in_pol_num,\n\tSQ_DataCompromise.pol_mod AS in_pol_mod,\n\tSQ_DataCompromise.PolicyOfferingAKId AS in_PolicyOfferingAKId,\n\tSQ_DataCompromise.StrategicProfitCenterAKId AS in_StrategicProfitCenterAKId,\n\tSQ_DataCompromise.pol_eff_date AS in_pol_eff_date,\n\tSQ_DataCompromise.pol_exp_date AS in_pol_exp_date,\n\tSQ_DataCompromise.name AS in_name,\n\tSQ_DataCompromise.addr_line_1 AS in_addr_line_1,\n\tSQ_DataCompromise.addr_line_2 AS in_addr_line_2,\n\tSQ_DataCompromise.addr_line_3 AS in_addr_line_3,\n\tSQ_DataCompromise.city_name AS in_city_name,\n\tSQ_DataCompromise.state_prov_code AS in_state_prov_code,\n\tSQ_DataCompromise.zip_postal_code AS in_zip_postal_code,\n\tSQ_DataCompromise.FirstPartyLimit AS in_FirstPartyLimit,\n\tSQ_DataCompromise.DeductibleAmount AS in_DeductibleAmount,\n\tSQ_DataCompromise.ThirdPartyIndicator AS in_ThirdPartyIndicator,\n\tSQ_DataCompromise.TransactionCode AS in_TransactionCode,\n\tSQ_DataCompromise.prim_bus_class_code AS in_prim_bus_class_code,\n\tSQ_DataCompromise.ClassCode AS in_ClassCode,\n\tSQ_DataCompromise.prior_pol_key AS in_prior_pol_key,\n\tSQ_DataCompromise.AgencyCode AS in_AgencyCode,\n\tSQ_DataCompromise.PremiumMasterTransactionCode AS in_PremiumMasterTransactionCode,\n\tSQ_DataCompromise.PremiumMasterCoverageEffectiveDate AS in_PremiumMasterCoverageEffectiveDate,\n\tSQ_DataCompromise.PremiumMasterCoverageEffectiveDate AS in_PremiumMastrCoverageEffectiveDate,\n\tSQ_DataCompromise.PremiumMasterCoverageExpirationDate AS in_PremiumMasterCoverageExpirationDate,\n\tSQ_DataCompromise.PremiumMasterPremium AS in_PremiumMasterPremium,\n\tLKP_PolicyOffering.PolicyOfferingCode AS in_PolicyOfferingCode,\n\tLKP_StrategicProfitCenter.StrategicProfitCenterCode AS in_StrategicProfitCenterCode,\n\tLKP_StrategicProfitCenter.StrategicProfitCenterAbbreviation AS in_StrategicProfitCenterAbbreviation,\n\tLKP_StrategicProfitCenter.StrategicProfitCenterDescription AS in_StrategicProfitCenterDescription,\n\tSQ_DataCompromise.PremiumTransactionAKID AS in_PremiumTransactionAKID,\n\tSQ_DataCompromise.premiummasterfulltermpremium AS in_premiummasterfulltermpremium,\n\tSQ_DataCompromise.PremiumMasterRunDate AS in_PremiumMasterRunDate,\n\tSQ_DataCompromise.PolicyCoverageEffectiveDate AS in_PolicyCoverageEffectiveDate,\n\tSQ_DataCompromise.RatingCoverageCancellationDate AS in_RatingCoverageCancellationDate,\n\tSQ_DataCompromise.ProgramAKId AS in_ProgramAKId,\n\tSysdate AS out_CreatedDate,\n\tSysdate AS out_ModifiedDate,\n\tin_pol_id AS out_pol_id,\n\tin_RiskLocationID AS out_RiskLocationID,\n\tin_PolicyCoverageID AS out_PolicyCoverageID,\n\tin_RatingCoverageId AS out_RatingCoverageID,\n\tin_PremiumTransactionID AS out_PremiumTransactionID,\n\tin_PremiumMasterCalculationID AS out_PremiumMasterCalculationID,\n\tin_PremiumMasterRunDate AS out_RunDate,\n\tin_contract_cust_id AS out_contract_cust_id,\n\tin_contract_cust_addr_id AS out_contract_cust_addr_id,\n\tin_AgencyID AS out_AgencyID,\n\tin_pol_sym||in_pol_num||in_pol_mod AS out_PolKey,\n\t'2633' AS out_Company,\n\t'DCC' AS out_Productcode,\n\t-- *INF*: DECODE(in_PolicyOfferingCode, \r\n\t-- '500', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002721', '1002719'),\r\n\t-- '400', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002720', '1002718'),\r\n\t-- '410', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002720', '1002718'),\r\n\t-- '420', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002720', '1002718'),\r\n\t-- '430', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002720', '1002718'),\r\n\t-- '450', DECODE(in_StrategicProfitCenterDescription,'NSI', '1002720', '1002718'),\r\n\t-- ''\r\n\t-- )\r\n\t-- \r\n\t-- \n\tDECODE(\n\t    in_PolicyOfferingCode,\n\t    '500', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002721',\n\t        '1002719'\n\t    ),\n\t    '400', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002720',\n\t        '1002718'\n\t    ),\n\t    '410', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002720',\n\t        '1002718'\n\t    ),\n\t    '420', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002720',\n\t        '1002718'\n\t    ),\n\t    '430', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002720',\n\t        '1002718'\n\t    ),\n\t    '450', DECODE(\n\t        in_StrategicProfitCenterDescription,\n\t        'NSI', '1002720',\n\t        '1002718'\n\t    ),\n\t    ''\n\t) AS out_ContractNumber,\n\tin_pol_eff_date AS out_PolicyEffectiveDate,\n\tin_pol_exp_date AS out_PolicyExpirationDate,\n\t-- *INF*: IIF(in_name='N/A', '', SUBSTR(in_name,1,55))\n\tIFF(in_name = 'N/A', '', SUBSTR(in_name, 1, 55)) AS out_nameOfInsured,\n\t-- *INF*: CONCAT(\r\n\t--                      CONCAT(\r\n\t--                                            IIF(RTRIM(LTRIM(in_addr_line_1))='N/A', '', RTRIM(LTRIM(in_addr_line_1))),\r\n\t--                                            IIF(RTRIM(LTRIM(in_addr_line_2))='N/A', '', RTRIM(LTRIM(in_addr_line_2)))),\r\n\t--                      IIF(RTRIM(LTRIM(in_addr_line_3))='N/A', '', RTRIM(LTRIM(in_addr_line_3))))\n\tCONCAT(CONCAT(\n\t        IFF(\n\t            RTRIM(LTRIM(in_addr_line_1)) = 'N/A', '', RTRIM(LTRIM(in_addr_line_1))\n\t        ), \n\t        IFF(\n\t            RTRIM(LTRIM(in_addr_line_2)) = 'N/A', '', RTRIM(LTRIM(in_addr_line_2))\n\t        )), \n\t    IFF(\n\t        RTRIM(LTRIM(in_addr_line_3)) = 'N/A', '', RTRIM(LTRIM(in_addr_line_3))\n\t    )) AS out_MailingAddressStreetName,\n\t-- *INF*: IIF(RTRIM(LTRIM(in_city_name))='N/A', '', RTRIM(LTRIM(in_city_name)))\n\tIFF(RTRIM(LTRIM(in_city_name)) = 'N/A', '', RTRIM(LTRIM(in_city_name))) AS out_MailingAddressCity,\n\t-- *INF*: IIF(RTRIM(LTRIM(in_state_prov_code))='N/A', '', RTRIM(LTRIM(in_state_prov_code)))\n\tIFF(RTRIM(LTRIM(in_state_prov_code)) = 'N/A', '', RTRIM(LTRIM(in_state_prov_code))) AS out_MailingAddressState,\n\t-- *INF*: IIF(RTRIM(LTRIM(in_zip_postal_code))='N/A', '', RTRIM(LTRIM(in_zip_postal_code)))\r\n\t-- \n\tIFF(RTRIM(LTRIM(in_zip_postal_code)) = 'N/A', '', RTRIM(LTRIM(in_zip_postal_code))) AS out_MailingAddressZipCode,\n\t0 AS out_TotalPackageGrossPremium,\n\t0 AS out_TotalPropertyGrossPremium,\n\t-- *INF*: IIF(ISNULL(in_FirstPartyLimit) , '0', in_FirstPartyLimit)\n\tIFF(in_FirstPartyLimit IS NULL, '0', in_FirstPartyLimit) AS out_FirstPartyLimit,\n\t-- *INF*: IIF(ISNULL(in_DeductibleAmount) , :LKP.LKP_DefenseAndLiability(in_PremiumTransactionAKID), in_DeductibleAmount)\n\tIFF(\n\t    in_DeductibleAmount IS NULL,\n\t    LKP_DEFENSEANDLIABILITY_in_PremiumTransactionAKID.CoverageDeductibleValue,\n\t    in_DeductibleAmount\n\t) AS v_DeductibleAmount,\n\t-- *INF*: IIF(ISNULL(v_DeductibleAmount) , '0', v_DeductibleAmount)\n\tIFF(v_DeductibleAmount IS NULL, '0', v_DeductibleAmount) AS out_DeductibleAmount,\n\t-- *INF*: IIF(RTRIM(LTRIM(in_prim_bus_class_code))='N/A' ,\r\n\t-- RTRIM(LTRIM(in_ClassCode)),\r\n\t--  RTRIM(LTRIM(in_prim_bus_class_code)))\n\tIFF(\n\t    RTRIM(LTRIM(in_prim_bus_class_code)) = 'N/A', RTRIM(LTRIM(in_ClassCode)),\n\t    RTRIM(LTRIM(in_prim_bus_class_code))\n\t) AS out_OccupancyCode,\n\t0 AS out_PolicyTotalInsuredValue,\n\t-- *INF*: IIF(RTRIM(LTRIM(in_prior_pol_key))='N/A', '', RTRIM(LTRIM(in_prior_pol_key)))\n\tIFF(RTRIM(LTRIM(in_prior_pol_key)) = 'N/A', '', RTRIM(LTRIM(in_prior_pol_key))) AS out_PreviousPolicyNumber,\n\t-- *INF*: IIF(ISNULL(in_AgencyCode) OR in_AgencyCode='N/A', '', in_AgencyCode)\n\tIFF(in_AgencyCode IS NULL OR in_AgencyCode = 'N/A', '', in_AgencyCode) AS out_AgencyCode,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- ISNULL(in_StrategicProfitCenterAbbreviation), 'Other',\r\n\t-- LTRIM(RTRIM(in_StrategicProfitCenterAbbreviation)) = 'NSI',:LKP.LKP_PROGRAMCODEFORNSI(in_ProgramAKId),\r\n\t-- in_StrategicProfitCenterAbbreviation)\r\n\t-- \r\n\t-- -- below was the exsisting code and the chnage is made for WREQ-11766\r\n\t-- \r\n\t-- --IIF(ISNULL(in_StrategicProfitCenterAbbreviation), 'Other', in_StrategicProfitCenterAbbreviation)\r\n\t-- \r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    in_StrategicProfitCenterAbbreviation IS NULL, 'Other',\n\t    LTRIM(RTRIM(in_StrategicProfitCenterAbbreviation)) = 'NSI', LKP_PROGRAMCODEFORNSI_in_ProgramAKId.ProgramDescription,\n\t    in_StrategicProfitCenterAbbreviation\n\t) AS out_BranchCode,\n\t-- *INF*: IIF(ISNULL(in_ThirdPartyIndicator), 'N', 'Y')\n\tIFF(in_ThirdPartyIndicator IS NULL, 'N', 'Y') AS out_ThirdPartyIndicator,\n\t-- *INF*: --Fix EDWP-3822 to remove the '?' from Endorse\r\n\t-- DECODE(TRUE,\r\n\t-- LTRIM(RTRIM(in_TransactionCode))= 'New','01',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Cancel','03',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Rewrite','04',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Renew','07',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Reinstate','10',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Endorse' AND LTRIM(RTRIM(TO_CHAR(in_RatingCoverageCancellationDate,'MM/DD/YYYY'))) ='12/31/2100','30',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Endorse' \r\n\t-- AND LTRIM(RTRIM(TO_CHAR(in_RatingCoverageCancellationDate,'MM/DD/YYYY'))) <> '12/31/2100','03',\r\n\t-- LTRIM(RTRIM(in_TransactionCode))='Reissue','04',\r\n\t-- '')\n\tDECODE(\n\t    TRUE,\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'New', '01',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Cancel', '03',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Rewrite', '04',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Renew', '07',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Reinstate', '10',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Endorse' AND LTRIM(RTRIM(TO_CHAR(in_RatingCoverageCancellationDate, 'MM/DD/YYYY'))) = '12/31/2100', '30',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Endorse' AND LTRIM(RTRIM(TO_CHAR(in_RatingCoverageCancellationDate, 'MM/DD/YYYY'))) <> '12/31/2100', '03',\n\t    LTRIM(RTRIM(in_TransactionCode)) = 'Reissue', '04',\n\t    ''\n\t) AS out_TransactionCode,\n\t-- *INF*: IIF(ISNULL(in_PremiumMasterCoverageEffectiveDate), TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), in_PremiumMasterCoverageEffectiveDate)\n\tIFF(\n\t    in_PremiumMasterCoverageEffectiveDate IS NULL,\n\t    TO_TIMESTAMP('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),\n\t    in_PremiumMasterCoverageEffectiveDate\n\t) AS out_TransactionEffectiveDate,\n\t-- *INF*: --edwp4376 PolicyCoverageEffectiveDt when the Transaction Code is cancel, otherwise follow old logic\r\n\t-- iif(in_TransactionCode='Cancel',in_PolicyCoverageEffectiveDate,\r\n\t-- \tiif (isnull(lkp_PremiumTransactionEffectiveDate),\r\n\t-- \tin_PremiumMastrCoverageEffectiveDate,lkp_PremiumTransactionEffectiveDate))\n\tIFF(\n\t    in_TransactionCode = 'Cancel', in_PolicyCoverageEffectiveDate,\n\t    IFF(\n\t        lkp_PremiumTransactionEffectiveDate IS NULL, in_PremiumMastrCoverageEffectiveDate,\n\t        lkp_PremiumTransactionEffectiveDate\n\t    )\n\t) AS out_CoverageEffectiveDate,\n\tin_PremiumMasterCoverageExpirationDate AS out_CoverageExpirationDate,\n\t-- *INF*: IIF(ISNULL(in_premiummasterfulltermpremium),0,in_premiummasterfulltermpremium)\n\tIFF(in_premiummasterfulltermpremium IS NULL, 0, in_premiummasterfulltermpremium) AS out_CoverageGrossPremium,\n\t-- *INF*: ROUND(IIF(ISNULL(in_PremiumMasterPremium),0,in_PremiumMasterPremium) ,2)\n\tROUND(\n\t    IFF(\n\t        in_PremiumMasterPremium IS NULL, 0, in_PremiumMasterPremium\n\t    ), 2) AS out_CoverageNetPremium,\n\t-- *INF*: DECODE(in_PolicyOfferingCode, \r\n\t-- '500', '016',\r\n\t-- '400', '011',\r\n\t-- '410', '011',\r\n\t-- '420', '011',\r\n\t-- '430', '011',\r\n\t-- '450', '011',\r\n\t-- ''\r\n\t-- )\r\n\t-- \n\tDECODE(\n\t    in_PolicyOfferingCode,\n\t    '500', '016',\n\t    '400', '011',\n\t    '410', '011',\n\t    '420', '011',\n\t    '430', '011',\n\t    '450', '011',\n\t    ''\n\t) AS out_ProgramID,\n\t-- *INF*: TRUNC(@{pipeline().parameters.EXTRACTDATE},'D')\n\tCAST(TRUNC(@{pipeline().parameters.EXTRACTDATE}, 'DAY') AS TIMESTAMP_NTZ(0)) AS out_ExtractDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS out_SourceSystemID,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS out_AuditID,\n\tLKP_PolicyCurrentStatusDim.PolicyCancellationDate\n\tFROM SQ_DataCompromise\n\tLEFT JOIN LKP_PolicyCurrentStatusDim\n\tON LKP_PolicyCurrentStatusDim.EDWPolicyAKId = SQ_DataCompromise.PolicyAKID\n\tLEFT JOIN LKP_PolicyOffering\n\tON LKP_PolicyOffering.PolicyOfferingAKId = SQ_DataCompromise.PolicyOfferingAKId\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.PolicyAKID = SQ_DataCompromise.PolicyAKID\n\tLEFT JOIN LKP_StrategicProfitCenter\n\tON LKP_StrategicProfitCenter.StrategicProfitCenterAKId = SQ_DataCompromise.StrategicProfitCenterAKId\n\tLEFT JOIN LKP_WorkDatacompromise\n\tON LKP_WorkDatacompromise.PremiumMasterCalculationID = SQ_DataCompromise.PremiumMasterCalculationID\n\tLEFT JOIN LKP_DEFENSEANDLIABILITY LKP_DEFENSEANDLIABILITY_in_PremiumTransactionAKID\n\tON LKP_DEFENSEANDLIABILITY_in_PremiumTransactionAKID.PremiumTransactionAKID = in_PremiumTransactionAKID\n\n\tLEFT JOIN LKP_PROGRAMCODEFORNSI LKP_PROGRAMCODEFORNSI_in_ProgramAKId\n\tON LKP_PROGRAMCODEFORNSI_in_ProgramAKId.ProgramAKId = in_ProgramAKId\n\n),\nFIL_WorkDataCompromise AS (\n\tSELECT\n\tout_CreatedDate AS CreatedDate, \n\tout_ModifiedDate AS ModifiedDate, \n\tout_pol_id AS PolicyID, \n\tout_RiskLocationID AS RiskLocationID, \n\tout_PolicyCoverageID AS PolicyCoverageID, \n\tout_RatingCoverageID AS RatingCoverageID, \n\tout_PremiumTransactionID AS PremiumTransactionID, \n\tout_PremiumMasterCalculationID AS PremiumMasterCalculationID, \n\tout_RunDate AS RunDate, \n\tout_contract_cust_id AS ContractCustID, \n\tout_contract_cust_addr_id AS ContractCustAddrID, \n\tout_AgencyID AS AgencyID, \n\tout_PolKey AS PolKey, \n\tout_Company AS Company, \n\tout_Productcode AS ProductCode, \n\tout_ContractNumber AS ContractNumber, \n\tout_PolicyEffectiveDate AS PolicyEffectiveDate, \n\tout_PolicyExpirationDate AS PolicyExpirationDate, \n\tout_nameOfInsured AS NameOfInsured, \n\tout_MailingAddressStreetName AS MailingAddressStreetName, \n\tout_MailingAddressCity AS MailingAddressCity, \n\tout_MailingAddressState AS MailingAddressState, \n\tout_MailingAddressZipCode AS MailingAddressZipCode, \n\tout_TotalPackageGrossPremium AS TotalPackageGrossPremium, \n\tout_TotalPropertyGrossPremium AS TotalPropertyGrossPremium, \n\tout_FirstPartyLimit AS FirstPartyLimit, \n\tout_DeductibleAmount AS DeductibleAmount, \n\tout_OccupancyCode AS OccupancyCode, \n\tout_PolicyTotalInsuredValue AS PolicyTotalInsuredValue, \n\tout_PreviousPolicyNumber AS PreviousPolicyNumber, \n\tout_AgencyCode AS AgencyCode, \n\tout_BranchCode AS BranchCode, \n\tout_ThirdPartyIndicator AS ThirdPartyIndicator, \n\tout_TransactionCode AS TransactionCode, \n\tout_TransactionEffectiveDate AS TransactionEffectiveDate, \n\tout_CoverageEffectiveDate AS CoverageEffectiveDate, \n\tout_CoverageExpirationDate AS CoverageExpirationDate, \n\tout_CoverageGrossPremium AS CoverageGrossPremium, \n\tout_CoverageNetPremium AS CoverageNetPremium, \n\tout_ProgramID AS ProgramID, \n\tout_AuditID AS AuditID, \n\tout_SourceSystemID AS SourceSystemID, \n\tlkp_WorkDataCompromiseId, \n\tPolicyCancellationDate\n\tFROM EXP_GetValues\n\tWHERE ContractNumber != '' and ProgramID  != '' and isnull(lkp_WorkDataCompromiseId)\r\n--fix for Defect 3350 adding filter condition to limit only valid and active coverages\r\n--and isnull(StatisticalCoverageCancellationDate)\n),\nWorkDataCompromise AS (\n\tINSERT INTO WorkDataCompromise\n\t(AuditID, SourceSystemID, CreatedDate, ModifiedDate, PolicyID, RiskLocationID, PolicyCoverageID, RatingCoverageID, PremiumTransactionID, PremiumMasterCalculationID, RunDate, ContractCustID, ContractCustAddrID, AgencyID, PolKey, Company, ProductCode, ContractNumber, PolicyEffectiveDate, PolicyExpirationDate, NameOfInsured, MailingAddressStreetName, MailingAddressCity, MailingAddressState, MailingAddressZipCode, TotalPackageGrossPremium, TotalPropertyGrossPremium, FirstPartyLimit, DeductibleAmount, OccupancyCode, PolicyTotalInsuredValue, PreviousPolicyNumber, AgencyCode, BranchCode, ThirdPartyIndicator, TransactionCode, TransactionEffectiveDate, CoverageEffectiveDate, CoverageExpirationDate, CoverageGrossPremium, CoverageNetPremium, ProgramID, PolicyCancellationDate)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPOLICYID, \n\tRISKLOCATIONID, \n\tPOLICYCOVERAGEID, \n\tRATINGCOVERAGEID, \n\tPREMIUMTRANSACTIONID, \n\tPREMIUMMASTERCALCULATIONID, \n\tRUNDATE, \n\tCONTRACTCUSTID, \n\tCONTRACTCUSTADDRID, \n\tAGENCYID, \n\tPOLKEY, \n\tCOMPANY, \n\tPRODUCTCODE, \n\tCONTRACTNUMBER, \n\tPOLICYEFFECTIVEDATE, \n\tPOLICYEXPIRATIONDATE, \n\tNAMEOFINSURED, \n\tMAILINGADDRESSSTREETNAME, \n\tMAILINGADDRESSCITY, \n\tMAILINGADDRESSSTATE, \n\tMAILINGADDRESSZIPCODE, \n\tTOTALPACKAGEGROSSPREMIUM, \n\tTOTALPROPERTYGROSSPREMIUM, \n\tFIRSTPARTYLIMIT, \n\tDEDUCTIBLEAMOUNT, \n\tOCCUPANCYCODE, \n\tPOLICYTOTALINSUREDVALUE, \n\tPREVIOUSPOLICYNUMBER, \n\tAGENCYCODE, \n\tBRANCHCODE, \n\tTHIRDPARTYINDICATOR, \n\tTRANSACTIONCODE, \n\tTRANSACTIONEFFECTIVEDATE, \n\tCOVERAGEEFFECTIVEDATE, \n\tCOVERAGEEXPIRATIONDATE, \n\tCOVERAGEGROSSPREMIUM, \n\tCOVERAGENETPREMIUM, \n\tPROGRAMID, \n\tPOLICYCANCELLATIONDATE\n\tFROM FIL_WorkDataCompromise\n),\nSQ_WorkDataCompromise_RatingCoverage AS (\n\t;With _CTE as (\r\n\tselect distinct substring(polkey,4,9) as polkey, RatingCoverageID, WorkDataCompromiseId\r\n\tfrom \r\n\t-- gathering only records from within the past year, we do not want to keep reprocessing old history\r\n\tDataFeedMart.dbo.WorkDataCompromise where Convert(Date,RunDate) >= CONVERT(DATE,DATEADD(Year,-1,@{pipeline().parameters.RUNDATE}))\r\n\tand OccupancyCode='0'\r\n\t)\r\n\t\r\n\tSelect B.polkey,B.WorkDataCompromiseId, \r\n\tCase When B.AK_ClassCode ='N/A' then B.EB_ClassCode Else B.AK_ClassCode End as OccupancyCode\r\n\t\r\n\tFrom(\r\n\tselect distinct  \r\n\tpolkey, \r\n\tRC.CoverageType,\r\n\tisnull(RCAK.ClassCode,'N/A') as AK_ClassCode, \r\n\tB.WorkDataCompromiseId, \r\n\tisnull(A.ClassCode,'N/A') as EB_ClassCode, \r\n\tisnull(A.CoverageType,'N/A') as EB_CoverageType, \r\n\tisnull(A.RatingcoverageId, 0) as EB_RatingCoverageId, \r\n\tcase \r\n\twhen A.RatingcoverageId is null then 1 else\r\n\tROW_NUMBER() Over (partition by WorkDataCompromiseId order by A.RatingcoverageId desc) \r\n\tEnd as rn\r\n\tfrom \r\n\tRatingCoverage RC with (nolock)\r\n\tinner join _CTE B on RC.RatingCoverageId=B.RatingCoverageID\r\n\tinner join PolicyCoverage PC with (nolock) on RC.PolicyCoverageAKID=PC.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\tinner join v2.policy P with (nolock) on PC.PolicyAKID=P.pol_ak_id and P.crrnt_snpsht_flag=1 \r\n\tleft join RatingCoverage RCAK with (nolock) on RC.RatingCoverageAKID=RCAK.RatingCoverageAKID and RCAK.ClassCode !='0'\r\n\touter apply\r\n\t(select distinct RC_EB.ClassCode, RC_EB.CoverageType, max(RC_EB.ratingcoverageid) as RatingcoverageId\r\n\tfrom \r\n\tv2.policy P2 with (nolock)\r\n\tinner join PolicyCoverage PC2 with (nolock) on P2.pol_ak_id=PC2.PolicyAKID and PC2.currentsnapshotflag=1\r\n\tinner join RatingCoverage RC_EB with (nolock) on RC_EB.PolicyCoverageAKID=PC2.PolicyCoverageAKID \r\n\tand RC_EB.CoverageType='EquipmentBreakdown' and RC_EB.ClassCode not in ('0','N/A') and RCAK.ClassCode is null\r\n\twhere P2.pol_key=P.pol_key\r\n\tgroup by RC_EB.ClassCode, RC_EB.CoverageType\r\n\t) A\r\n\t) B where rn=1 \r\n\torder by 2\n),\nEXP_Update_OccupancyCode_Input AS (\n\tSELECT\n\tPolKey,\n\tWorkDataCompromiseId,\n\tOccupancyCode\n\tFROM SQ_WorkDataCompromise_RatingCoverage\n),\nUPD_Update_OccupancyCode AS (\n\tSELECT\n\tWorkDataCompromiseId, \n\tOccupancyCode\n\tFROM EXP_Update_OccupancyCode_Input\n),\nWorkDataCompromise_Update AS (\n\tMERGE INTO WorkDataCompromise AS T\n\tUSING UPD_Update_OccupancyCode AS S\n\tON T.WorkDataCompromiseId = S.WorkDataCompromiseId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.OccupancyCode = S.OccupancyCode\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "STARTDATE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "ENDDATE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "EXTRACTDATE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "RUNDATE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}