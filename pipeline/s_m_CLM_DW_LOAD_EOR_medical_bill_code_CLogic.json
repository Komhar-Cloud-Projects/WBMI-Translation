{
    "name": "s_m_CLM_DW_LOAD_EOR_medical_bill_code_CLogic",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_EOR_medical_bill_code_CLogic",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSEQ_medical_bill_code_ak_id AS (\n\tCREATE SEQUENCE SEQ_medical_bill_code_ak_id\n\tSTART = 10000000\n\tINCREMENT = 1;\n),\nSQ_med_bill_code_stage AS (\n\tSELECT \r\n\tRTRIM(med_bill_code_stage.med_bill_id), \r\n\tCASE RTRIM(med_bill_code_stage.code_type) WHEN '' THEN NULL ELSE RTRIM(med_bill_code_stage.code_type) END,  \r\n\tCASE RTRIM(med_bill_code_stage.code) WHEN '' THEN NULL ELSE RTRIM(med_bill_code_stage.code) END , \r\n\tCASE RTRIM(med_bill_code_stage.descript) WHEN '' THEN NULL ELSE  Substring(RTRIM(med_bill_code_stage.descript),1,11)  END , \r\n\tmed_bill_service_stage.serv_seq_num \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.med_bill_code_stage med_bill_code_stage left outer join  @{pipeline().parameters.SOURCE_TABLE_OWNER}.med_bill_service_stage med_bill_service_stage\r\n\ton \r\n\tmed_bill_code_stage.med_bill_id =  med_bill_service_stage.med_bill_id and\r\n\tmed_bill_code_stage.med_bill_serv_id = med_bill_service_stage.med_bill_serv_id\r\n\tWHERE 1=1\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\torder by \r\n\tmed_bill_code_stage.med_bill_id, \r\n\tmed_bill_service_stage.serv_seq_num\n),\nLKP_MED_BILL_KEY AS (\n\tSELECT\n\tmed_bill_ak_id,\n\tmed_bill_key\n\tFROM (\n\t\tSELECT \r\n\t\tmedical_bill.med_bill_ak_id as med_bill_ak_id, \r\n\t\tRTRIM(medical_bill.med_bill_key) as med_bill_key \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill medical_bill\r\n\t\tWHERE\r\n\t\tmedical_bill.CRRNT_SNPSHT_FLAG = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_bill_key ORDER BY med_bill_ak_id) = 1\n),\nLKP_MEDICAL_BILL_SERVICE AS (\n\tSELECT\n\tmed_bill_serv_ak_id,\n\tmed_bill_ak_id,\n\tserv_seq_num\n\tFROM (\n\t\tSELECT \r\n\t\tmedical_bill_service.med_bill_serv_ak_id as med_bill_serv_ak_id,\r\n\t\tmedical_bill_service.med_bill_ak_id as med_bill_ak_id,\r\n\t\tmedical_bill_service.serv_seq_num as serv_seq_num\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_service\r\n\t\torder by medical_bill_service.med_bill_serv_ak_id,medical_bill_service.serv_seq_num , created_date desc --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_bill_ak_id,serv_seq_num ORDER BY med_bill_serv_ak_id) = 1\n),\nEXP_CODE_TYPE AS (\n\tSELECT\n\tLKP_MED_BILL_KEY.med_bill_ak_id,\n\tLKP_MEDICAL_BILL_SERVICE.med_bill_serv_ak_id,\n\tSQ_med_bill_code_stage.code_type,\n\tSQ_med_bill_code_stage.code,\n\tSQ_med_bill_code_stage.descript\n\tFROM SQ_med_bill_code_stage\n\tLEFT JOIN LKP_MEDICAL_BILL_SERVICE\n\tON LKP_MEDICAL_BILL_SERVICE.med_bill_ak_id = LKP_MED_BILL_KEY.med_bill_ak_id AND LKP_MEDICAL_BILL_SERVICE.serv_seq_num = SQ_med_bill_code_stage.serv_seq_num\n\tLEFT JOIN LKP_MED_BILL_KEY\n\tON LKP_MED_BILL_KEY.med_bill_key = SQ_med_bill_code_stage.med_bill_id\n),\nLKP_MEDICAL_BILL_CODE1 AS (\n\tSELECT\n\tmed_bill_code_ak_id,\n\tmed_bill_ak_id,\n\tmed_bill_serv_ak_id,\n\tmed_bill_code,\n\tmed_bill_code_type,\n\tmed_bill_code_descript\n\tFROM (\n\t\tSELECT \r\n\t\tmed_bill_code_id as med_bill_code_id,\r\n\t\tmedical_bill_code.med_bill_code_ak_id as med_bill_code_ak_id, \r\n\t\tmedical_bill_code.med_bill_ak_id as med_bill_ak_id, \r\n\t\tmedical_bill_code.med_bill_serv_ak_id as med_bill_serv_ak_id, \r\n\t\trtrim(medical_bill_code.med_bill_code) as med_bill_code, \r\n\t\trtrim(medical_bill_code.med_bill_code_descript) as med_bill_code_descript, \r\n\t\trtrim(medical_bill_code.med_bill_code_type) as med_bill_code_type\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_code medical_bill_code\r\n\t\twhere medical_bill_code.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_bill_ak_id,med_bill_serv_ak_id,med_bill_code,med_bill_code_type,med_bill_code_descript ORDER BY med_bill_code_ak_id) = 1\n),\nEXPTRANS AS (\n\tSELECT\n\tEXP_CODE_TYPE.med_bill_ak_id AS in_med_bill_ak_id,\n\tEXP_CODE_TYPE.med_bill_serv_ak_id AS in_med_bill_serv_ak_id,\n\tEXP_CODE_TYPE.code_type AS in_code_type,\n\tEXP_CODE_TYPE.code AS in_code,\n\tEXP_CODE_TYPE.descript AS in_descript,\n\t-- *INF*: TO_DATE('01/01/1800','MM/DD/YYYY')\n\tTO_TIMESTAMP('01/01/1800', 'MM/DD/YYYY') AS out_med_bill_date,\n\tLKP_MEDICAL_BILL_CODE1.med_bill_code_ak_id,\n\t-- *INF*: IIF(ISnull(med_bill_code_ak_id),'NEW'\r\n\t-- ,'NOCHANGE')\n\tIFF(med_bill_code_ak_id IS NULL, 'NEW', 'NOCHANGE') AS V_ChangeFlag,\n\tV_ChangeFlag AS ChangeFlag\n\tFROM EXP_CODE_TYPE\n\tLEFT JOIN LKP_MEDICAL_BILL_CODE1\n\tON LKP_MEDICAL_BILL_CODE1.med_bill_ak_id = EXP_CODE_TYPE.med_bill_ak_id AND LKP_MEDICAL_BILL_CODE1.med_bill_serv_ak_id = EXP_CODE_TYPE.med_bill_serv_ak_id AND LKP_MEDICAL_BILL_CODE1.med_bill_code = EXP_CODE_TYPE.code AND LKP_MEDICAL_BILL_CODE1.med_bill_code_type = EXP_CODE_TYPE.code_type AND LKP_MEDICAL_BILL_CODE1.med_bill_code_descript = EXP_CODE_TYPE.descript\n),\nrouter_update_insert AS (\n\tSELECT\n\tmed_bill_code_ak_id,\n\tin_med_bill_ak_id AS med_bill_ak_id,\n\tin_med_bill_serv_ak_id AS med_bill_serv_ak_id,\n\tin_code_type AS med_bill_code_type,\n\tin_code AS med_bill_code,\n\tin_descript AS med_bill_code_descript,\n\tout_med_bill_date AS med_bill_date,\n\tChangeFlag\n\tFROM EXPTRANS\n),\nrouter_update_insert_NEW_ROW AS (SELECT * FROM router_update_insert WHERE ChangeFlag='NEW'),\nEXP_AUDIT_FIELDS AS (\n\tSELECT\n\t-- *INF*:   IIF(ChangeFlag='NEW', NEXTVAL, med_bill_code_ak_id)\n\tIFF(ChangeFlag = 'NEW', NEXTVAL, med_bill_code_ak_id) AS med_bill_code_ak_id_out,\n\tmed_bill_code_ak_id,\n\tmed_bill_ak_id,\n\tmed_bill_serv_ak_id,\n\tmed_bill_code_type,\n\tmed_bill_code,\n\tmed_bill_code_descript,\n\tmed_bill_date,\n\tChangeFlag,\n\tSEQ_medical_bill_code_ak_id.NEXTVAL,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(ChangeFlag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(\n\t    ChangeFlag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tsysdate AS created_date\n\tFROM router_update_insert_NEW_ROW\n),\nmedical_bill_code_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_code\n\t(med_bill_code_ak_id, med_bill_ak_id, med_bill_serv_ak_id, med_bill_code_type, med_bill_code, med_bill_code_descript, med_bill_date, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tmed_bill_code_ak_id_out AS MED_BILL_CODE_AK_ID, \n\tMED_BILL_AK_ID, \n\tMED_BILL_SERV_AK_ID, \n\tMED_BILL_CODE_TYPE, \n\tMED_BILL_CODE, \n\tMED_BILL_CODE_DESCRIPT, \n\tMED_BILL_DATE, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tcreated_date AS MODIFIED_DATE\n\tFROM EXP_AUDIT_FIELDS\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Claims DataWarehouse/"
        },
        "annotations": []
    }
}