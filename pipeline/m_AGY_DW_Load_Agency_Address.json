{
    "name": "m_AGY_DW_Load_Agency_Address",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_Load_Agency_Address",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nAgency_address_Stage AS (\n\tSELECT\n\t\tagency_address_stage_id,\n\t\tSTATE_CODE,\n\t\tAGENCY_NUM,\n\t\tADDRESS_TYPE,\n\t\tADDRESS_LINE_1,\n\t\tADDRESS_LINE_2,\n\t\tADDRESS_LINE_3,\n\t\tCITY,\n\t\tPOSTAL_CODE,\n\t\tZIP_PLUS_4,\n\t\tCOUNTY,\n\t\tSTATE_ABBREV,\n\t\tCOUNTRY,\n\t\tAGENCY_CODE,\n\t\tCOUNTY_LOCATION,\n\t\tEXTRACT_DATE,\n\t\tAS_OF_DATE,\n\t\tRECORD_COUNT,\n\t\tSOURCE_SYSTEM_ID\n\tFROM Agency_address_Stage\n\tINNER JOIN Agency_address_Stage\n),\nEXP_AGY_address_convert AS (\n\tSELECT\n\tagency_address_stage_id,\n\tSTATE_CODE AS IN_STATE_CODE,\n\tAGENCY_NUM AS IN_AGENCY_NUM,\n\tADDRESS_TYPE AS in_ADDRESS_TYPE,\n\tADDRESS_LINE_1,\n\tADDRESS_LINE_2,\n\tADDRESS_LINE_3,\n\tCITY AS IN_CITY,\n\tPOSTAL_CODE AS IN_POSTAL_CODE,\n\tZIP_PLUS_4 AS IN_ZIP_PLUS_4,\n\tCOUNTY AS IN_COUNTY,\n\tSTATE_ABBREV AS IN_STATE_ABBREV,\n\tCOUNTRY AS IN_COUNTRY,\n\tAGENCY_CODE AS IN_AGENCY_CODE,\n\tCOUNTY_LOCATION AS IN_COUNTY_LOCATION,\n\t-- *INF*: iif(isnull(IN_STATE_CODE),'N/A',iif(IS_SPACES(IN_STATE_CODE),'N/A',IN_STATE_CODE))\n\tIFF(IN_STATE_CODE IS NULL, 'N/A', IFF(IS_SPACES(IN_STATE_CODE), 'N/A', IN_STATE_CODE)) AS STATE_CODE,\n\t-- *INF*: iif(isnull(IN_AGENCY_NUM),'N/A',iif(IS_SPACES(IN_AGENCY_NUM),'N/A',IN_AGENCY_NUM))\n\tIFF(IN_AGENCY_NUM IS NULL, 'N/A', IFF(IS_SPACES(IN_AGENCY_NUM), 'N/A', IN_AGENCY_NUM)) AS AGENCY_NUM,\n\t-- *INF*: iif(isnull(in_ADDRESS_TYPE),'N/A',\r\n\t-- iif(IS_SPACES(in_ADDRESS_TYPE),'N/A',\r\n\t-- rpad(in_ADDRESS_TYPE,3)))\n\tIFF(in_ADDRESS_TYPE IS NULL, 'N/A', IFF(IS_SPACES(in_ADDRESS_TYPE), 'N/A', rpad(in_ADDRESS_TYPE, 3))) AS ADDRESS_TYPE,\n\t-- *INF*: iif(isnull(IN_CITY),'Not Available',iif(IS_SPACES(IN_CITY),'Not Available',IN_CITY))\n\tIFF(IN_CITY IS NULL, 'Not Available', IFF(IS_SPACES(IN_CITY), 'Not Available', IN_CITY)) AS CITY,\n\t-- *INF*: iif(isnull(IN_POSTAL_CODE),'N/A',iif(IS_SPACES(IN_POSTAL_CODE),'N/A',\r\n\t-- iif(length(IN_POSTAL_CODE)=0,'N/A',IN_POSTAL_CODE)))\n\tIFF(IN_POSTAL_CODE IS NULL, 'N/A', IFF(IS_SPACES(IN_POSTAL_CODE), 'N/A', IFF(length(IN_POSTAL_CODE) = 0, 'N/A', IN_POSTAL_CODE))) AS POSTAL_CODE,\n\t-- *INF*: iif(isnull(IN_ZIP_PLUS_4),'N/A',iif(IS_SPACES(IN_ZIP_PLUS_4),'N/A',IN_ZIP_PLUS_4))\n\tIFF(IN_ZIP_PLUS_4 IS NULL, 'N/A', IFF(IS_SPACES(IN_ZIP_PLUS_4), 'N/A', IN_ZIP_PLUS_4)) AS ZIP_PLUS_4,\n\t-- *INF*: iif(isnull(IN_COUNTY),'Not Available',iif(IS_SPACES(IN_COUNTY),'Not Available',IN_COUNTY))\n\tIFF(IN_COUNTY IS NULL, 'Not Available', IFF(IS_SPACES(IN_COUNTY), 'Not Available', IN_COUNTY)) AS COUNTY,\n\t-- *INF*: iif(isnull(IN_STATE_ABBREV),'N/A',iif(IS_SPACES(IN_STATE_ABBREV),'N/A',rpad(IN_STATE_ABBREV,3)))\n\tIFF(IN_STATE_ABBREV IS NULL, 'N/A', IFF(IS_SPACES(IN_STATE_ABBREV), 'N/A', rpad(IN_STATE_ABBREV, 3))) AS STATE_ABBREV,\n\t-- *INF*: iif(isnull(IN_COUNTRY),'Not Available',iif(IS_SPACES(IN_COUNTRY),'Not Available',IN_COUNTRY))\n\tIFF(IN_COUNTRY IS NULL, 'Not Available', IFF(IS_SPACES(IN_COUNTRY), 'Not Available', IN_COUNTRY)) AS COUNTRY,\n\t-- *INF*: iif(isnull(IN_AGENCY_CODE),'N/A',iif(IS_SPACES(IN_AGENCY_CODE),'N/A',IN_AGENCY_CODE))\n\tIFF(IN_AGENCY_CODE IS NULL, 'N/A', IFF(IS_SPACES(IN_AGENCY_CODE), 'N/A', IN_AGENCY_CODE)) AS AGENCY_CODE,\n\t-- *INF*: iif(isnull(IN_COUNTY_LOCATION),'Not Available',iif(IS_SPACES(IN_COUNTY_LOCATION),'Not Available',\r\n\t-- iif(length(IN_COUNTY_LOCATION)=0,'Not Available',IN_COUNTY_LOCATION)))\n\tIFF(IN_COUNTY_LOCATION IS NULL, 'Not Available', IFF(IS_SPACES(IN_COUNTY_LOCATION), 'Not Available', IFF(length(IN_COUNTY_LOCATION) = 0, 'Not Available', IN_COUNTY_LOCATION))) AS COUNTY_LOCATION,\n\tSOURCE_SYSTEM_ID,\n\t-- *INF*: iif(isnull\r\n\t-- ((ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3)),'Not Available',\r\n\t-- iif(is_spaces((ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3)),'Not Available',\r\n\t-- (ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3)\r\n\t-- ))\n\tIFF(( ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3 ) IS NULL, 'Not Available', IFF(is_spaces(( ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3 )), 'Not Available', ( ADDRESS_LINE_1 || ADDRESS_LINE_2 || ADDRESS_LINE_3 ))) AS OUT_AGENCY_ADDRESS,\n\tIN_STATE_CODE || IN_AGENCY_NUM AS v_agency_key,\n\t-- *INF*: iif(isnull(STATE_CODE || AGENCY_NUM),'N/A',\r\n\t-- iif(is_spaces(STATE_CODE || AGENCY_NUM),'N/A',\r\n\t-- STATE_CODE || AGENCY_NUM))\n\tIFF(STATE_CODE || AGENCY_NUM IS NULL, 'N/A', IFF(is_spaces(STATE_CODE || AGENCY_NUM), 'N/A', STATE_CODE || AGENCY_NUM)) AS OUT_AGENCY_KEY\n\tFROM Agency_address_Stage\n),\nLKP_Agency AS (\n\tSELECT\n\tagency_ak_id,\n\tagency_state_code,\n\tagency_key\n\tFROM (\n\t\tSELECT a.agency_ak_id as agency_ak_id, \r\n\t\ta.agency_state_code as agency_state_code, \r\n\t\ta.agency_key as agency_key\r\n\t\t FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency a\r\n\t\twhere crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY agency_key ORDER BY agency_ak_id) = 1\n),\nLKP_Agency_Address AS (\n\tSELECT\n\tagency_address_id,\n\tagency_addr_ak_id,\n\tagency_ak_id,\n\tagency_address,\n\tcity,\n\tpostal_code,\n\tzip_plus_4,\n\tcounty,\n\tstate_abbrev,\n\tcountry,\n\tcounty_location,\n\tagency_key,\n\taddress_type\n\tFROM (\n\t\tSELECT a.agency_address_id as agency_address_id, \r\n\t\ta.agency_addr_ak_id as agency_addr_ak_id,\r\n\t\ta.agency_address as agency_address, \r\n\t\ta.city as city,\r\n\t\ta.postal_code as postal_code, \r\n\t\ta.zip_plus_4 as zip_plus_4, \r\n\t\ta.county as county, \r\n\t\ta.state_abbrev as state_abbrev, \r\n\t\ta.country as country, \r\n\t\ta.county_location as county_location, \r\n\t\ta.agency_ak_id as agency_ak_id, \r\n\t\ta.address_type as address_type, \r\n\t\ta.agency_key as agency_key \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency_address a\r\n\t\tWHERE a.agency_address_id IN(SELECT MAX(b.agency_address_id)\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency_address b\r\n\t\twhere crrnt_snpsht_flag=1\r\n\t\tgroup by b.address_type,b.agency_key)\r\n\t\torder by address_type,agency_key\r\n\t\t\r\n\t\t\r\n\t\t--IN Subquery exists so that we only pick the MAX value of the PK for each AK Group\r\n\t\t--WHERE clause is always eff_to_date = '12/31/2100'\r\n\t\t--GROUP BY clause is always the AK\r\n\t\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer generate an ORDER BY statement\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY agency_key,address_type ORDER BY agency_address_id) = 1\n),\nSEQ_Agency_Address AS (\n\tCREATE SEQUENCE SEQ_Agency_Address\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Load_AGY_Address AS (\n\tSELECT\n\tEXP_AGY_address_convert.ADDRESS_TYPE,\n\tEXP_AGY_address_convert.CITY,\n\tEXP_AGY_address_convert.POSTAL_CODE,\n\tEXP_AGY_address_convert.ZIP_PLUS_4 AS in_zip_plus_4,\n\t-- *INF*: rpad(in_zip_plus_4,4)\n\trpad(in_zip_plus_4, 4) AS v_zip_plus_4,\n\tv_zip_plus_4 AS ZIP_PLUS_4,\n\tEXP_AGY_address_convert.COUNTY,\n\tEXP_AGY_address_convert.STATE_ABBREV,\n\tEXP_AGY_address_convert.COUNTRY,\n\tEXP_AGY_address_convert.COUNTY_LOCATION,\n\tEXP_AGY_address_convert.OUT_AGENCY_ADDRESS,\n\tLKP_Agency.agency_ak_id AS OUT_AGENCY_ak_ID,\n\tEXP_AGY_address_convert.OUT_AGENCY_KEY,\n\tLKP_Agency_Address.agency_address_id,\n\tLKP_Agency_Address.agency_addr_ak_id,\n\tLKP_Agency_Address.city AS OLD_city,\n\tLKP_Agency_Address.postal_code AS OLD_postal_code,\n\tLKP_Agency_Address.zip_plus_4 AS OLD_zip_plus_4,\n\tLKP_Agency_Address.county AS OLD_county,\n\tLKP_Agency_Address.state_abbrev AS OLD_state_abbrev,\n\tLKP_Agency_Address.country AS OLD_country,\n\tLKP_Agency_Address.county_location AS OLD_county_location,\n\tLKP_Agency_Address.agency_address AS OLD_agency_address,\n\tLKP_Agency_Address.agency_ak_id AS OLD_agency_ak_id,\n\t-- *INF*: iif(isnull(agency_address_id),'NEW',\r\n\t-- \tiif(\t(CITY <> OLD_city) or\r\n\t-- \t(POSTAL_CODE <> OLD_postal_code) or\r\n\t-- \t( v_zip_plus_4 <> OLD_zip_plus_4) or\r\n\t--        ( COUNTY<> OLD_county) or\r\n\t-- \t( STATE_ABBREV<> OLD_state_abbrev) or\r\n\t-- \t( COUNTRY<> OLD_country) or\r\n\t-- \t(COUNTY_LOCATION <> OLD_county_location) or \r\n\t-- \t(OUT_AGENCY_ADDRESS <> OLD_agency_address) or\r\n\t-- \t(OUT_AGENCY_ak_ID <> OLD_agency_ak_id),\r\n\t-- \t\t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(agency_address_id IS NULL, 'NEW', IFF(( CITY <> OLD_city ) OR ( POSTAL_CODE <> OLD_postal_code ) OR ( v_zip_plus_4 <> OLD_zip_plus_4 ) OR ( COUNTY <> OLD_county ) OR ( STATE_ABBREV <> OLD_state_abbrev ) OR ( COUNTRY <> OLD_country ) OR ( COUNTY_LOCATION <> OLD_county_location ) OR ( OUT_AGENCY_ADDRESS <> OLD_agency_address ) OR ( OUT_AGENCY_ak_ID <> OLD_agency_ak_id ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\t1 AS Crrnt_SnapSht_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_id,\n\tEXP_AGY_address_convert.SOURCE_SYSTEM_ID,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\r\n\t-- \r\n\t-- --sysdate normally has a time value.  We don't want the time value as our effectivity runs from day to day starting at midnight\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS Eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tto_date('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_to_date,\n\tsysdate AS Created_date,\n\tsysdate AS Modified_date,\n\tv_changed_flag AS changed_flag,\n\tEXP_AGY_address_convert.IN_STATE_CODE,\n\t-- *INF*: RPAD(IN_STATE_CODE,3)\n\tRPAD(IN_STATE_CODE, 3) AS out_state_code,\n\tSEQ_Agency_Address.NEXTVAL,\n\t-- *INF*: IIF(v_changed_flag='NEW',\r\n\t-- NEXTVAL,\r\n\t-- agency_addr_ak_id)\n\tIFF(v_changed_flag = 'NEW', NEXTVAL, agency_addr_ak_id) AS out_agency_addr_ak_id\n\tFROM EXP_AGY_address_convert\n\tLEFT JOIN LKP_Agency\n\tON LKP_Agency.agency_key = EXP_AGY_address_convert.OUT_AGENCY_KEY\n\tLEFT JOIN LKP_Agency_Address\n\tON LKP_Agency_Address.agency_key = EXP_AGY_address_convert.OUT_AGENCY_KEY AND LKP_Agency_Address.address_type = EXP_AGY_address_convert.ADDRESS_TYPE\n),\nFIL_AGY_Address_Insert AS (\n\tSELECT\n\tEXP_Load_AGY_Address.out_agency_addr_ak_id, \n\tEXP_Load_AGY_Address.ADDRESS_TYPE, \n\tEXP_Load_AGY_Address.OUT_AGENCY_ADDRESS, \n\tEXP_Load_AGY_Address.CITY, \n\tEXP_Load_AGY_Address.POSTAL_CODE, \n\tEXP_Load_AGY_Address.ZIP_PLUS_4, \n\tEXP_Load_AGY_Address.COUNTY, \n\tEXP_Load_AGY_Address.STATE_ABBREV, \n\tEXP_Load_AGY_Address.COUNTRY, \n\tEXP_Load_AGY_Address.OUT_AGENCY_KEY, \n\tEXP_Load_AGY_Address.COUNTY_LOCATION, \n\tEXP_Load_AGY_Address.OUT_AGENCY_ak_ID, \n\tEXP_Load_AGY_Address.Crrnt_SnapSht_Flag AS Crrnt_SnpSht_Flag, \n\tEXP_Load_AGY_Address.Audit_id, \n\tEXP_Load_AGY_Address.Eff_from_date, \n\tEXP_Load_AGY_Address.Eff_to_date, \n\tEXP_Load_AGY_Address.SOURCE_SYSTEM_ID, \n\tEXP_Load_AGY_Address.Created_date, \n\tEXP_Load_AGY_Address.Modified_date, \n\tEXP_Load_AGY_Address.changed_flag, \n\tEXP_Load_AGY_Address.out_state_code AS IN_STATE_CODE, \n\tLKP_Agency.agency_state_code\n\tFROM EXP_Load_AGY_Address\n\tLEFT JOIN LKP_Agency\n\tON LKP_Agency.agency_key = EXP_AGY_address_convert.OUT_AGENCY_KEY\n\tWHERE (IN_STATE_CODE= agency_state_code) and \r\n(changed_flag = 'NEW' or changed_flag = 'UPDATE') and (OUT_AGENCY_ADDRESS <> 'Not Available')\n),\nAgency_address_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.agency_address\n\t(agency_addr_ak_id, agency_ak_id, address_type, agency_address, city, postal_code, zip_plus_4, county, state_abbrev, country, agency_key, county_location, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_system_id, created_date, modified_date)\n\tSELECT \n\tout_agency_addr_ak_id AS AGENCY_ADDR_AK_ID, \n\tOUT_AGENCY_ak_ID AS AGENCY_AK_ID, \n\tADDRESS_TYPE AS ADDRESS_TYPE, \n\tOUT_AGENCY_ADDRESS AS AGENCY_ADDRESS, \n\tCITY AS CITY, \n\tPOSTAL_CODE AS POSTAL_CODE, \n\tZIP_PLUS_4 AS ZIP_PLUS_4, \n\tCOUNTY AS COUNTY, \n\tSTATE_ABBREV AS STATE_ABBREV, \n\tCOUNTRY AS COUNTRY, \n\tOUT_AGENCY_KEY AS AGENCY_KEY, \n\tCOUNTY_LOCATION AS COUNTY_LOCATION, \n\tCrrnt_SnpSht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_id AS AUDIT_ID, \n\tEff_from_date AS EFF_FROM_DATE, \n\tEff_to_date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYSTEM_ID, \n\tCreated_date AS CREATED_DATE, \n\tModified_date AS MODIFIED_DATE\n\tFROM FIL_AGY_Address_Insert\n),\nAgency_address_upd AS (\n\tSELECT a.agency_address_id,\r\n\ta.address_type, \r\n\ta.agency_key, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.agency_address a\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\t\tFROM  @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agency_Address b\r\n\t\tWHERE eff_to_date = '12/31/2100 23:59:59'\r\n\t\tAND a.address_type = b.address_type\r\n\t\tand a.agency_key = b.agency_key\r\n\t\tGROUP BY address_type,agency_key\r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY address_type, agency_key,eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of eff_to_date='12/31/2100' and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the\r\n\t--eff_to_date by utilizing a local variable to keep track\n),\nEXP_Agy_Address_Upd_desc AS (\n\tSELECT\n\tagency_address_id,\n\taddress_type,\n\tagency_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE (TRUE, address_type = v_PREV_ROW_address_type and agency_key = v_PREV_ROW_agency_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\taddress_type = v_PREV_ROW_address_type AND agency_key = v_PREV_ROW_agency_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\taddress_type AS v_PREV_ROW_address_type,\n\tagency_key AS v_PREV_ROW_agency_key,\n\t0 AS Crrnt_Snpsht_flag,\n\tsysdate AS modified_date\n\tFROM Agency_address_upd\n),\nFIL_Agy_address_upd AS (\n\tSELECT\n\tagency_address_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tCrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM EXP_Agy_Address_Upd_desc\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_Agy_Address AS (\n\tSELECT\n\tagency_address_id, \n\teff_to_date, \n\tCrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM FIL_Agy_address_upd\n),\nagency_address_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.agency_address AS T\n\tUSING UPD_Agy_Address AS S\n\tON T.agency_address_id = S.agency_address_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.Crrnt_Snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246519"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905540"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604609"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:18:00"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 05:12:52"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Agency"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Agency"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "AGENCY"
            }
        },
        "folder": {
            "name": "Agency DataWarehouse/"
        },
        "annotations": []
    }
}