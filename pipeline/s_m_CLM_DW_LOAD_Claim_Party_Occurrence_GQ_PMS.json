{
    "name": "s_m_CLM_DW_LOAD_Claim_Party_Occurrence_GQ_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_Occurrence_GQ_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_CLAIM_OCCURRENCE AS (\n\tSELECT\n\tclaim_occurrence_ak_id,\n\tclaim_occurrence_key\n\tFROM (\n\t\tSELECT \r\n\t\t   claim_occurrence.claim_occurrence_ak_id as claim_occurrence_ak_id, \r\n\t\t   claim_occurrence.claim_occurrence_key as claim_occurrence_key \r\n\t\tFROM \r\n\t\t   claim_occurrence\r\n\t\tWHERE\r\n\t\t   source_sys_id = '@{pipeline().parameters.SOURCE_SYS_ID}' AND crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_key ORDER BY claim_occurrence_ak_id) = 1\n),\nLKP_CLAIM_PARTY AS (\n\tSELECT\n\tclaim_party_ak_id,\n\tclaim_party_key\n\tFROM (\n\t\tSELECT \r\n\t\t   claim_party.claim_party_ak_id as claim_party_ak_id, \r\n\t\t   claim_party.claim_party_key as claim_party_key \r\n\t\tFROM \r\n\t\t   claim_party\r\n\t\tWHERE \r\n\t\t   source_sys_id = 'PMS' AND crrnt_snpsht_flag = '1'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_ak_id) = 1\n),\nLKP_CLAIM_CASE_AK_ID AS (\n\tSELECT\n\tclaim_case_ak_id,\n\tclaim_case_key\n\tFROM (\n\t\tSELECT \r\n\t\tclaim_case.claim_case_ak_id as claim_case_ak_id, \r\n\t\tclaim_case.claim_case_key as claim_case_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case \r\n\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_case_key ORDER BY claim_case_ak_id) = 1\n),\nSQ_PIF_42GQ_ATY_stage AS (\n\tSELECT (PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'ATTY') as CLAIM_PARTY_KEY, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR)) as CLAIM_OCCURRENCE_KEY,\r\n\t'ATTY' as USE_CODE\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_ATTORNEY_NAME_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_ATTORNEY_NAME_1)) <> 0\r\n\tand pif_42gq_aty_stage.logical_flag='0'\r\n\tUNION\r\n\tSELECT (PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'PLAT') as CLAIM_PARTY_KEY, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR)) as CLAIM_OCCURRENCE_KEY,\r\n\t'PLAT' as USE_CODE\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_PLAINTIFF_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_PLAINTIFF_1)) <> 0 \r\n\tand pif_42gq_aty_stage.logical_flag='0'\r\n\tUNION\r\n\tSELECT (PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_CLAIMANT AS VARCHAR) + 'DEFD') as CLAIM_PARTY_KEY, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFCGQ_MONTH_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_MONTH_OF_LOSS AS VARCHAR) END + \r\n\tCASE len(IPFCGQ_DAY_OF_LOSS) when 1 THEN '0' + CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) ELSE CAST(IPFCGQ_DAY_OF_LOSS AS VARCHAR) END +\r\n\tCAST(IPFCGQ_YEAR_OF_LOSS AS VARCHAR) + \r\n\tCAST(IPFCGQ_LOSS_OCCURENCE AS VARCHAR)) as CLAIM_OCCURRENCE_KEY,\r\n\t'DEFD' as USE_CODE\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GQ_ATY_STAGE \r\n\tWHERE IPFCGQ_DEFENDANT_1 IS NOT NULL AND LEN(RTRIM(IPFCGQ_DEFENDANT_1)) <> 0\r\n\tand pif_42gq_aty_stage.logical_flag='0'\n),\nEXP_Values AS (\n\tSELECT\n\tCLAIM_PARTY_KEY,\n\tCLAIM_OCCURRENCE_KEY,\n\tUSE_CODE,\n\tIPFCGQ_OFFSET_ONSET_IND\n\tFROM SQ_PIF_42GQ_ATY_stage\n),\nEXP_Lkp_Values AS (\n\tSELECT\n\tCLAIM_PARTY_KEY,\n\tCLAIM_OCCURRENCE_KEY,\n\t-- *INF*: LTRIM(RTRIM(SUBSTR(CLAIM_PARTY_KEY,1,26)))\n\tLTRIM(RTRIM(SUBSTR(CLAIM_PARTY_KEY, 1, 26\n\t\t\t)\n\t\t)\n\t) AS V_Claim_Case_Key,\n\t-- *INF*: :LKP.LKP_CLAIM_CASE_AK_ID(V_Claim_Case_Key)\n\tLKP_CLAIM_CASE_AK_ID_V_Claim_Case_Key.claim_case_ak_id AS v_CLAIM_CASE_AK_ID,\n\t-- *INF*: IIF(ISNULL(v_CLAIM_CASE_AK_ID),-1,v_CLAIM_CASE_AK_ID)\n\tIFF(v_CLAIM_CASE_AK_ID IS NULL,\n\t\t- 1,\n\t\tv_CLAIM_CASE_AK_ID\n\t) AS CLAIM_CASE_AK_ID,\n\tUSE_CODE AS IPFCGQ_USE_CODE,\n\t-- *INF*: LTRIM(RTRIM(IPFCGQ_USE_CODE))\n\tLTRIM(RTRIM(IPFCGQ_USE_CODE\n\t\t)\n\t) AS USE_CODE,\n\t-- *INF*: :LKP.LKP_CLAIM_PARTY(CLAIM_PARTY_KEY)\r\n\t-- \r\n\t-- -- IIF(ISNULL(:LKP.LKP_CLAIM_PARTY(CLAIM_PARTY_KEY)),0,:LKP.LKP_CLAIM_PARTY(CLAIM_PARTY_KEY))\n\tLKP_CLAIM_PARTY_CLAIM_PARTY_KEY.claim_party_ak_id AS CLAIM_PARTY_AK_ID,\n\t-- *INF*: IIF(\r\n\t-- ISNULL(:LKP.LKP_CLAIM_OCCURRENCE(CLAIM_OCCURRENCE_KEY)),\r\n\t-- 0,\r\n\t-- :LKP.LKP_CLAIM_OCCURRENCE(CLAIM_OCCURRENCE_KEY))\n\tIFF(LKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY.claim_occurrence_ak_id IS NULL,\n\t\t0,\n\t\tLKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY.claim_occurrence_ak_id\n\t) AS CLAIM_OCCURRENCE_AK_ID,\n\t-- *INF*: TO_DATE('1/1/1800','MM/DD/YYYY')\r\n\t-- \n\tTO_DATE('1/1/1800', 'MM/DD/YYYY'\n\t) AS DENIAL_DATE,\n\tIPFCGQ_OFFSET_ONSET_IND AS in_IPFCGQ_OFFSET_ONSET_IND,\n\t-- *INF*: IIF((ISNULL(in_IPFCGQ_OFFSET_ONSET_IND) OR IS_SPACES(in_IPFCGQ_OFFSET_ONSET_IND) OR LENGTH(in_IPFCGQ_OFFSET_ONSET_IND) = 0),\r\n\t-- 'N/A',\r\n\t-- in_IPFCGQ_OFFSET_ONSET_IND)\r\n\t-- \n\tIFF(( in_IPFCGQ_OFFSET_ONSET_IND IS NULL \n\t\t\tOR LENGTH(in_IPFCGQ_OFFSET_ONSET_IND)>0 AND TRIM(in_IPFCGQ_OFFSET_ONSET_IND)='' \n\t\t\tOR LENGTH(in_IPFCGQ_OFFSET_ONSET_IND\n\t\t\t) = 0 \n\t\t),\n\t\t'N/A',\n\t\tin_IPFCGQ_OFFSET_ONSET_IND\n\t) AS IPFCGQ_OFFSET_ONSET_IND\n\tFROM EXP_Values\n\tLEFT JOIN LKP_CLAIM_CASE_AK_ID LKP_CLAIM_CASE_AK_ID_V_Claim_Case_Key\n\tON LKP_CLAIM_CASE_AK_ID_V_Claim_Case_Key.claim_case_key = V_Claim_Case_Key\n\n\tLEFT JOIN LKP_CLAIM_PARTY LKP_CLAIM_PARTY_CLAIM_PARTY_KEY\n\tON LKP_CLAIM_PARTY_CLAIM_PARTY_KEY.claim_party_key = CLAIM_PARTY_KEY\n\n\tLEFT JOIN LKP_CLAIM_OCCURRENCE LKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY\n\tON LKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY.claim_occurrence_key = CLAIM_OCCURRENCE_KEY\n\n),\nLKP_claim_party_occurrence AS (\n\tSELECT\n\tclaim_party_occurrence_id,\n\tclaim_party_occurrence_ak_id,\n\tdenial_date,\n\toffset_onset_ind,\n\tclaim_occurrence_ak_id,\n\tclaim_party_role_code,\n\tclaim_party_ak_id\n\tFROM (\n\t\tSELECT \r\n\t\ta.claim_party_occurrence_id as claim_party_occurrence_id, \r\n\t\ta.claim_party_occurrence_ak_id as claim_party_occurrence_ak_id,\r\n\t\ta.denial_date as denial_date, \r\n\t\ta.offset_onset_ind as offset_onset_ind,\r\n\t\ta.claim_occurrence_ak_id as claim_occurrence_ak_id, \r\n\t\tltrim(rtrim(a.claim_party_role_code)) as claim_party_role_code, \r\n\t\ta.claim_party_ak_id as claim_party_ak_id \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence a\r\n\t\tWHERE a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND a.crrnt_snpsht_flag = 1\r\n\t\tORDER BY claim_occurrence_ak_id, claim_party_role_code, claim_party_ak_id --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_ak_id,claim_party_role_code,claim_party_ak_id ORDER BY claim_party_occurrence_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_Lkp_Values.CLAIM_PARTY_AK_ID,\n\tEXP_Lkp_Values.USE_CODE AS IPFCGQ_USE_CODE,\n\tEXP_Lkp_Values.CLAIM_OCCURRENCE_AK_ID,\n\tEXP_Lkp_Values.DENIAL_DATE,\n\tEXP_Lkp_Values.IPFCGQ_OFFSET_ONSET_IND,\n\tEXP_Lkp_Values.CLAIM_CASE_AK_ID,\n\tLKP_claim_party_occurrence.claim_party_occurrence_id AS lkp_claim_party_occurrence_id,\n\tLKP_claim_party_occurrence.claim_party_occurrence_ak_id AS lkp_claim_party_occurrence_ak_id,\n\tLKP_claim_party_occurrence.denial_date AS lkp_denial_date,\n\tLKP_claim_party_occurrence.offset_onset_ind AS lkp_offset_onset_ind,\n\t'0' AS logical_flag_op,\n\t1 AS Crrnt_Snpsht_Flag,\n\t-- *INF*: iif(isnull(lkp_claim_party_occurrence_id), 'NEW',\r\n\t-- \tiif (lkp_denial_date <> DENIAL_DATE OR \r\n\t-- \tltrim(rtrim(lkp_offset_onset_ind)) <> ltrim(rtrim(IPFCGQ_OFFSET_ONSET_IND)) , \r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(lkp_claim_party_occurrence_id IS NULL,\n\t\t'NEW',\n\t\tIFF(lkp_denial_date <> DENIAL_DATE \n\t\t\tOR ltrim(rtrim(lkp_offset_onset_ind\n\t\t\t\t)\n\t\t\t) <> ltrim(rtrim(IPFCGQ_OFFSET_ONSET_IND\n\t\t\t\t)\n\t\t\t),\n\t\t\t'UPDATE',\n\t\t\t'NOCHANGE'\n\t\t)\n\t) AS v_Changed_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW',\n\t\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t),\n\t\tSYSDATE\n\t) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t) AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date,\n\t'N/A' AS out_claimant_num\n\tFROM EXP_Lkp_Values\n\tLEFT JOIN LKP_claim_party_occurrence\n\tON LKP_claim_party_occurrence.claim_occurrence_ak_id = EXP_Lkp_Values.CLAIM_OCCURRENCE_AK_ID AND LKP_claim_party_occurrence.claim_party_role_code = EXP_Lkp_Values.USE_CODE AND LKP_claim_party_occurrence.claim_party_ak_id = EXP_Lkp_Values.CLAIM_PARTY_AK_ID\n),\nFIL_Insert AS (\n\tSELECT\n\tlkp_claim_party_occurrence_ak_id, \n\tCLAIM_PARTY_AK_ID, \n\tCLAIM_OCCURRENCE_AK_ID, \n\tCLAIM_CASE_AK_ID, \n\tIPFCGQ_USE_CODE, \n\tDENIAL_DATE, \n\tIPFCGQ_OFFSET_ONSET_IND, \n\tlogical_flag_op, \n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tChanged_Flag, \n\tout_claimant_num\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_party_occurrence AS (\n\tCREATE SEQUENCE SEQ_claim_party_occurrence\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\tSEQ_claim_party_occurrence.NEXTVAL,\n\tlkp_claim_party_occurrence_ak_id,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, lkp_claim_party_occurrence_ak_id)\n\tIFF(Changed_Flag = 'NEW',\n\t\tNEXTVAL,\n\t\tlkp_claim_party_occurrence_ak_id\n\t) AS claim_party_occurrence_ak_id,\n\tCLAIM_PARTY_AK_ID,\n\tCLAIM_OCCURRENCE_AK_ID,\n\tCLAIM_CASE_AK_ID,\n\tIPFCGQ_USE_CODE,\n\tDENIAL_DATE,\n\tIPFCGQ_OFFSET_ONSET_IND,\n\tlogical_flag_op,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tChanged_Flag,\n\tout_claimant_num,\n\t'N/A' AS Out_Default_String\n\tFROM FIL_Insert\n),\nclaim_party_occurrence_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence\n\t(claim_party_occurrence_ak_id, claim_occurrence_ak_id, claim_party_ak_id, claim_case_ak_id, claim_party_role_code, claimant_num, denial_date, offset_onset_ind, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, preferred_contact_method)\n\tSELECT \n\tCLAIM_PARTY_OCCURRENCE_AK_ID, \n\tCLAIM_OCCURRENCE_AK_ID AS CLAIM_OCCURRENCE_AK_ID, \n\tCLAIM_PARTY_AK_ID AS CLAIM_PARTY_AK_ID, \n\tCLAIM_CASE_AK_ID AS CLAIM_CASE_AK_ID, \n\tIPFCGQ_USE_CODE AS CLAIM_PARTY_ROLE_CODE, \n\tout_claimant_num AS CLAIMANT_NUM, \n\tDENIAL_DATE AS DENIAL_DATE, \n\tIPFCGQ_OFFSET_ONSET_IND AS OFFSET_ONSET_IND, \n\tlogical_flag_op AS LOGICAL_FLAG, \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tOut_Default_String AS PREFERRED_CONTACT_METHOD\n\tFROM EXP_Determine_AK\n),\nSQ_claim_party_occurrence AS (\n\tSELECT \r\n\ta.claim_party_occurrence_id, \r\n\ta.claim_occurrence_ak_id, \r\n\ta.claim_party_role_code, \r\n\ta.claim_party_ak_id, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence a\r\n\tWHERE \r\n\t a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND \r\n\t EXISTS (SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_occurrence_ak_id = b.claim_occurrence_ak_id\r\n\t\t\tAND a.claim_party_role_code = b.claim_party_role_code\r\n\t\t   AND a.claim_party_occurrence_ak_id = b.claim_party_occurrence_ak_id\r\n\t\t\tAND a.claim_party_ak_id = b.claim_party_ak_id\r\n\t\t\tGROUP BY claim_occurrence_ak_id, claim_party_role_code, claim_party_ak_id\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_occurrence_ak_id, claim_party_role_code, claim_party_ak_id, eff_from_date  DESC\r\n\t\r\n\t--The extra condition ****** AND a.claim_party_occurrence_ak_id = b.claim_party_occurrence_ak_id *****  has been added on 11/18/2009 because 45GJ, 45GQ and 4578 sources loading claim_party_occurrence have different logical AK ids. 45GJ and 45GQ don't consider claim_case_ak_id as part of the overall AK id of target table whereas 4578 does. As a result, this pipeline was expiring some of the records loaded by 4578. In order to aviod that, this extra condition has been included.\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_occurrence_id,\n\tclaim_party_role_code,\n\tclaim_occurrence_ak_id,\n\tclaim_party_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_occurrence_ak_id = v_PREV_ROW_claim_occurrence_ak_id AND\r\n\t-- \tclaim_party_ak_id = v_PREV_ROW_claim_party_ak_id AND\r\n\t-- \tclaim_party_role_code = v_PREV_ROW_claim_party_role_code,\r\n\t-- ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- orig_eff_to_date)\n\tDECODE(TRUE,\n\t\tclaim_occurrence_ak_id = v_PREV_ROW_claim_occurrence_ak_id \n\t\tAND claim_party_ak_id = v_PREV_ROW_claim_party_ak_id \n\t\tAND claim_party_role_code = v_PREV_ROW_claim_party_role_code, DATEADD(SECOND,- 1,v_PREV_ROW_eff_from_date),\n\t\torig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_occurrence_ak_id AS v_PREV_ROW_claim_occurrence_ak_id,\n\tclaim_party_ak_id AS v_PREV_ROW_claim_party_ak_id,\n\tclaim_party_role_code AS v_PREV_ROW_claim_party_role_code,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party_occurrence\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_occurrence_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party_Occurrence AS (\n\tSELECT\n\tclaim_party_occurrence_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_occurrence_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence AS T\n\tUSING UPD_Claim_Party_Occurrence AS S\n\tON T.claim_party_occurrence_id = S.claim_party_occurrence_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604345"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "SOURCE_SYS_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}