{
    "name": "s_m_FEED_Load_WCAggravatedInequityExtract",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WCAggravatedInequityExtract",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_AuditSchedule AS (\n\tSELECT\n\tAuditStatus,\n\tPolicyKey,\n\tInsuranceLine,\n\tAuditEffectiveDate,\n\tAuditExpirationDate\n\tFROM (\n\t\tSELECT \n\t\t\tAuditStatus,\n\t\t\tPolicyKey,\n\t\t\tInsuranceLine,\n\t\t\tAuditEffectiveDate,\n\t\t\tAuditExpirationDate\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.AuditSchedule\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,InsuranceLine,AuditEffectiveDate,AuditExpirationDate ORDER BY AuditStatus) = 1\n),\nSQ_Loss AS (\n\tDECLARE @MonthStart as datetime, \r\n\t@MonthEnd as datetime\r\n\t\r\n\tSET @MonthStart = DATEADD(s,0,DATEADD(mm, DATEDIFF(m,0,getdate()) - @{pipeline().parameters.NO_OF_MONTHS_START},0))            \r\n\tSET @MonthEnd = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS_END} +1,0))\r\n\t\r\n\tSELECT \r\n\tA.claimant_full_name as claimant_full_name,\r\n\tA.claimant_num as claimant_num,\r\n\tA.pol_key as pol_key, \r\n\tA.pol_eff_date as pol_eff_date, \r\n\tA.claim_num as claim_num, \r\n\tA.trans_close_date as trans_close_date, \r\n\tA.claim_loss_date as claim_loss_date, \r\n\tA.RatingStateProvinceAbbreviation as RatingStateProvinceAbbreviation,\r\n\tA.cust_num as cust_num,\r\n\tA.pol_sym as pol_sym,\r\n\tA.pol_num as pol_num,\r\n\tA.SelectionMonthStart as SelectionMonthStart,\r\n\tA.SelectionMonthEnd as SelectionMonthEnd\r\n\tFROM\r\n\t(\r\n\tSELECT DISTINCT\r\n\td.claimant_full_name as claimant_full_name,\r\n\td.claimant_num as claimant_num,\r\n\t pol.pol_key as pol_key, \r\n\t pol.pol_eff_date as pol_eff_date, \r\n\t b.claim_num as claim_num, \r\n\t c.clndr_date as trans_close_date, \r\n\t b.claim_loss_date as claim_loss_date, \r\n\tcdd.RatingStateProvinceAbbreviation as RatingStateProvinceAbbreviation,\r\n\tcust.cust_num as cust_num,\r\n\tpol.pol_sym as pol_sym,\r\n\tpol.pol_num as pol_num,\r\n\t@MonthStart as SelectionMonthStart,\r\n\t@MonthEnd as SelectionMonthEnd,\r\n\tcase \r\n\t when cdd.RatingStateProvinceAbbreviation='WI' and datediff(month,pol.pol_eff_date, c.clndr_date) between 19 and 25 then 1\r\n\t when cdd.RatingStateProvinceAbbreviation='WI' and datediff(month,pol.pol_eff_date, c.clndr_date) between 31 and 37 then 1\r\n\t when cdd.RatingStateProvinceAbbreviation='WI' and datediff(month,pol.pol_eff_date, c.clndr_date) between 43 and 49 then 1\r\n\t when  cdd.RatingStateProvinceAbbreviation in ('MN','MI','FL','MA') and datediff(month,pol.pol_eff_date, c.clndr_date) between 19 and 24 then 1\r\n\t when  cdd.RatingStateProvinceAbbreviation in ('MN','MI','FL','MA') and datediff(month,pol.pol_eff_date, c.clndr_date) between 31 and 36 then 1\r\n\t when  cdd.RatingStateProvinceAbbreviation in ('MN','MI','FL','MA') and datediff(month,pol.pol_eff_date, c.clndr_date) between 43 and 48 then 1\r\n\telse 0 end as ValidRecord\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact a \r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim b \r\n\t\ton a.claim_occurrence_dim_id=b.claim_occurrence_dim_id\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim c \r\n\t\ton a.claim_trans_date_id=c.clndr_id\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_dim d \r\n\t\ton a.claimant_dim_id=d.claimant_dim_id\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim ir \r\n\t\ton a.InsuranceReferenceDimId=ir.InsuranceReferenceDimId\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction_type_dim tt \r\n\t\ton a.claim_trans_type_dim_id=tt.claim_trans_type_dim_id\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim pol \r\n\t\ton a.pol_dim_id=pol.pol_dim_id\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.coveragedetaildim cdd\r\n\t\ton a.coveragedetaildimid=cdd.coveragedetaildimid\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_dim cust \r\n\t\ton a.contract_cust_dim_id=cust.contract_cust_dim_id\r\n\tWHERE\r\n\ttt.trans_code_descript in (@{pipeline().parameters.TRANS_CODE})\r\n\tand c.clndr_date between @MonthStart AND @MonthEnd \r\n\tand ir.InsuranceSegmentAbbreviation in ('CL','Pool')\r\n\tand ir.PolicyOfferingAbbreviation='WC'\r\n\tand Pol.renl_code NOT in ('7','9') and Pol.pol_cancellation_date >= '2100-12-31'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t) A\r\n\tWHERE A.ValidRecord=1\n),\nEXP_Input AS (\n\tSELECT\n\tclaimant_full_name,\n\tclaimant_num,\n\tpol_key,\n\tpol_eff_date,\n\tclaim_num,\n\ttrans_close_date,\n\tclaim_loss_date,\n\tRatingStateProvinceAbbreviation,\n\tcust_num,\n\tpol_sym,\n\tpol_num,\n\tSelectionMonthStart,\n\tSelectionMonthEnd\n\tFROM SQ_Loss\n),\nLKP_EstimatedAuditCodeKeys_DCT AS (\n\tSELECT\n\tPolicyKey,\n\tInsuranceSegmentAbbreviation,\n\tReasonAmendedCode,\n\tStrategicProfitCenterAbbreviation,\n\tpol_status_code,\n\tPremiumTransactionEffectiveDate,\n\tSeqNum,\n\tin_polkey,\n\tin_SelectionMonthEnd\n\tFROM (\n\t\tSelect \r\n\t\tA.PolicyKey as PolicyKey,\r\n\t\tA.InsuranceSegmentAbbreviation  as InsuranceSegmentAbbreviation,\r\n\t\tA.ReasonAmendedCode as ReasonAmendedCode,\r\n\t\tA.StrategicProfitCenterAbbreviation as StrategicProfitCenterAbbreviation,\r\n\t\tA.pol_status_code as pol_status_code,\r\n\t\tA.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,\r\n\t\tA.SeqNum as SeqNum\r\n\t\tFROM (\r\n\t\tSELECT DISTINCT \r\n\t\tP.pol_key as PolicyKey,\r\n\t\tInsSeg.InsuranceSegmentAbbreviation as InsuranceSegmentAbbreviation ,\r\n\t\tA.ReasonAmendedCode as ReasonAmendedCode,\r\n\t\tSPC.StrategicProfitCenterAbbreviation as StrategicProfitCenterAbbreviation,\r\n\t\tP.pol_status_code as pol_status_code,\r\n\t\tA.PremiumTransactionEffectiveDate,\r\n\t\tcase \r\n\t\t\twhen premiumtransactioncode = 'RevisedFinalAudit' then 0 \r\n\t\t\twhen premiumtransactioncode = 'FinalAudit' then 1 else 2 \r\n\t\tend as SeqNum\r\n\t\tFROM\r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction A \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC on A.RatingCoverageAKId=RC.RatingCoverageAKID and A.EffectiveDate=RC.EffectiveDate\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on RC.PolicyCoverageAKID=pc.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy P on P.pol_ak_id=PC.PolicyAKID and P.crrnt_snpsht_flag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment InsSeg on InsSeg.InsuranceSegmentAKId=P.InsuranceSegmentAKId and InsSeg.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_EDW}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.StrategicProfitCenter SPC on P.StrategicProfitCenterAKId=SPC.StrategicProfitCenterAKId and SPC.CurrentSnapshotFlag=1\r\n\t\tand A.ExposureBasis='Payroll') A\r\n\t\t order by A.SeqNum --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,PremiumTransactionEffectiveDate ORDER BY PolicyKey) = 1\n),\nEXP_Premium AS (\n\tSELECT\n\tEXP_Input.pol_key AS i_Policykey,\n\tEXP_Input.RatingStateProvinceAbbreviation AS i_StateProvinceCode,\n\tEXP_Input.pol_eff_date AS i_pol_eff_date,\n\tEXP_Input.pol_num AS i_pol_sym,\n\tLKP_EstimatedAuditCodeKeys_DCT.InsuranceSegmentAbbreviation AS lkp_InsuranceSegmentAbbreviation,\n\tLKP_EstimatedAuditCodeKeys_DCT.ReasonAmendedCode AS lkp_ReasonAmendedCode,\n\tLKP_EstimatedAuditCodeKeys_DCT.StrategicProfitCenterAbbreviation AS lkp_StrategicProfitCenterAbbreviation,\n\tLKP_EstimatedAuditCodeKeys_DCT.pol_status_code AS lkp_pol_status_code,\n\tLKP_EstimatedAuditCodeKeys_DCT.SeqNum AS lkp_SeqNum,\n\t'WC' AS v_InsuranceLine,\n\t-- *INF*: IIF(i_pol_sym='000', 'DCT','PMS')\n\tIFF(i_pol_sym = '000', 'DCT', 'PMS') AS v_SourceSystem,\n\t-- *INF*: :LKP.LKP_AUDITSCHEDULE(i_Policykey, v_InsuranceLine, i_pol_eff_date)\n\tLKP_AUDITSCHEDULE_i_Policykey_v_InsuranceLine_i_pol_eff_date.AuditStatus AS v_AuditStatus,\n\t-- *INF*: DECODE(TRUE,\r\n\t--   UPPER(lkp_ReasonAmendedCode) = 'ESTIMATED',\r\n\t--     DECODE(TRUE,\r\n\t--       (IN(i_StateProvinceCode, '21', '48') OR UPPER(lkp_InsuranceSegmentAbbreviation)='POOL'),\r\n\t--         'U',\r\n\t--         'Y'\r\n\t--       ),\r\n\t--   IN(UPPER(lkp_ReasonAmendedCode),'CANCELLATION','SEEDETAIL'),\r\n\t--     'N',\r\n\t--   (UPPER(lkp_StrategicProfitCenterAbbreviation)='ARGENT' AND ISNULL(lkp_ReasonAmendedCode) AND UPPER(lkp_InsuranceSegmentAbbreviation)='CL'),\r\n\t--     'Y',\r\n\t--   (UPPER(lkp_StrategicProfitCenterAbbreviation)='WB - CL' AND ISNULL(lkp_ReasonAmendedCode) AND UPPER(lkp_InsuranceSegmentAbbreviation)='POOL' AND IN(lkp_pol_status_code,'N','C')),\r\n\t--     'Y',\r\n\t--   (UPPER(lkp_StrategicProfitCenterAbbreviation)='WB - CL' AND ISNULL(lkp_ReasonAmendedCode) AND UPPER(lkp_InsuranceSegmentAbbreviation)='CL' AND lkp_pol_status_code ='N'),\r\n\t--     'Y',\r\n\t--     'N'\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    UPPER(lkp_ReasonAmendedCode) = 'ESTIMATED', DECODE(\n\t        TRUE,\n\t        (i_StateProvinceCode IN ('21','48') OR UPPER(lkp_InsuranceSegmentAbbreviation) = 'POOL'), 'U',\n\t        'Y'\n\t    ),\n\t    UPPER(lkp_ReasonAmendedCode) IN ('CANCELLATION','SEEDETAIL'), 'N',\n\t    (UPPER(lkp_StrategicProfitCenterAbbreviation) = 'ARGENT' AND lkp_ReasonAmendedCode IS NULL AND UPPER(lkp_InsuranceSegmentAbbreviation) = 'CL'), 'Y',\n\t    (UPPER(lkp_StrategicProfitCenterAbbreviation) = 'WB - CL' AND lkp_ReasonAmendedCode IS NULL AND UPPER(lkp_InsuranceSegmentAbbreviation) = 'POOL' AND lkp_pol_status_code IN ('N','C')), 'Y',\n\t    (UPPER(lkp_StrategicProfitCenterAbbreviation) = 'WB - CL' AND lkp_ReasonAmendedCode IS NULL AND UPPER(lkp_InsuranceSegmentAbbreviation) = 'CL' AND lkp_pol_status_code = 'N'), 'Y',\n\t    'N'\n\t) AS v_DCT_EstimatedAuditCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(UPPER(v_AuditStatus), 'BYPASSED', 'REVERSED', 'OVERDUE'),'Y',\r\n\t-- IN(i_StateProvinceCode, '21', '48') AND UPPER(v_AuditStatus)='ESTIMATED','U',\r\n\t-- UPPER(v_AuditStatus)='ESTIMATED','Y',\r\n\t-- 'N'\r\n\t--  )\n\tDECODE(\n\t    TRUE,\n\t    UPPER(v_AuditStatus) IN ('BYPASSED','REVERSED','OVERDUE'), 'Y',\n\t    i_StateProvinceCode IN ('21','48') AND UPPER(v_AuditStatus) = 'ESTIMATED', 'U',\n\t    UPPER(v_AuditStatus) = 'ESTIMATED', 'Y',\n\t    'N'\n\t) AS v_PMS_EstimatedAuditCode,\n\t-- *INF*: IIF(v_SourceSystem='DCT',v_DCT_EstimatedAuditCode, v_PMS_EstimatedAuditCode)\n\tIFF(v_SourceSystem = 'DCT', v_DCT_EstimatedAuditCode, v_PMS_EstimatedAuditCode) AS o_EstimatedAuditCode\n\tFROM EXP_Input\n\tLEFT JOIN LKP_EstimatedAuditCodeKeys_DCT\n\tON LKP_EstimatedAuditCodeKeys_DCT.PolicyKey = EXP_Input.pol_key AND LKP_EstimatedAuditCodeKeys_DCT.PremiumTransactionEffectiveDate <= EXP_Input.SelectionMonthEnd\n\tLEFT JOIN LKP_AUDITSCHEDULE LKP_AUDITSCHEDULE_i_Policykey_v_InsuranceLine_i_pol_eff_date\n\tON LKP_AUDITSCHEDULE_i_Policykey_v_InsuranceLine_i_pol_eff_date.PolicyKey = i_Policykey\n\tAND LKP_AUDITSCHEDULE_i_Policykey_v_InsuranceLine_i_pol_eff_date.InsuranceLine = v_InsuranceLine\n\tAND LKP_AUDITSCHEDULE_i_Policykey_v_InsuranceLine_i_pol_eff_date.AuditEffectiveDate = i_pol_eff_date\n\n),\nLKP_CLTF_SubroCheck AS (\n\tSELECT\n\tclaim_num,\n\tCLTFCount,\n\tin_claim_num\n\tFROM (\n\t\tselect\r\n\t\tb.claim_num as claim_num,\r\n\t\tcount(1) as CLTFCount\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact a \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim b on a.claim_occurrence_dim_id=b.claim_occurrence_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction_type_dim tt on a.claim_trans_type_dim_id=tt.claim_trans_type_dim_id\r\n\t\twhere\r\n\t\ttt.pms_trans_code in ('81','82','83','84','85','86','87','88','89','99')\r\n\t\tgroup by b.claim_num having count(1) > 0\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_num ORDER BY claim_num) = 1\n),\nLKP_Direct_Written_Premium AS (\n\tSELECT\n\tpolicykey,\n\tPremiumMasterDirectWrittenPremium,\n\tin_pol_key,\n\tin_SelectionMonthEnd\n\tFROM (\n\t\tselect A.policykey as policykey, A.PremiumMasterDirectWrittenPremium as PremiumMasterDirectWrittenPremium  from (\r\n\t\tselect pol.pol_key as policykey, sum(PremiumMasterDirectWrittenPremium) as  PremiumMasterDirectWrittenPremium\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.PremiumMasterFact a with (nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.InsuranceReferenceCoverageDim b with (nolock) on a.InsuranceReferenceCoverageDimId=b.InsuranceReferenceCoverageDimId\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.policy_dim pol with (nolock) on a.PolicyDimID=pol.pol_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.CoverageDetailDim CDD with (nolock) on a.CoverageDetailDimId=CDD.CoverageDetailDimId\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.calendar_dim CAL on a.PremiumMasterRunDateID=CAL.clndr_id\r\n\t\twhere \r\n\t\tb.coveragedescription='Work Comp' AND\r\n\t\tCDD.ExposureBasis = 'Payroll' AND \r\n\t\tpol.pol_sym ='000'\r\n\t\tgroup by pol.pol_key\r\n\t\thaving sum(PremiumMasterDirectWrittenPremium)>5000\r\n\t\t\r\n\t\tUnion\r\n\t\t\r\n\t\tselect pol.pol_key as policykey, sum(PremiumMasterDirectWrittenPremium) as  PremiumMasterDirectWrittenPremium\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.PremiumMasterFact a with (nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.InsuranceReferenceCoverageDim b with (nolock) on a.InsuranceReferenceCoverageDimId=b.InsuranceReferenceCoverageDimId\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.policy_dim pol with (nolock) on a.PolicyDimID=pol.pol_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.CoverageDetailDim CDD with (nolock) on a.CoverageDetailDimId=CDD.CoverageDetailDimId\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.calendar_dim CAL on a.PremiumMasterRunDateID=CAL.clndr_id\r\n\t\twhere \r\n\t\tb.coveragedescription='Work Comp' AND\r\n\t\tpol.pol_sym !='000' \r\n\t\tgroup by pol.pol_key\r\n\t\thaving sum(PremiumMasterDirectWrittenPremium)>5000\r\n\t\t) A \r\n\t\tOrder by A.PremiumMasterDirectWrittenPremium Desc --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY policykey ORDER BY policykey) = 1\n),\nLKP_Paid_Outstanding_Amounts AS (\n\tSELECT\n\tPaidIndemnityAmount,\n\tPaidMedicalAmount,\n\toutstanding_expense_reserve,\n\tsubro_outstanding,\n\tin_claim_num,\n\tin_claimant_num,\n\tin_SelectionMonthEnd,\n\tclaim_num,\n\tclaimant_num\n\tFROM (\n\t\tSELECT \r\n\t\tSUM((case claimant_coverage_dim.cause_of_loss when  '05' then  claim_loss_transaction_fact.direct_loss_paid_including_recoveries else 0 end)) as PaidIndemnityAmount,\r\n\t\tSUM((case claimant_coverage_dim.cause_of_loss \r\n\t\t    when '06' then \r\n\t\t        (case when trans_ctgry_code not in ('DX') then\r\n\t\t\t\t\tclaim_loss_transaction_fact.direct_loss_paid_including_recoveries else 0 end ) \r\n\t\t        +\r\n\t\t        (case when trans_ctgry_code in ('WD','DR') then ABS(claim_loss_transaction_fact.direct_other_recovery_paid) else 0 end)\r\n\t\t    else 0 end)) as PaidMedicalAmount,\r\n\t\t--claimant_coverage_dim.claimant_cov_dim_id as claimant_cov_dim_id \r\n\t\te.claim_num as claim_num,\r\n\t\tclaimant_dim.claimant_num as claimant_num,\r\n\t\tsum(claim_loss_transaction_fact.direct_alae_outstanding_including_recoveries) AS outstanding_expense_reserve,\r\n\t\t\tsum(claim_loss_transaction_fact.direct_subrogation_paid) AS subro_outstanding\r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_loss_transaction_fact \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_payment_category_type_dim on claim_payment_category_type_dim.claim_pay_ctgry_type_dim_id = claim_loss_transaction_fact.claim_pay_ctgry_type_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claimant_coverage_dim on claimant_coverage_dim.claimant_cov_dim_id = claim_loss_transaction_fact.claimant_cov_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_transaction_type_dim on claim_loss_transaction_fact.claim_trans_type_dim_id = claim_transaction_type_dim.claim_trans_type_dim_id \r\n\t\t and trans_kind_code = 'D' \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claimant_dim claimant_dim on claimant_dim.claimant_dim_id  = claim_loss_transaction_fact.claimant_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.calendar_dim c on claim_loss_transaction_fact.claim_trans_date_id=c.clndr_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_occurrence_dim e on claim_loss_transaction_fact.claim_occurrence_dim_id=e.claim_occurrence_dim_id\r\n\t\tWHERE\r\n\t\tc.clndr_date <= DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS_END} +1,0))\r\n\t\tgroup by e.claim_num, claimant_dim.claimant_num\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_num,claimant_num ORDER BY PaidIndemnityAmount) = 1\n),\nLKP_PolicyDim_IsCustomerStillInsured AS (\n\tSELECT\n\tcust_num,\n\tpol_key,\n\tpol_exp_date,\n\teff_from_date,\n\teff_to_date,\n\tin_cust_num,\n\tin_SelectionMonthEnd\n\tFROM (\n\t\tselect distinct  A.pol_key AS pol_key,  A.cust_num AS cust_num,  A.eff_from_date AS eff_from_date,  A.eff_to_date AS eff_to_date,  A.pol_exp_date AS pol_exp_date \r\n\t\tfrom \r\n\t\t(\r\n\t\tSELECT  distinct  P.pol_key AS pol_key,  A.cust_num AS cust_num,  P.eff_from_date AS eff_from_date,  P.eff_to_date AS eff_to_date,  P.pol_exp_date AS pol_exp_date \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_dim A \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact B on B.ContractCustomerDimID=A.contract_cust_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P ON P.pol_dim_id=B.PolicyDimID\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim IR on B.InsuranceReferenceDimId=IR.InsuranceReferenceDimId\r\n\t\twhere P.pol_cancellation_date >='2100-12-31'\r\n\t\tand ir.InsuranceSegmentAbbreviation in ('CL','Pool')\r\n\t\tand ir.PolicyOfferingAbbreviation='WC'\r\n\t\tand P.pol_exp_date >  DATEADD(s,0,DATEADD(mm, DATEDIFF(m,0,getdate()) - @{pipeline().parameters.NO_OF_MONTHS_START},0))\r\n\t\tUNION\r\n\t\tSELECT  distinct  P.pol_key AS pol_key,  A.cust_num AS cust_num,  P.eff_from_date AS eff_from_date,  P.eff_to_date AS eff_to_date,  P.pol_exp_date AS pol_exp_date \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_dim A \r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact B on B.contract_cust_dim_id=A.contract_cust_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P ON P.pol_dim_id=B.pol_dim_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim IR on B.InsuranceReferenceDimId=IR.InsuranceReferenceDimId\r\n\t\twhere P.pol_cancellation_date >='2100-12-31'\r\n\t\tand ir.InsuranceSegmentAbbreviation in ('CL','Pool') \r\n\t\tand ir.PolicyOfferingAbbreviation='WC'\r\n\t\tand P.pol_exp_date >  DATEADD(s,0,DATEADD(mm, DATEDIFF(m,0,getdate()) - @{pipeline().parameters.NO_OF_MONTHS_START},0))\r\n\t\t) A\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY cust_num,eff_from_date,eff_to_date,pol_exp_date ORDER BY cust_num) = 1\n),\nLKP_Reopened_Claims AS (\n\tSELECT\n\tclaim_num,\n\tclaimant_num,\n\ttransaction_date,\n\tin_claimant_num,\n\tin_claim_num,\n\tin_clndr_date\n\tFROM (\n\t\tSELECT b.claim_num as claim_num, c.claimant_num as claimant_num, e.clndr_date as transaction_date \r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_loss_transaction_fact a, \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_occurrence_dim b, \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claimant_dim c, \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.claim_transaction_type_dim d,\r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.dbo.calendar_dim e\r\n\t\twhere a.claim_occurrence_dim_id=b.claim_occurrence_dim_id\r\n\t\tand a.claimant_dim_id=c.claimant_dim_id\r\n\t\tand a.claim_trans_type_dim_id=d.claim_trans_type_dim_id\r\n\t\tand a.claim_trans_date_id=e.clndr_id\r\n\t\tand d.trans_code_descript in ('Reopen closed claim', 'Record a reopened claim')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_num,claimant_num,transaction_date ORDER BY claim_num) = 1\n),\nLKP_WorkWCStatExtract AS (\n\tSELECT\n\tCreatedDate,\n\tIncurredIndemnityAmount,\n\tIncurredMedicalAmount,\n\tin_claim_num,\n\tin_SelectionMonthEnd,\n\tClaimNumber\n\tFROM (\n\t\tSELECT WorkWCSTATExtract.IncurredIndemnityAmount as IncurredIndemnityAmount, WorkWCSTATExtract.IncurredMedicalAmount as IncurredMedicalAmount, WorkWCSTATExtract.ClaimNumber as ClaimNumber, WorkWCSTATExtract.CreatedDate as CreatedDate FROM WorkWCSTATExtract WorkWCSTATExtract\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ClaimNumber,CreatedDate ORDER BY CreatedDate DESC) = 1\n),\nEXP_Loss_Paid_Details AS (\n\tSELECT\n\tEXP_Input.claimant_full_name,\n\tEXP_Input.claimant_num,\n\tEXP_Input.pol_key,\n\tEXP_Input.pol_eff_date,\n\tEXP_Input.claim_num,\n\tEXP_Input.claim_loss_date,\n\tEXP_Input.trans_close_date AS clndr_date,\n\tLKP_Paid_Outstanding_Amounts.PaidIndemnityAmount,\n\tLKP_Paid_Outstanding_Amounts.PaidMedicalAmount,\n\tLKP_Paid_Outstanding_Amounts.outstanding_expense_reserve,\n\tLKP_Paid_Outstanding_Amounts.subro_outstanding,\n\tLKP_Reopened_Claims.claim_num AS lkp_claim_num,\n\tLKP_WorkWCStatExtract.CreatedDate AS BureauReportedDate,\n\tLKP_WorkWCStatExtract.IncurredIndemnityAmount,\n\tLKP_WorkWCStatExtract.IncurredMedicalAmount,\n\tEXP_Input.RatingStateProvinceAbbreviation,\n\tEXP_Input.cust_num AS CustomerNumber,\n\tLKP_Direct_Written_Premium.PremiumMasterDirectWrittenPremium,\n\tLKP_CLTF_SubroCheck.CLTFCount AS lkp_CLTFCountSubroCheck,\n\tLKP_PolicyDim_IsCustomerStillInsured.pol_key AS lkp_CurrentPolKey,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- NOT ISNULL(lkp_CurrentPolKey),'Y',\r\n\t-- 'N')\n\tDECODE(\n\t    TRUE,\n\t    lkp_CurrentPolKey IS NOT NULL, 'Y',\n\t    'N'\n\t) AS v_IsInsuredCurrentCheck,\n\t-- *INF*: --DATE_DIFF(clndr_date,BureauReportedDate,'MM')\r\n\t-- IIF(ISNULL(clndr_date) OR ISNULL(BureauReportedDate), NULL,\r\n\t-- DATE_DIFF(\r\n\t-- TO_DATE('01'||'-'||TO_CHAR(clndr_date,'MON')||'-'||TO_CHAR(clndr_date,'YYYY'),'DD-MON-YYYY'), \r\n\t-- TO_DATE('01'||'-'||TO_CHAR(BureauReportedDate,'MON')||'-'||TO_CHAR(BureauReportedDate,'YYYY'),'DD-MON-YYYY'),\r\n\t-- 'MM'\r\n\t-- )\r\n\t-- )\n\tIFF(\n\t    clndr_date IS NULL OR BureauReportedDate IS NULL, NULL,\n\t    DATEDIFF(MONTH,TO_TIMESTAMP('01' || '-' || TO_CHAR(clndr_date, 'MON') || '-' || TO_CHAR(clndr_date, 'YYYY'), 'DD-MON-YYYY'),TO_TIMESTAMP('01' || '-' || TO_CHAR(BureauReportedDate, 'MON') || '-' || TO_CHAR(BureauReportedDate, 'YYYY'), 'DD-MON-YYYY'))\n\t) AS MonthsSinceUnitStat,\n\t-- *INF*: DECODE(TRUE, IN(RatingStateProvinceAbbreviation,'MI','WI','MN','FL','MA'),'Y','N')\n\tDECODE(\n\t    TRUE,\n\t    RatingStateProvinceAbbreviation IN ('MI','WI','MN','FL','MA'), 'Y',\n\t    'N'\n\t) AS v_RatingStateProvinceCheck,\n\t-- *INF*: DECODE(TRUE, outstanding_expense_reserve=0,'Y','N')\n\tDECODE(\n\t    TRUE,\n\t    outstanding_expense_reserve = 0, 'Y',\n\t    'N'\n\t) AS v_ExpenseReserveCheck,\n\t-- *INF*: DECODE(TRUE, subro_outstanding=0,'Y','N')\n\tDECODE(\n\t    TRUE,\n\t    subro_outstanding = 0, 'Y',\n\t    'N'\n\t) AS v_SubrogationCheck,\n\tEXP_Premium.o_EstimatedAuditCode AS EstimatedAuditCode,\n\t-- *INF*: IIF(EstimatedAuditCode='N','Y','N')\r\n\t-- \r\n\t-- -- in this case 'N' means it's good, so we map it to Y to pass the test\n\tIFF(EstimatedAuditCode = 'N', 'Y', 'N') AS v_EstimatedAuditCodeCheck,\n\t-- *INF*: IIF((PaidIndemnityAmount+PaidMedicalAmount)<(IncurredIndemnityAmount+IncurredMedicalAmount),'Y','N')\n\tIFF(\n\t    (PaidIndemnityAmount + PaidMedicalAmount) < (IncurredIndemnityAmount + IncurredMedicalAmount),\n\t    'Y',\n\t    'N'\n\t) AS v_PaidGreaterThanIncurredCheck,\n\t-- *INF*: IIF( PaidIndemnityAmount+PaidMedicalAmount > 0,'Y','N')\n\tIFF(PaidIndemnityAmount + PaidMedicalAmount > 0, 'Y', 'N') AS v_PaidGreaterThanZeroCheck,\n\t-- *INF*: IIF(ISNULL(lkp_claim_num),'Y','N')\n\tIFF(lkp_claim_num IS NULL, 'Y', 'N') AS v_CancelReopenCheck,\n\t-- *INF*: 'Y'\r\n\t-- --IIF(ISNULL(lkp_CLTFCountSubroCheck) or lkp_CLTFCountSubroCheck = 0, 'Y','N')\r\n\t-- \r\n\t-- -- requirements change to no took at subro by transaction code.  Keeping lookup and check though because requirements changed back and forth enough that we may want to re-enable this check.\n\t'Y' AS v_SubroHistoryCheck,\n\t-- *INF*: IIF(PremiumMasterDirectWrittenPremium>0,'Y','N')\n\tIFF(PremiumMasterDirectWrittenPremium > 0, 'Y', 'N') AS v_DWPCheck,\n\t-- *INF*: IIF(\r\n\t-- v_PaidGreaterThanIncurredCheck='Y' AND\r\n\t-- v_PaidGreaterThanZeroCheck='Y' AND\r\n\t-- v_DWPCheck='Y' AND\r\n\t-- v_RatingStateProvinceCheck='Y' AND\r\n\t-- v_CancelReopenCheck='Y' AND\r\n\t-- v_ExpenseReserveCheck = 'Y' AND\r\n\t-- v_IsInsuredCurrentCheck='Y' AND\r\n\t-- v_SubrogationCheck='Y' AND\r\n\t-- v_EstimatedAuditCodeCheck='Y' AND\r\n\t-- v_SubroHistoryCheck='Y',\r\n\t-- 'Y','N')\r\n\t-- \r\n\t-- --IIF((PaidIndemnityAmount+PaidMedicalAmount)<(IncurredIndemnityAmount+IncurredMedicalAmount) AND (PaidIndemnityAmount+PaidMedicalAmount)>0 AND \r\n\t-- --PremiumMasterDirectWrittenPremium>0 AND v_RatingStateProvinceCheck='Y' AND \r\n\t-- --ISNULL(lkp_claim_num) AND \r\n\t-- --v_Expense_ReserveCheck='Y' AND\r\n\t-- --v_IsInsuredCurrent_check='Y' AND\r\n\t-- --(ISNULL(lkp_CLTFCount_subro_check) or lkp_CLTFCount_subro_check = 0) AND\r\n\t-- --EstimatedAuditCode='N' AND\r\n\t-- --v_SubrogationCheck='Y' ,'Y','N')\n\tIFF(\n\t    v_PaidGreaterThanIncurredCheck = 'Y'\n\t    and v_PaidGreaterThanZeroCheck = 'Y'\n\t    and v_DWPCheck = 'Y'\n\t    and v_RatingStateProvinceCheck = 'Y'\n\t    and v_CancelReopenCheck = 'Y'\n\t    and v_ExpenseReserveCheck = 'Y'\n\t    and v_IsInsuredCurrentCheck = 'Y'\n\t    and v_SubrogationCheck = 'Y'\n\t    and v_EstimatedAuditCodeCheck = 'Y'\n\t    and v_SubroHistoryCheck = 'Y',\n\t    'Y',\n\t    'N'\n\t) AS qualify_check,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_PaidGreaterThanIncurredCheck='N', 'PaidGreaterThanIncurredCheck',\r\n\t-- v_PaidGreaterThanZeroCheck='N','PaidGreaterThanZeroCheck',\r\n\t-- v_DWPCheck='N','DWPCheck',\r\n\t-- v_RatingStateProvinceCheck='N','RatingStateProvinceCheck',\r\n\t-- v_CancelReopenCheck='N','CancelReopenCheck',\r\n\t-- v_ExpenseReserveCheck ='N', 'ExpenseReserveCheck',\r\n\t-- v_IsInsuredCurrentCheck='N','IsInsuredCurrentCheck',\r\n\t-- v_SubrogationCheck='N','SubrogationCheck',\r\n\t-- v_EstimatedAuditCodeCheck='N','EstimatedAuditCodeCheck',\r\n\t-- v_SubroHistoryCheck='N','SubroHistoryCheck',\r\n\t-- 'NoFailures')\n\tDECODE(\n\t    TRUE,\n\t    v_PaidGreaterThanIncurredCheck = 'N', 'PaidGreaterThanIncurredCheck',\n\t    v_PaidGreaterThanZeroCheck = 'N', 'PaidGreaterThanZeroCheck',\n\t    v_DWPCheck = 'N', 'DWPCheck',\n\t    v_RatingStateProvinceCheck = 'N', 'RatingStateProvinceCheck',\n\t    v_CancelReopenCheck = 'N', 'CancelReopenCheck',\n\t    v_ExpenseReserveCheck = 'N', 'ExpenseReserveCheck',\n\t    v_IsInsuredCurrentCheck = 'N', 'IsInsuredCurrentCheck',\n\t    v_SubrogationCheck = 'N', 'SubrogationCheck',\n\t    v_EstimatedAuditCodeCheck = 'N', 'EstimatedAuditCodeCheck',\n\t    v_SubroHistoryCheck = 'N', 'SubroHistoryCheck',\n\t    'NoFailures'\n\t) AS v_qualifyLog,\n\t-- *INF*: 'FileYearMonth,'||TO_CHAR(clndr_date,'YYYYMM')  ||',PolicyKey,' || pol_key||',ClaimNum,' || claim_num||',CustomerNumber,'||CustomerNumber ||',FirstFailure,'||v_qualifyLog\n\t'FileYearMonth,' || TO_CHAR(clndr_date, 'YYYYMM') || ',PolicyKey,' || pol_key || ',ClaimNum,' || claim_num || ',CustomerNumber,' || CustomerNumber || ',FirstFailure,' || v_qualifyLog AS v_RuleSummary,\n\tv_RuleSummary AS o_RuleSummary,\n\t-- *INF*: 'AggrevatedInequity_UnqualifiedClaims_'||TO_CHAR(clndr_date,'YYYYMM')||'.csv'\n\t'AggrevatedInequity_UnqualifiedClaims_' || TO_CHAR(clndr_date, 'YYYYMM') || '.csv' AS FileName\n\tFROM EXP_Input\n\t -- Manually join with EXP_Premium\n\tLEFT JOIN LKP_CLTF_SubroCheck\n\tON LKP_CLTF_SubroCheck.claim_num = EXP_Input.claim_num\n\tLEFT JOIN LKP_Direct_Written_Premium\n\tON LKP_Direct_Written_Premium.policykey = EXP_Input.pol_key\n\tLEFT JOIN LKP_Paid_Outstanding_Amounts\n\tON LKP_Paid_Outstanding_Amounts.claim_num = EXP_Input.claim_num AND LKP_Paid_Outstanding_Amounts.claimant_num = EXP_Input.claimant_num\n\tLEFT JOIN LKP_PolicyDim_IsCustomerStillInsured\n\tON LKP_PolicyDim_IsCustomerStillInsured.cust_num = EXP_Input.cust_num AND LKP_PolicyDim_IsCustomerStillInsured.eff_from_date <= EXP_Input.SelectionMonthEnd AND LKP_PolicyDim_IsCustomerStillInsured.eff_to_date >= EXP_Input.SelectionMonthEnd AND LKP_PolicyDim_IsCustomerStillInsured.pol_exp_date >= EXP_Input.SelectionMonthEnd\n\tLEFT JOIN LKP_Reopened_Claims\n\tON LKP_Reopened_Claims.claim_num = EXP_Input.claim_num AND LKP_Reopened_Claims.claimant_num = EXP_Input.claimant_num AND LKP_Reopened_Claims.transaction_date >= EXP_Input.trans_close_date\n\tLEFT JOIN LKP_WorkWCStatExtract\n\tON LKP_WorkWCStatExtract.ClaimNumber = EXP_Input.claim_num AND LKP_WorkWCStatExtract.CreatedDate <= EXP_Input.SelectionMonthEnd\n),\nFIL_UnqualifiedClaims AS (\n\tSELECT\n\tqualify_check, \n\to_RuleSummary, \n\tFileName\n\tFROM EXP_Loss_Paid_Details\n\tWHERE qualify_check='N'\n),\nAggrevatedInequity_UnqualifiedClaims AS (\n\tINSERT INTO GenericLoggingFlatFile\n\t(FileName, DataLogRow)\n\tSELECT \n\tFILENAME, \n\to_RuleSummary AS DATALOGROW\n\tFROM FIL_UnqualifiedClaims\n),\nFIL_Qualified_claims AS (\n\tSELECT\n\tclaimant_full_name, \n\tclaimant_num, \n\tpol_key, \n\tpol_eff_date, \n\tclaim_num, \n\tclaim_loss_date, \n\tclndr_date, \n\tPaidIndemnityAmount, \n\tPaidMedicalAmount, \n\tBureauReportedDate AS CreatedDate, \n\tRatingStateProvinceAbbreviation, \n\tCustomerNumber, \n\tMonthsSinceUnitStat, \n\tqualify_check\n\tFROM EXP_Loss_Paid_Details\n\tWHERE qualify_check='Y'\n),\nAGG_Target AS (\n\tSELECT\n\tclaimant_full_name,\n\tclaimant_num,\n\tpol_key,\n\tpol_eff_date,\n\tclaim_num,\n\tclaim_loss_date,\n\tclndr_date,\n\t-- *INF*: min(clndr_date)\n\tmin(clndr_date) AS Claimant_Close_date,\n\tPaidIndemnityAmount,\n\tPaidMedicalAmount,\n\tCreatedDate AS BureauReportedDate,\n\t-- *INF*: min(BureauReportedDate)\n\tmin(BureauReportedDate) AS out_BureauReportedDate,\n\tCustomerNumber,\n\tMonthsSinceUnitStat,\n\t-- *INF*: min(MonthsSinceUnitStat)\n\tmin(MonthsSinceUnitStat) AS MonthsSinceUnitStat_out,\n\tRatingStateProvinceAbbreviation\n\tFROM FIL_Qualified_claims\n\tGROUP BY claimant_full_name, claimant_num, pol_key, pol_eff_date, claim_num, claim_loss_date, CustomerNumber, RatingStateProvinceAbbreviation\n),\nEXP_Passthrough AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tSYSDATE AS CreatedDate,\n\tpol_key,\n\tpol_eff_date,\n\tclaim_num,\n\tPaidIndemnityAmount,\n\tPaidMedicalAmount,\n\tclaimant_num,\n\tclaimant_full_name,\n\tclaim_loss_date,\n\tout_BureauReportedDate,\n\tClaimant_Close_date,\n\tMonthsSinceUnitStat_out,\n\tCustomerNumber,\n\tRatingStateProvinceAbbreviation\n\tFROM AGG_Target\n),\nShortcut_to_WCAggravatedInequityExtract AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO Shortcut_to_WCAggravatedInequityExtract\n\t(AuditId, CreatedDate, PolicyKey, PolicyEffectiveDate, ClaimNumber, PaidIndemnityAmount, PaidMedicalAmount, ClaimantNumber, ClaimantFullName, ClaimLossDate, BureauReportedDate, ClaimantCloseDate, MonthsSinceUnitStat, CustomerNumber, RatingState)\n\tSELECT \n\tAuditID AS AUDITID, \n\tCREATEDDATE, \n\tpol_key AS POLICYKEY, \n\tpol_eff_date AS POLICYEFFECTIVEDATE, \n\tclaim_num AS CLAIMNUMBER, \n\tPAIDINDEMNITYAMOUNT, \n\tPAIDMEDICALAMOUNT, \n\tclaimant_num AS CLAIMANTNUMBER, \n\tclaimant_full_name AS CLAIMANTFULLNAME, \n\tclaim_loss_date AS CLAIMLOSSDATE, \n\tout_BureauReportedDate AS BUREAUREPORTEDDATE, \n\tClaimant_Close_date AS CLAIMANTCLOSEDATE, \n\tMonthsSinceUnitStat_out AS MONTHSSINCEUNITSTAT, \n\tCUSTOMERNUMBER, \n\tRatingStateProvinceAbbreviation AS RATINGSTATE\n\tFROM EXP_Passthrough\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_DATABASE_NAME_EDW": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_MONTHS_START": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_MONTHS_END": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TRANS_CODE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}