{
    "name": "s_m_POL_DW_Update_expmod_effd_PremiumTransaction_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_Update_expmod_effd_PremiumTransaction_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_SupClassificationWorkersCompensation AS (\n\tSELECT\n\tSupClassificationWorkersCompensationId,\n\tClassCode,\n\tRatingStateCode\n\tFROM (\n\t\tSELECT \n\t\t\tSupClassificationWorkersCompensationId,\n\t\t\tClassCode,\n\t\t\tRatingStateCode\n\t\tFROM SupClassificationWorkersCompensation\n\t\tWHERE (SubjectToExperienceModificationClassIndicator = 'Y' or ExperienceModificationClassIndicator = 'Y') and CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ClassCode,RatingStateCode ORDER BY SupClassificationWorkersCompensationId) = 1\n),\nSQ_Get_Candidate_ExpModTransactions AS (\n\t-- identify exp mod factor and effective date changes across date bounds\r\n\tWITH  \r\n\tClassCodeDrivers as\r\n\t(select distinct ClassCode\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.SupClassificationWorkersCompensation\r\n\tWHERE ExperienceModificationClassIndicator = 'Y' and currentsnapshotflag = 1)\r\n\t\r\n\tSELECT\r\n\tpc.PolicyAKID as PolicyAKID,\r\n\trl.StateProvinceCode as StateProvinceCode,\r\n\tpt.BaseRate as ExperienceModificationFactor,\r\n\tpt.ExperienceModificationEffectiveDate as ExperienceModificationEffectiveDate,\r\n\tpt.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,\r\n\tpt.PremiumTransactionExpirationDate as PremiumTransactionExpirationDate,\r\n\tpt.PremiumTransactionEnteredDate as PremiumTransactionEnteredDate,\r\n\tpt.PremiumTransactionCode as PremiumTransactionCode,\r\n\tpt.OffsetOnsetCode as OffsetOnsetCode\r\n\tFROM\r\n\t @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc\r\n\ton rc.RatingCoverageAKID=pt.RatingCoverageAKID and rc.EffectiveDate = pt.EffectiveDate\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage pc \r\n\ton pc.PolicyCoverageAKID=rc.PolicyCoverageAKID and pc.CurrentSnapshotFlag = 1\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation rl\r\n\ton rl.RiskLocationAKID=pc.RiskLocationAKID and rl.CurrentSnapshotFlag = 1\r\n\tinner join ClassCodeDrivers ccd on rc.ClassCode = ccd.ClassCode\r\n\tWHERE pc.TypeBureauCode in ('WC','WP','WorkersCompensation') \r\n\tand pt.PremiumType='D'   \r\n\tand pt.ReasonAmendedCode NOT IN ('CWO','Claw Back')\r\n\tand pt.SourceSystemID = 'DCT'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\tGROUP BY pc.PolicyAKID, rl.StateProvinceCode, pt.BaseRate, pt.ExperienceModificationEffectiveDate, pt.PremiumTransactionEffectiveDate,\r\n\tpt.PremiumTransactionExpirationDate, pt.PremiumTransactionEnteredDate, pt.PremiumTransactionCode, pt.OffsetOnsetCode\n),\nEXP_Default AS (\n\tSELECT\n\tPolicyAKID,\n\tStateProvinceCode,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionCode,\n\tOffsetOnsetCode,\n\tSYSDATE AS CreatedDate\n\tFROM SQ_Get_Candidate_ExpModTransactions\n),\nWorkDCTExperienceModPremiumTransaction AS (\n\tTRUNCATE TABLE WorkDCTExperienceModPremiumTransaction;\n\tINSERT INTO WorkDCTExperienceModPremiumTransaction\n\t(CreatedDate, PolicyAKID, StateProvinceCode, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionEnteredDate, PremiumTransactionCode, OffsetOnsetCode)\n\tSELECT \n\tCREATEDDATE, \n\tPOLICYAKID, \n\tSTATEPROVINCECODE, \n\tEXPERIENCEMODIFICATIONFACTOR, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPREMIUMTRANSACTIONEFFECTIVEDATE, \n\tPREMIUMTRANSACTIONEXPIRATIONDATE, \n\tPREMIUMTRANSACTIONENTEREDDATE, \n\tPREMIUMTRANSACTIONCODE, \n\tOFFSETONSETCODE\n\tFROM EXP_Default\n),\nSQ_Get_candidate_transactions AS (\n\t--identify eligible policyakids\r\n\tWITH\r\n\tcte_pollist as\r\n\t(SELECT DISTINCT policyakid as policyakid from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTExperienceModPremiumTransaction)\r\n\t\r\n\t--identify all underlying premiumtransaction records that need updates\r\n\tSELECT DISTINCT\r\n\tpt.PremiumTransactionID, \r\n\tpt.ExperienceModificationFactor as oldExperienceModificationFactor,\r\n\tpt.ExperienceModificationEffectiveDate as oldExperienceModificationEffectiveDate,\r\n\tlkp.ExperienceModificationFactor as ExperienceModificationFactor,\r\n\tlkp.ExperienceModificationEffectiveDate as ExperienceModificationEffectiveDate,\r\n\trl.StateProvinceCode,\r\n\trc.ClassCode\r\n\tFROM \r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc on rc.RatingCoverageAKID=pt.RatingCoverageAKID and rc.EffectiveDate = pt.EffectiveDate\r\n\tINNER JOIN  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage pc on pc.PolicyCoverageAKID=rc.PolicyCoverageAKID and pc.CurrentSnapshotFlag = 1\r\n\tINNER JOIN  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation rl on rl.RiskLocationAKID=pc.RiskLocationAKID and rl.CurrentSnapshotFlag = 1\r\n\tINNER JOIN  cte_pollist pl on pl.PolicyAKID = pc.PolicyAKID\r\n\tINNER JOIN  -- why was this left join previously???\r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTExperienceModPremiumTransaction lkp\r\n\ton lkp.PolicyAKID = PC.PolicyAKID and lkp.StateProvinceCode = rl.StateProvinceCode and lkp.PremiumTransactionEffectiveDate = pt.PremiumTransactionEffectiveDate \r\n\tand lkp.PremiumTransactionExpirationDate = PT.PremiumTransactionExpirationDate and lkp.PremiumTransactionEnteredDate = pt.PremiumTransactionEnteredDate\r\n\tand lkp.PremiumTransactionCode = pt.PremiumTransactionCode and lkp.OffsetOnsetCode = pt.OffsetOnsetCode\r\n\tWHERE pt.ReasonAmendedCode NOT IN ('CWO','Claw Back')\r\n\t@{pipeline().parameters.WHERE_CLAUSE1}\n),\nEXP_Evaluate_attributes AS (\n\tSELECT\n\tPremiumTransactionID,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tStateProvinceCode,\n\tClassCode,\n\toldExperienceModificationFactor,\n\toldExperienceModificationEffectiveDate,\n\t-- *INF*: :LKP.LKP_SupClassificationWorkersCompensation(ClassCode,StateProvinceCode)\n\tLKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_StateProvinceCode.SupClassificationWorkersCompensationId AS ClassCodeStateId,\n\t-- *INF*: :LKP.LKP_SupClassificationWorkersCompensation(ClassCode,'99')\n\tLKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_99.SupClassificationWorkersCompensationId AS ClassCode99Id,\n\t-- *INF*: IIF((NOT ISNULL(ClassCodeStateId)) or (NOT ISNULL(ClassCode99Id)),ExperienceModificationFactor,0.0)\r\n\t-- --- One of the two lookups must be successful in order to pass the EMF - else it is defaulted to zero\n\tIFF(( ClassCodeStateId IS NOT NULL \n\t\t) \n\t\tOR ( ClassCode99Id IS NOT NULL \n\t\t),\n\t\tExperienceModificationFactor,\n\t\t0.0\n\t) AS v_ExperienceModificationFactor,\n\t-- *INF*: IIF((NOT ISNULL(ClassCodeStateId)) or (NOT ISNULL(ClassCode99Id)),ExperienceModificationEffectiveDate,TO_DATE('12-31-2100','MM-DD-YYYY'))\r\n\t-- --- One of the two lookups must be successful in order to pass the EMF - else it is defaulted to zero\r\n\t-- \r\n\t-- \n\tIFF(( ClassCodeStateId IS NOT NULL \n\t\t) \n\t\tOR ( ClassCode99Id IS NOT NULL \n\t\t),\n\t\tExperienceModificationEffectiveDate,\n\t\tTO_DATE('12-31-2100', 'MM-DD-YYYY'\n\t\t)\n\t) AS v_ExperienceModificationEffectiveDate,\n\tv_ExperienceModificationFactor AS o_ExperienceModificationFactor,\n\tv_ExperienceModificationEffectiveDate AS o_ExperienceModificationEffectiveDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(ClassCodeStateId) and ISNULL(ClassCode99Id),0,\r\n\t-- (v_ExperienceModificationFactor = oldExperienceModificationFactor)  AND (v_ExperienceModificationEffectiveDate = oldExperienceModificationEffectiveDate),0,\r\n\t-- 1)\r\n\t-- -- If existing values are the same as determined values then no update is necessary\n\tDECODE(TRUE,\n\t\tClassCodeStateId IS NULL \n\t\tAND ClassCode99Id IS NULL, 0,\n\t\t( v_ExperienceModificationFactor = oldExperienceModificationFactor \n\t\t) \n\t\tAND ( v_ExperienceModificationEffectiveDate = oldExperienceModificationEffectiveDate \n\t\t), 0,\n\t\t1\n\t) AS updateflag\n\tFROM SQ_Get_candidate_transactions\n\tLEFT JOIN LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_StateProvinceCode\n\tON LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_StateProvinceCode.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_StateProvinceCode.RatingStateCode = StateProvinceCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_99\n\tON LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_99.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATIONWORKERSCOMPENSATION_ClassCode_99.RatingStateCode = '99'\n\n),\nFIL_Transactions_with_changes AS (\n\tSELECT\n\tPremiumTransactionID, \n\to_ExperienceModificationFactor, \n\to_ExperienceModificationEffectiveDate, \n\tupdateflag\n\tFROM EXP_Evaluate_attributes\n\tWHERE updateflag = 1\n),\nUPD_Exp_Mod_Effd_PremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionID, \n\to_ExperienceModificationFactor AS ExperienceModificationFactor, \n\to_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate\n\tFROM FIL_Transactions_with_changes\n),\nPremiumTransaction_UPDATE AS (\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPD_Exp_Mod_Effd_PremiumTransaction AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ExperienceModificationFactor = S.ExperienceModificationFactor, T.ExperienceModificationEffectiveDate = S.ExperienceModificationEffectiveDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603235"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "WHERE_CLAUSE1": {
                "type": "string",
                "defaultValue": ""
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}