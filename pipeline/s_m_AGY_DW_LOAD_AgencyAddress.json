{
    "name": "s_m_AGY_DW_LOAD_AgencyAddress",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_LOAD_AgencyAddress",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_AgencyAddressODSStage AS (\n\tSELECT\n\t\tAgencyCode,\n\t\tAddressType,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tAddressLine3,\n\t\tCity,\n\t\tZipCode,\n\t\tCountyCode,\n\t\tCountyName,\n\t\tStateAbbreviation,\n\t\tCountryAbbreviation,\n\t\tLatitude,\n\t\tLongitude,\n\t\tSourceSystemID\n\tFROM AgencyAddressODSStage\n),\nLKP_AgencyAKID AS (\n\tSELECT\n\tAgencyAKID,\n\tAgencyCode\n\tFROM (\n\t\tSELECT \n\t\t\tAgencyAKID,\n\t\t\tAgencyCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Agency\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode ORDER BY AgencyAKID) = 1\n),\nEXP_CleanupValues AS (\n\tSELECT\n\tSQ_AgencyAddressODSStage.AgencyCode,\n\tLKP_AgencyAKID.AgencyAKID,\n\tSQ_AgencyAddressODSStage.AddressType,\n\tSQ_AgencyAddressODSStage.AddressLine1,\n\t-- *INF*: IIF(IsNull(AddressLine1), 'N/A', AddressLine1)\n\tIFF(AddressLine1 IS NULL, 'N/A', AddressLine1) AS o_AddressLine1,\n\tSQ_AgencyAddressODSStage.AddressLine2,\n\t-- *INF*: IIF(IsNull(AddressLine2), 'N/A', AddressLine2)\n\tIFF(AddressLine2 IS NULL, 'N/A', AddressLine2) AS o_AddressLine2,\n\tSQ_AgencyAddressODSStage.AddressLine3,\n\t-- *INF*: IIF(IsNull(AddressLine3), 'N/A', AddressLine3)\n\tIFF(AddressLine3 IS NULL, 'N/A', AddressLine3) AS o_AddressLine3,\n\tSQ_AgencyAddressODSStage.City,\n\t-- *INF*: IIF(IsNull(City), 'N/A', City)\n\tIFF(City IS NULL, 'N/A', City) AS o_City,\n\tSQ_AgencyAddressODSStage.ZipCode,\n\t-- *INF*: IIF(IsNull(ZipCode), 'N/A', ZipCode)\n\tIFF(ZipCode IS NULL, 'N/A', ZipCode) AS o_ZipCode,\n\tSQ_AgencyAddressODSStage.CountyCode,\n\t-- *INF*: IIF(IsNull(CountyCode), 'N/A', CountyCode)\n\tIFF(CountyCode IS NULL, 'N/A', CountyCode) AS o_CountyCode,\n\tSQ_AgencyAddressODSStage.CountyName,\n\t-- *INF*: IIF(IsNull(CountyName), 'N/A', CountyName)\n\tIFF(CountyName IS NULL, 'N/A', CountyName) AS o_CountyName,\n\tSQ_AgencyAddressODSStage.StateAbbreviation,\n\t-- *INF*: IIF(IsNull(StateAbbreviation), 'NA', StateAbbreviation)\n\tIFF(StateAbbreviation IS NULL, 'NA', StateAbbreviation) AS o_StateAbbreviation,\n\tSQ_AgencyAddressODSStage.CountryAbbreviation,\n\t-- *INF*: IIF(IsNull(CountryAbbreviation), 'USA', CountryAbbreviation)\n\tIFF(CountryAbbreviation IS NULL, 'USA', CountryAbbreviation) AS o_CountryAbbreviation,\n\tSQ_AgencyAddressODSStage.Latitude,\n\t-- *INF*: IIF(IsNull(Latitude), 000.000000, Latitude)\n\tIFF(Latitude IS NULL, 000.000000, Latitude) AS o_Latitude,\n\tSQ_AgencyAddressODSStage.Longitude,\n\t-- *INF*: IIF(IsNull(Longitude), 000.000000, Longitude)\n\tIFF(Longitude IS NULL, 000.000000, Longitude) AS o_Longitude,\n\tSQ_AgencyAddressODSStage.SourceSystemID\n\tFROM SQ_AgencyAddressODSStage\n\tLEFT JOIN LKP_AgencyAKID\n\tON LKP_AgencyAKID.AgencyCode = SQ_AgencyAddressODSStage.AgencyCode\n),\nlkp_ExistingAddress AS (\n\tSELECT\n\tHashKey,\n\tAgencyAddressAKID,\n\tAgencyAKID,\n\tAddressType\n\tFROM (\n\t\tSELECT \n\t\t\tHashKey,\n\t\t\tAgencyAddressAKID,\n\t\t\tAgencyAKID,\n\t\t\tAddressType\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyAddress\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyAKID,AddressType ORDER BY HashKey) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tlkp_ExistingAddress.HashKey AS lkp_HashKey,\n\tlkp_ExistingAddress.AgencyAddressAKID AS lkp_AgencyAddressAKID,\n\tEXP_CleanupValues.AgencyAKID,\n\tEXP_CleanupValues.AddressType,\n\tEXP_CleanupValues.o_AddressLine1 AS AddressLine1,\n\tEXP_CleanupValues.o_AddressLine2 AS AddressLine2,\n\tEXP_CleanupValues.o_AddressLine3 AS AddressLine3,\n\tEXP_CleanupValues.o_City AS City,\n\tEXP_CleanupValues.o_ZipCode AS ZipCode,\n\tEXP_CleanupValues.o_CountyCode AS CountyCode,\n\tEXP_CleanupValues.o_CountyName AS CountyName,\n\tEXP_CleanupValues.o_StateAbbreviation AS StateAbbreviation,\n\tEXP_CleanupValues.o_CountryAbbreviation AS CountryAbbreviation,\n\tEXP_CleanupValues.o_Latitude AS Latitude,\n\tEXP_CleanupValues.o_Longitude AS Longitude,\n\t-- *INF*: MD5(AddressLine1 || AddressLine2 || AddressLine3 || City || ZipCode || CountyCode || CountyName || StateAbbreviation || CountryAbbreviation || to_char(Latitude) || to_char(Longitude))\n\tMD5(AddressLine1 || AddressLine2 || AddressLine3 || City || ZipCode || CountyCode || CountyName || StateAbbreviation || CountryAbbreviation || to_char(Latitude) || to_char(Longitude)) AS v_NewHashKey,\n\tv_NewHashKey AS o_HashKey,\n\t-- *INF*: Decode(true,\r\n\t-- IsNull(AgencyAKID), 'IGNORE',\r\n\t-- IsNull(lkp_AgencyAddressAKID), 'NEW', \r\n\t-- (lkp_HashKey <> v_NewHashKey), 'UPDATE' ,\r\n\t-- 'NOCHANGE')\n\tDecode(\n\t    true,\n\t    AgencyAKID IS NULL, 'IGNORE',\n\t    lkp_AgencyAddressAKID IS NULL, 'NEW',\n\t    (lkp_HashKey <> v_NewHashKey), 'UPDATE',\n\t    'NOCHANGE'\n\t) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(\n\t    v_changed_flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS EffectiveFromDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS EffectiveToDate,\n\tEXP_CleanupValues.SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM EXP_CleanupValues\n\tLEFT JOIN lkp_ExistingAddress\n\tON lkp_ExistingAddress.AgencyAKID = EXP_CleanupValues.AgencyAKID AND lkp_ExistingAddress.AddressType = EXP_CleanupValues.AddressType\n),\nFIL_insert AS (\n\tSELECT\n\tlkp_AgencyAddressAKID, \n\tchanged_flag AS ChangedFlag, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveFromDate, \n\tEffectiveToDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\tAgencyAKID, \n\tAddressType, \n\tAddressLine1, \n\tAddressLine2, \n\tAddressLine3, \n\tCity, \n\tZipCode, \n\tCountyCode, \n\tCountyName, \n\tStateAbbreviation, \n\tCountryAbbreviation, \n\tLatitude, \n\tLongitude, \n\to_HashKey\n\tFROM EXP_Detect_Changes\n\tWHERE ChangedFlag='NEW'or ChangedFlag='UPDATE'\n),\nSEQ_AgencyAddress_AKID AS (\n\tCREATE SEQUENCE SEQ_AgencyAddress_AKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Assign_AKID AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveFromDate AS EffectiveDate,\n\tEffectiveToDate AS ExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\to_HashKey AS HashKey,\n\tlkp_AgencyAddressAKID,\n\tSEQ_AgencyAddress_AKID.NEXTVAL,\n\t-- *INF*: iif(isnull(lkp_AgencyAddressAKID),NEXTVAL,lkp_AgencyAddressAKID)\n\tIFF(lkp_AgencyAddressAKID IS NULL, NEXTVAL, lkp_AgencyAddressAKID) AS o_AgencyAddressAKID,\n\tAgencyAKID,\n\tAddressType,\n\tAddressLine1,\n\tAddressLine2,\n\tAddressLine3,\n\tCity,\n\tZipCode,\n\tCountyCode,\n\tCountyName,\n\tStateAbbreviation,\n\tCountryAbbreviation,\n\tLatitude,\n\tLongitude\n\tFROM FIL_insert\n),\nAgencyAddress_Inserts AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyAddress\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, HashKey, AgencyAddressAKID, AgencyAKID, AddressType, AddressLine1, AddressLine2, AddressLine3, City, ZipCode, CountyCode, CountyName, StateAbbreviation, CountryAbbreviation, Latitude, Longitude)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tHASHKEY, \n\to_AgencyAddressAKID AS AGENCYADDRESSAKID, \n\tAGENCYAKID, \n\tADDRESSTYPE, \n\tADDRESSLINE1, \n\tADDRESSLINE2, \n\tADDRESSLINE3, \n\tCITY, \n\tZIPCODE, \n\tCOUNTYCODE, \n\tCOUNTYNAME, \n\tSTATEABBREVIATION, \n\tCOUNTRYABBREVIATION, \n\tLATITUDE, \n\tLONGITUDE\n\tFROM EXP_Assign_AKID\n),\nSQ_AgencyAddress AS (\n\tSELECT \r\n\t\ta.AgencyAddressID, \r\n\t\ta.EffectiveDate,\r\n\t\ta.ExpirationDate, \r\n\t\ta.AgencyAddressAKID\r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyAddress a\r\n\tWHERE  a.AgencyAddressAKID  IN\r\n\t\t( SELECT AgencyAddressAKID  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyAddress\r\n\t\tWHERE CurrentSnapshotFlag = 1 GROUP BY AgencyAddressAKID HAVING count(*) > 1) \r\n\tORDER BY a.AgencyAddressAKID, a.EffectiveDate DESC\r\n\t\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tAgencyAddressID,\n\tEffectiveDate AS EffectiveFromDate,\n\tExpirationDate AS OriginalEffectiveToDate,\n\tAgencyAddressAKID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- AgencyAddressAKID = v_prev_AKID , ADD_TO_DATE(v_prev_EffectiveFromDate,'SS',-1),\r\n\t-- OriginalEffectiveToDate)\n\tDECODE(\n\t    TRUE,\n\t    AgencyAddressAKID = v_prev_AKID, DATEADD(SECOND,- 1,v_prev_EffectiveFromDate),\n\t    OriginalEffectiveToDate\n\t) AS v_EffectiveToDate,\n\tv_EffectiveToDate AS o_EffectiveToDate,\n\tAgencyAddressAKID AS v_prev_AKID,\n\tEffectiveFromDate AS v_prev_EffectiveFromDate,\n\t0 AS CurrentSnapshotFlag,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_AgencyAddress\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tAgencyAddressID AS AgencyAddressId, \n\tOriginalEffectiveToDate, \n\to_EffectiveToDate AS NewEffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM EXP_Lag_eff_from_date\n\tWHERE OriginalEffectiveToDate != NewEffectiveToDate\n),\nUPD_OldRecord AS (\n\tSELECT\n\tAgencyAddressId AS AgencyAddressID, \n\tNewEffectiveToDate AS EffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nAgencyAddress_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyAddress AS T\n\tUSING UPD_OldRecord AS S\n\tON T.AgencyAddressID = S.AgencyAddressID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.EffectiveToDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "AgencyDataWarehouse/"
        },
        "annotations": []
    }
}