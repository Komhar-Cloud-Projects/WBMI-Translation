{
    "name": "s_m_CLM_DW_LOAD_SupMedicalClassCodeType",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_SupMedicalClassCodeType",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_SupMedicalClassCodeTypeStage AS (\n\tSELECT SupMedicalClassCodeTypeStage.code_type, SupMedicalClassCodeTypeStage.descript \r\n\tFROM\r\n\t SupMedicalClassCodeTypeStage\n),\nEXP_Src_Value AS (\n\tSELECT\n\tcode_type,\n\t-- *INF*: iif(isnull(code_type),-1,code_type)\n\tIFF(code_type IS NULL, - 1, code_type) AS o_code_type,\n\tdescript,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(descript),'N/A',\r\n\t-- IS_SPACES(descript),'N/A',\r\n\t-- LENGTH(descript)=0,'N/A',\r\n\t-- LTRIM(RTRIM(descript)))\n\tDECODE(TRUE,\n\t\tdescript IS NULL, 'N/A',\n\t\tIS_SPACES(descript), 'N/A',\n\t\tLENGTH(descript) = 0, 'N/A',\n\t\tLTRIM(RTRIM(descript))) AS o_descript\n\tFROM SQ_SupMedicalClassCodeTypeStage\n),\nLKP_SupMedicalClassCodeType AS (\n\tSELECT\n\tSupMedicalClassCodeTypeId,\n\tMedicalClassCodeType,\n\tDescription\n\tFROM (\n\t\tSELECT \r\n\t\tS.SupMedicalClassCodeTypeId as SupMedicalClassCodeTypeId, \r\n\t\tS.Description as Description, \r\n\t\tS.MedicalClassCodeType as MedicalClassCodeType\r\n\t\t\r\n\t\t FROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalClassCodeType S\r\n\t\t\r\n\t\twhere \r\n\t\tS.CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY MedicalClassCodeType,Description ORDER BY SupMedicalClassCodeTypeId) = 1\n),\nEXP_TargetLkp_Detect_Changes AS (\n\tSELECT\n\tLKP_SupMedicalClassCodeType.SupMedicalClassCodeTypeId AS Lkp_SupMedicalClassCodeTypeId,\n\tLKP_SupMedicalClassCodeType.MedicalClassCodeType AS Lkp_MedicalClassCodeType,\n\tLKP_SupMedicalClassCodeType.Description AS Lkp_Description,\n\t-- *INF*: iif(isnull(Lkp_SupMedicalClassCodeTypeId), 'NEW',\r\n\t-- \r\n\t--   iif(\r\n\t--    \r\n\t--      ltrim(rtrim(Lkp_MedicalClassCodeType)) != ltrim(rtrim(MedicalClassCodeType))\r\n\t-- \r\n\t-- or\r\n\t-- \r\n\t--     ltrim(rtrim(Lkp_Description)) != ltrim(rtrim(Description)),\r\n\t-- \r\n\t--      'UPDATE', 'NOCHANGE' )\r\n\t-- \r\n\t--     )\n\tIFF(Lkp_SupMedicalClassCodeTypeId IS NULL, 'NEW', IFF(ltrim(rtrim(Lkp_MedicalClassCodeType)) != ltrim(rtrim(MedicalClassCodeType)) OR ltrim(rtrim(Lkp_Description)) != ltrim(rtrim(Description)), 'UPDATE', 'NOCHANGE')) AS v_ChangedFlag,\n\tv_ChangedFlag AS ChangedFlag,\n\tEXP_Src_Value.o_code_type AS MedicalClassCodeType,\n\tEXP_Src_Value.o_descript AS Description,\n\t-- *INF*: iif(v_ChangedFlag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_ChangedFlag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId\n\tFROM EXP_Src_Value\n\tLEFT JOIN LKP_SupMedicalClassCodeType\n\tON LKP_SupMedicalClassCodeType.MedicalClassCodeType = EXP_Src_Value.o_code_type AND LKP_SupMedicalClassCodeType.Description = EXP_Src_Value.o_descript\n),\nFIL_Lkp_Records AS (\n\tSELECT\n\tChangedFlag, \n\tMedicalClassCodeType, \n\tDescription, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemId, \n\tCreatedDate, \n\tModifiedDate, \n\tCurrentSnapshotFlag, \n\tAuditId\n\tFROM EXP_TargetLkp_Detect_Changes\n\tWHERE ChangedFlag = 'NEW' or ChangedFlag = 'UPDATE'\n),\nSupMedicalClassCodeType_Insert AS (\n\tINSERT INTO SupMedicalClassCodeType\n\t(CurrentSnapshotFlag, AuditId, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, MedicalClassCodeType, Description)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tMEDICALCLASSCODETYPE, \n\tDESCRIPTION\n\tFROM FIL_Lkp_Records\n),\nSQ_SupMedicalClassCodeType AS (\n\tSELECT\r\n\tA.SupMedicalClassCodeTypeId,\r\n\tA.EffectiveDate,\r\n\tA.ExpirationDate,\r\n\tA.MedicalClassCodeType \r\n\t\r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalClassCodeType A\r\n\t\r\n\tWHERE Exists \r\n\t    (\r\n\tSELECT 1\r\n\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupMedicalClassCodeType B\r\n\t\r\n\tWHERE\r\n\tB.CurrentSnapshotFlag = 1\r\n\tAND\r\n\tA.MedicalClassCodeType = B.MedicalClassCodeType\r\n\t\r\n\tGROUP BY\r\n\tB.MedicalClassCodeType\r\n\t\r\n\tHAVING \r\n\tCOUNT(*) > 1\r\n\t       )\r\n\t\r\n\tAND\r\n\tA.CurrentSnapshotFlag = 1\r\n\t\r\n\tORDER BY\r\n\tA.MedicalClassCodeType,\r\n\tA.EffectiveDate DESC\n),\nEXP_Lag_ExpirationDate AS (\n\tSELECT\n\tSupMedicalClassCodeTypeId,\n\tEffectiveDate,\n\tExpirationDate AS orig_ExpirationDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tMedicalClassCodeType= v_PREV_ROW_MedicalClassCodeType, ADD_TO_DATE(v_PREV_ROW_EffectiveDate,'SS',-1),\r\n\t-- \torig_ExpirationDate)\n\tDECODE(TRUE,\n\t\tMedicalClassCodeType = v_PREV_ROW_MedicalClassCodeType, ADD_TO_DATE(v_PREV_ROW_EffectiveDate, 'SS', - 1),\n\t\torig_ExpirationDate) AS v_ExpirationDate,\n\tv_ExpirationDate AS ExpirationDate,\n\tEffectiveDate AS v_PREV_ROW_EffectiveDate,\n\tMedicalClassCodeType AS v_PREV_ROW_MedicalClassCodeType,\n\tMedicalClassCodeType,\n\tSYSDATE AS ModifiedDate,\n\t0 AS CurrentSnapshotFlag\n\tFROM SQ_SupMedicalClassCodeType\n),\nFIL_FirstRowAkId AS (\n\tSELECT\n\tSupMedicalClassCodeTypeId, \n\torig_ExpirationDate, \n\tExpirationDate, \n\tModifiedDate, \n\tCurrentSnapshotFlag\n\tFROM EXP_Lag_ExpirationDate\n\tWHERE orig_ExpirationDate != ExpirationDate\n),\nUPD_SupMedicalClassCodeType AS (\n\tSELECT\n\tSupMedicalClassCodeTypeId, \n\tExpirationDate, \n\tModifiedDate, \n\tCurrentSnapshotFlag\n\tFROM FIL_FirstRowAkId\n),\nSupMedicalClassCodeType_Update AS (\n\tMERGE INTO SupMedicalClassCodeType AS T\n\tUSING UPD_SupMedicalClassCodeType AS S\n\tON T.SupMedicalClassCodeTypeId = S.SupMedicalClassCodeTypeId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246502"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905527"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604463"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:30:37"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:35:40"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}