{
    "name": "s_m_POL_DW_LOAD_ModifiedPremiumNonWorkersCompensationCalculation",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_ModifiedPremiumNonWorkersCompensationC_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_WorkEarnedPremiumCoverageMonthly AS (\n\tSELECT\n\tStatisticalCoverageAKID,\n\tRunDate\n\tFROM (\n\t\tDeclare @MONTHEND as Datetime\r\n\t\t\r\n\t\tSet @MONTHEND= @{pipeline().parameters.MONTHEND}\r\n\t\t\r\n\t\tSELECT w.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\tw.RunDate as RunDate\r\n\t\tFROM WorkEarnedPremiumCoverageMonthly w\r\n\t\tjoin (\r\n\t\tselect distinct left(WorkRatingModifierKey,12) PolicyKey\r\n\t\tfrom WorkRatingModifier\r\n\t\twhere ModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\tand RunDate<@MONTHEND\r\n\t\tand SourceSystemId='PMS'\r\n\t\t) b\r\n\t\ton w.PolicyKey=b.PolicyKey\r\n\t\torder by w.StatisticalCoverageAKID,w.RunDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StatisticalCoverageAKID,RunDate ORDER BY StatisticalCoverageAKID) = 1\n),\nLKP_RatingCoverage_Cancellation AS (\n\tSELECT\n\tWorkRatingModifierAKId,\n\tRatingCoverageAKId,\n\tEffectiveDate,\n\tExpirationDate\n\tFROM (\n\t\tDeclare @MONTHEND as Datetime\r\n\t\t\r\n\t\tSet @MONTHEND= @{pipeline().parameters.MONTHEND}\r\n\t\t\r\n\t\t\r\n\t\tselect a.RatingCoverageAKId as RatingCoverageAKId,\r\n\t\ta.WorkRatingModifierAKId as WorkRatingModifierAKId,\r\n\t\ta.EffectiveDate as EffectiveDate,\r\n\t\tdateadd(ss,-1,ISNULL(lead(a.EffectiveDate,1) over (partition by a.RatingCoverageAKId,a.WorkRatingModifierAKId order by EffectiveDate),'2101-1-1 00:00:00'))\r\n\t\tas ExpirationDate\r\n\t\tfrom (\r\n\t\tselect distinct rc.RatingCoverageAKId as RatingCoverageAKId,\r\n\t\ta.WorkRatingModifierAKId as WorkRatingModifierAKId,\r\n\t\tdateadd(ss,86399,cast(floor(cast(case when pt.PremiumTransactionEffectiveDate>=pt.PremiumTransactionEnteredDate\r\n\t\tthen pt.PremiumTransactionEffectiveDate else pt.PremiumTransactionEnteredDate end as float)) as datetime)) as EffectiveDate\r\n\t\tfrom RatingCoverage rc\r\n\t\tinner hash join PremiumTransaction pt\r\n\t\ton rc.RatingCoverageAKID=pt.RatingCoverageAKId\r\n\t\tand rc.EffectiveDate=pt.EffectiveDate\r\n\t\tand not pt.OffsetOnsetCode in ('Offset','Deprecated')\r\n\t\tand not pt.ReasonAmendedCode in ('COL','CWO','Claw Back')\r\n\t\tand pt.SourceSystemID='DCT'\r\n\t\tinner hash join WorkPremiumTransactionRatingModifierBridge a\r\n\t\ton a.PremiumTransactionAKId=pt.PremiumTransactionAKID\r\n\t\tand a.SourceSystemID='DCT'\r\n\t\tand a.WorkRatingModifierAKId<>-1\r\n\t\tinner hash join (\r\n\t\tselect distinct WorkRatingModifierAKId\r\n\t\tfrom WorkRatingModifier a \r\n\t\twhere ModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\tand RunDate<@MONTHEND\r\n\t\tand SourceSystemId='DCT'\r\n\t\t) b\r\n\t\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\t\twhere rc.RatingCoverageCancellationDate<'2100-12-31') a\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RatingCoverageAKId,WorkRatingModifierAKId,EffectiveDate,ExpirationDate ORDER BY WorkRatingModifierAKId) = 1\n),\nSQ_Natural AS (\n\tDeclare @MONTHEND as Datetime\r\n\t\r\n\tSet @MONTHEND=  @{pipeline().parameters.MONTHEND}\r\n\t\r\n\tselect c.PremiumMasterCalculationID,\r\n\tc.PremiumMasterPremium as PremiumTransactionAmount,\r\n\ta.RunDate,\r\n\tcase when c.PremiumMasterCoverageEffectiveDate>=c.PremiumTransactionEnteredDate then c.PremiumMasterCoverageEffectiveDate else c.PremiumTransactionEnteredDate end as NewRunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\ta.SourceSystemId\r\n\tfrom WorkRatingModifier a\r\n\tjoin WorkPremiumTransactionRatingModifierBridge b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\tand b.RunDate=a.RunDate\r\n\tjoin PremiumMasterCalculation c\r\n\ton c.PremiumMasterCalculationID=b.PremiumMasterCalculationID\r\n\tand b.PremiumMasterCalculationID<>-1\r\n\tand c.CurrentSnapshotFlag=1\r\n\tand c.PremiumMasterPremiumType='D'\r\n\tand c.PremiumMasterPremium<>0\r\n\tand c.PremiumMasterReasonAmendedCode not in ('COL','CWO','Claw Back' ,'CWB')\r\n\twhere b.ModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\tand c.PremiumMasterRunDate<@MONTHEND\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t\r\n\tunion all\r\n\tselect c.PremiumMasterCalculationID,\r\n\tc.PremiumMasterPremium as PremiumTransactionAmount,\r\n\ta.RunDate,\r\n\tcase when c.PremiumMasterCoverageEffectiveDate>=c.PremiumTransactionEnteredDate then c.PremiumMasterCoverageEffectiveDate else c.PremiumTransactionEnteredDate end as NewRunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\ta.SourceSystemId\r\n\tfrom WorkRatingModifier a\r\n\tjoin WorkPremiumTransactionRatingModifierBridge b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\tand b.RunDate=a.RunDate\r\n\tjoin PremiumMasterCalculation c\r\n\ton b.PremiumMasterCalculationID=-1\r\n\tand c.PremiumTransactionAKID = b.PremiumTransactionAKID\r\n\tand c.CurrentSnapshotFlag=1\r\n\tand c.PremiumMasterPremiumType='D'\r\n\tand c.PremiumMasterPremium<>0\r\n\tand c.PremiumMasterReasonAmendedCode not in ('COL','CWO','Claw Back' ,'CWB')\r\n\twhere --convert(varchar(6),b.ModifiedDate,112)>= convert(varchar(6), cast ('@{pipeline().parameters.SELECTION_START_TS}'  as date ),112) \r\n\tb.ModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t--and a.RunDate<@MONTHEND\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_Natural AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tPremiumTransactionAmount,\n\tRunDate,\n\tNewRunDate,\n\tOtherModifiedFactor,\n\tScheduleModifiedFactor,\n\tExperienceModifiedFactor,\n\t-- *INF*: ADD_TO_DATE(TRUNC(NewRunDate,'DD'),'SS',86399)\n\tDATEADD(SECOND,86399,CAST(TRUNC(NewRunDate, 'DAY') AS TIMESTAMP_NTZ(0))) AS v_NewRunDate,\n\tSourceSystemID,\n\t-- *INF*: GREATEST(RunDate,v_NewRunDate)\n\tGREATEST(RunDate, v_NewRunDate\n\t) AS o_RunDate,\n\t'0' AS GeneratedRecordIndicator,\n\tPremiumTransactionAmount AS OtherModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor, 4\n\t) AS ScheduleModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor/ScheduleModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor / ScheduleModifiedFactor, 4\n\t) AS ExperienceModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor/ScheduleModifiedFactor/ExperienceModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor / ScheduleModifiedFactor / ExperienceModifiedFactor, 4\n\t) AS SubjectWrittenPremium\n\tFROM SQ_Natural\n),\nSQ_Generated AS (\n\tDeclare @MONTHEND as Datetime\r\n\t\r\n\tSet @MONTHEND= @{pipeline().parameters.MONTHEND}\r\n\t\r\n\t\r\n\tselect c.PremiumMasterCalculationID,\r\n\tc.SourceSystemID,\r\n\tc.StatisticalCoverageAKId,\r\n\tc.PremiumMasterPremium as PremiumTransactionAmount,\r\n\tc.RatingCoverageAKId,\r\n\tb.WorkRatingModifierAKId,\r\n\ta.RunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\ta.PreviousOtherModifiedfactor,\r\n\ta.PreviousScheduleModifiedfactor,\r\n\ta.PreviousExperienceModifiedfactor\r\n\tfrom (select a.WorkRatingModifierAKId,\r\n\ta.RunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\tLAG(a.OtherModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousOtherModifiedfactor,\r\n\tLAG(a.ScheduleModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousScheduleModifiedfactor,\r\n\tLAG(a.ExperienceModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousExperienceModifiedfactor\r\n\tfrom WorkRatingModifier a\r\n\tinner hash join (\r\n\tselect distinct WorkRatingModifierAKId\r\n\tfrom WorkRatingModifier a \r\n\twhere --convert(varchar(6),ModifiedDate,112)>=convert(varchar(6), cast( '@{pipeline().parameters.SELECTION_START_TS}'  as date ),112)\r\n\tModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\tand RunDate<@MONTHEND\r\n\t) b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\twhere a.WorkRatingModifierAKId<>-1\r\n\tand a.RunDate<@MONTHEND) a \r\n\tinner hash join WorkPremiumTransactionRatingModifierBridge b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\tand b.RunDate<a.RunDate\r\n\tand b.WorkRatingModifierAKId<>-1\r\n\tinner hash join PremiumMasterCalculation c\r\n\ton c.PremiumMasterCalculationID=b.PremiumMasterCalculationID\r\n\tand b.PremiumMasterCalculationID<>-1\r\n\tand c.CurrentSnapshotFlag=1\r\n\tand c.PremiumMasterPremiumType='D'\r\n\tand c.PremiumMasterPremium<>0\r\n\tand c.PremiumMasterReasonAmendedCode not in ('COL','CWO','Claw Back' ,'CWB')\r\n\tand c.PremiumMasterCoverageExpirationDate>a.RunDate\r\n\twhere a.OtherModifiedfactor<>a.PreviousOtherModifiedfactor\r\n\tand a.ScheduleModifiedfactor<>a.PreviousScheduleModifiedfactor\r\n\tand a.ExperienceModifiedfactor<>a.PreviousExperienceModifiedfactor\r\n\t\r\n\tunion all\r\n\tselect c.PremiumMasterCalculationID,\r\n\tc.SourceSystemID,\r\n\tc.StatisticalCoverageAKId,\r\n\tc.PremiumMasterPremium as PremiumTransactionAmount,\r\n\tc.RatingCoverageAKId,\r\n\tb.WorkRatingModifierAKId,\r\n\ta.RunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\ta.PreviousOtherModifiedfactor,\r\n\ta.PreviousScheduleModifiedfactor,\r\n\ta.PreviousExperienceModifiedfactor\r\n\tfrom (select a.WorkRatingModifierAKId,\r\n\ta.RunDate,\r\n\ta.OtherModifiedfactor,\r\n\ta.ScheduleModifiedfactor,\r\n\ta.ExperienceModifiedfactor,\r\n\tLAG(a.OtherModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousOtherModifiedfactor,\r\n\tLAG(a.ScheduleModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousScheduleModifiedfactor,\r\n\tLAG(a.ExperienceModifiedfactor,1) over (partition by a.WorkRatingModifierAKId order by a.RunDate) PreviousExperienceModifiedfactor\r\n\tfrom WorkRatingModifier a\r\n\tinner hash join (\r\n\tselect distinct WorkRatingModifierAKId\r\n\tfrom WorkRatingModifier a \r\n\twhere --convert(varchar(6),ModifiedDate,112)>=convert(varchar(6), cast(  '@{pipeline().parameters.SELECTION_START_TS}' as date ),112)\r\n\tModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\tand RunDate<@MONTHEND\r\n\t) b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\twhere a.WorkRatingModifierAKId<>-1\r\n\tand a.RunDate<@MONTHEND) a \r\n\tinner hash join WorkPremiumTransactionRatingModifierBridge b\r\n\ton a.WorkRatingModifierAKId=b.WorkRatingModifierAKId\r\n\tand b.RunDate<a.RunDate\r\n\tand b.WorkRatingModifierAKId<>-1\r\n\tinner hash join PremiumMasterCalculation c\r\n\ton b.PremiumMasterCalculationID=-1\r\n\tand c.PremiumTransactionAKID = b.PremiumTransactionAKID\r\n\tand c.CurrentSnapshotFlag=1\r\n\tand c.PremiumMasterPremiumType='D'\r\n\tand c.PremiumMasterPremium<>0\r\n\tand c.PremiumMasterReasonAmendedCode not in ('COL','CWO','Claw Back' ,'CWB')\r\n\tand c.PremiumMasterCoverageExpirationDate>a.RunDate\r\n\twhere a.OtherModifiedfactor<>a.PreviousOtherModifiedfactor\r\n\tand a.ScheduleModifiedfactor<>a.PreviousScheduleModifiedfactor\r\n\tand a.ExperienceModifiedfactor<>a.PreviousExperienceModifiedfactor\n),\nEXP_Cancelled AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tSourceSystemID,\n\tStatisticalCoverageAKId,\n\tPremiumTransactionAmount,\n\tRatingCoverageAKId,\n\tWorkRatingModifierAKId,\n\tRunDate,\n\tOtherModifiedFactor,\n\tScheduleModifiedFactor,\n\tExperienceModifiedFactor,\n\tPreviousOtherModifiedFactor,\n\tPreviousScheduleModifiedFactor,\n\tPreviousExperienceModifiedFactor,\n\t-- *INF*: ADD_TO_DATE(LAST_DAY(RunDate),'SS',86399)\n\tDATEADD(SECOND,86399,LAST_DAY(RunDate\n\t)) AS v_RunMonth,\n\t-- *INF*: DECODE(SourceSystemID,\r\n\t-- 'DCT',:LKP.LKP_RATINGCOVERAGE_CANCELLATION(RatingCoverageAKId,WorkRatingModifierAKId,RunDate),\r\n\t-- 'PMS',:LKP.LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY(StatisticalCoverageAKId,v_RunMonth)\r\n\t-- -1)\n\tDECODE(SourceSystemID,\n\t\t'DCT', LKP_RATINGCOVERAGE_CANCELLATION_RatingCoverageAKId_WorkRatingModifierAKId_RunDate.WorkRatingModifierAKId,\n\t\t'PMS', LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY_StatisticalCoverageAKId_v_RunMonth.StatisticalCoverageAKID - 1\n\t) AS CancelFlag\n\tFROM SQ_Generated\n\tLEFT JOIN LKP_RATINGCOVERAGE_CANCELLATION LKP_RATINGCOVERAGE_CANCELLATION_RatingCoverageAKId_WorkRatingModifierAKId_RunDate\n\tON LKP_RATINGCOVERAGE_CANCELLATION_RatingCoverageAKId_WorkRatingModifierAKId_RunDate.RatingCoverageAKId = RatingCoverageAKId\n\tAND LKP_RATINGCOVERAGE_CANCELLATION_RatingCoverageAKId_WorkRatingModifierAKId_RunDate.WorkRatingModifierAKId = WorkRatingModifierAKId\n\tAND LKP_RATINGCOVERAGE_CANCELLATION_RatingCoverageAKId_WorkRatingModifierAKId_RunDate.EffectiveDate = RunDate\n\n\tLEFT JOIN LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY_StatisticalCoverageAKId_v_RunMonth\n\tON LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY_StatisticalCoverageAKId_v_RunMonth.StatisticalCoverageAKID = StatisticalCoverageAKId\n\tAND LKP_WORKEARNEDPREMIUMCOVERAGEMONTHLY_StatisticalCoverageAKId_v_RunMonth.RunDate = v_RunMonth\n\n),\nFIL_Cancelled AS (\n\tSELECT\n\tPremiumMasterCalculationID, \n\tSourceSystemID, \n\tPremiumTransactionAmount, \n\tRunDate, \n\tOtherModifiedFactor, \n\tScheduleModifiedFactor, \n\tExperienceModifiedFactor, \n\tPreviousOtherModifiedFactor, \n\tPreviousScheduleModifiedFactor, \n\tPreviousExperienceModifiedFactor, \n\tCancelFlag\n\tFROM EXP_Cancelled\n\tWHERE ISNULL(CancelFlag)\n),\nEXP_Generated AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tSourceSystemID,\n\tPremiumTransactionAmount,\n\tRunDate,\n\tOtherModifiedFactor,\n\tScheduleModifiedFactor,\n\tExperienceModifiedFactor,\n\tPreviousOtherModifiedFactor,\n\tPreviousScheduleModifiedFactor,\n\tPreviousExperienceModifiedFactor,\n\tPremiumTransactionAmount AS v_OtherModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor-PremiumTransactionAmount/PreviousOtherModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor - PremiumTransactionAmount / PreviousOtherModifiedFactor, 4\n\t) AS v_ScheduleModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor/ScheduleModifiedFactor-PremiumTransactionAmount/PreviousOtherModifiedFactor/PreviousScheduleModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor / ScheduleModifiedFactor - PremiumTransactionAmount / PreviousOtherModifiedFactor / PreviousScheduleModifiedFactor, 4\n\t) AS v_ExperienceModifiedPremium,\n\t-- *INF*: ROUND(PremiumTransactionAmount/OtherModifiedFactor/ScheduleModifiedFactor/ExperienceModifiedFactor-PremiumTransactionAmount/PreviousOtherModifiedFactor/PreviousScheduleModifiedFactor/PreviousExperienceModifiedFactor,4)\n\tROUND(PremiumTransactionAmount / OtherModifiedFactor / ScheduleModifiedFactor / ExperienceModifiedFactor - PremiumTransactionAmount / PreviousOtherModifiedFactor / PreviousScheduleModifiedFactor / PreviousExperienceModifiedFactor, 4\n\t) AS v_SubjectWrittenPremium,\n\t'1' AS GeneratedRecordIndicator,\n\tv_OtherModifiedPremium AS OtherModifiedPremium,\n\tv_ScheduleModifiedPremium AS ScheduleModifiedPremium,\n\tv_ExperienceModifiedPremium AS ExperienceModifiedPremium,\n\tv_SubjectWrittenPremium AS SubjectWrittenPremium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_OtherModifiedPremium!=0,1,\r\n\t-- v_ScheduleModifiedPremium!=0,1,\r\n\t-- v_ExperienceModifiedPremium!=0,1,\r\n\t-- v_SubjectWrittenPremium!=0,1,\r\n\t-- 0)\n\tDECODE(TRUE,\n\t\tv_OtherModifiedPremium != 0, 1,\n\t\tv_ScheduleModifiedPremium != 0, 1,\n\t\tv_ExperienceModifiedPremium != 0, 1,\n\t\tv_SubjectWrittenPremium != 0, 1,\n\t\t0\n\t) AS FilterFlag\n\tFROM FIL_Cancelled\n),\nFILRecord_ValidModifiedPremium AS (\n\tSELECT\n\tPremiumMasterCalculationID, \n\tSourceSystemID, \n\tPremiumTransactionAmount, \n\tRunDate, \n\tGeneratedRecordIndicator, \n\tOtherModifiedPremium, \n\tScheduleModifiedPremium, \n\tExperienceModifiedPremium, \n\tSubjectWrittenPremium, \n\tFilterFlag\n\tFROM EXP_Generated\n\tWHERE FilterFlag=1\n),\nUN_Generated_Natural AS (\n\tSELECT PremiumMasterCalculationID, PremiumTransactionAmount, RunDate, GeneratedRecordIndicator, OtherModifiedPremium, ScheduleModifiedPremium, ExperienceModifiedPremium, SubjectWrittenPremium, SourceSystemID\n\tFROM FILRecord_ValidModifiedPremium\n\tUNION\n\tSELECT PremiumMasterCalculationID, PremiumTransactionAmount, o_RunDate AS RunDate, GeneratedRecordIndicator, OtherModifiedPremium, ScheduleModifiedPremium, ExperienceModifiedPremium, SubjectWrittenPremium, SourceSystemID\n\tFROM EXP_Natural\n),\nLKP_ModifiedPremiumNonWorkersCompensationCalculation AS (\n\tSELECT\n\tModifiedPremiumNonWorkersCompensationCalculationId,\n\tDirectWrittenPremium,\n\tOtherModifiedPremium,\n\tScheduleModifiedPremium,\n\tExperienceModifiedPremium,\n\tSubjectWrittenPremium,\n\tPremiumMasterCalculationID\n\tFROM (\n\t\tSELECT \n\t\t\tModifiedPremiumNonWorkersCompensationCalculationId,\n\t\t\tDirectWrittenPremium,\n\t\t\tOtherModifiedPremium,\n\t\t\tScheduleModifiedPremium,\n\t\t\tExperienceModifiedPremium,\n\t\t\tSubjectWrittenPremium,\n\t\t\tPremiumMasterCalculationID\n\t\tFROM ModifiedPremiumNonWorkersCompensationCalculation\n\t\tWHERE @{pipeline().parameters.WHERE_LKP_TGT} AuditId=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumMasterCalculationID ORDER BY ModifiedPremiumNonWorkersCompensationCalculationId) = 1\n),\nEXP_DetectChange AS (\n\tSELECT\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.ModifiedPremiumNonWorkersCompensationCalculationId AS lkp_ModifiedPremiumNonWorkersCompensationCalculationId,\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.DirectWrittenPremium AS lkp_DirectWrittenPremium,\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.OtherModifiedPremium AS lkp_OtherModifiedPremium,\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.ScheduleModifiedPremium AS lkp_ScheduleModifiedPremium,\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.ExperienceModifiedPremium AS lkp_ExperienceModifiedPremium,\n\tLKP_ModifiedPremiumNonWorkersCompensationCalculation.SubjectWrittenPremium AS lkp_SubjectWrittenPremium,\n\tUN_Generated_Natural.PremiumMasterCalculationID,\n\tUN_Generated_Natural.RunDate,\n\tUN_Generated_Natural.GeneratedRecordIndicator,\n\tUN_Generated_Natural.PremiumTransactionAmount AS DirectWrittenPremium,\n\tUN_Generated_Natural.OtherModifiedPremium,\n\tUN_Generated_Natural.ScheduleModifiedPremium,\n\tUN_Generated_Natural.ExperienceModifiedPremium,\n\tUN_Generated_Natural.SubjectWrittenPremium,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tUN_Generated_Natural.SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_ModifiedPremiumNonWorkersCompensationCalculationId),'NEW',\r\n\t-- lkp_DirectWrittenPremium!=DirectWrittenPremium,'CHANGE',\r\n\t-- lkp_OtherModifiedPremium!=OtherModifiedPremium,'CHANGE',\r\n\t-- lkp_ScheduleModifiedPremium!=ScheduleModifiedPremium,'CHANGE',\r\n\t-- lkp_ExperienceModifiedPremium!=ExperienceModifiedPremium,'CHANGE',\r\n\t-- lkp_SubjectWrittenPremium!=SubjectWrittenPremium,'CHANGE',\r\n\t-- 'NOCHANGE')\n\tDECODE(TRUE,\n\t\tlkp_ModifiedPremiumNonWorkersCompensationCalculationId IS NULL, 'NEW',\n\t\tlkp_DirectWrittenPremium != DirectWrittenPremium, 'CHANGE',\n\t\tlkp_OtherModifiedPremium != OtherModifiedPremium, 'CHANGE',\n\t\tlkp_ScheduleModifiedPremium != ScheduleModifiedPremium, 'CHANGE',\n\t\tlkp_ExperienceModifiedPremium != ExperienceModifiedPremium, 'CHANGE',\n\t\tlkp_SubjectWrittenPremium != SubjectWrittenPremium, 'CHANGE',\n\t\t'NOCHANGE'\n\t) AS o_ChangeFlag\n\tFROM UN_Generated_Natural\n\tLEFT JOIN LKP_ModifiedPremiumNonWorkersCompensationCalculation\n\tON LKP_ModifiedPremiumNonWorkersCompensationCalculation.PremiumMasterCalculationID = UN_Generated_Natural.PremiumMasterCalculationID\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tlkp_ModifiedPremiumNonWorkersCompensationCalculationId AS ModifiedPremiumNonWorkersCompensationCalculationId,\n\to_AuditID AS AuditId,\n\tSourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\tPremiumMasterCalculationID,\n\tRunDate,\n\tGeneratedRecordIndicator,\n\tDirectWrittenPremium,\n\tOtherModifiedPremium,\n\tScheduleModifiedPremium,\n\tExperienceModifiedPremium,\n\tSubjectWrittenPremium,\n\to_ChangeFlag AS ChangeFlag\n\tFROM EXP_DetectChange\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE ChangeFlag='NEW'),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE ChangeFlag='UPDATE'),\nTGT_ModifiedPremiumNonWorkersCompensationCalculation_Insert AS (\n\tINSERT INTO ModifiedPremiumNonWorkersCompensationCalculation\n\t(AuditId, SourceSystemID, CreatedDate, ModifiedDate, PremiumMasterCalculationId, RunDate, GeneratedRecordIndicator, DirectWrittenPremium, OtherModifiedPremium, ScheduleModifiedPremium, ExperienceModifiedPremium, SubjectWrittenPremium)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPremiumMasterCalculationID AS PREMIUMMASTERCALCULATIONID, \n\tRUNDATE, \n\tGENERATEDRECORDINDICATOR, \n\tDIRECTWRITTENPREMIUM, \n\tOTHERMODIFIEDPREMIUM, \n\tSCHEDULEMODIFIEDPREMIUM, \n\tEXPERIENCEMODIFIEDPREMIUM, \n\tSUBJECTWRITTENPREMIUM\n\tFROM RTR_Insert_Update_INSERT\n),\nUPD_Target AS (\n\tSELECT\n\tModifiedPremiumNonWorkersCompensationCalculationId, \n\tAuditId, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\tPremiumMasterCalculationID, \n\tRunDate, \n\tGeneratedRecordIndicator, \n\tDirectWrittenPremium, \n\tOtherModifiedPremium, \n\tScheduleModifiedPremium, \n\tExperienceModifiedPremium, \n\tSubjectWrittenPremium\n\tFROM RTR_Insert_Update_UPDATE\n),\nTGT_ModifiedPremiumNonWorkersCompensationCalculation_Update AS (\n\tMERGE INTO ModifiedPremiumNonWorkersCompensationCalculation AS T\n\tUSING UPD_Target AS S\n\tON T.ModifiedPremiumNonWorkersCompensationCalculationId = S.ModifiedPremiumNonWorkersCompensationCalculationId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditId = S.AuditId, T.SourceSystemID = S.SourceSystemID, T.CreatedDate = S.CreatedDate, T.ModifiedDate = S.ModifiedDate, T.PremiumMasterCalculationId = S.PremiumMasterCalculationID, T.RunDate = S.RunDate, T.GeneratedRecordIndicator = S.GeneratedRecordIndicator, T.DirectWrittenPremium = S.DirectWrittenPremium, T.OtherModifiedPremium = S.OtherModifiedPremium, T.ScheduleModifiedPremium = S.ScheduleModifiedPremium, T.ExperienceModifiedPremium = S.ExperienceModifiedPremium, T.SubjectWrittenPremium = S.SubjectWrittenPremium\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244834"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893408"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7543480"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 09:08:21"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/01/2023 23:13:55"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_CLAIM"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_CLAIM"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "MONTHEND": {
                "type": "string",
                "defaultValue": "DATEADD(month,DATEDIFF(month,0,getdate()),0)"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_LKP_TGT": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}