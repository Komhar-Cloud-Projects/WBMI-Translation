{
    "name": "m_POL_DW_LOAD_Work_First_Audit_Daily",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_Work_First_Audit_Daily",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PremiumTransaction AS (\n\tDECLARE @Date1 AS DATETIME\r\n\t        \r\n\tset @Date1=DATEADD(DD, -@{pipeline().parameters.NO_OF_DAYS}, GETDATE())\r\n\t\r\n\tselect \r\n\tA.eff_from_date,\r\n\tA.PolicyKey, \r\n\tA.PolicyAKID, \r\n\tA.RiskLocationAKID, \r\n\tA.PolicyCoverageAKID, \r\n\tA.StatisticalCoverageAKID, \r\n\tA.RatingCoverageAKID,\r\n\tA.PremiumTransactionID,\r\n\tA.PremiumTransactionCode, \r\n\tA.PremiumTransactionEffectiveDate,\r\n\tA.PremiumTransactionExpirationDate,\r\n\tA.PremiumTransactionPremium, \r\n\tA.PremiumTransactionFullTermPremium,\r\n\tA.PremiumType\r\n\t from (\r\n\tSELECT \r\n\tP.pol_key as PolicyKey, \r\n\tP.pol_ak_id as PolicyAKID, \r\n\tRL.RiskLocationAKID as RiskLocationAKID, \r\n\tPC.PolicyCoverageAKID as PolicyCoverageAKID , \r\n\tSC.StatisticalCoverageAKID as StatisticalCoverageAKID, \r\n\t-1 as RatingCoverageAKID,\r\n\tPT.PremiumTransactionID as PremiumTransactionID,\r\n\tPT.PremiumTransactionCode as PremiumTransactionCode, \r\n\t@Date1  as eff_from_date, \r\n\tPT.PremiumType as PremiumType, \r\n\tPT.PremiumTransactionAmount as PremiumTransactionPremium, \r\n\tPT.FullTermPremium as PremiumTransactionFullTermPremium,\r\n\tPT.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,\r\n\tPT.PremiumTransactionExpirationDate as PremiumTransactionExpirationDate,\r\n\tWFAD.PolicyAKID as Work_PolicyAKID,\r\n\tPT.ReasonAmendedCode AS PremiumTransactionReasonAmendedCode\r\n\tFROM\r\n\t (@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT WITH(nolock)\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC WITH(nolock) \r\n\t       ON PT.StatisticalCoverageAKID = SC.StatisticalCoverageAKID\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC WITH(nolock) \r\n\t       ON SC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL WITH(nolock) \r\n\t       ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER2}.Policy P WITH(nolock)  \r\n\t       ON RL.PolicyAKID = P.Pol_AK_ID)\r\n\tleft outer join @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkFirstAuditDaily WFAD\r\n\t on P.pol_AK_ID = WFAD.PolicyAKID \r\n\t AND SC.StatisticalCoverageAKID = WFAD.StatisticalCoverageAKID\r\n\tAND PT.PremiumType=WFAD.PremiumTransactionPremiumType\r\n\t where (CONVERT(varchar(8),case when PremiumTransactionEnteredDate>=PremiumTransactionBookedDate and PremiumTransactionEnteredDate>=PremiumTransactionEffectiveDate\r\n\tthen PremiumTransactionEnteredDate\r\n\twhen PremiumTransactionBookedDate>=PremiumTransactionEnteredDate and PremiumTransactionBookedDate>=PremiumTransactionEffectiveDate\r\n\tthen PremiumTransactionBookedDate\r\n\telse PremiumTransactionEffectiveDate end,112)=CONVERT(varchar(8),@Date1,112))\r\n\tand PT.PremiumTransactionCode in ('14','24')\r\n\t--and case when PT.PremiumTransactionAmount=0.0 then 'FALSE'\r\n\t--when PT.PremiumTransactionCode='15' then 'FALSE' else 'TRUE' end='TRUE'\r\n\tunion all\r\n\tSELECT \r\n\tP.pol_key as PolicyKey, \r\n\tP.pol_ak_id as PolicyAKID, \r\n\tRL.RiskLocationAKID as RiskLocationAKID, \r\n\tPC.PolicyCoverageAKID as PolicyCoverageAKID , \r\n\t-1 as StatisticalCoverageAKID, \r\n\tRC.RatingCoverageAKID as RatingCoverageAKID,\r\n\tPT.PremiumTransactionID as PremiumTransactionID,\r\n\tPT.PremiumTransactionCode as PremiumTransactionCode, \r\n\t@Date1  as eff_from_date, \r\n\tPT.PremiumType as PremiumType, \r\n\tPT.PremiumTransactionAmount as PremiumTransactionPremium, \r\n\tPT.FullTermPremium as PremiumTransactionFullTermPremium,\r\n\tPT.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,\r\n\tPT.PremiumTransactionExpirationDate as PremiumTransactionExpirationDate,\r\n\tWFAD.PolicyAKID as Work_PolicyAKID,\r\n\tPT.ReasonAmendedCode AS PremiumTransactionReasonAmendedCode\r\n\tFROM\r\n\t (@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT WITH(nolock)\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC WITH(nolock) \r\n\t       ON PT.RatingCoverageAKID = RC.RatingCoverageAKID \r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC WITH(nolock) \r\n\t       ON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL WITH(nolock) \r\n\t       ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t       INNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER2}.Policy P WITH(nolock)  \r\n\t       ON RL.PolicyAKID = P.Pol_AK_ID)\r\n\tleft outer join @{pipeline().parameters.SOURCE_DATABASE_NAME2}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkFirstAuditDaily WFAD\r\n\t on P.pol_AK_ID = WFAD.PolicyAKID \r\n\t AND RC.RatingCoverageAKID = WFAD.RatingCoverageAKID\r\n\tAND PT.PremiumType=WFAD.PremiumTransactionPremiumType\r\n\t where (CONVERT(varchar(8),case when PremiumTransactionEnteredDate>=PremiumTransactionBookedDate and PremiumTransactionEnteredDate>=PremiumTransactionEffectiveDate\r\n\tthen PremiumTransactionEnteredDate\r\n\twhen PremiumTransactionBookedDate>=PremiumTransactionEnteredDate and PremiumTransactionBookedDate>=PremiumTransactionEffectiveDate\r\n\tthen PremiumTransactionBookedDate\r\n\telse PremiumTransactionEffectiveDate end,112)=CONVERT(varchar(8),@Date1,112))\r\n\tand PT.PremiumTransactionCode in ('FinalAudit','RevisedFinalAudit','VoidFinalAudit')\r\n\t--and case when PT.PremiumTransactionAmount=0.0 then 'FALSE'\r\n\t--when PT.PremiumTransactionCode='15' then 'FALSE' else 'TRUE' end='TRUE'\r\n\t) A\r\n\twhere A.Work_PolicyAKID is null\r\n\t@{pipeline().parameters.REASON_AMENDED_CODE}\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nAGG_Supress_Multiple_Audits AS (\n\tSELECT\n\teff_from_date, \n\tPremiumTransactionID, \n\tpol_key AS PolicyKey, \n\tpol_ak_id AS PolicyAKID, \n\tRiskLocationAKID, \n\tPolicyCoverageAKID, \n\tStatisticalCoverageAKID, \n\tRatingCoverageAKId, \n\tPremiumTransactionCode, \n\tPremiumType AS PremiumTransactionPremiumType, \n\tPremiumTransactionAmount AS PremiumTransactionPremium, \n\tFullTermPremium AS PremiumTransactionFullTermPremium, \n\tPremiumTransactionEffectiveDate, \n\tPremiumTransactionExpirationDate\n\tFROM SQ_PremiumTransaction\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID, StatisticalCoverageAKID, RatingCoverageAKId, PremiumTransactionPremiumType ORDER BY NULL) = 1\n),\nLKP_Get_CancellationDate AS (\n\tSELECT\n\tStatisticalCoverageCancellationDate,\n\tMin_Premium,\n\tRundate,\n\tPremiumType,\n\tPolicyAKID,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID\n\tFROM (\n\t\tSELECT WEPCD.StatisticalCoverageCancellationDate as StatisticalCoverageCancellationDate,\r\n\t\t WEPCD.Min_Premium as Min_Premium,\r\n\t\t WEPCD.PolicyAKID as PolicyAKID,\r\n\t\t WEPCD.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\tWEPCD.RatingCoverageAKID as RatingCoverageAKID, \r\n\t\tWEPCD.RUNDATE as Rundate,\r\n\t\tWEPCD.PremiumType as PremiumType from (\r\n\t\tSELECT WEPCD.StatisticalCoverageCancellationDate as StatisticalCoverageCancellationDate,\r\n\t\t WEPCD.MinimumPremium as Min_Premium,\r\n\t\t WEPCD.PolicyAKID as PolicyAKID,\r\n\t\t WEPCD.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\tWEPCD.RatingCoverageAKID as RatingCoverageAKID, \r\n\t\tWEPCD.RUNDATE as Rundate,\r\n\t\tWEPCD.PremiumType as PremiumType\r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkEarnedPremiumCoverageDaily WEPCD,(select PolicyAKID, StatisticalCoverageAKID,RatingCoverageAKID,max(RunDate) Max_Rundate\r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkEarnedPremiumCoverageDaily A \r\n\t\tgroup by PolicyAKID,StatisticalCoverageAKID,RatingCoverageAKID ) A\r\n\t\twhere WEPCD.PolicyAKID=A.PolicyAKID\r\n\t\tand WEPCD.StatisticalCoverageAKID=A.StatisticalCoverageAKID\r\n\t\tand WEPCD.RatingCoverageAKID=A.RatingCoverageAKID\r\n\t\tand WEPCD.RunDate=A.Max_Rundate\r\n\t\tand CONVERT(varchar(6),WEPCD.Rundate,112)= CONVERT(varchar(6),DATEADD(DD, -@{pipeline().parameters.NO_OF_DAYS}, GETDATE()),112)\r\n\t\tand WEPCD.MinimumPremium=0\r\n\t\t@{pipeline().parameters.LOOKUP_WORK_CLAUSE}\r\n\t\tUNION\r\n\t\tSELECT WEPCM.StatisticalCoverageCancellationDate as StatisticalCoverageCancellationDate,\r\n\t\t WEPCM.MinimumPremium as Min_Premium,\r\n\t\t WEPCM.PolicyAKID as PolicyAKID,\r\n\t\t WEPCM.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\t WEPCM.RatingCoverageAKId as RatingCoverageAKId,\r\n\t\tWEPCM.RUNDATE as Rundate,\r\n\t\tWEPCM.PremiumType as PremiumType\r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkEarnedPremiumCoverageMonthly WEPCM,(select PolicyAKID,StatisticalCoverageAKID,RatingCoverageAKId, max(RunDate) Max_Rundate\r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkEarnedPremiumCoverageMonthly A \r\n\t\tgroup by PolicyAKID,StatisticalCoverageAKID,RatingCoverageAKId ) A\r\n\t\twhere WEPCM.PolicyAKID=A.PolicyAKID\r\n\t\tand WEPCM.StatisticalCoverageAKID=A.StatisticalCoverageAKID\r\n\t\tand WEPCM.RatingCoverageAKId=A.RatingCoverageAKId \r\n\t\tand WEPCM.RunDate=A.Max_Rundate\r\n\t\tand CONVERT(varchar(6),WEPCM.Rundate,112)<=CONVERT(varchar(6),DATEADD(MM, -@{pipeline().parameters.NO_OF_DAYS}, GETDATE()),112)\r\n\t\tand WEPCM.MinimumPremium=0\r\n\t\t@{pipeline().parameters.LOOKUP_WORK_CLAUSE}) WEPCD\r\n\t\tORDER BY WEPCD.PolicyAKID, WEPCD.StatisticalCoverageAKID, WEPCD.RatingCoverageAKID, WEPCD.Rundate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,StatisticalCoverageAKID,RatingCoverageAKID ORDER BY StatisticalCoverageCancellationDate DESC) = 1\n),\nEXP_Flag_First_Audits AS (\n\tSELECT\n\tAGG_Supress_Multiple_Audits.PremiumTransactionID,\n\tAGG_Supress_Multiple_Audits.PolicyKey,\n\tAGG_Supress_Multiple_Audits.PolicyAKID,\n\tAGG_Supress_Multiple_Audits.RiskLocationAKID,\n\tAGG_Supress_Multiple_Audits.PolicyCoverageAKID,\n\tAGG_Supress_Multiple_Audits.StatisticalCoverageAKID,\n\tAGG_Supress_Multiple_Audits.RatingCoverageAKId,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionCode,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionPremiumType,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionPremium,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionFullTermPremium,\n\tLKP_Get_CancellationDate.StatisticalCoverageCancellationDate AS Lkp_StatisticalCoverageCancellationDate,\n\t-- *INF*: IIF(NOT ISNULL(Lkp_StatisticalCoverageCancellationDate),IIF((PremiumTransactionPremiumType='D' and Lkp_PremiumType='D') \r\n\t-- OR (PremiumTransactionPremiumType='C' and Lkp_PremiumType='D') \r\n\t-- OR (PremiumTransactionPremiumType='C' and Lkp_PremiumType='C')\r\n\t-- ,Lkp_StatisticalCoverageCancellationDate,TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')),Lkp_StatisticalCoverageCancellationDate)\r\n\t-- \r\n\t-- --If premiumMasterPremiumType is Direct and the Cancelled Coverage PremiumType is Ceded then the cancelled date will be '12/31/2100 23:59:59'.\n\tIFF(NOT Lkp_StatisticalCoverageCancellationDate IS NULL, IFF(( PremiumTransactionPremiumType = 'D' AND Lkp_PremiumType = 'D' ) OR ( PremiumTransactionPremiumType = 'C' AND Lkp_PremiumType = 'D' ) OR ( PremiumTransactionPremiumType = 'C' AND Lkp_PremiumType = 'C' ), Lkp_StatisticalCoverageCancellationDate, TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS')), Lkp_StatisticalCoverageCancellationDate) AS v_StatisticalCoverageCancellationDate,\n\tv_StatisticalCoverageCancellationDate AS StatisticalCoverageCancellationDate,\n\tLKP_Get_CancellationDate.Min_Premium,\n\tLKP_Get_CancellationDate.Rundate AS Lkp_Rundate,\n\tLKP_Get_CancellationDate.PremiumType AS Lkp_PremiumType,\n\tAGG_Supress_Multiple_Audits.eff_from_date,\n\t-- *INF*: Add_To_Date(eff_from_date, 'MS', -Get_Date_Part(eff_from_date, 'MS'))\r\n\t-- \r\n\t-- --eff_from_date\r\n\t-- \r\n\t-- --- This day is already set to day prior to current day in the source qualifier query.\n\tAdd_To_Date(eff_from_date, 'MS', - Get_Date_Part(eff_from_date, 'MS')) AS v_Yesterday,\n\t-- *INF*: SET_DATE_PART(\r\n\t--          SET_DATE_PART(\r\n\t--                      SET_DATE_PART( v_Yesterday, 'HH', 23) \r\n\t--                                           ,'MI',59)\r\n\t--                                ,'SS',59)\n\tSET_DATE_PART(SET_DATE_PART(SET_DATE_PART(v_Yesterday, 'HH', 23), 'MI', 59), 'SS', 59) AS v_Rundate,\n\tv_Rundate AS Rundate,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionEffectiveDate,\n\tAGG_Supress_Multiple_Audits.PremiumTransactionExpirationDate,\n\t-- *INF*: IIF((PremiumTransactionPremiumType='D' and Lkp_PremiumType='D') OR (PremiumTransactionPremiumType='C' and Lkp_PremiumType='D') OR (PremiumTransactionPremiumType='C' and Lkp_PremiumType='C'),'TRUE','FALSE')\n\tIFF(( PremiumTransactionPremiumType = 'D' AND Lkp_PremiumType = 'D' ) OR ( PremiumTransactionPremiumType = 'C' AND Lkp_PremiumType = 'D' ) OR ( PremiumTransactionPremiumType = 'C' AND Lkp_PremiumType = 'C' ), 'TRUE', 'FALSE') AS v_Direct_Ceded_Flag,\n\t-- *INF*: IIF((v_Rundate=Lkp_Rundate) OR (to_char(v_Yesterday,'YYYYMM')>to_char(PremiumTransactionExpirationDate,'YYYYMM')),'TRUE','FALSE')\r\n\t-- \r\n\t-- \r\n\t-- --IIF(PremiumMasterRunDate>=PremiumMasterCoverageEffectiveDate and PremiumMasterRunDate----<=PremiumMasterCoverageExpirationDate and v_Rundate=Lkp_Rundate,'TRUE','FLASE')\n\tIFF(( v_Rundate = Lkp_Rundate ) OR ( to_char(v_Yesterday, 'YYYYMM') > to_char(PremiumTransactionExpirationDate, 'YYYYMM') ), 'TRUE', 'FALSE') AS v_Audit_After_Cancellation_Reinstatement,\n\t-- *INF*: 'TRUE'\r\n\t-- \r\n\t-- \r\n\t-- --IIF(to_char(PremiumMasterRunDate,'YYYYMM')=to_char(Lkp_StatisticalCoverageCancellationDate,'YYYYMM'),'FALSE','TRUE')\n\t'TRUE' AS v_Flag_First_Audit,\n\t-- *INF*: IIF(ISNULL(v_StatisticalCoverageCancellationDate) OR v_StatisticalCoverageCancellationDate=TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS'),'FALSE',IIF(Min_Premium=0.0 and v_Direct_Ceded_Flag='TRUE','TRUE','FALSE'))\n\tIFF(v_StatisticalCoverageCancellationDate IS NULL OR v_StatisticalCoverageCancellationDate = TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'), 'FALSE', IFF(Min_Premium = 0.0 AND v_Direct_Ceded_Flag = 'TRUE', 'TRUE', 'FALSE')) AS Flag\n\tFROM AGG_Supress_Multiple_Audits\n\tLEFT JOIN LKP_Get_CancellationDate\n\tON LKP_Get_CancellationDate.PolicyAKID = AGG_Supress_Multiple_Audits.PolicyAKID AND LKP_Get_CancellationDate.StatisticalCoverageAKID = AGG_Supress_Multiple_Audits.StatisticalCoverageAKID AND LKP_Get_CancellationDate.RatingCoverageAKID = AGG_Supress_Multiple_Audits.RatingCoverageAKId\n),\nFIL_First_Audits AS (\n\tSELECT\n\tPremiumTransactionID, \n\tPolicyKey, \n\tPolicyAKID, \n\tRiskLocationAKID, \n\tPolicyCoverageAKID, \n\tStatisticalCoverageAKID, \n\tRatingCoverageAKId, \n\tPremiumTransactionCode, \n\tPremiumTransactionPremiumType, \n\tPremiumTransactionPremium, \n\tPremiumTransactionFullTermPremium, \n\tStatisticalCoverageCancellationDate, \n\tFlag, \n\tRundate\n\tFROM EXP_Flag_First_Audits\n\tWHERE Flag='TRUE'\n),\nExp_Tgt_Data_Collect AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CreatedDate,\n\tPremiumTransactionID,\n\tPolicyKey,\n\tPolicyAKID,\n\tRiskLocationAKID,\n\tPolicyCoverageAKID,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKId,\n\tPremiumTransactionCode,\n\tPremiumTransactionPremiumType,\n\tPremiumTransactionPremium,\n\tPremiumTransactionFullTermPremium,\n\tStatisticalCoverageCancellationDate,\n\tRundate\n\tFROM FIL_First_Audits\n),\nWorkFirstAuditDaily AS (\n\tINSERT INTO Shortcut_to_WorkFirstAuditDaily\n\t(AuditId, CreatedDate, PremiumTransactionID, PolicyKey, PolicyAKID, RiskLocationAKID, PolicyCoverageAKID, StatisticalCoverageAKID, PremiumTransactionCode, PremiumTransactionPremiumType, PremiumTransactionPremium, PremiumTransactionFullTermPremium, StatisticalCoverageCancellationDate, Rundate, RatingCoverageAKId)\n\tSELECT \n\tAUDITID, \n\tCREATEDDATE, \n\tPREMIUMTRANSACTIONID, \n\tPOLICYKEY, \n\tPOLICYAKID, \n\tRISKLOCATIONAKID, \n\tPOLICYCOVERAGEAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tPREMIUMTRANSACTIONCODE, \n\tPREMIUMTRANSACTIONPREMIUMTYPE, \n\tPREMIUMTRANSACTIONPREMIUM, \n\tPREMIUMTRANSACTIONFULLTERMPREMIUM, \n\tSTATISTICALCOVERAGECANCELLATIONDATE, \n\tRUNDATE, \n\tRATINGCOVERAGEAKID\n\tFROM Exp_Tgt_Data_Collect\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905525"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604441"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:01:34"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:35:39"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "SOURCE_TABLE_OWNER2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "REASON_AMENDED_CODE": {
                "type": "string",
                "defaultValue": "AND PremiumTransactionReasonAmendedCode not in ('CWO','COL')"
            },
            "NO_OF_DAYS": {
                "type": "string",
                "defaultValue": "1"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "SOURCE_DATABASE_NAME2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "LOOKUP_WORK_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}