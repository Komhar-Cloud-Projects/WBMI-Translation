{
    "name": "m_POL_DM_LOAD_LimitTypeDim",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DM_LOAD_LimitTypeDim",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_AggregatableLimitType AS (\n\tselect distinct SRC.StandardLimitType  as StandardLimitType \r\n\tfrom\r\n\t(select StandardLimitType \r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupLimitType\r\n\twhere AdditiveFlag=1\r\n\tunion all select 'PolicyPerOccurenceLimit' \r\n\tunion all select 'PolicyAggregateLimit'\r\n\tunion all select 'PolicyProductAggregateLimit'\r\n\tunion all select 'PolicyPerAccidentLimit'\r\n\tunion all select 'PolicyPerDiseaseLimit'\r\n\tunion all select 'PolicyPerClaimLimit'\r\n\tunion all select 'CostNew'\r\n\tunion all select 'StatedAmount'\r\n\t\r\n\tunion all\r\n\tselect distinct CoverageLimitType as StandardLimitType \r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit\r\n\twhere not exists (select 1 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupLimitType where StandardLimitType = CoverageLimitType and AdditiveFlag=0)\r\n\tand CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t) SRC\n),\nLKP_LimitTypeDim AS (\n\tSELECT\n\tLimitTypeDimID,\n\ti_StandardLimitType,\n\tLimitType\n\tFROM (\n\t\tSELECT LTD.LimitTypeDimID as LimitTypeDimID,\r\n\t\tLTD.LimitType as LimitType \r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.LimitTypeDim LTD\r\n\t\tWHERE LTD.CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY LimitType ORDER BY LimitTypeDimID) = 1\n),\nFIL_GetNew AS (\n\tSELECT\n\tLimitTypeDimID, \n\ti_StandardLimitType AS StandardLimitType\n\tFROM LKP_LimitTypeDim\n\tWHERE ISNULL(LimitTypeDimID)\n),\nEXP_DefaultValue AS (\n\tSELECT\n\tStandardLimitType AS i_StandardLimitType,\n\t1 AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSYSDATE AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\ti_StandardLimitType AS o_LimitType\n\tFROM FIL_GetNew\n),\nTGT_LimitTypeDim_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.LimitTypeDim\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, CreatedDate, ModifiedDate, LimitType)\n\tSELECT \n\to_CurrentSnapshotFlag AS CURRENTSNAPSHOTFLAG, \n\to_AuditID AS AUDITID, \n\to_EffectiveDate AS EFFECTIVEDATE, \n\to_ExpirationDate AS EXPIRATIONDATE, \n\to_CreatedDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_LimitType AS LIMITTYPE\n\tFROM EXP_DefaultValue\n),\nSQ_LimitTypeDim AS (\n\tselect LTD.LimitTypeDimID AS LimitTypeDimID\r\n\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.LimitTypeDim LTD\r\n\twhere exists( select 1 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupLimitType SLT\r\n\twhere SLT.AdditiveFlag=0 and SLT.StandardLimitType=LTD.LimitType)\r\n\tand LTD.CurrentSnapshotFlag=1\n),\nEXP_Calculate AS (\n\tSELECT\n\tLimitTypeDimID,\n\t0 AS o_CurrentSnapshotFlag,\n\tSYSDATE AS o_ExpirationDate,\n\tSYSDATE AS o_ModifiedDate\n\tFROM SQ_LimitTypeDim\n),\nUPD_Expirate AS (\n\tSELECT\n\tLimitTypeDimID, \n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag, \n\to_ExpirationDate AS ExpirationDate, \n\to_ModifiedDate AS ModifiedDate\n\tFROM EXP_Calculate\n),\nTGT_LimitTypeDim_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.LimitTypeDim AS T\n\tUSING UPD_Expirate AS S\n\tON T.LimitTypeDimID = S.LimitTypeDimID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246511"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905531"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604505"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:57:01"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 03:31:13"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_DATA_MART_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_DATA_MART"
            }
        },
        "folder": {
            "name": "Policy DataMart/"
        },
        "annotations": []
    }
}