{
    "name": "s_m_POL_DW_LOAD_PolicyLimit_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PolicyLimit_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_DCLimitStaging AS (\n\tSELECT\n\tValue,\n\tSessionId,\n\tObjectId,\n\tType\n\tFROM (\n\t\tSELECT DLT.Value as Value, \r\n\t\tDLT.SessionId as SessionId, \r\n\t\tDLT.ObjectId as ObjectId, \r\n\t\tDLT.Type as Type \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLimitStaging DLT\r\n\t\tWHERE DLT.ObjectName='DC_Line'\r\n\t\t\r\n\t\tunion all\r\n\t\tSELECT DLT.Value as Value, \r\n\t\tDLT.SessionId as SessionId, \r\n\t\tCUL.LineId as ObjectId, \r\n\t\tDLT.Type as Type \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLimitStaging DLT\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCULineStaging WCUL\r\n\t\ton DLT.ObjectId=WCUL.WB_CU_LineId\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCCULineStaging CUL\r\n\t\ton WCUL.CU_LineId=CUL.CU_LineId\r\n\t\tWHERE DLT.ObjectName='WB_CU_Line'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,ObjectId,Type ORDER BY Value DESC) = 1\n),\nSQ_PolicyLimit AS (\n\tSELECT\r\n\tWorkDCTPolicy.SessionId, \r\n\tWorkDCTPolicy.PolicyNumber, \r\n\tWorkDCTPolicy.PolicyVersion, \r\n\tWorkDCTPolicy.TransactionCreatedDate,\r\n\tWorkDCTInsuranceLine.LineType,\r\n\tWorkDCTInsuranceLine.LineId\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy\r\n\tinner hash join\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTInsuranceLine\r\n\ton \r\n\tWorkDCTPolicy.PolicyId=WorkDCTInsuranceLine.PolicyId\r\n\twhere WorkDCTPolicy.PolicyStatus<>'Quote' \r\n\tand WorkDCTPolicy.TransactionState='committed'\r\n\tand WorkDCTPolicy.TransactionType @{pipeline().parameters.EXCLUDE_TTYPE}\r\n\tORDER BY WorkDCTPolicy.PolicyNumber, \r\n\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),WorkDCTPolicy.PolicyVersion),2),'00'),\r\n\tWorkDCTInsuranceLine.LineType,\r\n\tWorkDCTPolicy.TransactionCreatedDate, \r\n\tWorkDCTPolicy.SessionId\n),\nEXP_Values AS (\n\tSELECT\n\tSessionId AS i_SessionId,\n\tPolicyNumber AS i_PolicyNumber,\n\tPolicyVersion AS i_PolicyVersion,\n\tLineType AS i_LineType,\n\tLineId AS i_LineId,\n\tTransactionCreatedDate,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_PolicyNumber)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_PolicyNumber) AS v_PolicyNumber,\n\t-- *INF*: IIF(ISNULL(i_PolicyVersion),'00',LPAD(LTRIM(RTRIM(i_PolicyVersion)),2,'0'))\n\tIFF(i_PolicyVersion IS NULL, '00', LPAD(LTRIM(RTRIM(i_PolicyVersion)), 2, '0')) AS v_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_LineType) or IS_SPACES(i_LineType) or LENGTH(i_LineType)=0,'N/A',LTRIM(RTRIM(i_LineType)))\n\tIFF(\n\t    i_LineType IS NULL or LENGTH(i_LineType)>0 AND TRIM(i_LineType)='' or LENGTH(i_LineType) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_LineType))\n\t) AS v_InsuranceLine,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(lower(v_InsuranceLine),'generalliability','sbopgeneralliability'), :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'PolicyPerOccurenceLimit'),\r\n\t-- lower(v_InsuranceLine)='commercialumbrella',\r\n\t-- IIF(NOT ISNULL(:LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'UmbrellaLimit')),:LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'UmbrellaLimit'),:LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'HigherLimit')),\r\n\t-- lower(v_InsuranceLine)='businessowners',:LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'Liability'),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    lower(v_InsuranceLine) IN ('generalliability','sbopgeneralliability'), LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyPerOccurenceLimit.Value,\n\t    lower(v_InsuranceLine) = 'commercialumbrella', IFF(\n\t        LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit.Value IS NOT NULL,\n\t        LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit.Value,\n\t        LKP_DCLIMITSTAGING_i_SessionId_i_LineId_HigherLimit.Value\n\t    ),\n\t    lower(v_InsuranceLine) = 'businessowners', LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Liability.Value,\n\t    'N/A'\n\t) AS v_PolicyPerOccurenceLimit,\n\t-- *INF*: DECODE(lower(v_InsuranceLine),\r\n\t-- 'generalliability', \r\n\t-- :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'PolicyAggregateLimit'), \r\n\t-- 'sbopgeneralliability', \r\n\t-- :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'PolicyAggregateLimit'), \r\n\t-- 'workerscompensation',\r\n\t-- :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'Policy'), \r\n\t-- 'N/A')\n\tDECODE(\n\t    lower(v_InsuranceLine),\n\t    'generalliability', LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit.Value,\n\t    'sbopgeneralliability', LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit.Value,\n\t    'workerscompensation', LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Policy.Value,\n\t    'N/A'\n\t) AS v_PolicyAggregateLimit,\n\t-- *INF*: IIF(in(lower(v_InsuranceLine),'generalliability','sbopgeneralliability'), :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'ProductsAggregateLimit'), 'N/A')\n\tIFF(\n\t    lower(v_InsuranceLine) IN ('generalliability','sbopgeneralliability'),\n\t    LKP_DCLIMITSTAGING_i_SessionId_i_LineId_ProductsAggregateLimit.Value,\n\t    'N/A'\n\t) AS v_PolicyProductAggregateLimit,\n\t-- *INF*: IIF(lower(v_InsuranceLine)='workerscompensation', :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'EachAccident'), 'N/A')\n\tIFF(\n\t    lower(v_InsuranceLine) = 'workerscompensation',\n\t    LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachAccident.Value,\n\t    'N/A'\n\t) AS v_PolicyPerAccidentLimit,\n\t-- *INF*: IIF(lower(v_InsuranceLine)='workerscompensation', :LKP.LKP_DCLIMITSTAGING(i_SessionId, i_LineId, 'EachEmployeeDisease'), 'N/A')\n\tIFF(\n\t    lower(v_InsuranceLine) = 'workerscompensation',\n\t    LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachEmployeeDisease.Value,\n\t    'N/A'\n\t) AS v_PolicyPerDiseaseLimit,\n\tv_PolicyNumber || v_PolicyVersion AS o_PolicyKey,\n\tv_InsuranceLine AS o_InsuranceLine,\n\t-- *INF*: IIF(ISNULL(v_PolicyPerOccurenceLimit) OR IS_SPACES(v_PolicyPerOccurenceLimit) OR LENGTH(v_PolicyPerOccurenceLimit)=0, 'N/A', LTRIM(RTRIM(v_PolicyPerOccurenceLimit)))\n\tIFF(\n\t    v_PolicyPerOccurenceLimit IS NULL\n\t    or LENGTH(v_PolicyPerOccurenceLimit)>0\n\t    and TRIM(v_PolicyPerOccurenceLimit)=''\n\t    or LENGTH(v_PolicyPerOccurenceLimit) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(v_PolicyPerOccurenceLimit))\n\t) AS o_PolicyPerOccurenceLimit,\n\t-- *INF*: IIF(ISNULL(v_PolicyAggregateLimit) OR IS_SPACES(v_PolicyAggregateLimit) OR LENGTH(v_PolicyAggregateLimit)=0, 'N/A', LTRIM(RTRIM(v_PolicyAggregateLimit)))\n\tIFF(\n\t    v_PolicyAggregateLimit IS NULL\n\t    or LENGTH(v_PolicyAggregateLimit)>0\n\t    and TRIM(v_PolicyAggregateLimit)=''\n\t    or LENGTH(v_PolicyAggregateLimit) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(v_PolicyAggregateLimit))\n\t) AS v_PolicyAggregateLimit_new,\n\t-- *INF*: DECODE(lower(v_InsuranceLine),\r\n\t-- 'generalliability', v_PolicyAggregateLimit_new,\r\n\t-- 'sbopgeneralliability', v_PolicyAggregateLimit_new,\r\n\t-- 'workerscompensation',v_PolicyAggregateLimit_new || '000',\r\n\t-- 'N/A')\n\tDECODE(\n\t    lower(v_InsuranceLine),\n\t    'generalliability', v_PolicyAggregateLimit_new,\n\t    'sbopgeneralliability', v_PolicyAggregateLimit_new,\n\t    'workerscompensation', v_PolicyAggregateLimit_new || '000',\n\t    'N/A'\n\t) AS o_PolicyAggregateLimit,\n\t-- *INF*: IIF(ISNULL(v_PolicyProductAggregateLimit) OR IS_SPACES(v_PolicyProductAggregateLimit) OR LENGTH(v_PolicyProductAggregateLimit)=0, 'N/A', LTRIM(RTRIM(v_PolicyProductAggregateLimit)))\n\tIFF(\n\t    v_PolicyProductAggregateLimit IS NULL\n\t    or LENGTH(v_PolicyProductAggregateLimit)>0\n\t    and TRIM(v_PolicyProductAggregateLimit)=''\n\t    or LENGTH(v_PolicyProductAggregateLimit) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(v_PolicyProductAggregateLimit))\n\t) AS o_PolicyProductAggregateLimit,\n\t-- *INF*: IIF(ISNULL(v_PolicyPerAccidentLimit) OR IS_SPACES(v_PolicyPerAccidentLimit) OR LENGTH(v_PolicyPerAccidentLimit)=0, 'N/A', LTRIM(RTRIM(v_PolicyPerAccidentLimit)))\n\tIFF(\n\t    v_PolicyPerAccidentLimit IS NULL\n\t    or LENGTH(v_PolicyPerAccidentLimit)>0\n\t    and TRIM(v_PolicyPerAccidentLimit)=''\n\t    or LENGTH(v_PolicyPerAccidentLimit) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(v_PolicyPerAccidentLimit))\n\t) AS v_PolicyPerAccidentLimit_new,\n\t-- *INF*: DECODE(lower(v_InsuranceLine),\r\n\t-- 'generalliability', v_PolicyPerAccidentLimit_new,\r\n\t-- 'sbopgeneralliability', v_PolicyPerAccidentLimit_new,\r\n\t-- 'workerscompensation', v_PolicyPerAccidentLimit_new|| '000',\r\n\t-- 'N/A')\n\tDECODE(\n\t    lower(v_InsuranceLine),\n\t    'generalliability', v_PolicyPerAccidentLimit_new,\n\t    'sbopgeneralliability', v_PolicyPerAccidentLimit_new,\n\t    'workerscompensation', v_PolicyPerAccidentLimit_new || '000',\n\t    'N/A'\n\t) AS o_PolicyPerAccidentLimit,\n\t-- *INF*: IIF(ISNULL(v_PolicyPerDiseaseLimit) OR IS_SPACES(v_PolicyPerDiseaseLimit) OR LENGTH(v_PolicyPerDiseaseLimit)=0, 'N/A', LTRIM(RTRIM(v_PolicyPerDiseaseLimit)))\n\tIFF(\n\t    v_PolicyPerDiseaseLimit IS NULL\n\t    or LENGTH(v_PolicyPerDiseaseLimit)>0\n\t    and TRIM(v_PolicyPerDiseaseLimit)=''\n\t    or LENGTH(v_PolicyPerDiseaseLimit) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(v_PolicyPerDiseaseLimit))\n\t) AS v_PolicyPerDiseaseLimit_new,\n\t-- *INF*: DECODE(lower(v_InsuranceLine),\r\n\t-- 'generalliability',v_PolicyPerDiseaseLimit_new ,\r\n\t-- 'sbopgeneralliability',v_PolicyPerDiseaseLimit_new ,\r\n\t-- 'workerscompensation',v_PolicyPerDiseaseLimit_new || '000',\r\n\t-- 'N/A')\n\tDECODE(\n\t    lower(v_InsuranceLine),\n\t    'generalliability', v_PolicyPerDiseaseLimit_new,\n\t    'sbopgeneralliability', v_PolicyPerDiseaseLimit_new,\n\t    'workerscompensation', v_PolicyPerDiseaseLimit_new || '000',\n\t    'N/A'\n\t) AS o_PolicyPerDiseaseLimit\n\tFROM SQ_PolicyLimit\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyPerOccurenceLimit\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyPerOccurenceLimit.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyPerOccurenceLimit.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyPerOccurenceLimit.Type = 'PolicyPerOccurenceLimit'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_UmbrellaLimit.Type = 'UmbrellaLimit'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_HigherLimit\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_HigherLimit.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_HigherLimit.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_HigherLimit.Type = 'HigherLimit'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Liability\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Liability.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Liability.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Liability.Type = 'Liability'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_PolicyAggregateLimit.Type = 'PolicyAggregateLimit'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Policy\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Policy.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Policy.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_Policy.Type = 'Policy'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_ProductsAggregateLimit\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_ProductsAggregateLimit.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_ProductsAggregateLimit.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_ProductsAggregateLimit.Type = 'ProductsAggregateLimit'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachAccident\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachAccident.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachAccident.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachAccident.Type = 'EachAccident'\n\n\tLEFT JOIN LKP_DCLIMITSTAGING LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachEmployeeDisease\n\tON LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachEmployeeDisease.SessionId = i_SessionId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachEmployeeDisease.ObjectId = i_LineId\n\tAND LKP_DCLIMITSTAGING_i_SessionId_i_LineId_EachEmployeeDisease.Type = 'EachEmployeeDisease'\n\n),\nAGG_RemoveDuplicates AS (\n\tSELECT\n\tTransactionCreatedDate AS i_TransactionCreatedDate,\n\t-- *INF*: MIN(i_TransactionCreatedDate)\n\tMIN(i_TransactionCreatedDate) AS o_TransactionCreatedDate,\n\to_PolicyKey AS PolicyKey,\n\to_InsuranceLine AS InsuranceLine,\n\to_PolicyPerOccurenceLimit AS PolicyPerOccurenceLimit,\n\to_PolicyAggregateLimit AS PolicyAggregateLimit,\n\to_PolicyProductAggregateLimit AS PolicyProductAggregateLimit,\n\to_PolicyPerAccidentLimit AS PolicyPerAccidentLimit,\n\to_PolicyPerDiseaseLimit AS PolicyPerDiseaseLimit\n\tFROM EXP_Values\n\tGROUP BY PolicyKey, InsuranceLine, PolicyPerOccurenceLimit, PolicyAggregateLimit, PolicyProductAggregateLimit, PolicyPerAccidentLimit, PolicyPerDiseaseLimit\n),\nSRT_Transactions AS (\n\tSELECT\n\tPolicyKey, \n\tInsuranceLine, \n\to_TransactionCreatedDate AS TransactionCreatedDate, \n\tPolicyPerOccurenceLimit, \n\tPolicyAggregateLimit, \n\tPolicyProductAggregateLimit, \n\tPolicyPerAccidentLimit, \n\tPolicyPerDiseaseLimit\n\tFROM AGG_RemoveDuplicates\n\tORDER BY PolicyKey ASC, InsuranceLine ASC, TransactionCreatedDate ASC\n),\nLKP_Policy AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\tpol_key\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and exists ( select 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT where WCT.PolicyNumber=pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n),\nLKP_PolicyLimit AS (\n\tSELECT\n\tPolicyLimitId,\n\tEffectiveDate,\n\tPolicyLimitAKId,\n\tPolicyPerOccurenceLimit,\n\tPolicyAggregateLimit,\n\tPolicyProductAggregateLimit,\n\tPolicyPerAccidentLimit,\n\tPolicyPerDiseaseLimit,\n\tPolicyPerClaimLimit,\n\tPolicyAKId,\n\tInsuranceLine,\n\tExpirationDate\n\tFROM (\n\t\tSELECT PLT.PolicyLimitId as PolicyLimitId, \r\n\t\tPLT.PolicyLimitAKId as PolicyLimitAKId,\r\n\t\tPLT.PolicyPerOccurenceLimit as PolicyPerOccurenceLimit,\r\n\t\tPLT.PolicyAggregateLimit as PolicyAggregateLimit,\r\n\t\tPLT.PolicyProductAggregateLimit as PolicyProductAggregateLimit,\r\n\t\tPLT.PolicyPerAccidentLimit as PolicyPerAccidentLimit,\r\n\t\tPLT.PolicyPerDiseaseLimit as PolicyPerDiseaseLimit,\r\n\t\tPLT.PolicyPerClaimLimit as PolicyPerClaimLimit,\r\n\t\tPLT.PolicyAKId as PolicyAKId,\r\n\t\tPLT.InsuranceLine as InsuranceLine,\r\n\t\tPLT.EffectiveDate as EffectiveDate,\r\n\t\tPLT.ExpirationDate as ExpirationDate\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit PLT\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy P\r\n\t\ton PLT.PolicyAKID=P.pol_ak_id and P.crrnt_snpsht_flag=1\r\n\t\twhere PLT.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\texists ( select 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT where WCT.PolicyNumber=pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,InsuranceLine,EffectiveDate,ExpirationDate ORDER BY PolicyLimitId) = 1\n),\nSEQ_PolicyLimitAKId AS (\n\tCREATE SEQUENCE SEQ_PolicyLimitAKId\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_DetectChange AS (\n\tSELECT\n\tLKP_PolicyLimit.PolicyLimitId AS lkp_PolicyLimitId,\n\tLKP_PolicyLimit.EffectiveDate AS lkp_EffectiveDate,\n\tLKP_PolicyLimit.PolicyLimitAKId AS lkp_PolicyLimitAKId,\n\tLKP_PolicyLimit.PolicyPerOccurenceLimit AS lkp_PolicyPerOccurenceLimit,\n\tLKP_PolicyLimit.PolicyAggregateLimit AS lkp_PolicyAggregateLimit,\n\tLKP_PolicyLimit.PolicyProductAggregateLimit AS lkp_PolicyProductAggregateLimit,\n\tLKP_PolicyLimit.PolicyPerAccidentLimit AS lkp_PolicyPerAccidentLimit,\n\tLKP_PolicyLimit.PolicyPerDiseaseLimit AS lkp_PolicyPerDiseaseLimit,\n\tLKP_PolicyLimit.PolicyPerClaimLimit AS lkp_PolicyPerClaimLimit,\n\tSEQ_PolicyLimitAKId.NEXTVAL AS i_NEXTVAL,\n\tSRT_Transactions.TransactionCreatedDate AS i_TransactionCreatedDate,\n\tLKP_Policy.pol_ak_id,\n\tSRT_Transactions.InsuranceLine,\n\tSRT_Transactions.PolicyPerOccurenceLimit,\n\tSRT_Transactions.PolicyAggregateLimit,\n\tSRT_Transactions.PolicyProductAggregateLimit,\n\tSRT_Transactions.PolicyPerAccidentLimit,\n\tSRT_Transactions.PolicyPerDiseaseLimit,\n\t'TBD' AS v_PolicyPerClaimLimit,\n\t-- *INF*: DECODE(TRUE,ISNULL(lkp_PolicyLimitId) AND pol_ak_id<>-1,'NEW',\r\n\t-- pol_ak_id<>-1\r\n\t-- AND (lkp_PolicyPerOccurenceLimit<>PolicyPerOccurenceLimit\r\n\t-- OR lkp_PolicyAggregateLimit<>PolicyAggregateLimit\r\n\t-- OR lkp_PolicyProductAggregateLimit<>PolicyProductAggregateLimit\r\n\t-- OR lkp_PolicyPerAccidentLimit<>PolicyPerAccidentLimit\r\n\t-- OR lkp_PolicyPerDiseaseLimit<>PolicyPerDiseaseLimit\r\n\t-- OR lkp_PolicyPerClaimLimit<>v_PolicyPerClaimLimit), IIF(lkp_EffectiveDate != i_TransactionCreatedDate, 'NEW', 'UPDATE'),'NOCHANGE')\n\tDECODE(\n\t    TRUE,\n\t    lkp_PolicyLimitId IS NULL AND pol_ak_id <> - 1, 'NEW',\n\t    pol_ak_id <> - 1 AND (lkp_PolicyPerOccurenceLimit <> PolicyPerOccurenceLimit OR lkp_PolicyAggregateLimit <> PolicyAggregateLimit OR lkp_PolicyProductAggregateLimit <> PolicyProductAggregateLimit OR lkp_PolicyPerAccidentLimit <> PolicyPerAccidentLimit OR lkp_PolicyPerDiseaseLimit <> PolicyPerDiseaseLimit OR lkp_PolicyPerClaimLimit <> v_PolicyPerClaimLimit), IFF(\n\t        lkp_EffectiveDate != i_TransactionCreatedDate, 'NEW', 'UPDATE'\n\t    ),\n\t    'NOCHANGE'\n\t) AS v_change_flag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- pol_ak_id = v_Prev_pol_ak_id AND InsuranceLine = v_Prev_InsuranceLine,v_Prev_PolicyLimitAKId,\r\n\t--  NOT ISNULL(lkp_PolicyLimitAKId), lkp_PolicyLimitAKId,\r\n\t-- i_NEXTVAL \r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    pol_ak_id = v_Prev_pol_ak_id AND InsuranceLine = v_Prev_InsuranceLine, v_Prev_PolicyLimitAKId,\n\t    lkp_PolicyLimitAKId IS NOT NULL, lkp_PolicyLimitAKId,\n\t    i_NEXTVAL\n\t) AS v_PolicyLimitAKId,\n\tpol_ak_id AS v_Prev_pol_ak_id,\n\tInsuranceLine AS v_Prev_InsuranceLine,\n\tv_PolicyLimitAKId AS v_Prev_PolicyLimitAKId,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\ti_TransactionCreatedDate AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tCURRENT_TIMESTAMP AS o_CreatedDate,\n\tCURRENT_TIMESTAMP AS o_ModifiedDate,\n\tv_PolicyLimitAKId AS o_PolicyLimitAKId,\n\tv_change_flag AS o_change_flag,\n\tv_PolicyPerClaimLimit AS o_PolicyPerClaimLimit\n\tFROM SRT_Transactions\n\tLEFT JOIN LKP_Policy\n\tON LKP_Policy.pol_key = SRT_Transactions.PolicyKey\n\tLEFT JOIN LKP_PolicyLimit\n\tON LKP_PolicyLimit.PolicyAKId = LKP_Policy.pol_ak_id AND LKP_PolicyLimit.InsuranceLine = SRT_Transactions.InsuranceLine AND LKP_PolicyLimit.EffectiveDate <= SRT_Transactions.TransactionCreatedDate AND LKP_PolicyLimit.ExpirationDate >= SRT_Transactions.TransactionCreatedDate\n),\nRTR_Insert_Update AS (\n\tSELECT\n\to_change_flag AS i_change_flag,\n\tlkp_PolicyLimitId AS PolicyLimitId_Inactive,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\to_PolicyLimitAKId AS PolicyLimitAKId,\n\tpol_ak_id,\n\tInsuranceLine,\n\tPolicyPerOccurenceLimit,\n\tPolicyAggregateLimit,\n\tPolicyProductAggregateLimit,\n\tPolicyPerAccidentLimit,\n\tPolicyPerDiseaseLimit,\n\to_PolicyPerClaimLimit AS PolicyPerClaimLimit\n\tFROM EXP_DetectChange\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE i_change_flag='NEW'),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE i_change_flag='UPDATE'),\nTGT_PolicyLimit_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, PolicyLimitAKId, PolicyAKId, InsuranceLine, PolicyPerOccurenceLimit, PolicyAggregateLimit, PolicyProductAggregateLimit, PolicyPerAccidentLimit, PolicyPerDiseaseLimit, PolicyPerClaimLimit)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPOLICYLIMITAKID, \n\tpol_ak_id AS POLICYAKID, \n\tINSURANCELINE, \n\tPOLICYPEROCCURENCELIMIT, \n\tPOLICYAGGREGATELIMIT, \n\tPOLICYPRODUCTAGGREGATELIMIT, \n\tPOLICYPERACCIDENTLIMIT, \n\tPOLICYPERDISEASELIMIT, \n\tPOLICYPERCLAIMLIMIT\n\tFROM RTR_Insert_Update_INSERT\n),\nUPD_Existing AS (\n\tSELECT\n\tPolicyLimitId_Inactive AS PolicyLimitId, \n\tAuditID, \n\tModifiedDate, \n\tPolicyPerOccurenceLimit, \n\tPolicyAggregateLimit, \n\tPolicyProductAggregateLimit, \n\tPolicyPerAccidentLimit, \n\tPolicyPerDiseaseLimit, \n\tPolicyPerClaimLimit\n\tFROM RTR_Insert_Update_UPDATE\n),\nTGT_PolicyLimit_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit AS T\n\tUSING UPD_Existing AS S\n\tON T.PolicyLimitId = S.PolicyLimitId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditID = S.AuditID, T.ModifiedDate = S.ModifiedDate, T.PolicyPerOccurenceLimit = S.PolicyPerOccurenceLimit, T.PolicyAggregateLimit = S.PolicyAggregateLimit, T.PolicyProductAggregateLimit = S.PolicyProductAggregateLimit, T.PolicyPerAccidentLimit = S.PolicyPerAccidentLimit, T.PolicyPerDiseaseLimit = S.PolicyPerDiseaseLimit, T.PolicyPerClaimLimit = S.PolicyPerClaimLimit\n),\nSQ_PolicyLimit_Expired AS (\n\tSELECT \r\n\t\tPL.PolicyLimitId, \r\n\t\tPL.EffectiveDate,\r\n\t\tPL.ExpirationDate, \r\n\t\tPL.PolicyLimitAKId \r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit PL\r\n\tWHERE EXISTS\r\n\t\t( SELECT PolicyLimitAKId  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit b\r\n\t\tWHERE b.CurrentSnapshotFlag = 1 AND b.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' \r\n\tAND b.PolicyLimitAKId=PL.PolicyLimitAKId \r\n\tGROUP BY b.PolicyLimitAKId\r\n\tHAVING COUNT(*) > 1) \r\n\tAND PL.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tORDER BY PL.PolicyLimitAKId ,PL.EffectiveDate DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tPolicyLimitAKId AS in_PolicyLimitAKId,\n\tEffectiveDate,\n\tExpirationDate AS orig_ExpirationDate,\n\tPolicyLimitId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- in_PolicyLimitAKId = v_prev_PolicyLimitAKId ,\r\n\t-- ADD_TO_DATE(v_prev_EffectiveDate,'SS',-1),orig_ExpirationDate)\n\tDECODE(\n\t    TRUE,\n\t    in_PolicyLimitAKId = v_prev_PolicyLimitAKId, DATEADD(SECOND,- 1,v_prev_EffectiveDate),\n\t    orig_ExpirationDate\n\t) AS v_ExpirationDate,\n\tin_PolicyLimitAKId AS v_prev_PolicyLimitAKId,\n\tEffectiveDate AS v_prev_EffectiveDate,\n\t0 AS out_CurrentSnapshotFlag,\n\tv_ExpirationDate AS out_ExpirationDate,\n\tCURRENT_TIMESTAMP AS out_ModifiedDate\n\tFROM SQ_PolicyLimit_Expired\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\torig_ExpirationDate AS in_orig_ExpirationDate, \n\tPolicyLimitId, \n\tout_CurrentSnapshotFlag AS CurrentSnapshotFlag, \n\tout_ExpirationDate AS ExpirationDate, \n\tout_ModifiedDate AS ModifiedDate\n\tFROM EXP_Lag_eff_from_date\n\tWHERE in_orig_ExpirationDate != ExpirationDate\n),\nEXPIRE_policy AS (\n\tSELECT\n\tPolicyLimitId, \n\tCurrentSnapshotFlag, \n\tExpirationDate, \n\tModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nTGT_PolicyLimit_Expired AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit AS T\n\tUSING EXPIRE_policy AS S\n\tON T.PolicyLimitId = S.PolicyLimitId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "EXCLUDE_TTYPE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataWarehouse/"
        },
        "annotations": []
    }
}