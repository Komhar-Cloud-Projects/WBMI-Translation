{
    "name": "m_AGY_DM_Load_SalesDivisionDim",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DM_Load_SalesDivisionDim",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_JoinSalesDivisionSources AS (\n\tSELECT DISTINCT a.SalesTerritoryAKID, \r\n\ta.RegionalSalesManagerAKID,\r\n\trsm.RegionalSalesManagerID, \r\n\trsm.RegionalSalesManagerAKID, \r\n\trsm.SalesDirectorAKID, \r\n\trsm.WestBendAssociateID, \r\n\trsm.RegionalSalesManagerCode, \r\n\trsm.DisplayName, \r\n\trsm.LastName, \r\n\trsm.FirstName, \r\n\trsm.MiddleName, \r\n\trsm.Suffix, \r\n\trsm.EmailAddress, \r\n\tst.SalesTerritoryID,\r\n\tst.SalesTerritoryAKID,\r\n\tst.SalesTerritoryCode,\r\n\tst.SalesTerritoryCodeDescription\r\n\tFROM\r\n\t \t@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency a\r\n\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.RegionalSalesManager rsm\r\n\t\tON a.RegionalSalesManagerAKID = rsm.RegionalSalesManagerAKID\r\n\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.SalesTerritory st\r\n\t\tON a.SalesTerritoryAKID = st.SalesTerritoryAKID\r\n\tWHERE a.CurrentSnapshotFlag=1 \r\n\tAND rsm.CurrentSnapshotFlag = 1\r\n\tAND st.CurrentSnapshotFlag = 1\r\n\tAND (rsm.ModifiedDate>='@{pipeline().parameters.SELECTION_START_TS}'  or st.ModifiedDate >= '@{pipeline().parameters.SELECTION_START_TS}' or a.ModifiedDate>= '@{pipeline().parameters.SELECTION_START_TS}')\n),\nEXP_CollectData AS (\n\tSELECT\n\ta_SalesTerritoryAKID,\n\ta_RegionalSalesManagerAKID,\n\trsm_RegionalSalesManagerID,\n\trsm_RegionalSalesManagerAKID,\n\trsm_SalesDirectorAKID,\n\trsm_WestBendAssociateID,\n\trsm_RegionalSalesManagerCode,\n\trsm_DisplayName,\n\trsm_LastName,\n\trsm_FirstName,\n\trsm_MiddleName,\n\trsm_Suffix,\n\trsm_EmailAddress,\n\tst_SalesTerritoryID,\n\tst_SalesTerritoryAKID,\n\tst_SalesTerritoryCode,\n\tst_SalesTerritoryCodeDescription\n\tFROM SQ_JoinSalesDivisionSources\n),\nLKP_SalesDirector AS (\n\tSELECT\n\tSalesDirectorID,\n\tWestBendAssociateID,\n\tSalesDirectorCode,\n\tDisplayName,\n\tLastName,\n\tFirstName,\n\tMiddleName,\n\tSuffix,\n\tEmailAddress,\n\tSalesDirectorAKID\n\tFROM (\n\t\tSELECT \n\t\t\tSalesDirectorID,\n\t\t\tWestBendAssociateID,\n\t\t\tSalesDirectorCode,\n\t\t\tDisplayName,\n\t\t\tLastName,\n\t\t\tFirstName,\n\t\t\tMiddleName,\n\t\t\tSuffix,\n\t\t\tEmailAddress,\n\t\t\tSalesDirectorAKID\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.SalesDirector\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SalesDirectorAKID ORDER BY SalesDirectorID) = 1\n),\nEXP_GetCleanup AS (\n\tSELECT\n\tLKP_SalesDirector.SalesDirectorID AS in_SalesDirectorID,\n\tLKP_SalesDirector.WestBendAssociateID AS in_WestBendAssociateID,\n\tLKP_SalesDirector.SalesDirectorCode AS in_SalesDirectorCode,\n\tLKP_SalesDirector.DisplayName AS in_DisplayName,\n\tLKP_SalesDirector.LastName AS in_LastName,\n\tLKP_SalesDirector.FirstName AS in_FirstName,\n\tLKP_SalesDirector.MiddleName AS in_MiddleName,\n\tLKP_SalesDirector.Suffix AS in_Suffix,\n\tLKP_SalesDirector.EmailAddress AS in_EmailAddress,\n\tEXP_CollectData.rsm_RegionalSalesManagerID AS in_RegionalSalesManagerID,\n\tEXP_CollectData.rsm_RegionalSalesManagerAKID AS in_RegionalSalesManagerAKID,\n\tEXP_CollectData.rsm_SalesDirectorAKID AS in_SalesDirectorAKID,\n\tEXP_CollectData.rsm_WestBendAssociateID AS in_RegionalSalesManagerWestBendAssociateID,\n\tEXP_CollectData.rsm_RegionalSalesManagerCode AS in_RegionalSalesManagerCode,\n\tEXP_CollectData.rsm_DisplayName AS in_RegionalSalesManagerDisplayName,\n\tEXP_CollectData.rsm_LastName AS in_RegionalSalesManagerLastName,\n\tEXP_CollectData.rsm_FirstName AS in_RegionalSalesManagerFirstName,\n\tEXP_CollectData.rsm_MiddleName AS in_RegionalSalesManagerMiddleName,\n\tEXP_CollectData.rsm_Suffix AS in_RegionalSalesManagerSuffix,\n\tEXP_CollectData.rsm_EmailAddress AS in_RegionalSalesManagerEmailAddress,\n\tEXP_CollectData.st_SalesTerritoryID AS in_SalesTerritoryID,\n\tEXP_CollectData.st_SalesTerritoryAKID AS in_SalesTerritoryAKID,\n\tEXP_CollectData.st_SalesTerritoryCode AS in_SalesTerritoryCode,\n\tEXP_CollectData.st_SalesTerritoryCodeDescription AS in_SalesTerritoryCodeDescription,\n\tin_RegionalSalesManagerID AS o_EDWRegionalSalesManagerPKID,\n\t-- *INF*: IIF(ISNULL(in_SalesDirectorID),-1,in_SalesDirectorID)\n\tIFF(in_SalesDirectorID IS NULL, - 1, in_SalesDirectorID) AS o_EDWSalesDirectorPKID,\n\t-- *INF*: IIF(ISNULL(in_SalesTerritoryID),-1,in_SalesTerritoryID)\n\tIFF(in_SalesTerritoryID IS NULL, - 1, in_SalesTerritoryID) AS o_EDWSalesTerritoryPKID,\n\tin_RegionalSalesManagerAKID AS o_EDWRegionalSalesManagerAKID,\n\tin_SalesDirectorAKID AS o_EDWSalesDirectorAKID,\n\t-- *INF*: IIF(ISNULL(in_SalesTerritoryAKID),-1,in_SalesTerritoryAKID)\n\tIFF(in_SalesTerritoryAKID IS NULL, - 1, in_SalesTerritoryAKID) AS o_EDWSalesTerritoryAKID,\n\tin_RegionalSalesManagerWestBendAssociateID AS o_RegionalSalesManagerWestBendAssociateID,\n\tin_RegionalSalesManagerCode AS o_RegionalSalesManagerCode,\n\tin_RegionalSalesManagerDisplayName AS o_RegionalSalesManagerDisplayName,\n\tin_RegionalSalesManagerLastName AS o_RegionalSalesManagerLastName,\n\tin_RegionalSalesManagerFirstName AS o_RegionalSalesManagerFirstName,\n\tin_RegionalSalesManagerMiddleName AS o_RegionalSalesManagerMiddleName,\n\tin_RegionalSalesManagerSuffix AS o_RegionalSalesManagerSuffix,\n\tin_RegionalSalesManagerEmailAddress AS o_RegionalSalesManagerEmailAddress,\n\t-- *INF*: IIF(ISNULL(in_WestBendAssociateID),'N/A',in_WestBendAssociateID)\n\tIFF(in_WestBendAssociateID IS NULL, 'N/A', in_WestBendAssociateID) AS o_SalesDirectorWestBendAssociateID,\n\t-- *INF*: IIF(ISNULL(in_SalesDirectorCode),'N/A',in_SalesDirectorCode)\n\tIFF(in_SalesDirectorCode IS NULL, 'N/A', in_SalesDirectorCode) AS o_SalesDirectorCode,\n\t-- *INF*: IIF(ISNULL(in_DisplayName),'N/A',in_DisplayName)\n\tIFF(in_DisplayName IS NULL, 'N/A', in_DisplayName) AS o_SalesDirectorDisplayName,\n\t-- *INF*: IIF(ISNULL(in_LastName),'N/A',in_LastName)\n\tIFF(in_LastName IS NULL, 'N/A', in_LastName) AS o_SalesDirectorLastName,\n\t-- *INF*: IIF(ISNULL(in_FirstName),'N/A',in_FirstName)\n\tIFF(in_FirstName IS NULL, 'N/A', in_FirstName) AS o_SalesDirectorFirstName,\n\t-- *INF*: IIF(ISNULL(in_MiddleName),'N/A',in_MiddleName)\n\tIFF(in_MiddleName IS NULL, 'N/A', in_MiddleName) AS o_SalesDirectorMiddleName,\n\t-- *INF*: IIF(ISNULL(in_Suffix),'N/A',in_Suffix)\n\tIFF(in_Suffix IS NULL, 'N/A', in_Suffix) AS o_SalesDirectorSuffix,\n\t-- *INF*: IIF(ISNULL(in_EmailAddress),'N/A',in_EmailAddress)\n\tIFF(in_EmailAddress IS NULL, 'N/A', in_EmailAddress) AS o_SalesDirectorEmailAddress,\n\t-- *INF*: IIF(ISNULL(in_SalesTerritoryCode),'N/A',in_SalesTerritoryCode)\n\tIFF(in_SalesTerritoryCode IS NULL, 'N/A', in_SalesTerritoryCode) AS o_SalesTerritoryCode,\n\t-- *INF*: IIF(ISNULL(in_SalesTerritoryCodeDescription),'N/A',in_SalesTerritoryCodeDescription)\n\tIFF(in_SalesTerritoryCodeDescription IS NULL, 'N/A', in_SalesTerritoryCodeDescription) AS o_SalesTerritoryCodeDescription\n\tFROM EXP_CollectData\n\tLEFT JOIN LKP_SalesDirector\n\tON LKP_SalesDirector.SalesDirectorAKID = EXP_CollectData.rsm_SalesDirectorAKID\n),\nLKP_Existing AS (\n\tSELECT\n\tSalesDivisionDimHashKey,\n\tEDWRegionalSalesManagerPKID,\n\tEDWSalesDirectorPKID,\n\tEDWSalesTerritoryPKID,\n\tSalesDivisionDimID,\n\tEDWSalesTerritoryAKID,\n\tEDWRegionalSalesManagerAKID\n\tFROM (\n\t\tSELECT \n\t\t\tSalesDivisionDimHashKey,\n\t\t\tEDWRegionalSalesManagerPKID,\n\t\t\tEDWSalesDirectorPKID,\n\t\t\tEDWSalesTerritoryPKID,\n\t\t\tSalesDivisionDimID,\n\t\t\tEDWSalesTerritoryAKID,\n\t\t\tEDWRegionalSalesManagerAKID\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDivisionDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWSalesTerritoryAKID,EDWRegionalSalesManagerAKID ORDER BY SalesDivisionDimHashKey) = 1\n),\nEXP_CheckForChange AS (\n\tSELECT\n\tLKP_Existing.SalesDivisionDimHashKey AS in_SalesDivisionDimHashKey,\n\tLKP_Existing.EDWRegionalSalesManagerPKID AS in_RegionalSalesManagerPKID,\n\tLKP_Existing.EDWSalesDirectorPKID AS in_SalesDirectorPKID,\n\tLKP_Existing.EDWSalesTerritoryPKID AS in_SalesTerritoryPKID,\n\tLKP_Existing.SalesDivisionDimID AS Existing_SalesDivisionDimId,\n\tEXP_GetCleanup.o_EDWRegionalSalesManagerPKID AS EDWRegionalSalesManagerPKID,\n\tEXP_GetCleanup.o_EDWSalesDirectorPKID AS EDWSalesDirectorPKID,\n\tEXP_GetCleanup.o_EDWSalesTerritoryPKID AS EDWSalesTerritoryPKID,\n\tEXP_GetCleanup.o_EDWRegionalSalesManagerAKID AS EDWRegionalSalesManagerAKID,\n\tEXP_GetCleanup.o_EDWSalesDirectorAKID AS EDWSalesDirectorAKID,\n\tEXP_GetCleanup.o_EDWSalesTerritoryAKID AS EDWSalesTerritoryAKID,\n\tEXP_GetCleanup.o_RegionalSalesManagerWestBendAssociateID AS RegionalSalesManagerWestBendAssociateID,\n\tEXP_GetCleanup.o_RegionalSalesManagerCode AS RegionalSalesManagerCode,\n\tEXP_GetCleanup.o_RegionalSalesManagerDisplayName AS RegionalSalesManagerDisplayName,\n\tEXP_GetCleanup.o_RegionalSalesManagerLastName AS RegionalSalesManagerLastName,\n\tEXP_GetCleanup.o_RegionalSalesManagerFirstName AS RegionalSalesManagerFirstName,\n\tEXP_GetCleanup.o_RegionalSalesManagerMiddleName AS RegionalSalesManagerMiddleName,\n\tEXP_GetCleanup.o_RegionalSalesManagerSuffix AS RegionalSalesManagerSuffix,\n\tEXP_GetCleanup.o_RegionalSalesManagerEmailAddress AS RegionalSalesManagerEmailAddress,\n\tEXP_GetCleanup.o_SalesDirectorWestBendAssociateID AS SalesDirectorWestBendAssociateID,\n\tEXP_GetCleanup.o_SalesDirectorCode AS SalesDirectorCode,\n\tEXP_GetCleanup.o_SalesDirectorDisplayName AS SalesDirectorDisplayName,\n\tEXP_GetCleanup.o_SalesDirectorLastName AS SalesDirectorLastName,\n\tEXP_GetCleanup.o_SalesDirectorFirstName AS SalesDirectorFirstName,\n\tEXP_GetCleanup.o_SalesDirectorMiddleName AS SalesDirectorMiddleName,\n\tEXP_GetCleanup.o_SalesDirectorSuffix AS SalesDirectorSuffix,\n\tEXP_GetCleanup.o_SalesDirectorEmailAddress AS SalesDirectorEmailAddress,\n\tEXP_GetCleanup.o_SalesTerritoryCode AS SalesTerritoryCode,\n\tEXP_GetCleanup.o_SalesTerritoryCodeDescription AS SalesTerritoryCodeDescription,\n\t-- *INF*: MD5(RegionalSalesManagerCode || '&' ||RegionalSalesManagerWestBendAssociateID || '&' || SalesTerritoryCode || '&' || SalesDirectorCode || '&' || SalesDirectorWestBendAssociateID)\r\n\t-- \r\n\t-- \r\n\t-- \n\tMD5(RegionalSalesManagerCode || '&' || RegionalSalesManagerWestBendAssociateID || '&' || SalesTerritoryCode || '&' || SalesDirectorCode || '&' || SalesDirectorWestBendAssociateID) AS v_NewHashKey,\n\t-- *INF*: Decode(true,\r\n\t-- in_SalesTerritoryPKID <> EDWSalesTerritoryPKID, 'Y',\r\n\t-- in_RegionalSalesManagerPKID <> EDWRegionalSalesManagerPKID, 'Y',\r\n\t-- in_SalesDirectorPKID <> EDWSalesDirectorPKID, 'Y',\r\n\t-- 'N')\r\n\t-- \r\n\t-- \n\tDecode(true,\n\tin_SalesTerritoryPKID <> EDWSalesTerritoryPKID, 'Y',\n\tin_RegionalSalesManagerPKID <> EDWRegionalSalesManagerPKID, 'Y',\n\tin_SalesDirectorPKID <> EDWSalesDirectorPKID, 'Y',\n\t'N') AS v_ChangeToEDWRecord,\n\t-- *INF*: Decode(true,\r\n\t-- IsNull(in_SalesDivisionDimHashKey), 'Insert',\r\n\t-- in_SalesDivisionDimHashKey = v_NewHashKey and v_ChangeToEDWRecord = 'N', 'Ignore',\r\n\t-- in_SalesDivisionDimHashKey <> v_NewHashKey or  v_ChangeToEDWRecord = 'Y', 'Update',\r\n\t-- 'Ignore')\r\n\t-- \r\n\t-- -- If the existing record is not found based on the AKID, it's always an insert\r\n\t-- -- If there are no changes, we ignore the record\r\n\t-- -- If one of the type 2 attributes changed, we expire the old record (also inserts a new record, see router)\r\n\t-- -- If there was no change to the type 2 attributes AND there was a change to the PKID in the EDW then we update the record.  Important to have the logic comparing the hash keys, otherwise we might attempt to update records where we are already expiring and inserting a new record.\r\n\t-- \t\n\tDecode(true,\n\tin_SalesDivisionDimHashKey IS NULL, 'Insert',\n\tin_SalesDivisionDimHashKey = v_NewHashKey AND v_ChangeToEDWRecord = 'N', 'Ignore',\n\tin_SalesDivisionDimHashKey <> v_NewHashKey OR v_ChangeToEDWRecord = 'Y', 'Update',\n\t'Ignore') AS v_InsertUpdateOrIgnore,\n\t1 AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: TO_DATE('1800-01-01 01:00:00','YYYY-MM-DD HH24:MI:SS')\r\n\t-- \r\n\t-- --Decode(v_InsertUpdateOrIgnore,\r\n\t-- --'Insert',TO_DATE( '1800-01-01 01:00:00','YYYY-MM-DD HH24:MI:SS'),\r\n\t-- --SYSDATE)\r\n\t-- \r\n\t-- --Decode(v_InsertUpdateExpireOrIgnore,\r\n\t-- --'Insert', trunc(sysdate, 'DD'),\r\n\t-- --in_ExistingEffectiveDate)\n\tTO_DATE('1800-01-01 01:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59','YYYY-MM-DD HH24:MI:SS')\r\n\t-- \r\n\t-- --Decode(v_InsertUpdateExpireOrIgnore,\r\n\t-- --'Expire', add_to_date(trunc(sysdate, 'DD'), 'MS', -1 ),\r\n\t-- --to_date('2099-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'))\n\tTO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_ExpirationDate,\n\tSYSDATE AS o_CurrentDate,\n\tSYSDATE AS o_ModifiedDate,\n\tv_NewHashKey AS o_SalesDivisionDimHashKey,\n\tv_InsertUpdateOrIgnore AS o_InsertUpdateOrIgnore\n\tFROM EXP_GetCleanup\n\tLEFT JOIN LKP_Existing\n\tON LKP_Existing.EDWSalesTerritoryAKID = EXP_GetCleanup.o_EDWSalesTerritoryAKID AND LKP_Existing.EDWRegionalSalesManagerAKID = EXP_GetCleanup.o_EDWRegionalSalesManagerAKID\n),\nRTR_InsertUpdate AS (\n\tSELECT\n\tExisting_SalesDivisionDimId,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_CurrentDate AS CurrentDate,\n\to_ModifiedDate AS ModifiedDate,\n\to_SalesDivisionDimHashKey AS SalesDivisionDimHashKey,\n\tEDWRegionalSalesManagerPKID,\n\tEDWSalesDirectorPKID,\n\tEDWSalesTerritoryPKID,\n\tEDWRegionalSalesManagerAKID,\n\tEDWSalesDirectorAKID,\n\tEDWSalesTerritoryAKID,\n\tRegionalSalesManagerWestBendAssociateID,\n\tRegionalSalesManagerCode,\n\tRegionalSalesManagerDisplayName,\n\tRegionalSalesManagerLastName,\n\tRegionalSalesManagerFirstName,\n\tRegionalSalesManagerMiddleName,\n\tRegionalSalesManagerSuffix,\n\tRegionalSalesManagerEmailAddress,\n\tSalesDirectorWestBendAssociateID,\n\tSalesDirectorCode,\n\tSalesDirectorDisplayName,\n\tSalesDirectorLastName,\n\tSalesDirectorFirstName,\n\tSalesDirectorMiddleName,\n\tSalesDirectorSuffix,\n\tSalesDirectorEmailAddress,\n\tSalesTerritoryCode,\n\tSalesTerritoryCodeDescription,\n\to_InsertUpdateOrIgnore AS InsertUpdateIgnore\n\tFROM EXP_CheckForChange\n),\nRTR_InsertUpdate_InsertNew AS (SELECT * FROM RTR_InsertUpdate WHERE InsertUpdateIgnore = 'Insert'),\nRTR_InsertUpdate_UpdateExisting AS (SELECT * FROM RTR_InsertUpdate WHERE InsertUpdateIgnore = 'Update'),\nUPD_InsertNew AS (\n\tSELECT\n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tCurrentDate AS CreatedDate, \n\tModifiedDate, \n\tSalesDivisionDimHashKey, \n\tEDWRegionalSalesManagerPKID, \n\tEDWSalesDirectorPKID, \n\tEDWSalesTerritoryPKID, \n\tEDWRegionalSalesManagerAKID, \n\tEDWSalesDirectorAKID, \n\tEDWSalesTerritoryAKID, \n\tRegionalSalesManagerWestBendAssociateID, \n\tRegionalSalesManagerCode, \n\tRegionalSalesManagerDisplayName, \n\tRegionalSalesManagerLastName, \n\tRegionalSalesManagerFirstName, \n\tRegionalSalesManagerMiddleName, \n\tRegionalSalesManagerSuffix, \n\tRegionalSalesManagerEmailAddress, \n\tSalesDirectorWestBendAssociateID, \n\tSalesDirectorCode, \n\tSalesDirectorDisplayName, \n\tSalesDirectorLastName, \n\tSalesDirectorFirstName, \n\tSalesDirectorMiddleName, \n\tSalesDirectorSuffix, \n\tSalesDirectorEmailAddress, \n\tSalesTerritoryCode, \n\tSalesTerritoryCodeDescription\n\tFROM RTR_InsertUpdate_InsertNew\n),\nTGT_SalesDivisionDim_Inserts AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDivisionDim\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, CreatedDate, ModifiedDate, SalesDivisionDimHashKey, EDWRegionalSalesManagerPKID, EDWSalesDirectorPKID, EDWSalesTerritoryPKID, EDWRegionalSalesManagerAKID, EDWSalesDirectorAKID, EDWSalesTerritoryAKID, RegionalSalesManagerWestBendAssociateID, RegionalSalesManagerCode, RegionalSalesManagerDisplayName, RegionalSalesManagerLastName, RegionalSalesManagerFirstName, RegionalSalesManagerMiddleName, RegionalSalesManagerSuffix, RegionalSalesManagerEmailAddress, SalesDirectorWestBendAssociateID, SalesDirectorCode, SalesDirectorDisplayName, SalesDirectorLastName, SalesDirectorFirstName, SalesDirectorMiddleName, SalesDirectorSuffix, SalesDirectorEmailAddress, SalesTerritoryCode, SalesTerritoryCodeDescription)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tSALESDIVISIONDIMHASHKEY, \n\tEDWREGIONALSALESMANAGERPKID, \n\tEDWSALESDIRECTORPKID, \n\tEDWSALESTERRITORYPKID, \n\tEDWREGIONALSALESMANAGERAKID, \n\tEDWSALESDIRECTORAKID, \n\tEDWSALESTERRITORYAKID, \n\tREGIONALSALESMANAGERWESTBENDASSOCIATEID, \n\tREGIONALSALESMANAGERCODE, \n\tREGIONALSALESMANAGERDISPLAYNAME, \n\tREGIONALSALESMANAGERLASTNAME, \n\tREGIONALSALESMANAGERFIRSTNAME, \n\tREGIONALSALESMANAGERMIDDLENAME, \n\tREGIONALSALESMANAGERSUFFIX, \n\tREGIONALSALESMANAGEREMAILADDRESS, \n\tSALESDIRECTORWESTBENDASSOCIATEID, \n\tSALESDIRECTORCODE, \n\tSALESDIRECTORDISPLAYNAME, \n\tSALESDIRECTORLASTNAME, \n\tSALESDIRECTORFIRSTNAME, \n\tSALESDIRECTORMIDDLENAME, \n\tSALESDIRECTORSUFFIX, \n\tSALESDIRECTOREMAILADDRESS, \n\tSALESTERRITORYCODE, \n\tSALESTERRITORYCODEDESCRIPTION\n\tFROM UPD_InsertNew\n),\nUPD_UpdateExisting AS (\n\tSELECT\n\tExisting_SalesDivisionDimId AS SalesDivisionDimId, \n\tModifiedDate, \n\tSalesDivisionDimHashKey, \n\tEDWRegionalSalesManagerPKID, \n\tEDWSalesDirectorPKID, \n\tEDWSalesTerritoryPKID, \n\tEDWRegionalSalesManagerAKID, \n\tEDWSalesDirectorAKID, \n\tEDWSalesTerritoryAKID, \n\tRegionalSalesManagerWestBendAssociateID, \n\tRegionalSalesManagerCode, \n\tRegionalSalesManagerDisplayName, \n\tRegionalSalesManagerLastName, \n\tRegionalSalesManagerFirstName, \n\tRegionalSalesManagerMiddleName, \n\tRegionalSalesManagerSuffix, \n\tRegionalSalesManagerEmailAddress, \n\tSalesDirectorWestBendAssociateID, \n\tSalesDirectorCode, \n\tSalesDirectorDisplayName, \n\tSalesDirectorLastName, \n\tSalesDirectorFirstName, \n\tSalesDirectorMiddleName, \n\tSalesDirectorSuffix, \n\tSalesDirectorEmailAddress, \n\tSalesTerritoryCode, \n\tSalesTerritoryCodeDescription\n\tFROM RTR_InsertUpdate_UpdateExisting\n),\nTGT_SalesDivisionDim_Updates AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDivisionDim AS T\n\tUSING UPD_UpdateExisting AS S\n\tON T.SalesDivisionDimID = S.SalesDivisionDimId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate, T.SalesDivisionDimHashKey = S.SalesDivisionDimHashKey, T.EDWRegionalSalesManagerPKID = S.EDWRegionalSalesManagerPKID, T.EDWSalesDirectorPKID = S.EDWSalesDirectorPKID, T.EDWSalesTerritoryPKID = S.EDWSalesTerritoryPKID, T.EDWRegionalSalesManagerAKID = S.EDWRegionalSalesManagerAKID, T.EDWSalesDirectorAKID = S.EDWSalesDirectorAKID, T.EDWSalesTerritoryAKID = S.EDWSalesTerritoryAKID, T.RegionalSalesManagerWestBendAssociateID = S.RegionalSalesManagerWestBendAssociateID, T.RegionalSalesManagerCode = S.RegionalSalesManagerCode, T.RegionalSalesManagerDisplayName = S.RegionalSalesManagerDisplayName, T.RegionalSalesManagerLastName = S.RegionalSalesManagerLastName, T.RegionalSalesManagerFirstName = S.RegionalSalesManagerFirstName, T.RegionalSalesManagerMiddleName = S.RegionalSalesManagerMiddleName, T.RegionalSalesManagerSuffix = S.RegionalSalesManagerSuffix, T.RegionalSalesManagerEmailAddress = S.RegionalSalesManagerEmailAddress, T.SalesDirectorWestBendAssociateID = S.SalesDirectorWestBendAssociateID, T.SalesDirectorCode = S.SalesDirectorCode, T.SalesDirectorDisplayName = S.SalesDirectorDisplayName, T.SalesDirectorLastName = S.SalesDirectorLastName, T.SalesDirectorFirstName = S.SalesDirectorFirstName, T.SalesDirectorMiddleName = S.SalesDirectorMiddleName, T.SalesDirectorSuffix = S.SalesDirectorSuffix, T.SalesDirectorEmailAddress = S.SalesDirectorEmailAddress, T.SalesTerritoryCode = S.SalesTerritoryCode, T.SalesTerritoryCodeDescription = S.SalesTerritoryCodeDescription\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246490"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905471"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603200"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:20:50"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:20:23"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Data_Mart_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCESYSTEMID": {
                "type": "string",
                "defaultValue": "AgencyODS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            }
        },
        "folder": {
            "name": "Agency DataMart/"
        },
        "annotations": []
    }
}