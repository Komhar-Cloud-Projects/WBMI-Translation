{
    "name": "m_CLM_DW_LOAD_sup_risk_unit_group",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_risk_unit_group",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_gtam_tm517c_stage AS (\n\tSELECT\n\t\ttm517c_stage_id,\n\t\ttable_fld,\n\t\tkey_len,\n\t\tline_of_business,\n\t\tinsurance_line,\n\t\trisk_unit_group,\n\t\tproduct_type_code,\n\t\tlanguage_indicator,\n\t\tdata_len,\n\t\trisk_unit_group_literal,\n\t\textract_date,\n\t\tas_of_date,\n\t\trecord_count,\n\t\tsource_sytem_id\n\tFROM gtam_tm517c_stage\n),\nEXP_Default_Values AS (\n\tSELECT\n\trisk_unit_group AS RISK_UNIT_GROUP,\n\t-- *INF*: IIF(ISNULL(RISK_UNIT_GROUP), 'N/A', LTRIM(RTRIM(RISK_UNIT_GROUP)))\n\tIFF(RISK_UNIT_GROUP IS NULL, 'N/A', LTRIM(RTRIM(RISK_UNIT_GROUP))) AS RISK_UNIT_GROUP_OUT,\n\trisk_unit_group_literal AS RISK_UNIT_GROUP_LITERAL,\n\t-- *INF*: IIF(ISNULL(RISK_UNIT_GROUP_LITERAL), 'N/A', LTRIM(RTRIM(RISK_UNIT_GROUP_LITERAL)))\n\tIFF(RISK_UNIT_GROUP_LITERAL IS NULL, 'N/A', LTRIM(RTRIM(RISK_UNIT_GROUP_LITERAL))) AS RISK_UNIT_GROUP_LITERAL_OUT,\n\tline_of_business AS IN_line_of_business,\n\t-- *INF*: IIF(ISNULL(IN_line_of_business),'N/A',LTRIM(RTRIM(IN_line_of_business)))\n\tIFF(IN_line_of_business IS NULL, 'N/A', LTRIM(RTRIM(IN_line_of_business))) AS line_of_business_OUT,\n\tinsurance_line AS IN_insurance_line,\n\t-- *INF*: iif(isnull(IN_insurance_line),'N/A',LTRIM(RTRIM(IN_insurance_line)))\n\tIFF(IN_insurance_line IS NULL, 'N/A', LTRIM(RTRIM(IN_insurance_line))) AS insurance_line_OUT,\n\tproduct_type_code AS IN_product_type_code,\n\t-- *INF*: iif(isnull(IN_product_type_code),'N/A',LTRIM(RTRIM(IN_product_type_code)))\n\tIFF(IN_product_type_code IS NULL, 'N/A', LTRIM(RTRIM(IN_product_type_code))) AS product_type_code_OUT\n\tFROM SQ_gtam_tm517c_stage\n),\nLKP_sup_risk_unit_group AS (\n\tSELECT\n\tsup_risk_unit_grp_id,\n\trisk_unit_grp_code,\n\trisk_unit_grp_descript,\n\tprdct_type_code,\n\tlob,\n\tins_line,\n\tIN_RISK_UNIT_GROUP,\n\tIN_line_of_business,\n\tIN_insurance_line,\n\tIN_product_type_code\n\tFROM (\n\t\tSELECT sup_risk_unit_group.sup_risk_unit_grp_id as sup_risk_unit_grp_id, \r\n\t\tsup_risk_unit_group.risk_unit_grp_descript as risk_unit_grp_descript, \r\n\t\tLTRIM(RTRIM(sup_risk_unit_group.risk_unit_grp_code)) as risk_unit_grp_code, \r\n\t\tLTRIM(RTRIM(sup_risk_unit_group.prdct_type_code)) as prdct_type_code,\r\n\t\t LTRIM(RTRIM(sup_risk_unit_group.lob)) as lob, \r\n\t\tLTRIM(RTRIM(sup_risk_unit_group.ins_line)) as ins_line\r\n\t\t FROM sup_risk_unit_group where crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY risk_unit_grp_code,prdct_type_code,lob,ins_line ORDER BY sup_risk_unit_grp_id) = 1\n),\nEXP_detect_changes AS (\n\tSELECT\n\tLKP_sup_risk_unit_group.sup_risk_unit_grp_id AS old_sup_risk_unit_grp_id,\n\tLKP_sup_risk_unit_group.risk_unit_grp_descript AS old_risk_unit_grp_descript,\n\tEXP_Default_Values.RISK_UNIT_GROUP_OUT,\n\tEXP_Default_Values.RISK_UNIT_GROUP_LITERAL_OUT,\n\tEXP_Default_Values.line_of_business_OUT,\n\tEXP_Default_Values.insurance_line_OUT,\n\tEXP_Default_Values.product_type_code_OUT,\n\t-- *INF*: IIF(ISNULL(old_sup_risk_unit_grp_id), 'NEW', IIF(old_risk_unit_grp_descript != RISK_UNIT_GROUP_LITERAL_OUT, 'UPDATE', 'NOCHANGE'))\r\n\t-- \n\tIFF(old_sup_risk_unit_grp_id IS NULL, 'NEW', IFF(old_risk_unit_grp_descript != RISK_UNIT_GROUP_LITERAL_OUT, 'UPDATE', 'NOCHANGE')) AS v_CHANGED_FLAG,\n\tv_CHANGED_FLAG AS CHANGED_FLAG,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_CHANGED_FLAG='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_CHANGED_FLAG = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id\n\tFROM EXP_Default_Values\n\tLEFT JOIN LKP_sup_risk_unit_group\n\tON LKP_sup_risk_unit_group.risk_unit_grp_code = EXP_Default_Values.RISK_UNIT_GROUP_OUT AND LKP_sup_risk_unit_group.prdct_type_code = EXP_Default_Values.product_type_code_OUT AND LKP_sup_risk_unit_group.lob = EXP_Default_Values.line_of_business_OUT AND LKP_sup_risk_unit_group.ins_line = EXP_Default_Values.insurance_line_OUT\n),\nFIL_sup_insurance_line_insert AS (\n\tSELECT\n\tRISK_UNIT_GROUP_OUT, \n\tRISK_UNIT_GROUP_LITERAL_OUT, \n\tline_of_business_OUT AS IN_line_of_business, \n\tinsurance_line_OUT AS IN_ins_line, \n\tproduct_type_code_OUT AS IN_product_type_code, \n\tCHANGED_FLAG, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tcreated_date, \n\tmodified_date, \n\tsource_sys_id\n\tFROM EXP_detect_changes\n\tWHERE CHANGED_FLAG = 'NEW'  OR  CHANGED_FLAG = 'UPDATE'\n),\nsup_risk_unit_group_Insert AS (\n\tINSERT INTO sup_risk_unit_group\n\t(risk_unit_grp_code, risk_unit_grp_descript, prdct_type_code, lob, ins_line, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tRISK_UNIT_GROUP_OUT AS RISK_UNIT_GRP_CODE, \n\tRISK_UNIT_GROUP_LITERAL_OUT AS RISK_UNIT_GRP_DESCRIPT, \n\tIN_product_type_code AS PRDCT_TYPE_CODE, \n\tIN_line_of_business AS LOB, \n\tIN_ins_line AS INS_LINE, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM FIL_sup_insurance_line_insert\n),\nSQ_sup_risk_unit_group AS (\n\tSELECT a.sup_risk_unit_grp_id,\r\n\ta.risk_unit_grp_code,\r\n\ta.prdct_type_code, \r\n\ta.lob, \r\n\ta.ins_line,\r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_risk_unit_group a\r\n\tWHERE EXISTS(SELECT 1\r\n\t                  FROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_risk_unit_group b\r\n\t                  WHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t                  AND a.risk_unit_grp_code = b.risk_unit_grp_code\r\n\t                  AND a.prdct_type_code=b.prdct_type_code\r\n\t                  AND a.lob=b.lob\r\n\t                  AND a.ins_line=b.ins_line\r\n\t                  GROUP BY risk_unit_grp_code, prdct_type_code, lob, ins_line\r\n\t                  HAVING COUNT(*) > 1)\r\n\tORDER BY risk_unit_grp_code,prdct_type_code,lob, ins_line, eff_from_date  DESC\n),\nEXP_lag_eff_from_date AS (\n\tSELECT\n\tsup_risk_unit_grp_id,\n\trisk_unit_grp_code,\n\tprdct_type_code,\n\tlob,\n\tins_line,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \trisk_unit_grp_code = v_Prev_row_risk_unit_grp_code and \r\n\t-- prdct_type_code = v_Prev_row_prdct_type_code and\r\n\t-- lob = v_Prev_row_lob and\r\n\t-- v_Prev_row_ins_line = v_Prev_row_ins_line, \r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\r\n\t-- \t\n\tDECODE(TRUE,\n\trisk_unit_grp_code = v_Prev_row_risk_unit_grp_code AND prdct_type_code = v_Prev_row_prdct_type_code AND lob = v_Prev_row_lob AND v_Prev_row_ins_line = v_Prev_row_ins_line, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\trisk_unit_grp_code AS v_Prev_row_risk_unit_grp_code,\n\tprdct_type_code AS v_Prev_row_prdct_type_code,\n\tlob AS v_Prev_row_lob,\n\tins_line AS v_Prev_row_ins_line,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_sup_risk_unit_group\n),\nFIL_First_rown_inAKGroup AS (\n\tSELECT\n\tsup_risk_unit_grp_id, \n\trisk_unit_grp_code, \n\tprdct_type_code, \n\tlob, \n\tins_line, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_lag_eff_from_date\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_sup_risk_unit_group AS (\n\tSELECT\n\tsup_risk_unit_grp_id, \n\trisk_unit_grp_code, \n\tprdct_type_code, \n\tlob, \n\tins_line, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_First_rown_inAKGroup\n),\nsup_risk_unit_group_Update AS (\n\tMERGE INTO sup_risk_unit_group AS T\n\tUSING UPD_sup_risk_unit_group AS S\n\tON T.sup_risk_unit_grp_id = S.sup_risk_unit_grp_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.risk_unit_grp_code = S.risk_unit_grp_code, T.lob = S.lob, T.ins_line = S.ins_line, T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246507"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905524"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604412"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:23:26"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:28:04"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED AND PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}