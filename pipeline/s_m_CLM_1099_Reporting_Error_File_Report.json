{
    "name": "s_m_CLM_1099_Reporting_Error_File_Report",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_1099_Reporting_Error_File_Report",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_IrsErrorFile AS (\n\n-- TODO Manual --\n\n),\nFIL_KeepErrorRows AS (\n\tSELECT\n\tIdType, \n\tTaxId, \n\tLegalName, \n\tReplyCode\n\tFROM SQ_IrsErrorFile\n\tWHERE ReplyCode !=0\n),\nEXP_SetMappletValues AS (\n\tSELECT\n\tIdType,\n\t-- *INF*: IIF(IdType=1,'EIN','SSN')\n\tIFF(IdType = 1, 'EIN', 'SSN') AS o_IdType,\n\tTaxId,\n\tLegalName,\n\tReplyCode,\n\t'Tokenize' AS TransactionName\n\tFROM FIL_KeepErrorRows\n),\nmplt_Token_WebService_Generic_Call AS (WITH\n\tSEQ_TokenizeWSCounter AS (\n\t\tCREATE SEQUENCE SEQ_TokenizeWSCounter\n\t\tSTART = 0\n\t\tINCREMENT = 1;\n\t),\n\tINPUT_Token_WebService_Call AS (\n\t\t\n\t),\n\tEXP_Input AS (\n\t\tSELECT\n\t\tTaxId,\n\t\tTransactionName AS TransactionType,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- IN(TransactionType,'Tokenize','Detokenize',1),1,\r\n\t\t-- 0)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    TransactionType IN ('Tokenize','Detokenize',1), 1,\n\t\t    0\n\t\t) AS v_ValidateTransactionType,\n\t\t-- *INF*: IIF(v_ValidateTransactionType=0,ERROR('Invalid TransactionType value for Token Service'),'No Error')\n\t\tIFF(\n\t\t    v_ValidateTransactionType = 0, ERROR('Invalid TransactionType value for Token Service'),\n\t\t    'No Error'\n\t\t) AS ValidationCheck,\n\t\tOptional_TaxType AS Optional_TaxTypeOverride,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- NOT(ISNULL(Optional_TaxTypeOverride)) and Optional_TaxTypeOverride!='N/A',Optional_TaxTypeOverride,\r\n\t\t-- SUBSTR(TaxId,3,1)='-','EIN',\r\n\t\t-- SUBSTR(TaxId,4,1)='-' and SUBSTR(TaxId,7,1)='-','SSN',\r\n\t\t--  'N/A'\r\n\t\t-- )\r\n\t\t-- \n\t\tDECODE(\n\t\t    TRUE,\n\t\t    NOT (Optional_TaxTypeOverride IS NULL) and Optional_TaxTypeOverride != 'N/A', Optional_TaxTypeOverride,\n\t\t    SUBSTR(TaxId, 3, 1) = '-', 'EIN',\n\t\t    SUBSTR(TaxId, 4, 1) = '-' and SUBSTR(TaxId, 7, 1) = '-', 'SSN',\n\t\t    'N/A'\n\t\t) AS v_TaxType,\n\t\tv_TaxType AS o_TaxType,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- INDEXOF(TaxId,'-') > 0, TaxId,\r\n\t\t-- v_TaxType='SSN',substr(TaxId,1,3)||'-'||substr(TaxId,4,2)||'-'||substr(TaxId,6,4),\r\n\t\t-- v_TaxType='EIN',substr(TaxId,1,2)||'-'||substr(TaxId,3,7),\r\n\t\t-- 'N/A'\r\n\t\t-- )\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    INDEXOF(TaxId, '-') > 0, TaxId,\n\t\t    v_TaxType = 'SSN', substr(TaxId, 1, 3) || '-' || substr(TaxId, 4, 2) || '-' || substr(TaxId, 6, 4),\n\t\t    v_TaxType = 'EIN', substr(TaxId, 1, 2) || '-' || substr(TaxId, 3, 7),\n\t\t    'N/A'\n\t\t) AS v_TaxId_Dashes,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- INDEXOF(TaxId,'-') = 0,TaxId,\r\n\t\t-- REPLACESTR(0,TaxId,'-','')\r\n\t\t-- )\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    INDEXOF(TaxId, '-') = 0, TaxId,\n\t\t    REGEXP_REPLACE(TaxId,'-','','i')\n\t\t) AS v_TaxId_StripDashes,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- TransactionType='Tokenize',v_TaxId_Dashes,\r\n\t\t-- v_TaxId_StripDashes)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    TransactionType = 'Tokenize', v_TaxId_Dashes,\n\t\t    v_TaxId_StripDashes\n\t\t) AS o_TaxId\n\t\tFROM INPUT_Token_WebService_Call\n\t),\n\tFIL_SSN AS (\n\t\tSELECT\n\t\tTaxId AS ref_TaxId, \n\t\tTransactionType, \n\t\to_TaxType AS TaxType, \n\t\to_TaxId AS TaxId\n\t\tFROM EXP_Input\n\t\tWHERE TaxType='SSN'\n\t),\n\tFIL_NotSSN AS (\n\t\tSELECT\n\t\tTaxId AS ref_TaxId, \n\t\tTransactionType, \n\t\to_TaxType AS TaxType, \n\t\to_TaxId AS TaxId\n\t\tFROM EXP_Input\n\t\tWHERE TaxType!='SSN'\n\t),\n\tEXP_ServiceRequest AS (\n\t\tSELECT\n\t\tref_TaxId,\n\t\tTransactionType,\n\t\tTaxType,\n\t\tTaxId,\n\t\t'Data Feed Jobs' AS RequestedBy,\n\t\t'Claims' AS Application,\n\t\t'DATA FEED' AS Caller,\n\t\t@{pipeline().parameters.URL} AS URL\n\t\tFROM FIL_SSN\n\t),\n\tToken AS (-- Token\n\t\n\t\t##############################################\n\t\n\t\t# TODO: Place holder for Custom transformation\n\t\n\t\t##############################################\n\t),\n\tEXP_ServiceResponse AS (\n\t\tSELECT\n\t\tREF_InputID,\n\t\ttns_Data0,\n\t\tXPK_n3_Envelope0,\n\t\tfaultcode,\n\t\tfaultstring,\n\t\tREF_TransactionType,\n\t\t'SSN' AS Type\n\t\tFROM Token\n\t),\n\tUnion AS (\n\t\tSELECT ref_TaxId AS input_TaxId, TransactionType, TaxType, TaxId AS Output_TaxId\n\t\tFROM FIL_NotSSN\n\t\tUNION\n\t\tSELECT REF_InputID AS input_TaxId, REF_TransactionType AS TransactionType, Type AS TaxType, tns_Data0 AS Output_TaxId, faultcode, faultstring\n\t\tFROM EXP_ServiceResponse\n\t),\n\tEXP_output AS (\n\t\tSELECT\n\t\tinput_TaxId,\n\t\tTransactionType,\n\t\tTaxType,\n\t\tOutput_TaxId,\n\t\tfaultcode,\n\t\tfaultstring,\n\t\t-- *INF*: IIF(ISNULL(faultcode),0,1)\n\t\tIFF(faultcode IS NULL, 0, 1) AS faultFlag\n\t\tFROM Union\n\t),\n\tOUTPUT__Token_WebService_Call AS (\n\t\tSELECT\n\t\tinput_TaxId AS SubmittedTaxId, \n\t\tTransactionType, \n\t\tTaxType, \n\t\tOutput_TaxId AS ResponseTaxId, \n\t\tfaultcode, \n\t\tfaultstring, \n\t\tfaultFlag\n\t\tFROM EXP_output\n\t),\n),\nSRTTRANS1 AS (\n\tSELECT\n\tSubmittedTaxId, \n\tTaxType, \n\tTransactionType, \n\tResponseTaxId, \n\tfaultcode, \n\tfaultstring, \n\tfaultFlag\n\tFROM mplt_Token_WebService_Generic_Call\n\tORDER BY SubmittedTaxId ASC, TaxType ASC\n),\nSRT_SortRows AS (\n\tSELECT\n\tTaxId, \n\to_IdType AS IdType, \n\tLegalName, \n\tReplyCode\n\tFROM EXP_SetMappletValues\n\tORDER BY TaxId ASC, IdType ASC\n),\nJNRTRANS AS (SELECT\n\tSRTTRANS1.SubmittedTaxId, \n\tSRTTRANS1.TransactionType, \n\tSRTTRANS1.TaxType, \n\tSRTTRANS1.ResponseTaxId, \n\tSRTTRANS1.faultcode, \n\tSRTTRANS1.faultstring, \n\tSRTTRANS1.faultFlag, \n\tSRT_SortRows.IdType AS o_IdType, \n\tSRT_SortRows.TaxId, \n\tSRT_SortRows.LegalName, \n\tSRT_SortRows.ReplyCode\n\tFROM SRTTRANS1\n\tINNER JOIN SRT_SortRows\n\tON SRT_SortRows.TaxId = SRTTRANS1.SubmittedTaxId AND SRT_SortRows.IdType = SRTTRANS1.TaxType\n),\nRTR_ValidAndErrorResponse AS (\n\tSELECT\n\tSubmittedTaxId,\n\tTransactionType,\n\tTaxType,\n\tResponseTaxId,\n\tfaultcode,\n\tfaultstring,\n\tfaultFlag,\n\tLegalName,\n\tReplyCode\n\tFROM JNRTRANS\n),\nRTR_ValidAndErrorResponse_ServiceFault AS (SELECT * FROM RTR_ValidAndErrorResponse WHERE faultFlag=1),\nRTR_ValidAndErrorResponse_ValidRecords AS (SELECT * FROM RTR_ValidAndErrorResponse WHERE faultFlag=0 and NOT ISNULL(ResponseTaxId)),\nEXP_ReportPath AS (\n\tSELECT\n\tSubmittedTaxId,\n\tTransactionType,\n\tTaxType,\n\tResponseTaxId,\n\t-- *INF*: CHR(39)||ResponseTaxId||CHR(39)\r\n\t-- \n\tCHR(39) || ResponseTaxId || CHR(39) AS o_ResponseTaxId,\n\tLegalName,\n\tReplyCode,\n\t@{pipeline().parameters.YEAR} AS YearParameter\n\tFROM RTR_ValidAndErrorResponse_ValidRecords\n),\nSQL_FindClaimAndPaymentData AS (-- SQL_FindClaimAndPaymentData\n\n\t##############################################\n\n\t# TODO: Place holder for Custom transformation\n\n\t##############################################\n),\nEXP_FormatReportOutput AS (\n\tSELECT\n\t-- *INF*: 'IRSErrorClaimsReport_'||TO_CHAR(SYSDATE,'YYYYMMDDHHMMSS')||'.txt'\n\t'IRSErrorClaimsReport_' || TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDDHHMMSS') || '.txt' AS FileName,\n\tSubmittedTaxId_output,\n\tTaxType_output,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TaxType_output='EIN',SubmittedTaxId_output,\r\n\t-- reverse(substr(reverse(SubmittedTaxId_output),1,4))\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    TaxType_output = 'EIN', SubmittedTaxId_output,\n\t    reverse(substr(reverse(SubmittedTaxId_output), 1, 4))\n\t) AS TaxIdentificationNumber,\n\tLegalName_output AS IRSName,\n\tClaimNum,\n\tPayDate AS PayIssuedDate,\n\tReplyCode_output AS IRSRejectCode,\n\tEntryOperator AS PayEntryOperId,\n\tPayAmount AS TotalPayAmount\n\tFROM SQL_FindClaimAndPaymentData\n),\nIRSErrorClaimsReport AS (\n\tINSERT INTO IRSErrorClaimsReport\n\t(FileName, TaxIdentificationNumber, IRSName, ClaimNum, PayIssuedDate, IRSRejectCode, PayEntryOperId, TotalPayAmount)\n\tSELECT \n\tFILENAME, \n\tTAXIDENTIFICATIONNUMBER, \n\tIRSNAME, \n\tCLAIMNUM, \n\tPAYISSUEDDATE, \n\tIRSREJECTCODE, \n\tPAYENTRYOPERID, \n\tTOTALPAYAMOUNT\n\tFROM EXP_FormatReportOutput\n),\nEXP_logpathInput AS (\n\tSELECT\n\tSubmittedTaxId,\n\t-- *INF*: reverse(substr(reverse(SubmittedTaxId),1,4))\n\treverse(substr(reverse(SubmittedTaxId), 1, 4)) AS TaxIdLastFour,\n\tTransactionType,\n\tTaxType,\n\tResponseTaxId,\n\tfaultcode,\n\tfaultstring,\n\tfaultFlag,\n\tLegalName,\n\tReplyCode,\n\tSYSDATE AS CurrentDate\n\tFROM RTR_ValidAndErrorResponse_ServiceFault\n),\nEXP_ServiceFaultOutput AS (\n\tSELECT\n\t'TokenServiceFault.csv' AS FileName,\n\tTaxIdLastFour,\n\tTransactionType,\n\tTaxType,\n\tfaultcode,\n\tfaultstring,\n\tLegalName,\n\tReplyCode,\n\tCurrentDate\n\tFROM EXP_logpathInput\n),\nServiceFaultLog AS (\n\tINSERT INTO ServiceFaultLog\n\t(FileName, TaxIdLastFour, TransactionType, TaxType, faultcode, faultstring, LegalName, ReplyCode, CurrentDate)\n\tSELECT \n\tFILENAME, \n\tTAXIDLASTFOUR, \n\tTRANSACTIONTYPE, \n\tTAXTYPE, \n\tFAULTCODE, \n\tFAULTSTRING, \n\tLEGALNAME, \n\tREPLYCODE, \n\tCURRENTDATE\n\tFROM EXP_ServiceFaultOutput\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "URL": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "YEAR": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/ClaimDataServices/"
        },
        "annotations": []
    }
}