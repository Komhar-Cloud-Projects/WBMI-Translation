{
    "name": "s_m_FEED_Load_WorkISSExtract_CF_CR",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WorkISSExtract_CF_CR",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_SupReferenceData AS (\n\tSELECT\n\tToCode,\n\tFromCode\n\tFROM (\n\t\tSELECT \n\t\t\tToCode,\n\t\t\tFromCode\n\t\tFROM SupReferenceData\n\t\tWHERE FromDomain='DC_CF_RISK' and ToDomain='ISSCoverageCodes'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY FromCode ORDER BY ToCode) = 1\n),\nLKP_SupConstructionCode AS (\n\tSELECT\n\tStandardConstructionCodeDescription,\n\tConstructionCode\n\tFROM (\n\t\tSelect  LTRIM(RTRIM(ConstructionCode)) as ConstructionCode,\r\n\t\t     StandardConstructionCodeDescription as StandardConstructionCodeDescription\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupConstructionCode\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ConstructionCode ORDER BY StandardConstructionCodeDescription) = 1\n),\nLKP_WorkISSExtract_ConstructionCode_First AS (\n\tSELECT\n\tConstructionCode,\n\tPolicyKey,\n\tTypeBureauCode\n\tFROM (\n\t\tselect ConstructionCode as ConstructionCode,\r\n\t\tPolicyKey as PolicyKey,\r\n\t\tTypeBureauCode as TypeBureauCode\r\n\t\tfrom (\r\n\t\tselect  ISS.ConstructionCode,\r\n\t\tISS.PolicyKey,\r\n\t\tISS.TypeBureauCode,\r\n\t\trow_number() over (partition by  ISS.PolicyKey,ISS.TypeBureauCode order by RL.LocationUnitNumber, SC.SubLocationUnitNumber) rn\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract ISS\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\t\ton ISS.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\t\ton PMC.RiskLocationAKID=RL.RiskLocationAKID and RL.SourceSystemID='PMS'\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\t\ton PMC.StatisticalCoverageAKID=SC.StatisticalCoverageAKID and SC.SourceSystemID='PMS'\r\n\t\twhere ISS.EDWPremiumMasterCalculationPKId<>-1 and ISS.PremiumMasterRunDate between \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)--first day of last Quarter   \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))--Last day of last Quarter\r\n\t\tand ISS.ConstructionCode<>'00'\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tselect  ISS.ConstructionCode,\r\n\t\tISS.PolicyKey,\r\n\t\tISS.TypeBureauCode,\r\n\t\trow_number() over (partition by  ISS.PolicyKey,ISS.TypeBureauCode order by CCD.loc_unit_num,CCD.sub_loc_unit_num) rn\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract ISS\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC\r\n\t\ton ISS.EDWLossMasterCalculationPKID=LMC.loss_master_calculation_id\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD\r\n\t\ton LMC.claimant_cov_det_ak_id=CCD.claimant_cov_det_ak_id and CCD.crrnt_snpsht_flag=1\r\n\t\twhere ISS.EDWLossMasterCalculationPKId<>-1 and ISS.LossMasterRunDate between \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)--first day of last Quarter   \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))--Last day of last Quarter\r\n\t\tand len(ISS.PolicyKey)=12\r\n\t\tand ISS.ConstructionCode<>'00'\r\n\t\t) Src\r\n\t\twhere rn=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,TypeBureauCode ORDER BY ConstructionCode) = 1\n),\nLKP_WorkISSExtract_ISOFireProtectionCode_First AS (\n\tSELECT\n\tISOFireProtectionCode,\n\tPolicyKey,\n\tTypeBureauCode\n\tFROM (\n\t\tselect ISOFireProtectionCode as ISOFireProtectionCode,\r\n\t\tPolicyKey as PolicyKey,\r\n\t\tTypeBureauCode as TypeBureauCode\r\n\t\tfrom (\r\n\t\tselect  ISS.ISOFireProtectionCode,\r\n\t\tISS.PolicyKey,\r\n\t\tISS.TypeBureauCode,\r\n\t\trow_number() over (partition by  ISS.PolicyKey,ISS.TypeBureauCode order by RL.LocationUnitNumber, SC.SubLocationUnitNumber) rn\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract ISS\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\t\ton ISS.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\t\ton PMC.RiskLocationAKID=RL.RiskLocationAKID and RL.SourceSystemID='PMS'\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\t\ton PMC.StatisticalCoverageAKID=SC.StatisticalCoverageAKID and SC.SourceSystemID='PMS'\r\n\t\twhere ISS.EDWPremiumMasterCalculationPKId<>-1 and ISS.PremiumMasterRunDate between \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)--first day of last Quarter   \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))--Last day of last Quarter\r\n\t\tand ISS.ISOFireProtectionCode<>'00'\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tselect  ISS.ISOFireProtectionCode,\r\n\t\tISS.PolicyKey,\r\n\t\tISS.TypeBureauCode,\r\n\t\trow_number() over (partition by  ISS.PolicyKey,ISS.TypeBureauCode order by CCD.loc_unit_num,CCD.sub_loc_unit_num) rn\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract ISS\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC\r\n\t\ton ISS.EDWLossMasterCalculationPKID=LMC.loss_master_calculation_id\r\n\t\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD\r\n\t\ton LMC.claimant_cov_det_ak_id=CCD.claimant_cov_det_ak_id and CCD.crrnt_snpsht_flag=1\r\n\t\twhere ISS.EDWLossMasterCalculationPKId<>-1 and ISS.LossMasterRunDate between \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)--first day of last Quarter   \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))--Last day of last Quarter\r\n\t\tand len(ISS.PolicyKey)=12\r\n\t\tand ISS.ISOFireProtectionCode<>'00'\r\n\t\t) Src\r\n\t\twhere rn=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,TypeBureauCode ORDER BY ISOFireProtectionCode) = 1\n),\nLKP_Policy_SBOP AS (\n\tSELECT\n\tProgramAKId,\n\tpol_key\n\tFROM (\n\t\tselect distinct a.pol_key as pol_key,a.ProgramAKId  as ProgramAKId from\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID,P.ProgramAKId as ProgramAKId\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand \r\n\t\tsourcesystemid='DCT' \r\n\t\tand \r\n\t\tPC.InsuranceLine ='SBOPGeneralLiability') a  inner join\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID,P.ProgramAKId as ProgramAKId\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand \r\n\t\tsourcesystemid='DCT' \r\n\t\tand \r\n\t\t PC.InsuranceLine ='SBOPProperty') b \r\n\t\tON  a.PolicyAKID=b.PolicyAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY ProgramAKId) = 1\n),\nLKP_Policy AS (\n\tSELECT\n\tpol_key\n\tFROM (\n\t\tselect p.pol_key as Pol_Key \r\n\t\tfrom \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\ton\r\n\t\tp.pol_ak_id=pc.PolicyAKID\r\n\t\twhere pc.InsuranceLine like 'SBOP%'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_key) = 1\n),\nLKP_archCFDCOccpancyType AS (\n\tSELECT\n\tOccupancyType,\n\tPolicyNumber\n\tFROM (\n\t\tselect distinct db.PolicyNumber as PolicyNumber,do.OccupancyType as OccupancyType From  ArchDCCFlocationStaging dloc inner join\r\n\t\t (SELECT distinct dp.PolicyNumber+PolicyVersionFormatted as PolicyNumber,db.CFlocationid as CFlocationid,db.Sessionid as \r\n\t\t sessionid,db.CFBuildingId,dl.type as type,db.description as description\r\n\t\tFrom VWArchWorkDCTPolicy dp inner join \r\n\t\t  archDCLineStaging dl\r\n\t\ton\r\n\t\tdp.PolicyId=dl.PolicyId \r\n\t\tand dp.Sessionid=dl.Sessionid\r\n\t\t inner join  ArchDCCFBuildingStage db\r\n\t\ton dl.LineId=db.LineId\r\n\t\tand dl.Sessionid=db.Sessionid\r\n\t\t) db\r\n\t\ton dloc.CF_locationid = db.CFlocationid AND  dloc.Sessionid=db.Sessionid\r\n\t\tINNER JOIN archDCCFRiskStaging dr\r\n\t\ton dr.CF_BuildingId=db.CFBuildingId\r\n\t\tand dr.Sessionid=db.Sessionid\r\n\t\t inner join archDCCFOccupancyStaging do\r\n\t\ton do.CF_RiskId=dr.CF_RiskId \r\n\t\tand do.Sessionid=dr.Sessionid  \r\n\t\twhere  db.Type in('CommercialAuto','CommercialUmbrella','Property')\r\n\t\tand dloc.description='Primary Location'\r\n\t\tand db.description like 'Building #1%' \r\n\t\tand do.OccupancyType is not null\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber ORDER BY OccupancyType) = 1\n),\nLKP_archGLDCOccpancyType AS (\n\tSELECT\n\tOccupancyType,\n\tPolicyNumber\n\tFROM (\n\t\tselect distinct dr.PolicyNumber as PolicyNumber,dcgl.OccupancyTypeMonoline as  OccupancyType\r\n\t\t from archDCGLOccupancyStaging dcgl inner join (Select distinct dp.PolicyNumber+PolicyVersionFormatted as PolicyNumber, dr.GL_RiskId,dr.SessionId,dl.type\r\n\t\t From  VWArchWorkDCTPolicy dp inner join   archDCLineStaging dl\r\n\t\t on\r\n\t\t dp.PolicyId=dl.PolicyId and\r\n\t\t  dp.SessionId=dl.SessionId \r\n\t\t  -- and dp.AuditId=dl.AuditId \r\n\t\t inner join  archDCGLRiskStaging dr\r\n\t\t on dr.LineId=dl.LineId and\r\n\t\t dr.SessionId=dl.SessionId \r\n\t\t --and dr.AuditId=dl.AuditId\r\n\t\t )  dr\r\n\t\t on dcgl.GL_RiskId=dr.GL_RiskId and\r\n\t\t dcgl.SessionId=dr.SessionId \r\n\t\t --and dcgl.AuditId=dr.AuditId\r\n\t\t where dr.type='GeneralLiability' and dcgl.OccupancyTypeMonoline is not null\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber ORDER BY OccupancyType) = 1\n),\nLKP_Policy_GL_PR AS (\n\tSELECT\n\tpol_key\n\tFROM (\n\t\tselect distinct a.pol_key  as pol_key from\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand \r\n\t\tsourcesystemid='DCT' \r\n\t\tand \r\n\t\tPC.InsuranceLine ='GeneralLiability') a  inner join\r\n\t\t(\r\n\t\tselect   p.pol_key as pol_key , pc.policyakid  as PolicyAKID\r\n\t\tFrom @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy p inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tON\r\n\t\tp.pol_ak_id=pc.policyakid\r\n\t\tand \r\n\t\tsourcesystemid='DCT' \r\n\t\tand \r\n\t\t PC.InsuranceLine ='Property') b \r\n\t\tON  a.PolicyAKID=b.PolicyAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_key) = 1\n),\nLKP_SupPackageModificationAdjustmentGroup AS (\n\tSELECT\n\tPackageModificationAdjustmentGroupDescription,\n\tSourceSystemId,\n\tPackageModificationAdjustmentGroupCode\n\tFROM (\n\t\tSELECT \n\t\t\tPackageModificationAdjustmentGroupDescription,\n\t\t\tSourceSystemId,\n\t\t\tPackageModificationAdjustmentGroupCode\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupPackageModificationAdjustmentGroup\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SourceSystemId,PackageModificationAdjustmentGroupCode ORDER BY PackageModificationAdjustmentGroupDescription) = 1\n),\nLKP_Deductible_Property_WindORHail AS (\n\tSELECT\n\tCoverageDeductibleValue,\n\tPolicyKey,\n\tRatingCoverageAKId\n\tFROM (\n\t\tselect PMC.PolicyKey as PolicyKey,PMC.RatingCoverageAKId as RatingCoverageAKId,CD.CoverageDeductibleValue as CoverageDeductibleValue\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\t\ton PMC.PremiumTransactionAKID=CDB.PremiumTransactionAKId\r\n\t\tand PMC.SourceSystemID='DCT'\r\n\t\tand CDB.SourceSystemID='DCT'\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD\r\n\t\ton CDB.CoverageDeductibleId=CD.CoverageDeductibleId\r\n\t\tand CD.SourceSystemID='DCT'\r\n\t\twhere CD.CoverageDeductibleValue<>'0'\r\n\t\tand PMC.PremiumMasterSubLine in ('020','027','120')\r\n\t\tand (CD.CoverageDeductibleType like '%Wind%' or CD.CoverageDeductibleType like '%Hail%')\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,RatingCoverageAKId ORDER BY CoverageDeductibleValue) = 1\n),\nLKP_Deductible_Property AS (\n\tSELECT\n\tCoverageDeductibleValue,\n\tPolicyKey,\n\tRatingCoverageAKId\n\tFROM (\n\t\tselect PMC.Policykey as Policykey,PMC.RatingCoverageAKId as RatingCoverageAKId,Cd.CoverageDeductibleValue as CoverageDeductibleValue\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge CDB\r\n\t\ton PMC.PremiumTransactionAKID=CDB.PremiumTransactionAKId\r\n\t\tand PMC.SourceSystemID='DCT'\r\n\t\tand CDB.SourceSystemID='DCT'\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible CD\r\n\t\ton CDB.CoverageDeductibleId=CD.CoverageDeductibleId\r\n\t\tand CD.SourceSystemID='DCT'\r\n\t\twhere PMC.PremiumMasterSubLine in ('020','027','120','010','015','016','017','018','029','035','045','055','110')\r\n\t\tand (CD.CoverageDeductibleType not like '%Wind%' and CD.CoverageDeductibleType not like '%Hail%')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,RatingCoverageAKId ORDER BY CoverageDeductibleValue) = 1\n),\nLKP_Update_ConstructionCode AS (\n\tSELECT\n\tConstructionCode,\n\tPolicyKey\n\tFROM (\n\t\tSELECT PolicyKey AS PolicyKey, \r\n\t\tConstructionCode AS ConstructionCode\r\n\t\tFROM (\r\n\t\t\tSELECT DISTINCT POL.pol_key AS PolicyKey, \r\n\t\t\tRL.LocationUnitNumber AS LocationNumber, \r\n\t\t\tRC.SubLocationUnitNumber AS BuildingNumber, \r\n\t\t\tPT.ConstructionCode AS ConstructionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN RC.SubLocationUnitNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY POL.pol_key\r\n\t\t\t\tORDER BY RL.LocationUnitNumber, RC.SubLocationUnitNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber\r\n\t\t\tFROM PremiumTransaction AS PT WITH (NOLOCK)\r\n\t\t\tINNER JOIN  RatingCoverage AS RC WITH (NOLOCK)\r\n\t\t\tON PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate=PT.EffectiveDate \r\n\t\t\tINNER JOIN PolicyCoverage AS PC WITH (NOLOCK)\r\n\t\t\tON PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN RiskLocation AS RL WITH (NOLOCK)\r\n\t\t\tON PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN V2.policy AS POL WITH (NOLOCK)\r\n\t\t\tON POL.pol_ak_id=PC.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag=1\r\n\t\t\tINNER JOIN PremiumMasterCalculation AS PMC WITH (NOLOCK)\r\n\t\t\tON PMC.PremiumTransactionAKID = PT.PremiumTransactionAKID\r\n\t\t\tAND PMC.CurrentSnapshotFlag = 1\r\n\t\t\tWHERE RC.SubLocationUnitNumber <> '000'\r\n\t\t\tAND LEN(POL.pol_key) <> 12\r\n\t\t\tAND PT.ConstructionCode NOT IN ('N/A', '00')\r\n\t\t\tAND (PMC.PremiumMasterRunDate BETWEEN DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)\r\n\t\t \tAND \r\n\t\t\tDATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t) AS CorrectConstructionCode\r\n\t\tWHERE RowNumber = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY ConstructionCode) = 1\n),\nLKP_Update_ClassCode AS (\n\tSELECT\n\tClassCode,\n\tPolicyKey\n\tFROM (\n\t\tSELECT PolicyKey AS PolicyKey, \r\n\t\tClassCode AS ClassCode\r\n\t\tFROM (\r\n\t\t\tSELECT DISTINCT POL.pol_key AS PolicyKey, \r\n\t\t\tRL.LocationUnitNumber AS LocationNumber, \r\n\t\t\tRC.SubLocationUnitNumber AS BuildingNumber, \r\n\t\t\tRC.ClassCode AS ClassCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN RC.SubLocationUnitNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY POL.pol_key\r\n\t\t\t\tORDER BY RL.LocationUnitNumber, RC.SubLocationUnitNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber\r\n\t\t\tFROM PremiumTransaction AS PT WITH (NOLOCK)\r\n\t\t\tINNER JOIN  RatingCoverage AS RC WITH (NOLOCK)\r\n\t\t\tON PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate=PT.EffectiveDate \r\n\t\t\tINNER JOIN PolicyCoverage AS PC WITH (NOLOCK)\r\n\t\t\tON PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN RiskLocation AS RL WITH (NOLOCK)\r\n\t\t\tON PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN V2.policy AS POL WITH (NOLOCK)\r\n\t\t\tON POL.pol_ak_id=PC.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag=1\r\n\t\t\tINNER JOIN PremiumMasterCalculation AS PMC WITH (NOLOCK)\r\n\t\t\tON PMC.PremiumTransactionAKID = PT.PremiumTransactionAKID\r\n\t\t\tAND PMC.CurrentSnapshotFlag = 1\r\n\t\t\tWHERE RC.SubLocationUnitNumber <> '000'\r\n\t\t\tAND LEN(POL.pol_key) <> 12\r\n\t\t\tAND RC.ClassCode NOT IN ('N/A', '0000', '99999')\r\n\t\t\tAND (PMC.PremiumMasterRunDate BETWEEN DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)\r\n\t\t \tAND \r\n\t\t\tDATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t) AS CorrectClassCode\r\n\t\tWHERE RowNumber = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY ClassCode) = 1\n),\nSQ_Loss AS (\n\tDECLARE @StartTime DATETIME\r\n\tDECLARE @EndTime DATETIME\r\n\t\r\n\tSET @StartTime = DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0) \r\n\tSET @EndTime = DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\r\n\tSELECT distinct\r\n\tLMC.loss_master_calculation_id,\r\n\tCD.clndr_date,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tRL.RatingCounty,\r\n\tRL.RatingCity,\r\n\tOCC.claim_loss_date,\r\n\tLMC.sub_line_code,\r\n\tLMC.class_code,\r\n\tCT.cause_of_loss,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_key,\r\n\tOCC.claim_occurrence_num,\r\n\tCPO.claimant_num,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMC.paid_loss_amt else 0 end) as paid_loss_amt,\r\n\t(Case when LMC.financialtypecode = 'D' and LMC.trans_kind_code = 'D' Then LMF.outstanding_amt Else 0 End) as outstanding_amt,\r\n\tCCD.pms_type_bureau_code,\r\n\tSC.RiskUnitGroup,\r\n\tCCD.PolicySourceID,\r\n\t'N/A' AS RiskType,\r\n\t'N/A' AS CoverageType,\r\n\tSC.StatisticalCoverageAKID,\r\n\t-1 AS RatingCoverageAKID,\r\n\tPOL.pol_exp_date,\r\n\tOCC.s3p_claim_num,\r\n\tCT.claim_trans_id,\r\n\tCCD.claimant_cov_det_ak_id,\r\n\tASL.asl_num,\r\n\tPC.InsuranceLine,\r\n\tPOL.pol_num,\r\n\tLMC.statistical_code1,\r\n\tCASE WHEN CT.trans_date<@StartTime THEN CD.clndr_date ELSE CT.trans_date END AS trans_date,\r\n\t'N/A' as RatingTerritoryCode\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF with (nolock)\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL with (nolock)\r\n\ton LMF.asl_dim_id=ASL.asl_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD with (nolock) \r\n\tON LMF.loss_master_run_date_id = CD.clndr_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC with (nolock)\r\n\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT with (nolock)\r\n\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\tand LMC.crrnt_snpsht_flag=1\r\n\tand CT.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD with (nolock)\r\n\tON CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\tAND CCD.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO with (nolock)\r\n\tON CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\tAND CPO.Crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC with (nolock)\r\n\tON CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\tAND  OCC.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim PD with(nolock)\r\n\ton LMF.pol_dim_id=PD.pol_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_id=PD.edw_pol_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG with (nolock)\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC with (nolock)\r\n\ton SC.StatisticalCoverageAKID=CCD.StatisticalCoverageAKID\r\n\tand SC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC with (nolock)\r\n\ton PC.PolicyCoverageAKID=SC.PolicyCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL with (nolock)\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC with (nolock)\r\n\ton IRC.InsuranceReferenceCoverageDimId=LMF.InsuranceReferenceCoverageDimId\r\n\tand NOT (IRC.InsuranceLineCode='CF' and IRC.CoverageCode='BOILER - BRK')\r\n\twhere CCD.pms_type_bureau_code IN ('CF','CR','BT','FT')\r\n\tAND LMC.trans_kind_code='D'\r\n\tAND ISG.InsuranceSegmentCode IN ('1','2')\r\n\tAND CD.clndr_date between @StartTime AND @EndTime\r\n\tAND (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0)\r\n\tAND LMF.audit_id > 0 \r\n\t--and 1=2\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2}\r\n\t\r\n\t--DCT\r\n\tunion all\r\n\tSELECT distinct\r\n\tLMC.loss_master_calculation_id,\r\n\tCD.clndr_date,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tRL.RatingCounty,\r\n\tRL.RatingCity,\r\n\tOCC.claim_loss_date,\r\n\tLMC.sub_line_code,\r\n\tLMC.class_code,\r\n\tCT.cause_of_loss,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_key,\r\n\tOCC.claim_occurrence_num,\r\n\tCPO.claimant_num,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMC.paid_loss_amt else 0 end) as paid_loss_amt,\r\n\t(Case when LMC.financialtypecode  = 'D' and LMC.trans_kind_code = 'D' Then LMF.outstanding_amt Else 0 End) as outstanding_amt,\r\n\tCCD.pms_type_bureau_code,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tCCD.PolicySourceID,\r\n\tLTRIM(RTRIM(RC.RiskType)) AS RiskType,\r\n\tLTRIM(RTRIM(RC.CoverageType)) AS CoverageType,\r\n\t-1 as StatisticalCoverageAKID,\r\n\tRC.RatingCoverageAKID,\r\n\tPOL.pol_exp_date,\r\n\tOCC.s3p_claim_num,\r\n\tCT.claim_trans_id,\r\n\tCCD.claimant_cov_det_ak_id,\r\n\tASL.asl_num,\r\n\tSIL.StandardInsuranceLineCode InsuranceLine,\r\n\tPOL.pol_num,\r\n\tLMC.statistical_code1,\r\n\tCASE WHEN CT.trans_date<@StartTime THEN CD.clndr_date ELSE CT.trans_date END AS trans_date,\r\n\tISNULL(PTRR.RatingTerritoryCode,'N/A') as RatingTerritoryCode\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF with (nolock)\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL with (nolock)\r\n\ton LMF.asl_dim_id=ASL.asl_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD with (nolock) \r\n\tON LMF.loss_master_run_date_id = CD.clndr_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC with (nolock)\r\n\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT with (nolock)\r\n\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\tand LMC.crrnt_snpsht_flag=1\r\n\tand CT.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD with (nolock)\r\n\tON CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\tAND CCD.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO with (nolock)\r\n\tON CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\tAND CPO.Crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC with (nolock)\r\n\tON CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\tAND  OCC.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim PD with(nolock)\r\n\ton LMF.pol_dim_id=PD.pol_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_id=PD.edw_pol_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG with (nolock)\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC with (nolock)\r\n\ton CCD.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand (case when LMC.trans_offset_onset_ind='O' and LMC.pms_acct_entered_date != '1800-01-01 01:00:00.000'\r\n\tthen LMC.pms_acct_entered_date\r\n\telse DATEADD(D,1,LMC.loss_master_run_date)  end) between RC.EffectiveDate and RC.ExpirationDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC with (nolock)\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_insurance_line SIL with (nolock)\r\n\ton SIL.source_sys_id='DCT' and SIL.ins_line_code=PC.InsuranceLine\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL with (nolock)\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC with (nolock)\r\n\ton IRC.InsuranceReferenceCoverageDimId=LMF.InsuranceReferenceCoverageDimId\r\n\tand NOT (IRC.InsuranceLineCode='CF' and IRC.CoverageCode='BOILER - BRK')\r\n\tleft join PremiumTransactionRatingRisk PTRR on PTRR.PremiumTransactionAKID=LMC.PremiumTransactionAKID\r\n\twhere PC.Insuranceline in ('SBOPProperty','Crime','Property')\r\n\tAND LMC.trans_kind_code='D'\r\n\tAND ISG.InsuranceSegmentCode IN ('1','2')\r\n\tAND CD.clndr_date between @StartTime AND @EndTime\r\n\tAND (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0)\r\n\tAND RC.CoverageType NOT IN('DataCompromise','EquipmentBreakdown','RatingGroup','MineSubsidence')\r\n\tAND RC.SublineCode<>'920'\r\n\tAND LMF.audit_id > 0 \r\n\t--and 1=2\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2}\n),\nAGG_RemoveDuplicate AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tRatingCounty,\n\tRatingCity,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tCoverageType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\ttrans_date,\n\tRatingTerritoryCode\n\tFROM SQ_Loss\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY loss_master_calculation_id ORDER BY NULL) = 1\n),\nEXP_Type_Bureau_code AS (\n\tSELECT\n\tpms_type_bureau_code,\n\tloss_master_run_date AS i_loss_master_run_date,\n\t-- *INF*: TO_CHAR(i_loss_master_run_date, 'YYYYMMDD')\n\tTO_CHAR(i_loss_master_run_date, 'YYYYMMDD') AS o_loss_master_run_datekey\n\tFROM AGG_RemoveDuplicate\n),\nLKP_ISSWorkTable_Loss AS (\n\tSELECT\n\tEDWLossMasterCalculationPKId\n\tFROM (\n\t\tSELECT \n\t\t\tEDWLossMasterCalculationPKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract\n\t\tWHERE CONVERT (DATE,LossMasterRunDate)\r\n\t\tbetween \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0) \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t and \r\n\t\t EDWLossMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWLossMasterCalculationPKId ORDER BY EDWLossMasterCalculationPKId) = 1\n),\nSRT_Sort_data AS (\n\tSELECT\n\tAGG_RemoveDuplicate.loss_master_calculation_id, \n\tAGG_RemoveDuplicate.claim_coverage_detail_ak_id, \n\tEXP_Type_Bureau_code.o_loss_master_run_datekey AS loss_master_run_datekey, \n\tAGG_RemoveDuplicate.loss_master_run_date, \n\tAGG_RemoveDuplicate.prim_bus_class_code, \n\tAGG_RemoveDuplicate.StateProvinceCode, \n\tAGG_RemoveDuplicate.RatingCounty, \n\tAGG_RemoveDuplicate.RatingCity, \n\tAGG_RemoveDuplicate.claim_loss_date, \n\tAGG_RemoveDuplicate.sub_line_code, \n\tAGG_RemoveDuplicate.class_code, \n\tAGG_RemoveDuplicate.cause_of_loss, \n\tAGG_RemoveDuplicate.RiskTerritory, \n\tAGG_RemoveDuplicate.pol_eff_date, \n\tAGG_RemoveDuplicate.pol_key, \n\tAGG_RemoveDuplicate.claim_occurrence_num, \n\tAGG_RemoveDuplicate.claimant_num, \n\tAGG_RemoveDuplicate.paid_loss_amt, \n\tAGG_RemoveDuplicate.outstanding_amt, \n\tEXP_Type_Bureau_code.pms_type_bureau_code, \n\tAGG_RemoveDuplicate.RiskUnitGroup, \n\tAGG_RemoveDuplicate.PolicySourceID, \n\tAGG_RemoveDuplicate.RiskType, \n\tAGG_RemoveDuplicate.CoverageType, \n\tAGG_RemoveDuplicate.StatisticalCoverageAKID, \n\tAGG_RemoveDuplicate.RatingCoverageAKID, \n\tAGG_RemoveDuplicate.pol_exp_date, \n\tAGG_RemoveDuplicate.s3p_claim_num, \n\tAGG_RemoveDuplicate.claim_trans_id, \n\tLKP_ISSWorkTable_Loss.EDWLossMasterCalculationPKId, \n\tAGG_RemoveDuplicate.asl_num, \n\tAGG_RemoveDuplicate.InsuranceLine, \n\tAGG_RemoveDuplicate.pol_num, \n\tAGG_RemoveDuplicate.statistical_code1, \n\tAGG_RemoveDuplicate.trans_date, \n\tAGG_RemoveDuplicate.RatingTerritoryCode\n\tFROM LKP_ISSWorkTable_Loss\n\tORDER BY loss_master_calculation_id ASC, claim_coverage_detail_ak_id ASC, loss_master_run_datekey ASC\n),\nLKP_InceptionToDatePaidLossAmount AS (\n\tSELECT\n\tInceptionToDatePaidLossAmount,\n\tpol_key,\n\tedw_claimant_cov_det_ak_id,\n\ttrans_date,\n\tloss_master_calculation_id\n\tFROM (\n\t\t--Altered for US403701\r\n\t\t\r\n\t\tDECLARE @StartTime DATETIME\r\n\t\tDECLARE @EndTime DATETIME\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tSET @StartTime = DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)\r\n\t\tSET @EndTime = DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tSELECT DISTINCT\r\n\t\t--Old logic for OutstandingAmount records\r\n\t\t--CASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN LAST_VALUE(InceptionToDatePaidLossAmount) OVER (partition by pol_key,edw_claimant_cov_det_ak_id,year(trans_date), month(trans_date) order by trans_date rows between unbounded preceding and unbounded following )\r\n\t\t--CASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN SUM(PaidLossAmount) OVER (order by loss_master_run_date)\r\n\t\tCASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN SUM(PaidLossAmount) OVER (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by loss_master_run_date)\r\n\t\tELSE InceptionToDatePaidLossAmount END AS InceptionToDatePaidLossAmount,\r\n\t\tpol_key AS pol_key,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date\r\n\t\t,loss_master_calculation_id AS loss_master_calculation_id\r\n\t\tFROM\r\n\t\t(\r\n\t\tSELECT distinct SUM(InceptionToDatePaidLossAmount) over (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by edw_claimant_cov_det_ak_id,trans_date,claim_trans_pk_id) AS InceptionToDatePaidLossAmount,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date,\r\n\t\tInceptionToDatePaidLossAmount AS PaidLossAmount,\r\n\t\tpol_key\r\n\t\t,loss_master_calculation_id\r\n\t\t,loss_master_run_date\r\n\t\t,claim_num\r\n\t\tFROM (\r\n\t\tSELECT f.direct_loss_paid_including_recoveries AS InceptionToDatePaidLossAmount,\r\n\t\t--f.direct_loss_outstanding_excluding_recoveries AS OutstandingAmount, --US-403701 Commenting out since we don't need it\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date<'2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O\r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\t--Join added for US-403701\r\n\t\tleft join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact lmf\r\n\t\ton lmf.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tjoin loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = lmf.edw_loss_master_calculation_pk_id\r\n\t\tUNION ALL\r\n\t\tSELECT f.DirectLossPaidIR AS InceptionToDatePaidLossAmount,\r\n\t\t--f.DirectLossOutstandingER AS OutstandingAmount, --US-403701 Commenting out since we don't need it\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date>='2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O\r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\t--Join added for US-403701\r\n\t\tjoin loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = f.edw_loss_master_calculation_pk_id\r\n\t\t) T\r\n\t\t) T\r\n\t\tWHERE cast(trans_date as date)<=@EndTime\r\n\t\tORDER BY pol_key,edw_claimant_cov_det_ak_id,trans_date\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,edw_claimant_cov_det_ak_id,trans_date,loss_master_calculation_id ORDER BY InceptionToDatePaidLossAmount DESC) = 1\n),\nFIL_Exists_Loss AS (\n\tSELECT\n\tSRT_Sort_data.EDWLossMasterCalculationPKId AS LKP_LossMasterCalculationId, \n\tSRT_Sort_data.loss_master_calculation_id, \n\tSRT_Sort_data.loss_master_run_date, \n\tSRT_Sort_data.prim_bus_class_code, \n\tSRT_Sort_data.StateProvinceCode, \n\tSRT_Sort_data.RatingCounty, \n\tSRT_Sort_data.RatingCity, \n\tSRT_Sort_data.claim_loss_date, \n\tSRT_Sort_data.sub_line_code, \n\tSRT_Sort_data.class_code AS ClassCode, \n\tSRT_Sort_data.cause_of_loss, \n\tSRT_Sort_data.RiskTerritory, \n\tSRT_Sort_data.pol_eff_date, \n\tSRT_Sort_data.pol_key, \n\tSRT_Sort_data.claim_occurrence_num, \n\tSRT_Sort_data.claimant_num, \n\tSRT_Sort_data.paid_loss_amt, \n\tSRT_Sort_data.outstanding_amt, \n\tSRT_Sort_data.pms_type_bureau_code AS TypeBureauCode, \n\tSRT_Sort_data.RiskUnitGroup, \n\tSRT_Sort_data.PolicySourceID, \n\tSRT_Sort_data.RiskType, \n\tSRT_Sort_data.CoverageType, \n\tSRT_Sort_data.StatisticalCoverageAKID, \n\tSRT_Sort_data.RatingCoverageAKID, \n\tSRT_Sort_data.pol_exp_date, \n\tSRT_Sort_data.s3p_claim_num, \n\tSRT_Sort_data.claim_trans_id, \n\tSRT_Sort_data.claim_coverage_detail_ak_id, \n\tLKP_InceptionToDatePaidLossAmount.InceptionToDatePaidLossAmount AS out_CumulativeInceptiontoDatePaidLoss, \n\tSRT_Sort_data.asl_num, \n\tSRT_Sort_data.InsuranceLine, \n\tSRT_Sort_data.pol_num, \n\tSRT_Sort_data.statistical_code1, \n\tSRT_Sort_data.RatingTerritoryCode\n\tFROM SRT_Sort_data\n\tLEFT JOIN LKP_InceptionToDatePaidLossAmount\n\tON LKP_InceptionToDatePaidLossAmount.pol_key = SRT_Sort_data.pol_key AND LKP_InceptionToDatePaidLossAmount.edw_claimant_cov_det_ak_id = SRT_Sort_data.claim_coverage_detail_ak_id AND LKP_InceptionToDatePaidLossAmount.trans_date <= SRT_Sort_data.trans_date AND LKP_InceptionToDatePaidLossAmount.loss_master_calculation_id = SRT_Sort_data.loss_master_calculation_id\n\tWHERE ISNULL(LKP_LossMasterCalculationId) AND  \r\n(paid_loss_amt != 0 or outstanding_amt!=0)\n),\nEXP_Cleansing_Loss AS (\n\tSELECT\n\tloss_master_calculation_id AS i_loss_master_calculation_id,\n\tloss_master_run_date AS i_loss_master_run_date,\n\tprim_bus_class_code AS i_prim_bus_class_code,\n\tStateProvinceCode AS i_StateProvinceCode,\n\tRatingCounty AS i_RatingCounty,\n\tRatingCity AS i_RatingCity,\n\tclaim_loss_date AS i_claim_loss_date,\n\tsub_line_code AS i_sub_line_code,\n\tClassCode AS i_ClassCode,\n\tcause_of_loss AS i_cause_of_loss,\n\tRiskTerritory AS i_RiskTerritory,\n\tpol_eff_date AS i_pol_eff_date,\n\tpol_key AS i_pol_key,\n\tclaim_occurrence_num AS i_claim_occurrence_num,\n\tclaimant_num AS i_claimant_num,\n\tpaid_loss_amt AS i_paid_loss_amt,\n\toutstanding_amt AS i_outstanding_amt,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tRiskUnitGroup AS i_RiskUnitGroup,\n\tPolicySourceID AS i_PolicySourceID,\n\tRiskType AS i_RiskType,\n\tCoverageType AS i_CoverageType,\n\tStatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tpol_exp_date AS i_pol_exp_date,\n\ts3p_claim_num,\n\tout_CumulativeInceptiontoDatePaidLoss AS i_CumulativeInceptiontoDatePaidLoss,\n\tasl_num AS i_asl_num,\n\tclaim_coverage_detail_ak_id,\n\ti_loss_master_calculation_id AS o_loss_master_calculation_id,\n\ti_loss_master_run_date AS o_loss_master_run_date,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\t-- *INF*: RTRIM(LTRIM(i_RatingCounty))\n\tRTRIM(LTRIM(i_RatingCounty)) AS o_RatingCounty,\n\t-- *INF*: LTRIM(RTRIM(i_RatingCity))\n\tLTRIM(RTRIM(i_RatingCity)) AS o_RatingCity,\n\ti_claim_loss_date AS o_claim_loss_date,\n\t-- *INF*: RTRIM(LTRIM(i_sub_line_code))\n\tRTRIM(LTRIM(i_sub_line_code)) AS o_sub_line_code,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_cause_of_loss))\n\tRTRIM(LTRIM(i_cause_of_loss)) AS o_cause_of_loss,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: RTRIM(LTRIM(i_claim_occurrence_num))\n\tRTRIM(LTRIM(i_claim_occurrence_num)) AS o_claim_occurrence_num,\n\t-- *INF*: RTRIM(LTRIM(i_claimant_num))\n\tRTRIM(LTRIM(i_claimant_num)) AS o_claimant_num,\n\t-- *INF*: IIF(ISNULL(i_paid_loss_amt), 0, i_paid_loss_amt)\r\n\t-- \r\n\t-- ---i_paid_loss_amt\n\tIFF(i_paid_loss_amt IS NULL, 0, i_paid_loss_amt) AS o_PaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_outstanding_amt), 0, i_outstanding_amt)\r\n\t-- \r\n\t-- --i_outstanding_amt\n\tIFF(i_outstanding_amt IS NULL, 0, i_outstanding_amt) AS o_OutstandingLossAmount,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_PolicySourceID))\n\tLTRIM(RTRIM(i_PolicySourceID)) AS o_PolicySourceID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\t-- *INF*: LTRIM(RTRIM(i_CoverageType))\n\tLTRIM(RTRIM(i_CoverageType)) AS o_CoverageType,\n\ti_StatisticalCoverageAKID AS o_StatisticalCoverageAKID,\n\ti_pol_exp_date AS o_pol_exp_date,\n\t-- *INF*: RTRIM(LTRIM(s3p_claim_num))\n\tRTRIM(LTRIM(s3p_claim_num)) AS o_s3p_claim_num,\n\ti_CumulativeInceptiontoDatePaidLoss AS o_CumulativeInceptiontoDatePaidLoss,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tInsuranceLine AS i_InsuranceLine,\n\t-- *INF*: LTRIM(RTRIM(i_InsuranceLine))\n\tLTRIM(RTRIM(i_InsuranceLine)) AS o_InsuranceLine,\n\tpol_num,\n\tstatistical_code1 AS i_statistical_code1,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- isnull(i_statistical_code1),'N/A',\r\n\t-- ltrim(rtrim(i_statistical_code1))='','N/A',\r\n\t-- length(rtrim(ltrim(i_statistical_code1))) < 5,'N/A',\r\n\t-- i_statistical_code1)\n\tDECODE(\n\t    TRUE,\n\t    i_statistical_code1 IS NULL, 'N/A',\n\t    ltrim(rtrim(i_statistical_code1)) = '', 'N/A',\n\t    length(rtrim(ltrim(i_statistical_code1))) < 5, 'N/A',\n\t    i_statistical_code1\n\t) AS v_statistical_code1,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,3,1),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 3, 1), 'N/A') AS o_pms_const_code,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,4,2),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 4, 2), 'N/A') AS o_pms_iso_ppc_code,\n\tRatingCoverageAKID,\n\tRatingTerritoryCode\n\tFROM FIL_Exists_Loss\n),\nEXP_GetCoverageAKID AS (\n\tSELECT\n\tStatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tRatingCoverageAKID AS i_RatingCoverageAKID,\n\t-- *INF*: iif(i_StatisticalCoverageAKID=-1,i_RatingCoverageAKID,i_StatisticalCoverageAKID)\n\tIFF(i_StatisticalCoverageAKID = - 1, i_RatingCoverageAKID, i_StatisticalCoverageAKID) AS o_CoverageAKID\n\tFROM FIL_Exists_Loss\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tPackageModificationAdjustmentGroupCode,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tDeductibleAmount,\n\tin_CoverageAKID,\n\tCoverageAKID\n\tFROM (\n\t\tDECLARE @StartTime DATETIME\r\n\t\tDECLARE @EndTime DATETIME\r\n\t\t\r\n\t\tSET @StartTime = DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0) \r\n\t\tSET @EndTime = DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t--PROD-15129 added deductible amount in lookup\r\n\t\tSELECT distinct \r\n\t\tPremiumTransaction.PackageModificationAdjustmentGroupCode as PackageModificationAdjustmentGroupCode, \r\n\t\tPremiumTransaction.ConstructionCode as ConstructionCode, \r\n\t\tCoverageDetailCommercialProperty.IsoFireProtectionCode as IsoFireProtectionCode, \r\n\t\tLTRIM(RTRIM(BureauCode1)) as BureauCode1,\r\n\t\tLTRIM(RTRIM(BureauCode2)) as BureauCode2,\r\n\t\tLTRIM(RTRIM(BureauCode4)) as BureauCode4,\r\n\t\tPremiumTransaction.DeductibleAmount as Deductibleamount,\r\n\t\tPremiumTransaction.StatisticalCoverageAKID as CoverageAKID\r\n\t\tFROM \r\n\t\tloss_master_calculation with (nolock)\r\n\t\tinner join dbo.claim_transaction\r\n\t\ton claim_transaction.claim_trans_ak_id=loss_master_calculation.claim_trans_ak_id\r\n\t\tand loss_master_calculation.crrnt_snpsht_flag=1\r\n\t\tand claim_transaction.crrnt_snpsht_flag=1\r\n\t\tinner join dbo.claimant_coverage_detail\r\n\t\ton claimant_coverage_detail.claimant_cov_det_ak_id=claim_transaction.claimant_cov_det_ak_id\r\n\t\tand claimant_coverage_detail.crrnt_snpsht_flag=1\r\n\t\tinner join dbo.StatisticalCoverage\r\n\t\ton claimant_coverage_detail.StatisticalCoverageAKID=StatisticalCoverage.StatisticalCoverageAKID\r\n\t\tand  CONVERT (DATE,loss_master_calculation.loss_master_run_date)\r\n\t\tBETWEEN @StartTime AND @EndTime\r\n\t\tinner join PremiumTransaction with (nolock) on StatisticalCoverage.StatisticalCoverageAKID = PremiumTransaction.StatisticalCoverageAKID \r\n\t\tinner join BureauStatisticalCode with (nolock) on BureauStatisticalCode.PremiumTransactionAKID = PremiumTransaction.PremiumTransactionAKID\r\n\t\tleft join dbo.CoverageDetailCommercialProperty with (nolock)\r\n\t\ton CoverageDetailCommercialProperty.PremiumTransactionID=PremiumTransaction.PremiumTransactionID\r\n\t\tand CoverageDetailCommercialProperty.CurrentSnapshotFlag=1\r\n\t\tleft join claim_occurrence co with (nolock)\r\n\t\ton loss_master_calculation.claim_occurrence_ak_id=co.claim_occurrence_ak_id\r\n\t\tand co.claim_loss_date between PremiumTransaction.EffectiveDate and PremiumTransaction.ExpirationDate\r\n\t\tWHERE PremiumTransaction.SourceSystemID='PMS'\r\n\t\t\r\n\t\tunion all\r\n\t\tSELECT distinct \r\n\t\tPremiumTransaction.PackageModificationAdjustmentGroupCode as PackageModificationAdjustmentGroupCode, \r\n\t\tPremiumTransaction.ConstructionCode as ConstructionCode, \r\n\t\tCoverageDetailCommercialProperty.IsoFireProtectionCode as IsoFireProtectionCode, \r\n\t\tnull as BureauCode1,\r\n\t\tnull as BureauCode2,\r\n\t\tnull as BureauCode4,\r\n\t\tNULL as Deductibleamount,\r\n\t\tPremiumTransaction.RatingCoverageAKId as RatingCoverageAKId \r\n\t\tFROM \r\n\t\tloss_master_calculation with (nolock) inner join \r\n\t\tRatingCoverage with (nolock) on loss_master_calculation.RatingCoverageAKId = RatingCoverage.RatingCoverageAKId \r\n\t\tand CONVERT (DATE,loss_master_calculation.loss_master_run_date)\r\n\t\tBETWEEN\r\n\t\t@StartTime  AND @EndTime\r\n\t\tinner join PremiumTransaction with (nolock) \r\n\t\ton RatingCoverage.RatingCoverageAKId = PremiumTransaction.RatingCoverageAKId \r\n\t\tand RatingCoverage.EffectiveDate=PremiumTransaction.EffectiveDate\r\n\t\tleft join dbo.CoverageDetailCommercialProperty with (nolock)\r\n\t\ton CoverageDetailCommercialProperty.PremiumTransactionID=PremiumTransaction.PremiumTransactionID\r\n\t\tand CoverageDetailCommercialProperty.CurrentSnapshotFlag=1\r\n\t\tleft join claim_occurrence co with (nolock)\r\n\t\ton loss_master_calculation.claim_occurrence_ak_id=co.claim_occurrence_ak_id\r\n\t\tand co.claim_loss_date between PremiumTransaction.EffectiveDate and PremiumTransaction.ExpirationDate\r\n\t\tWHERE PremiumTransaction.SourceSystemID='DCT'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageAKID ORDER BY PackageModificationAdjustmentGroupCode) = 1\n),\nEXP_Transform_Prior_to_lookup AS (\n\tSELECT\n\tLKP_PremiumTransaction.PackageModificationAdjustmentGroupCode,\n\tFIL_Exists_Loss.StatisticalCoverageAKID AS in_StatisticalCoverageAKID,\n\t-- *INF*: IIF(in_StatisticalCoverageAKID=-1,'DCT','PMS')\n\tIFF(in_StatisticalCoverageAKID = - 1, 'DCT', 'PMS') AS out_SourceSystem\n\tFROM FIL_Exists_Loss\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nEXP_Reset_Pms_ConstCode_IsoPPC AS (\n\tSELECT\n\tEXP_Cleansing_Loss.o_TypeBureauCode AS i_TypeBureauCode,\n\tEXP_Cleansing_Loss.o_pms_const_code AS i_pms_const_code,\n\tEXP_Cleansing_Loss.o_pms_iso_ppc_code AS i_pms_iso_ppc_code,\n\tEXP_Transform_Prior_to_lookup.out_SourceSystem AS i_SourceSystem,\n\tLKP_PremiumTransaction.ConstructionCode AS lkp_ConstructionCode,\n\tLKP_PremiumTransaction.IsoFireProtectionCode AS lkp_IsoFireProtectionCode,\n\t-- *INF*: IIF(i_SourceSystem='PMS' and i_pms_const_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))='CF',i_pms_const_code,lkp_ConstructionCode)\n\tIFF(\n\t    i_SourceSystem = 'PMS' and i_pms_const_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode)) = 'CF',\n\t    i_pms_const_code,\n\t    lkp_ConstructionCode\n\t) AS v_const_code,\n\t-- *INF*: IIF(i_SourceSystem='PMS' and i_pms_iso_ppc_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))='CF',i_pms_iso_ppc_code,lkp_IsoFireProtectionCode)\n\tIFF(\n\t    i_SourceSystem = 'PMS'\n\t    and i_pms_iso_ppc_code != 'N/A'\n\t    and ltrim(rtrim(i_TypeBureauCode)) = 'CF',\n\t    i_pms_iso_ppc_code,\n\t    lkp_IsoFireProtectionCode\n\t) AS v_iso_code,\n\tv_const_code AS o_ConsturctionCode,\n\tv_iso_code AS o_IsoFireProtectionCode\n\tFROM EXP_Cleansing_Loss\n\t -- Manually join with EXP_Transform_Prior_to_lookup\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n),\nEXP_Logic_Loss AS (\n\tSELECT\n\tEXP_Cleansing_Loss.o_loss_master_calculation_id AS loss_master_calculation_id,\n\tEXP_Cleansing_Loss.claim_coverage_detail_ak_id,\n\t-1 AS PremiumMasterCalculationID,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS PremiumMasterRunDate,\n\tEXP_Cleansing_Loss.o_loss_master_run_date AS loss_master_run_date,\n\tEXP_Cleansing_Loss.o_pol_key AS pol_key,\n\tEXP_Cleansing_Loss.o_prim_bus_class_code AS prim_bus_class_code,\n\tEXP_Cleansing_Loss.o_StateProvinceCode AS StateProvinceCode,\n\tEXP_Cleansing_Loss.o_RatingCounty AS RatingCounty,\n\tEXP_Cleansing_Loss.o_RatingCity AS RatingCity,\n\tEXP_Cleansing_Loss.o_claim_loss_date AS claim_loss_date,\n\tEXP_Cleansing_Loss.o_sub_line_code AS sub_line_code,\n\t-- *INF*: DECODE(TRUE,sub_line_code='025','027',sub_line_code)\n\tDECODE(\n\t    TRUE,\n\t    sub_line_code = '025', '027',\n\t    sub_line_code\n\t) AS sub_line_code_out,\n\tEXP_Cleansing_Loss.o_ClassCode AS ClassCode,\n\t'N/A' AS PremiumMasterClassCode_out,\n\t-- *INF*: IIF(ISNULL(ClassCode) or LENGTH(ClassCode)=0,'N/A',ClassCode)\n\tIFF(ClassCode IS NULL or LENGTH(ClassCode) = 0, 'N/A', ClassCode) AS LossMasterClassCode_out,\n\tEXP_Cleansing_Loss.o_cause_of_loss AS cause_of_loss,\n\t-- *INF*: IIF(ISNULL(cause_of_loss) OR LENGTH(cause_of_loss)=0,'N/A',cause_of_loss)\n\tIFF(cause_of_loss IS NULL OR LENGTH(cause_of_loss) = 0, 'N/A', cause_of_loss) AS cause_of_loss_out,\n\tEXP_Cleansing_Loss.o_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode_out,\n\tEXP_Cleansing_Loss.o_pol_eff_date AS pol_eff_date,\n\tEXP_Cleansing_Loss.o_claim_occurrence_num AS i_claim_occurrence_num,\n\tEXP_Cleansing_Loss.o_s3p_claim_num AS i_s3p_claim_num,\n\tEXP_Cleansing_Loss.o_InsuranceLine AS i_InsuranceLine,\n\tEXP_Cleansing_Loss.pol_num AS i_pol_num,\n\tEXP_Cleansing_Loss.o_claimant_num AS claimant_num,\n\t-- *INF*: IIF(ISNULL(i_claim_occurrence_num) OR IS_SPACES(i_claim_occurrence_num) OR LENGTH(i_claim_occurrence_num)=0 OR i_claim_occurrence_num='N/A' OR IS_NUMBER(i_claim_occurrence_num)=0, 0, TO_INTEGER(i_claim_occurrence_num))\n\tIFF(\n\t    i_claim_occurrence_num IS NULL\n\t    or LENGTH(i_claim_occurrence_num)>0\n\t    and TRIM(i_claim_occurrence_num)=''\n\t    or LENGTH(i_claim_occurrence_num) = 0\n\t    or i_claim_occurrence_num = 'N/A'\n\t    or REGEXP_LIKE(i_claim_occurrence_num, '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(i_claim_occurrence_num AS INTEGER)\n\t) AS v_claim_occurrence_num,\n\t-- *INF*: LTRIM(RTRIM(i_pol_num))||TO_CHAR(claim_loss_date,'YYMMDD') ||SUBSTR(i_claim_occurrence_num,2,2)\r\n\t-- \r\n\t-- --DECODE(TRUE,\r\n\t-- --i_InsuranceLine='CF',\r\n\t-- --IIF(TRUNC(pol_eff_date, 'MM')  <= TO_DATE('2003-10', 'YYYY-MM'), i_pol_num|| TO_CHAR(ADD_TO_DATE(claim_loss_date, 'DD', v_claim_occurrence_num), 'YYYYMMDD'), i_s3p_claim_num),\r\n\t-- --i_InsuranceLine='CR',\r\n\t-- --IIF(TRUNC(pol_eff_date, 'MM')  <= TO_DATE('2003-10', 'YYYY-MM'), i_pol_num|| TO_CHAR(ADD_TO_DATE(claim_loss_date, 'DD', v_claim_occurrence_num), 'YYYYMMDD'), i_s3p_claim_num)\r\n\t-- --i_pol_num || TO_CHAR(claim_loss_date,'YYMMDD') || SUBSTR(i_claim_occurrence_num,2,2)\r\n\t-- --)\n\tLTRIM(RTRIM(i_pol_num)) || TO_CHAR(claim_loss_date, 'YYMMDD') || SUBSTR(i_claim_occurrence_num, 2, 2) AS v_ClaimNumber,\n\t-- *INF*: RTRIM(LTRIM(v_ClaimNumber))\r\n\t-- --SUBSTR(pol_key,4,7)||TO_CHAR(claim_loss_date,'YYMMDD')||SUBSTR(i_claim_occurrence_num,2,2)\r\n\t-- \r\n\t-- --SUBSTR(pol_key,4,7)||SUBSTR(GET_DATE_PART(claim_loss_date,'Y'),-2,2)||LPAD(GET_DATE_PART(claim_loss_date,'MM'),2,'0')||LPAD(GET_DATE_PART(claim_loss_date,'D'),2,'0')||SUBSTR(claim_occurrence_num,2,2)\n\tRTRIM(LTRIM(v_ClaimNumber)) AS ClaimNum,\n\t0.00 AS PremiumMasterPremium,\n\tEXP_Cleansing_Loss.o_PaidLossAmount AS PaidLossAmount,\n\tEXP_Cleansing_Loss.o_OutstandingLossAmount AS OutstandingLossAmount,\n\tEXP_Cleansing_Loss.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_Cleansing_Loss.o_RiskUnitGroup AS RiskUnitGroup,\n\tEXP_Cleansing_Loss.o_PolicySourceID AS PolicySourceID,\n\tEXP_Cleansing_Loss.o_RiskType AS RiskType,\n\tEXP_Cleansing_Loss.o_CoverageType AS CoverageType,\n\tLKP_PremiumTransaction.DeductibleAmount,\n\t-- *INF*: IIF(RatingCoverageAKID<>-1 and IN(sub_line_code,'020','027','120'),:LKP.LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL(pol_key,RatingCoverageAKID),DeductibleAmount)\n\tIFF(\n\t    RatingCoverageAKID <> - 1 and sub_line_code IN ('020','027','120'),\n\t    LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_pol_key_RatingCoverageAKID.CoverageDeductibleValue,\n\t    DeductibleAmount\n\t) AS v_Deductible_Property_WindORHail,\n\t-- *INF*: IIF(RatingCoverageAKID<>-1 and IN(sub_line_code,'020','027','120','010','015','016','017','018','029','035','045','055','110'),:LKP.LKP_DEDUCTIBLE_PROPERTY(pol_key,RatingCoverageAKID),DeductibleAmount)\n\tIFF(\n\t    RatingCoverageAKID <> - 1\n\t    and sub_line_code IN ('020','027','120','010','015','016','017','018','029','035','045','055','110'),\n\t    LKP_DEDUCTIBLE_PROPERTY_pol_key_RatingCoverageAKID.CoverageDeductibleValue,\n\t    DeductibleAmount\n\t) AS v_Deductible_Property,\n\t-- *INF*: DECODE(TRUE, IN(sub_line_code,'070','090','170','190','930','931'),NULL, ISNULL(v_Deductible_Property_WindORHail),v_Deductible_Property, v_Deductible_Property_WindORHail)\n\tDECODE(\n\t    TRUE,\n\t    sub_line_code IN ('070','090','170','190','930','931'), NULL,\n\t    v_Deductible_Property_WindORHail IS NULL, v_Deductible_Property,\n\t    v_Deductible_Property_WindORHail\n\t) AS v_Deductible_DCT,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- RatingCoverageAKID=-1 and (LENGTH(DeductibleAmount)=0 OR ISNULL(DeductibleAmount) OR DeductibleAmount='FullCoverage'),'0', RatingCoverageAKID=-1,DeductibleAmount, \r\n\t-- v_Deductible_DCT)  \r\n\t-- \r\n\t-- --IIF(LENGTH(DeductibleAmount)=0 OR ISNULL(DeductibleAmount) OR DeductibleAmount='FullCoverage','0',DeductibleAmount)\n\tDECODE(\n\t    TRUE,\n\t    RatingCoverageAKID = - 1 and (LENGTH(DeductibleAmount) = 0 OR DeductibleAmount IS NULL OR DeductibleAmount = 'FullCoverage'), '0',\n\t    RatingCoverageAKID = - 1, DeductibleAmount,\n\t    v_Deductible_DCT\n\t) AS DeductibleAmount_out,\n\tLKP_PremiumTransaction.BureauCode1,\n\tLKP_PremiumTransaction.BureauCode2,\n\tLKP_PremiumTransaction.BureauCode4,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_ConsturctionCode AS in_ConstructionCode,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\t-- *INF*: DECODE(TRUE,PolicySourceID='PMS',\r\n\t-- IIF(ISNULL(BureauCode1) OR LENGTH(BureauCode1)=0 OR(TypeBureauCode  != 'CR' and TypeBureauCode  !='BT' and TypeBureauCode != 'FT' and TypeBureauCode != 'CF'),'N/A',BureauCode1) ,\r\n\t-- IIF( ((INSTR(RiskType,'BIEE')>0 or INSTR(RiskType, 'TIME') >0) AND  NOT IN(CoverageType, 'TerrorismRisk', 'TerrorismFireOnly')) OR RiskType='N/A', :LKP.LKP_SUPREFERENCEDATA(CoverageType),\r\n\t-- :LKP.LKP_SUPREFERENCEDATA(RiskType))\r\n\t-- )\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    PolicySourceID = 'PMS', IFF(\n\t        BureauCode1 IS NULL\n\t        or LENGTH(BureauCode1) = 0\n\t        or (TypeBureauCode != 'CR'\n\t        and TypeBureauCode != 'BT'\n\t        and TypeBureauCode != 'FT'\n\t        and TypeBureauCode != 'CF'),\n\t        'N/A',\n\t        BureauCode1\n\t    ),\n\t    IFF(\n\t        ((REGEXP_INSTR(RiskType, 'BIEE') > 0\n\t        or REGEXP_INSTR(RiskType, 'TIME') > 0)\n\t        and NOT CoverageType IN ('TerrorismRisk','TerrorismFireOnly'))\n\t        or RiskType = 'N/A',\n\t        LKP_SUPREFERENCEDATA_CoverageType.ToCode,\n\t        LKP_SUPREFERENCEDATA_RiskType.ToCode\n\t    )\n\t) AS v_CoverageCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(v_CoverageCode),'N/A',\r\n\t-- v_CoverageCode<>'N/A',LPAD(v_CoverageCode,2,'0'),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    v_CoverageCode IS NULL, 'N/A',\n\t    v_CoverageCode <> 'N/A', LPAD(v_CoverageCode, 2, '0'),\n\t    'N/A'\n\t) AS o_CoverageCode,\n\t-- *INF*: :LKP.LKP_SUPCONSTRUCTIONCODE(LTRIM(RTRIM(in_ConstructionCode)))\n\tLKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode.StandardConstructionCodeDescription AS v_ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_ConstructionCode) AS ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode) AS IsoFireProtectionCode,\n\tEXP_Transform_Prior_to_lookup.PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_PackageModificationAdjustmentGroupCode) AS PackageModificationAdjustmentGroupCode,\n\tEXP_Cleansing_Loss.o_pol_exp_date AS pol_exp_date,\n\tEXP_Cleansing_Loss.o_CumulativeInceptiontoDatePaidLoss AS CumulativeInceptiontoDatePaidLoss,\n\tEXP_Cleansing_Loss.o_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\t'N/A' AS o_LocationNumber,\n\t'N/A' AS o_BuildingNumber,\n\tEXP_Cleansing_Loss.RatingCoverageAKID,\n\tEXP_Cleansing_Loss.RatingTerritoryCode\n\tFROM EXP_Cleansing_Loss\n\t -- Manually join with EXP_Reset_Pms_ConstCode_IsoPPC\n\t -- Manually join with EXP_Transform_Prior_to_lookup\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.CoverageAKID = EXP_GetCoverageAKID.o_CoverageAKID\n\tLEFT JOIN LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_pol_key_RatingCoverageAKID\n\tON LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_pol_key_RatingCoverageAKID.PolicyKey = pol_key\n\tAND LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_pol_key_RatingCoverageAKID.RatingCoverageAKId = RatingCoverageAKID\n\n\tLEFT JOIN LKP_DEDUCTIBLE_PROPERTY LKP_DEDUCTIBLE_PROPERTY_pol_key_RatingCoverageAKID\n\tON LKP_DEDUCTIBLE_PROPERTY_pol_key_RatingCoverageAKID.PolicyKey = pol_key\n\tAND LKP_DEDUCTIBLE_PROPERTY_pol_key_RatingCoverageAKID.RatingCoverageAKId = RatingCoverageAKID\n\n\tLEFT JOIN LKP_SUPREFERENCEDATA LKP_SUPREFERENCEDATA_CoverageType\n\tON LKP_SUPREFERENCEDATA_CoverageType.FromCode = CoverageType\n\n\tLEFT JOIN LKP_SUPREFERENCEDATA LKP_SUPREFERENCEDATA_RiskType\n\tON LKP_SUPREFERENCEDATA_RiskType.FromCode = RiskType\n\n\tLEFT JOIN LKP_SUPCONSTRUCTIONCODE LKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode\n\tON LKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode.ConstructionCode = LTRIM(RTRIM(in_ConstructionCode))\n\n),\nSQ_Premium AS (\n\tDECLARE @StartTime DATETIME\r\n\tDECLARE @EndTime DATETIME\r\n\t\r\n\tSET @StartTime = DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0) \r\n\tSET @EndTime = DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\r\n\t\r\n\t--PMS\r\n\tSELECT distinct\r\n\tPMC.PremiumMasterCalculationID,\r\n\tCD.clndr_date,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tRL.RatingCounty,\r\n\tRL.RatingCity,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tSC.ClassCode,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPMC.PremiumMasterPremium,\r\n\tPMC.PremiumMasterTypeBureauCode TypeBureauCode,\r\n\tSC.RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\t'N/A' AS RiskType,\r\n\t'N/A' AS CoverageType,\r\n\tPT.DeductibleAmount,\r\n\tcase when PC.TypeBureauCode='CF' and PT.ConstructionCode='N/A' then bsc.BureauCode3 else PT.ConstructionCode end as ConstructionCode, \r\n\tISNULL(CASE\r\n\tWHEN PC.TypeBureauCode='CF' THEN bsc.BureauCode4 ELSE CDCP.IsoFireProtectionCode\r\n\tEND, 'N/A') as IsoFireProtectionCode,\r\n\tPT.PackageModificationAdjustmentGroupCode,\r\n\tbsc.BureauCode1,\r\n\tbsc.BureauCode2,\r\n\tbsc.BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\tASL.asl_num,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tRL.Locationunitnumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\tSC.SubLocationUnitNumber as BuildingNumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\t'PMS' as DataType,\r\n\tPMC.PolicyKey,\r\n\tPMC.RatingCoverageAkid,\r\n\t'N/A' as RatingTerritoryCode\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact PMF with (nolock)\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL with (nolock)\r\n\ton PMF.AnnualStatementLineDimId=ASL.asl_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD with (nolock) \r\n\tON PMF.PremiumMasterRunDateID = CD.clndr_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC with (nolock)\r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT with (nolock)\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialProperty CDCP with (nolock)\r\n\ton CDCP.PremiumTransactionID=PT.PremiumTransactionID AND CDCP.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC with (nolock)\r\n\ton SC.StatisticalCoverageAKID=PT.StatisticalCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC with (nolock)\r\n\ton PC.PolicyCoverageAKID=SC.PolicyCoverageAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL with (nolock)\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_ak_id=RL.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG with (nolock)\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.BureauStatisticalCode bsc with (nolock)\r\n\ton bsc.PremiumTransactionAKID = PT.PremiumTransactionAKID \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC with (nolock)\r\n\ton IRC.InsuranceReferenceCoverageDimId=PMF.InsuranceReferenceCoverageDimId\r\n\tand NOT (IRC.InsuranceLineCode='CF' and IRC.CoverageCode='BOILER - BRK')\r\n\twhere CD.clndr_date BETWEEN @StartTime AND @EndTime\r\n\tAND PMC.PremiumMasterTypeBureauCode IN ('CF','CR','BT','FT') \r\n\tAND PT.SourceSystemID='PMS'\r\n\tAND ISG.InsuranceSegmentCode IN ('1','2')\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48')\r\n\tAND PMC.PremiumMasterPremium <>0\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND PMC.PremiumMasterReasonAmendedCode not in ('CWO', 'COL') \r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\r\n\t\r\n\tUNION ALL\r\n\t--DCT\r\n\tSELECT distinct\r\n\tPMC.PremiumMasterCalculationID,\r\n\tCD.clndr_date,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tRL.RatingCounty,\r\n\tRL.RatingCity,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tRC.ClassCode,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPMC.PremiumMasterPremium,\r\n\tPMC.PremiumMasterTypeBureauCode TypeBureauCode,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\tRC.RiskType,\r\n\tRC.CoverageType,\r\n\tNULL as DeductibleAmount,\r\n\tPT.ConstructionCode,\r\n\tISNULL(CDCP.IsoFireProtectionCode,'N/A') as IsoFireProtectionCode,\r\n\tPT.PackageModificationAdjustmentGroupCode,\r\n\t'N/A' AS BureauCode1,\r\n\t'N/A' AS BureauCode2,\r\n\t'N/A' AS BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\tASL.asl_num,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tRL.Locationunitnumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\tRC.sublocationunitnumber as BuildingNumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\t'DCT' as DataType,\r\n\tPMC.PolicyKey,\r\n\tPMC.RatingCoverageAkid,\r\n\tISNULL(PTRR.RatingTerritoryCode,'N/A') as RatingTerritoryCode\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact PMF with (nolock)\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL with (nolock)\r\n\ton PMF.AnnualStatementLineDimId=ASL.asl_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD with (nolock) \r\n\tON PMF.PremiumMasterRunDateID = CD.clndr_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC with (nolock)\r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT with (nolock)\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID\r\n\tand PMC.CurrentSnapshotFlag=1\r\n\tand PT.CurrentSnapshotFlag=1\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialProperty CDCP with (nolock)\r\n\ton CDCP.PremiumTransactionID=PT.PremiumTransactionID AND CDCP.CurrentSnapshotFlag=1\r\n\tjoin  @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC with (nolock)\r\n\ton PMC.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand RC.EffectiveDate=PT.EffectiveDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC with (nolock)\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL with (nolock)\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_ak_id=PMC.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG with (nolock)\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC with (nolock)\r\n\ton IRC.InsuranceReferenceCoverageDimId=PMF.InsuranceReferenceCoverageDimId\r\n\tand NOT (IRC.InsuranceLineCode='CF' and IRC.CoverageCode='BOILER - BRK')\r\n\tleft join PremiumTransactionRatingRisk PTRR with (nolock) \r\n\ton PTRR.PremiumTransactionID=PT.PremiumTransactionID\r\n\twhere \r\n\tCD.clndr_date between @StartTime AND @EndTime \r\n\tAND PC.Insuranceline in ('SBOPProperty','Crime','Property')\r\n\tAND PT.SourceSystemID='DCT'\r\n\tAND ISG.InsuranceSegmentCode IN ('1','2')\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48')\r\n\tAND PMC.PremiumMasterPremium <>0\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND RC.CoverageType NOT IN('DataCompromise','EquipmentBreakdown','RatingGroup','MineSubsidence')\r\n\tAND RC.SublineCode <> '920'\r\n\t--AND NOT EXISTS (SELECT 1 FROM WorkBlanketPremiumBreakOut WHERE WorkBlanketPremiumBreakOut.BlanketPremiumTransactionAKId=PT.PremiumTransactionAKId)\r\n\tand irc.CoverageDescriptionNOTIN( 'Blanket Building and Contents')\r\n\tAND PMC.PremiumMasterReasonAmendedCode not in ('CWO', 'CWB') \r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\r\n\t\r\n\tUNION ALL\r\n\t--BreakOut\r\n\tSELECT distinct\r\n\tPMC.PremiumMasterCalculationID,\r\n\tCONVERT(DATE,PMC.PremiumMasterRunDate) as PremiumMasterRunDate,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tRL.RatingCounty,\r\n\tRL.RatingCity,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tRC.ClassCode,\r\n\tRL.RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tpmf.PremiumMasterPremium,\r\n\t--BreakOut.BreakOutPremium,\r\n\tPMC.PremiumMasterTypeBureauCode,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\tRC.RiskType,\r\n\tRC.CoverageType,\r\n\tNULL DeductibleAmount,\r\n\tPT.ConstructionCode,\r\n\tISNULL(CDCP.IsoFireProtectionCode,'N/A') as IsoFireProtectionCode,\r\n\tPT.PackageModificationAdjustmentGroupCode,\r\n\t'N/A' AS BureauCode1,\r\n\t'N/A' AS BureauCode2,\r\n\t'N/A' AS BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\tASL.asl_num,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tRL.Locationunitnumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\tRC.sublocationunitnumber as BuildingNumber,\r\n\t--prod-12020 adding this for LocationNumber\r\n\t'Blanket' as DataType,\r\n\tPMC.PolicyKey,\r\n\tPMC.RatingCoverageAkid,\r\n\tISNULL(PTRR.RatingTerritoryCode,'N/A') as RatingTerritoryCode\r\n\tfrom --WorkBlanketPremiumBreakOut BreakOut\r\n\t--join \r\n\tPremiumTransaction PT with (nolock)\r\n\t--on PT.PremiumTransactionAKID=BreakOut.PremiumTransactionAKID\r\n\tjoin PremiumMasterCalculation PMC with (nolock)\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID \r\n\tand PMC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.dbo.premiummasterfact PMF \r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\t--join AnnualStatementLine asl\r\n\t--on BreakOut.AnnualStatementLineId=asl.AnnualStatementLineId \r\n\tjoin  @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.dbo.asl_dim asl\r\n\ton pmf.AnnualStatementLineDimID=asl.asl_dim_id                 \r\n\tleft join CoverageDetailCommercialProperty CDCP with (nolock)\r\n\ton CDCP.PremiumTransactionID=PT.PremiumTransactionID AND CDCP.CurrentSnapshotFlag=1\r\n\tjoin RatingCoverage RC with (nolock)\r\n\ton PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand RC.EffectiveDate=PT.EffectiveDate \r\n\tjoin PolicyCoverage PC with (nolock)\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin RiskLocation RL with (nolock)\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1\r\n\tjoin V2.policy POL with (nolock)\r\n\ton POL.pol_ak_id=PMC.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin InsuranceSegment ISG with (nolock)\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.dbo.InsuranceReferenceCoverageDim irc\r\n\ton pmf.InsuranceReferenceCoverageDimId=irc.InsuranceReferenceCoverageDimId\r\n\tleft join PremiumTransactionRatingRisk PTRR with (nolock) \r\n\ton PTRR.PremiumTransactionID=PT.PremiumTransactionID\r\n\twhere CONVERT(DATE,PMC.PremiumMasterRunDate) between @StartTime AND @EndTime\r\n\tAND \r\n\tPC.Insuranceline in ('SBOPProperty','Crime','Property')\r\n\tAND PT.SourceSystemID='DCT'\r\n\tAND ISG.InsuranceSegmentCode IN ('1','2')\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48')\r\n\t--AND BreakOut.BreakOutPremium <>0\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND PMC.PremiumMasterReasonAmendedCode NOT IN ('CWO', 'CWB')\r\n\tAND RC.CoverageType IN('RatingGroup')\r\n\tAND RC.SublineCode <> '920'\r\n\tand asl.asl_num_descriptIN( 'FIRE','ALLIED LINES','EARTHQUAKE')\r\n\tand irc.CoverageDescriptionIN( 'Blanket Building and Contents') \r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\n),\nLKP_ISSWorkTable_Premium AS (\n\tSELECT\n\tEDWPremiumMasterCalculationPKId\n\tFROM (\n\t\tSELECT \n\t\t\tEDWPremiumMasterCalculationPKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract\n\t\tWHERE CONVERT (DATE,PremiumMasterRunDate)\r\n\t\tbetween \r\n\t\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)  \r\n\t\t AND\r\n\t\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))\r\n\t\t and EDWPremiumMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWPremiumMasterCalculationPKId ORDER BY EDWPremiumMasterCalculationPKId) = 1\n),\nFIL_Exists_Premium AS (\n\tSELECT\n\tLKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId AS LKP_PremiumMasterCalculationID, \n\tSQ_Premium.PremiumMasterCalculationID, \n\tSQ_Premium.PremiumMasterRunDate, \n\tSQ_Premium.pol_key, \n\tSQ_Premium.prim_bus_class_code, \n\tSQ_Premium.StateProvinceCode, \n\tSQ_Premium.RatingCounty, \n\tSQ_Premium.RatingCity, \n\tSQ_Premium.PremiumTransactionBookedDate, \n\tSQ_Premium.PremiumMasterSubLine, \n\tSQ_Premium.ClassCode, \n\tSQ_Premium.RiskTerritory, \n\tSQ_Premium.pol_eff_date, \n\tSQ_Premium.PremiumMasterPremium, \n\tSQ_Premium.TypeBureauCode, \n\tSQ_Premium.RiskUnitGroup, \n\tSQ_Premium.SourceSystemID, \n\tSQ_Premium.PremiumMasterTransactionCode, \n\tSQ_Premium.PremiumMasterReasonAmendedCode, \n\tSQ_Premium.RiskType, \n\tSQ_Premium.CoverageType, \n\tSQ_Premium.DeductibleAmount, \n\tSQ_Premium.ConstructionCode, \n\tSQ_Premium.IsoFireProtectionCode, \n\tSQ_Premium.PackageModificationAdjustmentGroupCode, \n\tSQ_Premium.BureauCode1, \n\tSQ_Premium.BureauCode2, \n\tSQ_Premium.BureauCode4, \n\tSQ_Premium.pol_exp_date, \n\tSQ_Premium.asl_num, \n\tSQ_Premium.PremiumTransactionEffectiveDate, \n\tSQ_Premium.DataType, \n\tSQ_Premium.LocationNumber, \n\tSQ_Premium.BuildingNumber, \n\tSQ_Premium.PolicyKey, \n\tSQ_Premium.RatingCoverageAKId, \n\tSQ_Premium.RatingTerritoryCode\n\tFROM SQ_Premium\n\tLEFT JOIN LKP_ISSWorkTable_Premium\n\tON LKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId = SQ_Premium.PremiumMasterCalculationID\n\tWHERE ISNULL(LKP_PremiumMasterCalculationID)  OR  IN(PremiumMasterReasonAmendedCode, 'COL' , 'CWO')\n),\nEXP_Cleansing_Premium AS (\n\tSELECT\n\tPremiumMasterCalculationID AS i_PremiumMasterCalculationID,\n\tPremiumMasterRunDate AS i_PremiumMasterRunDate,\n\tpol_key AS i_pol_key,\n\tprim_bus_class_code AS i_prim_bus_class_code,\n\tStateProvinceCode AS i_StateProvinceCode,\n\tRatingCounty AS i_RatingCounty,\n\tRatingCity AS i_RatingCity,\n\tPremiumTransactionBookedDate AS i_PremiumTransactionBookedDate,\n\tPremiumMasterSubLine AS i_PremiumMasterSubLine,\n\tClassCode AS i_ClassCode,\n\tRiskTerritory AS i_RiskTerritory,\n\tpol_eff_date AS i_pol_eff_date,\n\tPremiumMasterPremium AS i_PremiumMasterPremium,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tRiskUnitGroup AS i_RiskUnitGroup,\n\tSourceSystemID AS i_SourceSystemID,\n\tPremiumMasterTransactionCode AS i_PremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode AS i_PremiumMasterReasonAmendedCode,\n\tRiskType AS i_RiskType,\n\tCoverageType AS i_CoverageType,\n\tDeductibleAmount AS i_DeductibleAmount,\n\tConstructionCode AS i_ConstructionCode,\n\tIsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tPackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tBureauCode1 AS i_BureauCode1,\n\tpol_exp_date AS i_pol_exp_date,\n\tasl_num AS i_asl_num,\n\ti_PremiumMasterCalculationID AS o_PremiumMasterCalculationID,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\t-- *INF*: RTRIM(LTRIM(i_RatingCounty))\n\tRTRIM(LTRIM(i_RatingCounty)) AS o_RatingCounty,\n\t-- *INF*: LTRIM(RTRIM(i_RatingCity))\n\tLTRIM(RTRIM(i_RatingCity)) AS o_RatingCity,\n\ti_PremiumTransactionBookedDate AS o_PremiumTransactionBookedDate,\n\t-- *INF*: RTRIM(LTRIM(i_PremiumMasterSubLine))\n\tRTRIM(LTRIM(i_PremiumMasterSubLine)) AS o_PremiumMasterSubLine,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: IIF( IN(i_PremiumMasterTransactionCode, '10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67') AND  NOT IN(i_PremiumMasterReasonAmendedCode, 'COL' , 'CWO'), i_PremiumMasterPremium, 0)\n\tIFF(\n\t    i_PremiumMasterTransactionCode IN ('10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67')\n\t    and NOT i_PremiumMasterReasonAmendedCode IN ('COL','CWO'),\n\t    i_PremiumMasterPremium,\n\t    0\n\t) AS o_PremiumMasterPremium,\n\t-- *INF*: RTRIM(LTRIM(i_TypeBureauCode))\n\tRTRIM(LTRIM(i_TypeBureauCode)) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_SourceSystemID))\n\tLTRIM(RTRIM(i_SourceSystemID)) AS o_SourceSystemID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\t-- *INF*: LTRIM(RTRIM(i_CoverageType))\n\tLTRIM(RTRIM(i_CoverageType)) AS o_CoverageType,\n\t-- *INF*: LTRIM(RTRIM(i_DeductibleAmount))\n\tLTRIM(RTRIM(i_DeductibleAmount)) AS o_DeductibleAmount,\n\t-- *INF*: RTRIM(LTRIM(i_ConstructionCode))\n\tRTRIM(LTRIM(i_ConstructionCode)) AS o_ConstructionCode,\n\t-- *INF*: RTRIM(LTRIM(i_IsoFireProtectionCode))\n\tRTRIM(LTRIM(i_IsoFireProtectionCode)) AS o_IsoFireProtectionCode,\n\t-- *INF*: LTRIM(RTRIM(i_PackageModificationAdjustmentGroupCode))\n\tLTRIM(RTRIM(i_PackageModificationAdjustmentGroupCode)) AS o_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: RTRIM(LTRIM(i_BureauCode1))\n\tRTRIM(LTRIM(i_BureauCode1)) AS o_BureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\ti_pol_exp_date AS o_pol_exp_date,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tPremiumTransactionEffectiveDate,\n\tDataType,\n\tLocationNumber,\n\tBuildingNumber,\n\tPolicyKey,\n\tRatingCoverageAKId,\n\tRatingTerritoryCode\n\tFROM FIL_Exists_Premium\n),\nEXP_Logic_Premium AS (\n\tSELECT\n\t-1 AS LossMasterCalculationId,\n\to_PremiumMasterCalculationID AS PremiumMasterCalculationID,\n\to_PremiumMasterRunDate AS PremiumMasterRunDate,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS loss_master_run_date,\n\to_pol_key AS pol_key,\n\to_prim_bus_class_code AS prim_bus_class_code,\n\to_StateProvinceCode AS StateProvinceCode,\n\to_RatingCounty AS RatingCounty,\n\to_RatingCity AS RatingCity,\n\to_PremiumTransactionBookedDate AS PremiumTransactionBookedDate,\n\to_PremiumMasterSubLine AS PremiumMasterSubLine,\n\t-- *INF*: DECODE(TRUE,PremiumMasterSubLine='025','027',PremiumMasterSubLine)\n\tDECODE(\n\t    TRUE,\n\t    PremiumMasterSubLine = '025', '027',\n\t    PremiumMasterSubLine\n\t) AS sub_line_code_out,\n\to_ClassCode AS ClassCode,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR LENGTH(ClassCode)=0,'N/A',ClassCode)\n\tIFF(ClassCode IS NULL OR LENGTH(ClassCode) = 0, 'N/A', ClassCode) AS PremiumMasterClassCode,\n\t'N/A' AS LossMasterClassCode,\n\t'N/A' AS Cause_of_Loss,\n\to_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode,\n\to_pol_eff_date AS pol_eff_date,\n\t'N/A' AS ClaimNum,\n\t'N/A' AS ClaimantNum,\n\to_PremiumMasterPremium AS PremiumMasterPremium,\n\t-- *INF*: ROUND(PremiumMasterPremium,2)\n\tROUND(PremiumMasterPremium, 2) AS PremiumMasterPremium_out,\n\t0.00 AS PaidLossAmt,\n\t0.00 AS OutstandingAmt,\n\to_TypeBureauCode AS TypeBureauCode,\n\to_RiskUnitGroup AS RiskUnitGroup,\n\to_SourceSystemID AS SourceSystemID,\n\to_RiskType AS RiskType,\n\to_CoverageType AS CoverageType,\n\to_DeductibleAmount AS DeductibleAmount,\n\t-- *INF*: IIF(RatingCoverageAKId<>-1 and IN(PremiumMasterSubLine,'020','027','120'),:LKP.LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL(PolicyKey,RatingCoverageAKId),DeductibleAmount)\n\tIFF(\n\t    RatingCoverageAKId <> - 1 and PremiumMasterSubLine IN ('020','027','120'),\n\t    LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_PolicyKey_RatingCoverageAKId.CoverageDeductibleValue,\n\t    DeductibleAmount\n\t) AS v_Deductible_Property_WindORHail,\n\t-- *INF*: IIF(RatingCoverageAKId<>-1 and IN(PremiumMasterSubLine,'020','027','120','010','015','016','017','018','029','035','045','055','110'),:LKP.LKP_DEDUCTIBLE_PROPERTY(PolicyKey,RatingCoverageAKId),DeductibleAmount)\n\tIFF(\n\t    RatingCoverageAKId <> - 1\n\t    and PremiumMasterSubLine IN ('020','027','120','010','015','016','017','018','029','035','045','055','110'),\n\t    LKP_DEDUCTIBLE_PROPERTY_PolicyKey_RatingCoverageAKId.CoverageDeductibleValue,\n\t    DeductibleAmount\n\t) AS v_Deductible_Property,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(PremiumMasterSubLine,'070','090','170','190','930','931'),NULL,\r\n\t-- ISNULL(v_Deductible_Property_WindORHail),v_Deductible_Property,\r\n\t-- v_Deductible_Property_WindORHail)\n\tDECODE(\n\t    TRUE,\n\t    PremiumMasterSubLine IN ('070','090','170','190','930','931'), NULL,\n\t    v_Deductible_Property_WindORHail IS NULL, v_Deductible_Property,\n\t    v_Deductible_Property_WindORHail\n\t) AS v_Deductible_DCT,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- RatingCoverageAKId=-1 and (LENGTH(DeductibleAmount)=0 OR ISNULL(DeductibleAmount) OR DeductibleAmount='FullCoverage'),'0',\r\n\t-- RatingCoverageAKId=-1,DeductibleAmount,\r\n\t-- v_Deductible_DCT)\r\n\t-- \r\n\t-- --IIF(LENGTH(DeductibleAmount)=0 OR ISNULL(DeductibleAmount) OR DeductibleAmount='FullCoverage','0',DeductibleAmount)\n\tDECODE(\n\t    TRUE,\n\t    RatingCoverageAKId = - 1 and (LENGTH(DeductibleAmount) = 0 OR DeductibleAmount IS NULL OR DeductibleAmount = 'FullCoverage'), '0',\n\t    RatingCoverageAKId = - 1, DeductibleAmount,\n\t    v_Deductible_DCT\n\t) AS DeductibleAmount_out,\n\to_BureauCode1 AS BureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- SourceSystemID='PMS',IIF(ISNULL(BureauCode1) OR LENGTH(BureauCode1)=0 OR(TypeBureauCode  != 'CR' and TypeBureauCode  !='BT' and TypeBureauCode != 'FT' and TypeBureauCode != 'CF'),'N/A',BureauCode1) ,\r\n\t-- ((INSTR(RiskType,'BIEE')>0  OR  INSTR(RiskType,'TIME')>0) AND  NOT IN(CoverageType, 'TerrorismRisk', 'TerrorismFireOnly')) OR RiskType='N/A',\r\n\t-- :LKP.LKP_SUPREFERENCEDATA(CoverageType),\r\n\t-- :LKP.LKP_SUPREFERENCEDATA(RiskType)\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    SourceSystemID = 'PMS', IFF(\n\t        BureauCode1 IS NULL\n\t        or LENGTH(BureauCode1) = 0\n\t        or (TypeBureauCode != 'CR'\n\t        and TypeBureauCode != 'BT'\n\t        and TypeBureauCode != 'FT'\n\t        and TypeBureauCode != 'CF'),\n\t        'N/A',\n\t        BureauCode1\n\t    ),\n\t    ((REGEXP_INSTR(RiskType, 'BIEE') > 0 OR REGEXP_INSTR(RiskType, 'TIME') > 0) AND NOT CoverageType IN ('TerrorismRisk','TerrorismFireOnly')) OR RiskType = 'N/A', LKP_SUPREFERENCEDATA_CoverageType.ToCode,\n\t    LKP_SUPREFERENCEDATA_RiskType.ToCode\n\t) AS v_CoverageCode,\n\tDataType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DataType='Blanket','03',\r\n\t-- ISNULL(v_CoverageCode),'N/A',\r\n\t-- v_CoverageCode<>'N/A',LPAD(v_CoverageCode,2,'0'),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    DataType = 'Blanket', '03',\n\t    v_CoverageCode IS NULL, 'N/A',\n\t    v_CoverageCode <> 'N/A', LPAD(v_CoverageCode, 2, '0'),\n\t    'N/A'\n\t) AS o_CoverageCode,\n\to_ConstructionCode AS in_ConstructionCode,\n\t-- *INF*: :LKP.LKP_SUPCONSTRUCTIONCODE(LTRIM(RTRIM(in_ConstructionCode)))\n\tLKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode.StandardConstructionCodeDescription AS v_ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_ConstructionCode) AS ConstructionCode_out,\n\to_IsoFireProtectionCode AS IsoFireProtectionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode) AS IsoFireProtectionCode_out,\n\to_PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\to_pol_exp_date AS pol_exp_date,\n\to_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\tPremiumTransactionEffectiveDate,\n\tLocationNumber,\n\tBuildingNumber,\n\tPolicyKey,\n\tRatingCoverageAKId,\n\tRatingTerritoryCode\n\tFROM EXP_Cleansing_Premium\n\tLEFT JOIN LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_PolicyKey_RatingCoverageAKId\n\tON LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_PolicyKey_RatingCoverageAKId.PolicyKey = PolicyKey\n\tAND LKP_DEDUCTIBLE_PROPERTY_WINDORHAIL_PolicyKey_RatingCoverageAKId.RatingCoverageAKId = RatingCoverageAKId\n\n\tLEFT JOIN LKP_DEDUCTIBLE_PROPERTY LKP_DEDUCTIBLE_PROPERTY_PolicyKey_RatingCoverageAKId\n\tON LKP_DEDUCTIBLE_PROPERTY_PolicyKey_RatingCoverageAKId.PolicyKey = PolicyKey\n\tAND LKP_DEDUCTIBLE_PROPERTY_PolicyKey_RatingCoverageAKId.RatingCoverageAKId = RatingCoverageAKId\n\n\tLEFT JOIN LKP_SUPREFERENCEDATA LKP_SUPREFERENCEDATA_CoverageType\n\tON LKP_SUPREFERENCEDATA_CoverageType.FromCode = CoverageType\n\n\tLEFT JOIN LKP_SUPREFERENCEDATA LKP_SUPREFERENCEDATA_RiskType\n\tON LKP_SUPREFERENCEDATA_RiskType.FromCode = RiskType\n\n\tLEFT JOIN LKP_SUPCONSTRUCTIONCODE LKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode\n\tON LKP_SUPCONSTRUCTIONCODE_LTRIM_RTRIM_in_ConstructionCode.ConstructionCode = LTRIM(RTRIM(in_ConstructionCode))\n\n),\nUnion AS (\n\tSELECT LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode, LossMasterClassCode, Cause_of_Loss, TerritoryCode, pol_eff_date, ClaimNum, ClaimantNum, PremiumMasterPremium_out AS PremiumMasterPremium, PaidLossAmt, OutstandingAmt, TypeBureauCode, RiskUnitGroup, SourceSystemID, RiskType, DeductibleAmount_out AS DeductibleAmount, o_CoverageCode AS CoverageCode, ConstructionCode_out AS ConstructionCode, IsoFireProtectionCode_out AS IsoFireProtectionCode, i_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode, pol_exp_date AS PolicyExpirationDate, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, RatingCounty, PremiumTransactionEffectiveDate, RatingCity, LocationNumber AS o_LocationNumber, BuildingNumber AS o_BuildingNumber, RatingTerritoryCode\n\tFROM EXP_Logic_Premium\n\tUNION\n\tSELECT loss_master_calculation_id AS LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode_out AS PremiumMasterClassCode, LossMasterClassCode_out AS LossMasterClassCode, cause_of_loss_out AS Cause_of_Loss, TerritoryCode_out AS TerritoryCode, pol_eff_date, ClaimNum, claimant_num AS ClaimantNum, PremiumMasterPremium, PaidLossAmount AS PaidLossAmt, OutstandingLossAmount AS OutstandingAmt, TypeBureauCode, RiskUnitGroup, PolicySourceID AS SourceSystemID, RiskType, DeductibleAmount_out AS DeductibleAmount, o_CoverageCode AS CoverageCode, ConstructionCode, IsoFireProtectionCode, PackageModificationAdjustmentGroupCode, pol_exp_date AS PolicyExpirationDate, CumulativeInceptiontoDatePaidLoss AS InceptionToDatePaidLossAmount, claim_coverage_detail_ak_id AS ClaimCoverageID, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, RatingCounty, RatingCity, o_LocationNumber, o_BuildingNumber, RatingTerritoryCode\n\tFROM EXP_Logic_Loss\n),\nEXP_ConstCode_IsoPC_Rules AS (\n\tSELECT\n\tsub_line_code AS i_sub_line_code,\n\tConstructionCode AS i_ConstructionCode,\n\tIsoFireProtectionCode AS i_IsoFireProtectionCode,\n\t-- *INF*: DECODE\r\n\t-- (TRUE,\r\n\t-- in(i_ConstructionCode,'N/A',null),'00',\r\n\t-- i_ConstructionCode='B','2',\r\n\t-- i_ConstructionCode\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_ConstructionCode IN ('N/A',null), '00',\n\t    i_ConstructionCode = 'B', '2',\n\t    i_ConstructionCode\n\t) AS v_ConstructionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_IsoFireProtectionCode='N/A' and in(i_sub_line_code,'010','015','016','017','018'),'10',\r\n\t-- i_IsoFireProtectionCode='N/A', '00',\r\n\t-- i_IsoFireProtectionCode='1', '01',\r\n\t-- in (i_IsoFireProtectionCode,'2','20'),'02',\r\n\t-- in (i_IsoFireProtectionCode,'3','13','30'),'03',\r\n\t-- i_IsoFireProtectionCode='4','04',\r\n\t-- i_IsoFireProtectionCode='5','05',\r\n\t-- i_IsoFireProtectionCode='6','06',\r\n\t-- i_IsoFireProtectionCode='7','07',\r\n\t-- i_IsoFireProtectionCode='8','08',\r\n\t-- in(i_IsoFireProtectionCode,'9','92','97'),'09',\r\n\t-- i_IsoFireProtectionCode='12','10',\r\n\t-- in(i_IsoFireProtectionCode,'OR','O4'),'04',\r\n\t-- i_IsoFireProtectionCode='8B','19',\r\n\t-- i_IsoFireProtectionCode='96','06',\r\n\t-- INSTR(i_IsoFireProtectionCode,'X'),'09',\r\n\t-- INSTR(i_IsoFireProtectionCode,'Y'),'8B',\r\n\t-- i_IsoFireProtectionCode\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_IsoFireProtectionCode = 'N/A' and i_sub_line_code IN ('010','015','016','017','018'), '10',\n\t    i_IsoFireProtectionCode = 'N/A', '00',\n\t    i_IsoFireProtectionCode = '1', '01',\n\t    i_IsoFireProtectionCode IN ('2','20'), '02',\n\t    i_IsoFireProtectionCode IN ('3','13','30'), '03',\n\t    i_IsoFireProtectionCode = '4', '04',\n\t    i_IsoFireProtectionCode = '5', '05',\n\t    i_IsoFireProtectionCode = '6', '06',\n\t    i_IsoFireProtectionCode = '7', '07',\n\t    i_IsoFireProtectionCode = '8', '08',\n\t    i_IsoFireProtectionCode IN ('9','92','97'), '09',\n\t    i_IsoFireProtectionCode = '12', '10',\n\t    i_IsoFireProtectionCode IN ('OR','O4'), '04',\n\t    i_IsoFireProtectionCode = '8B', '19',\n\t    i_IsoFireProtectionCode = '96', '06',\n\t    REGEXP_INSTR(i_IsoFireProtectionCode, 'X'), '09',\n\t    REGEXP_INSTR(i_IsoFireProtectionCode, 'Y'), '8B',\n\t    i_IsoFireProtectionCode\n\t) AS v_IsoFireProtectionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- in(i_sub_line_code,'015','016','017','018'),v_IsoFireProtectionCode,'00')\n\tDECODE(\n\t    TRUE,\n\t    i_sub_line_code IN ('015','016','017','018'), v_IsoFireProtectionCode,\n\t    '00'\n\t) AS v_IsoFireProtectionCode_FIRE,\n\tv_ConstructionCode AS o_ConstructionCode,\n\tv_IsoFireProtectionCode_FIRE AS o_IsoFireProtectionCode\n\tFROM Union\n),\nLKP_RiskTypeWithMaxPremium AS (\n\tSELECT\n\tRiskType,\n\tpol_key\n\tFROM (\n\t\tselect pol.pol_key AS pol_key,\r\n\t\trc.RiskType as RiskType\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt \r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage rc\r\n\t\ton pt.RatingCoverageAKId=rc.RatingCoverageAKID\r\n\t\tand pt.EffectiveDate=rc.EffectiveDate\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage pc\r\n\t\ton rc.PolicyCoverageAKID=pc.PolicyCoverageAKID\r\n\t\tand pc.CurrentSnapshotFlag=1\r\n\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy pol\r\n\t\ton pc.PolicyAKID=pol.pol_ak_id\r\n\t\tand pol.crrnt_snpsht_flag=1\r\n\t\tand pol.source_sys_id='DCT'\r\n\t\twhere rc.RiskType<>'N/A'\r\n\t\tand pc.TypeBureauCode='Crime'\r\n\t\torder by pol.pol_key,pt.PremiumTransactionAmount desc\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY RiskType) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tUnion.LossMasterCalculationId AS i_LossMasterCalculationId,\n\tUnion.PremiumMasterCalculationID AS i_PremiumMasterCalculationID,\n\tUnion.PremiumMasterRunDate AS i_PremiumMasterRunDate,\n\tUnion.loss_master_run_date AS i_LossMasterRunDate,\n\tUnion.pol_key AS i_pol_key,\n\tUnion.prim_bus_class_code AS i_prim_bus_class_code,\n\tUnion.StateProvinceCode AS i_StateProvinceCode,\n\tUnion.RatingCounty AS i_RatingCounty,\n\tUnion.RatingCity AS i_RatingCity,\n\tUnion.sub_line_code AS i_sub_line_code,\n\tUnion.PremiumMasterClassCode AS i_PremiumMasterClassCode,\n\tUnion.LossMasterClassCode AS i_LossMasterClassCode,\n\tUnion.Cause_of_Loss AS i_Cause_of_Loss,\n\tUnion.TerritoryCode AS i_TerritoryCode,\n\tUnion.pol_eff_date AS i_pol_eff_date,\n\tUnion.ClaimNum AS i_ClaimNum,\n\tUnion.ClaimantNum AS i_ClaimantNum,\n\tUnion.PremiumMasterPremium AS i_PremiumMasterPremium,\n\tUnion.PaidLossAmt AS i_PaidLossAmt,\n\tUnion.OutstandingAmt AS i_OutstandingAmt,\n\tUnion.TypeBureauCode AS i_TypeBureauCode,\n\tUnion.SourceSystemID AS i_SourceSystemID,\n\tUnion.RiskType AS i_RiskType,\n\tUnion.DeductibleAmount AS i_DeductibleAmount,\n\tUnion.CoverageCode AS i_CoverageCode,\n\tEXP_ConstCode_IsoPC_Rules.o_ConstructionCode AS i_ConstructionCode,\n\tEXP_ConstCode_IsoPC_Rules.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tUnion.PackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tUnion.PolicyExpirationDate AS i_PolicyExpirationDate,\n\tUnion.InceptionToDatePaidLossAmount AS i_InceptionToDatePaidLossAmount,\n\tUnion.ClaimCoverageID AS i_ClaimCoverageID,\n\tUnion.AnnualStatementLineNumber AS i_AnnualStatementLineNumber,\n\tUnion.BureauCode1 AS i_BureauCode1,\n\tUnion.BureauCode2 AS i_BureauCode2,\n\tUnion.BureauCode4 AS i_BureauCode4,\n\tUnion.PremiumTransactionEffectiveDate AS i_PremiumTransactionEffectiveDate,\n\tUnion.RatingTerritoryCode AS i_RatingTerritoryCode,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSYSDATE AS o_CreatedDate,\n\ti_PremiumMasterCalculationID AS o_PremiumMasterCalculationID,\n\ti_LossMasterCalculationId AS o_LossMasterCalculationId,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- i_AnnualStatementLineNumber = '12', '930',\r\n\t-- i_PremiumMasterCalculationID  !=  -1 AND NOT IN(i_sub_line_code, '090', '070', '930') AND LocationNumber = '0001' AND BuildingNumber = '000' AND i_CoverageCode = '03', '035', \r\n\t-- i_sub_line_code)\n\tDECODE(\n\t    TRUE,\n\t    i_AnnualStatementLineNumber = '12', '930',\n\t    i_PremiumMasterCalculationID != - 1 AND NOT i_sub_line_code IN ('090','070','930') AND LocationNumber = '0001' AND BuildingNumber = '000' AND i_CoverageCode = '03', '035',\n\t    i_sub_line_code\n\t) AS v_SublineCode,\n\tv_SublineCode AS o_SublineCode,\n\ti_TypeBureauCode AS o_TypeBureauCode,\n\t-- *INF*: IIF(IN(i_TypeBureauCode,'CF','Property','SBOPProperty')=1,'08','03')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --IIF(i_TypeBureauCode='CF','08','03')\n\tIFF(i_TypeBureauCode IN ('CF','Property','SBOPProperty') = 1, '08', '03') AS o_BureauLineOfInsurance,\n\t'0731' AS o_BureauCompanyNumber,\n\ti_StateProvinceCode AS o_StateProvinceCode,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\ti_LossMasterRunDate AS o_LossMasterRunDate,\n\ti_pol_key AS o_pol_key,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_PremiumMasterCalculationID  != -1 AND IN(v_SublineCode, '090', '070', '930'), '0000',\r\n\t-- i_PremiumMasterClassCode)\n\tDECODE(\n\t    TRUE,\n\t    i_PremiumMasterCalculationID != - 1 AND v_SublineCode IN ('090','070','930'), '0000',\n\t    i_PremiumMasterClassCode\n\t) AS o_PremiumMasterClassCode,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- i_LossMasterCalculationId  != -1 AND IN(v_SublineCode, '090', '070', '930'), '0000', \r\n\t-- i_LossMasterClassCode)\n\tDECODE(\n\t    TRUE,\n\t    i_LossMasterCalculationId != - 1 AND v_SublineCode IN ('090','070','930'), '0000',\n\t    i_LossMasterClassCode\n\t) AS o_LossMasterClassCode,\n\ti_ClaimNum AS o_ClaimNum,\n\ti_ClaimantNum AS o_ClaimantNum,\n\t-- *INF*: DECODE(True,\r\n\t-- i_StateProvinceCode='12'  AND IN( i_RatingCounty,'COOK',0)  AND IN(i_RatingCity,'CHICAGO',0),'01',\r\n\t-- i_StateProvinceCode='12'  AND IN(i_RatingCounty,'COOK',0)  AND NOT IN(i_RatingCity,'CHICAGO',0),'02',\r\n\t-- i_StateProvinceCode='12'  AND  IN(i_RatingCity,'CHICAGO',0),'01',\r\n\t-- i_StateProvinceCode='12','03',\r\n\t-- -- changed for EDWP-4697\r\n\t-- --i_StateProvinceCode='13' and IN( i_TerritoryCode,'099'),'94',\r\n\t-- --i_StateProvinceCode='13' and IN( i_TerritoryCode,'018'),'93',\r\n\t-- --i_StateProvinceCode='15' and IN( i_TerritoryCode,'091'),'11',\r\n\t-- --i_StateProvinceCode='16' and IN( i_TerritoryCode,'022'),'32',\r\n\t-- --i_StateProvinceCode='21''99',\r\n\t-- --i_StateProvinceCode='21' and IN( i_TerritoryCode,'094'),'17' ,\r\n\t--  --i_StateProvinceCode='22' and IN( i_TerritoryCode,'091'),'15',\r\n\t-- --i_StateProvinceCode='22' and IN( i_TerritoryCode,'093'),'17',\r\n\t-- --i_StateProvinceCode='22' and IN( i_TerritoryCode,'042'),'18',\r\n\t-- --i_StateProvinceCode='24' and IN( i_TerritoryCode,'07'),'99',\r\n\t-- --i_StateProvinceCode='24' and IN( i_TerritoryCode,'099'),'99',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'067'),'99',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'099'),'99',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'011'),'63',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'048'),'64',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'069'),'65',\r\n\t-- --i_StateProvinceCode='34' and IN( i_TerritoryCode,'060'),'67',\r\n\t-- --i_StateProvinceCode='48' and IN( i_TerritoryCode,'025'),'23',  \r\n\t-- --i_TerritoryCode='999','99',\r\n\t-- --i_StateProvinceCode='14','99',\r\n\t-- --i_StateProvinceCode='21','04',\r\n\t-- --Luna add default value for PMS 5/15 \r\n\t-- '99')\r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(\n\t    True,\n\t    i_StateProvinceCode = '12' AND i_RatingCounty IN ('COOK',0) AND i_RatingCity IN ('CHICAGO',0), '01',\n\t    i_StateProvinceCode = '12' AND i_RatingCounty IN ('COOK',0) AND NOT i_RatingCity IN ('CHICAGO',0), '02',\n\t    i_StateProvinceCode = '12' AND i_RatingCity IN ('CHICAGO',0), '01',\n\t    i_StateProvinceCode = '12', '03',\n\t    '99'\n\t) AS v_Risk_Territory_PMS,\n\t-- *INF*: DECODE(True,\r\n\t-- i_AnnualStatementLineNumber='12','N/A', -- We need to hardcode Earthquake to N/A\r\n\t-- i_RatingTerritoryCode !='N/A',i_RatingTerritoryCode,\r\n\t-- --i_StateProvinceCode='12'  AND IN( i_RatingCounty,'COOK',0)  AND IN(i_RatingCity,'CHICAGO',0),'01',\r\n\t-- --i_StateProvinceCode='12'  AND IN(i_RatingCounty,'COOK',0)  AND NOT IN(i_RatingCity,'CHICAGO',0),'02',\r\n\t-- --i_StateProvinceCode='12'  AND  IN(i_RatingCity,'CHICAGO',0),'01',\r\n\t-- --i_StateProvinceCode='12','03'\r\n\t-- --Change made for EDWP-4697\r\n\t-- --i_StateProvinceCode='15' and IN(i_RatingCounty,'Wyandotte') ,'11',\r\n\t-- --i_StateProvinceCode='16' and IN(i_RatingCounty,'Jefferson') ,'32',\r\n\t-- --i_StateProvinceCode='21' and IN(i_RatingCounty,'Detroit'), '03',\r\n\t-- --i_StateProvinceCode='21' and IN(i_RatingCounty,'Macomb','Oakland'), '04',\r\n\t-- --i_StateProvinceCode='21' and IN(i_RatingCounty,'Wayne') ,'17',\r\n\t-- --i_StateProvinceCode='22' and IN(i_RatingCounty,'Anoka') ,'15',\r\n\t-- --i_StateProvinceCode='22' and IN(i_RatingCounty,'Dakota') ,'16',\r\n\t-- --i_StateProvinceCode='22' and IN(i_RatingCounty,'Hennepin'),'17',\r\n\t-- --i_StateProvinceCode='22' and IN(i_RatingCounty,'Ramsey') ,'18',\r\n\t-- --i_StateProvinceCode='22' and IN(i_RatingCounty,'Washington'),'16',\r\n\t-- --i_StateProvinceCode='24' and IN(i_RatingCounty,'Jackson') ,'07',\r\n\t-- --i_StateProvinceCode='24' and IN(i_RatingCounty,'St. Louis City','St. Louis'),'14',\r\n\t-- --i_StateProvinceCode='26' and IN(i_RatingCounty,'Douglas') ,'13',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Cuyahoga') ,'61',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Franklin') ,'62',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Hamilton') ,'63',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Lucas'),'64',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Mahoning') ,'65',\r\n\t-- --i_StateProvinceCode='34' and IN(i_RatingCounty,'Summit') ,'67',\r\n\t-- --i_StateProvinceCode='48' and IN(i_RatingCounty,'Milwaukee') ,'23'\r\n\t-- '99')\r\n\t-- \n\tDECODE(\n\t    True,\n\t    i_AnnualStatementLineNumber = '12', 'N/A',\n\t    i_RatingTerritoryCode != 'N/A', i_RatingTerritoryCode,\n\t    '99'\n\t) AS v_Risk_Territory_DCT,\n\t-- *INF*: IIF(i_SourceSystemID='PMS',v_Risk_Territory_PMS,v_Risk_Territory_DCT)\n\tIFF(i_SourceSystemID = 'PMS', v_Risk_Territory_PMS, v_Risk_Territory_DCT) AS o_RiskTerritoryCode,\n\ti_pol_eff_date AS o_PolicyEffectiveDate,\n\t-- *INF*: DECODE(TRUE,IN(i_Cause_of_Loss,'11','21','31','41','51','61','71','81','91'),'01',\r\n\t-- IN(i_Cause_of_Loss,'12','22','32','42','52','62','72','82','92','97'),'02',\r\n\t-- IN(i_Cause_of_Loss,'05','15','25','35','45','55','65','75','85','95'),'03',\r\n\t-- IN(i_Cause_of_Loss,'14','24','34','44','54','64','74','84','94'),'04',\r\n\t-- IN(i_Cause_of_Loss,'08','18','28','38','48','58','68','88','98'),'05',\r\n\t-- IN(i_Cause_of_Loss,'16','26','36','46','56','66','76','86','96'),'06',\r\n\t-- IN(i_Cause_of_Loss,'17','27','37','47','57','67','87'),'07',\r\n\t-- IN(i_Cause_of_Loss,'03','13','23','33','43','53','63','73','83','93'),'08',\r\n\t-- IN(i_Cause_of_Loss,'19','29','39','49','59','69','77','79','89','99'),'09',i_Cause_of_Loss)\n\tDECODE(\n\t    TRUE,\n\t    i_Cause_of_Loss IN ('11','21','31','41','51','61','71','81','91'), '01',\n\t    i_Cause_of_Loss IN ('12','22','32','42','52','62','72','82','92','97'), '02',\n\t    i_Cause_of_Loss IN ('05','15','25','35','45','55','65','75','85','95'), '03',\n\t    i_Cause_of_Loss IN ('14','24','34','44','54','64','74','84','94'), '04',\n\t    i_Cause_of_Loss IN ('08','18','28','38','48','58','68','88','98'), '05',\n\t    i_Cause_of_Loss IN ('16','26','36','46','56','66','76','86','96'), '06',\n\t    i_Cause_of_Loss IN ('17','27','37','47','57','67','87'), '07',\n\t    i_Cause_of_Loss IN ('03','13','23','33','43','53','63','73','83','93'), '08',\n\t    i_Cause_of_Loss IN ('19','29','39','49','59','69','77','79','89','99'), '09',\n\t    i_Cause_of_Loss\n\t) AS o_CauseOfLoss,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(v_SublineCode, '090', '070', '930'), '0000000', \r\n\t-- ISNULL(i_DeductibleAmount),'N/A',\r\n\t-- LPAD(i_DeductibleAmount, 7, '0')\r\n\t-- )\r\n\t-- --IIF(ISNULL(i_DeductibleAmount),'0000000',LPAD(i_DeductibleAmount, 7, '0'))\n\tDECODE(\n\t    TRUE,\n\t    v_SublineCode IN ('090','070','930'), '0000000',\n\t    i_DeductibleAmount IS NULL, 'N/A',\n\t    LPAD(i_DeductibleAmount, 7, '0')\n\t) AS o_DeductibleAmount,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- IN(v_SublineCode, '090', '070', '930'), 'N/A', \r\n\t-- i_CoverageCode)\n\tDECODE(\n\t    TRUE,\n\t    v_SublineCode IN ('090','070','930'), 'N/A',\n\t    i_CoverageCode\n\t) AS o_CoverageCode,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- IN(v_SublineCode, '090', '070', '930'), '00',\r\n\t-- i_ConstructionCode)\n\tDECODE(\n\t    TRUE,\n\t    v_SublineCode IN ('090','070','930'), '00',\n\t    i_ConstructionCode\n\t) AS o_ConstructionCode,\n\ti_IsoFireProtectionCode AS o_ISOFireProtectionCode,\n\tLKP_RiskTypeWithMaxPremium.RiskType AS i_RiskTypeCrimeWithMaxPremiumDCT,\n\t-- *INF*: IIF(i_RiskType='N/A',i_RiskTypeCrimeWithMaxPremiumDCT,i_RiskType)\n\tIFF(i_RiskType = 'N/A', i_RiskTypeCrimeWithMaxPremiumDCT, i_RiskType) AS v_RiskTypeDCT,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- --i_TypeBureauCode='CF' , \r\n\t-- --DECODE(TRUE,\r\n\t-- --i_RiskType='BLDG','01',\r\n\t-- --i_RiskType='PP','02',\r\n\t-- --'N/A'\r\n\t-- --),\r\n\t-- \r\n\t-- i_TypeBureauCode= 'CR' ,\r\n\t-- DECODE(TRUE,\r\n\t-- v_RiskTypeDCT='ClientsProperty','200',\r\n\t-- v_RiskTypeDCT='ClientsProperty_ETF','400',\r\n\t-- v_RiskTypeDCT='ComputerFraud','200',\r\n\t-- v_RiskTypeDCT='ComputerFraud_G','300',\r\n\t-- v_RiskTypeDCT='EmployeeTheft','200',\r\n\t-- v_RiskTypeDCT='EmployeeTheft_ETF','400',\r\n\t-- v_RiskTypeDCT='EmployeeTheftNameOrPosition','200',\r\n\t-- v_RiskTypeDCT='EmployeeTheftNameOrPosition_ETF','400',\r\n\t-- v_RiskTypeDCT='EmployeeTheftNameOrPosition_G','300',\r\n\t-- v_RiskTypeDCT='EmployeeTheftNameOrPosition_GETF','400',\r\n\t-- v_RiskTypeDCT='EmployeeTheftPerEmployee','300',\r\n\t-- v_RiskTypeDCT='EmployeeTheftPerEmployee_GETF','400',\r\n\t-- v_RiskTypeDCT='EmployeeTheftPerLoss','300',\r\n\t-- v_RiskTypeDCT='EmployeeTheftPerLoss_GETF','400',\r\n\t-- v_RiskTypeDCT='ForgeryAndAlteration','200',\r\n\t-- v_RiskTypeDCT='ForgeryAndAlteration_ETF','400',\r\n\t-- v_RiskTypeDCT='ForgeryAndAlteration_G','300',\r\n\t-- v_RiskTypeDCT='ForgeryAndAlteration_GETF','400',\r\n\t-- v_RiskTypeDCT='FundsTransfer','200',\r\n\t-- v_RiskTypeDCT='FundsTransfer_G','300',\r\n\t-- v_RiskTypeDCT='GuestPropertyInsidePremises','200',\r\n\t-- v_RiskTypeDCT='GuestPropertySafeDeposit','200',\r\n\t-- v_RiskTypeDCT='InsideRobbery','200',\r\n\t-- v_RiskTypeDCT='InsideRobbery_G','300',\r\n\t-- v_RiskTypeDCT='InsideRobberyOther','200',\r\n\t-- v_RiskTypeDCT='InsideRobberyOther_G','300',\r\n\t-- v_RiskTypeDCT='InsideRobberySecurities','200',\r\n\t-- v_RiskTypeDCT='InsideRobberySecurities_G','300',\r\n\t-- v_RiskTypeDCT='InsideTheftMoney','200',\r\n\t-- v_RiskTypeDCT='InsideTheftMoney_G','300',\r\n\t-- v_RiskTypeDCT='InsideTheftProperty','200',\r\n\t-- v_RiskTypeDCT='InsideTheftProperty_G','300',\r\n\t-- v_RiskTypeDCT='MoneyOrders','200',\r\n\t-- v_RiskTypeDCT='OutsidePremises','200',\r\n\t-- v_RiskTypeDCT='OutsidePremises_G','300',\r\n\t-- 'N/A'\r\n\t-- ),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'CR', DECODE(\n\t        TRUE,\n\t        v_RiskTypeDCT = 'ClientsProperty', '200',\n\t        v_RiskTypeDCT = 'ClientsProperty_ETF', '400',\n\t        v_RiskTypeDCT = 'ComputerFraud', '200',\n\t        v_RiskTypeDCT = 'ComputerFraud_G', '300',\n\t        v_RiskTypeDCT = 'EmployeeTheft', '200',\n\t        v_RiskTypeDCT = 'EmployeeTheft_ETF', '400',\n\t        v_RiskTypeDCT = 'EmployeeTheftNameOrPosition', '200',\n\t        v_RiskTypeDCT = 'EmployeeTheftNameOrPosition_ETF', '400',\n\t        v_RiskTypeDCT = 'EmployeeTheftNameOrPosition_G', '300',\n\t        v_RiskTypeDCT = 'EmployeeTheftNameOrPosition_GETF', '400',\n\t        v_RiskTypeDCT = 'EmployeeTheftPerEmployee', '300',\n\t        v_RiskTypeDCT = 'EmployeeTheftPerEmployee_GETF', '400',\n\t        v_RiskTypeDCT = 'EmployeeTheftPerLoss', '300',\n\t        v_RiskTypeDCT = 'EmployeeTheftPerLoss_GETF', '400',\n\t        v_RiskTypeDCT = 'ForgeryAndAlteration', '200',\n\t        v_RiskTypeDCT = 'ForgeryAndAlteration_ETF', '400',\n\t        v_RiskTypeDCT = 'ForgeryAndAlteration_G', '300',\n\t        v_RiskTypeDCT = 'ForgeryAndAlteration_GETF', '400',\n\t        v_RiskTypeDCT = 'FundsTransfer', '200',\n\t        v_RiskTypeDCT = 'FundsTransfer_G', '300',\n\t        v_RiskTypeDCT = 'GuestPropertyInsidePremises', '200',\n\t        v_RiskTypeDCT = 'GuestPropertySafeDeposit', '200',\n\t        v_RiskTypeDCT = 'InsideRobbery', '200',\n\t        v_RiskTypeDCT = 'InsideRobbery_G', '300',\n\t        v_RiskTypeDCT = 'InsideRobberyOther', '200',\n\t        v_RiskTypeDCT = 'InsideRobberyOther_G', '300',\n\t        v_RiskTypeDCT = 'InsideRobberySecurities', '200',\n\t        v_RiskTypeDCT = 'InsideRobberySecurities_G', '300',\n\t        v_RiskTypeDCT = 'InsideTheftMoney', '200',\n\t        v_RiskTypeDCT = 'InsideTheftMoney_G', '300',\n\t        v_RiskTypeDCT = 'InsideTheftProperty', '200',\n\t        v_RiskTypeDCT = 'InsideTheftProperty_G', '300',\n\t        v_RiskTypeDCT = 'MoneyOrders', '200',\n\t        v_RiskTypeDCT = 'OutsidePremises', '200',\n\t        v_RiskTypeDCT = 'OutsidePremises_G', '300',\n\t        'N/A'\n\t    ),\n\t    'N/A'\n\t) AS v_PolicyForm_DCT,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TypeBureauCode = 'CR',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode4,'01','02','03'),'200',\r\n\t-- IN(i_BureauCode4,'11','12','13'),'300',\r\n\t-- IN(i_BureauCode4,'21','22','23','27','28'),'400',\r\n\t-- '200'),\r\n\t-- \r\n\t-- i_TypeBureauCode = 'BT',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'01','02','03','04','05','06','09'),'120',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'07','08'),'190',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'10','20','26'),'170',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'),'110',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'31','32','39'),'130',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'42','43','44','45'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'45'),'111',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'47'),'121',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'48'),'131',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'49','41','42','43','44'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'51','59'),'150',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'52','53'),'141',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'54','55'),'151',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'56'),'161',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'57'),'171',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'58'),'181',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'60'),'191',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'61'),'160',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'62','63'),'192',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'64'),'112',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'67','68'),'142',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'69'),'152',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'70','71','72'),'180',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'73'),'122',\r\n\t-- '199'\r\n\t-- ),\r\n\t-- i_TypeBureauCode = 'FT','199',\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'CR', DECODE(\n\t        TRUE,\n\t        i_BureauCode4 IN ('01','02','03'), '200',\n\t        i_BureauCode4 IN ('11','12','13'), '300',\n\t        i_BureauCode4 IN ('21','22','23','27','28'), '400',\n\t        '200'\n\t    ),\n\t    i_TypeBureauCode = 'BT', DECODE(\n\t        TRUE,\n\t        i_BureauCode1 || i_BureauCode2 IN ('01','02','03','04','05','06','09'), '120',\n\t        i_BureauCode1 || i_BureauCode2 IN ('07','08'), '190',\n\t        i_BureauCode1 || i_BureauCode2 IN ('10','20','26'), '170',\n\t        i_BureauCode1 || i_BureauCode2 IN ('11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'), '110',\n\t        i_BureauCode1 || i_BureauCode2 IN ('31','32','39'), '130',\n\t        i_BureauCode1 || i_BureauCode2 IN ('42','43','44','45'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('45'), '111',\n\t        i_BureauCode1 || i_BureauCode2 IN ('47'), '121',\n\t        i_BureauCode1 || i_BureauCode2 IN ('48'), '131',\n\t        i_BureauCode1 || i_BureauCode2 IN ('49','41','42','43','44'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('51','59'), '150',\n\t        i_BureauCode1 || i_BureauCode2 IN ('52','53'), '141',\n\t        i_BureauCode1 || i_BureauCode2 IN ('54','55'), '151',\n\t        i_BureauCode1 || i_BureauCode2 IN ('56'), '161',\n\t        i_BureauCode1 || i_BureauCode2 IN ('57'), '171',\n\t        i_BureauCode1 || i_BureauCode2 IN ('58'), '181',\n\t        i_BureauCode1 || i_BureauCode2 IN ('60'), '191',\n\t        i_BureauCode1 || i_BureauCode2 IN ('61'), '160',\n\t        i_BureauCode1 || i_BureauCode2 IN ('62','63'), '192',\n\t        i_BureauCode1 || i_BureauCode2 IN ('64'), '112',\n\t        i_BureauCode1 || i_BureauCode2 IN ('67','68'), '142',\n\t        i_BureauCode1 || i_BureauCode2 IN ('69'), '152',\n\t        i_BureauCode1 || i_BureauCode2 IN ('70','71','72'), '180',\n\t        i_BureauCode1 || i_BureauCode2 IN ('73'), '122',\n\t        '199'\n\t    ),\n\t    i_TypeBureauCode = 'FT', '199',\n\t    'N/A'\n\t) AS v_PolicyForm_PMS,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_SourceSystemID='PMS',v_PolicyForm_PMS,\r\n\t-- IN(i_SourceSystemID,'DCT','DUC'),v_PolicyForm_DCT\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_SourceSystemID = 'PMS', v_PolicyForm_PMS,\n\t    i_SourceSystemID IN ('DCT','DUC'), v_PolicyForm_DCT\n\t) AS v_PolicyForm,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_PolicyForm)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_PolicyForm) AS o_PolicyForm,\n\ti_PremiumMasterPremium AS o_PremiumMasterDirectWrittenPremiumAmount,\n\ti_PaidLossAmt AS o_PaidLossAmount,\n\ti_OutstandingAmt AS o_OutstandingLossAmount,\n\ti_PolicyExpirationDate AS o_PolicyExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_InceptionToDatePaidLossAmount), 0, i_InceptionToDatePaidLossAmount)\n\tIFF(i_InceptionToDatePaidLossAmount IS NULL, 0, i_InceptionToDatePaidLossAmount) AS o_InceptionToDatePaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_ClaimCoverageID), -1, i_ClaimCoverageID)\n\tIFF(i_ClaimCoverageID IS NULL, - 1, i_ClaimCoverageID) AS o_ClaimCoverageID,\n\ti_AnnualStatementLineNumber AS o_AnnualStatementLineNumber,\n\t-- *INF*: IIF(ISNULL(i_PremiumTransactionEffectiveDate),TO_DATE('18000101','YYYYMMDD'),i_PremiumTransactionEffectiveDate)\n\tIFF(\n\t    i_PremiumTransactionEffectiveDate IS NULL, TO_TIMESTAMP('18000101', 'YYYYMMDD'),\n\t    i_PremiumTransactionEffectiveDate\n\t) AS o_PremiumTransactionEffectiveDate,\n\t-- *INF*: DECODE(TRUE,\t\r\n\t-- i_SourceSystemID='DUC','DCT',\r\n\t-- i_SourceSystemID='DCT','DCT',\r\n\t-- 'PMS')\n\tDECODE(\n\t    TRUE,\n\t    i_SourceSystemID = 'DUC', 'DCT',\n\t    i_SourceSystemID = 'DCT', 'DCT',\n\t    'PMS'\n\t) AS v_DCT_SRC_ID,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT',:LKP.LKP_Policy(ltrim(rtrim(i_pol_key))),'B')\n\tIFF(v_DCT_SRC_ID = 'DCT', LKP_POLICY_ltrim_rtrim_i_pol_key.pol_key, 'B') AS v_Policy_SBOP,\n\t-- *INF*: LTRIM(RTRIM(v_Policy_SBOP))\n\tLTRIM(RTRIM(v_Policy_SBOP)) AS o_Policy_SBOP,\n\t-- *INF*: IIF(v_Policy_SBOP<>'B' and v_DCT_SRC_ID='DCT',\r\n\t-- to_char(:LKP.LKP_Policy_SBOP(i_pol_key)))\n\tIFF(\n\t    v_Policy_SBOP <> 'B' and v_DCT_SRC_ID = 'DCT',\n\t    to_char(LKP_POLICY_SBOP_i_pol_key.ProgramAKId)\n\t) AS v_SBOP_GL_PR,\n\t-- *INF*: decode(true,\r\n\t-- v_SBOP_GL_PR='38','Institutional',\r\n\t-- v_SBOP_GL_PR='39','Service',\r\n\t-- v_SBOP_GL_PR='81','Service',\r\n\t-- isnull(v_SBOP_GL_PR),'N/A')\r\n\t-- \r\n\t-- -- For Programid 38 Description is Childcare\r\n\t-- -- For Programid 39 Description is  Personal apperance\r\n\t-- -- For Programid 81 Description is Circuit Workout\r\n\t-- -- Other than Program Code 38,39 and 81, we are making as N/A\n\tdecode(\n\t    true,\n\t    v_SBOP_GL_PR = '38', 'Institutional',\n\t    v_SBOP_GL_PR = '39', 'Service',\n\t    v_SBOP_GL_PR = '81', 'Service',\n\t    v_SBOP_GL_PR IS NULL, 'N/A'\n\t) AS v_Program_Desc_SBOP,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and v_Program_Desc_SBOP='N/A',\r\n\t-- :lkp.LKP_Policy_GL_PR(i_pol_key))\n\tIFF(v_DCT_SRC_ID = 'DCT' and v_Program_Desc_SBOP = 'N/A',) AS v_Non_SBOP_GL_PR,\n\t-- *INF*: :LKP.LKP_archCFDCOccpancyType(ltrim(rtrim(i_pol_key)))\r\n\t--  \n\tLKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.OccupancyType AS v_CF_Occupancy_Type,\n\t-- *INF*: IIF(ISNULL(v_CF_Occupancy_Type),:LKP.LKP_archGLDCOccpancyType(ltrim(rtrim(i_pol_key))),v_CF_Occupancy_Type)\n\tIFF(\n\t    v_CF_Occupancy_Type IS NULL, LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.OccupancyType,\n\t    v_CF_Occupancy_Type\n\t) AS v_GL_OCcupancy_Type,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and not isnull(v_Non_SBOP_GL_PR),\r\n\t-- v_GL_OCcupancy_Type,'N/A')\n\tIFF(v_DCT_SRC_ID = 'DCT' and v_Non_SBOP_GL_PR IS NOT NULL, v_GL_OCcupancy_Type, 'N/A') AS Non_SBOP_OccupancyType,\n\t-- *INF*: IIF(v_DCT_SRC_ID='DCT' and NOT isnull(v_SBOP_GL_PR),v_Program_Desc_SBOP,\r\n\t-- IIF (v_DCT_SRC_ID='DCT' and NOT isnull(v_Non_SBOP_GL_PR),:LKP.LKP_SupPackageModificationAdjustmentGroup(v_DCT_SRC_ID,Non_SBOP_OccupancyType),\r\n\t-- IIF (v_DCT_SRC_ID='PMS',:LKP.LKP_SupPackageModificationAdjustmentGroup(v_DCT_SRC_ID,i_PackageModificationAdjustmentGroupCode),'N/A')))\n\tIFF(\n\t    v_DCT_SRC_ID = 'DCT' and v_SBOP_GL_PR IS NOT NULL, v_Program_Desc_SBOP,\n\t    IFF(\n\t        v_DCT_SRC_ID = 'DCT'\n\t    and v_Non_SBOP_GL_PR IS NOT NULL,\n\t        LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.PackageModificationAdjustmentGroupDescription,\n\t        IFF(\n\t                v_DCT_SRC_ID = 'PMS',\n\t                LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.PackageModificationAdjustmentGroupDescription,\n\t                'N/A'\n\t            )\n\t    )\n\t) AS v_Occupancy_Desc,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_Occupancy_Desc)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(v_Occupancy_Desc) AS o_PackageModificationAdjustmentGroupDescription,\n\tUnion.o_LocationNumber AS LocationNumber,\n\tUnion.o_BuildingNumber AS BuildingNumber\n\tFROM EXP_ConstCode_IsoPC_Rules\n\t -- Manually join with Union\n\tLEFT JOIN LKP_RiskTypeWithMaxPremium\n\tON LKP_RiskTypeWithMaxPremium.pol_key = Union.pol_key\n\tLEFT JOIN LKP_POLICY LKP_POLICY_ltrim_rtrim_i_pol_key\n\tON LKP_POLICY_ltrim_rtrim_i_pol_key.pol_key = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_POLICY_SBOP LKP_POLICY_SBOP_i_pol_key\n\tON LKP_POLICY_SBOP_i_pol_key.pol_key = i_pol_key\n\n\tLEFT JOIN LKP_POLICY_GL_PR LKP_POLICY_GL_PR_i_pol_key\n\tON LKP_POLICY_GL_PR_i_pol_key. = i_pol_key\n\n\tLEFT JOIN LKP_ARCHCFDCOCCPANCYTYPE LKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key\n\tON LKP_ARCHCFDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.PolicyNumber = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_ARCHGLDCOCCPANCYTYPE LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key\n\tON LKP_ARCHGLDCOCCPANCYTYPE_ltrim_rtrim_i_pol_key.PolicyNumber = ltrim(rtrim(i_pol_key))\n\n\tLEFT JOIN LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType\n\tON LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.SourceSystemId = v_DCT_SRC_ID\n\tAND LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_Non_SBOP_OccupancyType.PackageModificationAdjustmentGroupCode = Non_SBOP_OccupancyType\n\n\tLEFT JOIN LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode\n\tON LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.SourceSystemId = v_DCT_SRC_ID\n\tAND LKP_SUPPACKAGEMODIFICATIONADJUSTMENTGROUP_v_DCT_SRC_ID_i_PackageModificationAdjustmentGroupCode.PackageModificationAdjustmentGroupCode = i_PackageModificationAdjustmentGroupCode\n\n),\nTGT_ISSCommercialPropertyExtract AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO ISSCommercialPropertyExtract\n\t(AuditId, CreatedDate, EDWPremiumMasterCalculationPKId, EDWLossMasterCalculationPKId, TypeBureauCode, BureauLineOfInsurance, BureauCompanyNumber, StateProvinceCode, PremiumMasterRunDate, LossMasterRunDate, PolicyKey, PremiumMasterClassCode, LossMasterClassCode, ClaimNumber, ClaimantNumber, RiskTerritoryCode, PolicyEffectiveDate, CauseOfLoss, DeductibleAmount, CoverageCode, ConstructionCode, ISOFireProtectionCode, SublineCode, PackageModificationAdjustmentGroupDescription, PolicyForm, PremiumMasterDirectWrittenPremiumAmount, PaidLossAmount, OutstandingLossAmount, PolicyExpirationDate, InceptionToDatePaidLossAmount, ClaimantCoverageDetailId, AnnualStatementLineNumber, TransactionEffectiveDate, LocationNumber, BuildingNumber)\n\tSELECT \n\to_AuditID AS AUDITID, \n\to_CreatedDate AS CREATEDDATE, \n\to_PremiumMasterCalculationID AS EDWPREMIUMMASTERCALCULATIONPKID, \n\to_LossMasterCalculationId AS EDWLOSSMASTERCALCULATIONPKID, \n\to_TypeBureauCode AS TYPEBUREAUCODE, \n\to_BureauLineOfInsurance AS BUREAULINEOFINSURANCE, \n\to_BureauCompanyNumber AS BUREAUCOMPANYNUMBER, \n\to_StateProvinceCode AS STATEPROVINCECODE, \n\to_PremiumMasterRunDate AS PREMIUMMASTERRUNDATE, \n\to_LossMasterRunDate AS LOSSMASTERRUNDATE, \n\to_pol_key AS POLICYKEY, \n\to_PremiumMasterClassCode AS PREMIUMMASTERCLASSCODE, \n\to_LossMasterClassCode AS LOSSMASTERCLASSCODE, \n\to_ClaimNum AS CLAIMNUMBER, \n\to_ClaimantNum AS CLAIMANTNUMBER, \n\to_RiskTerritoryCode AS RISKTERRITORYCODE, \n\to_PolicyEffectiveDate AS POLICYEFFECTIVEDATE, \n\to_CauseOfLoss AS CAUSEOFLOSS, \n\to_DeductibleAmount AS DEDUCTIBLEAMOUNT, \n\to_CoverageCode AS COVERAGECODE, \n\to_ConstructionCode AS CONSTRUCTIONCODE, \n\to_ISOFireProtectionCode AS ISOFIREPROTECTIONCODE, \n\to_SublineCode AS SUBLINECODE, \n\to_PackageModificationAdjustmentGroupDescription AS PACKAGEMODIFICATIONADJUSTMENTGROUPDESCRIPTION, \n\to_PolicyForm AS POLICYFORM, \n\to_PremiumMasterDirectWrittenPremiumAmount AS PREMIUMMASTERDIRECTWRITTENPREMIUMAMOUNT, \n\to_PaidLossAmount AS PAIDLOSSAMOUNT, \n\to_OutstandingLossAmount AS OUTSTANDINGLOSSAMOUNT, \n\to_PolicyExpirationDate AS POLICYEXPIRATIONDATE, \n\to_InceptionToDatePaidLossAmount AS INCEPTIONTODATEPAIDLOSSAMOUNT, \n\to_ClaimCoverageID AS CLAIMANTCOVERAGEDETAILID, \n\to_AnnualStatementLineNumber AS ANNUALSTATEMENTLINENUMBER, \n\to_PremiumTransactionEffectiveDate AS TRANSACTIONEFFECTIVEDATE, \n\tLOCATIONNUMBER, \n\tBUILDINGNUMBER\n\tFROM EXP_Values\n),\nSQ_ISSCommercialPropertyExtract_UpdateForPMS_WithFirstAvailableLocation AS (\n\tselect  ISS.ISSCommercialPropertyExtractId,\r\n\tISS.TypeBureauCode,\r\n\tISS.PolicyKey,\r\n\tISS.ConstructionCode,\r\n\tISS.ISOFireProtectionCode\r\n\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSCommercialPropertyExtract ISS\r\n\twhere (case when ISS.EDWPremiumMasterCalculationPKId<>-1 then ISS.PremiumMasterRunDate else ISS.LossMasterRunDate end) between \r\n\t DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0)--first day of last Quarter   \r\n\t AND\r\n\t DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0))--Last day of last Quarter\r\n\tand len(ISS.PolicyKey)=12\r\n\tand (ISS.ConstructionCode='00' or ISS.ISOFireProtectionCode='00')\r\n\tand 1=2\n),\nEXP_UpdateForPMS_WithFirstAvailableLocation AS (\n\tSELECT\n\tISSCommercialPropertyExtractId AS WorkISSExtractId,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tPolicyKey AS i_PolicyKey,\n\tConstructionCode AS i_ConstructionCode,\n\tISOFireProtectionCode AS i_ISOFireProtectionCode,\n\t-- *INF*: IIF(i_ConstructionCode='00', :LKP.LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST(i_PolicyKey, i_TypeBureauCode), null)\n\tIFF(\n\t    i_ConstructionCode = '00',\n\t    LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.ConstructionCode,\n\t    null\n\t) AS v_ConstructionCode,\n\t-- *INF*: IIF(i_ISOFireProtectionCode='00', :LKP.LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST(i_PolicyKey, i_TypeBureauCode), null)\n\tIFF(\n\t    i_ISOFireProtectionCode = '00',\n\t    LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.ISOFireProtectionCode,\n\t    null\n\t) AS v_ISOFireProtectionCode,\n\t-- *INF*: IIF(ISNULL(v_ConstructionCode), i_ConstructionCode, v_ConstructionCode)\n\tIFF(v_ConstructionCode IS NULL, i_ConstructionCode, v_ConstructionCode) AS o_ConstructionCode,\n\t-- *INF*: IIF(ISNULL(v_ISOFireProtectionCode), i_ISOFireProtectionCode, v_ISOFireProtectionCode)\n\tIFF(v_ISOFireProtectionCode IS NULL, i_ISOFireProtectionCode, v_ISOFireProtectionCode) AS o_ISOFireProtectionCode\n\tFROM SQ_ISSCommercialPropertyExtract_UpdateForPMS_WithFirstAvailableLocation\n\tLEFT JOIN LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode\n\tON LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.PolicyKey = i_PolicyKey\n\tAND LKP_WORKISSEXTRACT_CONSTRUCTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.TypeBureauCode = i_TypeBureauCode\n\n\tLEFT JOIN LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode\n\tON LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.PolicyKey = i_PolicyKey\n\tAND LKP_WORKISSEXTRACT_ISOFIREPROTECTIONCODE_FIRST_i_PolicyKey_i_TypeBureauCode.TypeBureauCode = i_TypeBureauCode\n\n),\nFIL_Valid AS (\n\tSELECT\n\tWorkISSExtractId, \n\to_ConstructionCode AS ConstructionCode, \n\to_ISOFireProtectionCode AS ISOFireProtectionCode\n\tFROM EXP_UpdateForPMS_WithFirstAvailableLocation\n\tWHERE ConstructionCode<>'00' OR ISOFireProtectionCode<>'00'\n),\nUPD_UpdateForPMS_WithFirstAvailableLocation AS (\n\tSELECT\n\tWorkISSExtractId, \n\tConstructionCode, \n\tISOFireProtectionCode\n\tFROM FIL_Valid\n),\nTGT_ISSCommercialPropertyExtract_UpdateForPMS_WithFirstAvailableLocation AS (\n\tMERGE INTO ISSCommercialPropertyExtract AS T\n\tUSING UPD_UpdateForPMS_WithFirstAvailableLocation AS S\n\tON T.ISSCommercialPropertyExtractId = S.WorkISSExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ConstructionCode = S.ConstructionCode, T.ISOFireProtectionCode = S.ISOFireProtectionCode\n),\nSQ_ISSCommercialPropertyExtract_Update_ConstructionCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0))\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0)));\t--Last day of last Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH IncorrectConstructionCode\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.ConstructionCode AS CurrentConstructionCode\r\n\t\tFROM ISSCommercialPropertyExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND ISS.SublineCode NOT IN ('090', '070', '930')\r\n\t\tAND ISS.LocationNumber='0001'\r\n\t\tAND ISS.BuildingNumber = '000'\r\n\t\tAND LEN(ISS.PolicyKey) <> 12\r\n\t\tAND ISS.TypeBureauCode = 'CF'\r\n\t\tAND ISS.ConstructionCode IN ('N/A', '00')\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN  @StartDate AND @EndDate)\t\r\n\t)\r\n\t\r\n\tSELECT DISTINCT IncorrectConstructionCode.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\tIncorrectConstructionCode.PolicyKey AS PolicyKey, \r\n\tISNULL(CorrectConstructionCode.ConstructionCode, '0') AS ConstructionCode\r\n\tFROM IncorrectConstructionCode AS IncorrectConstructionCode\r\n\tLEFT JOIN(\r\n\t\tSELECT ISS.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey, \r\n\t\tISS.ConstructionCode AS ConstructionCode,\r\n\t\tISS.LocationNumber AS LocationNumber, \r\n\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t(CASE \r\n\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\tTHEN \r\n\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\tELSE 0\r\n\t\tEND) \r\n\t\tAS RowNumber  \r\n\t\tFROM ISSCommercialPropertyExtract AS ISS WITH (NOLOCK)\r\n\t\tINNER JOIN IncorrectConstructionCode AS IncorrectConstructionCode ON IncorrectConstructionCode.PolicyKey = ISS.PolicyKey\r\n\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND ISS.BuildingNumber <> '000'\r\n\t\tAND LEN(ISS.PolicyKey) <> 12\r\n\t\tAND ISS.TypeBureauCode = 'CF'\r\n\t\tAND ISS.ConstructionCode NOT IN ('N/A', '00')\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN  @StartDate AND @EndDate)\t\r\n\t) AS CorrectConstructionCode\r\n\tON IncorrectConstructionCode.PolicyKey = CorrectConstructionCode.PolicyKey\r\n\tAND CorrectConstructionCode.RowNumber = 1\r\n\tORDER BY ISSCommercialPropertyExtractId\n),\nEXP_Update_ConstructionCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId,\n\tPolicyKey,\n\tConstructionCode AS i_ConstructionCode,\n\t-- *INF*: IIF(IN(i_ConstructionCode, '0', '00', 'N/A' ), :LKP.LKP_UPDATE_CONSTRUCTIONCODE(PolicyKey), i_ConstructionCode)\n\tIFF(\n\t    i_ConstructionCode IN ('0','00','N/A'),\n\t    LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey.ConstructionCode,\n\t    i_ConstructionCode\n\t) AS v_ConstructionCode,\n\t-- *INF*: IIF(NOT ISNULL(v_ConstructionCode), v_ConstructionCode, '0')\n\tIFF(v_ConstructionCode IS NOT NULL, v_ConstructionCode, '0') AS o_ConstructionCode\n\tFROM SQ_ISSCommercialPropertyExtract_Update_ConstructionCode\n\tLEFT JOIN LKP_UPDATE_CONSTRUCTIONCODE LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey\n\tON LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey.PolicyKey = PolicyKey\n\n),\nFIL_Update_ConstructionCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId, \n\tPolicyKey, \n\to_ConstructionCode AS ConstructionCode\n\tFROM EXP_Update_ConstructionCode\n\tWHERE ConstructionCode<>'0'\n),\nUPD_Update_ConstructionCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId, \n\tConstructionCode\n\tFROM FIL_Update_ConstructionCode\n),\nISSCommercialPropertyExtract_Update_ConstructionCode AS (\n\tMERGE INTO ISSCommercialPropertyExtract AS T\n\tUSING UPD_Update_ConstructionCode AS S\n\tON T.ISSCommercialPropertyExtractId = S.ISSCommercialPropertyExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ConstructionCode = S.ConstructionCode\n),\nSQ_ISSCommercialPropertyExtract_Update_ClassCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.FIRST_DAY_OF_THE_QUARTER},0))\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(dd, -1, DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.LAST_DAY_OF_THE_QUARTER}, 0)));\t--Last day of last Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH IncorrectClassCode\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.PremiumMasterClassCode AS CurrentClassCode\r\n\t\tFROM ISSCommercialPropertyExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND ISS.SublineCode NOT IN ('090', '070', '930')\r\n\t\tAND ISS.LocationNumber='0001'\r\n\t\tAND ISS.BuildingNumber = '000'\r\n\t\tAND ISS.CoverageCode = '03'\r\n\t\tAND LEN(ISS.PolicyKey) <> 12\r\n\t\tAND ISS.TypeBureauCode = 'CF'\r\n\t\tAND ISS.PremiumMasterClassCode IN ('N/A', '0000', '99999')\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate)\r\n\t)\r\n\t\r\n\tSELECT DISTINCT\tIncorrectClassCode.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\tIncorrectClassCode.PolicyKey AS PolicyKey, \r\n\tISNULL(CorrectClassCode.ClassCode, '0') AS CorrectClassCode\r\n\tFROM IncorrectClassCode AS IncorrectClassCode\r\n\tLEFT JOIN(\r\n\t\tSELECT DISTINCT ISS.ISSCommercialPropertyExtractId AS ISSCommercialPropertyExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey, \r\n\t\tISS.PremiumMasterClassCode AS ClassCode,\r\n\t\tISS.LocationNumber AS LocationNumber, \r\n\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t(CASE \r\n\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\tTHEN \r\n\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\tELSE 0\r\n\t\tEND) \r\n\t\tAS RowNumber  \r\n\t\tFROM ISSCommercialPropertyExtract AS ISS WITH (NOLOCK)\r\n\t\tINNER JOIN IncorrectClassCode AS IncorrectClassCode ON IncorrectClassCode.PolicyKey = ISS.PolicyKey\r\n\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND ISS.BuildingNumber <> '000'\r\n\t\tAND LEN(ISS.PolicyKey) <> 12\r\n\t\tAND ISS.TypeBureauCode = 'CF'\r\n\t\tAND ISS.PremiumMasterClassCode NOT IN ('N/A', '0000', '99999')\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate)\r\n\t) AS CorrectClassCode\r\n\tON IncorrectClassCode.PolicyKey = CorrectClassCode.PolicyKey\r\n\tAND CorrectClassCode.RowNumber = 1\r\n\tORDER BY ISSCommercialPropertyExtractId\n),\nEXP_Update_ClassCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId,\n\tPolicyKey,\n\tPremiumMasterClassCode AS i_PremiumMasterClassCode,\n\t-- *INF*: IIF(IN(i_PremiumMasterClassCode, '0', 'N/A', '0000', '99999'), :LKP.LKP_UPDATE_CLASSCODE(PolicyKey), i_PremiumMasterClassCode)\n\tIFF(\n\t    i_PremiumMasterClassCode IN ('0','N/A','0000','99999'),\n\t    LKP_UPDATE_CLASSCODE_PolicyKey.ClassCode,\n\t    i_PremiumMasterClassCode\n\t) AS v_PremiumMasterClassCode,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumMasterClassCode), v_PremiumMasterClassCode, '0')\n\tIFF(v_PremiumMasterClassCode IS NOT NULL, v_PremiumMasterClassCode, '0') AS o_PremiumMasterClassCode\n\tFROM SQ_ISSCommercialPropertyExtract_Update_ClassCode\n\tLEFT JOIN LKP_UPDATE_CLASSCODE LKP_UPDATE_CLASSCODE_PolicyKey\n\tON LKP_UPDATE_CLASSCODE_PolicyKey.PolicyKey = PolicyKey\n\n),\nFIL_Update_ClassCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId, \n\tPolicyKey, \n\to_PremiumMasterClassCode AS PremiumMasterClassCode\n\tFROM EXP_Update_ClassCode\n\tWHERE PremiumMasterClassCode<>'0'\n),\nUPD_Update_ClassCode AS (\n\tSELECT\n\tISSCommercialPropertyExtractId, \n\tPremiumMasterClassCode\n\tFROM FIL_Update_ClassCode\n),\nISSCommercialPropertyExtract_Update_ClassCode AS (\n\tMERGE INTO ISSCommercialPropertyExtract AS T\n\tUSING UPD_Update_ClassCode AS S\n\tON T.ISSCommercialPropertyExtractId = S.ISSCommercialPropertyExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.PremiumMasterClassCode = S.PremiumMasterClassCode\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "FIRST_DAY_OF_THE_QUARTER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "LAST_DAY_OF_THE_QUARTER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME_DATAMART": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_1": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}