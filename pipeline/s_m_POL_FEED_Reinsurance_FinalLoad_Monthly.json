{
    "name": "s_m_POL_FEED_Reinsurance_FinalLoad_Monthly",
    "properties": {
        "activities": [
            {
                "name": "m_POL_FEED_Reinsurance_FinalLoad_Monthly",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_TGT_Payment_Get_Seq_Num AS (\n\tSELECT\n\tACP_SEQ_NUM,\n\tO_SOURCE_SEQ_NUM,\n\tSOURCE_SEQ_NUM\n\tFROM (\n\t\tselect A.SOURCE_SEQ_NUM as SOURCE_SEQ_NUM,\r\n\t\tMax(A.ACP_SEQ_NUM) as ACP_SEQ_NUM\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePaymentsExtract A\r\n\t\tinner join @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsuranceHeaderExtract B\r\n\t\ton A.SOURCE_SEQ_NUM=B.SOURCE_SEQ_NUM\r\n\t\tinner join\r\n\t\t(select POLICY_NO,max(case when DOCUMENT_TYPE='N' then SOURCE_SEQ_NUM else 0 end) max_SOURCE_SEQ_NUM \r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsuranceHeaderExtract C\r\n\t\twhere DATA_SOURCE='SRP'\r\n\t\tgroup by POLICY_NO) D\r\n\t\ton B.POLICY_NO=D.POLICY_NO\r\n\t\tand B.SOURCE_SEQ_NUM>max_SOURCE_SEQ_NUM\r\n\t\tGroup by A.SOURCE_SEQ_NUM\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SOURCE_SEQ_NUM ORDER BY ACP_SEQ_NUM) = 1\n),\nSQ_SapiensReinsurancePolicy AS (\n\tSELECT\n\t\tSapiensReinsurancePolicyId,\n\t\tAuditId,\n\t\tCreatedDate,\n\t\tModifiedDate,\n\t\tPolicyKey,\n\t\tDocumntType,\n\t\tAccountingDate,\n\t\tMonthlyTotalDirectWrittenPremium,\n\t\tProductCode,\n\t\tStrategicProfitCenterAbbreviation,\n\t\tAccountingProductCode,\n\t\tInsuranceReferenceLineOfBusinessCode,\n\t\tASLCode,\n\t\tSubASLCode,\n\t\tPrimaryStateCode,\n\t\tCoverageEffectiveDate,\n\t\tCoverageExpirationDate,\n\t\tEndorsementStartDate,\n\t\tEndorsementIssueDate,\n\t\tPolicyIssueDate,\n\t\tSourceSequenceNumber,\n\t\tTransactionNumber,\n\t\tEndorsementNumber,\n\t\tASLCoversKey,\n\t\tDateKey,\n\t\tPremiumMasterCalculationPKId,\n\t\tReinsuranceUmbrellaLayer,\n\t\tOSECode,\n\t\tPremiumTransactionPKID,\n\t\tEntryProcess,\n\t\tRatingPlanAbbreviation,\n\t\tFirstNameIsured\n\tFROM SapiensReinsurancePolicy\n\tWHERE @{pipeline().parameters.WHERE_SAPIENS}\n),\nSRC_DataCollect AS (\n\tSELECT\n\tPolicyKey AS pol_key,\n\tDocumntType,\n\tAccountingDate AS Accounting_Date,\n\tMonthlyTotalDirectWrittenPremium,\n\t-- *INF*: ROUND(MonthlyTotalDirectWrittenPremium,2)\n\tROUND(MonthlyTotalDirectWrittenPremium, 2) AS Rounded_MonthlyTotalDirectWrittenPremium,\n\tProductCode,\n\tStrategicProfitCenterAbbreviation,\n\tAccountingProductCode,\n\tInsuranceReferenceLineOfBusinessCode,\n\tASLCode AS asl_code,\n\tSubASLCode AS sub_asl_code,\n\tPrimaryStateCode AS state_of_domicile_code,\n\tCoverageEffectiveDate,\n\tCoverageExpirationDate,\n\tEndorsementStartDate AS Endorsement_Start_Date,\n\tEndorsementIssueDate AS Endorsement_Issue_Date,\n\tPolicyIssueDate AS Policy_Issue_Date,\n\tSourceSequenceNumber AS Source_Seq_Num,\n\tTransactionNumber AS Tran_No,\n\tEndorsementNumber AS Endorsement_No,\n\tASLCoversKey,\n\tDateKey,\n\tPremiumMasterCalculationPKId AS PremiumMasterCalculationPKID,\n\tReinsuranceUmbrellaLayer AS ReinsuranceUmbrellalayer,\n\tOSECode AS OSE_Flag,\n\tRatingPlanAbbreviation,\n\tFirstNameIsured,\n\t-- *INF*: IIF(ISNULL(@{pipeline().parameters.NUMBEROFPOLICYQUEUES}) or @{pipeline().parameters.NUMBEROFPOLICYQUEUES}=0,\r\n\t-- 1,\r\n\t-- MOD(TO_INTEGER(REVERSE(SUBSTR(REVERSE(pol_key),3,2))), @{pipeline().parameters.NUMBEROFPOLICYQUEUES}) + 1\r\n\t-- )\n\tIFF(\n\t    @{pipeline().parameters.NUMBEROFPOLICYQUEUES} IS NULL or @{pipeline().parameters.NUMBEROFPOLICYQUEUES} = 0, 1,\n\t    MOD(CAST(REVERSE(SUBSTR(REVERSE(pol_key), 3, 2)) AS INTEGER), @{pipeline().parameters.NUMBEROFPOLICYQUEUES}) + 1\n\t) AS QueueNumber,\n\tEntryProcess\n\tFROM SQ_SapiensReinsurancePolicy\n),\nAGG_HeaderInfo AS (\n\tSELECT\n\tpol_key,\n\tDocumntType,\n\tAccounting_Date,\n\tMonthlyTotalDirectWrittenPremium,\n\t-- *INF*: trunc(SUM(MonthlyTotalDirectWrittenPremium),4)\n\tTRUNC(SUM(MonthlyTotalDirectWrittenPremium),4) AS O_MonthlyTotalDirectWrittenPremium,\n\tProductCode,\n\tStrategicProfitCenterAbbreviation,\n\tAccountingProductCode,\n\tInsuranceReferenceLineOfBusinessCode,\n\tasl_code,\n\tsub_asl_code,\n\tstate_of_domicile_code,\n\tCoverageEffectiveDate,\n\tCoverageExpirationDate,\n\tEndorsement_Start_Date,\n\tEndorsement_Issue_Date,\n\tPolicy_Issue_Date,\n\t-- *INF*: MIN(Policy_Issue_Date)\n\tMIN(Policy_Issue_Date) AS O_Policy_Issue_Date,\n\tSource_Seq_Num,\n\tTran_No,\n\tEndorsement_No,\n\tASLCoversKey,\n\tDateKey,\n\tReinsuranceUmbrellalayer,\n\tOSE_Flag,\n\t-- *INF*: MAX(OSE_Flag)\n\tMAX(OSE_Flag) AS O_OSE_Flag,\n\tRatingPlanAbbreviation,\n\tFirstNameIsured,\n\tQueueNumber,\n\tEntryProcess,\n\tRounded_MonthlyTotalDirectWrittenPremium,\n\t-- *INF*: sum(Rounded_MonthlyTotalDirectWrittenPremium)\n\tsum(Rounded_MonthlyTotalDirectWrittenPremium) AS O_Rounded_MonthlyTotalDirectWrittenPremium\n\tFROM SRC_DataCollect\n\tGROUP BY pol_key, DocumntType, Accounting_Date, ProductCode, StrategicProfitCenterAbbreviation, AccountingProductCode, InsuranceReferenceLineOfBusinessCode, asl_code, sub_asl_code, state_of_domicile_code, CoverageEffectiveDate, CoverageExpirationDate, Endorsement_Start_Date, Endorsement_Issue_Date, Source_Seq_Num, Tran_No, Endorsement_No, ReinsuranceUmbrellalayer\n),\nFIL_Nonzero_Premiums AS (\n\tSELECT\n\tpol_key, \n\tDocumntType, \n\tAccounting_Date, \n\tO_MonthlyTotalDirectWrittenPremium, \n\tProductCode, \n\tStrategicProfitCenterAbbreviation, \n\tAccountingProductCode, \n\tInsuranceReferenceLineOfBusinessCode, \n\tasl_code, \n\tsub_asl_code, \n\tstate_of_domicile_code, \n\tCoverageEffectiveDate, \n\tCoverageExpirationDate, \n\tEndorsement_Start_Date, \n\tEndorsement_Issue_Date, \n\tO_Policy_Issue_Date AS Policy_Issue_Date, \n\tSource_Seq_Num, \n\tTran_No, \n\tEndorsement_No, \n\tASLCoversKey, \n\tDateKey, \n\tReinsuranceUmbrellalayer, \n\tO_OSE_Flag, \n\tRatingPlanAbbreviation, \n\tFirstNameIsured, \n\tQueueNumber, \n\tEntryProcess, \n\tO_Rounded_MonthlyTotalDirectWrittenPremium AS Rounded_MonthlyTotalDirectWrittenPremium\n\tFROM AGG_HeaderInfo\n\tWHERE abs(O_MonthlyTotalDirectWrittenPremium) > 0.01\n),\nEXP_Pol_Attributes AS (\n\tSELECT\n\tSource_Seq_Num AS Header_Source_Seq_Num,\n\t'LOB' AS out_LOB_Code,\n\tInsuranceReferenceLineOfBusinessCode AS LOB_Value,\n\t'PDT' AS out_ProductCode_Code,\n\tProductCode AS ProductCode_Value,\n\t'ASL' AS out_asl_code_Code,\n\tasl_code AS asl_code_Value,\n\t'SAS' AS out_sub_asl_code_Code,\n\tsub_asl_code AS sub_asl_code_Value,\n\t'PCN' AS out_StrategicProfitCenter_Code,\n\tStrategicProfitCenterAbbreviation AS StrategicProfitCenter_Value,\n\t-- *INF*: REPLACECHR(false,StrategicProfitCenter_Value, ' ', '')\n\tREGEXP_REPLACE(StrategicProfitCenter_Value,' ','') AS out_StrategicProfitCenter_Value,\n\t'RKS' AS out_RiskState_Code,\n\tstate_of_domicile_code AS RiskState_Value,\n\t-- *INF*: substr(RiskState_Value, 1, 50)\n\tsubstr(RiskState_Value, 1, 50) AS out_RiskState_Value,\n\t'COM' AS out_Company_Code,\n\t'WBMI' AS Company_Value,\n\t0 AS Out_Obj_Val_Seq_no,\n\t'SNA' AS O_UmbrellaLayerCode,\n\tReinsuranceUmbrellalayer,\n\t-- *INF*: TO_CHAR(ReinsuranceUmbrellalayer)\n\tTO_CHAR(ReinsuranceUmbrellalayer) AS O_ReinsuranceUmbrellalayer,\n\t'ACP' AS O_AccountingProductCode,\n\tAccountingProductCode,\n\t'ZRP' AS O_RatingPlanCode,\n\tRatingPlanAbbreviation,\n\t'INM' AS FirstNameInsuredCode,\n\tFirstNameIsured,\n\t'HIS' AS HISCode,\n\t@{pipeline().parameters.HIS_VALUE} AS HISValue,\n\tEntryProcess,\n\t'ZRS' AS EntryCode,\n\t'POLICY-'||EntryProcess AS EntryValue,\n\tAccounting_Date\n\tFROM FIL_Nonzero_Premiums\n),\nNRM_Pol_Attributes AS (\n),\nFIL_Pol_Attributes AS (\n\tSELECT\n\tHeader_Source_Seq_Num, \n\tAttr_Code, \n\tAttr_Value, \n\tObj_Val_Seq_no\n\tFROM NRM_Pol_Attributes\n\tWHERE IIF(Attr_Code<>'SNA',\r\n\tIIF(Attr_Code<>'HIS',\r\n\t\t1,\r\n\t\tIIF(Attr_Value<>'NOACC',\r\n\t\t\t0,\r\n\t\t\t1)\r\n\t\t),\r\n\tIIF(Attr_Value='0',\r\n\t\t0,\r\n\t\t1)\r\n\t)\r\nAND NOT ISNULL(Attr_Value)\r\n\r\n--IIF(Attr_Code<>'SNA',IIF(Attr_Code<>'HIS',1,IIF(Attr_Value<>'NOACC',0,1)),IIF(Attr_Value='0',0,1))=1\r\n\r\n--Attr_Code <> 'SAS' and Attr_Value <> 'N/A' OR (Attr_Code='SNA' and Attr_Value<>'0')\n),\nEXP_AddMetadata_Attributes AS (\n\tSELECT\n\tHeader_Source_Seq_Num,\n\tAttr_Code,\n\tAttr_Value,\n\tObj_Val_Seq_no,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CurrentDateTime\n\tFROM FIL_Pol_Attributes\n),\nSapiensReinsuranceAttributesExtract AS (\n\tTRUNCATE TABLE SapiensReinsuranceAttributesExtract;\n\tINSERT INTO SapiensReinsuranceAttributesExtract\n\t(SOURCE_SEQ_NUM, ATTR_CODE, ATTR_VAL, OBJ_VAL_SEQ_NO, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tHeader_Source_Seq_Num AS SOURCE_SEQ_NUM, \n\tAttr_Code AS ATTR_CODE, \n\tAttr_Value AS ATTR_VAL, \n\tObj_Val_Seq_no AS OBJ_VAL_SEQ_NO, \n\tAUDITID, \n\tCurrentDateTime AS CREATEDDATE, \n\tCurrentDateTime AS MODIFIEDDATE\n\tFROM EXP_AddMetadata_Attributes\n),\nSRT_Dates AS (\n\tSELECT\n\tSource_Seq_Num, \n\tCoverageEffectiveDate AS Policy_Start_date, \n\tCoverageExpirationDate AS Policy_End_Date, \n\tPolicy_Issue_Date, \n\tEndorsement_Start_Date, \n\tEndorsement_Issue_Date, \n\tAccounting_Date\n\tFROM FIL_Nonzero_Premiums\n\tORDER BY Source_Seq_Num ASC, Policy_Start_date ASC, Policy_End_Date ASC, Policy_Issue_Date ASC, Endorsement_Start_Date ASC, Endorsement_Issue_Date ASC, Accounting_Date ASC\n),\nEXP_AllignData_Dates AS (\n\tSELECT\n\tSource_Seq_Num AS Header_Source_Seq_Num,\n\t'PLS' AS pol_eff_date_code,\n\tPolicy_Start_date AS pol_eff_date_value,\n\t-- *INF*: TO_CHAR(pol_eff_date_value,'YYYYMMDD')\n\tTO_CHAR(pol_eff_date_value, 'YYYYMMDD') AS O_pol_eff_date_value,\n\t'PLE' AS pol_exp_date_code,\n\tPolicy_End_Date AS pol_exp_date_value,\n\t-- *INF*: TO_CHAR(pol_exp_date_value,'YYYYMMDD')\n\tTO_CHAR(pol_exp_date_value, 'YYYYMMDD') AS O_pol_exp_date_value,\n\t'PIS' AS pol_incp_date_code,\n\tPolicy_Issue_Date AS orig_incptn_date_value,\n\t-- *INF*: TO_CHAR(orig_incptn_date_value,'YYYYMMDD')\n\tTO_CHAR(orig_incptn_date_value, 'YYYYMMDD') AS O_orig_incptn_date_value,\n\t'ENS' AS endorsement_start_date_code,\n\tEndorsement_Start_Date AS endorsement_start_date_value,\n\t-- *INF*: TO_CHAR(endorsement_start_date_value,'YYYYMMDD')\n\tTO_CHAR(endorsement_start_date_value, 'YYYYMMDD') AS O_endorsement_start_date_value,\n\t'EIS' AS endorsement_end_date_code,\n\tEndorsement_Issue_Date AS endorsement_end_date_value,\n\t-- *INF*: TO_CHAR(endorsement_end_date_value,'YYYYMMDD')\n\tTO_CHAR(endorsement_end_date_value, 'YYYYMMDD') AS O_endorsement_end_date_value,\n\t'PRC' AS Process_Date,\n\tAccounting_Date,\n\t-- *INF*: TO_CHAR(Accounting_Date,'YYYYMMDD')\n\tTO_CHAR(Accounting_Date, 'YYYYMMDD') AS O_ProcessDate\n\tFROM SRT_Dates\n),\nNRM_Pol_Dates AS (\n),\nAGG_Eliminate_Data_Duplicates AS (\n\tSELECT\n\tHeader_Source_Seq_Num,\n\tDate_Code,\n\tDate_Value\n\tFROM NRM_Pol_Dates\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY Header_Source_Seq_Num, Date_Code, Date_Value ORDER BY NULL) = 1\n),\nEXP_Pol_Dates AS (\n\tSELECT\n\tHeader_Source_Seq_Num,\n\tDate_Code,\n\tDate_Value,\n\t-- *INF*: to_date(Date_Value,'YYYYMMDD')\n\tTO_TIMESTAMP(Date_Value, 'YYYYMMDD') AS out_Date_Value,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CurrentDateTime\n\tFROM AGG_Eliminate_Data_Duplicates\n),\nSapiensReinsuranceDatesExtract AS (\n\tTRUNCATE TABLE SapiensReinsuranceDatesExtract;\n\tINSERT INTO SapiensReinsuranceDatesExtract\n\t(SOURCE_SEQ_NUM, DATE_CODE, DATE_VALUE, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tHeader_Source_Seq_Num AS SOURCE_SEQ_NUM, \n\tDate_Code AS DATE_CODE, \n\tout_Date_Value AS DATE_VALUE, \n\tAUDITID, \n\tCurrentDateTime AS CREATEDDATE, \n\tCurrentDateTime AS MODIFIEDDATE\n\tFROM EXP_Pol_Dates\n),\nEXP_Pol_Header AS (\n\tSELECT\n\tSource_Seq_Num AS Header_Source_Seq_Num,\n\t'SRP' AS Data_Source,\n\t'WBMI' AS Company_Code,\n\tpol_key,\n\t'' AS Object_ID,\n\tEndorsement_No AS Header_Endorsement_No,\n\tTran_No AS Header_Trans_No,\n\tDocumntType AS Header_Document_Type,\n\t'' AS Claim_Id,\n\t'' AS Sub_Claim_Id,\n\t'' AS Is_Borderaeu,\n\t'CED' AS Business_Ind,\n\tO_OSE_Flag AS Exception_Ind,\n\tQueueNumber AS Queue_No,\n\t'P&C' AS Business_Deprtmt,\n\t'' AS XOL_Allocation,\n\t'' AS Assumed_Company,\n\tAccounting_Date,\n\t-- *INF*: TO_INTEGER(TO_CHAR(Accounting_Date,'YYYYMM'))\n\tCAST(TO_CHAR(Accounting_Date, 'YYYYMM') AS INTEGER) AS AccountingMonth,\n\t'1' AS Subsystem_Id,\n\tASLCoversKey,\n\tDateKey\n\tFROM FIL_Nonzero_Premiums\n),\nSRT_Set_OrderSequence AS (\n\tSELECT\n\tpol_key, \n\tASLCoversKey, \n\tDateKey, \n\tHeader_Source_Seq_Num, \n\tData_Source, \n\tCompany_Code, \n\tObject_ID, \n\tHeader_Endorsement_No, \n\tHeader_Trans_No, \n\tHeader_Document_Type, \n\tClaim_Id, \n\tSub_Claim_Id, \n\tIs_Borderaeu, \n\tBusiness_Ind, \n\tException_Ind, \n\tQueue_No, \n\tBusiness_Deprtmt, \n\tXOL_Allocation, \n\tAssumed_Company, \n\tAccountingMonth, \n\tSubsystem_Id\n\tFROM EXP_Pol_Header\n\tORDER BY pol_key ASC, ASLCoversKey ASC, DateKey ASC, Header_Source_Seq_Num ASC\n),\nLKP_GetPriorPolicyCoversActivity AS (\n\tSELECT\n\tASLCoversKey,\n\tDateKey\n\tFROM (\n\t\tSELECT  A.ASLCoversKey AS ASLCoversKey,  A.DateKey AS DateKey \r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy A with (NOLOCK)\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsuranceHeaderExtract B with (NOLOCK)\r\n\t\ton A.SourceSequenceNumber=B.SOURCE_SEQ_NUM\r\n\t\tINNER JOIN\r\n\t\t(SELECT PolicyKey,max(case when DocumntType='N' then SourceSequenceNumber else 0 end) max_SourceSequenceNumber\r\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy X with (NOLOCK)\r\n\t\tWHERE EXISTS (SELECT 1 from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.SapiensReinsurancePolicy C with (NOLOCK) where X.PolicyKey=C.PolicyKey)\r\n\t\tGROUP BY PolicyKey) D\r\n\t\tON A.PolicyKey=D.PolicyKey and A.SourceSequenceNumber>D.max_SourceSequenceNumber\r\n\t\tGROUP BY A.ASLCoversKey,A.DateKey\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ASLCoversKey,DateKey ORDER BY ASLCoversKey) = 1\n),\nEXP_SetDocumentType AS (\n\tSELECT\n\tSRT_Set_OrderSequence.Header_Source_Seq_Num,\n\tSRT_Set_OrderSequence.Data_Source,\n\tSRT_Set_OrderSequence.Company_Code,\n\tSRT_Set_OrderSequence.pol_key,\n\tSRT_Set_OrderSequence.Object_ID,\n\tSRT_Set_OrderSequence.Header_Endorsement_No,\n\tSRT_Set_OrderSequence.Header_Trans_No,\n\tSRT_Set_OrderSequence.Header_Document_Type,\n\t-- *INF*: IIF(ISNULL(LKP_ASLCoversKey),iif(pol_key=v_pol_key and ASLCoversKey=v_ASLCoversKey and DateKey=v_DateKey,'E','P'),'E')\n\tIFF(\n\t    LKP_ASLCoversKey IS NULL,\n\t    IFF(\n\t        pol_key = v_pol_key\n\t    and ASLCoversKey = v_ASLCoversKey\n\t    and DateKey = v_DateKey, 'E',\n\t        'P'\n\t    ),\n\t    'E'\n\t) AS v_Header_Document_Type,\n\tv_Header_Document_Type AS O_Header_Document_Type,\n\tSRT_Set_OrderSequence.Claim_Id,\n\tSRT_Set_OrderSequence.Sub_Claim_Id,\n\tSRT_Set_OrderSequence.Is_Borderaeu,\n\tSRT_Set_OrderSequence.Business_Ind,\n\tSRT_Set_OrderSequence.Exception_Ind,\n\tSRT_Set_OrderSequence.Queue_No,\n\tSRT_Set_OrderSequence.Business_Deprtmt,\n\tSRT_Set_OrderSequence.XOL_Allocation,\n\tSRT_Set_OrderSequence.Assumed_Company,\n\tSRT_Set_OrderSequence.AccountingMonth,\n\tSRT_Set_OrderSequence.Subsystem_Id,\n\tLKP_GetPriorPolicyCoversActivity.ASLCoversKey AS LKP_ASLCoversKey,\n\tSRT_Set_OrderSequence.ASLCoversKey,\n\tSRT_Set_OrderSequence.DateKey,\n\tpol_key AS v_pol_key,\n\tASLCoversKey AS v_ASLCoversKey,\n\tDateKey AS v_DateKey,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CurrentDateTime\n\tFROM SRT_Set_OrderSequence\n\tLEFT JOIN LKP_GetPriorPolicyCoversActivity\n\tON LKP_GetPriorPolicyCoversActivity.ASLCoversKey = SRT_Set_OrderSequence.ASLCoversKey AND LKP_GetPriorPolicyCoversActivity.DateKey = SRT_Set_OrderSequence.DateKey\n),\nSapiensReinsuranceHeaderExtract AS (\n\tTRUNCATE TABLE SapiensReinsuranceHeaderExtract;\n\tINSERT INTO SapiensReinsuranceHeaderExtract\n\t(SOURCE_SEQ_NUM, DATA_SOURCE, COMPANY_CODE, POLICY_NO, OBJECT_ID, ENDORSEMENT_NO, TRAN_NO, DOCUMENT_TYPE, CLAIM_ID, SUB_CLAIM_ID, IS_BORDERAEU, BUSINESS_IND, EXCEPTION_IND, QUEUE_NO, BUSINESS_DEPRTMT, XOL_ALLOCATION, ASSUMED_COMPANY, ACCOUNTING_MONTH, SUBSYSTEM_ID, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tHeader_Source_Seq_Num AS SOURCE_SEQ_NUM, \n\tData_Source AS DATA_SOURCE, \n\tCompany_Code AS COMPANY_CODE, \n\tpol_key AS POLICY_NO, \n\tObject_ID AS OBJECT_ID, \n\tHeader_Endorsement_No AS ENDORSEMENT_NO, \n\tHeader_Trans_No AS TRAN_NO, \n\tO_Header_Document_Type AS DOCUMENT_TYPE, \n\tClaim_Id AS CLAIM_ID, \n\tSub_Claim_Id AS SUB_CLAIM_ID, \n\tIs_Borderaeu AS IS_BORDERAEU, \n\tBusiness_Ind AS BUSINESS_IND, \n\tException_Ind AS EXCEPTION_IND, \n\tQueue_No AS QUEUE_NO, \n\tBusiness_Deprtmt AS BUSINESS_DEPRTMT, \n\tXOL_Allocation AS XOL_ALLOCATION, \n\tAssumed_Company AS ASSUMED_COMPANY, \n\tAccountingMonth AS ACCOUNTING_MONTH, \n\tSubsystem_Id AS SUBSYSTEM_ID, \n\tAUDITID, \n\tCurrentDateTime AS CREATEDDATE, \n\tCurrentDateTime AS MODIFIEDDATE\n\tFROM EXP_SetDocumentType\n),\nEXP_Pol_Accounting AS (\n\tSELECT\n\tSource_Seq_Num AS Header_Source_Seq_Num,\n\t'INS' AS Sum_Insured_Accounting_Item,\n\t1 AS Sum_Insured_Accounting_Amount,\n\t'USD' AS Sum_Insured_Currency_Code,\n\t'NPR' AS Incoming_Premium_Accounting_Item,\n\tO_MonthlyTotalDirectWrittenPremium AS Incoming_Premium_Accounting_Amount,\n\t'USD' AS Incomming_Premium_Currency_Code,\n\tRounded_MonthlyTotalDirectWrittenPremium\n\tFROM FIL_Nonzero_Premiums\n),\nNRM_Pol_Accounting AS (\n),\nEXP_AddMetadata_AccountingItems AS (\n\tSELECT\n\tHeader_Source_Seq_Num,\n\tAccounting_Item,\n\tAccounting_Amount,\n\t-- *INF*: ROUND(Accounting_Amount,2)\n\tROUND(Accounting_Amount, 2) AS o_Accounting_Amount,\n\tCurrency_Code,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CurrentDateTime\n\tFROM NRM_Pol_Accounting\n),\nSapiensReinsuranceAccountingItemsExtract AS (\n\tTRUNCATE TABLE SapiensReinsuranceAccountingItemsExtract;\n\tINSERT INTO SapiensReinsuranceAccountingItemsExtract\n\t(SOURCE_SEQ_NUM, ACCOUNTING_ITEM, ACOUNTING_AMOUNT, CURRENCY_CODE, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tHeader_Source_Seq_Num AS SOURCE_SEQ_NUM, \n\tAccounting_Item AS ACCOUNTING_ITEM, \n\to_Accounting_Amount AS ACOUNTING_AMOUNT, \n\tCurrency_Code AS CURRENCY_CODE, \n\tAUDITID, \n\tCurrentDateTime AS CREATEDDATE, \n\tCurrentDateTime AS MODIFIEDDATE\n\tFROM EXP_AddMetadata_AccountingItems\n),\nSQ_EarnedPremiumTransactionMonthlyFact AS (\n\tDeclare @StartDate as datetime, \r\n\t\t@EndDate as datetime\r\n\tset @EndDate = dateadd(dd,-1,dateadd(MM,-@{pipeline().parameters.NO_OF_MONTHS},dateadd(mm,Datediff(mm,0,getdate()),0)))\r\n\tset @StartDate = case when '@{pipeline().parameters.PMSESSIONNAME}' like '%Restate%' or '@{pipeline().parameters.PMSESSIONNAME}' like '%Historical%' then '2001-01-31 00:00:00'  else dateadd(MM,-@{pipeline().parameters.NO_OF_MONTHS}-1,dateadd(mm,Datediff(mm,0,getdate()),0)) end\r\n\t\r\n\tSELECT MonthlyChangeinDirectEarnedPremium,\r\n\t\tRD.clndr_date Process_Date,\r\n\t\tEP.EDWPremiumMasterCalculationPKId,\r\n\t\tP.Pol_Key,\r\n\t\tASL.asl_code,\r\n\t\tCASE WHEN ASL.asl_code IN ('440', '500') \r\n\t\t\tTHEN CASE WHEN ASL.sub_asl_code = 'N/A' \r\n\t\t\t\tTHEN NULL \r\n\t\t\t\tELSE ASL.sub_asl_code \r\n\t\t\t\tEND \r\n\t\t\tWHEN ASL.asl_code = '220' \r\n\t\t\t\tTHEN '220' \r\n\t\t\t\tELSE 'N/A' \r\n\t\tEND AS sub_asl_code\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.EarnedPremiumTransactionMonthlyFact EP\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransactionTypeDim PTT ON EP.PremiumTransactionTypeDimID = PTT.PremiumTransactionTypeDimID\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim RD ON EP.PremiumTransactionRunDateID = RD.clndr_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P ON EP.PolicyDimID = P.pol_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL ON EP.AnnualStatementLineDimID = ASL.asl_dim_id\r\n\tWHERE PTT.PremiumTypeCode = 'D'\r\n\t\tAND RD.clndr_date BETWEEN @StartDate AND @EndDate \r\n\t@{pipeline().parameters.WHERE} \r\n\t\r\n\tUNION\r\n\t\r\n\tSELECT MonthlyChangeinCededEarnedPremium as MonthlyChangeinDirectEarnedPremium,\r\n\t\tRD.clndr_date Process_Date,\r\n\t\tEP.EDWPremiumMasterCalculationPKId,\r\n\t\tP.Pol_Key,\r\n\t\tASL.asl_code,\r\n\t\tCASE WHEN ASL.asl_code IN ('440', '500') \r\n\t\t\tTHEN CASE WHEN ASL.sub_asl_code = 'N/A' \r\n\t\t\t\tTHEN NULL \r\n\t\t\t\tELSE ASL.sub_asl_code \r\n\t\t\t\tEND \r\n\t\t\tWHEN ASL.asl_code = '220' \r\n\t\t\t\tTHEN '220' \r\n\t\t\t\tELSE 'N/A' \r\n\t\tEND AS sub_asl_code\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.EarnedPremiumTransactionMonthlyFact EP\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransactionTypeDim PTT ON EP.PremiumTransactionTypeDimID = PTT.PremiumTransactionTypeDimID\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim RD ON EP.PremiumTransactionRunDateID = RD.clndr_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P ON EP.PolicyDimID = P.pol_dim_id\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL ON EP.AnnualStatementLineDimID = ASL.asl_dim_id\r\n\tWHERE PTT.PremiumTypeCode = 'C' and P.pol_sym !='000'\r\n\t\tAND RD.clndr_date BETWEEN @StartDate AND @EndDate \r\n\t@{pipeline().parameters.WHERE} \r\n\t\r\n\tORDER BY EP.EDWPremiumMasterCalculationPKId\n),\nEXP_SourceDataCollect AS (\n\tSELECT\n\tMonthlyChangeinDirectEarnedPremium,\n\t-- *INF*: ROUND(MonthlyChangeinDirectEarnedPremium,2)\n\tROUND(MonthlyChangeinDirectEarnedPremium, 2) AS Rounded_MonthlyChangeinDirectEarnedPremium,\n\tProcess_Date,\n\tEDWPremiumMasterCalculationPKId,\n\tPolicyKey,\n\t-- *INF*: IIF(ISNULL(@{pipeline().parameters.NUMBEROFPOLICYQUEUES}) or @{pipeline().parameters.NUMBEROFPOLICYQUEUES}=0,\r\n\t-- 1,\r\n\t-- MOD(TO_INTEGER(REVERSE(SUBSTR(REVERSE(PolicyKey),3,2))), @{pipeline().parameters.NUMBEROFPOLICYQUEUES}) + 1\r\n\t-- )\n\tIFF(\n\t    @{pipeline().parameters.NUMBEROFPOLICYQUEUES} IS NULL or @{pipeline().parameters.NUMBEROFPOLICYQUEUES} = 0, 1,\n\t    MOD(CAST(REVERSE(SUBSTR(REVERSE(PolicyKey), 3, 2)) AS INTEGER), @{pipeline().parameters.NUMBEROFPOLICYQUEUES}) + 1\n\t) AS Queue_Number,\n\tasl_code,\n\tsub_asl_code\n\tFROM SQ_EarnedPremiumTransactionMonthlyFact\n),\nLKP_Get_Src_Seq_Num AS (\n\tSELECT\n\tSourceSequenceNumber,\n\tPremium,\n\tPremiumMasterCalculationPKId,\n\tASLCode,\n\tSubASLCode\n\tFROM (\n\t\tselect SourceSequenceNumber as SourceSequenceNumber,PremiumMasterCalculationPKId as PremiumMasterCalculationPKId,sum(MonthlyTotalDirectWrittenPremium) over(partition by sourcesequencenumber) as Premium,A.ASLCode as ASLCode,isnull(A.SubASLCode,'N/A') as SubASLCode \r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy A\r\n\t\tinner join  \r\n\t\t(select PolicyKey,max(case when DocumntType='N' then SourceSequenceNumber else 0 end) max_SourceSequenceNumber\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy\r\n\t\tgroup by PolicyKey) B\r\n\t\ton A.PolicyKey=B.PolicyKey\r\n\t\tand A.SourceSequenceNumber>B.max_SourceSequenceNumber\r\n\t\twhere EntryProcess='MONTHLY'\r\n\t\tand not exists (select 1 from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy C\r\n\t\twhere A.SourceSequenceNumber=C.SourceSequenceNumber\r\n\t\tgroup by SourceSequenceNumber\r\n\t\thaving abs(sum(C.MonthlyTotalDirectWrittenPremium))<=0.01)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumMasterCalculationPKId,ASLCode,SubASLCode ORDER BY SourceSequenceNumber DESC) = 1\n),\nLKP_Get_Src_Seq_Num_WithoutASL AS (\n\tSELECT\n\tSourceSequenceNumber,\n\tPremium,\n\tPremiumMasterCalculationPKId\n\tFROM (\n\t\tselect A.SourceSequenceNumber as SourceSequenceNumber,A.PremiumMasterCalculationPKId  as PremiumMasterCalculationPKId,A.Premium as Premium from (\r\n\t\tselect SourceSequenceNumber ,PremiumMasterCalculationPKId,sum(MonthlyTotalDirectWrittenPremium) over(partition by sourcesequencenumber) as Premium,A.ASLCode as ASLCode,isnull(A.SubASLCode,'N/A') as SubASLCode \r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy A\r\n\t\tinner join  \r\n\t\t(select PolicyKey,max(case when DocumntType='N' then SourceSequenceNumber else 0 end) max_SourceSequenceNumber\r\n\t\tfrom @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy\r\n\t\tgroup by PolicyKey) B\r\n\t\ton A.PolicyKey=B.PolicyKey\r\n\t\tand A.SourceSequenceNumber>B.max_SourceSequenceNumber\r\n\t\twhere EntryProcess='MONTHLY'\r\n\t\tand not exists (select 1 from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ArchSapiensReinsurancePolicy C\r\n\t\twhere A.SourceSequenceNumber=C.SourceSequenceNumber\r\n\t\tgroup by SourceSequenceNumber\r\n\t\thaving abs(sum(C.MonthlyTotalDirectWrittenPremium))<=0.01)\r\n\t\t) A\r\n\t\tgroup by SourceSequenceNumber,PremiumMasterCalculationPKId,Premium\r\n\t\thaving count(1)=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumMasterCalculationPKId ORDER BY SourceSequenceNumber DESC) = 1\n),\nEXP_Get_Source_Seq_Num AS (\n\tSELECT\n\tEXP_SourceDataCollect.MonthlyChangeinDirectEarnedPremium,\n\tEXP_SourceDataCollect.Process_Date,\n\tEXP_SourceDataCollect.EDWPremiumMasterCalculationPKId,\n\tLKP_Get_Src_Seq_Num.Premium AS MonthlyTotalDirectWrittenPremium_WithASL,\n\tLKP_Get_Src_Seq_Num.SourceSequenceNumber AS SourceSequenceNumber_WithASL,\n\tEXP_SourceDataCollect.Queue_Number,\n\tEXP_SourceDataCollect.Rounded_MonthlyChangeinDirectEarnedPremium,\n\tLKP_Get_Src_Seq_Num_WithoutASL.SourceSequenceNumber AS SourceSequenceNumber_WithoutASL,\n\tLKP_Get_Src_Seq_Num_WithoutASL.Premium AS MonthlyTotalDirectWrittenPremium_WithoutASL,\n\t-- *INF*: IIF(ISNULL(SourceSequenceNumber_WithASL),SourceSequenceNumber_WithoutASL,SourceSequenceNumber_WithASL)\n\tIFF(\n\t    SourceSequenceNumber_WithASL IS NULL, SourceSequenceNumber_WithoutASL,\n\t    SourceSequenceNumber_WithASL\n\t) AS SourceSequenceNumber,\n\t-- *INF*: IIF(ISNULL(MonthlyTotalDirectWrittenPremium_WithASL),MonthlyTotalDirectWrittenPremium_WithoutASL,MonthlyTotalDirectWrittenPremium_WithASL)\n\tIFF(\n\t    MonthlyTotalDirectWrittenPremium_WithASL IS NULL,\n\t    MonthlyTotalDirectWrittenPremium_WithoutASL,\n\t    MonthlyTotalDirectWrittenPremium_WithASL\n\t) AS MonthlyTotalDirectWrittenPremium\n\tFROM EXP_SourceDataCollect\n\tLEFT JOIN LKP_Get_Src_Seq_Num\n\tON LKP_Get_Src_Seq_Num.PremiumMasterCalculationPKId = EXP_SourceDataCollect.EDWPremiumMasterCalculationPKId AND LKP_Get_Src_Seq_Num.ASLCode = EXP_SourceDataCollect.asl_code AND LKP_Get_Src_Seq_Num.SubASLCode = EXP_SourceDataCollect.sub_asl_code\n\tLEFT JOIN LKP_Get_Src_Seq_Num_WithoutASL\n\tON LKP_Get_Src_Seq_Num_WithoutASL.PremiumMasterCalculationPKId = EXP_SourceDataCollect.EDWPremiumMasterCalculationPKId\n),\nAGG_Paryments AS (\n\tSELECT\n\tSourceSequenceNumber AS Source_Seq_Num,\n\tMonthlyChangeinDirectEarnedPremium,\n\t-- *INF*: Sum(MonthlyChangeinDirectEarnedPremium)\n\tSum(MonthlyChangeinDirectEarnedPremium) AS O_MonthlyChangeinDirectEarnedPremium,\n\tProcess_Date AS EP_Process_Date,\n\tMonthlyTotalDirectWrittenPremium,\n\tQueue_Number AS QueueNumber,\n\tRounded_MonthlyChangeinDirectEarnedPremium,\n\t-- *INF*: sum(Rounded_MonthlyChangeinDirectEarnedPremium)\n\tsum(Rounded_MonthlyChangeinDirectEarnedPremium) AS O_Rounded_MonthlyChangeinDirectEarnedPremium\n\tFROM EXP_Get_Source_Seq_Num\n\tGROUP BY Source_Seq_Num, EP_Process_Date\n),\nFIL_Zero_Written AS (\n\tSELECT\n\tSource_Seq_Num, \n\tO_MonthlyChangeinDirectEarnedPremium, \n\tEP_Process_Date, \n\tMonthlyTotalDirectWrittenPremium AS O_MonthlyTotalDirectWrittenPremium, \n\tQueueNumber, \n\tO_Rounded_MonthlyChangeinDirectEarnedPremium AS Rounded_MonthlyChangeinDirectEarnedPremium\n\tFROM AGG_Paryments\n\tWHERE (NOT ISNULL(Source_Seq_Num)) AND abs(O_MonthlyTotalDirectWrittenPremium) > 0.01\n),\nSRT_Payments AS (\n\tSELECT\n\tSource_Seq_Num, \n\tO_MonthlyChangeinDirectEarnedPremium AS MonthlyChangeinDirectEarnedPremium, \n\tEP_Process_Date, \n\tO_MonthlyTotalDirectWrittenPremium, \n\tQueueNumber, \n\tRounded_MonthlyChangeinDirectEarnedPremium\n\tFROM FIL_Zero_Written\n\tORDER BY Source_Seq_Num ASC, EP_Process_Date ASC\n),\nEXP_Pol_Payments AS (\n\tSELECT\n\tSource_Seq_Num AS Header_Source_Seq_Num,\n\t-- *INF*: :LKP.LKP_TGT_PAYMENT_GET_SEQ_NUM(Header_Source_Seq_Num)\n\tLKP_TGT_PAYMENT_GET_SEQ_NUM_Header_Source_Seq_Num.ACP_SEQ_NUM AS v_LKP_ACP_SEQ_NUM,\n\t-- *INF*: IIF(Header_Source_Seq_Num<>v_Header_Source_Seq_Num,\r\n\t-- IIF(ISNULL(v_LKP_ACP_SEQ_NUM),1,v_LKP_ACP_SEQ_NUM+1),v_ACP_SEQ_NUM+1\r\n\t-- )\n\tIFF(\n\t    Header_Source_Seq_Num <> v_Header_Source_Seq_Num,\n\t    IFF(\n\t        v_LKP_ACP_SEQ_NUM IS NULL, 1, v_LKP_ACP_SEQ_NUM + 1\n\t    ),\n\t    v_ACP_SEQ_NUM + 1\n\t) AS v_ACP_SEQ_NUM,\n\tv_ACP_SEQ_NUM AS ACP_SEQ_NUM,\n\tHeader_Source_Seq_Num AS v_Header_Source_Seq_Num,\n\tMonthlyChangeinDirectEarnedPremium,\n\t-- *INF*: ROUND(MonthlyChangeinDirectEarnedPremium,2)\n\tROUND(MonthlyChangeinDirectEarnedPremium, 2) AS o_MonthlyChangeinDirectEarnedPremium,\n\tEP_Process_Date,\n\t-- *INF*: set_date_part(EP_Process_Date, 'DD', 1)\n\tDATEADD(DAY,1-DATE_PART(DAY,EP_Process_Date),EP_Process_Date) AS Calendar_Month_From_Date,\n\tEP_Process_Date AS Calendar_Month_To_Date,\n\t'NPR' AS out_Accounting_Item,\n\t'ERN' AS out_ACP_Type,\n\tQueueNumber,\n\t1 AS out_ACP_Total_Amount,\n\t1 AS out_ACP_Year_Amount,\n\tO_MonthlyTotalDirectWrittenPremium,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CurrentDateTime,\n\tRounded_MonthlyChangeinDirectEarnedPremium,\n\t@{pipeline().parameters.HIS_VALUE_EP} AS Payment_Attr\n\tFROM SRT_Payments\n\tLEFT JOIN LKP_TGT_PAYMENT_GET_SEQ_NUM LKP_TGT_PAYMENT_GET_SEQ_NUM_Header_Source_Seq_Num\n\tON LKP_TGT_PAYMENT_GET_SEQ_NUM_Header_Source_Seq_Num.SOURCE_SEQ_NUM = Header_Source_Seq_Num\n\n),\nSapiensReinsurancePaymentsExtract AS (\n\tTRUNCATE TABLE SapiensReinsurancePaymentsExtract;\n\tINSERT INTO SapiensReinsurancePaymentsExtract\n\t(SOURCE_SEQ_NUM, ACCOUNTING_ITEM, ACP_SEQ_NUM, ACP_TYPE, ACP_FROM_DT, ACP_TO_DT, ACP_AMOUNT, QUEUE_NO, ACP_TOTAL_AMOUNT, ACP_YEAR_AMOUNT, AuditId, CreatedDate, ModifiedDate, PAYMENT_ATTR)\n\tSELECT \n\tHeader_Source_Seq_Num AS SOURCE_SEQ_NUM, \n\tout_Accounting_Item AS ACCOUNTING_ITEM, \n\tACP_SEQ_NUM, \n\tout_ACP_Type AS ACP_TYPE, \n\tCalendar_Month_From_Date AS ACP_FROM_DT, \n\tCalendar_Month_To_Date AS ACP_TO_DT, \n\to_MonthlyChangeinDirectEarnedPremium AS ACP_AMOUNT, \n\tQueueNumber AS QUEUE_NO, \n\tout_ACP_Total_Amount AS ACP_TOTAL_AMOUNT, \n\tout_ACP_Year_Amount AS ACP_YEAR_AMOUNT, \n\tAUDITID, \n\tCurrentDateTime AS CREATEDDATE, \n\tCurrentDateTime AS MODIFIEDDATE, \n\tPayment_Attr AS PAYMENT_ATTR\n\tFROM EXP_Pol_Payments\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_SAPIENS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NUMBEROFPOLICYQUEUES": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "HIS_VALUE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "PMSESSIONNAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "HIS_VALUE_EP": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}