{
    "name": "s_m_POL_DW_LOAD_WorkPolicyNotSuportedByOffsetAccuracy_DataRepair",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_WorkPolicyNotSuportedByOffsetAccuracy__00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_policy AS (\n\tselect distinct trk.PolicyKey as PolicyKey\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPremiumTransactionTracking trk\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\ton trk.PremiumTransactionID = PT.PremiumTransactionID\r\n\t AND pt.NegateRestateCode <> 'N/A'\r\n\t@{pipeline().parameters.INCREMENTALCOVERAGEFILTER}\n),\nEXP_Pass_Value AS (\n\tSELECT\n\tPolicyKey\n\tFROM SQ_policy\n),\nmplt_Exclusivereason_WorkPolicyNotSuportedByOffsetAccuracy AS (WITH\n\tInput AS (\n\t\t\n\t),\n\tLkp_WorkPolicyNotSuportedByOffsetAccuracy AS (\n\t\tSELECT\n\t\tWorkPolicyNotSuportedByOffsetAccuracyId,\n\t\tPolicyKey,\n\t\tExclusionReason,\n\t\ti_Policykey\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tWorkPolicyNotSuportedByOffsetAccuracyId,\n\t\t\t\tPolicyKey,\n\t\t\t\tExclusionReason,\n\t\t\t\ti_Policykey\n\t\t\tFROM WorkPolicyNotSuportedByOffsetAccuracy\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY WorkPolicyNotSuportedByOffsetAccuracyId) = 1\n\t),\n\tEXP_ExclusionReason AS (\n\t\tSELECT\n\t\tWorkPolicyNotSuportedByOffsetAccuracyId,\n\t\tExclusionReason AS lkp_ExclusionReason,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- lkp_ExclusionReason = 'Data Repair', lkp_ExclusionReason,\r\n\t\t-- ISNULL(lkp_ExclusionReason) OR lkp_ExclusionReason = '','Data Repair',\r\n\t\t-- NOT ISNULL(lkp_ExclusionReason) AND INSTR(lkp_ExclusionReason,'Data Repair') = 0,\r\n\t\t-- CONCAT(lkp_ExclusionReason,', Data Repair'),\r\n\t\t-- lkp_ExclusionReason)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    lkp_ExclusionReason = 'Data Repair', lkp_ExclusionReason,\n\t\t    lkp_ExclusionReason IS NULL OR lkp_ExclusionReason = '', 'Data Repair',\n\t\t    lkp_ExclusionReason IS NULL AND REGEXP_INSTR(lkp_ExclusionReason, 'Data Repair')NOT  = 0, CONCAT(lkp_ExclusionReason, ', Data Repair'),\n\t\t    lkp_ExclusionReason\n\t\t) AS v_DataRepair,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- lkp_ExclusionReason = 'Missing/blank WorkDCTPremiumTransactionTracking', lkp_ExclusionReason,\r\n\t\t-- ISNULL(lkp_ExclusionReason) OR lkp_ExclusionReason = '','Missing/blank WorkDCTPremiumTransactionTracking',\r\n\t\t-- NOT ISNULL(lkp_ExclusionReason) AND INSTR(lkp_ExclusionReason,'Missing/blank WorkDCTPremiumTransactionTracking') = 0,\r\n\t\t-- CONCAT(lkp_ExclusionReason,', Missing/blank WorkDCTPremiumTransactionTracking'),\r\n\t\t-- lkp_ExclusionReason)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    lkp_ExclusionReason = 'Missing/blank WorkDCTPremiumTransactionTracking', lkp_ExclusionReason,\n\t\t    lkp_ExclusionReason IS NULL OR lkp_ExclusionReason = '', 'Missing/blank WorkDCTPremiumTransactionTracking',\n\t\t    lkp_ExclusionReason IS NULL AND REGEXP_INSTR(lkp_ExclusionReason, 'Missing/blank WorkDCTPremiumTransactionTracking')NOT  = 0, CONCAT(lkp_ExclusionReason, ', Missing/blank WorkDCTPremiumTransactionTracking'),\n\t\t    lkp_ExclusionReason\n\t\t) AS v_MissingTre,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- lkp_ExclusionReason = 'CoverageId changed on PT', lkp_ExclusionReason,\r\n\t\t-- ISNULL(lkp_ExclusionReason) OR lkp_ExclusionReason = '','CoverageId changed on PT',\r\n\t\t-- NOT ISNULL(lkp_ExclusionReason) AND INSTR(lkp_ExclusionReason,'CoverageId changed on PT') = 0,\r\n\t\t-- CONCAT(lkp_ExclusionReason,', CoverageId changed on PT'),\r\n\t\t-- lkp_ExclusionReason)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    lkp_ExclusionReason = 'CoverageId changed on PT', lkp_ExclusionReason,\n\t\t    lkp_ExclusionReason IS NULL OR lkp_ExclusionReason = '', 'CoverageId changed on PT',\n\t\t    lkp_ExclusionReason IS NULL AND REGEXP_INSTR(lkp_ExclusionReason, 'CoverageId changed on PT')NOT  = 0, CONCAT(lkp_ExclusionReason, ', CoverageId changed on PT'),\n\t\t    lkp_ExclusionReason\n\t\t) AS v_coidchange,\n\t\tv_DataRepair AS o_DataRepair,\n\t\tv_MissingTre AS o_MissingTre,\n\t\tv_coidchange AS o_covidchange\n\t\tFROM Lkp_WorkPolicyNotSuportedByOffsetAccuracy\n\t),\n\tOutput AS (\n\t\tSELECT\n\t\tWorkPolicyNotSuportedByOffsetAccuracyId, \n\t\to_DataRepair AS ExclusionReason_DataRepair, \n\t\to_MissingTre AS ExclusionReason_MissingTre, \n\t\to_covidchange AS ExclusionReason_covidchange\n\t\tFROM EXP_ExclusionReason\n\t),\n),\nEXP_Get_Values AS (\n\tSELECT\n\tEXP_Pass_Value.PolicyKey AS i_PolicyKey,\n\tmplt_Exclusivereason_WorkPolicyNotSuportedByOffsetAccuracy.WorkPolicyNotSuportedByOffsetAccuracyId AS i_WorkPolicyNotSuportedByOffsetAccuracyId,\n\tmplt_Exclusivereason_WorkPolicyNotSuportedByOffsetAccuracy.ExclusionReason_DataRepair AS i_ExclusionReason,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_ExclusionReason = 'Data Repair', i_ExclusionReason,\r\n\t-- ISNULL(i_ExclusionReason) OR i_ExclusionReason = '','Data Repair',\r\n\t-- NOT ISNULL(i_ExclusionReason) AND INSTR(i_ExclusionReason,'Data Repair') = 0,\r\n\t-- CONCAT(i_ExclusionReason,', Data Repair'),\r\n\t-- i_ExclusionReason)\n\tDECODE(\n\t    TRUE,\n\t    i_ExclusionReason = 'Data Repair', i_ExclusionReason,\n\t    i_ExclusionReason IS NULL OR i_ExclusionReason = '', 'Data Repair',\n\t    i_ExclusionReason IS NULL AND REGEXP_INSTR(i_ExclusionReason, 'Data Repair')NOT  = 0, CONCAT(i_ExclusionReason, ', Data Repair'),\n\t    i_ExclusionReason\n\t) AS v_ExclusionReason,\n\t-- *INF*: IIF(ISNULL(i_WorkPolicyNotSuportedByOffsetAccuracyId),'INSERT','UPDATE')\n\tIFF(i_WorkPolicyNotSuportedByOffsetAccuracyId IS NULL, 'INSERT', 'UPDATE') AS v_ChangeFlag,\n\tv_ChangeFlag AS o_ChangeFlag,\n\ti_WorkPolicyNotSuportedByOffsetAccuracyId AS o_WorkPolicyNotSuportedByOffsetAccuracyId,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t'DCT' AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\ti_PolicyKey AS o_PolicyKey,\n\ti_ExclusionReason AS o_ExclusionReason\n\tFROM EXP_Pass_Value\n\t -- Manually join with mplt_Exclusivereason_WorkPolicyNotSuportedByOffsetAccuracy\n),\nRTR_Insert_Update AS (\n\tSELECT\n\to_ChangeFlag AS ChangeFlag,\n\to_WorkPolicyNotSuportedByOffsetAccuracyId AS WorkPolicyNotSuportedByOffsetAccuracyId,\n\to_AuditID AS AuditID,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\to_PolicyKey AS PolicyKey,\n\to_ExclusionReason AS ExclusionReason\n\tFROM EXP_Get_Values\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE ChangeFlag = 'INSERT'),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE ChangeFlag = 'UPDATE'),\nWorkPolicyNotSuportedByOffsetAccuracy_Insert AS (\n\tINSERT INTO WorkPolicyNotSuportedByOffsetAccuracy\n\t(AuditID, SourceSystemID, CreatedDate, ModifiedDate, PolicyKey, ExclusionReason)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPOLICYKEY, \n\tEXCLUSIONREASON\n\tFROM RTR_Insert_Update_INSERT\n),\nUPD_WorkPolicyNotSuportedByOffsetAccuracy AS (\n\tSELECT\n\tWorkPolicyNotSuportedByOffsetAccuracyId AS WorkPolicyNotSuportedByOffsetAccuracyId3, \n\tModifiedDate AS ModifiedDate3, \n\tExclusionReason AS ExclusionReason3\n\tFROM RTR_Insert_Update_UPDATE\n),\nWorkPolicyNotSuportedByOffsetAccuracy_Update AS (\n\tMERGE INTO WorkPolicyNotSuportedByOffsetAccuracy AS T\n\tUSING UPD_WorkPolicyNotSuportedByOffsetAccuracy AS S\n\tON T.WorkPolicyNotSuportedByOffsetAccuracyId = S.WorkPolicyNotSuportedByOffsetAccuracyId3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate3, T.ExclusionReason = S.ExclusionReason3\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "INCREMENTALCOVERAGEFILTER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Policy DataWarehouse/"
        },
        "annotations": []
    }
}