{
    "name": "s_m_POL_DW_LOAD_PremiumTransaction_DCT_Restate",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PremiumTransaction_DCT_Restate",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_RiskLocation AS (\n\tSELECT\n\tRiskLocationAKID,\n\tRiskLocationKey\n\tFROM (\n\t\tSELECT \n\t\t\tRiskLocationAKID,\n\t\t\tRiskLocationKey\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\tWHERE CurrentSnapshotFlag='1' and SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand\r\n\t\tPolicyAKId in (\r\n\t\tselect pol_ak_id from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\twhere exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol.pol_num\r\n\t\tand ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod)\r\n\t\tand pol.crrnt_snpsht_flag=1)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey ORDER BY RiskLocationAKID) = 1\n),\nLKP_WorkDCTPolicy_EnteredDate AS (\n\tSELECT\n\tTransactionCreatedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.Policynumber AS Policynumber, \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\twhere T.TransactionState='committed'\r\n\t\tand T.PolicyStatus<>'Quote'\r\n\t\tand T.TransactionPurpose<>'Offset'\r\n\t\tORDER BY T.Policynumber,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY TransactionCreatedDate) = 1\n),\nLKP_ArchWorkPremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionStageId,\n\tPremiumTransactionAKId\n\tFROM (\n\t\tSELECT \n\t\t\tPremiumTransactionStageId,\n\t\t\tPremiumTransactionAKId\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.ArchWorkPremiumTransaction\n\t\tWHERE SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId ORDER BY PremiumTransactionStageId) = 1\n),\nLKP_sup_premium_transaction_code AS (\n\tSELECT\n\tsup_prem_trans_code_id,\n\tprem_trans_code,\n\tStandardPremiumTransactionCode\n\tFROM (\n\t\tSELECT \n\t\t\tsup_prem_trans_code_id,\n\t\t\tprem_trans_code,\n\t\t\tStandardPremiumTransactionCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_premium_transaction_code\n\t\tWHERE crrnt_snpsht_flag='1' AND source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY prem_trans_code,StandardPremiumTransactionCode ORDER BY sup_prem_trans_code_id) = 1\n),\nLKP_DCDeductibleStaging_Value AS (\n\tSELECT\n\tValue,\n\tCoverageId\n\tFROM (\n\t\tSELECT\r\n\t\t  CoverageId AS CoverageId,\r\n\t\t  MAX(Value) AS Value\r\n\t\tFROM (\r\n\t\t--BusinessOwners\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCoverageStaging b\r\n\t\t  ON a.ObjectId = b.ObjectId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_BP_Risk'\r\n\t\t  AND a.ObjectName = b.ObjectName\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\t--CommercialCrime\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCRBuildingStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectId = b.CR_BuildingId\r\n\t\t  AND a.ObjectName = 'DC_CR_Building'\r\n\t\tINNER HASH JOIN DCCRBuildingCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND c.CR_BuildingId = b.CR_BuildingId\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_CR_RiskCrime'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_GL_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\t--Commercial Property\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCFBuilderStaging b\r\n\t\t  ON a.ObjectId = b.CF_BuilderId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Builder'\r\n\t\tINNER HASH JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_CF_Building'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  d.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCFBuildingStage b\r\n\t\t  ON a.ObjectId = b.CFBuildingId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Building'\r\n\t\tINNER HASH JOIN DCCFRiskStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND c.CF_BuildingId = b.CFBuildingId\r\n\t\tINNER HASH JOIN DCCoverageStaging d\r\n\t\t  ON c.SessionId = d.SessionId\r\n\t\t  AND c.CF_RiskId = d.ObjectId\r\n\t\t  AND d.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCFPropertyStaging b\r\n\t\t  ON a.ObjectId = b.CF_PropertyId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_Property'\r\n\t\tINNER HASH JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  c.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCFRatingGroupStaging b\r\n\t\t  ON a.ObjectId = b.CF_RatingGroupId\r\n\t\t  AND a.SessionId = b.SessionId\r\n\t\t  AND a.ObjectName = 'DC_CF_RatingGroup'\r\n\t\tINNER HASH JOIN DCCoverageStaging c\r\n\t\t  ON c.SessionId = b.SessionId\r\n\t\t  AND b.CF_RiskId = c.ObjectId\r\n\t\t  AND c.ObjectName = 'DC_CF_Risk'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0\r\n\t\tUNION ALL\r\n\t\tSELECT\r\n\t\t  b.CoverageId,\r\n\t\t  a.Type,\r\n\t\t  convert(money, a.Value) as Value\r\n\t\tFROM DCDeductibleStaging a\r\n\t\tINNER HASH JOIN DCCoverageStaging b\r\n\t\t  ON a.SessionId = b.SessionId\r\n\t\t  AND b.ObjectId = a.ObjectId\r\n\t\t  AND b.ObjectName = a.ObjectName\r\n\t\t  AND b.ObjectName = 'DC_WC_StateTerm'\r\n\t\t  AND\r\n\t\t     CASE\r\n\t\t       WHEN ISNUMERIC(a.Value) = 1 THEN convert(money, a.Value)\r\n\t\t       ELSE 0\r\n\t\t     END > 0) temp\r\n\t\tGROUP BY CoverageId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY Value) = 1\n),\nLKP_DCModifierStaging_DCLine AS (\n\tSELECT\n\tValue,\n\tObjectId\n\tFROM (\n\t\tSELECT \n\t\t\tValue,\n\t\t\tObjectId\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCModifierStaging\n\t\tWHERE ObjectName='DC_Line' and Type='IRPM'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ObjectId ORDER BY Value) = 1\n),\nLKP_WBCUPremiumDetailStage AS (\n\tSELECT\n\tOverride,\n\tWBCUPremiumDetailId\n\tFROM (\n\t\tselect WBCUPremiumDetailId as WBCUPremiumDetailId,\r\n\t\tCONVERT(varchar,Override) as Override\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCUPremiumDetailStage\r\n\t\torder by WBCUPremiumDetailId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WBCUPremiumDetailId ORDER BY Override) = 1\n),\nLKP_WorkDCTPolicy_EnteredDate_Initial AS (\n\tSELECT\n\tTransactionCreatedDate,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\tTransactionEffectiveDate\n\tFROM (\n\t\tSELECT T.Policynumber AS Policynumber,  \r\n\t\tISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00') AS PolicyVersionFormatted, \r\n\t\tT.TransactionCreatedDate AS TransactionCreatedDate, \r\n\t\tT.TransactionEffectiveDate AS TransactionEffectiveDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\tWHERE T.TransactionState='committed'\r\n\t\tAND T.PolicyStatus <> 'Quote'\r\n\t\tAND T.TransactionPurpose <> 'Offset'\r\n\t\tORDER BY T.Policynumber,ISNULL(RIGHT('00'+convert(varchar(3),T.PolicyVersion),2),'00'),T.TransactionCreatedDate,T.TransactionEffectiveDate\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersionFormatted,TransactionCreatedDate,TransactionEffectiveDate ORDER BY TransactionCreatedDate) = 1\n),\nLKP_NumberofEmployees AS (\n\tSELECT\n\tNumberOfEmployees,\n\tCoverageId\n\tFROM (\n\t\tselect TotalNumberOfEmployees as NumberOfEmployees,\r\n\t\tCoverageId as CoverageId\r\n\t\tfrom WBEPLCoverageEmploymentPracticesLiabilityStage\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tselect NumberOfEmployees as NumberOfEmployees,\r\n\t\tCoverageId as CoverageId\r\n\t\tfrom WBGLCoverageWB516GLStage\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tselect NumberOfEmployees as NumberOfEmployees,\r\n\t\tCoverageId as CoverageId\r\n\t\tfrom WBBPCoverageEmploymentPracticesLiabilityStage\r\n\t\t\r\n\t\tunion all\r\n\t\t\r\n\t\tselect a.NumberEmployees as NumberOfEmployees,\r\n\t\tb.CoverageId as CoverageId\r\n\t\tfrom WBCAEndorsementWB516Stage a\r\n\t\tjoin WBCoverageStage b\r\n\t\ton a.WB_CoverageId=b.WBCoverageId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY NumberOfEmployees) = 1\n),\nSQ_DCStaging_Tables AS (\n\tSELECT\n\t\tWorkDCTCoverageTransaction.CoverageGUID,\n\t\tWorkDCTPolicy.TransactionCreatedDate,\n\t\tWorkDCTPolicy.TransactionPurpose,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.SessionId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CoverageId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.LineId,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.IndividualRiskPremiumModification,\n\t\tWorkDCTPolicy.TransactionType,\n\t\tWorkDCTCoverageTransaction.CoverageType,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CoverageForm,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RiskType,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.Exposure,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.CommissionPercentage,\n\t\tWorkDCTInsuranceLine.LineType,\n\t\tWorkDCTPolicy.PolicyGUId,\n\t\tWorkDCTPolicy.PolicyEffectiveDate,\n\t\tWorkDCTPolicy.PolicyStatus,\n\t\tWorkDCTPolicy.TransactionEffectiveDate,\n\t\tWorkDCTPolicy.TransactionExpirationDate,\n\t\tWorkDCTPolicy.TransactionCancellationDate,\n\t\tWorkDCTLocation.LocationNumber,\n\t\tWorkDCTPolicy.PolicyNumber,\n\t\tWorkDCTPolicy.PolicyVersion,\n\t\tWorkDCTPolicy.PolicyExpirationDate,\n\t\tWorkDCTCoverageTransaction.Premium,\n\t\tWorkDCTCoverageTransaction.Change,\n\t\tWorkDCTCoverageTransaction.Written,\n\t\tWorkDCTCoverageTransaction.Prior,\n\t\tWorkDCTPolicy.ReasonCode,\n\t\tWorkDCTPolicy.ReasonCodeCaption,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ILFTableAssignmentCode,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.OccupancyType,\n\t\tWorkDCTCoverageTransaction.BaseRate,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RetroactiveDate,\n\t\tWorkDCTInsuranceLine.ExperienceModifier,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.OrginalPackageModifier AS OriginalPackageModifier,\n\t\tWorkDCTCoverageTransaction.IncreasedLimitFactor,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.YearBuilt,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ExperienceModEffectiveDate,\n\t\tWorkDCTInsuranceLine.FinalCommission,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ConstructionCode,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.RateEffectiveDate,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.WindCoverageIndicator,\n\t\tWorkDCTCoverageTransaction.CoverageDeleteFlag,\n\t\tWorkDCTCoverageTransaction.ParentCoverageObjectId,\n\t\tWorkDCTCoverageTransaction.ParentCoverageObjectName,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.ExposureBasis,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.FullCoverageGlass,\n\t\tWorkDCTPolicy.TransactionCreatedUserId AS TransactionCreatedUserID,\n\t\tWorkDCTPolicy.EndorsedProcessedBy,\n\t\tWorkDCTPolicy.DeclaredEvent,\n\t\tWorkDCTLocation.Territory,\n\t\tWorkDCTLocation.LocationXmlId,\n\t\tWorkDCTDataRepairPolicy.CreatedDate,\n\t\tWorkDCTDataRepairPolicy.IterationId,\n\t\tWorkDCTLocation.StateProvince\n\tFROM WorkDCTPolicy\n\tINNER JOIN WorkDCTInsuranceLine\n\tINNER JOIN WorkDCTTransactionInsuranceLineLocationBridge\n\tINNER JOIN WorkDCTCoverageTransaction\n\tINNER JOIN WorkDCTDataRepairPolicy\n\tINNER JOIN WorkDCTLocation\n\tON WorkDCTCoverageTransaction.CoverageId=WorkDCTTransactionInsuranceLineLocationBridge.CoverageId\r\n\tAND\r\n\tWorkDCTTransactionInsuranceLineLocationBridge.LocationAssociationId=WorkDCTLocation.LocationAssociationId\r\n\tAND\r\n\tWorkDCTInsuranceLine.LineId=WorkDCTTransactionInsuranceLineLocationBridge.LineId\r\n\tAND\r\n\tWorkDCTInsuranceLine.PolicyId=WorkDCTPolicy.PolicyId\r\n\tAND\r\n\tWorkDCTPolicy.PolicyStatus<>'Quote'\r\n\tAND\r\n\tWorkDCTPolicy.TransactionState='committed'\r\n\t--For line level Umbrella coverage, only load 'PolicyMinimum'\r\n\tAND not (WorkDCTInsuranceLine.LineType='CommercialUmbrella'\r\n\tAND\r\n\tWorkDCTCoverageTransaction.ParentCoverageObjectName='DC_Line'\r\n\tAND WorkDCTCoverageTransaction.CoverageType<>'PolicyMinimum'\r\n\t)\r\n\tAND WorkDCTPolicy.PolicyNumber + WorkDCTPolicy.PolicyVersionFormatted = WorkDCTDataRepairPolicy.PolicyKey\r\n\tAND WorkDCTDataRepairPolicy.CreatedDate >='@{pipeline().parameters.SELECTION_START_TS}'\r\n\tAND WorkDCTPolicy.TransactionType @{pipeline().parameters.EXCLUDE_TTYPE}\n),\nEXP_Src_Default AS (\n\tSELECT\n\tCoverageGUID,\n\tTransactionCreatedDate,\n\tTransactionPurpose,\n\tSessionId,\n\tCoverageId,\n\tLineId,\n\tIndividualRiskPremiumModification,\n\tTransactionType,\n\tCoverageType,\n\tCoverageForm,\n\tRiskType,\n\tExposure,\n\tCommissionPercentage,\n\tLineType,\n\tPolicyGUId,\n\tPolicyEffectiveDate,\n\tPolicyStatus,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tTransactionCancellationDate,\n\tLocationNumber,\n\tPolicyNumber,\n\tPolicyVersion,\n\tPolicyExpirationDate,\n\tPremium,\n\tChange,\n\tWritten,\n\tPrior,\n\tReasonCode,\n\tReasonCodeCaption,\n\tILFTableAssignmentCode,\n\tOccupancyType,\n\tBaseRate,\n\tRetroactiveDate,\n\tExperienceModifier,\n\tOriginalPackageModifier,\n\tIncreasedLimitFactor,\n\tYearBuilt,\n\tExperienceModEffectiveDate,\n\tFinalCommission,\n\tConstructionCode,\n\tRateEffectiveDate,\n\tWindCoverageIndicator,\n\tCoverageDeleteFlag,\n\tParentCoverageObjectId,\n\tParentCoverageObjectName,\n\tExposureBasis,\n\tFullCoverageGlass,\n\tTransactionCreatedUserID,\n\tEndorsedProcessedBy,\n\tDeclaredEvent,\n\tTerritory,\n\tLocationXmlId,\n\tCreatedDate AS WCreatedDate,\n\tIterationId,\n\tStateProvince\n\tFROM SQ_DCStaging_Tables\n),\nLKP_DCWCStateTermStaging AS (\n\tSELECT\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tWC_StateTermId,\n\tObjectName\n\tFROM (\n\t\tSELECT PeriodStartDate as PeriodStartDate, \r\n\t\tPeriodEndDate as PeriodEndDate, \r\n\t\tWC_StateTermId as WC_StateTermId,\r\n\t\t'DC_WC_StateTerm' as ObjectName\r\n\t\tFROM DCWCStateTermStaging\r\n\t\torder by WC_StateTermId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WC_StateTermId,ObjectName ORDER BY PeriodStartDate) = 1\n),\nLKP_WBWCCoverageTermStage AS (\n\tSELECT\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tCoverageId\n\tFROM (\n\t\tSELECT CT.PeriodStartDate as PeriodStartDate, \r\n\t\tCT.PeriodEndDate as PeriodEndDate, \r\n\t\tWBC.CoverageId as CoverageId\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCCoverageTermStage CT\r\n\t\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCoverageStage WBC\r\n\t\tON CT.WB_CoverageId=WBC.WBCoverageId\r\n\t\tORDER BY WBC.CoverageId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY PeriodStartDate) = 1\n),\nEXP_Default AS (\n\tSELECT\n\tLKP_WBWCCoverageTermStage.PeriodStartDate AS lkp_PeriodStartDate,\n\tLKP_WBWCCoverageTermStage.PeriodEndDate AS lkp_PeriodEndDate,\n\tLKP_DCWCStateTermStaging.PeriodStartDate AS i_PeriodStartDate,\n\tLKP_DCWCStateTermStaging.PeriodEndDate AS i_PeriodEndDate,\n\tEXP_Src_Default.SessionId AS i_SessionId,\n\tEXP_Src_Default.CoverageId AS i_CoverageId,\n\tEXP_Src_Default.TransactionType AS i_Type,\n\tEXP_Src_Default.CoverageGUID AS i_CoverageGUID,\n\tEXP_Src_Default.CoverageType AS i_CoverageType,\n\tEXP_Src_Default.CoverageForm AS i_CoverageForm,\n\tEXP_Src_Default.RiskType AS i_RiskType,\n\tEXP_Src_Default.Exposure AS i_Exposure,\n\tEXP_Src_Default.CommissionPercentage AS i_CommissionPercentage,\n\tEXP_Src_Default.LineType AS i_LineType,\n\tEXP_Src_Default.PolicyGUId AS i_Id,\n\tEXP_Src_Default.PolicyEffectiveDate AS i_PolicyEffectiveDate,\n\tEXP_Src_Default.PolicyStatus,\n\tEXP_Src_Default.TransactionEffectiveDate AS i_TransactionEffectiveDate,\n\tEXP_Src_Default.TransactionExpirationDate AS i_TransactionExpirationDate,\n\tEXP_Src_Default.TransactionCreatedDate AS i_TransactionCreatedDate,\n\tEXP_Src_Default.TransactionCancellationDate AS i_TransactionCancellationDate,\n\tEXP_Src_Default.LocationNumber AS i_LocationNumber,\n\tEXP_Src_Default.PolicyNumber AS i_PolicyNumber,\n\tEXP_Src_Default.PolicyVersion AS i_PolicyVersion,\n\tEXP_Src_Default.PolicyExpirationDate AS i_PolicyExpirationDate,\n\tEXP_Src_Default.Premium AS i_Premium,\n\tEXP_Src_Default.Change AS i_Change,\n\tEXP_Src_Default.Written AS i_Written,\n\tEXP_Src_Default.Prior AS i_Prior,\n\tEXP_Src_Default.ReasonCode AS i_Code,\n\tEXP_Src_Default.ReasonCodeCaption AS i_CodeCaption,\n\tEXP_Src_Default.ILFTableAssignmentCode AS i_ILFTableAssignmentCode,\n\tEXP_Src_Default.OccupancyType AS i_OccupancyType,\n\tEXP_Src_Default.BaseRate AS i_BaseRate,\n\tEXP_Src_Default.RetroactiveDate AS i_RetroactiveDate,\n\tEXP_Src_Default.ExperienceModifier AS i_ExperienceMod_DCModifier,\n\tEXP_Src_Default.OriginalPackageModifier AS i_OriginalPackageModifier,\n\tEXP_Src_Default.IncreasedLimitFactor AS i_IncreasedLimitFactor,\n\tEXP_Src_Default.YearBuilt AS i_YearBuilt,\n\tEXP_Src_Default.ExperienceModEffectiveDate AS i_ExperienceModEffectiveDate,\n\tEXP_Src_Default.FinalCommission AS i_FinalCommission,\n\tEXP_Src_Default.ConstructionCode AS i_ConstructionCode,\n\tEXP_Src_Default.RateEffectiveDate AS i_RateEffectiveDate,\n\tEXP_Src_Default.LineId AS i_LineId,\n\tEXP_Src_Default.IndividualRiskPremiumModification AS i_Value,\n\tEXP_Src_Default.WindCoverageIndicator AS i_WindCoverageFlag,\n\tEXP_Src_Default.CoverageDeleteFlag AS i_CoverageDeleteFlag,\n\tEXP_Src_Default.TransactionPurpose AS i_TransactionPurpose,\n\tEXP_Src_Default.ParentCoverageObjectId AS i_ParentCoverageObjectId,\n\tEXP_Src_Default.ParentCoverageObjectName AS i_ParentCoverageObjectName,\n\tEXP_Src_Default.ExposureBasis AS i_ExposureBasis,\n\tEXP_Src_Default.FullCoverageGlass AS i_FullCoverageGlass,\n\tEXP_Src_Default.Territory AS i_Territory,\n\tEXP_Src_Default.LocationXmlId AS i_LocationXmlId,\n\tEXP_Src_Default.TransactionCreatedUserID,\n\tEXP_Src_Default.EndorsedProcessedBy,\n\tEXP_Src_Default.DeclaredEvent,\n\tEXP_Src_Default.WCreatedDate AS CreatedDate,\n\tEXP_Src_Default.IterationId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(i_PeriodStartDate) AND ISNULL(lkp_PeriodStartDate),i_TransactionEffectiveDate,\r\n\t-- NOT ISNULL(lkp_PeriodStartDate),GREATEST(lkp_PeriodStartDate,i_TransactionEffectiveDate),\r\n\t-- GREATEST(i_PeriodStartDate,i_TransactionEffectiveDate))\n\tDECODE(\n\t    TRUE,\n\t    i_PeriodStartDate IS NULL AND lkp_PeriodStartDate IS NULL, i_TransactionEffectiveDate,\n\t    lkp_PeriodStartDate IS NOT NULL, GREATEST(lkp_PeriodStartDate, i_TransactionEffectiveDate),\n\t    GREATEST(i_PeriodStartDate, i_TransactionEffectiveDate)\n\t) AS v_TransactionEffectiveDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(i_PeriodEndDate) AND ISNULL(lkp_PeriodEndDate),i_TransactionExpirationDate,\r\n\t-- NOT ISNULL(lkp_PeriodEndDate),LEAST(lkp_PeriodEndDate,i_TransactionExpirationDate),\r\n\t-- LEAST(i_PeriodEndDate,i_TransactionExpirationDate))\n\tDECODE(\n\t    TRUE,\n\t    i_PeriodEndDate IS NULL AND lkp_PeriodEndDate IS NULL, i_TransactionExpirationDate,\n\t    lkp_PeriodEndDate IS NOT NULL, LEAST(lkp_PeriodEndDate, i_TransactionExpirationDate),\n\t    LEAST(i_PeriodEndDate, i_TransactionExpirationDate)\n\t) AS v_TransactionExpirationDate,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_CommissionPercentage),\r\n\t--   -1,\r\n\t--   i_CommissionPercentage\r\n\t-- )\n\tIFF(i_CommissionPercentage IS NULL, - 1, i_CommissionPercentage) AS v_CommissionPercentage,\n\t-- *INF*: IIF(ISNULL(i_Exposure),0,i_Exposure)\n\tIFF(i_Exposure IS NULL, 0, i_Exposure) AS v_Exposure,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_CoverageForm) OR LENGTH(LTRIM(RTRIM(i_CoverageForm)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_CoverageForm))\r\n\t-- )\n\tIFF(\n\t    i_CoverageForm IS NULL OR LENGTH(LTRIM(RTRIM(i_CoverageForm))) = 0, 'N/A',\n\t    LTRIM(RTRIM(i_CoverageForm))\n\t) AS v_CoverageForm,\n\t-- *INF*: IIF(ISNULL(i_Id) or IS_SPACES(i_Id) or LENGTH(i_Id)=0,'N/A',LTRIM(RTRIM(i_Id)))\n\tIFF(\n\t    i_Id IS NULL or LENGTH(i_Id)>0 AND TRIM(i_Id)='' or LENGTH(i_Id) = 0, 'N/A',\n\t    LTRIM(RTRIM(i_Id))\n\t) AS v_Id,\n\t-- *INF*: IIF(ISNULL(i_PolicyVersion),'00',LPAD(TO_CHAR(i_PolicyVersion),2,'0'))\n\tIFF(i_PolicyVersion IS NULL, '00', LPAD(TO_CHAR(i_PolicyVersion), 2, '0')) AS v_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_PolicyNumber) or IS_SPACES(i_PolicyNumber) or LENGTH(i_PolicyNumber)=0, 'N/A', LTRIM(RTRIM(i_PolicyNumber)))\n\tIFF(\n\t    i_PolicyNumber IS NULL\n\t    or LENGTH(i_PolicyNumber)>0\n\t    and TRIM(i_PolicyNumber)=''\n\t    or LENGTH(i_PolicyNumber) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_PolicyNumber))\n\t) AS v_PolicyNumber,\n\t-- *INF*: IIF(ISNULL(i_Territory) OR IS_SPACES(i_Territory) OR LENGTH(i_Territory)=0,'N/A',LTRIM(RTRIM(i_Territory)))\n\tIFF(\n\t    i_Territory IS NULL\n\t    or LENGTH(i_Territory)>0\n\t    and TRIM(i_Territory)=''\n\t    or LENGTH(i_Territory) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_Territory))\n\t) AS v_Territory,\n\t-- *INF*: IIF(ISNULL(i_LocationXmlId) OR IS_SPACES(i_LocationXmlId) OR LENGTH(i_LocationXmlId)=0,'N/A',LTRIM(RTRIM(i_LocationXmlId)))\n\tIFF(\n\t    i_LocationXmlId IS NULL\n\t    or LENGTH(i_LocationXmlId)>0\n\t    and TRIM(i_LocationXmlId)=''\n\t    or LENGTH(i_LocationXmlId) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_LocationXmlId))\n\t) AS v_LocationXmlID,\n\t-- *INF*: IIF(ISNULL(i_LocationNumber) or IS_SPACES(i_LocationNumber) or LENGTH(i_LocationNumber)=0,'0000', LPAD(LTRIM(RTRIM (i_LocationNumber)), 4, '0')) \n\tIFF(\n\t    i_LocationNumber IS NULL\n\t    or LENGTH(i_LocationNumber)>0\n\t    and TRIM(i_LocationNumber)=''\n\t    or LENGTH(i_LocationNumber) = 0,\n\t    '0000',\n\t    LPAD(LTRIM(RTRIM(i_LocationNumber)), 4, '0')\n\t) AS v_LocationNumber,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_LineType) OR LENGTH(LTRIM(RTRIM(i_LineType)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_LineType))\r\n\t-- )\n\tIFF(\n\t    i_LineType IS NULL OR LENGTH(LTRIM(RTRIM(i_LineType))) = 0, 'N/A', LTRIM(RTRIM(i_LineType))\n\t) AS v_LineType,\n\t-- *INF*: IIF(ISNULL(i_PolicyEffectiveDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_PolicyEffectiveDate)\n\tIFF(\n\t    i_PolicyEffectiveDate IS NULL,\n\t    TO_TIMESTAMP('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\t    i_PolicyEffectiveDate\n\t) AS v_PolicyEffectiveDate,\n\t-- *INF*: IIF(\r\n\t--   ISNULL(i_RiskType) OR LENGTH(LTRIM(RTRIM(i_RiskType)))=0,\r\n\t--   'N/A',\r\n\t--   LTRIM(RTRIM(i_RiskType))\r\n\t-- )\n\tIFF(\n\t    i_RiskType IS NULL OR LENGTH(LTRIM(RTRIM(i_RiskType))) = 0, 'N/A', LTRIM(RTRIM(i_RiskType))\n\t) AS v_RiskType,\n\t-- *INF*: IIF(ISNULL(i_CoverageType) OR IS_SPACES(i_CoverageType) OR LENGTH(i_CoverageType)=0,'N/A',LTRIM(RTRIM(i_CoverageType)))\n\tIFF(\n\t    i_CoverageType IS NULL\n\t    or LENGTH(i_CoverageType)>0\n\t    and TRIM(i_CoverageType)=''\n\t    or LENGTH(i_CoverageType) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_CoverageType))\n\t) AS v_CoverageType,\n\t-- *INF*: IIF(ISNULL(i_ILFTableAssignmentCode) OR IS_SPACES(i_ILFTableAssignmentCode) OR LENGTH(i_ILFTableAssignmentCode)=0, 'N/A', i_ILFTableAssignmentCode)\n\tIFF(\n\t    i_ILFTableAssignmentCode IS NULL\n\t    or LENGTH(i_ILFTableAssignmentCode)>0\n\t    and TRIM(i_ILFTableAssignmentCode)=''\n\t    or LENGTH(i_ILFTableAssignmentCode) = 0,\n\t    'N/A',\n\t    i_ILFTableAssignmentCode\n\t) AS v_ILFTableAssignmentCode,\n\t-- *INF*: IIF(ISNULL(i_Value) OR i_Value='N/A',:LKP.LKP_DCMODIFIERSTAGING_DCLINE(i_LineId),i_Value)\n\tIFF(\n\t    i_Value IS NULL OR i_Value = 'N/A', LKP_DCMODIFIERSTAGING_DCLINE_i_LineId.Value, i_Value\n\t) AS v_IndividualRiskPremiumModification,\n\t-- *INF*: IIF(ISNULL(i_TransactionPurpose) or IS_SPACES(i_TransactionPurpose) or LENGTH(i_TransactionPurpose)=0,'N/A', LTRIM(RTRIM (i_TransactionPurpose))) \n\tIFF(\n\t    i_TransactionPurpose IS NULL\n\t    or LENGTH(i_TransactionPurpose)>0\n\t    and TRIM(i_TransactionPurpose)=''\n\t    or LENGTH(i_TransactionPurpose) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_TransactionPurpose))\n\t) AS v_TransactionPurpose,\n\t-- *INF*: IIF(v_TransactionPurpose ='Onset', i_TransactionCreatedDate,:LKP.LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL(v_PolicyNumber,v_PolicyVersion,i_TransactionCreatedDate,i_TransactionEffectiveDate))\n\tIFF(\n\t    v_TransactionPurpose = 'Onset', i_TransactionCreatedDate,\n\t    LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionCreatedDate\n\t) AS v_PremiumTransactionEnteredDate_Initial,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionEnteredDate_Initial),v_PremiumTransactionEnteredDate_Initial,:LKP.LKP_WORKDCTPOLICY_ENTEREDDATE(v_PolicyNumber,v_PolicyVersion,i_TransactionCreatedDate,i_TransactionEffectiveDate))\n\tIFF(\n\t    v_PremiumTransactionEnteredDate_Initial IS NOT NULL, v_PremiumTransactionEnteredDate_Initial,\n\t    LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionCreatedDate\n\t) AS v_PremiumTransactionEnteredDate,\n\t-- *INF*: --IIF(ISNULL(i_AccountingDate), TO_DATE('1800-01-01', 'YYYY-MM-DD'), TRUNC(i_AccountingDate, 'MM'))\r\n\t-- \r\n\t-- --The lookup to get the AccountingDate may fail, we have to do regular null check and assign the default date '1800-01-01' to pass the job. Then support team need to investigate why and correct the data.\r\n\t-- \r\n\t-- --IIF(\r\n\t-- --  i_EffectiveDate<i_CreatedDate,\r\n\t-- --  TRUNC(i_CreatedDate,'MM'),\r\n\t-- --  TRUNC(i_EffectiveDate,'MM')\r\n\t-- --)\n\t'' AS v_BookedDate,\n\t-- *INF*: TRUNC(CreatedDate,'MM')\r\n\t-- --IIF(NOT ISNULL(v_PremiumTransactionBookedDate_Initial),v_PremiumTransactionBookedDate_Initial,GREATEST(TRUNC(:LKP.LKP_WORKDCTPOLICY(v_PolicyNumber,v_PolicyVersion,i_CreatedDate,i_EffectiveDate),'MM'),v_BookedDate))\n\tCAST(TRUNC(CreatedDate, 'MONTH') AS TIMESTAMP_NTZ(0)) AS v_PremiumTransactionBookedDate,\n\t-- *INF*: IIF(ISNULL(i_ExposureBasis) OR IS_SPACES(i_ExposureBasis) OR LENGTH(i_ExposureBasis)=0,'N/A',LTRIM(RTRIM(i_ExposureBasis)))\n\tIFF(\n\t    i_ExposureBasis IS NULL\n\t    or LENGTH(i_ExposureBasis)>0\n\t    and TRIM(i_ExposureBasis)=''\n\t    or LENGTH(i_ExposureBasis) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_ExposureBasis))\n\t) AS v_ExposureBasis,\n\tv_PolicyVersion AS o_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_Written),0,i_Written)\n\tIFF(i_Written IS NULL, 0, i_Written) AS o_Written,\n\t-- *INF*: LTRIM(RTRIM(i_Type))\n\tLTRIM(RTRIM(i_Type)) AS o_Type,\n\t-- *INF*: IIF(ISNULL(i_TransactionCreatedDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_TransactionCreatedDate)\n\tIFF(\n\t    i_TransactionCreatedDate IS NULL,\n\t    TO_TIMESTAMP('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\t    i_TransactionCreatedDate\n\t) AS o_CreatedDate,\n\t-- *INF*: IIF(ISNULL(v_TransactionEffectiveDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),v_TransactionEffectiveDate)\n\tIFF(\n\t    v_TransactionEffectiveDate IS NULL, TO_TIMESTAMP('21001231235959', 'YYYYMMDDHH24MISS'),\n\t    v_TransactionEffectiveDate\n\t) AS o_TransactionEffectiveDate,\n\t-- *INF*: IIF(ISNULL(v_TransactionExpirationDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),v_TransactionExpirationDate) \n\tIFF(\n\t    v_TransactionExpirationDate IS NULL, TO_TIMESTAMP('21001231235959', 'YYYYMMDDHH24MISS'),\n\t    v_TransactionExpirationDate\n\t) AS o_TransactionExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_TransactionCancellationDate),TO_DATE('21001231235959','YYYYMMDDHH24MISS'),i_TransactionCancellationDate)\n\tIFF(\n\t    i_TransactionCancellationDate IS NULL, TO_TIMESTAMP('21001231235959', 'YYYYMMDDHH24MISS'),\n\t    i_TransactionCancellationDate\n\t) AS o_TransactionCancellationDate,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionEnteredDate),v_PremiumTransactionEnteredDate,i_TransactionCreatedDate)\n\tIFF(\n\t    v_PremiumTransactionEnteredDate IS NOT NULL, v_PremiumTransactionEnteredDate,\n\t    i_TransactionCreatedDate\n\t) AS o_PremiumTransactionEnteredDate,\n\t-- *INF*: IIF(NOT ISNULL(v_PremiumTransactionBookedDate),v_PremiumTransactionBookedDate,v_BookedDate)\n\tIFF(\n\t    v_PremiumTransactionBookedDate IS NOT NULL, v_PremiumTransactionBookedDate, v_BookedDate\n\t) AS o_PremiumTransactionBookedDate,\n\tv_PolicyEffectiveDate AS o_PolicyEffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_PolicyExpirationDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),i_PolicyExpirationDate)\n\tIFF(\n\t    i_PolicyExpirationDate IS NULL,\n\t    TO_TIMESTAMP('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\t    i_PolicyExpirationDate\n\t) AS o_PolicyExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_Premium),0,i_Premium)\n\tIFF(i_Premium IS NULL, 0, i_Premium) AS o_Premium,\n\t-- *INF*: IIF(ISNULL(i_Change),0,i_Change)\n\tIFF(i_Change IS NULL, 0, i_Change) AS o_Change,\n\t-- *INF*: IIF(ISNULL(i_Prior),0,i_Prior)\n\tIFF(i_Prior IS NULL, 0, i_Prior) AS o_Prior,\n\t'D' AS o_PremiumType,\n\t-- *INF*: IIF(ISNULL(i_Code) or IS_SPACES(i_Code) or LENGTH(i_Code)=0,'N/A', LTRIM(RTRIM (i_Code))) \n\tIFF(\n\t    i_Code IS NULL or LENGTH(i_Code)>0 AND TRIM(i_Code)='' or LENGTH(i_Code) = 0, 'N/A',\n\t    LTRIM(RTRIM(i_Code))\n\t) AS v_ReasonAmendedCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LTRIM(RTRIM(i_Type))='FinalAudit','AK',\r\n\t-- LTRIM(RTRIM(i_Type))='VoidFinalAudit','DK',\r\n\t-- LTRIM(RTRIM(i_Type))='RevisedFinalAudit','CK',\r\n\t-- IN(LTRIM(RTRIM(i_Type)),'FinalReporting','VoidFinalReporting'),'OX1', \r\n\t-- :UDF.DEFAULT_VALUE_FOR_STRINGS(i_Code)\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    LTRIM(RTRIM(i_Type)) = 'FinalAudit', 'AK',\n\t    LTRIM(RTRIM(i_Type)) = 'VoidFinalAudit', 'DK',\n\t    LTRIM(RTRIM(i_Type)) = 'RevisedFinalAudit', 'CK',\n\t    LTRIM(RTRIM(i_Type)) IN ('FinalReporting','VoidFinalReporting'), 'OX1',\n\t    UDF_DEFAULT_VALUE_FOR_STRINGS(i_Code)\n\t) AS o_ReasonAmendedCode,\n\t-- *INF*: IIF(ISNULL(i_CodeCaption) or IS_SPACES(i_CodeCaption) or LENGTH(i_CodeCaption)=0,'N/A', LTRIM(RTRIM (i_CodeCaption))) \n\tIFF(\n\t    i_CodeCaption IS NULL\n\t    or LENGTH(i_CodeCaption)>0\n\t    and TRIM(i_CodeCaption)=''\n\t    or LENGTH(i_CodeCaption) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_CodeCaption))\n\t) AS o_CodeCaption,\n\t-- *INF*: IIF(ISNULL(i_CoverageGUID) OR IS_SPACES(i_CoverageGUID) OR LENGTH(i_CoverageGUID)=0, 'N/A', LTRIM(RTRIM(i_CoverageGUID)))\n\tIFF(\n\t    i_CoverageGUID IS NULL\n\t    or LENGTH(i_CoverageGUID)>0\n\t    and TRIM(i_CoverageGUID)=''\n\t    or LENGTH(i_CoverageGUID) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_CoverageGUID))\n\t) AS o_CoverageGUID,\n\t-- *INF*: IIF(ISNULL(:LKP.LKP_DCDEDUCTIBLESTAGING_VALUE(i_CoverageId)),'0',:LKP.LKP_DCDEDUCTIBLESTAGING_VALUE(i_CoverageId))\n\tIFF(\n\t    LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.Value IS NULL, '0',\n\t    LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.Value\n\t) AS o_DeductibleAmount,\n\t-- *INF*: IIF(ISNULL(i_RetroactiveDate), TO_DATE('2100-12-31', 'YYYY-MM-DD'), TRUNC(i_RetroactiveDate, 'DD'))\n\tIFF(\n\t    i_RetroactiveDate IS NULL, TO_TIMESTAMP('2100-12-31', 'YYYY-MM-DD'),\n\t    CAST(TRUNC(i_RetroactiveDate, 'DAY') AS TIMESTAMP_NTZ(0))\n\t) AS o_RetroactiveDate,\n\t-- *INF*: IIF(ISNULL(i_ExperienceMod_DCModifier) OR IS_SPACES(i_ExperienceMod_DCModifier) OR LENGTH(i_ExperienceMod_DCModifier)=0 OR IS_NUMBER(LTRIM(RTRIM(i_ExperienceMod_DCModifier)))=0,  0,  TO_DECIMAL(LTRIM(RTRIM(i_ExperienceMod_DCModifier))))\r\n\t-- \r\n\t-- --DECODE(TRUE, ISNULL(i_ExperienceMod_DCModifier) OR IS_SPACES(i_ExperienceMod_DCModifier) OR LENGTH(i_ExperienceMod_DCModifier)=0,  0,  LOWER(i_LineType)='workerscompensation' AND IS_NUMBER(LTRIM(RTRIM(i_ExperienceMod_DCModifier))), TO_DECIMAL(LTRIM(RTRIM(i_ExperienceMod_DCModifier))), 0)\n\tIFF(\n\t    i_ExperienceMod_DCModifier IS NULL\n\t    or LENGTH(i_ExperienceMod_DCModifier)>0\n\t    and TRIM(i_ExperienceMod_DCModifier)=''\n\t    or LENGTH(i_ExperienceMod_DCModifier) = 0\n\t    or REGEXP_LIKE(LTRIM(RTRIM(i_ExperienceMod_DCModifier)), '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(LTRIM(RTRIM(i_ExperienceMod_DCModifier)) AS FLOAT)\n\t) AS o_ExperienceModificationFactor,\n\t-- *INF*: IIF(ISNULL(i_ExperienceModEffectiveDate), TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), i_ExperienceModEffectiveDate) \n\tIFF(\n\t    i_ExperienceModEffectiveDate IS NULL,\n\t    TO_TIMESTAMP('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),\n\t    i_ExperienceModEffectiveDate\n\t) AS o_ExperienceModificationEffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_OriginalPackageModifier), 0, i_OriginalPackageModifier)\n\tIFF(i_OriginalPackageModifier IS NULL, 0, i_OriginalPackageModifier) AS o_PackageModificationAdjustmentFactor,\n\t-- *INF*: IIF(ISNULL(i_OccupancyType) OR IS_SPACES(i_OccupancyType) OR LENGTH(i_OccupancyType)=0,'N/A',LTRIM(RTRIM(i_OccupancyType)))\n\tIFF(\n\t    i_OccupancyType IS NULL\n\t    or LENGTH(i_OccupancyType)>0\n\t    and TRIM(i_OccupancyType)=''\n\t    or LENGTH(i_OccupancyType) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_OccupancyType))\n\t) AS o_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: IIF(ISNULL(i_IncreasedLimitFactor) OR IS_SPACES(i_IncreasedLimitFactor) OR LENGTH(i_IncreasedLimitFactor)=0 OR IS_NUMBER(LTRIM(RTRIM(i_IncreasedLimitFactor)))=0, 0, TO_DECIMAL(LTRIM(RTRIM(i_IncreasedLimitFactor))))\n\tIFF(\n\t    i_IncreasedLimitFactor IS NULL\n\t    or LENGTH(i_IncreasedLimitFactor)>0\n\t    and TRIM(i_IncreasedLimitFactor)=''\n\t    or LENGTH(i_IncreasedLimitFactor) = 0\n\t    or REGEXP_LIKE(LTRIM(RTRIM(i_IncreasedLimitFactor)), '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(LTRIM(RTRIM(i_IncreasedLimitFactor)) AS FLOAT)\n\t) AS o_IncreasedLimitFactor,\n\t-- *INF*: DECODE(TRUE, v_ILFTableAssignmentCode='N/A', 'N/A', v_CoverageType='PremisesOperations', SUBSTR(v_ILFTableAssignmentCode,1,1), v_CoverageType='ProductsCompletedOps' and SUBSTR(v_ILFTableAssignmentCode,2,1) = '-', 'I', SUBSTR(v_ILFTableAssignmentCode,2,1))\n\tDECODE(\n\t    TRUE,\n\t    v_ILFTableAssignmentCode = 'N/A', 'N/A',\n\t    v_CoverageType = 'PremisesOperations', SUBSTR(v_ILFTableAssignmentCode, 1, 1),\n\t    v_CoverageType = 'ProductsCompletedOps' and SUBSTR(v_ILFTableAssignmentCode, 2, 1) = '-', 'I',\n\t    SUBSTR(v_ILFTableAssignmentCode, 2, 1)\n\t) AS o_IncreasedLimitGroupCode,\n\t-- *INF*: IIF(ISNULL(i_YearBuilt), '0000', TO_CHAR(i_YearBuilt))\n\tIFF(i_YearBuilt IS NULL, '0000', TO_CHAR(i_YearBuilt)) AS o_YearBuilt,\n\t-- *INF*: IIF(ISNULL(i_CommissionPercentage) or i_CommissionPercentage=-1,\r\n\t-- iif(isnull(i_FinalCommission),0,i_FinalCommission)\r\n\t--  ,iif(isnull(i_CommissionPercentage),0,i_CommissionPercentage)\r\n\t-- )\r\n\t-- --IIF(ISNULL(i_FinalCommission), 0 , i_FinalCommission)\n\tIFF(\n\t    i_CommissionPercentage IS NULL or i_CommissionPercentage = - 1,\n\t    IFF(\n\t        i_FinalCommission IS NULL, 0, i_FinalCommission\n\t    ),\n\t    IFF(\n\t        i_CommissionPercentage IS NULL, 0, i_CommissionPercentage\n\t    )\n\t) AS o_AgencyActualCommissionRate,\n\t-- *INF*: ROUND(IIF(NOT ISNULL(i_BaseRate), i_BaseRate, 0),4)\n\tROUND(\n\t    IFF(\n\t        i_BaseRate IS NOT NULL, i_BaseRate, 0\n\t    ), 4) AS o_BaseRate,\n\t-- *INF*: IIF(ISNULL(i_ConstructionCode) OR IS_SPACES(i_ConstructionCode) OR LENGTH(i_ConstructionCode)=0, 'N/A', LTRIM(RTRIM(i_ConstructionCode)))\n\tIFF(\n\t    i_ConstructionCode IS NULL\n\t    or LENGTH(i_ConstructionCode)>0\n\t    and TRIM(i_ConstructionCode)=''\n\t    or LENGTH(i_ConstructionCode) = 0,\n\t    'N/A',\n\t    LTRIM(RTRIM(i_ConstructionCode))\n\t) AS o_ConstructionCode,\n\t-- *INF*: IIF(NOT ISNULL(i_RateEffectiveDate),i_RateEffectiveDate,TO_DATE('18000101','YYYYMMDD'))\n\tIFF(\n\t    i_RateEffectiveDate IS NOT NULL, i_RateEffectiveDate, TO_TIMESTAMP('18000101', 'YYYYMMDD')\n\t) AS o_StateRatingEffectiveDate,\n\ti_CoverageId AS o_CoverageId,\n\t-- *INF*: IIF(IS_NUMBER(v_IndividualRiskPremiumModification),TO_DECIMAL(v_IndividualRiskPremiumModification,4),0)\n\tIFF(\n\t    REGEXP_LIKE(v_IndividualRiskPremiumModification, '^[0-9]+$'),\n\t    CAST(v_IndividualRiskPremiumModification AS FLOAT),\n\t    0\n\t) AS o_IndividualRiskPremiumModification,\n\t-- *INF*: DECODE(i_WindCoverageFlag,'T','1','0')\n\tDECODE(\n\t    i_WindCoverageFlag,\n\t    'T', '1',\n\t    '0'\n\t) AS o_WindCoverageFlag,\n\t-- *INF*: IIF(NOT ISNULL(i_CoverageDeleteFlag),i_CoverageDeleteFlag,'0')\n\tIFF(i_CoverageDeleteFlag IS NOT NULL, i_CoverageDeleteFlag, '0') AS o_CoverageDeleteFlag,\n\tv_TransactionPurpose AS o_TransactionPurpose,\n\ti_ParentCoverageObjectId AS o_ParentCoverageObjectId,\n\t-- *INF*: LTRIM(RTRIM(i_ParentCoverageObjectName))\n\tLTRIM(RTRIM(i_ParentCoverageObjectName)) AS o_ParentCoverageObjectName,\n\t-- *INF*: LTRIM(RTRIM(i_CoverageType))\n\tLTRIM(RTRIM(i_CoverageType)) AS o_CoverageType,\n\tv_ExposureBasis AS o_ExposureBasis,\n\t-- *INF*: IIF(i_FullCoverageGlass='T','F','D')\n\tIFF(i_FullCoverageGlass = 'T', 'F', 'D') AS o_DeductibleBasis,\n\t-- *INF*: IIF(ISNULL(TransactionCreatedUserID),'N/A',TransactionCreatedUserID)\n\tIFF(TransactionCreatedUserID IS NULL, 'N/A', TransactionCreatedUserID) AS o_TransactionCreatedUserId,\n\t-- *INF*: IIF(ISNULL(EndorsedProcessedBy),'N/A',EndorsedProcessedBy)\n\tIFF(EndorsedProcessedBy IS NULL, 'N/A', EndorsedProcessedBy) AS o_ServiceCentreName,\n\tv_PolicyNumber||v_PolicyVersion AS o_Policy_Key,\n\tv_LocationNumber|| '~'  || v_Territory || '~'  || v_LocationXmlID AS o_RiskLocation_Key,\n\tv_LineType AS o_LineType,\n\tv_LocationNumber AS o_LocationNumber,\n\tv_Territory AS o_Territory,\n\tEXP_Src_Default.StateProvince,\n\ti_LocationXmlId AS o_LocationXmlId\n\tFROM EXP_Src_Default\n\tLEFT JOIN LKP_DCWCStateTermStaging\n\tON LKP_DCWCStateTermStaging.WC_StateTermId = EXP_Src_Default.ParentCoverageObjectId AND LKP_DCWCStateTermStaging.ObjectName = EXP_Src_Default.ParentCoverageObjectName\n\tLEFT JOIN LKP_WBWCCoverageTermStage\n\tON LKP_WBWCCoverageTermStage.CoverageId = EXP_Src_Default.CoverageId\n\tLEFT JOIN LKP_DCMODIFIERSTAGING_DCLINE LKP_DCMODIFIERSTAGING_DCLINE_i_LineId\n\tON LKP_DCMODIFIERSTAGING_DCLINE_i_LineId.ObjectId = i_LineId\n\n\tLEFT JOIN LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate\n\tON LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionCreatedDate = i_TransactionCreatedDate\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_INITIAL_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionEffectiveDate = i_TransactionEffectiveDate\n\n\tLEFT JOIN LKP_WORKDCTPOLICY_ENTEREDDATE LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate\n\tON LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.PolicyNumber = v_PolicyNumber\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.PolicyVersionFormatted = v_PolicyVersion\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionCreatedDate = i_TransactionCreatedDate\n\tAND LKP_WORKDCTPOLICY_ENTEREDDATE_v_PolicyNumber_v_PolicyVersion_i_TransactionCreatedDate_i_TransactionEffectiveDate.TransactionEffectiveDate = i_TransactionEffectiveDate\n\n\tLEFT JOIN LKP_DCDEDUCTIBLESTAGING_VALUE LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId\n\tON LKP_DCDEDUCTIBLESTAGING_VALUE_i_CoverageId.CoverageId = i_CoverageId\n\n),\nLKP_PolicyAKID AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\tpol_key\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy\n\t\tWHERE crrnt_snpsht_flag='1' and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and exists ( select 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT where WCT.PolicyNumber=pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id DESC) = 1\n),\nEXP_RatingCoverageKey AS (\n\tSELECT\n\tLKP_PolicyAKID.pol_ak_id AS i_pol_ak_id,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id),-1,i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, - 1, i_pol_ak_id) AS o_pol_ak_id,\n\tEXP_Default.o_CoverageGUID AS CoverageGUID,\n\tEXP_Default.o_CreatedDate AS CreatedDate,\n\tEXP_Default.PolicyStatus,\n\tEXP_Default.o_PolicyVersion AS PolicyVersion,\n\tEXP_Default.o_Written AS Written,\n\tEXP_Default.o_Type AS Type,\n\tEXP_Default.o_TransactionPurpose AS TransactionPurpose,\n\tEXP_Default.o_TransactionEffectiveDate AS TransactionEffectiveDate,\n\tEXP_Default.o_TransactionExpirationDate AS TransactionExpirationDate,\n\tEXP_Default.o_TransactionCancellationDate AS TransactionCancellationDate,\n\tEXP_Default.o_PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate,\n\tEXP_Default.o_PremiumTransactionBookedDate AS PremiumTransactionBookedDate,\n\tEXP_Default.o_PolicyEffectiveDate AS PolicyEffectiveDate,\n\tEXP_Default.o_PolicyExpirationDate AS PolicyExpirationDate,\n\tEXP_Default.o_Premium AS Premium,\n\tEXP_Default.o_Change AS Change,\n\tEXP_Default.o_Prior AS Prior,\n\tEXP_Default.o_PremiumType AS PremiumType,\n\tEXP_Default.o_ReasonAmendedCode AS ReasonAmendedCode,\n\tEXP_Default.o_DeductibleAmount AS DeductibleAmount,\n\tEXP_Default.o_RetroactiveDate AS RetroactiveDate,\n\tEXP_Default.o_ExperienceModificationFactor AS ExperienceModificationFactor,\n\tEXP_Default.o_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate,\n\tEXP_Default.o_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor,\n\tEXP_Default.o_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode,\n\tEXP_Default.o_IncreasedLimitFactor AS IncreasedLimitFactor,\n\tEXP_Default.o_IncreasedLimitGroupCode AS IncreasedLimitGroupCode,\n\tEXP_Default.o_YearBuilt AS YearBuilt,\n\tEXP_Default.o_AgencyActualCommissionRate AS AgencyActualCommissionRate,\n\tEXP_Default.o_BaseRate AS BaseRate,\n\tEXP_Default.o_ConstructionCode AS ConstructionCode,\n\tEXP_Default.o_StateRatingEffectiveDate AS StateRatingEffectiveDate,\n\tEXP_Default.o_CoverageId AS CoverageId,\n\tEXP_Default.o_IndividualRiskPremiumModification AS IndividualRiskPremiumModification,\n\tEXP_Default.o_WindCoverageFlag AS WindCoverageFlag,\n\tEXP_Default.o_CoverageDeleteFlag AS CoverageDeleteFlag,\n\tEXP_Default.o_ParentCoverageObjectId AS ParentCoverageObjectId,\n\tEXP_Default.o_ParentCoverageObjectName AS ParentCoverageObjectName,\n\tEXP_Default.o_CoverageType AS CoverageType,\n\tEXP_Default.o_ExposureBasis AS ExposureBasis,\n\tEXP_Default.o_DeductibleBasis AS DeductibleBasis,\n\tEXP_Default.o_TransactionCreatedUserId AS TransactionCreatedUserId,\n\tEXP_Default.o_ServiceCentreName AS ServiceCentreName,\n\tEXP_Default.o_Policy_Key AS Policy_Key,\n\tEXP_Default.IterationId,\n\tEXP_Default.DeclaredEvent\n\tFROM EXP_Default\n\tLEFT JOIN LKP_PolicyAKID\n\tON LKP_PolicyAKID.pol_key = EXP_Default.o_Policy_Key\n),\nAGG_Remove_Duplicate AS (\n\tSELECT\n\tPolicyStatus,\n\tPolicyVersion,\n\tWritten,\n\tType,\n\tCoverageGUID,\n\tCreatedDate,\n\tTransactionPurpose,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tTransactionCancellationDate,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionBookedDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPremium,\n\tChange,\n\tPrior,\n\tPremiumType,\n\tReasonAmendedCode,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tCoverageDeleteFlag,\n\tParentCoverageObjectId,\n\tParentCoverageObjectName,\n\tCoverageType,\n\tExposureBasis,\n\tDeductibleBasis,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\to_pol_ak_id AS i_pol_ak_id,\n\tPolicy_Key,\n\tIterationId,\n\tDeclaredEvent\n\tFROM EXP_RatingCoverageKey\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageGUID, CreatedDate, TransactionPurpose, i_pol_ak_id ORDER BY NULL) = 1\n),\nEXP_PostAgg AS (\n\tSELECT\n\tPolicyStatus,\n\tPolicyVersion,\n\tWritten,\n\tType,\n\tCoverageGUID,\n\tCreatedDate,\n\tTransactionPurpose,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tTransactionCancellationDate,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionBookedDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPremium,\n\tChange,\n\tPrior,\n\tPremiumType,\n\tReasonAmendedCode,\n\tCodeCaption,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tCoverageDeleteFlag,\n\tParentCoverageObjectId,\n\tParentCoverageObjectName,\n\tCoverageType,\n\tExposureBasis,\n\tDeductibleBasis,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\ti_pol_ak_id,\n\tPolicy_Key,\n\tIterationId,\n\tDeclaredEvent\n\tFROM AGG_Remove_Duplicate\n),\nLKP_DCCoverageStaging AS (\n\tSELECT\n\tCoverageDeleteFlag,\n\tType,\n\ti_PolicyKey,\n\tPolicyKey,\n\tCoverageGUID,\n\tEffectiveDate,\n\tCreatedDate,\n\tOffsetCreatedDate\n\tFROM (\n\t\tSELECT T.PolicyNumber+T.PolicyVersionFormatted as PolicyKey, A.CoverageGUID AS CoverageGUID, \r\n\t\tCASE WHEN CT.PeriodStartDate>T.TransactionEffectiveDate THEN CT.PeriodStartDate WHEN ST.PeriodStartDate>T.TransactionEffectiveDate THEN ST.PeriodStartDate ELSE T.TransactionEffectiveDate END AS EffectiveDate, \r\n\t\tT.TransactionCreatedDate AS CreatedDate, \r\n\t\tISNULL(F.OffsetCreatedDate, '2100-12-31 23:59:59') AS OffsetCreatedDate,\r\n\t\tA.CoverageDeleteFlag AS CoverageDeleteFlag,\r\n\t\tT.TransactionType AS Type,\r\n\t\tA.CoverageId AS CoverageId\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction A\r\n\t\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy T\r\n\t\tON A.SessionId=T.SessionId\r\n\t\tAND T.TransactionState='committed'\r\n\t\tAND T.PolicyStatus<>'Quote'\r\n\t\tAND T.TransactionPurpose<>'Offset'\r\n\t\tAND T.TransactionType @{pipeline().parameters.EXCLUDE_TTYPE}\r\n\t\tLEFT HASH JOIN \r\n\t\t(SELECT F.PolicyNumber,F.PolicyVersion,F.TransactionCreatedDate,\r\n\t\tMIN(ISNULL(O.TransactionCreatedDate,O1.TransactionCreatedDate)) OffsetCreatedDate\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy F\r\n\t\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy O\r\n\t\tON O.PolicyNumber=F.PolicyNumber\r\n\t\tAND ISNULL(O.PolicyVersion,0)=ISNULL(F.PolicyVersion,0)\r\n\t\tAND O.TransactionCreatedDate>F.TransactionCreatedDate\r\n\t\tAND O.TransactionEffectiveDate<F.TransactionEffectiveDate\r\n\t\tAND O.TransactionState='committed'\r\n\t\tAND O.PolicyStatus<>'Quote'\r\n\t\tAND O.TransactionPurpose<>'Offset'\r\n\t\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy O1\r\n\t\tON O1.PolicyNumber=F.PolicyNumber\r\n\t\tAND ISNULL(O1.PolicyVersion,0)=ISNULL(F.PolicyVersion,0)\r\n\t\tAND O1.TransactionCreatedDate>F.TransactionCreatedDate\r\n\t\tAND O1.TransactionEffectiveDate<=F.TransactionEffectiveDate\r\n\t\tAND O1.TransactionState='committed'\r\n\t\tAND O1.PolicyStatus<>'Quote'\r\n\t\tAND O1.TransactionPurpose<>'Offset'\r\n\t\tWHERE F.TransactionState='committed'\r\n\t\tAND F.PolicyStatus<>'Quote'\r\n\t\tAND F.TransactionPurpose='Offset'\r\n\t\tGROUP BY F.PolicyNumber,F.PolicyVersion,F.TransactionCreatedDate) F\r\n\t\tON T.PolicyNumber=F.PolicyNumber\r\n\t\tAND ISNULL(T.PolicyVersion,0)=ISNULL(F.PolicyVersion,0)\r\n\t\tAND F.TransactionCreatedDate=T.TransactionCreatedDate\r\n\t\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCoverageStage WBC\r\n\t\tON WBC.CoverageId=A.CoverageId\r\n\t\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCCoverageTermStage CT\r\n\t\tON CT.WB_CoverageId=WBC.WBCoverageId\r\n\t\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCStateTermStaging ST\r\n\t\tON ST.WC_StateTermId=A.ParentCoverageObjectId\r\n\t\tAND A.ParentCoverageObjectName='DC_WC_StateTerm'\r\n\t\tORDER BY T.PolicyNumber+T.PolicyVersionFormatted,A.CoverageGUID,CASE WHEN CT.PeriodStartDate>T.TransactionEffectiveDate THEN CT.PeriodStartDate WHEN ST.PeriodStartDate>T.TransactionEffectiveDate THEN ST.PeriodStartDate ELSE T.TransactionEffectiveDate END, T.TransactionCreatedDate, ISNULL(F.OffsetCreatedDate, '2100-12-31 23:59:59'), A.CoverageId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,CoverageGUID,EffectiveDate,CreatedDate,OffsetCreatedDate ORDER BY CoverageDeleteFlag DESC) = 1\n),\nLKP_RatingCoverage AS (\n\tSELECT\n\tRatingCoverageCancellationDate,\n\tPremiumTransactionCode,\n\tExposure,\n\tPolicyAKID,\n\tCoverageGUID,\n\tTEffectiveDate,\n\tTCreatedDate,\n\tOffsetCreatedDate\n\tFROM (\n\t\tSELECT distinct a.RatingCoverageCancellationDate as RatingCoverageCancellationDate,\r\n\t\ta.CoverageGUID as CoverageGUID,\r\n\t\tb.PremiumTransactionCode as PremiumTransactionCode,\r\n\t\tb.PremiumTransactionEffectiveDate as TEffectiveDate,\r\n\t\tb.PremiumTransactionEnteredDate as TCreatedDate,\r\n\t\tISNULL(c.PremiumTransactionEnteredDate,'2100-12-31 23:59:59') as OffsetCreatedDate,\r\n\t\ta.Exposure as Exposure,\r\n\t\tpc.PolicyAKID as PolicyAKID\r\n\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage pc INNER HASH JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage a\r\n\t\ton PC.PolicyCoverageAKID=a.PolicyCoverageAKID\r\n\t\tand pc.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand pc.CurrentSnapshotFlag=1\r\n\t\tINNER HASH JOIN\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction b\r\n\t\ton a.RatingCoverageAKId=b.RatingCoverageAKid\r\n\t\tand b.EffectiveDate=a.EffectiveDate\r\n\t\tand b.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand not b.OffsetOnsetCode in ('Offset','Deprecated')\r\n\t\tLEFT HASH JOIN\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction c\r\n\t\ton c.RatingCoverageAKId=b.RatingCoverageAKid\r\n\t\tand c.EffectiveDate=a.EffectiveDate\r\n\t\tand c.SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand c.OffsetOnsetCode='Deprecated'\r\n\t\tINNER HASH JOIN (\r\n\t\tselect DISTINCT WCT.CoverageGUId from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction WCT) WCT\r\n\t\ton WCT.CoverageGUID=a.CoverageGUID\r\n\t\torder by pc.PolicyAKID,a.CoverageGUID,b.PremiumTransactionEffectiveDate,b.PremiumTransactionEnteredDate,ISNULL(c.PremiumTransactionEnteredDate,'2100-12-31 23:59:59')\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID,TEffectiveDate,TCreatedDate,OffsetCreatedDate ORDER BY RatingCoverageCancellationDate DESC) = 1\n),\nmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy AS (WITH\n\tInput_Policy AS (\n\t\t\n\t),\n\tEXP_Get_Value AS (\n\t\tSELECT\n\t\tPolicyAKID,\n\t\tCoverageGuid,\n\t\tTransactionCreatedDate,\n\t\t-- *INF*: IIF(ISNULL(PolicyAKID),-1,PolicyAKID)\n\t\tIFF(PolicyAKID IS NULL, - 1, PolicyAKID) AS o_PolicyAKID\n\t\tFROM Input_Policy\n\t),\n\tLKP_Policy_Heirarchy_With_Date AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tPolicyCoverageAKID,\n\t\tPolicyAKID,\n\t\tCoverageGUID,\n\t\tEffectiveDate,\n\t\tLocationUnitNumber,\n\t\tRatingCoverageCancellationDate,\n\t\tRatingCoverageAKID,\n\t\tRatingCoverageKey,\n\t\tRatingCoverageHashKey,\n\t\tRatingCoverageId,\n\t\tRatingCoverageEffectivedate,\n\t\tRatingCoverageExpirationdate,\n\t\tClassCode,\n\t\tCoverageType,\n\t\tProductAbbreviation\n\t\tFROM (\n\t\t\tSELECT R.RiskLocationAKID AS RiskLocationAKID,\r\n\t\t\t\tPC.PolicyCoverageAKID AS PolicyCoverageAKID,\r\n\t\t\t\tR.PolicyAKID AS PolicyAKID,\r\n\t\t\t\tRC.CoverageGUID AS CoverageGUID,\r\n\t\t\t\tRC.EffectiveDate AS EffectiveDate,\r\n\t\t\t\tR.LocationUnitNumber AS LocationUnitNumber,\r\n\t\t\t\tRC.RatingCoverageCancellationDate AS RatingCoverageCancellationDate,\r\n\t\t\t\tRC.RatingCoverageAKID AS RatingCoverageAKID,\r\n\t\t\t\tRC.RatingCoverageKey AS RatingCoverageKey,\r\n\t\t\t\tRC.RatingCoverageHashKey AS RatingCoverageHashKey,\r\n\t\t\t\tRC.RatingCoverageid AS RatingCoverageid,\r\n\t\t\t\tRC.RatingCoverageEffectivedate AS RatingCoverageEffectivedate,\r\n\t\t\t\tRC.RatingCoverageExpirationdate AS RatingCoverageExpirationdate ,\r\n\t\t\t\tRC.ClassCode AS ClassCode,\r\n\t\t\t\tRC.coveragetype as coveragetype,\r\n\t\t\t\tPR.ProductAbbreviation as ProductAbbreviation\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC\r\n\t\t\t\tON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\t\t\t\tAND RC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation R\r\n\t\t\t\tON R.RiskLocationAKID = PC.RiskLocationAKID\r\n\t\t\t\t\t\tAND PC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\t\t\t\tAND R.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND R.CurrentSnapshotFlag = 1\r\n\t\t\t LEFT JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}. product PR on\r\n\t\t\t\tPR.productakid=RC.productakid and PR.CurrentSnapshotFlag=1\r\n\t\t\t\t\twhere EXISTS (\r\n\t\t\t\t\t\tSELECT 1\r\n\t\t\t\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\t\t\t\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\t\t\t\t\t\tON WCT.PolicyNumber = pol.pol_num\r\n\t\t\t\t\t\t\t\tAND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = pol.pol_mod\r\n\t\t\t\t\t\t\t\tAND pol.crrnt_snpsht_flag = 1\r\n\t\t\t\t\t\t\t\tAND R.PolicyAKId = pol.pol_ak_id\r\n\t\t\t\t\t\t)\r\n\t\t\tORDER BY PC.Policyakid,RC.Coverageguid,RC.Createddate,RC.effectivedate--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID,EffectiveDate ORDER BY RiskLocationAKID DESC) = 1\n\t),\n\tLKP_Policy_Heirarchy_Without_Date AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tPolicyCoverageAKID,\n\t\tPolicyAKID,\n\t\tCoverageGUID,\n\t\tLocationUnitNumber,\n\t\tRatingCoverageCancellationDate,\n\t\tRatingCoverageAKID,\n\t\tRatingCoverageKey,\n\t\tRatingCoverageHashKey,\n\t\tRatingCoverageId,\n\t\tRatingCoverageEffectivedate,\n\t\tRatingCoverageExpirationdate,\n\t\tCoverageType,\n\t\tProductAbbreviation\n\t\tFROM (\n\t\t\tSELECT R.RiskLocationAKID AS RiskLocationAKID,\r\n\t\t\t\tPC.PolicyCoverageAKID AS PolicyCoverageAKID,\r\n\t\t\t\tR.PolicyAKID AS PolicyAKID,\r\n\t\t\t\tRC.CoverageGUID AS CoverageGUID,\r\n\t\t\t\tRC.EffectiveDate AS EffectiveDate,\r\n\t\t\t\tR.LocationUnitNumber AS LocationUnitNumber,\r\n\t\t\t\tRC.RatingCoverageCancellationDate AS RatingCoverageCancellationDate,\r\n\t\t\t\tRC.RatingCoverageAKID AS RatingCoverageAKID,\r\n\t\t\t\tRC.RatingCoverageKey AS RatingCoverageKey,\r\n\t\t\t\tRC.RatingCoverageHashKey AS RatingCoverageHashKey,\r\n\t\t\t\tRC.RatingCoverageid AS RatingCoverageid,\r\n\t\t\t\tRC.RatingCoverageEffectivedate AS RatingCoverageEffectivedate,\r\n\t\t\t\tRC.RatingCoverageExpirationdate AS RatingCoverageExpirationdate ,\r\n\t\t\t\t\tRC.coveragetype as coveragetype,\r\n\t\t\t\tPR.ProductAbbreviation as ProductAbbreviation\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC\r\n\t\t\t\tON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\t\t\t\tAND RC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation R\r\n\t\t\t\tON R.RiskLocationAKID = PC.RiskLocationAKID\r\n\t\t\t\t\t\tAND PC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\t\t\t\tAND R.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\t\t\tAND R.CurrentSnapshotFlag = 1\r\n\t\t\tLEFT JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}. product PR on\r\n\t\t\t\tPR.productakid=RC.productakid and PR.CurrentSnapshotFlag=1\r\n\t\t\t\t\twhere EXISTS (\r\n\t\t\t\t\t\tSELECT 1\r\n\t\t\t\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\t\t\t\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\t\t\t\t\t\tON WCT.PolicyNumber = pol.pol_num\r\n\t\t\t\t\t\t\t\tAND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = pol.pol_mod\r\n\t\t\t\t\t\t\t\tAND pol.crrnt_snpsht_flag = 1\r\n\t\t\t\t\t\t\t\tAND R.PolicyAKId = pol.pol_ak_id\r\n\t\t\t\t\t\t)\r\n\t\t\tORDER BY PC.Policyakid,RC.Coverageguid,RC.Createddate,RC.effectivedate--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID ORDER BY RiskLocationAKID DESC) = 1\n\t),\n\tEXP_Calculate_PremiumtransactionKey AS (\n\t\tSELECT\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageAKID AS RatingCoverageAKID_WithDate,\n\t\t-- *INF*: IIF(isnull(RatingCoverageAKID_WithDate),0,1)\n\t\tIFF(RatingCoverageAKID_WithDate IS NULL, 0, 1) AS Flag,\n\t\tLKP_Policy_Heirarchy_With_Date.RiskLocationAKID AS RiskLocationAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.PolicyCoverageAKID AS PolicyCoverageAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.PolicyAKID AS PolicyAKID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.CoverageGUID AS CoverageGUID_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.LocationUnitNumber AS LocationUnitNumber_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageCancellationDate AS RatingCoverageCancellationDate_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageKey AS RatingCoverageKey_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageHashKey AS RatingCoverageHashKey_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageId AS RatingCoverageId_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageEffectivedate AS RatingCoverageEffectivedate_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.RatingCoverageExpirationdate AS RatingCoverageExpirationdate_Date,\n\t\tLKP_Policy_Heirarchy_Without_Date.PolicyAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.RiskLocationAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.PolicyCoverageAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.CoverageGUID,\n\t\tLKP_Policy_Heirarchy_Without_Date.LocationUnitNumber,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageCancellationDate,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageAKID,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageKey,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageHashKey,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageId,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageEffectivedate,\n\t\tLKP_Policy_Heirarchy_Without_Date.RatingCoverageExpirationdate,\n\t\t-- *INF*: iif(Flag=1,PolicyAKID_Date,PolicyAKID)\n\t\tIFF(Flag = 1, PolicyAKID_Date, PolicyAKID) AS v_PolicyAKID,\n\t\t-- *INF*: IIF(Flag=1,RiskLocationAKID_Date,RiskLocationAKID)\n\t\tIFF(Flag = 1, RiskLocationAKID_Date, RiskLocationAKID) AS v_RiskLocationAKID,\n\t\t-- *INF*: iif(Flag=1,PolicyCoverageAKID_Date,PolicyCoverageAKID)\n\t\tIFF(Flag = 1, PolicyCoverageAKID_Date, PolicyCoverageAKID) AS v_PolicyCoverageAKID,\n\t\t-- *INF*: iif(Flag=1,CoverageGUID_Date,CoverageGUID)\n\t\tIFF(Flag = 1, CoverageGUID_Date, CoverageGUID) AS v_CoverageGUID,\n\t\tv_CoverageGUID AS o_CoverageGUID,\n\t\t-- *INF*: iif(Flag=1,LocationUnitNumber_Date,LocationUnitNumber)\n\t\tIFF(Flag = 1, LocationUnitNumber_Date, LocationUnitNumber) AS v_LocationUnitNumber,\n\t\tv_RiskLocationAKID AS o_RiskLocationAKID,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageCancellationDate_Date)\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    RatingCoverageCancellationDate_Date\n\t\t) AS o_RatingCoverageCancellationDate,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,iif(Flag=1,RatingCoverageAKID_WithDate,RatingCoverageAKID))\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    IFF(\n\t\t        Flag = 1, RatingCoverageAKID_WithDate, RatingCoverageAKID\n\t\t    )\n\t\t) AS o_RatingCoverageAKID,\n\t\tv_PolicyCoverageAKID AS o_PolicyCoverageAKID,\n\t\t-- *INF*: TO_CHAR(v_PolicyAKID) || '~'  || TO_CHAR(v_RiskLocationAKID)  || '~' || TO_CHAR( v_PolicyCoverageAKID)  || '~' || v_CoverageGUID  || '~'  || v_LocationUnitNumber\n\t\tTO_CHAR(v_PolicyAKID) || '~' || TO_CHAR(v_RiskLocationAKID) || '~' || TO_CHAR(v_PolicyCoverageAKID) || '~' || v_CoverageGUID || '~' || v_LocationUnitNumber AS o_PremiumTransactionKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageKey_Date)\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageKey_Date\n\t\t) AS o_RatingCoverageKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageHashKey_Date)\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    RatingCoverageHashKey_Date\n\t\t) AS o_RatingCoverageHashKey,\n\t\t-- *INF*: iif(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,RatingCoverageId_Date)\r\n\t\t-- \r\n\t\t-- --IIF(Flag=1,RatingCoverageId_Date,RatingCoverageId)\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- \n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL, RatingCoverageId_Date\n\t\t) AS o_RatingCoverageId,\n\t\tLKP_Policy_Heirarchy_With_Date.ClassCode,\n\t\tLKP_Policy_Heirarchy_With_Date.CoverageType AS i_CoverageType_Date,\n\t\tLKP_Policy_Heirarchy_With_Date.ProductAbbreviation AS i_ProductAbbreviation_Date,\n\t\tLKP_Policy_Heirarchy_Without_Date.CoverageType AS i_CoverageType,\n\t\tLKP_Policy_Heirarchy_Without_Date.ProductAbbreviation AS i_ProductAbbreviation,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,RatingCoverageEffectivedate_Date,RatingCoverageEffectivedate))\r\n\t\t-- \r\n\t\t-- ---IIF(Flag=1,RatingCoverageEffectivedate_Date,RatingCoverageEffectivedate)\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    IFF(\n\t\t        Flag = 1, RatingCoverageEffectivedate_Date, RatingCoverageEffectivedate\n\t\t    )\n\t\t) AS o_RatingCoverageEffectivedate,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,RatingCoverageExpirationdate_Date,RatingCoverageExpirationdate))\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- --IIF(Flag=1,RatingCoverageExpirationdate_Date,RatingCoverageExpirationdate)\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    IFF(\n\t\t        Flag = 1, RatingCoverageExpirationdate_Date, RatingCoverageExpirationdate\n\t\t    )\n\t\t) AS o_RatingCoverageExpirationdate,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,i_CoverageType_Date,i_CoverageType))\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    IFF(\n\t\t        Flag = 1, i_CoverageType_Date, i_CoverageType\n\t\t    )\n\t\t) AS o_CoverageType,\n\t\t-- *INF*: IIF(@{pipeline().parameters.PMSESSIONNAME}='s_m_POL_DW_LOAD_RatingCoverage_Restate_DCT',NULL,\r\n\t\t-- IIF(Flag=1,i_ProductAbbreviation_Date,i_ProductAbbreviation))\n\t\tIFF(\n\t\t    @{pipeline().parameters.PMSESSIONNAME} = 's_m_POL_DW_LOAD_RatingCoverage_Restate_DCT', NULL,\n\t\t    IFF(\n\t\t        Flag = 1, i_ProductAbbreviation_Date, i_ProductAbbreviation\n\t\t    )\n\t\t) AS o_ProductAbbreviation\n\t\tFROM \n\t\tLEFT JOIN LKP_Policy_Heirarchy_With_Date\n\t\tON LKP_Policy_Heirarchy_With_Date.PolicyAKID = EXP_Get_Value.o_PolicyAKID AND LKP_Policy_Heirarchy_With_Date.CoverageGUID = EXP_Get_Value.CoverageGuid AND LKP_Policy_Heirarchy_With_Date.EffectiveDate = EXP_Get_Value.TransactionCreatedDate\n\t\tLEFT JOIN LKP_Policy_Heirarchy_Without_Date\n\t\tON LKP_Policy_Heirarchy_Without_Date.PolicyAKID = EXP_Get_Value.o_PolicyAKID AND LKP_Policy_Heirarchy_Without_Date.CoverageGUID = EXP_Get_Value.CoverageGuid\n\t),\n\tOutput_Policy AS (\n\t\tSELECT\n\t\to_CoverageGUID AS CoverageGUID, \n\t\to_RiskLocationAKID AS RiskLocationAKID, \n\t\to_RatingCoverageCancellationDate AS RatingCoverageCancellationDate, \n\t\to_RatingCoverageAKID AS RatingCoverageAKID, \n\t\to_PremiumTransactionKey AS PremiumTransactionKey, \n\t\to_RatingCoverageKey AS RatingCoverageKey, \n\t\to_RatingCoverageHashKey AS RatingCoverageHashKey, \n\t\to_RatingCoverageId AS RatingCoverageId, \n\t\to_PolicyCoverageAKID AS PolicyCoverageAKID, \n\t\to_RatingCoverageEffectivedate AS RatingCoverageEffectivedate, \n\t\to_RatingCoverageExpirationdate AS RatingCoverageExpirationdate, \n\t\tClassCode, \n\t\to_CoverageType AS CoverageType, \n\t\to_ProductAbbreviation AS ProductAbbreviation\n\t\tFROM EXP_Calculate_PremiumtransactionKey\n\t),\n),\nEXP_CoverageStatus AS (\n\tSELECT\n\tLKP_DCCoverageStaging.CoverageDeleteFlag AS lkp_StageCoverageDeleteFlag,\n\tLKP_DCCoverageStaging.Type AS lkp_StageTransactionType,\n\tEXP_PostAgg.TransactionCancellationDate AS i_TCancellationDate,\n\tEXP_PostAgg.PolicyVersion AS i_PolicyVersion,\n\tEXP_PostAgg.ParentCoverageObjectId AS i_ParentCoverageObjectId,\n\tEXP_PostAgg.ParentCoverageObjectName AS i_ParentCoverageObjectName,\n\tEXP_PostAgg.CoverageType,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.RatingCoverageAKID,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.RatingCoverageCancellationDate,\n\tLKP_RatingCoverage.Exposure,\n\t-- *INF*: IIF(ISNULL(Exposure),0,Exposure)\n\tIFF(Exposure IS NULL, 0, Exposure) AS o_Exposure,\n\tEXP_PostAgg.PolicyStatus,\n\tEXP_PostAgg.Written,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.PremiumTransactionKey,\n\tEXP_PostAgg.Type AS TType,\n\tEXP_PostAgg.CreatedDate,\n\tEXP_PostAgg.TransactionEffectiveDate,\n\tEXP_PostAgg.TransactionExpirationDate,\n\tEXP_PostAgg.PremiumTransactionEnteredDate,\n\tEXP_PostAgg.PremiumTransactionBookedDate,\n\tEXP_PostAgg.PolicyEffectiveDate,\n\tEXP_PostAgg.PolicyExpirationDate,\n\tEXP_PostAgg.Premium,\n\tEXP_PostAgg.Change,\n\tEXP_PostAgg.Prior,\n\tEXP_PostAgg.PremiumType,\n\t'N/A' AS o_New_OffsetOnsetCode,\n\t'Onset' AS o_Endorse_OnsetCode,\n\t'Offset' AS o_Endorse_OffsetCode,\n\tLKP_RatingCoverage.RatingCoverageCancellationDate AS lkp_RatingCoverageCancellationDate,\n\tLKP_RatingCoverage.PremiumTransactionCode AS lkp_PremiumTransactionCode,\n\tEXP_PostAgg.ReasonAmendedCode,\n\tEXP_PostAgg.CodeCaption,\n\tEXP_PostAgg.CoverageGUID,\n\tEXP_PostAgg.DeductibleAmount,\n\tEXP_PostAgg.RetroactiveDate,\n\tEXP_PostAgg.ExperienceModificationFactor,\n\tEXP_PostAgg.ExperienceModificationEffectiveDate,\n\tEXP_PostAgg.PackageModificationAdjustmentFactor,\n\tEXP_PostAgg.PackageModificationAdjustmentGroupCode,\n\tEXP_PostAgg.IncreasedLimitFactor,\n\tEXP_PostAgg.IncreasedLimitGroupCode,\n\tEXP_PostAgg.YearBuilt,\n\tEXP_PostAgg.AgencyActualCommissionRate,\n\tEXP_PostAgg.BaseRate,\n\tEXP_PostAgg.ConstructionCode,\n\tEXP_PostAgg.StateRatingEffectiveDate,\n\tEXP_PostAgg.CoverageId,\n\tEXP_PostAgg.IndividualRiskPremiumModification,\n\tEXP_PostAgg.WindCoverageFlag AS i_WindCoverageFlag,\n\tEXP_PostAgg.CoverageDeleteFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- CoverageDeleteFlag='1',1,\r\n\t-- PolicyStatus='Cancelled',1,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    CoverageDeleteFlag = '1', 1,\n\t    PolicyStatus = 'Cancelled', 1,\n\t    0\n\t) AS v_RatingCoverageCancellationFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TType='New' OR TType='Renew', 'New',\r\n\t-- TType='Endorse', 'Endorse',\r\n\t-- 'Other')\n\tDECODE(\n\t    TRUE,\n\t    TType = 'New' OR TType = 'Renew', 'New',\n\t    TType = 'Endorse', 'Endorse',\n\t    'Other'\n\t) AS o_EndorsementFlag,\n\t-- *INF*: IIF(i_ParentCoverageObjectName!='WB_CU_PremiumDetail','0',:LKP.LKP_WBCUPREMIUMDETAILSTAGE(i_ParentCoverageObjectId))\n\tIFF(\n\t    i_ParentCoverageObjectName != 'WB_CU_PremiumDetail', '0',\n\t    LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId.Override\n\t) AS o_Override,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- PremiumTransactionBookedDate=TO_DATE('1800-01-01', 'YYYY-MM-DD'),0,\r\n\t-- CoverageDeleteFlag='0',1,\r\n\t-- CoverageDeleteFlag='1' AND lkp_StageCoverageDeleteFlag='0',1,\r\n\t-- CoverageDeleteFlag='1' AND lkp_RatingCoverageCancellationDate>=TO_DATE('21001231','YYYYMMDD'),1,\r\n\t-- Change<>0,1,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    PremiumTransactionBookedDate = TO_TIMESTAMP('1800-01-01', 'YYYY-MM-DD'), 0,\n\t    CoverageDeleteFlag = '0', 1,\n\t    CoverageDeleteFlag = '1' AND lkp_StageCoverageDeleteFlag = '0', 1,\n\t    CoverageDeleteFlag = '1' AND lkp_RatingCoverageCancellationDate >= TO_TIMESTAMP('21001231', 'YYYYMMDD'), 1,\n\t    Change <> 0, 1,\n\t    0\n\t) AS o_FilterFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TType='New','10',\r\n\t-- TType='Renew','11',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='0' AND Change>=0, '12',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='0' AND Change<0, '22',\r\n\t-- TType='Endorse' AND CoverageDeleteFlag='1', '28',\r\n\t-- TType='Cancel' AND i_TCancellationDate=PolicyEffectiveDate AND i_PolicyVersion='00','20',\r\n\t-- TType='Cancel' AND i_TCancellationDate>PolicyEffectiveDate AND i_PolicyVersion='00','23',\r\n\t-- TType='Cancel' AND i_TCancellationDate=PolicyEffectiveDate AND i_PolicyVersion<>'00','21',\r\n\t-- TType='Cancel' AND i_TCancellationDate>PolicyEffectiveDate AND i_PolicyVersion<>'00','25',\r\n\t-- TType='Reinstate','15',\r\n\t-- TType='Reissue','30',\r\n\t-- TType='Rewrite','31',\r\n\t-- TType='Rescind' AND Change>=0, '12',\r\n\t-- TType='Rescind' AND Change<0, '22',\r\n\t-- IN(TType,'FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change>=0,'14',\r\n\t-- IN(TType,'FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change<0,'24',\r\n\t-- IN(TType,'RetroCalculation','RevisedRetroCalculation','RetrospectiveCalculation') AND Change>=0,'57',\r\n\t-- IN(TType,'RetroCalculation','RevisedRetroCalculation','RetrospectiveCalculation') AND Change<0,'67',\r\n\t-- IN(TType,'FinalReporting','VoidFinalReporting') AND Change>=0,'12',\r\n\t-- IN(TType,'FinalReporting','VoidFinalReporting') AND Change<0,'22'\r\n\t-- )\t\n\tDECODE(\n\t    TRUE,\n\t    TType = 'New', '10',\n\t    TType = 'Renew', '11',\n\t    TType = 'Endorse' AND CoverageDeleteFlag = '0' AND Change >= 0, '12',\n\t    TType = 'Endorse' AND CoverageDeleteFlag = '0' AND Change < 0, '22',\n\t    TType = 'Endorse' AND CoverageDeleteFlag = '1', '28',\n\t    TType = 'Cancel' AND i_TCancellationDate = PolicyEffectiveDate AND i_PolicyVersion = '00', '20',\n\t    TType = 'Cancel' AND i_TCancellationDate > PolicyEffectiveDate AND i_PolicyVersion = '00', '23',\n\t    TType = 'Cancel' AND i_TCancellationDate = PolicyEffectiveDate AND i_PolicyVersion <> '00', '21',\n\t    TType = 'Cancel' AND i_TCancellationDate > PolicyEffectiveDate AND i_PolicyVersion <> '00', '25',\n\t    TType = 'Reinstate', '15',\n\t    TType = 'Reissue', '30',\n\t    TType = 'Rewrite', '31',\n\t    TType = 'Rescind' AND Change >= 0, '12',\n\t    TType = 'Rescind' AND Change < 0, '22',\n\t    TType IN ('FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change >= 0, '14',\n\t    TType IN ('FinalAudit','VoidFinalAudit','RevisedFinalAudit') AND Change < 0, '24',\n\t    TType IN ('RetroCalculation','RevisedRetroCalculation','RetrospectiveCalculation') AND Change >= 0, '57',\n\t    TType IN ('RetroCalculation','RevisedRetroCalculation','RetrospectiveCalculation') AND Change < 0, '67',\n\t    TType IN ('FinalReporting','VoidFinalReporting') AND Change >= 0, '12',\n\t    TType IN ('FinalReporting','VoidFinalReporting') AND Change < 0, '22'\n\t) AS o_StandardTransactionCode,\n\tEXP_PostAgg.TransactionPurpose,\n\tEXP_PostAgg.ExposureBasis,\n\tEXP_PostAgg.DeductibleBasis,\n\tEXP_PostAgg.TransactionCreatedUserId,\n\tEXP_PostAgg.ServiceCentreName,\n\tEXP_PostAgg.Policy_Key,\n\tEXP_PostAgg.IterationId,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.ClassCode,\n\tmplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy.CoverageType AS i_ProductAbbreviation,\n\t-- *INF*: IIF\r\n\t-- ((i_CoverageType='Building' and i_ProductAbbreviation='SBOP') \r\n\t-- or (i_CoverageType='BLDG' and i_ProductAbbreviation='SBOP') \r\n\t-- or (IN(i_CoverageType,'Building', 'FunctionalBuildingValuation')  and i_ProductAbbreviation='SMART') \r\n\t-- or (i_CoverageType='OTC' and i_ProductAbbreviation='Garage Liab'),'1',i_WindCoverageFlag)\r\n\t-- \r\n\t-- --IIF ((i_CoverageType='Building' and i_ProductAbbreviation='SBOP')  or (i_CoverageType='BLDG' and i_ProductAbbreviation='SBOP')  or (i_CoverageType='Building' and i_ProductAbbreviation='SMART')  or (i_CoverageType='OTC' and i_ProductAbbreviation='Garage  Liab'),'1',i_WindCoverageFlag) \n\tIFF(\n\t    (i_CoverageType = 'Building'\n\t    and i_ProductAbbreviation = 'SBOP')\n\t    or (i_CoverageType = 'BLDG'\n\t    and i_ProductAbbreviation = 'SBOP')\n\t    or (i_CoverageType IN ('Building','FunctionalBuildingValuation')\n\t    and i_ProductAbbreviation = 'SMART')\n\t    or (i_CoverageType = 'OTC'\n\t    and i_ProductAbbreviation = 'Garage Liab'),\n\t    '1',\n\t    i_WindCoverageFlag\n\t) AS v_WindCoverageFlag,\n\tv_WindCoverageFlag AS o_WindCoverageFlag,\n\tEXP_PostAgg.DeclaredEvent,\n\t-- *INF*: \r\n\t-- DECODE(TRUE,\r\n\t-- DeclaredEvent = 'T',1,\r\n\t-- DeclaredEvent ='F',0,\r\n\t-- ISNULL(DeclaredEvent),0\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    DeclaredEvent = 'T', 1,\n\t    DeclaredEvent = 'F', 0,\n\t    DeclaredEvent IS NULL, 0\n\t) AS O_DeclaredEvent\n\tFROM EXP_PostAgg\n\t -- Manually join with mplt_get_RiskLocation_PolicyCoverage_RatingCoverage_Akids_Hierarchy\n\tLEFT JOIN LKP_DCCoverageStaging\n\tON LKP_DCCoverageStaging.PolicyKey = EXP_PostAgg.Policy_Key AND LKP_DCCoverageStaging.CoverageGUID = EXP_PostAgg.CoverageGUID AND LKP_DCCoverageStaging.EffectiveDate <= EXP_PostAgg.TransactionEffectiveDate AND LKP_DCCoverageStaging.CreatedDate < EXP_PostAgg.CreatedDate AND LKP_DCCoverageStaging.OffsetCreatedDate > EXP_PostAgg.CreatedDate\n\tLEFT JOIN LKP_RatingCoverage\n\tON LKP_RatingCoverage.PolicyAKID = EXP_PostAgg.i_pol_ak_id AND LKP_RatingCoverage.CoverageGUID = EXP_PostAgg.CoverageGUID AND LKP_RatingCoverage.TEffectiveDate <= EXP_PostAgg.TransactionEffectiveDate AND LKP_RatingCoverage.TCreatedDate < EXP_PostAgg.CreatedDate AND LKP_RatingCoverage.OffsetCreatedDate > EXP_PostAgg.CreatedDate\n\tLEFT JOIN LKP_WBCUPREMIUMDETAILSTAGE LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId\n\tON LKP_WBCUPREMIUMDETAILSTAGE_i_ParentCoverageObjectId.WBCUPremiumDetailId = i_ParentCoverageObjectId\n\n),\nFIL_DefaultCoverages AS (\n\tSELECT\n\tRatingCoverageAKID, \n\tRatingCoverageCancellationDate, \n\tWritten, \n\tPremiumTransactionKey, \n\tTType AS Type, \n\tCreatedDate, \n\tTransactionEffectiveDate, \n\tTransactionExpirationDate, \n\tPremiumTransactionEnteredDate, \n\tPremiumTransactionBookedDate, \n\tPolicyEffectiveDate, \n\tPolicyExpirationDate, \n\tPremium, \n\tChange, \n\tPrior, \n\tPremiumType, \n\to_New_OffsetOnsetCode AS New_OffsetOnsetCode, \n\to_Endorse_OnsetCode AS Endorse_OnsetCode, \n\to_Endorse_OffsetCode AS Endorse_OffsetCode, \n\tReasonAmendedCode, \n\tCoverageGUID, \n\tDeductibleAmount, \n\tRetroactiveDate, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPackageModificationAdjustmentFactor, \n\tPackageModificationAdjustmentGroupCode, \n\tIncreasedLimitFactor, \n\tIncreasedLimitGroupCode, \n\tYearBuilt, \n\tAgencyActualCommissionRate, \n\tBaseRate, \n\tConstructionCode, \n\tStateRatingEffectiveDate, \n\tCoverageId, \n\tIndividualRiskPremiumModification, \n\to_WindCoverageFlag AS WindCoverageFlag, \n\to_EndorsementFlag AS EndorsementFlag, \n\to_FilterFlag AS FilterFlag, \n\to_StandardTransactionCode AS StandardTransactionCode, \n\tTransactionPurpose, \n\to_Override AS Override, \n\tCoverageType, \n\tExposureBasis, \n\tDeductibleBasis, \n\to_Exposure AS Exposure, \n\tTransactionCreatedUserId, \n\tServiceCentreName, \n\tIterationId, \n\tClassCode, \n\tO_DeclaredEvent AS DeclaredEvent\n\tFROM EXP_CoverageStatus\n\tWHERE FilterFlag=1\n),\nRTR_Classify_New_Endorse_GRP AS (\n\tSELECT\n\tRatingCoverageAKID,\n\tRatingCoverageCancellationDate,\n\tWritten,\n\tPremiumTransactionKey,\n\tType,\n\tCreatedDate,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPremium,\n\tChange,\n\tPrior,\n\tPremiumType,\n\tNew_OffsetOnsetCode,\n\tEndorse_OnsetCode,\n\tEndorse_OffsetCode,\n\tReasonAmendedCode,\n\tCoverageGUID,\n\tDeductibleAmount,\n\tRetroactiveDate,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tEndorsementFlag,\n\tStandardTransactionCode,\n\tTransactionPurpose,\n\tOverride,\n\tCoverageType,\n\tPremiumTransactionEnteredDate,\n\tExposureBasis,\n\tDeductibleBasis,\n\tExposure,\n\tTransactionCreatedUserId,\n\tServiceCentreName,\n\tIterationId AS o_IterationId,\n\tClassCode,\n\tDeclaredEvent\n\tFROM FIL_DefaultCoverages\n),\nRTR_Classify_New_Endorse_GRP_GRP_NEW AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='New'),\nRTR_Classify_New_Endorse_GRP_GRP_ENDORSE AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='Endorse'),\nRTR_Classify_New_Endorse_GRP_GRP_OTHER AS (SELECT * FROM RTR_Classify_New_Endorse_GRP WHERE EndorsementFlag='Other'),\nEXP_Calculate_Endorse_Onset_Offset AS (\n\tSELECT\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tPolicyEffectiveDate AS i_PolicyEffectiveDate,\n\tPolicyExpirationDate AS i_PolicyExpirationDate,\n\tPremium AS i_Premium,\n\tChange AS i_Change,\n\tPrior AS i_Prior,\n\t-- *INF*: DATE_DIFF(TransactionExpirationDate,TransactionEffectiveDate,'D')\n\tDATEDIFF(DAY,TransactionExpirationDate,TransactionEffectiveDate) AS v_TransactionPeriod,\n\t-- *INF*: DATE_DIFF(i_PolicyExpirationDate,i_PolicyEffectiveDate,'D')\n\tDATEDIFF(DAY,i_PolicyExpirationDate,i_PolicyEffectiveDate) AS v_PolicyPeriod,\n\t-- *INF*: -1*IIF(\r\n\t--   v_TransactionPeriod<=0 OR v_PolicyPeriod<=0,\r\n\t--   i_Prior,\r\n\t--   i_Prior*v_TransactionPeriod/v_PolicyPeriod\r\n\t-- )\n\t- 1 * IFF(\n\t    v_TransactionPeriod <= 0 OR v_PolicyPeriod <= 0, i_Prior,\n\t    i_Prior * v_TransactionPeriod / v_PolicyPeriod\n\t) AS o_PremiumTransactionAmount_Offset,\n\t-1*i_Prior AS o_FullTermPremium_Offset,\n\t-- *INF*: IIF(\r\n\t--   v_TransactionPeriod<=0 OR v_PolicyPeriod<=0,\r\n\t--   i_Change+i_Prior,\r\n\t-- i_Change+i_Prior*v_TransactionPeriod/v_PolicyPeriod\r\n\t-- )\n\tIFF(\n\t    v_TransactionPeriod <= 0 OR v_PolicyPeriod <= 0, i_Change + i_Prior,\n\t    i_Change + i_Prior * v_TransactionPeriod / v_PolicyPeriod\n\t) AS o_PremiumTransactionAmount_Onset,\n\ti_Premium AS o_FullTermPremium_Onset\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n),\nEXP_OtherTransactions AS (\n\tSELECT\n\tRatingCoverageAKID AS RatingCoverageAKID4,\n\tRatingCoverageCancellationDate AS i_RatingCoverageCancellationDate4,\n\tWritten AS Written4,\n\tPremiumTransactionKey AS PremiumTransactionKey4,\n\tType AS Type4,\n\tCreatedDate AS CreatedDate4,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tPremiumTransactionBookedDate AS PremiumTransactionBookedDate4,\n\tPremium AS i_Premium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_RatingCoverageCancellationDate4<TO_DATE('21001231','YYYYMMDD'),-1*i_Premium,\r\n\t-- Change4=0,0,\r\n\t-- i_Premium)\n\tDECODE(\n\t    TRUE,\n\t    i_RatingCoverageCancellationDate4 < TO_TIMESTAMP('21001231', 'YYYYMMDD'), - 1 * i_Premium,\n\t    Change4 = 0, 0,\n\t    i_Premium\n\t) AS o_Premium,\n\tChange AS Change4,\n\tPremiumType AS PremiumType4,\n\tNew_OffsetOnsetCode AS New_OffsetOnsetCode4,\n\tReasonAmendedCode AS ReasonAmendedCode4,\n\tCoverageGUID AS CoverageGUID4,\n\tDeductibleAmount AS DeductibleAmount4,\n\tExperienceModificationFactor AS ExperienceModificationFactor4,\n\tExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate4,\n\tPackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor4,\n\tPackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode4,\n\tIncreasedLimitFactor AS IncreasedLimitFactor4,\n\tIncreasedLimitGroupCode AS IncreasedLimitGroupCode4,\n\tYearBuilt AS YearBuilt4,\n\tAgencyActualCommissionRate AS AgencyActualCommissionRate4,\n\tBaseRate AS BaseRate4,\n\tConstructionCode AS ConstructionCode4,\n\tStateRatingEffectiveDate AS StateRatingEffectiveDate4,\n\tCoverageId AS CoverageId4,\n\tIndividualRiskPremiumModification AS IndividualRiskPremiumModification4,\n\tWindCoverageFlag AS WindCoverageFlag4,\n\tStandardTransactionCode AS StandardTransactionCode4,\n\tTransactionPurpose AS TransactionPurpose4,\n\tOverride AS Override4,\n\tCoverageType AS CoverageType4,\n\tPremiumTransactionEnteredDate AS PremiumTransactionEnteredDate4,\n\tExposureBasis AS ExposureBasis4,\n\tDeductibleBasis AS DeductibleBasis4,\n\tExposure AS Exposure4,\n\tTransactionCreatedUserId AS TransactionCreatedUserId4,\n\tServiceCentreName AS ServiceCentreName4,\n\to_IterationId AS o_IterationId4,\n\tClassCode AS ClassCode4,\n\tDeclaredEvent AS DeclaredEvent4\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_OTHER\n),\nUnion_New_Endorse_Other AS (\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, TransactionEffectiveDate AS PremiumTransactionEffectiveDate, TransactionExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, Written AS PremiumTransactionAmount, Premium AS FullTermPremium, PremiumType, New_OffsetOnsetCode AS OffsetOnsetIndicator, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, o_IterationId AS IterationId, ClassCode, DeclaredEvent AS DeclaredEventFlag\n\tFROM RTR_Classify_New_Endorse_GRP_GRP_NEW\n\tUNION\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, TransactionEffectiveDate AS PremiumTransactionEffectiveDate, TransactionExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, o_PremiumTransactionAmount_Onset AS PremiumTransactionAmount, o_FullTermPremium_Onset AS FullTermPremium, PremiumType, Endorse_OnsetCode AS OffsetOnsetIndicator, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, o_IterationId AS IterationId, ClassCode, DeclaredEvent AS DeclaredEventFlag\n\tFROM EXP_Calculate_Endorse_Onset_Offset\n\t-- Manually join with RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n\tUNION\n\tSELECT RatingCoverageAKID, Written, PremiumTransactionKey, Type AS PremiumTransactionCode, CreatedDate, TransactionEffectiveDate AS PremiumTransactionEffectiveDate, TransactionExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate, o_PremiumTransactionAmount_Offset AS PremiumTransactionAmount, o_FullTermPremium_Offset AS FullTermPremium, PremiumType, Endorse_OffsetCode AS OffsetOnsetIndicator, CoverageGUID, ReasonAmendedCode, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, CoverageId, IndividualRiskPremiumModification, WindCoverageFlag, StandardTransactionCode, TransactionPurpose, Override, CoverageType, PremiumTransactionEnteredDate, ExposureBasis, DeductibleBasis, Exposure, TransactionCreatedUserId, ServiceCentreName, o_IterationId AS IterationId, ClassCode, DeclaredEvent AS DeclaredEventFlag\n\tFROM EXP_Calculate_Endorse_Onset_Offset\n\t-- Manually join with RTR_Classify_New_Endorse_GRP_GRP_ENDORSE\n\tUNION\n\tSELECT RatingCoverageAKID4 AS RatingCoverageAKID, Written4 AS Written, PremiumTransactionKey4 AS PremiumTransactionKey, Type4 AS PremiumTransactionCode, CreatedDate4 AS CreatedDate, TransactionEffectiveDate AS PremiumTransactionEffectiveDate, TransactionExpirationDate AS PremiumTransactionExpirationDate, PremiumTransactionBookedDate4 AS PremiumTransactionBookedDate, Change4 AS PremiumTransactionAmount, o_Premium AS FullTermPremium, PremiumType4 AS PremiumType, New_OffsetOnsetCode4 AS OffsetOnsetIndicator, CoverageGUID4 AS CoverageGUID, ReasonAmendedCode4 AS ReasonAmendedCode, DeductibleAmount4 AS DeductibleAmount, ExperienceModificationFactor4 AS ExperienceModificationFactor, ExperienceModificationEffectiveDate4 AS ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor4 AS PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode4 AS PackageModificationAdjustmentGroupCode, IncreasedLimitFactor4 AS IncreasedLimitFactor, IncreasedLimitGroupCode4 AS IncreasedLimitGroupCode, YearBuilt4 AS YearBuilt, AgencyActualCommissionRate4 AS AgencyActualCommissionRate, BaseRate4 AS BaseRate, ConstructionCode4 AS ConstructionCode, StateRatingEffectiveDate4 AS StateRatingEffectiveDate, CoverageId4 AS CoverageId, IndividualRiskPremiumModification4 AS IndividualRiskPremiumModification, WindCoverageFlag4 AS WindCoverageFlag, StandardTransactionCode4 AS StandardTransactionCode, TransactionPurpose4 AS TransactionPurpose, Override4 AS Override, CoverageType4 AS CoverageType, PremiumTransactionEnteredDate4 AS PremiumTransactionEnteredDate, ExposureBasis4 AS ExposureBasis, DeductibleBasis4 AS DeductibleBasis, Exposure4 AS Exposure, TransactionCreatedUserId4 AS TransactionCreatedUserId, ServiceCentreName4 AS ServiceCentreName, o_IterationId4 AS IterationId, ClassCode4 AS ClassCode, DeclaredEvent4 AS DeclaredEventFlag\n\tFROM EXP_OtherTransactions\n),\nEXP_Calculate_PremiumTransactionHashKey AS (\n\tSELECT\n\tRatingCoverageAKID AS i_RatingCoverageAKID,\n\tWritten AS i_Written,\n\tPremiumTransactionCode AS i_PremiumTransactionCode,\n\tOverride AS i_Override,\n\tCoverageType AS i_CoverageType,\n\tPremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tFullTermPremium AS i_FullTermPremium,\n\tTransactionPurpose AS i_TransactionPurpose,\n\tOffsetOnsetIndicator AS i_OffsetOnsetCode,\n\tPremiumTransactionKey,\n\tCreatedDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPremiumType,\n\tCoverageGUID,\n\tReasonAmendedCode,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tCoverageId,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tStandardTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tDeductibleBasis,\n\tExposureBasis,\n\tExposure,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_PremiumTransactionAmount,-1*i_PremiumTransactionAmount)\n\tIFF(\n\t    i_TransactionPurpose != 'Offset', i_PremiumTransactionAmount,\n\t    - 1 * i_PremiumTransactionAmount\n\t) AS v_PremiumTransactionAmount,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_FullTermPremium,-1*i_FullTermPremium)\n\tIFF(i_TransactionPurpose != 'Offset', i_FullTermPremium, - 1 * i_FullTermPremium) AS v_FullTermPremium,\n\t-- *INF*: IIF(NOT ISNULL(i_RatingCoverageAKID), i_RatingCoverageAKID,-1)\n\tIFF(i_RatingCoverageAKID IS NOT NULL, i_RatingCoverageAKID, - 1) AS v_RatingCoverageAKId,\n\t-- *INF*: IIF(i_TransactionPurpose!='Offset',i_OffsetOnsetCode,'Deprecated')\n\tIFF(i_TransactionPurpose != 'Offset', i_OffsetOnsetCode, 'Deprecated') AS o_OffsetOnsetCode,\n\t-- *INF*: LTRIM(RTRIM(i_PremiumTransactionCode))\n\tLTRIM(RTRIM(i_PremiumTransactionCode)) AS o_PremiumTransactionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_Override='0',v_PremiumTransactionAmount,\r\n\t-- i_Override='1',v_PremiumTransactionAmount,\r\n\t-- i_CoverageType='Revised',v_PremiumTransactionAmount,\r\n\t-- 0\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_Override = '0', v_PremiumTransactionAmount,\n\t    i_Override = '1', v_PremiumTransactionAmount,\n\t    i_CoverageType = 'Revised', v_PremiumTransactionAmount,\n\t    0\n\t) AS o_PremiumTransactionAmount,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_Override='0',v_FullTermPremium,\r\n\t-- i_CoverageType='Revised',v_FullTermPremium,\r\n\t-- 0\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_Override = '0', v_FullTermPremium,\n\t    i_CoverageType = 'Revised', v_FullTermPremium,\n\t    0\n\t) AS o_FullTermPremium,\n\tv_RatingCoverageAKId AS o_RatingCoverageAKId,\n\t-- *INF*: MD5(v_RatingCoverageAKId || CoverageGUID || TO_CHAR(CreatedDate)||  i_OffsetOnsetCode || i_TransactionPurpose)\r\n\t-- \r\n\t-- -- Above changes for UID project\r\n\t-- -- MD5(CoverageGUID|| TO_CHAR(CreatedDate)||  i_OffsetOnsetCode || i_TransactionPurpose\r\n\t--  \r\n\t-- \n\tMD5(v_RatingCoverageAKId || CoverageGUID || TO_CHAR(CreatedDate) || i_OffsetOnsetCode || i_TransactionPurpose) AS o_PremiumTransactionHashKey,\n\tTransactionCreatedUserId AS TransactionCreatedUserId5,\n\tServiceCentreName AS ServiceCentreName5,\n\t-- *INF*: :LKP.LKP_NUMBEROFEMPLOYEES(CoverageId)\n\tLKP_NUMBEROFEMPLOYEES_CoverageId.NumberOfEmployees AS v_NumberOfEmployees,\n\t-- *INF*: IIF(ISNULL(v_NumberOfEmployees),0,v_NumberOfEmployees)\n\tIFF(v_NumberOfEmployees IS NULL, 0, v_NumberOfEmployees) AS o_NumberOfEmployees,\n\t'Restate' AS NegateRestateCode,\n\t-- *INF*: :LKP.LKP_SUP_PREMIUM_TRANSACTION_CODE(i_PremiumTransactionCode,StandardTransactionCode)\n\tLKP_SUP_PREMIUM_TRANSACTION_CODE_i_PremiumTransactionCode_StandardTransactionCode.sup_prem_trans_code_id AS v_sup_premium_transaction_id,\n\t-- *INF*: IIF(ISNULL(v_sup_premium_transaction_id),-1,v_sup_premium_transaction_id)\n\tIFF(v_sup_premium_transaction_id IS NULL, - 1, v_sup_premium_transaction_id) AS o_sup_premium_transaction_id,\n\tIterationId,\n\tIterationId +1 AS PremiumLoadSequence,\n\tClassCode,\n\tDeclaredEventFlag\n\tFROM Union_New_Endorse_Other\n\tLEFT JOIN LKP_NUMBEROFEMPLOYEES LKP_NUMBEROFEMPLOYEES_CoverageId\n\tON LKP_NUMBEROFEMPLOYEES_CoverageId.CoverageId = CoverageId\n\n\tLEFT JOIN LKP_SUP_PREMIUM_TRANSACTION_CODE LKP_SUP_PREMIUM_TRANSACTION_CODE_i_PremiumTransactionCode_StandardTransactionCode\n\tON LKP_SUP_PREMIUM_TRANSACTION_CODE_i_PremiumTransactionCode_StandardTransactionCode.prem_trans_code = i_PremiumTransactionCode\n\tAND LKP_SUP_PREMIUM_TRANSACTION_CODE_i_PremiumTransactionCode_StandardTransactionCode.StandardPremiumTransactionCode = StandardTransactionCode\n\n),\nLKP_PremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionAKID,\n\tPremiumTransactionID,\n\tPremiumTransactionHashKey,\n\tNegateRestateCode,\n\tPremiumLoadSequence\n\tFROM (\n\t\tSELECT PT.PremiumTransactionAKID    AS PremiumTransactionAKID,\r\n\t\t       PT.PremiumTransactionID      AS PremiumTransactionID,\r\n\t\t       PT.PremiumTransactionHashKey AS PremiumTransactionHashKey,\r\n\t\t       PT.NegateRestateCode as NegateRestateCode, \r\n\t\t       PT.PremiumLoadSequence as PremiumLoadSequence\r\n\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction PT\r\n\t\t       INNER HASH JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\t                    ON RC.RatingCoverageAKId = PT.RatingCoverageAKId\r\n\t\t                       AND RC.EffectiveDate = PT.EffectiveDate\r\n\t\t       INNER HASH JOIN (SELECT DISTINCT WCT.CoverageGUId\r\n\t\t                        FROM   @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction WCT) WCT \r\n\t\t\t\t\t\t\t\tON WCT.CoverageGUID = RC.CoverageGUID\r\n\t\tWHERE  PT.CurrentSnapshotFlag = '1' AND PT.NegateRestateCode = 'Restate'\r\n\t\t       AND PT.SourceSystemID = 'DCT'\r\n\t\t       AND PT.ReasonAmendedCode NOT IN ( 'Claw Back', 'CWO' )\r\n\t\t\r\n\t\tUNION \r\n\t\t\r\n\t\tSELECT PT.PremiumTransactionAKID    AS PremiumTransactionAKID,\r\n\t\t       PT.PremiumTransactionID      AS PremiumTransactionID,\r\n\t\t       PT.PremiumTransactionHashKey AS PremiumTransactionHashKey,\r\n\t\t       PT.NegateRestateCode as NegateRestateCode, \r\n\t\t       PT.PremiumLoadSequence as PremiumLoadSequence\r\n\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction PT WHERE RatingCoverageAKID = - 1 AND PT.CurrentSnapshotFlag = '1' AND PT.NegateRestateCode = 'Restate' AND PT.SourceSystemID = 'DCT' AND PT.ReasonAmendedCode NOT IN ( 'Claw Back', 'CWO' )\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionHashKey,NegateRestateCode,PremiumLoadSequence ORDER BY PremiumTransactionAKID DESC) = 1\n),\nmplt_Evaluate_WrittenExposure_DCT AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_Calculate_WrittenExposure AS (\n\t\tSELECT\n\t\tClassCode,\n\t\tCoverageType,\n\t\t-- *INF*: DECODE  (TRUE,\r\n\t\t-- INSTR(CoverageType,'ManualPremium') > 0,\r\n\t\t-- 'ManualPremium',\r\n\t\t-- 'N/A')\r\n\t\t-- --Change coverage type coming in from staging as necessary to include subtypes like USL&H\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    REGEXP_INSTR(CoverageType, 'ManualPremium') > 0, 'ManualPremium',\n\t\t    'N/A'\n\t\t) AS v_CoverageType,\n\t\tv_CoverageType AS o_CoverageType,\n\t\tBaseRate,\n\t\tPremiumTransactionAmount,\n\t\tPremiumTransactionCode,\n\t\tReasonAmendedCode,\n\t\t-- *INF*: ROUND(PremiumTransactionAmount,4)\n\t\tROUND(PremiumTransactionAmount, 4) AS v_PremiumTransactionAmount,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- BaseRate = 0,0,\r\n\t\t-- BaseRate <> 0, (v_PremiumTransactionAmount  / BaseRate)\r\n\t\t-- )\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    BaseRate = 0, 0,\n\t\t    BaseRate <> 0, (v_PremiumTransactionAmount / BaseRate)\n\t\t) AS v_CalculatedExposure,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- v_CoverageType = 'ManualPremium'  AND ClassCode = '0908',1,\r\n\t\t-- v_CoverageType = 'ManualPremium' AND ClassCode = '0913',1,\r\n\t\t-- v_CoverageType = 'ManualPremium' AND ClassCode = '7709',0,\r\n\t\t-- v_CoverageType = 'ManualPremium',100,\r\n\t\t-- 0)\r\n\t\t-- --Flag eligible class codes of Exposure Basis 'Unit' to compensate for historical issue where ExampleData didn't pass along correct exposure basis to us. Determine the multipler for DomesticWorkers  class codes as 1, VolunteerFirefighters as 0 and all other Manual Premium typically Payroll as 100. the default value is zero for all coverage types that are not ManualPremium\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    v_CoverageType = 'ManualPremium' AND ClassCode = '0908', 1,\n\t\t    v_CoverageType = 'ManualPremium' AND ClassCode = '0913', 1,\n\t\t    v_CoverageType = 'ManualPremium' AND ClassCode = '7709', 0,\n\t\t    v_CoverageType = 'ManualPremium', 100,\n\t\t    0\n\t\t) AS v_UnitMultiplier,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- INSTR(PremiumTransactionCode,'Audit') = 0  AND v_CoverageType = 'ManualPremium', v_CalculatedExposure * v_UnitMultiplier,\r\n\t\t-- INSTR(PremiumTransactionCode,'Audit') > 0  AND  v_CoverageType = 'ManualPremium',0,\r\n\t\t-- 0)\r\n\t\t-- -- For eligible manual premium coverage records with non audit transaction codes, we back into Exposure as an inverse function of premium and apply the determined multipler of 1,100 or 0 for DomesticWorkers, Payroll or VolunteerFirefighters\r\n\t\t-- -- For eligible manual premium coverage records with audit type transactions, we zero out the written exposure for subsequent true up downstream\r\n\t\t-- --For all non manual premium coverages with audit or non audit transactions, we default to zero for written exposure\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    REGEXP_INSTR(PremiumTransactionCode, 'Audit') = 0 AND v_CoverageType = 'ManualPremium', v_CalculatedExposure * v_UnitMultiplier,\n\t\t    REGEXP_INSTR(PremiumTransactionCode, 'Audit') > 0 AND v_CoverageType = 'ManualPremium', 0,\n\t\t    0\n\t\t) AS v_WrittenExposure,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- ISNULL(v_WrittenExposure),0,\r\n\t\t-- IN(ReasonAmendedCode,'CWO','Claw Back'), 0,\r\n\t\t-- ROUND(v_WrittenExposure,4))\r\n\t\t-- -- If CWO or ClawBack premium, then we zero out written exposure else we round up calculated written exposure value to 4 decimal places\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    v_WrittenExposure IS NULL, 0,\n\t\t    ReasonAmendedCode IN ('CWO','Claw Back'), 0,\n\t\t    ROUND(v_WrittenExposure, 4)\n\t\t) AS WrittenExposure\n\t\tFROM INPUT\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tClassCode, \n\t\to_CoverageType AS CoverageType, \n\t\tBaseRate, \n\t\tPremiumTransactionAmount, \n\t\tPremiumTransactionCode, \n\t\tWrittenExposure\n\t\tFROM EXP_Calculate_WrittenExposure\n\t),\n),\nEXP_Format_PremiumTransaction AS (\n\tSELECT\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionKey AS i_PremiumTransactionKey,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionEnteredDate AS i_PremiumTransactionEnteredDate,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionEffectiveDate AS i_PremiumTransactionEffectiveDate,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionExpirationDate AS i_PremiumTransactionExpirationDate,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumTransactionBookedDate AS i_PremiumTransactionBookedDate,\n\tEXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionCode AS i_PremiumTransactionCode,\n\tEXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionAmount AS i_PremiumTransactionAmount,\n\tEXP_Calculate_PremiumTransactionHashKey.o_FullTermPremium AS i_FullTermPremium,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumType AS i_PremiumType,\n\tEXP_Calculate_PremiumTransactionHashKey.NegateRestateCode AS i_OffsetOnsetIndicator,\n\tEXP_Calculate_PremiumTransactionHashKey.CoverageGUID AS i_CoverageGUID,\n\tEXP_Calculate_PremiumTransactionHashKey.ReasonAmendedCode AS i_ReasonAmendedCode,\n\tEXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionHashKey AS i_PremiumTransactionHashKey,\n\tEXP_Calculate_PremiumTransactionHashKey.o_RatingCoverageAKId AS i_RatingCoverageAKId,\n\tEXP_Calculate_PremiumTransactionHashKey.CoverageId AS i_CoverageId,\n\tEXP_Calculate_PremiumTransactionHashKey.o_sup_premium_transaction_id AS i_sup_premium_transaction_id,\n\tEXP_Calculate_PremiumTransactionHashKey.o_OffsetOnsetCode AS i_OffsetOnsetCode,\n\tEXP_Calculate_PremiumTransactionHashKey.CreatedDate,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: CreatedDate\r\n\t-- ---i_PremiumTransactionEnteredDate\n\tCreatedDate AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\t0 AS o_LogicalIndicator,\n\t'1' AS o_LogicalDeleteFlag,\n\ti_PremiumTransactionHashKey AS o_PremiumTransactionHashKey,\n\tEXP_Calculate_PremiumTransactionHashKey.PremiumLoadSequence AS o_PremiumLoadSequence,\n\t1 AS o_DuplicateSequence,\n\t-1 AS o_ReinsuranceCoverageAKID,\n\t-1 AS o_StatisticalCoverageAKID,\n\ti_PremiumTransactionKey AS o_PremiumTransactionKey,\n\t'N/A' AS o_PMSFunctionCode,\n\ti_PremiumTransactionCode AS o_PremiumTransactionCode,\n\ti_PremiumTransactionEnteredDate AS o_PremiumTransactionEnteredDate,\n\ti_PremiumTransactionEffectiveDate AS o_PremiumTransactionEffectiveDate,\n\ti_PremiumTransactionExpirationDate AS o_PremiumTransactionExpirationDate,\n\ti_PremiumTransactionBookedDate AS o_PremiumTransactionBookedDate,\n\ti_PremiumTransactionAmount AS o_PremiumTransactionAmount,\n\ti_FullTermPremium AS o_FullTermPremium,\n\ti_PremiumType AS o_PremiumType,\n\t-- *INF*: i_ReasonAmendedCode\r\n\t-- \r\n\t-- --'TBD'\n\ti_ReasonAmendedCode AS o_ReasonAmendedCode,\n\t-- *INF*: i_OffsetOnsetCode\r\n\t-- --i_OffsetOnsetIndicator\r\n\t-- \n\ti_OffsetOnsetCode AS o_OffsetOnsetCode,\n\ti_sup_premium_transaction_id AS o_sup_premium_transaction_id,\n\ti_RatingCoverageAKId AS o_RatingCoverageAKId,\n\tEXP_Calculate_PremiumTransactionHashKey.DeductibleAmount,\n\tEXP_Calculate_PremiumTransactionHashKey.ExperienceModificationFactor,\n\tEXP_Calculate_PremiumTransactionHashKey.ExperienceModificationEffectiveDate,\n\tEXP_Calculate_PremiumTransactionHashKey.PackageModificationAdjustmentFactor,\n\tEXP_Calculate_PremiumTransactionHashKey.PackageModificationAdjustmentGroupCode,\n\tEXP_Calculate_PremiumTransactionHashKey.IncreasedLimitFactor,\n\tEXP_Calculate_PremiumTransactionHashKey.IncreasedLimitGroupCode,\n\tEXP_Calculate_PremiumTransactionHashKey.YearBuilt,\n\tEXP_Calculate_PremiumTransactionHashKey.AgencyActualCommissionRate AS i_AgencyActualCommissionRate,\n\ti_AgencyActualCommissionRate*0.01 AS o_AgencyActualCommissionRate,\n\tEXP_Calculate_PremiumTransactionHashKey.BaseRate,\n\tEXP_Calculate_PremiumTransactionHashKey.ConstructionCode,\n\tEXP_Calculate_PremiumTransactionHashKey.StateRatingEffectiveDate,\n\ti_CoverageId AS o_PremiumTransactionStageId,\n\tEXP_Calculate_PremiumTransactionHashKey.IndividualRiskPremiumModification,\n\tEXP_Calculate_PremiumTransactionHashKey.WindCoverageFlag,\n\tEXP_Calculate_PremiumTransactionHashKey.DeductibleBasis,\n\tEXP_Calculate_PremiumTransactionHashKey.ExposureBasis,\n\tEXP_Calculate_PremiumTransactionHashKey.Exposure,\n\tEXP_Calculate_PremiumTransactionHashKey.TransactionCreatedUserId5,\n\tEXP_Calculate_PremiumTransactionHashKey.ServiceCentreName5,\n\tEXP_Calculate_PremiumTransactionHashKey.o_NumberOfEmployees,\n\tLKP_PremiumTransaction.PremiumTransactionAKID AS lkpPremiumTransactionAKID,\n\tLKP_PremiumTransaction.PremiumTransactionID AS lkpPremiumTransactionID,\n\tEXP_Calculate_PremiumTransactionHashKey.NegateRestateCode,\n\tmplt_Evaluate_WrittenExposure_DCT.WrittenExposure,\n\t-- *INF*: 0\r\n\t-- --WrittenExposure\r\n\t-- --after deprecated offset is solved, this code can be uncommented to replace the default of zero\n\t0 AS o_WrittenExposure,\n\tEXP_Calculate_PremiumTransactionHashKey.DeclaredEventFlag\n\tFROM EXP_Calculate_PremiumTransactionHashKey\n\t -- Manually join with mplt_Evaluate_WrittenExposure_DCT\n\tLEFT JOIN LKP_PremiumTransaction\n\tON LKP_PremiumTransaction.PremiumTransactionHashKey = EXP_Calculate_PremiumTransactionHashKey.o_PremiumTransactionHashKey AND LKP_PremiumTransaction.NegateRestateCode = EXP_Calculate_PremiumTransactionHashKey.NegateRestateCode AND LKP_PremiumTransaction.PremiumLoadSequence = EXP_Calculate_PremiumTransactionHashKey.PremiumLoadSequence\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tlkpPremiumTransactionAKID AS lkp_PremiumTransactionAKID,\n\tlkpPremiumTransactionID AS lkp_PremiumTransactionID,\n\to_NumberOfEmployees AS NumberOfEmployee,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\to_LogicalIndicator AS LogicalIndicator,\n\to_LogicalDeleteFlag AS LogicalDeleteFlag,\n\to_PremiumTransactionHashKey AS PremiumTransactionHashKey,\n\to_PremiumLoadSequence AS PremiumLoadSequence,\n\to_DuplicateSequence AS DuplicateSequence,\n\to_ReinsuranceCoverageAKID AS ReinsuranceCoverageAKID,\n\to_StatisticalCoverageAKID AS StatisticalCoverageAKID,\n\to_PremiumTransactionKey AS PremiumTransactionKey,\n\to_PMSFunctionCode AS PMSFunctionCode,\n\to_PremiumTransactionCode AS PremiumTransactionCode,\n\to_PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate,\n\to_PremiumTransactionEffectiveDate AS PremiumTransactionEffectiveDate,\n\to_PremiumTransactionExpirationDate AS PremiumTransactionExpirationDate,\n\to_PremiumTransactionBookedDate AS PremiumTransactionBookedDate,\n\to_PremiumTransactionAmount AS PremiumTransactionAmount,\n\to_FullTermPremium AS FullTermPremium,\n\to_PremiumType AS PremiumType,\n\to_ReasonAmendedCode AS ReasonAmendedCode,\n\to_OffsetOnsetCode AS OffsetOnsetCode,\n\to_sup_premium_transaction_id AS SupPremiumTransactionCodeId,\n\to_RatingCoverageAKId AS RatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\to_AgencyActualCommissionRate AS AgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\to_PremiumTransactionStageId AS PremiumTransactionStageId,\n\tExposure,\n\tTransactionCreatedUserId5 AS TransactionCreatedUserId,\n\tServiceCentreName5 AS ServiceCentreName,\n\tNegateRestateCode,\n\to_WrittenExposure AS WrittenExposure,\n\tDeclaredEventFlag\n\tFROM EXP_Format_PremiumTransaction\n),\nRTR_Insert_Update_INSERT_PREMIUM AS (SELECT * FROM RTR_Insert_Update WHERE ISNULL(lkp_PremiumTransactionAKID) AND NOT (IN(OffsetOnsetCode,'Offset','Deprecated')=1 AND PremiumTransactionAmount=0)),\nRTR_Insert_Update_UPDATE_PREMIUM AS (SELECT * FROM RTR_Insert_Update WHERE (NOT ISNULL(lkp_PremiumTransactionAKID)) AND (NOT (IN(OffsetOnsetCode,'Offset','Deprecated')=1 AND PremiumTransactionAmount=0))),\nSEQ_PremiumTransactionAKID AS (\n\tCREATE SEQUENCE SEQ_PremiumTransactionAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Set_AKID AS (\n\tSELECT\n\tSEQ_PremiumTransactionAKID.NEXTVAL AS i_NEXTVAL,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tLogicalIndicator,\n\tLogicalDeleteFlag,\n\tPremiumTransactionHashKey,\n\tPremiumLoadSequence,\n\tDuplicateSequence,\n\ti_NEXTVAL AS PremiumTransactionAKID,\n\tReinsuranceCoverageAKID,\n\tStatisticalCoverageAKID,\n\tPremiumTransactionKey,\n\tPMSFunctionCode,\n\tPremiumTransactionCode,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionExpirationDate,\n\tPremiumTransactionBookedDate,\n\tPremiumTransactionAmount,\n\tFullTermPremium,\n\tPremiumType,\n\tReasonAmendedCode,\n\tOffsetOnsetCode,\n\tSupPremiumTransactionCodeId,\n\tRatingCoverageAKId,\n\tDeductibleAmount,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPackageModificationAdjustmentFactor,\n\tPackageModificationAdjustmentGroupCode,\n\tIncreasedLimitFactor,\n\tIncreasedLimitGroupCode,\n\tYearBuilt,\n\tAgencyActualCommissionRate,\n\tBaseRate,\n\tConstructionCode,\n\tStateRatingEffectiveDate,\n\tIndividualRiskPremiumModification,\n\tWindCoverageFlag,\n\tDeductibleBasis,\n\tExposureBasis,\n\tPremiumTransactionStageId,\n\tExposure,\n\tTransactionCreatedUserId AS TransactionCreatedUserId1,\n\tServiceCentreName AS ServiceCentreName1,\n\tNumberOfEmployee AS NumberOfEmployee1,\n\tNegateRestateCode AS NegateRestateCode1,\n\tWrittenExposure,\n\tDeclaredEventFlag AS DeclaredEventFlag1\n\tFROM RTR_Insert_Update_INSERT_PREMIUM\n),\nWorkPremiumTransaction_Restate AS (\n\n\t------------ PRE SQL ----------\n\tif not exists (\r\n\tselect 1 from @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction\r\n\twhere AuditID=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\tand SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}')\r\n\ttruncate table @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t-------------------------------\n\n\n\tTRUNCATE TABLE @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction;\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, PremiumTransactionStageId)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tPremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tPREMIUMTRANSACTIONSTAGEID\n\tFROM EXP_Set_AKID\n),\nLKP_WorkPremiumTransaction AS (\n\tSELECT\n\tWorkPremiumTransactionId,\n\tPremiumTransactionAKId,\n\tAuditID,\n\tSourceSystemID,\n\tPremiumTransactionStageId\n\tFROM (\n\t\tSELECT \n\t\t\tWorkPremiumTransactionId,\n\t\t\tPremiumTransactionAKId,\n\t\t\tAuditID,\n\t\t\tSourceSystemID,\n\t\t\tPremiumTransactionStageId\n\t\tFROM WorkPremiumTransaction\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,AuditID,SourceSystemID,PremiumTransactionStageId ORDER BY WorkPremiumTransactionId) = 1\n),\nRTR_WorkPremiumTransaction_Insert_Update AS (\n\tSELECT\n\tLKP_WorkPremiumTransaction.WorkPremiumTransactionId AS lkp_WorkPremiumTransactionId,\n\tRTR_Insert_Update_UPDATE_PREMIUM.AuditID AS AuditID3,\n\tRTR_Insert_Update_UPDATE_PREMIUM.SourceSystemID AS SourceSystemID3,\n\tRTR_Insert_Update_UPDATE_PREMIUM.CreatedDate AS CreatedDate3,\n\tRTR_Insert_Update_UPDATE_PREMIUM.lkp_PremiumTransactionAKID AS lkp_PremiumTransactionAKID3,\n\tRTR_Insert_Update_UPDATE_PREMIUM.PremiumTransactionStageId AS PremiumTransactionStageId3\n\tFROM RTR_Insert_Update_UPDATE_PREMIUM\n\tLEFT JOIN LKP_WorkPremiumTransaction\n\tON LKP_WorkPremiumTransaction.PremiumTransactionAKId = RTR_Insert_Update.lkp_PremiumTransactionAKID3 AND LKP_WorkPremiumTransaction.AuditID = RTR_Insert_Update.AuditID3 AND LKP_WorkPremiumTransaction.SourceSystemID = RTR_Insert_Update.SourceSystemID3 AND LKP_WorkPremiumTransaction.PremiumTransactionStageId = RTR_Insert_Update.PremiumTransactionStageId3\n),\nRTR_WorkPremiumTransaction_Insert_Update_Insert AS (SELECT * FROM RTR_WorkPremiumTransaction_Insert_Update WHERE ISNULL(lkp_WorkPremiumTransactionId)),\nRTR_WorkPremiumTransaction_Insert_Update_Update AS (SELECT * FROM RTR_WorkPremiumTransaction_Insert_Update WHERE NOT ISNULL(lkp_WorkPremiumTransactionId)),\nUPD_WorkPremiumTransaction AS (\n\tSELECT\n\tlkp_WorkPremiumTransactionId AS WorkPremiumTransactionId, \n\tAuditID AS AuditID3, \n\tSourceSystemID AS SourceSystemID3, \n\tCreatedDate AS CreatedDate3, \n\tlkp_PremiumTransactionAKID AS lkp_PremiumTransactionAKID3, \n\tPremiumTransactionStageId AS PremiumTransactionStageId3\n\tFROM RTR_WorkPremiumTransaction_Insert_Update_Update\n),\nWorkPremiumTransaction_update AS (\n\tMERGE INTO WorkPremiumTransaction AS T\n\tUSING UPD_WorkPremiumTransaction AS S\n\tON T.WorkPremiumTransactionId = S.WorkPremiumTransactionId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.SourceSystemID = S.SourceSystemID3, T.PremiumTransactionAKId = S.lkp_PremiumTransactionAKID3, T.PremiumTransactionStageId = S.PremiumTransactionStageId3\n),\nTGT_PremiumTransaction_Insert_Restate AS (\n\n\t------------ PRE SQL ----------\n\texec [spSetIndexStatus] @Enable = 0, @Schema = 'dbo', @TableName = 'PREMIUMTRANSACTION', @IndexWildcard = 'AK1PremiumTransaction'\n\t-------------------------------\n\n\n\tINSERT INTO PremiumTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, PremiumTransactionHashKey, PremiumLoadSequence, DuplicateSequence, PremiumTransactionAKID, ReinsuranceCoverageAKID, StatisticalCoverageAKID, PremiumTransactionKey, PMSFunctionCode, PremiumTransactionCode, PremiumTransactionEnteredDate, PremiumTransactionEffectiveDate, PremiumTransactionExpirationDate, PremiumTransactionBookedDate, PremiumTransactionAmount, FullTermPremium, PremiumType, ReasonAmendedCode, OffsetOnsetCode, SupPremiumTransactionCodeId, RatingCoverageAKId, DeductibleAmount, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PackageModificationAdjustmentFactor, PackageModificationAdjustmentGroupCode, IncreasedLimitFactor, IncreasedLimitGroupCode, YearBuilt, AgencyActualCommissionRate, BaseRate, ConstructionCode, StateRatingEffectiveDate, IndividualRiskPremiumModification, WindCoverageFlag, DeductibleBasis, ExposureBasis, TransactionCreatedUserId, ServiceCentreName, Exposure, NumberOfEmployee, NegateRestateCode, WrittenExposure, DeclaredEventFlag)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tLOGICALINDICATOR, \n\tLOGICALDELETEFLAG, \n\tPREMIUMTRANSACTIONHASHKEY, \n\tPREMIUMLOADSEQUENCE, \n\tDUPLICATESEQUENCE, \n\tPREMIUMTRANSACTIONAKID, \n\tREINSURANCECOVERAGEAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tPREMIUMTRANSACTIONKEY, \n\tPMSFUNCTIONCODE, \n\tPREMIUMTRANSACTIONCODE, \n\tPREMIUMTRANSACTIONENTEREDDATE, \n\tPREMIUMTRANSACTIONEFFECTIVEDATE, \n\tPREMIUMTRANSACTIONEXPIRATIONDATE, \n\tPREMIUMTRANSACTIONBOOKEDDATE, \n\tPREMIUMTRANSACTIONAMOUNT, \n\tFULLTERMPREMIUM, \n\tPREMIUMTYPE, \n\tREASONAMENDEDCODE, \n\tOFFSETONSETCODE, \n\tSUPPREMIUMTRANSACTIONCODEID, \n\tRATINGCOVERAGEAKID, \n\tDEDUCTIBLEAMOUNT, \n\tEXPERIENCEMODIFICATIONFACTOR, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tPACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tINCREASEDLIMITFACTOR, \n\tINCREASEDLIMITGROUPCODE, \n\tYEARBUILT, \n\tAGENCYACTUALCOMMISSIONRATE, \n\tBASERATE, \n\tCONSTRUCTIONCODE, \n\tSTATERATINGEFFECTIVEDATE, \n\tINDIVIDUALRISKPREMIUMMODIFICATION, \n\tWINDCOVERAGEFLAG, \n\tDEDUCTIBLEBASIS, \n\tEXPOSUREBASIS, \n\tTransactionCreatedUserId1 AS TRANSACTIONCREATEDUSERID, \n\tServiceCentreName1 AS SERVICECENTRENAME, \n\tEXPOSURE, \n\tNumberOfEmployee1 AS NUMBEROFEMPLOYEE, \n\tNegateRestateCode1 AS NEGATERESTATECODE, \n\tWRITTENEXPOSURE, \n\tDeclaredEventFlag1 AS DECLAREDEVENTFLAG\n\tFROM EXP_Set_AKID\n\n\t------------ POST SQL ----------\n\texec [spSetIndexStatus] @Enable = 1, @Schema = 'dbo', @TableName = 'PREMIUMTRANSACTION', @IndexWildcard = 'AK1PremiumTransaction'\n\t-------------------------------\n\n\n),\nUPD_PremiumTransaction AS (\n\tSELECT\n\tlkp_PremiumTransactionID AS PremiumTransactionID, \n\tPremiumTransactionCode, \n\tPremiumTransactionEnteredDate, \n\tPremiumTransactionEffectiveDate, \n\tPremiumTransactionExpirationDate, \n\tPremiumTransactionBookedDate, \n\tPremiumType, \n\tReasonAmendedCode, \n\tOffsetOnsetCode, \n\tSupPremiumTransactionCodeId, \n\tRatingCoverageAKId, \n\tDeductibleAmount, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPackageModificationAdjustmentFactor, \n\tPackageModificationAdjustmentGroupCode, \n\tIncreasedLimitFactor, \n\tIncreasedLimitGroupCode, \n\tYearBuilt, \n\tAgencyActualCommissionRate, \n\tBaseRate, \n\tConstructionCode, \n\tStateRatingEffectiveDate, \n\tIndividualRiskPremiumModification, \n\tWindCoverageFlag, \n\tDeductibleBasis, \n\tExposureBasis, \n\tExposure, \n\tTransactionCreatedUserId AS TransactionCreatedUserId3, \n\tServiceCentreName AS ServiceCentreName3, \n\tNumberOfEmployee AS lkp_NumberOfEmployee3, \n\tWrittenExposure AS WrittenExposure3\n\tFROM RTR_Insert_Update_UPDATE_PREMIUM\n),\nTGT_PremiumTransaction_Update_Incremental AS (\n\n\t------------ PRE SQL ----------\n\texec [spSetIndexStatus] @Enable = 0, @Schema = 'dbo', @TableName = 'PREMIUMTRANSACTION', @IndexWildcard = 'AK1PremiumTransaction'\n\t-------------------------------\n\n\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPD_PremiumTransaction AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.PremiumTransactionCode = S.PremiumTransactionCode, T.PremiumTransactionEnteredDate = S.PremiumTransactionEnteredDate, T.PremiumTransactionEffectiveDate = S.PremiumTransactionEffectiveDate, T.PremiumTransactionExpirationDate = S.PremiumTransactionExpirationDate, T.PremiumType = S.PremiumType, T.ReasonAmendedCode = S.ReasonAmendedCode, T.OffsetOnsetCode = S.OffsetOnsetCode, T.SupPremiumTransactionCodeId = S.SupPremiumTransactionCodeId, T.RatingCoverageAKId = S.RatingCoverageAKId, T.DeductibleAmount = S.DeductibleAmount, T.ExperienceModificationFactor = S.ExperienceModificationFactor, T.ExperienceModificationEffectiveDate = S.ExperienceModificationEffectiveDate, T.PackageModificationAdjustmentFactor = S.PackageModificationAdjustmentFactor, T.PackageModificationAdjustmentGroupCode = S.PackageModificationAdjustmentGroupCode, T.IncreasedLimitFactor = S.IncreasedLimitFactor, T.IncreasedLimitGroupCode = S.IncreasedLimitGroupCode, T.YearBuilt = S.YearBuilt, T.AgencyActualCommissionRate = S.AgencyActualCommissionRate, T.BaseRate = S.BaseRate, T.ConstructionCode = S.ConstructionCode, T.StateRatingEffectiveDate = S.StateRatingEffectiveDate, T.IndividualRiskPremiumModification = S.IndividualRiskPremiumModification, T.WindCoverageFlag = S.WindCoverageFlag, T.DeductibleBasis = S.DeductibleBasis, T.ExposureBasis = S.ExposureBasis, T.TransactionCreatedUserId = S.TransactionCreatedUserId3, T.ServiceCentreName = S.ServiceCentreName3, T.Exposure = S.Exposure, T.NumberOfEmployee = S.lkp_NumberOfEmployee3, T.WrittenExposure = S.WrittenExposure3\n\n\t------------ POST SQL ----------\n\texec [spSetIndexStatus] @Enable = 1, @Schema = 'dbo', @TableName = 'PREMIUMTRANSACTION', @IndexWildcard = 'AK1PremiumTransaction'\n\t-------------------------------\n\n\n),\nWorkPremiumTransaction_insert AS (\n\n\t------------ PRE SQL ----------\n\tif not exists (\r\n\tselect 1 from @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction\r\n\twhere AuditID=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\tand SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}')\r\n\ttruncate table @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t-------------------------------\n\n\n\tTRUNCATE TABLE @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction;\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPremiumTransaction\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, PremiumTransactionStageId)\n\tSELECT \n\tAuditID3 AS AUDITID, \n\tSourceSystemID3 AS SOURCESYSTEMID, \n\tCreatedDate3 AS CREATEDDATE, \n\tlkp_PremiumTransactionAKID3 AS PREMIUMTRANSACTIONAKID, \n\tPremiumTransactionStageId3 AS PREMIUMTRANSACTIONSTAGEID\n\tFROM RTR_WorkPremiumTransaction_Insert_Update_Insert\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "EXCLUDE_TTYPE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "PMSESSIONNAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataWarehouse/"
        },
        "annotations": []
    }
}