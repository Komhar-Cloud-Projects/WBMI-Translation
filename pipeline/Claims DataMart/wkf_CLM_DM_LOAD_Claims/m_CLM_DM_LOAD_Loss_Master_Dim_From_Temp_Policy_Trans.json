{
    "name": "m_CLM_DM_LOAD_Loss_Master_Dim_From_Temp_Policy_Trans",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DM_LOAD_Loss_Master_Dim_From_Temp_Policy_Trans",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_claimant_coverage_detail AS (\n\tSELECT \r\n\tDISTINCT \r\n\tCASE ccd.loc_unit_num WHEN 'N/A' THEN '0000' ELSE ccd.loc_unit_num END as loc_unit_num , \r\n\tCASE ccd.sub_loc_unit_num WHEN 'N/A' THEN '000' ELSE ccd.sub_loc_unit_num END as sub_loc_nuit_num, \r\n\tccd.ins_line, \r\n\tCASE ccd.risk_unit_grp WHEN 'N/A' THEN '000' ELSE ccd.risk_unit_grp END as risk_unit_grp, \r\n\tccd.risk_unit_grp_seq_num, \r\n\trtrim(ccd.risk_unit) as risk_unit, \r\n\tCASE ccd.risk_unit_seq_num WHEN 'N/A' THEN '00' ELSE ccd.risk_unit_seq_num END as risk_unit_seq_num, \r\n\tccd.major_peril_code, \r\n\tccd.major_peril_seq, \r\n\tco.pol_key_ak_id\r\n\tFROM\r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail ccd,\r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence co,\r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence cp\r\n\tWHERE\r\n\t\t ccd.claim_party_occurrence_ak_id = cp.claim_party_occurrence_ak_id\r\n\t \tAND cp.claim_occurrence_ak_id = co.claim_occurrence_ak_id\r\n\t \tAND co.crrnt_snpsht_flag = '1' \r\n\t \tAND cp.crrnt_snpsht_flag = '1'\r\n\t \tAND ccd.crrnt_snpsht_flag='1'\n),\nEXP_claimant_coverage_detail_source AS (\n\tSELECT\n\tloc_unit_num,\n\tsub_loc_unit_num,\n\tins_line,\n\trisk_unit_grp,\n\trisk_unit_grp_seq_num,\n\trisk_unit,\n\trisk_unit_seq_num,\n\trisk_unit_seq_num AS risk_unit_seq_num_out,\n\tmajor_peril_code,\n\tmajor_peril_seq,\n\tpol_key_ak_id\n\tFROM SQ_claimant_coverage_detail\n),\nSQ_temp_policy_transaction AS (\n\tSELECT DISTINCT P.pol_ak_id                 AS pol_ak_id,\r\n\t                TPT.risk_state_prov_code    AS risk_state_prov_code,\r\n\t                TPT.risk_zip_code           AS risk_zip_code,\r\n\t                TPT.terr_code               AS terr_code,\r\n\t                TPT.tax_loc                 AS tax_loc,\r\n\t                TPT.class_code              AS class_code,\r\n\t                TPT.exposure                AS exposure,\r\n\t                TPT.sub_line_code           AS sub_line_code,\r\n\t                TPT.source_sar_asl          AS source_sar_asl,\r\n\t                TPT.source_sar_prdct_line   AS source_sar_prdct_line,\r\n\t                TPT.source_sar_sp_use_code  AS source_sar_sp_use_code,\r\n\t                TPT.source_statistical_code AS source_statistical_code,\r\n\t                C.type_bureau_code          AS type_bureau_code,\r\n\t                C.major_peril_code          AS major_peril_code,\r\n\t                C.major_peril_seq_num       AS major_peril_seq_num,\r\n\t                C.ins_line                  AS ins_line,\r\n\t                CASE C.loc_unit_num\r\n\t                  WHEN 'N/A' THEN '0000'\r\n\t                  ELSE C.loc_unit_num\r\n\t                END                         AS loc_unit_num,\r\n\t                CASE C.sub_loc_unit_num\r\n\t                  WHEN 'N/A' THEN '000'\r\n\t                  ELSE C.sub_loc_unit_num\r\n\t                END                         AS sub_loc_unit_num,\r\n\t                CASE C.risk_unit_grp\r\n\t                  WHEN 'N/A' THEN '000'\r\n\t                  ELSE C.risk_unit_grp\r\n\t                END                         AS risk_unit_grp,\r\n\t                C.risk_unit_grp_seq_num     AS risk_unit_grp_seq_num,\r\n\t                Rtrim(C.risk_unit)          AS risk_unit,\r\n\t                CASE C.risk_unit_seq_num\r\n\t                  WHEN 'N/A' THEN '00'\r\n\t                  ELSE C.risk_unit_seq_num\r\n\t                END                         AS risk_unit_seq_num,\r\n\t                P.pms_pol_lob_code          AS pms_pol_lob_code,\r\n\t                P.variation_code            AS variation_code\r\n\tFROM   @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.coverage C,\r\n\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.temp_policy_transaction TPT,\r\n\t       @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy P\r\n\tWHERE  C.cov_ak_id = TPT.cov_ak_id\r\n\t       AND C.pol_ak_id = P.pol_ak_id\r\n\t       AND P.crrnt_snpsht_flag = 1\r\n\t       AND C.crrnt_snpsht_flag = 1\r\n\t       AND TPT.crrnt_snpsht_flag = 1\r\n\t       AND P.pol_ak_id \r\n\t      IN\r\n\t (SELECT DISTINCT pol_key_ak_id\r\n\t                           FROM   @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence CO,\r\n\t                                  @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD,\r\n\t                                  @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO\r\n\t                           WHERE  CCD.claim_party_occurrence_ak_id = CPO.claim_party_occurrence_ak_id\r\n\t                                  AND CPO.claim_occurrence_ak_id = CO.claim_occurrence_ak_id\r\n\t                                  AND CO.crrnt_snpsht_flag = 1\r\n\t                                  AND CPO.crrnt_snpsht_flag = 1\r\n\t                                  AND CCD.crrnt_snpsht_flag = 1\r\n\t                                  AND CCD.created_date > '@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\r\n\t\r\n\t                           UNION\r\n\t\r\n\t                           SELECT DISTINCT C.pol_ak_id\r\n\t                           FROM   @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.coverage C,\r\n\t                                  @{pipeline().parameters.TARGET_TABLE_OWNER}.temp_policy_transaction TPT\r\n\t                           WHERE  C.cov_ak_id = TPT.cov_ak_id\r\n\t                                  AND C.crrnt_snpsht_flag = 1\r\n\t                                  AND TPT.crrnt_snpsht_flag = 1\r\n\t                                  AND TPT.created_date > '@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\r\n\t                           UNION\r\n\t\r\n\t                           SELECT DISTINCT C.pol_ak_id\r\n\t                           FROM   V2.coverage C\r\n\t                           WHERE  C.created_date > '@{pipeline().parameters.SELECTION_START_TS}'\r\n\t)\n),\nEXP_source_temp_policy_transaction AS (\n\tSELECT\n\tpol_ak_id,\n\trisk_state_prov_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(risk_state_prov_code),'N/A',\r\n\t-- IS_SPACES(risk_state_prov_code),'N/A',\r\n\t-- LENGTH(risk_state_prov_code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(risk_state_prov_code)))\n\tDECODE(TRUE,\n\trisk_state_prov_code IS NULL, 'N/A',\n\tIS_SPACES(risk_state_prov_code), 'N/A',\n\tLENGTH(risk_state_prov_code) = 0, 'N/A',\n\tLTRIM(RTRIM(risk_state_prov_code))) AS risk_state_prov_code_out,\n\trisk_zip_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(risk_zip_code),'N/A',\r\n\t-- IS_SPACES(risk_zip_code),'N/A',\r\n\t-- LENGTH(risk_zip_code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(risk_zip_code)))\n\tDECODE(TRUE,\n\trisk_zip_code IS NULL, 'N/A',\n\tIS_SPACES(risk_zip_code), 'N/A',\n\tLENGTH(risk_zip_code) = 0, 'N/A',\n\tLTRIM(RTRIM(risk_zip_code))) AS risk_zip_code_out,\n\tterr_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(terr_code),'N/A',\r\n\t-- IS_SPACES(terr_code),'N/A',\r\n\t-- LENGTH(terr_code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(terr_code)))\n\tDECODE(TRUE,\n\tterr_code IS NULL, 'N/A',\n\tIS_SPACES(terr_code), 'N/A',\n\tLENGTH(terr_code) = 0, 'N/A',\n\tLTRIM(RTRIM(terr_code))) AS terr_code_out,\n\ttax_loc,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRING_NUMERIC(tax_loc)\n\t:UDF.DEFAULT_VALUE_FOR_STRING_NUMERIC(tax_loc) AS tax_loc_out,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(sub_line_code),'N/A',\r\n\t-- IS_SPACES(sub_line_code),'N/A',\r\n\t-- LENGTH(sub_line_code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(sub_line_code)))\n\tDECODE(TRUE,\n\tsub_line_code IS NULL, 'N/A',\n\tIS_SPACES(sub_line_code), 'N/A',\n\tLENGTH(sub_line_code) = 0, 'N/A',\n\tLTRIM(RTRIM(sub_line_code))) AS sub_line_code_out,\n\tsource_sar_asl,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(source_sar_asl),'N/A',\r\n\t-- IS_SPACES(source_sar_asl),'N/A',\r\n\t-- LENGTH(source_sar_asl)=0,'N/A',\r\n\t-- LTRIM(RTRIM(REPLACECHR(TRUE, source_sar_asl, '.' , ''))))\r\n\t-- \r\n\t-- \n\tDECODE(TRUE,\n\tsource_sar_asl IS NULL, 'N/A',\n\tIS_SPACES(source_sar_asl), 'N/A',\n\tLENGTH(source_sar_asl) = 0, 'N/A',\n\tLTRIM(RTRIM(REPLACECHR(TRUE, source_sar_asl, '.', '')))) AS source_sar_asl_out,\n\tsource_sar_prdct_line,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(source_sar_prdct_line),'N/A',\r\n\t-- IS_SPACES(source_sar_prdct_line),'N/A',\r\n\t-- LENGTH(source_sar_prdct_line)=0,'N/A',\r\n\t-- LTRIM(RTRIM(source_sar_prdct_line)))\n\tDECODE(TRUE,\n\tsource_sar_prdct_line IS NULL, 'N/A',\n\tIS_SPACES(source_sar_prdct_line), 'N/A',\n\tLENGTH(source_sar_prdct_line) = 0, 'N/A',\n\tLTRIM(RTRIM(source_sar_prdct_line))) AS source_sar_prdct_line_out,\n\tsource_sar_sp_use_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(source_sar_sp_use_code),'N/A',\r\n\t-- IS_SPACES(source_sar_sp_use_code),'N/A',\r\n\t-- LENGTH(source_sar_sp_use_code)=0,'N/A',\r\n\t-- source_sar_sp_use_code)\r\n\t-- \r\n\t-- -- we are not using LTRIM ,RTRIM  functions because we need to spaces as it is as they are used for IBS Bureau Reporting.\n\tDECODE(TRUE,\n\tsource_sar_sp_use_code IS NULL, 'N/A',\n\tIS_SPACES(source_sar_sp_use_code), 'N/A',\n\tLENGTH(source_sar_sp_use_code) = 0, 'N/A',\n\tsource_sar_sp_use_code) AS source_sar_sp_use_code_out,\n\t'N/A' AS auto_reins_facility_out,\n\t-- *INF*: substr(source_sar_prdct_line,1,2)\n\tsubstr(source_sar_prdct_line, 1, 2) AS v_statistical_brkdwn_line,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(v_statistical_brkdwn_line)\r\n\t-- \r\n\t-- \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(v_statistical_brkdwn_line) AS statistical_brkdwn_line_out,\n\tsource_statistical_code,\n\ttype_bureau_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(type_bureau_code)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(type_bureau_code) AS v_type_bureau_code,\n\tv_type_bureau_code AS type_bureau_out,\n\tmajor_peril_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(major_peril_code)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(major_peril_code) AS major_peril_code_out,\n\tmajor_peril_seq_num,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN( v_type_bureau_code,'AL','LP','AI','LI','RL'), '100',\r\n\t-- IN( v_type_bureau_code,'GS','GM','RG'),'400',\r\n\t-- IN( v_type_bureau_code,'WC','WP'),'500',\r\n\t-- IN( v_type_bureau_code,'GL','GI','GN','RQ'),'600',\r\n\t-- IN( v_type_bureau_code,'FF','FM','BF','BP','FT','FP'),'711',\r\n\t-- IN( v_type_bureau_code,'BD'),'722',\r\n\t-- IN( v_type_bureau_code,'BI','BT','RB'),'800'\r\n\t-- ,'N/A')\n\tDECODE(TRUE,\n\tIN(v_type_bureau_code, 'AL', 'LP', 'AI', 'LI', 'RL'), '100',\n\tIN(v_type_bureau_code, 'GS', 'GM', 'RG'), '400',\n\tIN(v_type_bureau_code, 'WC', 'WP'), '500',\n\tIN(v_type_bureau_code, 'GL', 'GI', 'GN', 'RQ'), '600',\n\tIN(v_type_bureau_code, 'FF', 'FM', 'BF', 'BP', 'FT', 'FP'), '711',\n\tIN(v_type_bureau_code, 'BD'), '722',\n\tIN(v_type_bureau_code, 'BI', 'BT', 'RB'), '800',\n\t'N/A') AS v_statistical_line,\n\tv_statistical_line AS statistical_line,\n\tins_line,\n\tloc_unit_num,\n\tsub_loc_unit_num,\n\trisk_unit_grp,\n\trisk_unit_grp_seq_num,\n\trisk_unit,\n\trisk_unit_seq_num,\n\tpms_pol_lob_code,\n\tvariation_code,\n\t-- *INF*: IIF(IN(pms_pol_lob_code,'ACA','AFA','APA','ATA','ACJ','AFJ','APJ'),'6',variation_code)\n\tIFF(IN(pms_pol_lob_code, 'ACA', 'AFA', 'APA', 'ATA', 'ACJ', 'AFJ', 'APJ'), '6', variation_code) AS variation_code_Out\n\tFROM SQ_temp_policy_transaction\n),\nEXP_Transform_Statistical_Codes AS (\n\tSELECT\n\tsource_statistical_code AS statistical_code,\n\tmajor_peril_code_out AS major_peril,\n\ttype_bureau_out AS Type_Bureau,\n\tclass_code AS sar_class_code,\n\t-- *INF*: statistical_code\r\n\t-- \r\n\t-- --DECODE(TRUE, Type_Bureau = 'BE', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'BF', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RP' AND major_peril = '145', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '114', '  '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '119', '     '  || statistical_code,\r\n\t-- --statistical_code)\r\n\t-- \r\n\t-- ---- Had to introduce space at the begining of the field because of LTRIM(RTRIM)) to statistical codes in Temp_Policy_transaction Table.\n\tstatistical_code AS v_statistical_code,\n\t'D' AS v_stat_plan_id,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,1,1))=0,' ',SUBSTR(v_statistical_code,1,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 1, 1)) = 0, ' ', SUBSTR(v_statistical_code, 1, 1)) AS v_pos_1,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,2,1))=0,' ',SUBSTR(v_statistical_code,2,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 2, 1)) = 0, ' ', SUBSTR(v_statistical_code, 2, 1)) AS v_pos_2,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,3,1))=0,' ',SUBSTR(v_statistical_code,3,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 3, 1)) = 0, ' ', SUBSTR(v_statistical_code, 3, 1)) AS v_pos_3,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,4,1))=0,' ',SUBSTR(v_statistical_code,4,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 4, 1)) = 0, ' ', SUBSTR(v_statistical_code, 4, 1)) AS v_pos_4,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,5,1))=0,' ',SUBSTR(v_statistical_code,5,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 5, 1)) = 0, ' ', SUBSTR(v_statistical_code, 5, 1)) AS v_pos_5,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,6,1))=0,' ',SUBSTR(v_statistical_code,6,1))\r\n\t-- \r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 6, 1)) = 0, ' ', SUBSTR(v_statistical_code, 6, 1)) AS v_pos_6,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,7,1))=0,' ',SUBSTR(v_statistical_code,7,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 7, 1)) = 0, ' ', SUBSTR(v_statistical_code, 7, 1)) AS v_pos_7,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,8,1))=0,' ',SUBSTR(v_statistical_code,8,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 8, 1)) = 0, ' ', SUBSTR(v_statistical_code, 8, 1)) AS v_pos_8,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,9,1))=0,' ',SUBSTR(v_statistical_code,9,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 9, 1)) = 0, ' ', SUBSTR(v_statistical_code, 9, 1)) AS v_pos_9,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,10,1))=0,' ',SUBSTR(v_statistical_code,10,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 10, 1)) = 0, ' ', SUBSTR(v_statistical_code, 10, 1)) AS v_pos_10,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,11,1))=0,' ',SUBSTR(v_statistical_code,11,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 11, 1)) = 0, ' ', SUBSTR(v_statistical_code, 11, 1)) AS v_pos_11,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,12,1))=0,' ',SUBSTR(v_statistical_code,12,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 12, 1)) = 0, ' ', SUBSTR(v_statistical_code, 12, 1)) AS v_pos_12,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,13,1))=0,' ',SUBSTR(v_statistical_code,13,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 13, 1)) = 0, ' ', SUBSTR(v_statistical_code, 13, 1)) AS v_pos_13,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,14,1))=0,' ',SUBSTR(v_statistical_code,14,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 14, 1)) = 0, ' ', SUBSTR(v_statistical_code, 14, 1)) AS v_pos_14,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,15,1))=0,' ',SUBSTR(v_statistical_code,15,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 15, 1)) = 0, ' ', SUBSTR(v_statistical_code, 15, 1)) AS v_pos_15,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,16,1))=0,' ',SUBSTR(v_statistical_code,16,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 16, 1)) = 0, ' ', SUBSTR(v_statistical_code, 16, 1)) AS v_pos_16,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,17,1))=0,' ',SUBSTR(v_statistical_code,17,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 17, 1)) = 0, ' ', SUBSTR(v_statistical_code, 17, 1)) AS v_pos_17,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,18,1))=0,' ',SUBSTR(v_statistical_code,18,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 18, 1)) = 0, ' ', SUBSTR(v_statistical_code, 18, 1)) AS v_pos_18,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,19,1))=0,' ',SUBSTR(v_statistical_code,19,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 19, 1)) = 0, ' ', SUBSTR(v_statistical_code, 19, 1)) AS v_pos_19,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,20,1))=0,' ',SUBSTR(v_statistical_code,20,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 20, 1)) = 0, ' ', SUBSTR(v_statistical_code, 20, 1)) AS v_pos_20,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- \r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 21, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 21, 1)) AS v_pos_21,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 22, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 22, 1)) AS v_pos_22,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 23, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 23, 1)) AS v_pos_23,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 24, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 24, 1)) AS v_pos_24,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','{',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\r\n\t-- \r\n\t-- --- IN COBOL \"{\" represents a  +ve sign and \"}\" is -ve sign, since this is base rate for Type_Bureau RP is a sign field so COBOL creates \"{\". Replicating the COBOL logic.\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '{'\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '{',\n\tLENGTH(SUBSTR(v_statistical_code, 25, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 25, 1)) AS v_pos_25,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,26,1))=0,' ',SUBSTR(v_statistical_code,26,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 26, 1)) = 0, ' ', SUBSTR(v_statistical_code, 26, 1)) AS v_pos_26,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,27,1))=0,' ',SUBSTR(v_statistical_code,27,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 27, 1)) = 0, ' ', SUBSTR(v_statistical_code, 27, 1)) AS v_pos_27,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,28,1))=0,' ',SUBSTR(v_statistical_code,28,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 28, 1)) = 0, ' ', SUBSTR(v_statistical_code, 28, 1)) AS v_pos_28,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,29,1))=0,' ',SUBSTR(v_statistical_code,29,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 29, 1)) = 0, ' ', SUBSTR(v_statistical_code, 29, 1)) AS v_pos_29,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,30,1))=0,' ',SUBSTR(v_statistical_code,30,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 30, 1)) = 0, ' ', SUBSTR(v_statistical_code, 30, 1)) AS v_pos_30,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,31,1))=0,' ',SUBSTR(v_statistical_code,31,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 31, 1)) = 0, ' ', SUBSTR(v_statistical_code, 31, 1)) AS v_pos_31,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,32,1))=0,' ',SUBSTR(v_statistical_code,32,1))\r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 32, 1)) = 0, ' ', SUBSTR(v_statistical_code, 32, 1)) AS v_pos_32,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,33,1))=0,' ',SUBSTR(v_statistical_code,33,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 33, 1)) = 0, ' ', SUBSTR(v_statistical_code, 33, 1)) AS v_pos_33,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,34,1))=0,' ',SUBSTR(v_statistical_code,34,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 34, 1)) = 0, ' ', SUBSTR(v_statistical_code, 34, 1)) AS v_pos_34,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,35,1))=0,' ',SUBSTR(v_statistical_code,35,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 35, 1)) = 0, ' ', SUBSTR(v_statistical_code, 35, 1)) AS v_pos_35,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,36,1))=0,' ',SUBSTR(v_statistical_code,36,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 36, 1)) = 0, ' ', SUBSTR(v_statistical_code, 36, 1)) AS v_pos_36,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,37,1))=0,' ',SUBSTR(v_statistical_code,37,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 37, 1)) = 0, ' ', SUBSTR(v_statistical_code, 37, 1)) AS v_pos_37,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,38,1))=0,' ',SUBSTR(v_statistical_code,38,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 38, 1)) = 0, ' ', SUBSTR(v_statistical_code, 38, 1)) AS v_pos_38,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS Generic,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Code_AC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_AI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23  || v_pos_24  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23 || v_pos_24 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10  || v_pos_11|| v_pos_20 || v_pos_21  || \r\n\t-- '             ' ||  v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19  )\r\n\t-- \r\n\t--  -----It has a Filler of 13 spaces\r\n\t-- --- I have checked this code this is fine\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_20 || v_pos_21 || '             ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_AN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 ||\r\n\t-- '      ' || v_pos_14 || v_pos_23  || v_pos_24  || '  '  ||  v_pos_26  || v_pos_27  || v_pos_28  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || '      ' || v_pos_14 || v_pos_23 || v_pos_24 || '  ' || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || \r\n\t--   v_pos_12 || v_pos_13 )\r\n\t-- \r\n\t-- --- Verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_A2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_11 || v_pos_12 )\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_11 || v_pos_12 ) AS v_Stat_Codes_A3,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 ||\r\n\t-- '           '  ||  v_pos_22 || v_pos_29 || '  ' || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || '           ' || v_pos_22 || v_pos_29 || '  ' || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_BB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17  || v_pos_20  || v_pos_27  || v_pos_28  || v_pos_29 || '    ' ||v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26 )\r\n\t-- \r\n\t-- \r\n\t-- -- Verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_20 || v_pos_27 || v_pos_28 || v_pos_29 || '    ' || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 ) AS v_Stat_Codes_BC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_BD,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 ||  v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- \r\n\t--  ---  Verified Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_BE,\n\t-- *INF*: ('  '  || v_pos_4  || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- \r\n\t-- --8/22/2011 - Added 2 spaces in the beginning. In COBOL, statitistical code field is initialised to spaces at the start of reformatting. If there is no code to move certain fields then the spaces stay as it is except other fileds are layed out over spaces.\r\n\t-- --- Verified the logic\r\n\t-- \n\t( '  ' || v_pos_4 || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_BF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_BP,\n\t-- *INF*: (v_pos_1 || v_pos_2 )\r\n\t-- \r\n\t-- --- Verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_BI,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -- verified the logic\n\tv_pos_1 AS v_Stat_Codes_BL,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || '  ' || v_pos_18  ||  v_pos_19 || v_pos_1 ||  ' ' ||  v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 \r\n\t-- || '    ' ||  v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28 || '   ' )\r\n\t-- \r\n\t-- --- Verfied the logic\n\t( SUBSTR(sar_class_code, 1, 3) || '  ' || v_pos_18 || v_pos_19 || v_pos_1 || ' ' || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || '    ' || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || '   ' ) AS v_Stat_Codes_BM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '      '  ||  v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19)\r\n\t-- \r\n\t--  ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '      ' || v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_BT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || '      '  || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || '      ' || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_B2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17)\r\n\t-- \r\n\t-- ----- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 ) AS v_Stat_Codes_CC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || \r\n\t--  v_pos_17 || v_pos_18  || ' ' ||  v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_17 || v_pos_18 || ' ' || v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_CF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- Generic \r\n\t-- -- No Change from Input copybook to Output\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_CR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' '  || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' ' || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 ) AS v_Stat_Codes_CI,\n\t-- *INF*: (v_pos_1 || v_pos_4  || v_pos_6 || v_pos_7 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_4 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CL,\n\t-- *INF*: ('  ' || v_pos_1 || v_pos_2 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '  ' || v_pos_1 || v_pos_2 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CP,\n\t-- *INF*: (v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_CN,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -----\n\tv_pos_1 AS v_Stat_Codes_EI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || '                   ' ||v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_EQ,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 ) AS v_Stat_Codes_FC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 \r\n\t-- || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- ---- 18 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_FM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FO,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_FP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 ||\r\n\t-- '       ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || '       ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_FT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- -- 17 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 ) AS v_Stat_Codes_GI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4  || v_pos_5  || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4 || v_pos_5 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_GL,\n\t-- *INF*: (v_pos_1 || '           '  ||   v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- \n\t( v_pos_1 || '           ' || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_GP,\n\t-- *INF*: (v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 23 spaces\r\n\t-- \r\n\t-- \r\n\t-- \n\t( v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_GS,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18  ||  v_pos_19  \r\n\t-- || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ')\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 16 Spaces at the end\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18 || v_pos_19 || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ' ) AS v_Stat_Codes_HO,\n\t-- *INF*: ('        ' || v_pos_11 || v_pos_12 || '               '  || v_pos_4  || v_pos_5  || v_pos_6  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '        ' || v_pos_11 || v_pos_12 || '               ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17 ) AS v_Stat_Codes_IM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  || v_pos_24  || v_pos_25  || v_pos_26 || v_pos_28  || v_pos_29  || v_pos_30 || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_JR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_ME,\n\t-- *INF*: (v_pos_1 || ' '  || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' ||  v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) \r\n\t-- \r\n\t-- --- need logic for stat-plan -id\r\n\t-- ---- 16 Spaces at the end\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) AS v_Stat_Codes_MH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || '                  '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || '                  ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_MI,\n\t-- *INF*: (v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4  || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24 )\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4 || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_ML,\n\t-- *INF*: -- No Stats code in the Output Copybook just the policy_type logic\n\t'' AS v_Stat_Codes_MP,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' )\r\n\t-- \r\n\t-- --- Need to look at complete logic\r\n\t-- \n\t( SUBSTR(sar_class_code, 1, 3) || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' ) AS v_Stat_Codes_M2,\n\t-- *INF*: ( '                 ' || v_stat_plan_id)\r\n\t-- \r\n\t-- ----verified the logic\n\t( '                 ' || v_stat_plan_id ) AS v_Stat_Codes_NE,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19)\r\n\t-- \r\n\t-- --- Verified the Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19 ) AS v_Stat_Codes_PC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19  || v_pos_20  ||  v_pos_21)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t--  \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 ) AS v_Stat_Codes_PH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 ||  v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 ) AS v_Stat_Codes_PM,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_RG,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 ) AS v_Stat_Codes_RM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || \r\n\t-- v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21 || v_pos_22 ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29 || v_pos_30 || v_pos_31|| v_pos_33 || v_pos_34  ||  v_pos_35  || v_pos_32)\r\n\t-- \r\n\t-- ----\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_32 ) AS v_Stat_Codes_RP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_RQ,\n\t-- *INF*: (v_pos_1 || ' ' || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 ) AS v_Stat_Codes_SM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9 ) AS v_Stat_Codes_TH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 \r\n\t-- || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19\r\n\t-- ||  v_pos_22  ||  v_pos_23  || v_pos_24 || '       ' || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || '       ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 \r\n\t--  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30 || ' ' || v_pos_32  ||  v_pos_33\r\n\t-- || v_pos_34  ||  v_pos_35  || v_pos_36 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || ' ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VP,\n\t-- *INF*: ('   ' || v_pos_4  || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12  || ' ' || v_pos_14 || v_pos_15 || '              ' \r\n\t-- || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_35)\r\n\t-- \r\n\t-- --- verified the logic\n\t( '   ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || ' ' || v_pos_14 || v_pos_15 || '              ' || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_VN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  \r\n\t-- || ' ' || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || '    ' || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || ' ' || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || '    ' || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Codes_VC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_WC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_WP,\n\t-- *INF*: ('   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id)\r\n\t-- \r\n\t-- --8/19/2011 Added v_stat_plan_id\r\n\t-- --- need to bring stat plan_id\r\n\t--  --- verified the logic but need stat plan id\r\n\t-- \n\t( '   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id ) AS v_Stat_Codes_WL,\n\t-- *INF*: DECODE(Type_Bureau, 'AC', v_Stat_Code_AC, 'AI', v_Stat_Codes_AI, 'AL', v_Stat_Codes_AL, 'AN', v_Stat_Codes_AN, 'AP', v_Stat_Codes_AP, 'A2', v_Stat_Codes_A2, 'A3', v_Stat_Codes_A3, 'BB', v_Stat_Codes_BB, 'BC', v_Stat_Codes_BC, 'BD', v_Stat_Codes_BD, 'BE', v_Stat_Codes_BE, 'BF', v_Stat_Codes_BF, 'BP', v_Stat_Codes_BP, 'BI', v_Stat_Codes_BI, 'BL', v_Stat_Codes_BL, 'BM', v_Stat_Codes_BM, 'BT', v_Stat_Codes_BT, 'B2', v_Stat_Codes_B2, 'CC', v_Stat_Codes_CC, 'CF', v_Stat_Codes_CF, 'CI', v_Stat_Codes_CI, 'CL', v_Stat_Codes_CL, 'CN', v_Stat_Codes_CN, 'CP', v_Stat_Codes_CP, 'EI', v_Stat_Codes_EI, 'EQ', v_Stat_Codes_EQ, 'FC', v_Stat_Codes_FC, 'FF', v_Stat_Codes_FF, 'FM', v_Stat_Codes_FM, 'FO', v_Stat_Codes_FO, 'FP', v_Stat_Codes_FP, 'FT', v_Stat_Codes_FT, 'GI', v_Stat_Codes_GI, 'GL', v_Stat_Codes_GL, 'GP', v_Stat_Codes_GP, 'GS', v_Stat_Codes_GS, 'HO', v_Stat_Codes_HO, 'IM', v_Stat_Codes_IM, 'JR', v_Stat_Codes_JR, 'ME', v_Stat_Codes_ME, 'MH', v_Stat_Codes_MH, 'MI', v_Stat_Codes_MI, 'ML',\r\n\t-- v_Stat_Codes_ML, 'MP', v_Stat_Codes_MP, 'M2', v_Stat_Codes_M2, 'NE', v_Stat_Codes_NE, 'PC', v_Stat_Codes_PC, 'PH', v_Stat_Codes_PH, 'PM', v_Stat_Codes_PM, 'RB', v_Stat_Codes_RB, 'RG', v_Stat_Codes_RG, 'RI', v_Stat_Codes_RI, 'RL', v_Stat_Codes_RL, 'RM', v_Stat_Codes_RM, 'RN', v_Stat_Codes_RN, 'RP', v_Stat_Codes_RP, 'RQ', v_Stat_Codes_RQ, 'SM', v_Stat_Codes_SM, 'TH', v_Stat_Codes_TH, 'VL', v_Stat_Codes_VL, 'VP', v_Stat_Codes_VP, 'VN', v_Stat_Codes_VN, 'VC', v_Stat_Codes_VC, 'WC', v_Stat_Codes_WC, 'WL', v_Stat_Codes_WL,\r\n\t-- 'CR', v_Stat_Code_CR, 'PF', v_Stat_Code_PF,'PI', v_Stat_Code_PI, 'PL', v_Stat_Code_PL,\r\n\t-- 'WP', v_Stat_Code_WP,v_statistical_code) \n\tDECODE(Type_Bureau,\n\t'AC', v_Stat_Code_AC,\n\t'AI', v_Stat_Codes_AI,\n\t'AL', v_Stat_Codes_AL,\n\t'AN', v_Stat_Codes_AN,\n\t'AP', v_Stat_Codes_AP,\n\t'A2', v_Stat_Codes_A2,\n\t'A3', v_Stat_Codes_A3,\n\t'BB', v_Stat_Codes_BB,\n\t'BC', v_Stat_Codes_BC,\n\t'BD', v_Stat_Codes_BD,\n\t'BE', v_Stat_Codes_BE,\n\t'BF', v_Stat_Codes_BF,\n\t'BP', v_Stat_Codes_BP,\n\t'BI', v_Stat_Codes_BI,\n\t'BL', v_Stat_Codes_BL,\n\t'BM', v_Stat_Codes_BM,\n\t'BT', v_Stat_Codes_BT,\n\t'B2', v_Stat_Codes_B2,\n\t'CC', v_Stat_Codes_CC,\n\t'CF', v_Stat_Codes_CF,\n\t'CI', v_Stat_Codes_CI,\n\t'CL', v_Stat_Codes_CL,\n\t'CN', v_Stat_Codes_CN,\n\t'CP', v_Stat_Codes_CP,\n\t'EI', v_Stat_Codes_EI,\n\t'EQ', v_Stat_Codes_EQ,\n\t'FC', v_Stat_Codes_FC,\n\t'FF', v_Stat_Codes_FF,\n\t'FM', v_Stat_Codes_FM,\n\t'FO', v_Stat_Codes_FO,\n\t'FP', v_Stat_Codes_FP,\n\t'FT', v_Stat_Codes_FT,\n\t'GI', v_Stat_Codes_GI,\n\t'GL', v_Stat_Codes_GL,\n\t'GP', v_Stat_Codes_GP,\n\t'GS', v_Stat_Codes_GS,\n\t'HO', v_Stat_Codes_HO,\n\t'IM', v_Stat_Codes_IM,\n\t'JR', v_Stat_Codes_JR,\n\t'ME', v_Stat_Codes_ME,\n\t'MH', v_Stat_Codes_MH,\n\t'MI', v_Stat_Codes_MI,\n\t'ML', v_Stat_Codes_ML,\n\t'MP', v_Stat_Codes_MP,\n\t'M2', v_Stat_Codes_M2,\n\t'NE', v_Stat_Codes_NE,\n\t'PC', v_Stat_Codes_PC,\n\t'PH', v_Stat_Codes_PH,\n\t'PM', v_Stat_Codes_PM,\n\t'RB', v_Stat_Codes_RB,\n\t'RG', v_Stat_Codes_RG,\n\t'RI', v_Stat_Codes_RI,\n\t'RL', v_Stat_Codes_RL,\n\t'RM', v_Stat_Codes_RM,\n\t'RN', v_Stat_Codes_RN,\n\t'RP', v_Stat_Codes_RP,\n\t'RQ', v_Stat_Codes_RQ,\n\t'SM', v_Stat_Codes_SM,\n\t'TH', v_Stat_Codes_TH,\n\t'VL', v_Stat_Codes_VL,\n\t'VP', v_Stat_Codes_VP,\n\t'VN', v_Stat_Codes_VN,\n\t'VC', v_Stat_Codes_VC,\n\t'WC', v_Stat_Codes_WC,\n\t'WL', v_Stat_Codes_WL,\n\t'CR', v_Stat_Code_CR,\n\t'PF', v_Stat_Code_PF,\n\t'PI', v_Stat_Code_PI,\n\t'PL', v_Stat_Code_PL,\n\t'WP', v_Stat_Code_WP,\n\tv_statistical_code) AS V_Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,1,25)\n\tSUBSTR(V_Formatted_Stat_Codes, 1, 25) AS Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,26,9)\n\tSUBSTR(V_Formatted_Stat_Codes, 26, 9) AS Formatted_Stat_Codes_26_34,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,35,4)\n\tSUBSTR(V_Formatted_Stat_Codes, 35, 4) AS Formatted_Stat_Codes_34_38,\n\t-- *INF*: DECODE(Type_Bureau,'AI', (v_pos_11 || v_pos_12),\r\n\t-- 'AL', (v_pos_15  ||  v_pos_16),\r\n\t-- 'AN',(v_pos_12 || v_pos_13),\r\n\t-- 'AP',(v_pos_12 || v_pos_13),\r\n\t-- 'A2',(v_pos_8 || v_pos_9),\r\n\t-- 'A3',(v_pos_8 || v_pos_9),\r\n\t-- 'BB',(v_pos_20 || v_pos_21),\r\n\t-- 'BC',(v_pos_18 || v_pos_19),\r\n\t-- 'BE', ( v_pos_4  || v_pos_5),\r\n\t-- 'BF', (v_pos_1  ||  v_pos_2),\r\n\t-- 'BP', (' '  ||  v_pos_2),\r\n\t-- 'BI', (v_pos_3 ||  v_pos_4),\r\n\t-- 'BL', (v_pos_3  ||  v_pos_4),\r\n\t-- 'BM',(v_pos_20 || v_pos_21),\r\n\t-- 'BT', (v_pos_11  ||  v_pos_12),\r\n\t-- 'B2',(v_pos_14  ||  v_pos_15),\r\n\t-- 'CF', (v_pos_8  || v_pos_9),\r\n\t-- 'CI',(v_pos_3  ||  v_pos_4),\r\n\t-- 'CN', (v_pos_1  ||  v_pos_2),\r\n\t-- 'CP', (v_pos_3  ||  v_pos_4),\r\n\t-- 'EI', (v_pos_2  ||  v_pos_3),\r\n\t-- 'EQ', (v_pos_8  || v_pos_9),\r\n\t-- 'FF', (v_pos_8  || v_pos_9),\r\n\t-- 'FI', (v_pos_1  ||  v_pos_2),\r\n\t-- 'FM', (v_pos_6  ||  v_pos_7),\r\n\t-- 'FO', (v_pos_8  || v_pos_9),\r\n\t-- 'FP', (v_pos_2  ||  v_pos_3),\r\n\t-- 'FT', (v_pos_4  ||  v_pos_5),\r\n\t-- 'GI', (v_pos_10  ||  v_pos_11),\r\n\t-- 'GL',(v_pos_20 || v_pos_21),\r\n\t-- 'GM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'GP', (v_pos_8  || v_pos_9),\r\n\t-- 'GS',(v_pos_3  ||  v_pos_4),\r\n\t-- 'II', (v_pos_1  ||  v_pos_2),\r\n\t-- 'IM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'MI',(v_pos_10  ||  v_pos_11),\r\n\t-- 'ML', (v_pos_16  ||  v_pos_17),\r\n\t-- 'MP', (v_pos_1  ||  v_pos_2),\r\n\t-- 'M2', (v_pos_15  ||  v_pos_16),'  ')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(Type_Bureau,\n\t'AI', ( v_pos_11 || v_pos_12 ),\n\t'AL', ( v_pos_15 || v_pos_16 ),\n\t'AN', ( v_pos_12 || v_pos_13 ),\n\t'AP', ( v_pos_12 || v_pos_13 ),\n\t'A2', ( v_pos_8 || v_pos_9 ),\n\t'A3', ( v_pos_8 || v_pos_9 ),\n\t'BB', ( v_pos_20 || v_pos_21 ),\n\t'BC', ( v_pos_18 || v_pos_19 ),\n\t'BE', ( v_pos_4 || v_pos_5 ),\n\t'BF', ( v_pos_1 || v_pos_2 ),\n\t'BP', ( ' ' || v_pos_2 ),\n\t'BI', ( v_pos_3 || v_pos_4 ),\n\t'BL', ( v_pos_3 || v_pos_4 ),\n\t'BM', ( v_pos_20 || v_pos_21 ),\n\t'BT', ( v_pos_11 || v_pos_12 ),\n\t'B2', ( v_pos_14 || v_pos_15 ),\n\t'CF', ( v_pos_8 || v_pos_9 ),\n\t'CI', ( v_pos_3 || v_pos_4 ),\n\t'CN', ( v_pos_1 || v_pos_2 ),\n\t'CP', ( v_pos_3 || v_pos_4 ),\n\t'EI', ( v_pos_2 || v_pos_3 ),\n\t'EQ', ( v_pos_8 || v_pos_9 ),\n\t'FF', ( v_pos_8 || v_pos_9 ),\n\t'FI', ( v_pos_1 || v_pos_2 ),\n\t'FM', ( v_pos_6 || v_pos_7 ),\n\t'FO', ( v_pos_8 || v_pos_9 ),\n\t'FP', ( v_pos_2 || v_pos_3 ),\n\t'FT', ( v_pos_4 || v_pos_5 ),\n\t'GI', ( v_pos_10 || v_pos_11 ),\n\t'GL', ( v_pos_20 || v_pos_21 ),\n\t'GM', ( v_pos_1 || v_pos_2 ),\n\t'GP', ( v_pos_8 || v_pos_9 ),\n\t'GS', ( v_pos_3 || v_pos_4 ),\n\t'II', ( v_pos_1 || v_pos_2 ),\n\t'IM', ( v_pos_1 || v_pos_2 ),\n\t'MI', ( v_pos_10 || v_pos_11 ),\n\t'ML', ( v_pos_16 || v_pos_17 ),\n\t'MP', ( v_pos_1 || v_pos_2 ),\n\t'M2', ( v_pos_15 || v_pos_16 ),\n\t'  ') AS V_Policy_Type,\n\tV_Policy_Type AS Policy_Type,\n\t-- *INF*: SUBSTR(sar_class_code,1,3)\n\tSUBSTR(sar_class_code, 1, 3) AS v_sar_class_3,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN (Type_Bureau,'BP','FP','BF','FT'),V_Policy_Type)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'FP', 'BF', 'FT'), V_Policy_Type) AS v_type_policy_45,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- Type_Bureau='BP',v_pos_2,\r\n\t-- Type_Bureau='BF',v_pos_2,\r\n\t-- Type_Bureau='FP',' ',\r\n\t-- Type_Bureau='FT',' '  )\n\tDECODE(TRUE,\n\tType_Bureau = 'BP', v_pos_2,\n\tType_Bureau = 'BF', v_pos_2,\n\tType_Bureau = 'FP', ' ',\n\tType_Bureau = 'FT', ' ') AS v_type_of_bond_6,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  IN(Type_Bureau,'BP','BF','FP','FT'),v_sar_class_3  || v_type_policy_45 || v_type_of_bond_6,\r\n\t-- sar_class_code)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'BF', 'FP', 'FT'), v_sar_class_3 || v_type_policy_45 || v_type_of_bond_6,\n\tsar_class_code) AS v_hold_sar_class_code,\n\tv_hold_sar_class_code AS sar_class_code_out\n\tFROM EXP_source_temp_policy_transaction\n),\nEXP_pre_join AS (\n\tSELECT\n\tEXP_source_temp_policy_transaction.pol_ak_id,\n\tEXP_source_temp_policy_transaction.loc_unit_num,\n\tEXP_source_temp_policy_transaction.sub_loc_unit_num,\n\tEXP_source_temp_policy_transaction.ins_line,\n\tEXP_source_temp_policy_transaction.risk_unit_grp,\n\tEXP_source_temp_policy_transaction.risk_unit_grp_seq_num,\n\tEXP_source_temp_policy_transaction.risk_unit,\n\tEXP_source_temp_policy_transaction.risk_unit_seq_num,\n\t-- *INF*: IIF(risk_unit_seq_num='N/A',risk_unit_seq_num,substr(risk_unit_seq_num,1,1))\r\n\t-- -- when comparing to claimant coverage detail we can only match on a single length value.\n\tIFF(risk_unit_seq_num = 'N/A', risk_unit_seq_num, substr(risk_unit_seq_num, 1, 1)) AS risk_unit_seq_num_out,\n\tEXP_source_temp_policy_transaction.major_peril_code_out AS major_peril_code,\n\tEXP_source_temp_policy_transaction.major_peril_seq_num,\n\tEXP_source_temp_policy_transaction.risk_state_prov_code_out AS risk_state_prov_code,\n\tEXP_source_temp_policy_transaction.risk_zip_code_out AS risk_zip_code,\n\tEXP_source_temp_policy_transaction.terr_code_out AS terr_code,\n\tEXP_source_temp_policy_transaction.tax_loc_out AS tax_loc,\n\tEXP_Transform_Statistical_Codes.sar_class_code_out AS class_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(class_code),'N/A',\r\n\t-- IS_SPACES(class_code),'N/A',\r\n\t-- LENGTH(class_code)=0,'N/A',\r\n\t-- LTRIM(RTRIM(class_code)))\n\tDECODE(TRUE,\n\tclass_code IS NULL, 'N/A',\n\tIS_SPACES(class_code), 'N/A',\n\tLENGTH(class_code) = 0, 'N/A',\n\tLTRIM(RTRIM(class_code))) AS class_code_out,\n\tEXP_source_temp_policy_transaction.exposure,\n\tEXP_source_temp_policy_transaction.sub_line_code_out AS sub_line_code,\n\tEXP_source_temp_policy_transaction.source_sar_asl_out AS source_sar_asl,\n\tEXP_source_temp_policy_transaction.source_sar_prdct_line_out AS source_sar_prdct_line,\n\tEXP_source_temp_policy_transaction.source_sar_sp_use_code_out AS source_sar_sp_use_code,\n\tEXP_source_temp_policy_transaction.auto_reins_facility_out,\n\tEXP_source_temp_policy_transaction.statistical_brkdwn_line_out AS statistical_brkdwn_line,\n\tEXP_source_temp_policy_transaction.source_statistical_code,\n\tEXP_Transform_Statistical_Codes.Formatted_Stat_Codes,\n\t-- *INF*: IIF(ISNULL(Formatted_Stat_Codes) OR IS_SPACES(Formatted_Stat_Codes) OR LENGTH(Formatted_Stat_Codes) = 0 , 'N/A', Formatted_Stat_Codes)\r\n\t-- \r\n\t-- --- Previously we were using User Defined function but in the user defined function we have a LTRIM, RTRIM which we dont want to do as we want to preserve the spaces since these fields are used for IBS Bureau Reporting.\r\n\t-- \n\tIFF(Formatted_Stat_Codes IS NULL OR IS_SPACES(Formatted_Stat_Codes) OR LENGTH(Formatted_Stat_Codes) = 0, 'N/A', Formatted_Stat_Codes) AS statistical_code_1,\n\tEXP_Transform_Statistical_Codes.Formatted_Stat_Codes_26_34,\n\t-- *INF*: IIF(ISNULL(Formatted_Stat_Codes_26_34) OR IS_SPACES(Formatted_Stat_Codes_26_34) OR LENGTH(Formatted_Stat_Codes_26_34) = 0 , 'N/A', Formatted_Stat_Codes_26_34)\r\n\t-- \r\n\t-- \r\n\t-- --:UDF.DEFAULT_VALUE_FOR_STRINGS(Formatted_Stat_Codes_26_34)\r\n\t-- \r\n\t-- --- Previously we were using User Defined function but in the user defined function we have a LTRIM, RTRIM which we dont want to do as we want to preserve the spaces since these fields are used for IBS Bureau Reporting.\n\tIFF(Formatted_Stat_Codes_26_34 IS NULL OR IS_SPACES(Formatted_Stat_Codes_26_34) OR LENGTH(Formatted_Stat_Codes_26_34) = 0, 'N/A', Formatted_Stat_Codes_26_34) AS statistical_code_2,\n\tEXP_Transform_Statistical_Codes.Formatted_Stat_Codes_34_38,\n\t-- *INF*: IIF(ISNULL(Formatted_Stat_Codes_34_38) OR IS_SPACES(Formatted_Stat_Codes_34_38) OR LENGTH(Formatted_Stat_Codes_34_38) = 0 , 'N/A', Formatted_Stat_Codes_34_38)\r\n\t-- \r\n\t-- ---:UDF.DEFAULT_VALUE_FOR_STRINGS(Formatted_Stat_Codes_34_38)\r\n\t-- \r\n\t-- --- Previously we were using User Defined function but in the user defined function we have a LTRIM, RTRIM which we dont want to do as we want to preserve the spaces since these fields are used for IBS Bureau Reporting.\n\tIFF(Formatted_Stat_Codes_34_38 IS NULL OR IS_SPACES(Formatted_Stat_Codes_34_38) OR LENGTH(Formatted_Stat_Codes_34_38) = 0, 'N/A', Formatted_Stat_Codes_34_38) AS statistical_code_3,\n\tEXP_source_temp_policy_transaction.type_bureau_out AS type_bureau,\n\tEXP_source_temp_policy_transaction.variation_code_Out AS variation_code,\n\tEXP_source_temp_policy_transaction.statistical_line,\n\tEXP_Transform_Statistical_Codes.Policy_Type\n\tFROM EXP_Transform_Statistical_Codes\n\t -- Manually join with EXP_source_temp_policy_transaction\n),\nJNR_temp_policy_transaction_and_claim_coverage_detail AS (SELECT\n\tEXP_claimant_coverage_detail_source.pol_key_ak_id, \n\tEXP_claimant_coverage_detail_source.loc_unit_num, \n\tEXP_claimant_coverage_detail_source.sub_loc_unit_num, \n\tEXP_claimant_coverage_detail_source.ins_line, \n\tEXP_claimant_coverage_detail_source.risk_unit_grp, \n\tEXP_claimant_coverage_detail_source.risk_unit_grp_seq_num, \n\tEXP_claimant_coverage_detail_source.risk_unit, \n\tEXP_claimant_coverage_detail_source.risk_unit_seq_num_out AS risk_unit_seq_num, \n\tEXP_claimant_coverage_detail_source.major_peril_code, \n\tEXP_claimant_coverage_detail_source.major_peril_seq, \n\tEXP_pre_join.pol_ak_id AS IN_pol_ak_id, \n\tEXP_pre_join.loc_unit_num AS IN_loc_unit_num, \n\tEXP_pre_join.sub_loc_unit_num AS IN_sub_loc_unit_num, \n\tEXP_pre_join.ins_line AS IN_ins_line, \n\tEXP_pre_join.risk_unit_grp AS IN_risk_unit_grp, \n\tEXP_pre_join.risk_unit_grp_seq_num AS IN_risk_unit_grp_seq_num, \n\tEXP_pre_join.risk_unit AS IN_risk_unit, \n\tEXP_pre_join.risk_unit_seq_num_out AS IN_risk_unit_seq_num, \n\tEXP_pre_join.major_peril_code AS IN_major_peril_code, \n\tEXP_pre_join.major_peril_seq_num AS IN_major_peril_seq_num, \n\tEXP_pre_join.risk_state_prov_code AS IN_risk_state_prov_code, \n\tEXP_pre_join.risk_zip_code AS IN_risk_zip_code, \n\tEXP_pre_join.terr_code AS IN_terr_code, \n\tEXP_pre_join.tax_loc AS IN_tax_loc, \n\tEXP_pre_join.class_code_out AS IN_class_code, \n\tEXP_pre_join.exposure AS IN_exposure, \n\tEXP_pre_join.sub_line_code AS IN_sub_line_code, \n\tEXP_pre_join.source_sar_asl AS IN_source_sar_asl, \n\tEXP_pre_join.source_sar_prdct_line AS IN_source_sar_prdct_line, \n\tEXP_pre_join.source_sar_sp_use_code AS IN_source_sar_sp_use_code, \n\tEXP_pre_join.auto_reins_facility_out AS IN_auto_reins_facility_out, \n\tEXP_pre_join.statistical_brkdwn_line AS IN_statistical_brkdwn_line, \n\tEXP_pre_join.statistical_code_1 AS IN_statistical_code_1, \n\tEXP_pre_join.statistical_code_2 AS IN_statistical_code_2, \n\tEXP_pre_join.statistical_code_3 AS IN_statistical_code_3, \n\tEXP_pre_join.variation_code AS IN_variation_code_out, \n\tEXP_pre_join.statistical_line AS IN_statistical_line, \n\tEXP_pre_join.Policy_Type AS IN_Policy_Type\n\tFROM EXP_pre_join\n\tINNER JOIN EXP_claimant_coverage_detail_source\n\tON EXP_claimant_coverage_detail_source.pol_key_ak_id = EXP_pre_join.pol_ak_id AND EXP_claimant_coverage_detail_source.loc_unit_num = EXP_pre_join.loc_unit_num AND EXP_claimant_coverage_detail_source.sub_loc_unit_num = EXP_pre_join.sub_loc_unit_num AND EXP_claimant_coverage_detail_source.ins_line = EXP_pre_join.ins_line AND EXP_claimant_coverage_detail_source.risk_unit_grp = EXP_pre_join.risk_unit_grp AND EXP_claimant_coverage_detail_source.risk_unit_grp_seq_num = EXP_pre_join.risk_unit_grp_seq_num AND EXP_claimant_coverage_detail_source.risk_unit = EXP_pre_join.risk_unit AND EXP_claimant_coverage_detail_source.risk_unit_seq_num_out = EXP_pre_join.risk_unit_seq_num_out AND EXP_claimant_coverage_detail_source.major_peril_code = EXP_pre_join.major_peril_code AND EXP_claimant_coverage_detail_source.major_peril_seq = EXP_pre_join.major_peril_seq_num\n),\nEXP_post_join AS (\n\tSELECT\n\tIN_major_peril_code AS major_peril_code,\n\tIN_risk_state_prov_code AS risk_state_prov_code,\n\tIN_risk_zip_code AS risk_zip_code,\n\tIN_terr_code AS terr_code,\n\tIN_tax_loc AS tax_loc,\n\tIN_class_code AS class_code,\n\tIN_exposure AS exposure,\n\tIN_sub_line_code AS sub_line_code,\n\tIN_source_sar_asl AS source_sar_asl,\n\tIN_source_sar_prdct_line AS source_sar_prdct_line,\n\tIN_source_sar_sp_use_code AS source_sar_sp_use_code,\n\tIN_auto_reins_facility_out AS auto_reins_facility_out,\n\tIN_statistical_brkdwn_line AS statistical_brkdwn_line,\n\tIN_statistical_code_1 AS statistical_code_1,\n\tIN_statistical_code_2 AS statistical_code_2,\n\tIN_statistical_code_3 AS statistical_code_3,\n\tIN_variation_code_out AS variation_code_out,\n\tIN_statistical_line AS statistical_line,\n\tIN_Policy_Type AS Policy_Type\n\tFROM JNR_temp_policy_transaction_and_claim_coverage_detail\n),\nLKP_gtam_08_CoverageLookup AS (\n\tSELECT\n\tcoverage_code,\n\tmajor_peril\n\tFROM (\n\t\tSELECT gtam_tm08_stage.coverage_code as coverage_code, \r\n\t\tRTRIM(gtam_tm08_stage.major_peril) as major_peril \r\n\t\tFROM gtam_tm08_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY major_peril ORDER BY coverage_code) = 1\n),\nAGG_post_join AS (\n\tSELECT\n\tEXP_post_join.risk_state_prov_code AS IN_risk_state_prov_code, \n\tEXP_post_join.risk_zip_code AS IN_risk_zip_code, \n\tEXP_post_join.terr_code AS IN_terr_code, \n\tEXP_post_join.tax_loc AS IN_tax_loc, \n\tEXP_post_join.class_code AS IN_class_code, \n\tEXP_post_join.exposure AS IN_exposure, \n\tEXP_post_join.sub_line_code AS IN_sub_line_code, \n\tEXP_post_join.source_sar_asl AS IN_source_sar_asl, \n\tEXP_post_join.source_sar_prdct_line AS IN_source_sar_prdct_line, \n\tEXP_post_join.source_sar_sp_use_code AS IN_source_sar_sp_use_code, \n\tEXP_post_join.auto_reins_facility_out AS IN_auto_reins_facility_out, \n\tEXP_post_join.statistical_brkdwn_line AS IN_statistical_brkdwn_line, \n\tEXP_post_join.statistical_code_1 AS IN_statistical_code_1, \n\tEXP_post_join.statistical_code_2 AS IN_statistical_code_2, \n\tEXP_post_join.statistical_code_3 AS IN_statistical_code_3, \n\tEXP_post_join.variation_code_out AS IN_variation_code, \n\tEXP_post_join.statistical_line AS IN_statistical_line, \n\tEXP_post_join.Policy_Type AS IN_Policy_Type, \n\tLKP_gtam_08_CoverageLookup.coverage_code AS IN_coverage_code\n\tFROM EXP_post_join\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY IN_risk_state_prov_code, IN_risk_zip_code, IN_terr_code, IN_tax_loc, IN_class_code, IN_exposure, IN_sub_line_code, IN_source_sar_asl, IN_source_sar_prdct_line, IN_source_sar_sp_use_code, IN_auto_reins_facility_out, IN_statistical_brkdwn_line, IN_statistical_code_1, IN_statistical_code_2, IN_statistical_code_3, IN_variation_code, IN_statistical_line, IN_Policy_Type, IN_coverage_code ORDER BY NULL) = 1\n),\nEXP_converge AS (\n\tSELECT\n\tIN_risk_state_prov_code AS risk_state_prov_code,\n\t-- *INF*: ltrim(rtrim(risk_state_prov_code))\n\tltrim(rtrim(risk_state_prov_code)) AS risk_state_prov_code_out,\n\tIN_risk_zip_code AS risk_zip_code,\n\t-- *INF*: rtrim(ltrim(risk_zip_code))\n\trtrim(ltrim(risk_zip_code)) AS risk_zip_code_out,\n\tIN_terr_code AS terr_code,\n\t-- *INF*: ltrim(rtrim(terr_code))\n\tltrim(rtrim(terr_code)) AS terr_code_out,\n\tIN_tax_loc AS tax_loc,\n\t-- *INF*: IIF(NOT IS_NUMBER(tax_loc),'N/A',tax_loc)\r\n\t-- \r\n\t-- \r\n\t-- ------ Using IS_NUMBER Function so that we can default (0   ) value to N/A. Do not use LTRIM, RTRIM function as we dont want spaces to be removed.\n\tIFF(NOT IS_NUMBER(tax_loc), 'N/A', tax_loc) AS tax_loc_out,\n\t-- *INF*: rtrim(ltrim(tax_loc))\n\trtrim(ltrim(tax_loc)) AS tax_loc_lkp,\n\tIN_class_code AS class_code,\n\t-- *INF*: rtrim(ltrim(class_code))\n\trtrim(ltrim(class_code)) AS class_code_out,\n\tIN_exposure AS exposure,\n\tIN_sub_line_code AS sub_line_code,\n\t-- *INF*: rtrim(ltrim(sub_line_code))\n\trtrim(ltrim(sub_line_code)) AS sub_line_code_out,\n\tIN_source_sar_asl AS source_sar_asl,\n\t-- *INF*: rtrim(ltrim(source_sar_asl))\n\trtrim(ltrim(source_sar_asl)) AS source_sar_asl_out,\n\tIN_source_sar_prdct_line AS source_sar_prdct_line,\n\t-- *INF*: rtrim(ltrim(source_sar_prdct_line))\n\trtrim(ltrim(source_sar_prdct_line)) AS source_sar_prdct_line_out,\n\tIN_source_sar_sp_use_code AS source_sar_sp_use_code,\n\t-- *INF*: rtrim(ltrim(source_sar_sp_use_code))\n\trtrim(ltrim(source_sar_sp_use_code)) AS source_sar_sp_use_code_lkp,\n\tIN_auto_reins_facility_out AS auto_reins_facility,\n\t-- *INF*: ltrim(rtrim(auto_reins_facility))\n\tltrim(rtrim(auto_reins_facility)) AS auto_reins_facility_out,\n\tIN_statistical_brkdwn_line AS statistical_brkdwn_line,\n\t-- *INF*: rtrim(ltrim(statistical_brkdwn_line))\n\trtrim(ltrim(statistical_brkdwn_line)) AS statistical_brkdwn_line_out,\n\tIN_statistical_code_1 AS statistical_code_1,\n\t-- *INF*: ltrim(rtrim(statistical_code_1))\r\n\t-- \r\n\t-- -- We are trimming the spaces so that we can find a match on the Target Lookup Values  \n\tltrim(rtrim(statistical_code_1)) AS statistical_code_1_lkp,\n\tIN_statistical_code_2 AS statistical_code_2,\n\t-- *INF*: ltrim(rtrim(statistical_code_2))\r\n\t-- \r\n\t-- -- We are trimming the spaces so that we can find a match on the Target Lookup Values  \n\tltrim(rtrim(statistical_code_2)) AS statistical_code_2_lkp,\n\tIN_statistical_code_3 AS statistical_code_3,\n\t-- *INF*: ltrim(rtrim(statistical_code_3))\r\n\t-- \r\n\t-- -- We are trimming the spaces so that we can find a match on the Target Lookup Values  \n\tltrim(rtrim(statistical_code_3)) AS statistical_code_3_lkp,\n\tIN_variation_code AS variation_code,\n\t-- *INF*: ltrim(rtrim(variation_code))\n\tltrim(rtrim(variation_code)) AS variation_code_out,\n\tIN_statistical_line AS source_statistical_line,\n\t-- *INF*: ltrim(rtrim(source_statistical_line))\n\tltrim(rtrim(source_statistical_line)) AS source_statistical_line_out,\n\tIN_Policy_Type AS Policy_Type,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(Policy_Type)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(Policy_Type) AS policy_type_lkp,\n\tIN_coverage_code AS coverage_code_in,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(coverage_code_in)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(coverage_code_in) AS coverage_code_out\n\tFROM AGG_post_join\n),\nLKP_loss_master_dim AS (\n\tSELECT\n\tloss_master_dim_id,\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code1,\n\tstatistical_code2,\n\tstatistical_code3,\n\tloss_master_cov_code\n\tFROM (\n\t\tSELECT loss_master_dim.loss_master_dim_id      AS loss_master_dim_id,\r\n\t\t       ltrim(rtrim(loss_master_dim.risk_state_prov_code))    AS risk_state_prov_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.risk_zip_code))           AS risk_zip_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.terr_code))               AS terr_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.tax_loc))                 AS tax_loc,\r\n\t\t       ltrim(rtrim(loss_master_dim.class_code))              AS class_code,\r\n\t\t       loss_master_dim.exposure                AS exposure,\r\n\t\t       ltrim(rtrim(loss_master_dim.sub_line_code))           AS sub_line_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_asl))          AS source_sar_asl,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_prdct_line))   AS source_sar_prdct_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_sp_use_code))  AS source_sar_sp_use_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_statistical_line)) AS source_statistical_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.variation_code))          AS variation_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.pol_type))                AS pol_type,\r\n\t\t       ltrim(rtrim(loss_master_dim.auto_reins_facility))     AS auto_reins_facility,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_brkdwn_line)) AS statistical_brkdwn_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code1))       AS statistical_code1,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code2))       AS statistical_code2,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code3))       AS statistical_code3,\r\n\t\t       ltrim(rtrim(loss_master_dim.loss_master_cov_code))    AS loss_master_cov_code\r\n\t\tFROM   @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_dim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY risk_state_prov_code,risk_zip_code,terr_code,tax_loc,class_code,exposure,sub_line_code,source_sar_asl,source_sar_prdct_line,source_sar_sp_use_code,source_statistical_line,variation_code,pol_type,auto_reins_facility,statistical_brkdwn_line,statistical_code1,statistical_code2,statistical_code3,loss_master_cov_code ORDER BY loss_master_dim_id DESC) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tLKP_loss_master_dim.loss_master_dim_id AS lkp_loss_master_dim_id,\n\tEXP_converge.risk_state_prov_code_out AS risk_state_prov_code,\n\tEXP_converge.risk_zip_code_out AS risk_zip_code,\n\tEXP_converge.terr_code_out AS terr_code,\n\tEXP_converge.tax_loc_out AS tax_loc,\n\tEXP_converge.class_code_out AS class_code,\n\tEXP_converge.exposure,\n\tEXP_converge.sub_line_code_out AS sub_line_code,\n\tEXP_converge.source_sar_asl_out AS source_sar_asl,\n\tEXP_converge.source_sar_prdct_line_out AS source_sar_prdct_line,\n\tEXP_converge.source_sar_sp_use_code,\n\tEXP_converge.source_statistical_line_out AS source_statistical_line,\n\tEXP_converge.variation_code_out AS variation_code,\n\tEXP_converge.policy_type_lkp AS pol_type,\n\tEXP_converge.auto_reins_facility_out AS auto_reins_facility,\n\tEXP_converge.statistical_brkdwn_line_out AS statistical_brkdwn_line,\n\tEXP_converge.statistical_code_1,\n\tEXP_converge.statistical_code_2,\n\tEXP_converge.statistical_code_3,\n\tEXP_converge.coverage_code_out AS loss_master_cov_code\n\tFROM EXP_converge\n\tLEFT JOIN LKP_loss_master_dim\n\tON LKP_loss_master_dim.risk_state_prov_code = EXP_converge.risk_state_prov_code_out AND LKP_loss_master_dim.risk_zip_code = EXP_converge.risk_zip_code_out AND LKP_loss_master_dim.terr_code = EXP_converge.terr_code_out AND LKP_loss_master_dim.tax_loc = EXP_converge.tax_loc_lkp AND LKP_loss_master_dim.class_code = EXP_converge.class_code_out AND LKP_loss_master_dim.exposure = EXP_converge.exposure AND LKP_loss_master_dim.sub_line_code = EXP_converge.sub_line_code_out AND LKP_loss_master_dim.source_sar_asl = EXP_converge.source_sar_asl_out AND LKP_loss_master_dim.source_sar_prdct_line = EXP_converge.source_sar_prdct_line_out AND LKP_loss_master_dim.source_sar_sp_use_code = EXP_converge.source_sar_sp_use_code_lkp AND LKP_loss_master_dim.source_statistical_line = EXP_converge.source_statistical_line_out AND LKP_loss_master_dim.variation_code = EXP_converge.variation_code_out AND LKP_loss_master_dim.pol_type = EXP_converge.policy_type_lkp AND LKP_loss_master_dim.auto_reins_facility = EXP_converge.auto_reins_facility_out AND LKP_loss_master_dim.statistical_brkdwn_line = EXP_converge.statistical_brkdwn_line_out AND LKP_loss_master_dim.statistical_code1 = EXP_converge.statistical_code_1_lkp AND LKP_loss_master_dim.statistical_code2 = EXP_converge.statistical_code_2_lkp AND LKP_loss_master_dim.statistical_code3 = EXP_converge.statistical_code_3_lkp AND LKP_loss_master_dim.loss_master_cov_code = EXP_converge.coverage_code_out\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tlkp_loss_master_dim_id,\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code_1 AS statistical_code1,\n\tstatistical_code_2 AS statistical_code2,\n\tstatistical_code_3 AS statistical_code3,\n\tloss_master_cov_code\n\tFROM EXP_Values\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE IIF(ISNULL(lkp_loss_master_dim_id),TRUE,FALSE)),\nRTR_Insert_Update_UPDATE AS (SELECT * FROM RTR_Insert_Update WHERE IIF(NOT ISNULL(lkp_loss_master_dim_id),TRUE,FALSE)),\nEXP_Target1 AS (\n\tSELECT\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code AS statistical_code1,\n\tstatistical_code2,\n\tstatistical_code3,\n\tloss_master_cov_code,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM RTR_Insert_Update_INSERT\n),\nloss_master_dim_Insert AS (\n\tINSERT INTO loss_master_dim\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, created_date, modified_date, risk_state_prov_code, risk_zip_code, terr_code, tax_loc, class_code, exposure, sub_line_code, source_sar_asl, source_sar_prdct_line, source_sar_sp_use_code, source_statistical_line, variation_code, pol_type, auto_reins_facility, statistical_brkdwn_line, statistical_code1, statistical_code2, statistical_code3, loss_master_cov_code)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tRISK_STATE_PROV_CODE, \n\tRISK_ZIP_CODE, \n\tTERR_CODE, \n\tTAX_LOC, \n\tCLASS_CODE, \n\tEXPOSURE, \n\tSUB_LINE_CODE, \n\tSOURCE_SAR_ASL, \n\tSOURCE_SAR_PRDCT_LINE, \n\tSOURCE_SAR_SP_USE_CODE, \n\tSOURCE_STATISTICAL_LINE, \n\tVARIATION_CODE, \n\tPOL_TYPE, \n\tAUTO_REINS_FACILITY, \n\tSTATISTICAL_BRKDWN_LINE, \n\tSTATISTICAL_CODE1, \n\tSTATISTICAL_CODE2, \n\tSTATISTICAL_CODE3, \n\tLOSS_MASTER_COV_CODE\n\tFROM EXP_Target1\n),\nUPD_Update AS (\n\tSELECT\n\tlkp_loss_master_dim_id AS lkp_loss_master_dim_id3, \n\trisk_state_prov_code AS risk_state_prov_code3, \n\trisk_zip_code AS risk_zip_code3, \n\tterr_code AS terr_code3, \n\ttax_loc AS tax_loc3, \n\tclass_code AS class_code3, \n\texposure AS exposure3, \n\tsub_line_code AS sub_line_code3, \n\tsource_sar_asl AS source_sar_asl3, \n\tsource_sar_prdct_line AS source_sar_prdct_line3, \n\tsource_sar_sp_use_code AS source_sar_sp_use_code3, \n\tsource_statistical_line AS source_statistical_line3, \n\tvariation_code AS variation_code3, \n\tpol_type AS pol_type3, \n\tauto_reins_facility AS auto_reins_facility3, \n\tstatistical_brkdwn_line AS statistical_brkdwn_line3, \n\tstatistical_code1 AS statistical_code13, \n\tstatistical_code2 AS statistical_code23, \n\tstatistical_code AS statistical_code33, \n\tloss_master_cov_code AS loss_master_cov_code3\n\tFROM RTR_Insert_Update_UPDATE\n),\nloss_master_dim_Update AS (\n\tMERGE INTO loss_master_dim AS T\n\tUSING UPD_Update AS S\n\tON T.loss_master_dim_id = S.lkp_loss_master_dim_id3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.risk_state_prov_code = S.risk_state_prov_code3, T.risk_zip_code = S.risk_zip_code3, T.terr_code = S.terr_code3, T.tax_loc = S.tax_loc3, T.class_code = S.class_code3, T.exposure = S.exposure3, T.sub_line_code = S.sub_line_code3, T.source_sar_asl = S.source_sar_asl3, T.source_sar_prdct_line = S.source_sar_prdct_line3, T.source_sar_sp_use_code = S.source_sar_sp_use_code3, T.source_statistical_line = S.source_statistical_line3, T.variation_code = S.variation_code3, T.pol_type = S.pol_type3, T.auto_reins_facility = S.auto_reins_facility3, T.statistical_brkdwn_line = S.statistical_brkdwn_line3, T.statistical_code1 = S.statistical_code13, T.statistical_code2 = S.statistical_code23, T.statistical_code3 = S.statistical_code33, T.loss_master_cov_code = S.loss_master_cov_code3\n),\nSQ_EDWSource_DCTClaims AS (\n\tSELECT DISTINCT AB.claimant_cov_det_ak_id       AS Claimant_cov_det_ak_id,\r\n\t\t   AB.claim_party_occurrence_ak_id AS claim_party_occurrence_ak_id,\r\n\t       AB.PolicySourceID               AS Policysourceid,\r\n\t\t   RC.Classcode                 AS Classcode,\r\n\t       AB.SublineCode                  AS Sublinecode,\r\n\t       RC.Exposure                     AS Exposure,\r\n\t       RC.AnnualStatementLineNumber    AS AnnualStatementLineNumber,\r\n\t       RC.SchedulePNumber              AS SchedulePNumber,\r\n\t       RC.AnnualStatementLineCode      AS AnnualStatementLineCode,\r\n\t       RC.SubAnnualStatementLineNumber AS SubAnnualStatementLineNumber,\r\n\t       RC.SubAnnualStatementLineCode   AS SubAnnualStatementLineCode,\r\n\t       RC.SubNonAnnualStatementLineCode AS SubNonAnnualStatementLineCode,\r\n\t       RL.RiskTerritory                AS Riskterritory,\r\n\t       RL.StateProvinceCode            AS Stateprovincecode,\r\n\t       RL.ZipPostalCode                AS Zippostalcode,\r\n\t       RL.TaxLocation                  AS Taxlocation,\r\n\t       RC.Exposure                     AS Exposure\r\n\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.CLAIMANT_COVERAGE_DETAIL AB,\r\n\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC,\r\n\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.POLICYCOVERAGE Pc,\r\n\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.RISKLOCATION RL\r\n\tWHERE  AB.RatingCoverageAKId = RC.RatingCoverageAKID\r\n\t       AND RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t       AND PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t       AND AB.PolicySourceID IN ( 'PDC', 'DUC' )\r\n\t\t  AND AB.crrnt_snpsht_flag = 1 AND RL.CurrentSnapshotFlag =1 AND RC.CurrentSnapshotFlag =1 AND PC.CurrentSnapshotFlag =1\r\n\t       AND (AB.modified_date >= '@{pipeline().parameters.SELECTION_START_TS}' OR RL.createddate > ='@{pipeline().parameters.SELECTION_START_TS}' \r\n\t\t   OR PC.createddate > ='@{pipeline().parameters.SELECTION_START_TS}' OR RC.createddate > ='@{pipeline().parameters.SELECTION_START_TS}')\n),\nEXP_Default AS (\n\tSELECT\n\tclaimant_cov_det_ak_id,\n\tclaim_party_occurrence_ak_id,\n\tPolicySourceID,\n\tClassCode,\n\tSublineCode,\n\tRiskTerritory,\n\tStateProvinceCode,\n\tZipPostalCode,\n\tTaxLocation,\n\tExposure,\n\t'N/A' AS Default_NA,\n\tAnnualStatementLineNumber1 AS AnnualStatementLineNumber,\n\tSchedulePNumber,\n\tAnnualStatementLineCode,\n\tSubAnnualStatementLineNumber,\n\tSubAnnualStatementLineCode,\n\tSubNonAnnualStatementLineCode\n\tFROM SQ_EDWSource_DCTClaims\n),\nLKP_loss_master_dim_DuckCreekClaims AS (\n\tSELECT\n\tloss_master_dim_id,\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code1,\n\tstatistical_code2,\n\tstatistical_code3,\n\tloss_master_cov_code\n\tFROM (\n\t\tSELECT loss_master_dim.loss_master_dim_id      AS loss_master_dim_id,\r\n\t\t       ltrim(rtrim(loss_master_dim.risk_state_prov_code))    AS risk_state_prov_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.risk_zip_code))           AS risk_zip_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.terr_code))               AS terr_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.tax_loc))                 AS tax_loc,\r\n\t\t       ltrim(rtrim(loss_master_dim.class_code))              AS class_code,\r\n\t\t       loss_master_dim.exposure                AS exposure,\r\n\t\t       ltrim(rtrim(loss_master_dim.sub_line_code))           AS sub_line_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_asl))          AS source_sar_asl,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_prdct_line))   AS source_sar_prdct_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_sar_sp_use_code))  AS source_sar_sp_use_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.source_statistical_line)) AS source_statistical_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.variation_code))          AS variation_code,\r\n\t\t       ltrim(rtrim(loss_master_dim.pol_type))                AS pol_type,\r\n\t\t       ltrim(rtrim(loss_master_dim.auto_reins_facility))     AS auto_reins_facility,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_brkdwn_line)) AS statistical_brkdwn_line,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code1))       AS statistical_code1,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code2))       AS statistical_code2,\r\n\t\t       ltrim(rtrim(loss_master_dim.statistical_code3))       AS statistical_code3,\r\n\t\t       ltrim(rtrim(loss_master_dim.loss_master_cov_code))    AS loss_master_cov_code\r\n\t\tFROM   loss_master_dim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY risk_state_prov_code,risk_zip_code,terr_code,tax_loc,class_code,exposure,sub_line_code,source_sar_asl,source_sar_prdct_line,source_sar_sp_use_code,source_statistical_line,variation_code,pol_type,auto_reins_facility,statistical_brkdwn_line,statistical_code1,statistical_code2,statistical_code3,loss_master_cov_code ORDER BY loss_master_dim_id DESC) = 1\n),\nEXP_Values2 AS (\n\tSELECT\n\tLKP_loss_master_dim_DuckCreekClaims.loss_master_dim_id AS lkp_loss_master_dim_id,\n\tEXP_Default.StateProvinceCode AS risk_state_prov_code,\n\tEXP_Default.ZipPostalCode AS risk_zip_code,\n\tEXP_Default.RiskTerritory AS terr_code,\n\tEXP_Default.TaxLocation AS tax_loc,\n\tEXP_Default.ClassCode AS class_code,\n\tEXP_Default.Exposure AS exposure,\n\tEXP_Default.SublineCode AS sub_line_code,\n\tEXP_Default.Default_NA AS source_sar_asl,\n\tEXP_Default.Default_NA AS source_sar_prdct_line,\n\tEXP_Default.Default_NA AS source_sar_sp_use_code,\n\tEXP_Default.Default_NA AS source_statistical_line,\n\tEXP_Default.Default_NA AS variation_code,\n\tEXP_Default.Default_NA AS pol_type,\n\tEXP_Default.Default_NA AS auto_reins_facility,\n\tEXP_Default.Default_NA AS statistical_brkdwn_line,\n\tEXP_Default.Default_NA AS statistical_code_1,\n\tEXP_Default.Default_NA AS statistical_code_2,\n\tEXP_Default.Default_NA AS statistical_code_3,\n\tEXP_Default.Default_NA AS loss_master_cov_code\n\tFROM EXP_Default\n\tLEFT JOIN LKP_loss_master_dim_DuckCreekClaims\n\tON LKP_loss_master_dim_DuckCreekClaims.risk_state_prov_code = EXP_Default.StateProvinceCode AND LKP_loss_master_dim_DuckCreekClaims.risk_zip_code = EXP_Default.ZipPostalCode AND LKP_loss_master_dim_DuckCreekClaims.terr_code = EXP_Default.RiskTerritory AND LKP_loss_master_dim_DuckCreekClaims.tax_loc = EXP_Default.TaxLocation AND LKP_loss_master_dim_DuckCreekClaims.class_code = EXP_Default.ClassCode AND LKP_loss_master_dim_DuckCreekClaims.exposure = EXP_Default.Exposure AND LKP_loss_master_dim_DuckCreekClaims.sub_line_code = EXP_Default.SublineCode AND LKP_loss_master_dim_DuckCreekClaims.source_sar_asl = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.source_sar_prdct_line = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.source_sar_sp_use_code = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.source_statistical_line = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.variation_code = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.pol_type = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.auto_reins_facility = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.statistical_brkdwn_line = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.statistical_code1 = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.statistical_code2 = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.statistical_code3 = EXP_Default.Default_NA AND LKP_loss_master_dim_DuckCreekClaims.loss_master_cov_code = EXP_Default.Default_NA\n),\nRTR_Insert_Update1 AS (\n\tSELECT\n\tlkp_loss_master_dim_id,\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code_1 AS statistical_code1,\n\tstatistical_code_2 AS statistical_code2,\n\tstatistical_code_3 AS statistical_code3,\n\tloss_master_cov_code\n\tFROM EXP_Values2\n),\nRTR_Insert_Update1_INSERT AS (SELECT * FROM RTR_Insert_Update1 WHERE IIF(ISNULL(lkp_loss_master_dim_id),TRUE,FALSE)),\nRTR_Insert_Update1_UPDATE AS (SELECT * FROM RTR_Insert_Update1 WHERE IIF(NOT ISNULL(lkp_loss_master_dim_id),TRUE,FALSE)),\nUPD_Update1 AS (\n\tSELECT\n\tlkp_loss_master_dim_id AS lkp_loss_master_dim_id3, \n\trisk_state_prov_code AS risk_state_prov_code3, \n\trisk_zip_code AS risk_zip_code3, \n\tterr_code AS terr_code3, \n\ttax_loc AS tax_loc3, \n\tclass_code AS class_code3, \n\texposure AS exposure3, \n\tsub_line_code AS sub_line_code3, \n\tsource_sar_asl AS source_sar_asl3, \n\tsource_sar_prdct_line AS source_sar_prdct_line3, \n\tsource_sar_sp_use_code AS source_sar_sp_use_code3, \n\tsource_statistical_line AS source_statistical_line3, \n\tvariation_code AS variation_code3, \n\tpol_type AS pol_type3, \n\tauto_reins_facility AS auto_reins_facility3, \n\tstatistical_brkdwn_line AS statistical_brkdwn_line3, \n\tstatistical_code1 AS statistical_code13, \n\tstatistical_code2 AS statistical_code23, \n\tstatistical_code AS statistical_code33, \n\tloss_master_cov_code AS loss_master_cov_code3\n\tFROM RTR_Insert_Update1_UPDATE\n),\nloss_master_dim_Update1 AS (\n\tMERGE INTO loss_master_dim AS T\n\tUSING UPD_Update1 AS S\n\tON T.loss_master_dim_id = S.lkp_loss_master_dim_id3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.risk_state_prov_code = S.risk_state_prov_code3, T.risk_zip_code = S.risk_zip_code3, T.terr_code = S.terr_code3, T.tax_loc = S.tax_loc3, T.class_code = S.class_code3, T.exposure = S.exposure3, T.sub_line_code = S.sub_line_code3, T.source_sar_asl = S.source_sar_asl3, T.source_sar_prdct_line = S.source_sar_prdct_line3, T.source_sar_sp_use_code = S.source_sar_sp_use_code3, T.source_statistical_line = S.source_statistical_line3, T.variation_code = S.variation_code3, T.pol_type = S.pol_type3, T.auto_reins_facility = S.auto_reins_facility3, T.statistical_brkdwn_line = S.statistical_brkdwn_line3, T.statistical_code1 = S.statistical_code13, T.statistical_code2 = S.statistical_code23, T.statistical_code3 = S.statistical_code33, T.loss_master_cov_code = S.loss_master_cov_code3\n),\nEXP_Target11 AS (\n\tSELECT\n\trisk_state_prov_code,\n\trisk_zip_code,\n\tterr_code,\n\ttax_loc,\n\tclass_code,\n\texposure,\n\tsub_line_code,\n\tsource_sar_asl,\n\tsource_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tsource_statistical_line,\n\tvariation_code,\n\tpol_type,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tstatistical_code AS statistical_code1,\n\tstatistical_code2,\n\tstatistical_code3,\n\tloss_master_cov_code,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM RTR_Insert_Update1_INSERT\n),\nloss_master_dim_Insert1 AS (\n\tINSERT INTO loss_master_dim\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, created_date, modified_date, risk_state_prov_code, risk_zip_code, terr_code, tax_loc, class_code, exposure, sub_line_code, source_sar_asl, source_sar_prdct_line, source_sar_sp_use_code, source_statistical_line, variation_code, pol_type, auto_reins_facility, statistical_brkdwn_line, statistical_code1, statistical_code2, statistical_code3, loss_master_cov_code)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tRISK_STATE_PROV_CODE, \n\tRISK_ZIP_CODE, \n\tTERR_CODE, \n\tTAX_LOC, \n\tCLASS_CODE, \n\tEXPOSURE, \n\tSUB_LINE_CODE, \n\tSOURCE_SAR_ASL, \n\tSOURCE_SAR_PRDCT_LINE, \n\tSOURCE_SAR_SP_USE_CODE, \n\tSOURCE_STATISTICAL_LINE, \n\tVARIATION_CODE, \n\tPOL_TYPE, \n\tAUTO_REINS_FACILITY, \n\tSTATISTICAL_BRKDWN_LINE, \n\tSTATISTICAL_CODE1, \n\tSTATISTICAL_CODE2, \n\tSTATISTICAL_CODE3, \n\tLOSS_MASTER_COV_CODE\n\tFROM EXP_Target11\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}