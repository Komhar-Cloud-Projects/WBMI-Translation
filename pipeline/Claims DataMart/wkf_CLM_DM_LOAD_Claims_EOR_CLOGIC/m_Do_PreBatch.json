{
    "name": "m_Do_PreBatch",
    "properties": {
        "activities": [
            {
                "name": "m_Do_PreBatch",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_wbmi_batch_control_run_EXPIRE AS (\n\tSelect batch_control_run.wbmi_batch_control_run_id\r\n\tfrom\r\n\twbmi_batch_control_run as batch_control_run,\r\n\twbmi_batch_control as batch_control\r\n\twhere \r\n\tbatch_control_run.wbmi_batch_control_id = batch_control.wbmi_batch_control_id\r\n\tAND batch_control.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\tAND batch_control_run.current_ind='Y'\r\n\tand NOT EXISTS(SELECT 1\r\n\t\tFROM wbmi_batch_control_run as batch_control_run2\r\n\t\tWHERE batch_control_run.wbmi_batch_control_id = batch_control_run2.wbmi_batch_control_id\r\n\t       AND batch_control.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\t       AND batch_control_run.current_ind='Y'\r\n\t\tAND batch_control_run2.end_ts IS NULL)\r\n\t\r\n\t--Subquery in place to ensure that if we have not ran m_Do_PostBatch for a Batch that m_Do_PreBatch\r\n\t--does not run initialize a new set of rows in the corresponding run tables.  It will however rewrite the parm file.\n),\nEXP_wbmi_batch_control_imitialize_source AS (\n\tSELECT\n\twbmi_batch_control_run_id,\n\t'N' AS current_ind,\n\tsysdate AS modified_date\n\tFROM SQ_wbmi_batch_control_run_EXPIRE\n),\nUPD_wbmi_batch_control_run_initialize AS (\n\tSELECT\n\twbmi_batch_control_run_id, \n\tcurrent_ind, \n\tmodified_date\n\tFROM EXP_wbmi_batch_control_imitialize_source\n),\nwbmi_batch_control_run_EXPIRE AS (\n\tMERGE INTO wbmi_batch_control_run AS T\n\tUSING UPD_wbmi_batch_control_run_initialize AS S\n\tON T.wbmi_batch_control_run_id = S.wbmi_batch_control_run_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.current_ind = S.current_ind, T.modified_date = S.modified_date\n),\nSQ_wbmi_session_control_run_EXPIRE AS (\n\tselect\r\n\tsession_control_run.wbmi_session_control_run_id\r\n\tfrom\r\n\tdbo.wbmi_session_control_run as session_control_run,\r\n\tdbo.wbmi_batch_control_run as batch_control_run,\r\n\tdbo.wbmi_batch_control as batch_control\r\n\twhere\r\n\tsession_control_run.wbmi_batch_control_run_id = batch_control_run.wbmi_batch_control_run_id\r\n\tand batch_control_run.wbmi_batch_control_id = batch_control.wbmi_batch_control_id\r\n\tand session_control_run.current_ind = 'Y'\r\n\tand batch_control.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\tand NOT EXISTS(SELECT 1\r\n\t\tFROM wbmi_batch_control_run as batch_control_run2,\r\n\t\t\t        wbmi_session_control_run as session_control_run2\r\n\t\tWHERE batch_control_run2.wbmi_batch_control_run_id = session_control_run2.wbmi_batch_control_run_id\r\n\t\tAND  batch_control_run.wbmi_batch_control_id = batch_control_run2.wbmi_batch_control_id\r\n\t       and session_control_run.current_ind = 'Y'\r\n\t       and batch_control.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\t\tAND batch_control_run2.end_ts IS NULL)\r\n\t\r\n\t--Subquery in place to ensure that if we have not ran m_Do_PostBatch for a Batch that m_Do_PreBatch\r\n\t--does not run initialize a new set of rows in the corresponding run tables.  It will however rewrite the parm file.\n),\nEXP_wbmi_session_control_run_initialize AS (\n\tSELECT\n\twbmi_session_control_run_id,\n\t'N' AS current_ind,\n\tsysdate AS modified_date\n\tFROM SQ_wbmi_session_control_run_EXPIRE\n),\nUPD_wbmi_session_control_run_initialize AS (\n\tSELECT\n\twbmi_session_control_run_id, \n\tcurrent_ind, \n\tmodified_date\n\tFROM EXP_wbmi_session_control_run_initialize\n),\nwbmi_session_control_run_EXPIRE AS (\n\tMERGE INTO wbmi_session_control_run AS T\n\tUSING UPD_wbmi_session_control_run_initialize AS S\n\tON T.wbmi_session_control_run_id = S.wbmi_session_control_run_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.current_ind = S.current_ind, T.modified_date = S.modified_date\n),\nSQ_wbmi_batch_control_INITIALIZE_NEW_BATCH AS (\n\tselect \r\n\tbatch_control.wbmi_batch_control_id,\r\n\tbatch_control.batch_name,\r\n\tbatch_control.email_code,\r\n\tbatch_control.email_address,\r\n\taudit_control_run.wbmi_audit_control_run_id\r\n\tfrom\r\n\twbmi_batch_control as batch_control,\r\n\twbmi_audit_control_run as audit_control_run\r\n\twhere audit_control_run.wbmi_audit_control_id = batch_control.wbmi_audit_control_id \r\n\tand batch_control.batch_name= '@{pipeline().parameters.BATCH_NAME}'\r\n\tand audit_control_run.current_indicator='Y'\r\n\tand NOT EXISTS(SELECT 1\r\n\t\tFROM wbmi_batch_control_run as batch_control_run2\r\n\t\tWHERE batch_control.wbmi_batch_control_id = batch_control_run2.wbmi_batch_control_id\r\n\t      and batch_control.batch_name= '@{pipeline().parameters.BATCH_NAME}'\r\n\t      and audit_control_run.current_indicator='Y'\r\n\t\tAND batch_control_run2.end_ts IS NULL)\r\n\t\r\n\t--Subquery in place to ensure that if we have not ran m_Do_PostBatch for a Batch that m_Do_PreBatch\r\n\t--does not run initialize a new set of rows in the corresponding run tables.  It will however rewrite the parm file.\n),\nEXP_wbmi_batch_control_run AS (\n\tSELECT\n\twbmi_batch_control_id,\n\t'Y' AS current_ind,\n\tsysdate AS start_ts,\n\tbatch_name,\n\temail_code,\n\temail_address,\n\t'InformS' AS created_user_id,\n\tsysdate AS created_date,\n\t'InformS' AS modified_user_id,\n\tsysdate AS modified_date,\n\twbmi_audit_control_run_id\n\tFROM SQ_wbmi_batch_control_INITIALIZE_NEW_BATCH\n),\nUPD_wbmi_batch_control_run AS (\n\tSELECT\n\twbmi_batch_control_id, \n\tcurrent_ind, \n\tstart_ts, \n\tbatch_name, \n\temail_code, \n\temail_address, \n\tcreated_user_id, \n\tcreated_date, \n\tmodified_user_id, \n\tmodified_date, \n\twbmi_audit_control_run_id\n\tFROM EXP_wbmi_batch_control_run\n),\nwbmi_batch_control_run_INITIALIZE_NEW_BATCH AS (\n\tINSERT INTO wbmi_batch_control_run\n\t(wbmi_batch_control_id, batch_name, email_code, current_ind, start_ts, created_user_id, email_address, created_date, modified_user_id, modified_date, wbmi_audit_control_run_id)\n\tSELECT \n\tWBMI_BATCH_CONTROL_ID, \n\tBATCH_NAME, \n\tEMAIL_CODE, \n\tCURRENT_IND, \n\tSTART_TS, \n\tCREATED_USER_ID, \n\tEMAIL_ADDRESS, \n\tCREATED_DATE, \n\tMODIFIED_USER_ID, \n\tMODIFIED_DATE, \n\tWBMI_AUDIT_CONTROL_RUN_ID\n\tFROM UPD_wbmi_batch_control_run\n),\nSQ_wbmi_session_control_INCREMENT_SEL_START_END_TS AS (\n\tSELECT \r\n\tbatch_control_run.batch_name, \r\n\tsession_control.wbmi_session_control_id, \r\n\tsession_control.session_name, \r\n\tsession_control.selection_start_ts, \r\n\tsession_control.selection_end_ts, \r\n\tsession_control.selection_incrementation_pattern, \r\n\tbatch_control_run.end_ts \r\n\tFROM \r\n\twbmi_session_control as session_control, \r\n\twbmi_batch_control_run as batch_control_run\r\n\tWHERE session_control.wbmi_batch_control_id = batch_control_run.wbmi_batch_control_id\r\n\tAND batch_control_run.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\tAND batch_control_run.current_ind='Y' \r\n\tand NOT EXISTS(SELECT 1\r\n\t\tFROM wbmi_batch_control_run as batch_control_run2,\r\n\t\t\t        wbmi_session_control_run as session_control_run2\r\n\t\tWHERE batch_control_run2.wbmi_batch_control_run_id = session_control_run2.wbmi_batch_control_run_id\r\n\t\tAND  batch_control_run.wbmi_batch_control_id = batch_control_run2.wbmi_batch_control_id\r\n\t      AND batch_control_run2.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\t      AND batch_control_run2.current_ind='Y'  \r\n\t\tAND batch_control_run2.end_ts IS NULL)\r\n\t\r\n\t--Subquery in place to ensure that if we have not ran m_Do_PostBatch for a Batch that m_Do_PreBatch\r\n\t--does not run initialize a new set of rows in the corresponding run tables.  It will however rewrite the parm file.\n),\nEXP_wbmi_session_control AS (\n\tSELECT\n\tbatch_name AS bacth_name,\n\twbmi_session_control_id,\n\tsession_name,\n\tselection_start_ts AS in_selection_start_ts,\n\tselection_end_ts AS in_selection_end_ts,\n\tend_ts,\n\tselection_incrementation_pattern AS in_selection_incrementation_pattern,\n\t-- *INF*: ADD_TO_DATE(in_selection_end_ts,'SS', 1)\r\n\t-- \r\n\t-- \r\n\t-- \n\tADD_TO_DATE(in_selection_end_ts, 'SS', 1) AS out_selection_start_ts,\n\tCURRENT_TIMESTAMP AS out_selection_end_ts\n\tFROM SQ_wbmi_session_control_INCREMENT_SEL_START_END_TS\n),\nUPD_wbmi_session_control AS (\n\tSELECT\n\twbmi_session_control_id, \n\tout_selection_start_ts AS selection_start_ts, \n\tout_selection_end_ts AS selection_end_ts\n\tFROM EXP_wbmi_session_control\n),\nwbmi_session_control_INCREMENT_SEL_START_END_TS AS (\n\tMERGE INTO wbmi_session_control AS T\n\tUSING UPD_wbmi_session_control AS S\n\tON T.wbmi_session_control_id = S.wbmi_session_control_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.selection_start_ts = S.selection_start_ts, T.selection_end_ts = S.selection_end_ts\n),\nSQ_wbmi_session_control_INITIALIZE AS (\n\tSELECT \r\n\tsession_control.wbmi_session_control_id, \r\n\tsession_control.folder_name,\r\n\tsession_control.workflow_name,\r\n\tsession_control.session_name,\r\n\tsession_control.selection_start_ts,\r\n\tsession_control.selection_end_ts,\r\n\tsession_control.selection_incrementation_pattern,\r\n\tsession_control.source_database_connection,\r\n\tsession_control.target_database_connection,\r\n\tsession_control.source_table_owner,\r\n\tsession_control.target_table_owner,\r\n\tsession_control.additional_parameters,\r\n\tbatch_control_run.wbmi_batch_control_run_id\r\n\tFROM\r\n\tdbo.wbmi_batch_control_run as batch_control_run, \r\n\tdbo.wbmi_session_control as session_control,\r\n\tdbo.wbmi_batch_control as batch_control\r\n\tWHERE \r\n\tsession_control.wbmi_batch_control_id = batch_control_run.wbmi_batch_control_id\r\n\tAND batch_control_run.wbmi_batch_control_id = batch_control.wbmi_batch_control_id\r\n\tAND batch_control.batch_name = '@{pipeline().parameters.BATCH_NAME}'\r\n\tAND batch_control_run.current_ind='Y'\r\n\tand NOT EXISTS(SELECT 1\r\n\t\tFROM wbmi_batch_control_run as batch_control_run2,\r\n\t\t\t        wbmi_session_control_run as session_control_run2\r\n\t\tWHERE batch_control_run2.wbmi_batch_control_run_id = session_control_run2.wbmi_batch_control_run_id\r\n\t\tAND  batch_control_run.wbmi_batch_control_id = batch_control_run2.wbmi_batch_control_id\r\n\t\tAND batch_control_run2.end_ts IS NULL)\r\n\t\r\n\t--Subquery in place to ensure that if we have not ran m_Do_PostBatch for a Batch that m_Do_PreBatch\r\n\t--does not run initialize a new set of rows in the corresponding run tables.  It will however rewrite the parm file.\n),\nEXP_session_control AS (\n\tSELECT\n\twbmi_session_control_id,\n\t'Y' AS current_ind,\n\t'InformS ' AS created_user_id,\n\tsysdate AS created_date,\n\t'InformS' AS modified_user_id,\n\tsysdate AS modified_date\n\tFROM SQ_wbmi_session_control_INITIALIZE\n),\nUPD_wbmi_session_control_run AS (\n\tSELECT\n\tSQ_wbmi_session_control_INITIALIZE.wbmi_session_control_id, \n\tSQ_wbmi_session_control_INITIALIZE.wbmi_batch_control_run_id, \n\tSQ_wbmi_session_control_INITIALIZE.folder_name, \n\tSQ_wbmi_session_control_INITIALIZE.workflow_name, \n\tSQ_wbmi_session_control_INITIALIZE.session_name, \n\tSQ_wbmi_session_control_INITIALIZE.selection_start_ts, \n\tSQ_wbmi_session_control_INITIALIZE.selection_end_ts, \n\tSQ_wbmi_session_control_INITIALIZE.selection_incrementation_pattern, \n\tSQ_wbmi_session_control_INITIALIZE.source_database_connection, \n\tSQ_wbmi_session_control_INITIALIZE.target_database_connection, \n\tSQ_wbmi_session_control_INITIALIZE.source_table_owner, \n\tSQ_wbmi_session_control_INITIALIZE.target_table_owner, \n\tSQ_wbmi_session_control_INITIALIZE.additional_parameters, \n\tEXP_session_control.current_ind, \n\tEXP_session_control.created_user_id, \n\tEXP_session_control.created_date, \n\tEXP_session_control.modified_user_id, \n\tEXP_session_control.modified_date\n\tFROM EXP_session_control\n\t -- Manually join with SQ_wbmi_session_control_INITIALIZE\n),\nwbmi_session_control_run_INITIALIZE_SESSIONS AS (\n\tINSERT INTO wbmi_session_control_run\n\t(wbmi_session_control_id, wbmi_batch_control_run_id, folder_name, workflow_name, session_name, selection_start_ts, selection_end_ts, selection_incrementation_pattern, source_database_connection, target_database_connection, source_table_owner, target_table_owner, additional_parameters, current_ind, created_user_id, created_date, modified_user_id, modified_date)\n\tSELECT \n\tWBMI_SESSION_CONTROL_ID, \n\tWBMI_BATCH_CONTROL_RUN_ID, \n\tFOLDER_NAME, \n\tWORKFLOW_NAME, \n\tSESSION_NAME, \n\tSELECTION_START_TS, \n\tSELECTION_END_TS, \n\tSELECTION_INCREMENTATION_PATTERN, \n\tSOURCE_DATABASE_CONNECTION, \n\tTARGET_DATABASE_CONNECTION, \n\tSOURCE_TABLE_OWNER, \n\tTARGET_TABLE_OWNER, \n\tADDITIONAL_PARAMETERS, \n\tCURRENT_IND, \n\tCREATED_USER_ID, \n\tCREATED_DATE, \n\tMODIFIED_USER_ID, \n\tMODIFIED_DATE\n\tFROM UPD_wbmi_session_control_run\n),\nSQ_wbmi_session_control_run_PARM_FILE AS (\n\tselect\r\n\tbatch_control_run.wbmi_audit_control_run_id,\r\n\tsession_control_run.wbmi_session_control_run_id,\r\n\tsession_control_run.wbmi_batch_control_run_id,\r\n\tsession_control_run.folder_name,\r\n\tsession_control_run.workflow_name,\r\n\tsession_control_run.session_name,\r\n\tsession_control_run.selection_start_ts,\r\n\tsession_control_run.selection_end_ts,\r\n\tsession_control_run.source_database_connection,\r\n\tsession_control_run.target_database_connection,\r\n\tsession_control_run.source_table_owner,\r\n\tsession_control_run.target_table_owner,\r\n\tsession_control_run.additional_parameters\r\n\tfrom \r\n\tdbo.wbmi_session_control_run as session_control_run,\r\n\tdbo.wbmi_batch_control_run as batch_control_run\r\n\twhere\r\n\tbatch_control_run.wbmi_batch_control_run_id = session_control_run.wbmi_batch_control_run_id \r\n\tand batch_control_run.batch_name='@{pipeline().parameters.BATCH_NAME}'\r\n\tand session_control_run.current_ind = 'Y'\n),\nEXP_out_Parm_file AS (\n\tSELECT\n\twbmi_audit_control_run_id,\n\twbmi_session_control_run_id,\n\twbmi_batch_control_run_id,\n\tfolder_name,\n\tworkflow_name,\n\tsession_name,\n\tselection_start_ts,\n\tselection_end_ts,\n\tsource_database_connection,\n\ttarget_database_connection,\n\tsource_table_owner,\n\ttarget_table_owner,\n\tadditional_parameters,\n\t-- *INF*: '[' || RTRIM(folder_name) || '.' ||\r\n\t--   RTRIM(session_name) || ']' || CHR(10) ||\r\n\t-- '@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}=' ||\r\n\t--  TO_CHAR (wbmi_audit_control_run_id )  || CHR(10) ||\r\n\t-- '@{pipeline().parameters.WBMI_BATCH_CONTROL_RUN_ID}=' ||\r\n\t--  TO_CHAR (wbmi_batch_control_run_id )  || CHR(10) ||\r\n\t-- '@{pipeline().parameters.WBMI_SESSION_CONTROL_RUN_ID}=' || \r\n\t-- TO_CHAR (wbmi_session_control_run_id )  ||  CHR(10) ||\r\n\t-- '@{pipeline().parameters.SELECTION_START_TS}=' || TO_CHAR( selection_start_ts)  || CHR(10) ||\r\n\t-- '@{pipeline().parameters.SELECTION_END_TS}=' || TO_CHAR( selection_end_ts)  ||  CHR(10) ||\r\n\t-- '@{pipeline().parameters.DBCONNECTION_SOURCE}=' ||  RTRIM(source_database_connection) || CHR(10) ||\r\n\t-- '@{pipeline().parameters.DBCONNECTION_TARGET}=' ||  RTRIM(target_database_connection) || CHR(10) ||\r\n\t-- '@{pipeline().parameters.SOURCE_TABLE_OWNER}=' ||  RTRIM(source_table_owner) || CHR(10) ||\r\n\t-- '@{pipeline().parameters.TARGET_TABLE_OWNER}=' ||  RTRIM(target_table_owner) || CHR(10) ||\r\n\t-- IIF(ISNULL(additional_parameters), '', RTRIM(additional_parameters))  ||  CHR(10) \n\t'[' || RTRIM(folder_name) || '.' || RTRIM(session_name) || ']' || CHR(10) || '@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}=' || TO_CHAR(wbmi_audit_control_run_id) || CHR(10) || '@{pipeline().parameters.WBMI_BATCH_CONTROL_RUN_ID}=' || TO_CHAR(wbmi_batch_control_run_id) || CHR(10) || '@{pipeline().parameters.WBMI_SESSION_CONTROL_RUN_ID}=' || TO_CHAR(wbmi_session_control_run_id) || CHR(10) || '@{pipeline().parameters.SELECTION_START_TS}=' || TO_CHAR(selection_start_ts) || CHR(10) || '@{pipeline().parameters.SELECTION_END_TS}=' || TO_CHAR(selection_end_ts) || CHR(10) || '@{pipeline().parameters.DBCONNECTION_SOURCE}=' || RTRIM(source_database_connection) || CHR(10) || '@{pipeline().parameters.DBCONNECTION_TARGET}=' || RTRIM(target_database_connection) || CHR(10) || '@{pipeline().parameters.SOURCE_TABLE_OWNER}=' || RTRIM(source_table_owner) || CHR(10) || '@{pipeline().parameters.TARGET_TABLE_OWNER}=' || RTRIM(target_table_owner) || CHR(10) || IFF(additional_parameters IS NULL, '', RTRIM(additional_parameters)) || CHR(10) AS out_Param_Data\n\tFROM SQ_wbmi_session_control_run_PARM_FILE\n),\nBatch_Name AS (\n\tINSERT INTO Batch_Name_Parm\n\t(Parm_Data1)\n\tSELECT \n\tout_Param_Data AS PARM_DATA1\n\tFROM EXP_out_Parm_file\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "BATCH_NAME": {
                "type": "string",
                "defaultValue": "CLAIMS_EOR_DATAMART"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}