{
    "name": "s_m_POL_DW_LOAD_PolicyCoverage_DCT_PL",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PolicyCoverage_DCT_PL",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WorkDCTPLCoverage AS (\n\tselect distinct P.PolicySymbol,\r\n\tP.PolicyNumber,\r\n\tP.PolicyVersion,\r\n\tsubstring(REPLACE(Addresskey,P.Policykey+'||',''),1,charindex('|',REPLACE(Addresskey,P.Policykey+'||','') ,1)-1) Locationid,\r\n\t'0000' LocationNumber,\r\n\tP.PolicyEffectiveDate,\r\n\tP.PolicyExpirationDate,\r\n\t0.00 CommissionCustomerCareAmount\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy P\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLLocation L\r\n\ton P.PolicyKey=L.PolicyKey\r\n\tand P.StartDate=L.StartDate\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLCoverage C\r\n\ton P.PolicyKey=C.PolicyKey\r\n\tand P.StartDate=C.StartDate\r\n\tand L.AddressKey=C.RiskAddressKey\r\n\tand not exists(select 1 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy P2 where P2.LineageId=P.LineageId and P2.PolicyStatusKey='ClaimFreeAward')\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t\r\n\tUNION\r\n\t\r\n\tselect distinct P.PolicySymbol,\r\n\tP.PolicyNumber,\r\n\tP.PolicyVersion,\r\n\t'' Locationid,\r\n\t'0000' LocationNumber,\r\n\tP.PolicyEffectiveDate,\r\n\tP.PolicyExpirationDate,\r\n\t0.00 CommissionCustomerCareAmount\r\n\tfrom\r\n\t @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy P\r\n\tWHERE \r\n\tnot exists(select 1 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy P2 where P2.LineageId=P.LineageId and P2.PolicyStatusKey='ClaimFreeAward')\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_Set_Keys AS (\n\tSELECT\n\tPolicySymbol,\n\tPolicyNumber,\n\tPolicyVersion,\n\t-- *INF*: PolicyNumber || IIF(ISNULL(ltrim(rtrim(PolicyVersion))) or Length(ltrim(rtrim(PolicyVersion)))=0 or IS_SPACES(PolicyVersion),'00',PolicyVersion)\n\tPolicyNumber || IFF(ltrim(rtrim(PolicyVersion)) IS NULL OR Length(ltrim(rtrim(PolicyVersion))) = 0 OR IS_SPACES(PolicyVersion), '00', PolicyVersion) AS v_PolicyKey,\n\tv_PolicyKey AS o_PolicyKey,\n\tv_PolicyKey || '|' || Locationid || '|' || LocationNumber AS o_RiskLocationKey,\n\tLocationid,\n\tLocationNumber,\n\t'N/A' AS LineOfInsuranceDesc,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tCommissionCustomerCareAmount\n\tFROM SQ_WorkDCTPLCoverage\n),\nLKP_Policy AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\tpol_key\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol_num\r\n\t\tand ISNULL(RIGHT('00'+CONVERT(varchar(3),WCT.PolicyVersion),2),'00')=pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n),\nLKP_RiskLocation AS (\n\tSELECT\n\tRiskLocationAKID,\n\tRiskLocationKey\n\tFROM (\n\t\tSELECT \n\t\t\tRiskLocationAKID,\n\t\t\tRiskLocationKey\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand\r\n\t\tPolicyAKId in (\r\n\t\tselect pol_ak_id from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\twhere exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol.pol_num\r\n\t\tand ISNULL(RIGHT('00'+CONVERT(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod)\r\n\t\tand pol.crrnt_snpsht_flag=1)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey ORDER BY RiskLocationAKID) = 1\n),\nEXP_Values AS (\n\tSELECT\n\tEXP_Set_Keys.LineOfInsuranceDesc AS i_Type,\n\tEXP_Set_Keys.PolicyEffectiveDate AS i_EffectiveDate,\n\tEXP_Set_Keys.PolicyExpirationDate AS i_ExpirationDate,\n\tEXP_Set_Keys.CommissionCustomerCareAmount,\n\tLKP_Policy.pol_ak_id AS i_pol_ak_id,\n\tLKP_RiskLocation.RiskLocationAKID AS i_RiskLocationAKID,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id),-1,i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, - 1, i_pol_ak_id) AS o_Pol_AK_ID,\n\t-- *INF*: IIF(ISNULL(i_RiskLocationAKID),-1,i_RiskLocationAKID)\r\n\t-- --i_pol_ak_id||i_LocationNumber||i_Territory||i_LocationXmlId\r\n\t-- \r\n\t-- --i_Id||i_PolicyVersion||i_LocationNumber||i_Territory||i_LocationXmlId\n\tIFF(i_RiskLocationAKID IS NULL, - 1, i_RiskLocationAKID) AS o_RiskLocationAKID,\n\ti_Type AS o_Type,\n\ti_EffectiveDate AS o_EffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_ExpirationDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),i_ExpirationDate)\n\tIFF(i_ExpirationDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), i_ExpirationDate) AS o_ExpirationDate,\n\t'0' AS o_AuditableIndicator,\n\t'N/A' AS o_RiskGradeCode,\n\ti_LineOfBusiness AS o_PriorInsuranceLine,\n\t'Guaranteed Cost' AS o_RatingPlanDescription,\n\t-1 AS PolicyLimitAKId,\n\t-1 AS PriorCoverageId,\n\t-1 AS InterstateRiskID\n\tFROM EXP_Set_Keys\n\tLEFT JOIN LKP_Policy\n\tON LKP_Policy.pol_key = EXP_Set_Keys.o_PolicyKey\n\tLEFT JOIN LKP_RiskLocation\n\tON LKP_RiskLocation.RiskLocationKey = EXP_Set_Keys.o_RiskLocationKey\n),\nLKP_RatingPlan AS (\n\tSELECT\n\tRatingPlanAKId,\n\tRatingPlanDescription\n\tFROM (\n\t\tSELECT \n\t\t\tRatingPlanAKId,\n\t\t\tRatingPlanDescription\n\t\tFROM RatingPlan\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RatingPlanDescription ORDER BY RatingPlanAKId) = 1\n),\nLKP_sup_insurance_line AS (\n\tSELECT\n\tsup_ins_line_id,\n\tins_line_descript\n\tFROM (\n\t\tSELECT \n\t\t\tsup_ins_line_id,\n\t\t\tins_line_descript\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_insurance_line\n\t\tWHERE crrnt_snpsht_flag='1' and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ins_line_descript ORDER BY sup_ins_line_id) = 1\n),\nEXP_MD5 AS (\n\tSELECT\n\tEXP_Values.o_RiskLocationAKID AS i_RiskLocationAKID,\n\tEXP_Values.o_Pol_AK_ID AS i_pol_ak_id,\n\tLKP_sup_insurance_line.sup_ins_line_id AS i_sup_ins_line_id,\n\tEXP_Values.o_Type AS i_Type,\n\tEXP_Values.o_EffectiveDate AS i_EffectiveDate,\n\tEXP_Values.o_ExpirationDate AS i_ExpirationDate,\n\tEXP_Values.InterstateRiskID AS i_InterstateRiskID,\n\tEXP_Values.o_AuditableIndicator AS AuditableIndicator,\n\tEXP_Values.o_RiskGradeCode AS RiskGradeCode,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id),ERROR('Pol_ak_id can not be blank!'),i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, ERROR('Pol_ak_id can not be blank!'), i_pol_ak_id) AS v_pol_ak_id,\n\t-- *INF*: IIF(ISNULL(i_RiskLocationAKID),ERROR('RiskLocationAKID can not be blank!'),i_RiskLocationAKID)\n\tIFF(i_RiskLocationAKID IS NULL, ERROR('RiskLocationAKID can not be blank!'), i_RiskLocationAKID) AS v_RiskLocationAKID,\n\t-- *INF*: TO_CHAR(i_pol_ak_id)||'~'||TO_CHAR(i_RiskLocationAKID)\r\n\t-- \r\n\t-- --- Change ID and version with Pol_ak_id for UID Project\n\tTO_CHAR(i_pol_ak_id) || '~' || TO_CHAR(i_RiskLocationAKID) AS v_PolicyCoverageKey,\n\t-- *INF*: MD5(TO_CHAR(v_pol_ak_id)||TO_CHAR(v_RiskLocationAKID)||i_Type||TO_CHAR(i_EffectiveDate))\n\tMD5(TO_CHAR(v_pol_ak_id) || TO_CHAR(v_RiskLocationAKID) || i_Type || TO_CHAR(i_EffectiveDate)) AS o_PolicyCoverageHashKey,\n\tv_pol_ak_id AS o_PolicyAKID,\n\tv_RiskLocationAKID AS o_RiskLocationAKID,\n\t-- *INF*: IIF(ISNULL(v_PolicyCoverageKey),'N/A',v_PolicyCoverageKey)\n\tIFF(v_PolicyCoverageKey IS NULL, 'N/A', v_PolicyCoverageKey) AS o_PolicyCoverageKey,\n\ti_Type AS o_InsuranceLine,\n\ti_Type AS o_TypeBureauCode,\n\ti_EffectiveDate AS o_PolicyCoverageEffectiveDate,\n\ti_ExpirationDate AS o_PolicyCoverageExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_sup_ins_line_id),-1,i_sup_ins_line_id)\n\tIFF(i_sup_ins_line_id IS NULL, - 1, i_sup_ins_line_id) AS o_sup_ins_line_id,\n\t-- *INF*: -1\r\n\t-- --IIF(ISNULL(i_sup_type_bureau_code_id),---1,i_sup_type_bureau_code_id)\n\t- 1 AS o_sup_type_bureau_code_id,\n\t-- *INF*: IIF(ISNULL(i_InterstateRiskID),'N/A',TO_CHAR(i_InterstateRiskID))\n\tIFF(i_InterstateRiskID IS NULL, 'N/A', TO_CHAR(i_InterstateRiskID)) AS o_InterstateRiskId,\n\tEXP_Values.PolicyLimitAKId,\n\tEXP_Values.PriorCoverageId,\n\tEXP_Values.CommissionCustomerCareAmount,\n\tLKP_RatingPlan.RatingPlanAKId\n\tFROM EXP_Values\n\tLEFT JOIN LKP_RatingPlan\n\tON LKP_RatingPlan.RatingPlanDescription = EXP_Values.o_RatingPlanDescription\n\tLEFT JOIN LKP_sup_insurance_line\n\tON LKP_sup_insurance_line.ins_line_descript = EXP_Values.o_Type\n),\nLKP_PolicyCoverage AS (\n\tSELECT\n\tPolicyCoverageAKID,\n\tPolicyCoverageExpirationDate,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tCustomerCareCommissionRate,\n\tRatingPlanAkId,\n\tPolicyCoverageHashKey\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyCoverageAKID,\n\t\t\tPolicyCoverageExpirationDate,\n\t\t\tAuditableIndicator,\n\t\t\tRiskGradeCode,\n\t\t\tInterstateRiskId,\n\t\t\tPolicyLimitAKId,\n\t\t\tPriorCoverageId,\n\t\t\tCustomerCareCommissionRate,\n\t\t\tRatingPlanAkId,\n\t\t\tPolicyCoverageHashKey\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t\tWHERE CurrentSnapshotFlag='1' and SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand\r\n\t\tPolicyAKId in (\r\n\t\tselect pol_ak_id from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\twhere exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPLPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol.pol_num\r\n\t\tand ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod)\r\n\t\tand pol.crrnt_snpsht_flag=1)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageHashKey ORDER BY PolicyCoverageAKID) = 1\n),\nEXP_DetectChange AS (\n\tSELECT\n\tLKP_PolicyCoverage.PolicyCoverageAKID AS i_PolicyCoverageAKID,\n\tLKP_PolicyCoverage.PolicyCoverageExpirationDate AS i_PolicyCoverageExpirationDate,\n\tLKP_PolicyCoverage.AuditableIndicator AS i_AuditableIndicator,\n\tLKP_PolicyCoverage.RiskGradeCode AS i_RiskGradeCode,\n\tLKP_PolicyCoverage.InterstateRiskId AS i_InterstateRiskId,\n\tLKP_PolicyCoverage.PolicyLimitAKId AS i_PolicyLimitAKId,\n\tLKP_PolicyCoverage.PriorCoverageId AS i_PriorCoverageId,\n\tLKP_PolicyCoverage.CustomerCareCommissionRate AS i_CustomerCareCommissionRate,\n\tLKP_PolicyCoverage.RatingPlanAkId AS i_RatingPlanAkId,\n\t-- *INF*: DECODE(i_AuditableIndicator,'T', '1', 'F','0', NULL)\n\tDECODE(i_AuditableIndicator,\n\t'T', '1',\n\t'F', '0',\n\tNULL) AS v_LKP_AuditableIndicator,\n\tEXP_MD5.AuditableIndicator,\n\tEXP_MD5.RiskGradeCode,\n\tEXP_MD5.o_PolicyCoverageHashKey AS PolicyCoverageHashKey,\n\tEXP_MD5.o_PolicyAKID AS PolicyAKID,\n\tEXP_MD5.o_RiskLocationAKID AS RiskLocationAKID,\n\tEXP_MD5.o_PolicyCoverageKey AS PolicyCoverageKey,\n\tEXP_MD5.o_InsuranceLine AS InsuranceLine,\n\tEXP_MD5.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_MD5.o_PolicyCoverageEffectiveDate AS PolicyCoverageEffectiveDate,\n\tEXP_MD5.o_PolicyCoverageExpirationDate AS PolicyCoverageExpirationDate,\n\tEXP_MD5.o_sup_ins_line_id AS sup_ins_line_id,\n\tEXP_MD5.o_sup_type_bureau_code_id AS sup_type_bureau_code_id,\n\tEXP_MD5.CommissionCustomerCareAmount,\n\tEXP_MD5.o_InterstateRiskId AS InterstateRiskId,\n\tEXP_MD5.PolicyLimitAKId,\n\tEXP_MD5.PriorCoverageId,\n\tEXP_MD5.RatingPlanAKId,\n\t-- *INF*: IIF(ISNULL(i_PolicyCoverageAKID), 'NEW', IIF(i_PolicyCoverageExpirationDate<>PolicyCoverageExpirationDate OR v_LKP_AuditableIndicator<>AuditableIndicator OR i_RiskGradeCode<>RiskGradeCode OR i_InterstateRiskId<>InterstateRiskId OR i_PolicyLimitAKId<>PolicyLimitAKId OR i_PriorCoverageId<>PriorCoverageId OR ISNULL(i_CustomerCareCommissionRate) OR i_CustomerCareCommissionRate<>CommissionCustomerCareAmount OR i_RatingPlanAkId <> RatingPlanAKId,\r\n\t-- 'UPDATE', 'NOCHANGE'))\n\tIFF(i_PolicyCoverageAKID IS NULL, 'NEW', IFF(i_PolicyCoverageExpirationDate <> PolicyCoverageExpirationDate OR v_LKP_AuditableIndicator <> AuditableIndicator OR i_RiskGradeCode <> RiskGradeCode OR i_InterstateRiskId <> InterstateRiskId OR i_PolicyLimitAKId <> PolicyLimitAKId OR i_PriorCoverageId <> PriorCoverageId OR i_CustomerCareCommissionRate IS NULL OR i_CustomerCareCommissionRate <> CommissionCustomerCareAmount OR i_RatingPlanAkId <> RatingPlanAKId, 'UPDATE', 'NOCHANGE')) AS o_ChangeFlag\n\tFROM EXP_MD5\n\tLEFT JOIN LKP_PolicyCoverage\n\tON LKP_PolicyCoverage.PolicyCoverageHashKey = EXP_MD5.o_PolicyCoverageHashKey\n),\nFIL_InsertNewRows AS (\n\tSELECT\n\ti_PolicyCoverageAKID, \n\tAuditableIndicator, \n\tRiskGradeCode, \n\tPolicyCoverageHashKey, \n\tPolicyAKID, \n\tRiskLocationAKID, \n\tPolicyCoverageKey, \n\tInsuranceLine, \n\tTypeBureauCode, \n\tPolicyCoverageEffectiveDate, \n\tPolicyCoverageExpirationDate, \n\tsup_ins_line_id, \n\tsup_type_bureau_code_id, \n\to_ChangeFlag AS ChangeFlag, \n\tInterstateRiskId, \n\tPolicyLimitAKId, \n\tPriorCoverageId, \n\tCommissionCustomerCareAmount, \n\tRatingPlanAKId\n\tFROM EXP_DetectChange\n\tWHERE ChangeFlag='NEW'  OR ChangeFlag='UPDATE'\n),\nSEQ_PolicyCoverageAKID AS (\n\tCREATE SEQUENCE SEQ_PolicyCoverageAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_AKandMetaData AS (\n\tSELECT\n\ti_PolicyCoverageAKID,\n\tAuditableIndicator AS i_AuditableIndicator,\n\tRiskGradeCode AS i_RiskGradeCode,\n\tPolicyCoverageHashKey AS i_PolicyCoverageHashKey,\n\tPolicyAKID AS i_PolicyAKID,\n\tRiskLocationAKID AS i_RiskLocationAKID,\n\tPolicyCoverageKey AS i_PolicyCoverageKey,\n\tInsuranceLine AS i_InsuranceLine,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tPolicyCoverageEffectiveDate AS i_PolicyCoverageEffectiveDate,\n\tPolicyCoverageExpirationDate AS i_PolicyCoverageExpirationDate,\n\tsup_ins_line_id AS i_sup_ins_line_id,\n\tsup_type_bureau_code_id AS i_sup_type_bureau_code_id,\n\tChangeFlag AS i_ChangeFlag,\n\tSEQ_PolicyCoverageAKID.NEXTVAL,\n\t1 AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: IIF(i_ChangeFlag='NEW', TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE)\n\tIFF(i_ChangeFlag = 'NEW', TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreateDate,\n\tSYSDATE AS o_ModifiedDate,\n\t0 AS o_LogicalIndicator,\n\ti_PolicyCoverageHashKey AS o_PolicyCoverageHashKey,\n\t-- *INF*: IIF(ISNULL(i_PolicyCoverageAKID),NEXTVAL, i_PolicyCoverageAKID)\n\tIFF(i_PolicyCoverageAKID IS NULL, NEXTVAL, i_PolicyCoverageAKID) AS o_PolicyCoverageAKID,\n\ti_PolicyAKID AS o_PolicyAKID,\n\ti_RiskLocationAKID AS o_RiskLocationAKID,\n\ti_PolicyCoverageKey AS o_PolicyCoverageKey,\n\ti_InsuranceLine AS o_InsuranceLine,\n\ti_TypeBureauCode AS o_TypeBureauCode,\n\ti_PolicyCoverageEffectiveDate AS o_PolicyCoverageEffectiveDate,\n\ti_PolicyCoverageExpirationDate AS o_PolicyCoverageExpirationDate,\n\ti_sup_ins_line_id AS o_sup_ins_line_id,\n\ti_sup_type_bureau_code_id AS o_sup_type_bureau_code_id,\n\ti_AuditableIndicator AS o_AuditableIndicator,\n\ti_RiskGradeCode AS o_RiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tCommissionCustomerCareAmount,\n\tRatingPlanAKId\n\tFROM FIL_InsertNewRows\n),\nTGT_PolicyCoverage_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, PolicyCoverageHashKey, PolicyCoverageAKID, PolicyAKID, RiskLocationAKID, PolicyCoverageKey, InsuranceLine, TypeBureauCode, PolicyCoverageEffectiveDate, PolicyCoverageExpirationDate, SupInsuranceLineId, SupTypeBureauCodeId, RatingPlanAKId, AuditableIndicator, RiskGradeCode, InterstateRiskId, PolicyLimitAKId, PriorCoverageId, CustomerCareCommissionRate)\n\tSELECT \n\to_CurrentSnapshotFlag AS CURRENTSNAPSHOTFLAG, \n\to_AuditID AS AUDITID, \n\to_EffectiveDate AS EFFECTIVEDATE, \n\to_ExpirationDate AS EXPIRATIONDATE, \n\to_SourceSystemID AS SOURCESYSTEMID, \n\to_CreateDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_LogicalIndicator AS LOGICALINDICATOR, \n\to_PolicyCoverageHashKey AS POLICYCOVERAGEHASHKEY, \n\to_PolicyCoverageAKID AS POLICYCOVERAGEAKID, \n\to_PolicyAKID AS POLICYAKID, \n\to_RiskLocationAKID AS RISKLOCATIONAKID, \n\to_PolicyCoverageKey AS POLICYCOVERAGEKEY, \n\to_InsuranceLine AS INSURANCELINE, \n\to_TypeBureauCode AS TYPEBUREAUCODE, \n\to_PolicyCoverageEffectiveDate AS POLICYCOVERAGEEFFECTIVEDATE, \n\to_PolicyCoverageExpirationDate AS POLICYCOVERAGEEXPIRATIONDATE, \n\to_sup_ins_line_id AS SUPINSURANCELINEID, \n\to_sup_type_bureau_code_id AS SUPTYPEBUREAUCODEID, \n\tRATINGPLANAKID, \n\to_AuditableIndicator AS AUDITABLEINDICATOR, \n\to_RiskGradeCode AS RISKGRADECODE, \n\tINTERSTATERISKID, \n\tPOLICYLIMITAKID, \n\tPRIORCOVERAGEID, \n\tCommissionCustomerCareAmount AS CUSTOMERCARECOMMISSIONRATE\n\tFROM EXP_AKandMetaData\n),\nSQ_PolicyCoverage AS (\n\tSELECT \r\n\t\tPolicyCoverageID,\r\n\t\tEffectiveDate,\r\n\t\tExpirationDate,\r\n\t\tPolicyCoverageAKID \r\n\tFROM\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage a\r\n\tWHERE  exists \r\n\t\t   (SELECT 1 FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage b\r\n\t           WHERE CurrentSnapshotFlag = 1 AND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND a.PolicyCoverageAKID=b.PolicyCoverageAKID GROUP BY PolicyCoverageAKID  HAVING count(*) > 1)\r\n\tAND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and CurrentSnapshotFlag=1\r\n\tORDER BY PolicyCoverageAKID , EffectiveDate  DESC\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tEffectiveDate AS i_eff_from_date,\n\tPolicyCoverageAKID AS i_PolicyCoverageAKID,\n\tExpirationDate AS orig_eff_to_date,\n\tPolicyCoverageID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_PolicyCoverageAKID = v_prev_cust_ak_id  ,\r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\ti_PolicyCoverageAKID = v_prev_cust_ak_id, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\ti_PolicyCoverageAKID AS v_prev_cust_ak_id,\n\ti_eff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tv_eff_to_date AS eff_to_date,\n\tSYSDATE AS modified_date\n\tFROM SQ_PolicyCoverage\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\torig_eff_to_date AS i_orig_eff_to_date, \n\tPolicyCoverageID, \n\tcrrnt_snpsht_flag, \n\teff_to_date, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE i_orig_eff_to_date != eff_to_date\n),\nUPD_PolicyCoverage AS (\n\tSELECT\n\tPolicyCoverageID, \n\tcrrnt_snpsht_flag AS CurrentSnapshotFlag, \n\teff_to_date AS ExpirationDate, \n\tmodified_date AS ModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nTGT_PolicyCoverage_Update AS (\n\tMERGE INTO PolicyCoverage AS T\n\tUSING UPD_PolicyCoverage AS S\n\tON T.PolicyCoverageID = S.PolicyCoverageID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905512"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604106"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:12:09"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:29:57"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}