{
    "name": "s_m_QTE_DW_Load_QuoteTransaction_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_QTE_DW_Load_QuoteTransaction_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_DCTWorkTables AS (\n\tSELECT\n\t\tWorkDCTCoverageTransaction.CoverageGUID,\n\t\tWorkDCTPolicy.PolicyGUId,\n\t\tWorkDCTPolicy.QuoteActionTimeStamp,\n\t\tWorkDCTPolicy.SessionId,\n\t\tWorkDCTPolicy.Division,\n\t\tWorkDCTPolicy.WBProduct,\n\t\tWorkDCTPolicy.WBProductType,\n\t\tWorkDCTInsuranceLine.LineType,\n\t\tWorkDCTInsuranceLine.RiskGrade,\n\t\tWorkDCTCoverageTransaction.Written,\n\t\tWorkDCTTransactionInsuranceLineLocationBridge.LineId\n\tFROM WorkDCTPolicy\n\tINNER JOIN WorkDCTTransactionInsuranceLineLocationBridge\n\tINNER JOIN WorkDCTCoverageTransaction\n\tINNER JOIN WorkDCTInsuranceLine\n\tON WorkDCTPolicy.PolicyId=WorkDCTInsuranceLine.PolicyId\r\n\tand\r\n\tWorkDCTPolicy.QuoteActionTimeStamp is not null\r\n\tand\r\n\tWorkDCTInsuranceLine.LineId=WorkDCTTransactionInsuranceLineLocationBridge.LineId\r\n\tand\r\n\tWorkDCTTransactionInsuranceLineLocationBridge.CoverageId=WorkDCTCoverageTransaction.CoverageId\r\n\tand\r\n\tWorkDCTCoverageTransaction.CoverageGUId is not null\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nAGG_RemoveDuplicates AS (\n\tSELECT\n\tCoverageGUID AS i_CoverageGUID,\n\tPolicyGUId AS QuoteKey,\n\tQuoteActionTimeStamp AS StatusDate,\n\tSessionId AS i_SessionId,\n\tDivision,\n\tWBProduct,\n\tWBProductType,\n\tLineType AS LType,\n\tRiskGrade,\n\tWritten\n\tFROM SQ_DCTWorkTables\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY i_CoverageGUID, QuoteKey, StatusDate ORDER BY NULL) = 1\n),\nEXP_GetValues AS (\n\tSELECT\n\tQuoteKey AS i_QuoteKey,\n\tStatusDate AS i_StatusDate,\n\tDivision AS i_Division,\n\tWBProduct AS i_WBProduct,\n\tWBProductType AS i_WBProductType,\n\tLType AS i_LType,\n\tRiskGrade AS i_RiskGrade,\n\tWritten AS i_Written,\n\t-- *INF*: LTRIM(RTRIM(i_QuoteKey))\n\tLTRIM(RTRIM(i_QuoteKey\n\t\t)\n\t) AS o_QuoteKey,\n\ti_StatusDate AS o_StatusDate,\n\t-- *INF*: IIF(ISNULL(i_Division) OR IS_SPACES(i_Division) OR LENGTH(i_Division)=0, 'N/A', LTRIM(RTRIM(i_Division)))\n\tIFF(i_Division IS NULL \n\t\tOR LENGTH(i_Division)>0 AND TRIM(i_Division)='' \n\t\tOR LENGTH(i_Division\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(i_Division\n\t\t\t)\n\t\t)\n\t) AS o_Division,\n\t-- *INF*: IIF(ISNULL(i_WBProduct) OR IS_SPACES(i_WBProduct) OR LENGTH(i_WBProduct)=0, 'N/A', LTRIM(RTRIM(i_WBProduct)))\n\tIFF(i_WBProduct IS NULL \n\t\tOR LENGTH(i_WBProduct)>0 AND TRIM(i_WBProduct)='' \n\t\tOR LENGTH(i_WBProduct\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(i_WBProduct\n\t\t\t)\n\t\t)\n\t) AS o_WBProduct,\n\t-- *INF*: IIF(ISNULL(i_WBProductType) OR IS_SPACES(i_WBProductType) OR LENGTH(i_WBProductType)=0, 'N/A', LTRIM(RTRIM(i_WBProductType)))\n\tIFF(i_WBProductType IS NULL \n\t\tOR LENGTH(i_WBProductType)>0 AND TRIM(i_WBProductType)='' \n\t\tOR LENGTH(i_WBProductType\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(i_WBProductType\n\t\t\t)\n\t\t)\n\t) AS o_WBProductType,\n\t-- *INF*: IIF(ISNULL(i_LType) OR IS_SPACES(i_LType) OR LENGTH(i_LType)=0, 'N/A', LTRIM(RTRIM(i_LType)))\n\tIFF(i_LType IS NULL \n\t\tOR LENGTH(i_LType)>0 AND TRIM(i_LType)='' \n\t\tOR LENGTH(i_LType\n\t\t) = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(i_LType\n\t\t\t)\n\t\t)\n\t) AS o_LType,\n\t-- *INF*: IIF(ISNULL(i_Written),0,i_Written)\n\tIFF(i_Written IS NULL,\n\t\t0,\n\t\ti_Written\n\t) AS o_WrittenPremium,\n\t-- *INF*: IIF(ISNULL(i_RiskGrade) OR IS_SPACES(i_RiskGrade) OR LENGTH(i_RiskGrade)=0 OR IS_NUMBER(i_RiskGrade)=0, 'N/A', LTRIM(RTRIM(i_RiskGrade)))\r\n\t-- \n\tIFF(i_RiskGrade IS NULL \n\t\tOR LENGTH(i_RiskGrade)>0 AND TRIM(i_RiskGrade)='' \n\t\tOR LENGTH(i_RiskGrade\n\t\t) = 0 \n\t\tOR REGEXP_LIKE(i_RiskGrade, '^[0-9]+$') = 0,\n\t\t'N/A',\n\t\tLTRIM(RTRIM(i_RiskGrade\n\t\t\t)\n\t\t)\n\t) AS o_RiskGrade\n\tFROM AGG_RemoveDuplicates\n),\nLKP_SupDCTPolicyOfferingLineOfBusinessProductRules AS (\n\tSELECT\n\tInsuranceReferenceLineOfBusinessCode,\n\tProductCode,\n\tDCTPolicyDivision,\n\tDCTProductCode,\n\tDCTProductType,\n\tDCTLineOfBusinessCode\n\tFROM (\n\t\tSELECT \n\t\t\tInsuranceReferenceLineOfBusinessCode,\n\t\t\tProductCode,\n\t\t\tDCTPolicyDivision,\n\t\t\tDCTProductCode,\n\t\t\tDCTProductType,\n\t\t\tDCTLineOfBusinessCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupDCTPolicyOfferingLineOfBusinessProductRules\n\t\tWHERE Getdate() between EffectiveDate and ExpirationDate\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY DCTPolicyDivision,DCTProductCode,DCTProductType,DCTLineOfBusinessCode ORDER BY InsuranceReferenceLineOfBusinessCode) = 1\n),\nLKP_InsuranceReferenceLineOfBusiness AS (\n\tSELECT\n\tInsuranceReferenceLineOfBusinessAKId,\n\tInsuranceReferenceLineOfBusinessCode\n\tFROM (\n\t\tSELECT \n\t\t\tInsuranceReferenceLineOfBusinessAKId,\n\t\t\tInsuranceReferenceLineOfBusinessCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.InsuranceReferenceLineOfBusiness\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY InsuranceReferenceLineOfBusinessCode ORDER BY InsuranceReferenceLineOfBusinessAKId) = 1\n),\nLKP_Product AS (\n\tSELECT\n\tProductAKId,\n\tProductCode\n\tFROM (\n\t\tSELECT \n\t\t\tProductAKId,\n\t\t\tProductCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.Product\n\t\tWHERE CurrentSnapshotFlag=1 and getdate() between EffectiveDate and ExpirationDate\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ProductCode ORDER BY ProductAKId) = 1\n),\nLKP_Quote AS (\n\tSELECT\n\tQuoteAKId,\n\tStatusDate,\n\tQuoteKey\n\tFROM (\n\t\tSelect \r\n\t\tb.QuoteAKId as QuoteAKId,\r\n\t\tb.QuoteKey as QuoteKey,\r\n\t\tb.StatusDate as StatusDate\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.Quote b\r\n\t\twhere b.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand exists (select 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy w\r\n\t\twhere w.PolicyGUId=b.QuoteKey)\r\n\t\torder by b.StatusDate,b.QuoteKey\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StatusDate,QuoteKey ORDER BY QuoteAKId) = 1\n),\nEXP_NewFlag AS (\n\tSELECT\n\tLKP_Quote.QuoteAKId AS i_QuoteAKId,\n\tLKP_Product.ProductAKId AS i_ProductAKId,\n\tLKP_InsuranceReferenceLineOfBusiness.InsuranceReferenceLineOfBusinessAKId AS i_InsuranceReferenceLineOfBusinessAKId,\n\tEXP_GetValues.o_StatusDate AS StatusDate,\n\tEXP_GetValues.o_WrittenPremium AS WrittenPremium,\n\tEXP_GetValues.o_RiskGrade AS RiskGrade,\n\t-- *INF*: IIF(ISNULL(i_ProductAKId),-1,i_ProductAKId)\n\tIFF(i_ProductAKId IS NULL,\n\t\t- 1,\n\t\ti_ProductAKId\n\t) AS v_ProductAKId,\n\t-- *INF*: IIF(ISNULL(i_InsuranceReferenceLineOfBusinessAKId),-1,i_InsuranceReferenceLineOfBusinessAKId)\n\tIFF(i_InsuranceReferenceLineOfBusinessAKId IS NULL,\n\t\t- 1,\n\t\ti_InsuranceReferenceLineOfBusinessAKId\n\t) AS v_InsuranceReferenceLineOfBusinessAKId,\n\t-- *INF*: IIF(ISNULL(i_QuoteAKId),-1,i_QuoteAKId)\n\tIFF(i_QuoteAKId IS NULL,\n\t\t- 1,\n\t\ti_QuoteAKId\n\t) AS o_QuoteAKId,\n\tv_ProductAKId AS o_ProductAKId,\n\tv_InsuranceReferenceLineOfBusinessAKId AS o_InsuranceReferenceLineOfBusinessAKId\n\tFROM EXP_GetValues\n\tLEFT JOIN LKP_InsuranceReferenceLineOfBusiness\n\tON LKP_InsuranceReferenceLineOfBusiness.InsuranceReferenceLineOfBusinessCode = LKP_SupDCTPolicyOfferingLineOfBusinessProductRules.InsuranceReferenceLineOfBusinessCode\n\tLEFT JOIN LKP_Product\n\tON LKP_Product.ProductCode = LKP_SupDCTPolicyOfferingLineOfBusinessProductRules.ProductCode\n\tLEFT JOIN LKP_Quote\n\tON LKP_Quote.StatusDate = EXP_GetValues.o_StatusDate AND LKP_Quote.QuoteKey = EXP_GetValues.o_QuoteKey\n),\nAGG_SumPremium AS (\n\tSELECT\n\tWrittenPremium AS i_WrittenPremium,\n\t-- *INF*: SUM(i_WrittenPremium)\n\tSUM(i_WrittenPremium\n\t) AS WrittenPremium,\n\to_QuoteAKId AS QuoteAKId,\n\tStatusDate,\n\to_ProductAKId AS ProductAKId,\n\to_InsuranceReferenceLineOfBusinessAKId AS InsuranceReferenceLineOfBusinessAKId,\n\tRiskGrade\n\tFROM EXP_NewFlag\n\tGROUP BY QuoteAKId, StatusDate, ProductAKId, InsuranceReferenceLineOfBusinessAKId, RiskGrade\n),\nLKP_QuoteTransaction AS (\n\tSELECT\n\tQuoteTransactionID,\n\tStatusDate,\n\tQuoteAKId,\n\tProductAKId,\n\tInsuranceReferenceLineOfBusinessAKId,\n\tRiskGradeCode\n\tFROM (\n\t\tSelect  \r\n\t\ta.QuoteTransactionID as QuoteTransactionID,\r\n\t\ta.QuoteAKId as QuoteAKId,\r\n\t\ta.StatusDate as StatusDate,\r\n\t\ta.ProductAKId as ProductAKId,\r\n\t\ta.InsuranceReferenceLineOfBusinessAKId as InsuranceReferenceLineOfBusinessAKId,\r\n\t\ta.RiskGradeCode as RiskGradeCode\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.QuoteTransaction a\r\n\t\tjoin\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.Quote c\r\n\t\ton\r\n\t\tc.QuoteAKId=a.QuoteAKId\r\n\t\tand c.StatusDate=a.StatusDate\r\n\t\twhere a.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy w\r\n\t\twhere w.PolicyGUId=c.QuoteKey)\r\n\t\torder by a.StatusDate,a.QuoteAKId,a.ProductAKId,a.InsuranceReferenceLineOfBusinessAKId,a.RiskGradeCode\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StatusDate,QuoteAKId,ProductAKId,InsuranceReferenceLineOfBusinessAKId,RiskGradeCode ORDER BY QuoteTransactionID) = 1\n),\nFIL_NewFlag AS (\n\tSELECT\n\tLKP_QuoteTransaction.QuoteTransactionID, \n\tAGG_SumPremium.WrittenPremium, \n\tAGG_SumPremium.RiskGrade, \n\tAGG_SumPremium.QuoteAKId, \n\tAGG_SumPremium.StatusDate, \n\tAGG_SumPremium.ProductAKId, \n\tAGG_SumPremium.InsuranceReferenceLineOfBusinessAKId\n\tFROM AGG_SumPremium\n\tLEFT JOIN LKP_QuoteTransaction\n\tON LKP_QuoteTransaction.StatusDate = AGG_SumPremium.StatusDate AND LKP_QuoteTransaction.QuoteAKId = AGG_SumPremium.QuoteAKId AND LKP_QuoteTransaction.ProductAKId = AGG_SumPremium.ProductAKId AND LKP_QuoteTransaction.InsuranceReferenceLineOfBusinessAKId = AGG_SumPremium.InsuranceReferenceLineOfBusinessAKId AND LKP_QuoteTransaction.RiskGradeCode = AGG_SumPremium.RiskGrade\n\tWHERE ISNULL(QuoteTransactionID)\n),\nLKP_QuoteTransactionAKId AS (\n\tSELECT\n\tQuoteTransactionAKID,\n\tQuoteAKId,\n\tProductAKId,\n\tInsuranceReferenceLineOfBusinessAKId\n\tFROM (\n\t\tSelect  \r\n\t\ta.QuoteTransactionAKID as QuoteTransactionAKID,\r\n\t\ta.QuoteAKId as QuoteAKId,\r\n\t\ta.ProductAKId as ProductAKId,\r\n\t\ta.InsuranceReferenceLineOfBusinessAKId as InsuranceReferenceLineOfBusinessAKId\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.QuoteTransaction a\r\n\t\tjoin\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.Quote c\r\n\t\ton\r\n\t\tc.QuoteAKId=a.QuoteAKId\r\n\t\tand c.CurrentSnapshotFlag=1\r\n\t\twhere a.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy w\r\n\t\twhere w.PolicyGUId=c.QuoteKey)\r\n\t\torder by a.QuoteAKId,a.StatusDate,a.ProductAKId,a.InsuranceReferenceLineOfBusinessAKId\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY QuoteAKId,ProductAKId,InsuranceReferenceLineOfBusinessAKId ORDER BY QuoteTransactionAKID) = 1\n),\nSEQ_QuoteTransactionAKId AS (\n\tCREATE SEQUENCE SEQ_QuoteTransactionAKId\n\tSTART = 1\n\tINCREMENT = 1;\n),\nEXP_GetSupportIds AS (\n\tSELECT\n\tSEQ_QuoteTransactionAKId.NEXTVAL AS i_NEXTVAL,\n\tLKP_QuoteTransactionAKId.QuoteTransactionAKID AS i_QuoteTransactionAKID,\n\tFIL_NewFlag.WrittenPremium AS i_WrittenPremium,\n\tFIL_NewFlag.RiskGrade AS i_RiskGrade,\n\tFIL_NewFlag.QuoteAKId AS i_QuoteAKId,\n\tFIL_NewFlag.StatusDate AS i_StatusDate,\n\tFIL_NewFlag.ProductAKId AS i_ProductAKId,\n\tFIL_NewFlag.InsuranceReferenceLineOfBusinessAKId AS i_InsuranceReferenceLineOfBusinessAKId,\n\t-- *INF*: IIF(i_QuoteAKId=v_prev_QuoteAKId,v_NEXTVAL,i_NEXTVAL)\n\tIFF(i_QuoteAKId = v_prev_QuoteAKId,\n\t\tv_NEXTVAL,\n\t\ti_NEXTVAL\n\t) AS v_NEXTVAL,\n\ti_QuoteAKId AS v_prev_QuoteAKId,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\t-- *INF*: IIF(ISNULL(i_QuoteTransactionAKID),v_NEXTVAL,i_QuoteTransactionAKID)\n\tIFF(i_QuoteTransactionAKID IS NULL,\n\t\tv_NEXTVAL,\n\t\ti_QuoteTransactionAKID\n\t) AS o_QuoteTransactionAKID,\n\ti_QuoteAKId AS o_QuoteAKId,\n\ti_StatusDate AS o_StatusDate,\n\ti_WrittenPremium AS o_WrittenPremium,\n\ti_ProductAKId AS o_ProductAKId,\n\ti_InsuranceReferenceLineOfBusinessAKId AS o_InsuranceReferenceLineOfBusinessAKId,\n\ti_RiskGrade AS o_RiskGrade\n\tFROM FIL_NewFlag\n\tLEFT JOIN LKP_QuoteTransactionAKId\n\tON LKP_QuoteTransactionAKId.QuoteAKId = FIL_NewFlag.QuoteAKId AND LKP_QuoteTransactionAKId.ProductAKId = FIL_NewFlag.ProductAKId AND LKP_QuoteTransactionAKId.InsuranceReferenceLineOfBusinessAKId = FIL_NewFlag.InsuranceReferenceLineOfBusinessAKId\n),\nQuoteTransaction AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.QuoteTransaction\n\t(AuditID, SourceSystemID, CreatedDate, ModifiedDate, QuoteTransactionAKID, QuoteAKID, StatusDate, WrittenPremium, ProductAKId, InsuranceReferenceLineOfBusinessAKId, RiskGradeCode)\n\tSELECT \n\to_AuditID AS AUDITID, \n\to_SourceSystemID AS SOURCESYSTEMID, \n\to_CreatedDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_QuoteTransactionAKID AS QUOTETRANSACTIONAKID, \n\to_QuoteAKId AS QUOTEAKID, \n\to_StatusDate AS STATUSDATE, \n\to_WrittenPremium AS WRITTENPREMIUM, \n\to_ProductAKId AS PRODUCTAKID, \n\to_InsuranceReferenceLineOfBusinessAKId AS INSURANCEREFERENCELINEOFBUSINESSAKID, \n\to_RiskGrade AS RISKGRADECODE\n\tFROM EXP_GetSupportIds\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246494"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905492"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603305"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:45:05"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:49"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "WHERE_CLAUSE ": {
                "type": "string",
                "defaultValue": "and WorkDCTPolicy.QuoteActionStatus IS NOT NULL and WorkDCTPolicy.TransactionType='New'"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Quote DataWarehouse/"
        },
        "annotations": []
    }
}