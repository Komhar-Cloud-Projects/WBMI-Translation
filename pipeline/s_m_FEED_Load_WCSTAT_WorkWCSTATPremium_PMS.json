{
    "name": "s_m_FEED_Load_WCSTAT_WorkWCSTATPremium_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WCSTAT_WorkWCSTATPremium_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_PremiumTransaction_pol_ak_id AS (\n\tSELECT\n\tpol_ak_id\n\tFROM (\n\t\tSELECT DISTINCT P.pol_ak_id AS pol_ak_id\r\n\t\t   from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\t\ton SC.StatisticalCoverageAKID=PT.StatisticalCoverageAKID\r\n\t\tand SC.CurrentSnapshotFlag=1 and  PT.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\ton PC.PolicyCoverageAKID=SC.PolicyCoverageAKID\r\n\t\tand PC.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\t\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\t\tand RL.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy P\r\n\t\ton P.pol_ak_id=RL.PolicyAKID \r\n\t\tand P.crrnt_snpsht_flag=1 \r\n\t\t\r\n\t\twhere SC.SourceSystemID='PMS'  \r\n\t\tand PC.TypeBureauCode in ('WC','WP','WorkersCompensation')  and  PT.PremiumType='D'   and PT.ReasonAmendedCode != 'CWO'\r\n\t\tand DATEDIFF(MM,P.pol_eff_date, DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}, 0) )  > 18\r\n\t\tand PT.PremiumTransactionBookedDate>=DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}, 0)\r\n\t\tand PT.PremiumTransactionBookedDate<DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}+1, 0)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id ORDER BY pol_ak_id) = 1\n),\nSQ_Premium_PMS AS (\n\tDECLARE @startdate as datetime, \r\n\t        @enddate as datetime\r\n\t\r\n\tSET @startdate = DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) +@{pipeline().parameters.NUM_OF_MONTHS}+1-18, 0) \r\n\tSET @enddate =  DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}+1, 0)\r\n\t\r\n\t--PMS\r\n\tselect \r\n\t'PMS' SourceSystem\r\n\t,PremiumTransaction.PremiumTransactionID\r\n\t,PremiumTransaction.PremiumTransactionBookedDate\r\n\t,'01-01-1800 00:00:00' as StateRatingEffectiveDate\r\n\t,case when RPDT.RatingPlanCode='2' then '1' else '0' end as WCRetrospectiveRatingIndicator\r\n\t,PremiumTransaction.ExperienceModificationFactor\r\n\t,PremiumTransaction.ExperienceModificationEffectiveDate\r\n\t,PremiumTransaction.PremiumTransactionamount\r\n\t,PremiumTransaction.BaseRate\r\n\t,PolicyCoverage.TypeBureauCode\r\n\t,policy.pol_sym\r\n\t,policy.pol_num\r\n\t,policy.pol_mod\r\n\t ,policy.pol_key AS pol_key\r\n\t,'N/A' AS CoverageType\r\n\t,'N/A' AS PremiumTransactionCode\r\n\t,'N/A' AS CoverageGUID\r\n\t,  -1 AS  RatingCoverageAKID  \r\n\t  ,'1800-01-01 00:00:00.000' AS  Period_start_date\r\n\t,'1800-01-01 00:00:00.000' AS Period_end_date\r\n\t,'' AS   AnyARDIndicator\r\n\t, '' AS ExperienceRated\r\n\t,'N/A' AS TermType \r\n\t,RiskLocation.StateProvinceCode\r\n\t,policy.pol_eff_date\r\n\t,policy.pol_exp_date\r\n\t,policy.pol_cancellation_date\r\n\t,policy.pol_cancellation_ind\r\n\t,PolicyCoverage.InterstateRiskId\r\n\t,policy.pol_id\r\n\t,contract_customer.fed_tax_id\r\n\t,policy.pol_term\r\n\t,policy.pol_ak_id\r\n\t--,PolicyCoverage.AuditableIndicator\r\n\t,InsuranceSegment.InsuranceSegmentAbbreviation\r\n\t,contract_customer.cust_role\r\n\t,contract_customer.name\r\n\t,contract_customer_address.addr_line_1\r\n\t,contract_customer_address.city_name\r\n\t,contract_customer_address.state_prov_code\r\n\t,contract_customer_address.zip_postal_code\r\n\t,StatisticalCoverage.ClassCode\r\n\t,PremiumTransaction.WrittenExposure\r\n\t,PremiumTransaction.DeductibleAmount\r\n\t,PolicyCoverage.InsuranceLine\r\n\t--,SUM(PremiumTransaction.PremiumTransactionamount) OVER (PARTITION BY policy.pol_key) as PolicyPremiumTotal\r\n\t--,SUM(CASE WHEN DATALENGTH(StatisticalCoverage.ClassCode) = 6 THEN 1 ELSE 0 END)  OVER (PARTITION BY policy.pol_key,RiskLocation.StateProvinceCode) as ManualPremiumInd\r\n\t--,SUM(CASE WHEN DATALENGTH(StatisticalCoverage.ClassCode) = 6 THEN PremiumTransaction.PremiumTransactionamount ELSE 0 END) OVER (PARTITION BY policy.pol_key,RiskLocation.StateProvinceCode) as PolicyStateManualPremiumTotal\r\n\t--,SUM(CASE WHEN StatisticalCoverage.ClassCode = '0990' THEN PremiumTransaction.PremiumTransactionamount ELSE 0 END) OVER (PARTITION BY policy.pol_key,RiskLocation.StateProvinceCode) as BalMinPremiumTotal\r\n\t--, policy.pol_key as policy_pol_key\r\n\t,PremiumTransaction.ReasonAmendedCode\r\n\t,StrategicProfitCenter.StrategicProfitCenterAbbreviation\r\n\t,policy.pol_status_code\r\n\t,PremiumTransaction.PremiumTransactionEnteredDate\r\n\t,PremiumTransaction.OffsetOnsetCode\r\n\tfrom    @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage\r\n\ton StatisticalCoverage.StatisticalCoverageAKID=PremiumTransaction.StatisticalCoverageAKID\r\n\tand StatisticalCoverage.CurrentSnapshotFlag=1 and  PremiumTransaction.CurrentSnapshotFlag=1\r\n\t\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage\r\n\ton PolicyCoverage.PolicyCoverageAKID=StatisticalCoverage.PolicyCoverageAKID\r\n\tand PolicyCoverage.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation\r\n\ton PolicyCoverage.RiskLocationAKID=RiskLocation.RiskLocationAKID\r\n\tand RiskLocation.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join  @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy\r\n\ton policy.pol_ak_id=RiskLocation.PolicyAKID \r\n\tand policy.crrnt_snpsht_flag=1\r\n\t\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.StrategicProfitCenter\r\n\ton policy.StrategicProfitCenterAKId=StrategicProfitCenter.StrategicProfitCenterAKId\r\n\tand StrategicProfitCenter.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer\r\n\tON contract_customer.contract_cust_ak_id = policy.contract_cust_ak_id and contract_customer.crrnt_snpsht_flag = 1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_address\r\n\tON contract_customer_address.contract_cust_ak_id = contract_customer.contract_cust_ak_id and contract_customer_address.crrnt_snpsht_flag = 1\r\n\t\r\n\tleft join         @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment\r\n\tON InsuranceSegment.InsuranceSegmentAKId = policy.InsuranceSegmentAKId and InsuranceSegment.CurrentSnapshotFlag = 1\r\n\t\r\n\tleft join         @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingPlan RPDT\r\n\tON PolicyCoverage.RatingPlanAKId=RPDT.RatingPlanAKId and RPDT.CurrentSnapshotFlag=1\r\n\t\r\n\twhere StatisticalCoverage.SourceSystemID='PMS'  \r\n\tand PolicyCoverage.TypeBureauCode in ('WC','WP','WorkersCompensation')  and  PremiumTransaction.PremiumType='D'   and PremiumTransaction.ReasonAmendedCode != 'CWO'\r\n\tand policy.pol_eff_date<@startdate\r\n\tand PremiumTransaction.PremiumTransactionBookedDate<@enddate\r\n\t@{pipeline().parameters.PREMIUM_WHERE_CLAUSE}\n),\nEXP_identify_records_Wc_stat AS (\n\tSELECT\n\tSourceSystem,\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPremiumMasterPremium,\n\tBaseRate,\n\tTypeBureauCode,\n\tpol_sym,\n\tpol_num,\n\tpol_mod,\n\tStateProvinceCode,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tpol_cancellation_ind,\n\tInterstateRiskId,\n\tpol_id,\n\tfed_tax_id,\n\tpol_term,\n\tpol_ak_id,\n\tInsuranceSegmentAbbreviation,\n\tcust_role,\n\tname,\n\taddr_line_1,\n\tcity_name,\n\tstate_prov_code,\n\tzip_postal_code,\n\tClassCode,\n\tWrittenExposure AS Exposure,\n\tDeductibleAmount,\n\tInsuranceLine,\n\t-- *INF*: :LKP.LKP_PREMIUMTRANSACTION_POL_AK_ID(pol_ak_id)\n\tLKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id.pol_ak_id AS lkp_pol_ak_id,\n\t-- *INF*: SET_DATE_PART(ADD_TO_DATE(TRUNC(SYSDATE),'MM',@{pipeline().parameters.NUM_OF_MONTHS}),'DD',1)\n\tDATEADD(DAY,1-DATE_PART(DAY,DATEADD(MONTH,@{pipeline().parameters.NUM_OF_MONTHS},TRUNC(CURRENT_TIMESTAMP))),DATEADD(MONTH,@{pipeline().parameters.NUM_OF_MONTHS},TRUNC(CURRENT_TIMESTAMP))) AS v_ProcessRunDate,\n\t-- *INF*: SET_DATE_PART(pol_eff_date,'DD',1)\n\tDATEADD(DAY,1-DATE_PART(DAY,pol_eff_date),pol_eff_date) AS v_BeginingOfMonthForPolicyEffectiveDate,\n\t-- *INF*: LAST_DAY(pol_eff_date)\n\tLAST_DAY(pol_eff_date) AS v_EndOfMonthForPolicyEffectiveDate,\n\t-- *INF*: DATE_DIFF(v_ProcessRunDate,v_BeginingOfMonthForPolicyEffectiveDate,'MM')\n\tDATEDIFF(MONTH,v_ProcessRunDate,v_BeginingOfMonthForPolicyEffectiveDate) AS v_AgeOfPolicy,\n\t-- *INF*: IIF(v_AgeOfPolicy =18 OR NOT ISNULL(lkp_pol_ak_id),'VALID','INVALID')\r\n\t-- \r\n\t-- --IIF(v_AgeOfPolicy =18 OR (v_AgeOfPolicy > 18 and PremiumMasterRunDate>= v_ProcessRunDate),'VALID','INVALID')\n\tIFF(v_AgeOfPolicy = 18 OR lkp_pol_ak_id IS NOT NULL, 'VALID', 'INVALID') AS o_ValidRecordForWCSTat,\n\t-- *INF*: IIF(DATE_DIFF(v_ProcessRunDate,PremiumMasterRunDate,'MM')=0,1,0)\n\tIFF(DATEDIFF(MONTH,v_ProcessRunDate,PremiumMasterRunDate) = 0, 1, 0) AS o_RunMonthAuditTransFlag,\n\tv_AgeOfPolicy AS o_AgeOfPolicy,\n\tReasonAmendedCode,\n\tStrategicProfitCenterAbbreviation,\n\tpol_status_code,\n\tPremiumTransactionEnteredDate,\n\tOffsetOnsetCode,\n\tpol_key,\n\tCoverageType,\n\tPremiumTransactionCode,\n\tCoverageGUID,\n\tRatingCoverageAKID,\n\tPeriod_start_date,\n\tPeriod_end_date,\n\tAnyARDIndicator,\n\tExperienceRated,\n\tTermType,\n\t-- *INF*: IIF(CoverageType='ManualPremium',Period_start_date,pol_eff_date)\r\n\t-- \r\n\t-- --DECODE(True,NOT ISNULL(Period_start_date), Period_start_date, pol_eff_date)\n\tIFF(CoverageType = 'ManualPremium', Period_start_date, pol_eff_date) AS RateEffectiveDate\n\tFROM SQ_Premium_PMS\n\tLEFT JOIN LKP_PREMIUMTRANSACTION_POL_AK_ID LKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id\n\tON LKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id.pol_ak_id = pol_ak_id\n\n),\nFIL_FIlterrecordsthatarenotvalid AS (\n\tSELECT\n\tSourceSystem, \n\tPremiumMasterCalculationID, \n\tPremiumMasterRunDate, \n\tStateRatingEffectiveDate, \n\tWCRetrospectiveRatingIndicator, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPremiumMasterPremium, \n\tBaseRate, \n\tTypeBureauCode, \n\tpol_sym, \n\tpol_num, \n\tpol_mod, \n\tStateProvinceCode, \n\tpol_eff_date, \n\tpol_exp_date, \n\tpol_cancellation_date, \n\tpol_cancellation_ind, \n\tInterstateRiskId, \n\tpol_id, \n\tfed_tax_id, \n\tpol_term, \n\tpol_ak_id, \n\tInsuranceSegmentAbbreviation, \n\tcust_role, \n\tname, \n\taddr_line_1, \n\tcity_name, \n\tstate_prov_code, \n\tzip_postal_code, \n\tClassCode, \n\tExposure, \n\tDeductibleAmount, \n\tInsuranceLine, \n\to_ValidRecordForWCSTat, \n\to_RunMonthAuditTransFlag, \n\to_AgeOfPolicy, \n\tRateEffectiveDate, \n\tReasonAmendedCode, \n\tStrategicProfitCenterAbbreviation, \n\tpol_status_code, \n\tPremiumTransactionEnteredDate, \n\tOffsetOnsetCode, \n\tpol_key, \n\tCoverageType, \n\tPremiumTransactionCode, \n\tCoverageGUID, \n\tRatingCoverageAKID, \n\tPeriod_start_date, \n\tPeriod_end_date, \n\tAnyARDIndicator, \n\tExperienceRated, \n\tTermType\n\tFROM EXP_identify_records_Wc_stat\n\tWHERE IIF(o_ValidRecordForWCSTat='VALID',TRUE,FALSE)\n),\nEXP_Target_Load AS (\n\tSELECT\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPremiumMasterPremium,\n\tBaseRate,\n\tTypeBureauCode,\n\tpol_sym,\n\tpol_num,\n\tpol_mod,\n\tStateProvinceCode,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tpol_cancellation_ind,\n\tInterstateRiskId,\n\tpol_id,\n\tfed_tax_id,\n\tpol_term,\n\tpol_ak_id,\n\tInsuranceSegmentAbbreviation,\n\tcust_role,\n\tname,\n\taddr_line_1,\n\tcity_name,\n\tstate_prov_code,\n\tzip_postal_code,\n\tClassCode,\n\tExposure,\n\tDeductibleAmount,\n\tInsuranceLine,\n\to_ValidRecordForWCSTat,\n\to_RunMonthAuditTransFlag,\n\to_AgeOfPolicy,\n\tRateEffectiveDate,\n\tSourceSystem,\n\tReasonAmendedCode,\n\tStrategicProfitCenterAbbreviation,\n\tpol_status_code,\n\tPremiumTransactionEnteredDate,\n\tOffsetOnsetCode,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tpol_key,\n\tCoverageType,\n\tPremiumTransactionCode,\n\tCoverageGUID,\n\tRatingCoverageAKID,\n\tPeriod_start_date,\n\tPeriod_end_date,\n\tAnyARDIndicator,\n\tExperienceRated,\n\tTermType,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\t0 AS o_PolicyPremiumTotal,\n\t0 AS o_ManualPremiumIndicator,\n\t0 AS o_PolicyStateManualPremiumTotal,\n\t0 AS o_BalanceMinimumPremiumTotal,\n\t-- *INF*: TO_DATE('1800-01-01', 'YYYY-MM-DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY-MM-DD') AS o_PremiumTransactionEffectiveDate,\n\t'00' AS LossesSubjectToDeductibleCode,\n\t'00' AS BasisOfDeductibleCalculationCode\n\tFROM FIL_FIlterrecordsthatarenotvalid\n),\nWorkWCSTATPremium AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO WorkWCSTATPremium\n\t(AuditId, CreatedDate, ModifiedDate, SourceSystemId, PremiumMasterCalculationID, PremiumMasterRunDate, StateRatingEffectiveDate, WCRetrospectiveRatingIndicator, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PremiumMasterPremium, BaseRate, TypeBureauCode, PolicySymbol, PolicyNumber, PolicyModulus, StateProvinceCode, PolicyEffectiveDate, PolicyExpiryDate, PolicyCancellationDate, PolicyCancellationIndicator, InterstateRiskId, FederalTaxId, PolicyTerm, PolicyAKId, InsuranceSegmentAbbreviation, CustomerRole, Name, AddressLine1, CityName, StateProvCodeContractCustomerAddress, ZipPostalCode, ClassCode, Exposure, DeductibleAmount, InsuranceLine, BalanceMinimumPremiumTotal, RateEffectiveDate, ReasonAmendedCode, StrategicProfitCenterAbbreviation, PolicyStatusCode, PremiumTransactionEnteredDate, OffsetOnsetCode, PolicyKey, CoverageType, PremiumTransactionCode, CoverageGUID, RatingCoverageAKID, RunMonthAuditTransactionFlag, AgeOfPolicy, TermType, PeriodStartDate, PeriodEndDate, AnyARDIndicator, ExperienceRated, PremiumTransactionEffectiveDate, LossesSubjectToDeductibleCode, BasisOfDeductibleCalculationCode)\n\tSELECT \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tSourceSystem AS SOURCESYSTEMID, \n\tPREMIUMMASTERCALCULATIONID, \n\tPREMIUMMASTERRUNDATE, \n\tSTATERATINGEFFECTIVEDATE, \n\tWCRETROSPECTIVERATINGINDICATOR, \n\tEXPERIENCEMODIFICATIONFACTOR, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPREMIUMMASTERPREMIUM, \n\tBASERATE, \n\tTYPEBUREAUCODE, \n\tpol_sym AS POLICYSYMBOL, \n\tpol_num AS POLICYNUMBER, \n\tpol_mod AS POLICYMODULUS, \n\tSTATEPROVINCECODE, \n\tpol_eff_date AS POLICYEFFECTIVEDATE, \n\tpol_exp_date AS POLICYEXPIRYDATE, \n\tpol_cancellation_date AS POLICYCANCELLATIONDATE, \n\tpol_cancellation_ind AS POLICYCANCELLATIONINDICATOR, \n\tINTERSTATERISKID, \n\tfed_tax_id AS FEDERALTAXID, \n\tpol_term AS POLICYTERM, \n\tpol_ak_id AS POLICYAKID, \n\tINSURANCESEGMENTABBREVIATION, \n\tcust_role AS CUSTOMERROLE, \n\tname AS NAME, \n\taddr_line_1 AS ADDRESSLINE1, \n\tcity_name AS CITYNAME, \n\tstate_prov_code AS STATEPROVCODECONTRACTCUSTOMERADDRESS, \n\tzip_postal_code AS ZIPPOSTALCODE, \n\tCLASSCODE, \n\tEXPOSURE, \n\tDEDUCTIBLEAMOUNT, \n\tINSURANCELINE, \n\to_BalanceMinimumPremiumTotal AS BALANCEMINIMUMPREMIUMTOTAL, \n\tRATEEFFECTIVEDATE, \n\tREASONAMENDEDCODE, \n\tSTRATEGICPROFITCENTERABBREVIATION, \n\tpol_status_code AS POLICYSTATUSCODE, \n\tPREMIUMTRANSACTIONENTEREDDATE, \n\tOFFSETONSETCODE, \n\tpol_key AS POLICYKEY, \n\tCOVERAGETYPE, \n\tPREMIUMTRANSACTIONCODE, \n\tCOVERAGEGUID, \n\tRATINGCOVERAGEAKID, \n\to_RunMonthAuditTransFlag AS RUNMONTHAUDITTRANSACTIONFLAG, \n\to_AgeOfPolicy AS AGEOFPOLICY, \n\tTERMTYPE, \n\tPeriod_start_date AS PERIODSTARTDATE, \n\tPeriod_end_date AS PERIODENDDATE, \n\tANYARDINDICATOR, \n\tEXPERIENCERATED, \n\to_PremiumTransactionEffectiveDate AS PREMIUMTRANSACTIONEFFECTIVEDATE, \n\tLOSSESSUBJECTTODEDUCTIBLECODE, \n\tBASISOFDEDUCTIBLECALCULATIONCODE\n\tFROM EXP_Target_Load\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NUM_OF_MONTHS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "PREMIUM_WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}