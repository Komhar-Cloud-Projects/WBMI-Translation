{
    "name": "s_m_FEED_Load_WorkISSExtract_BO",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WorkISSExtract_BO",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_CoverageLimitNonBlanket AS (\n\tSELECT\n\tNonBlanketLimit,\n\tPremiumTransactionAKID\n\tFROM (\n\t\tSELECT PMC.PremiumTransactionAKID as PremiumTransactionAKID \r\n\t\t\t,CLB.CreatedDate as CreatedDate\r\n\t\t\t,CL.CoverageLimitValue AS NonBlanketLimit\r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC WITH (NOLOCK)\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC WITH (NOLOCK) ON RC.RatingCoverageAKID = PMC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate = PMC.RatingCoverageEffectiveDate\r\n\t\t\tAND PMC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC WITH (NOLOCK) ON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge CLB WITH (NOLOCK) ON CLB.PremiumTransactionAKId = PMC.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit CL WITH (NOLOCK) ON CL.CoverageLimitID = CLB.CoverageLimitID\r\n\t\tWHERE PC.InsuranceLine = 'BusinessOwners'\r\n\t\t\tAND RC.CoverageType <> 'Blanket'\r\n\t\t\tAND DATEADD(QUARTER, 1 + DATEDIFF(QUARTER, 0, PMC.PremiumMasterRunDate), - 1) = DATEADD(QUARTER, 1 + DATEDIFF(QUARTER, 0, GETDATE()) + @{pipeline().parameters.NO_OF_QUARTERS}, - 1)\r\n\t\tORDER BY PMC.PremiumTransactionAKID\r\n\t\t\t,CLB.CreatedDate DESC --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID ORDER BY NonBlanketLimit) = 1\n),\nLKP_BLANKETCOVERAGELIMIT AS (\n\tSELECT\n\tBlanketLimit,\n\tPremiumTransactionAKID\n\tFROM (\n\t\tSELECT PMC.PremiumTransactionAKID as PremiumTransactionAKID,CONVERT(VARCHAR,SUM(CONVERT(NUMERIC,CL.CoverageLimitValue))) as BlanketLimit \r\n\t\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC WITH (NOLOCK)\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC WITH (NOLOCK) ON RC.RatingCoverageAKID = PMC.RatingCoverageAKID AND RC.EffectiveDate = PMC.RatingCoverageEffectiveDate\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC WITH (NOLOCK) ON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID AND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge CLB WITH (NOLOCK) ON CLB.PremiumTransactionAKId = PMC.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit CL WITH (NOLOCK) ON CL.CoverageLimitID = CLB.CoverageLimitID\r\n\t\tWHERE PC.InsuranceLine = 'BusinessOwners' AND RC.CoverageType = 'Blanket' AND ISNumeric(CL.CoverageLimitValue) = 1\r\n\t\t AND DATEADD(QUARTER, 1 + DATEDIFF(QUARTER, 0, PMC.PremiumMasterRunDate), - 1) = DATEADD(QUARTER, 1 + DATEDIFF(QUARTER, 0, GETDATE()) + @{pipeline().parameters.NO_OF_QUARTERS}, - 1)\r\n\t\tGROUP BY PMC.PremiumTransactionAKID\r\n\t\tORDER BY PMC.PremiumTransactionAKID--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID ORDER BY BlanketLimit) = 1\n),\nLKP_Update_ISOFireProtectionCode AS (\n\tSELECT\n\tIsoFireProtectionCode,\n\tPolicyKey\n\tFROM (\n\t\tSELECT PolicyKey AS PolicyKey, \r\n\t\tISOFireProtectionCode AS ISOFireProtectionCode\r\n\t\tFROM (\r\n\t\t\tSELECT DISTINCT POL.pol_key AS PolicyKey, \r\n\t\t\tRL.LocationUnitNumber AS LocationNumber, \r\n\t\t\tRC.SubLocationUnitNumber AS BuildingNumber, \r\n\t\t\tCDCP.ISOFireProtectionCode AS ISOFireProtectionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN RC.SubLocationUnitNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY POL.pol_key\r\n\t\t\t\tORDER BY RL.LocationUnitNumber, RC.SubLocationUnitNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber\r\n\t\t\tFROM PremiumTransaction AS PT WITH (NOLOCK)\r\n\t\t\tINNER JOIN  RatingCoverage AS RC WITH (NOLOCK)\r\n\t\t\tON PT.RatingCoverageAKID = RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate = PT.EffectiveDate \r\n\t\t\tINNER JOIN PolicyCoverage AS PC WITH (NOLOCK)\r\n\t\t\tON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN RiskLocation AS RL WITH (NOLOCK)\r\n\t\t\tON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\t\tINNER JOIN V2.policy AS POL WITH (NOLOCK)\r\n\t\t\tON POL.pol_ak_id = PC.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN PremiumMasterCalculation AS PMC WITH (NOLOCK)\r\n\t\t\tON PMC.PremiumTransactionAKID = PT.PremiumTransactionAKID\r\n\t\t\tAND PMC.CurrentSnapshotFlag = 1\r\n\t\t\tINNER JOIN CoverageDetailCommercialProperty AS CDCP WITH (NOLOCK)\r\n\t\t\tON CDCP.PremiumTransactionID = PT.PremiumTransactionID\r\n\t\t\tAND CDCP.CurrentSnapshotFlag = 1\r\n\t\t\tWHERE RC.SubLocationUnitNumber <> '000'\r\n\t\t\tAND LEN(POL.pol_key) <> 12\r\n\t\t\tAND CDCP.ISOFireProtectionCode NOT IN ('N/A', '00')\r\n\t\t) AS CorrectISOFireProtectionCode\r\n\t\tWHERE RowNumber = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY IsoFireProtectionCode) = 1\n),\nLKP_Update_ConstructionCode AS (\n\tSELECT\n\tConstructionCode,\n\tPolicyKey\n\tFROM (\n\t\tSELECT PolicyKey AS PolicyKey, \r\n\t\tConstructionCode AS ConstructionCode\r\n\t\tFROM (\r\n\t\t\tSELECT DISTINCT POL.pol_key AS PolicyKey, \r\n\t\t\tRL.LocationUnitNumber AS LocationNumber, \r\n\t\t\tRC.SubLocationUnitNumber AS BuildingNumber, \r\n\t\t\tSCC.ConstructionCode AS ConstructionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN RC.SubLocationUnitNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY POL.pol_key\r\n\t\t\t\tORDER BY RL.LocationUnitNumber, RC.SubLocationUnitNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber\r\n\t\t\tFROM PremiumTransaction AS PT WITH (NOLOCK)\r\n\t\t\tINNER JOIN  RatingCoverage AS RC WITH (NOLOCK)\r\n\t\t\tON PT.RatingCoverageAKID = RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate = PT.EffectiveDate \r\n\t\t\tINNER JOIN PolicyCoverage AS PC WITH (NOLOCK)\r\n\t\t\tON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag=1\r\n\t\t\tINNER JOIN RiskLocation AS RL WITH (NOLOCK)\r\n\t\t\tON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\t\tINNER JOIN V2.policy AS POL WITH (NOLOCK)\r\n\t\t\tON POL.pol_ak_id = PC.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN PremiumMasterCalculation AS PMC WITH (NOLOCK)\r\n\t\t\tON PMC.PremiumTransactionAKID = PT.PremiumTransactionAKID\r\n\t\t\tAND PMC.CurrentSnapshotFlag = 1\r\n\t\t\tINNER JOIN SupConstructionCode AS SCC WITH (NOLOCK)\r\n\t\t\tON PT.ConstructionCode = SCC.ConstructionCode\r\n\t\t\tAND  SCC.CurrentSnapshotFlag = 1\r\n\t\t\tWHERE RC.SubLocationUnitNumber <> '000'\r\n\t\t\tAND LEN(POL.pol_key) <> 12\r\n\t\t\tAND SCC.ConstructionCode <> 'N/A'\r\n\t\t) AS CorrectConstructionCode\r\n\t\tWHERE RowNumber = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey ORDER BY ConstructionCode) = 1\n),\nSQ_Loss AS (\n\t--DCT\r\n\tdeclare @QuarterDate as datetime\r\n\t\r\n\tset @QuarterDate=cast(DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) as date);\r\n\t\r\n\tSELECT distinct\r\n\tLMC.loss_master_calculation_id,\r\n\tLMC.loss_master_run_date,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tOCC.claim_loss_date,\r\n\tLMC.sub_line_code,\r\n\tLMC.class_code,\r\n\tCT.cause_of_loss,\r\n\tPTRR.RatingTerritoryCode as RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_key,\r\n\tOCC.claim_occurrence_num,\r\n\tCPO.claimant_num,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMC.paid_loss_amt else 0 end) as paid_loss_amt,\r\n\t(Case when LMC.financialtypecode  = 'D' and LMC.trans_kind_code = 'D' Then LMC.outstanding_amt Else 0 End) as outstanding_amt,\r\n\t'BE' pms_type_bureau_code,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tCCD.PolicySourceID,\r\n\tLTRIM(RTRIM(RC.RiskType)) AS RiskType,\r\n\t-1 as StatisticalCoverageAKID,\r\n\tRC.RatingCoverageAKID,\r\n\tPOL.pol_exp_date,\r\n\tOCC.s3p_claim_num,\r\n\tCT.claim_trans_id,\r\n\tCCD.claimant_cov_det_ak_id,\r\n\t(case when ASL.asl_code='80' then '5.1'\r\n\twhen ASL.asl_code='100' then '5.2'\r\n\telse ASL.asl_num end) asl_num,\r\n\tPC.InsuranceLine,\r\n\tPOL.pol_num,\r\n\tLMC.statistical_code1,\r\n\tISG.InsuranceSegmentCode,\r\n\tLMC.exposure,\r\n\tLTRIM(RTRIM(IRC.CoverageCode)),\r\n\t(case when LMC.financialtypecode = 'E' and LMC.trans_kind_code = 'D' then LMF.eom_unpaid_loss_adjust_exp else 0 End) as DirectALAEOutstandingER,\r\n\t(case when LMC.trans_kind_code = 'D' then  LMF.paid_exp_amt else 0 end) as DirectALAEPaidIR,\r\n\tPL.PolicyPerOccurenceLimit,\r\n\tCCD.major_peril_code MajorPerilCode,\r\n\tRL.ZipPostalCode,\r\n\tPOL.pms_pol_lob_code,\r\n\tCASE WHEN CT.trans_date<DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0) THEN LMC.loss_master_run_date ELSE CT.trans_date END AS trans_date\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton LMF.asl_dim_id=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC\r\n\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT\r\n\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\tand LMC.crrnt_snpsht_flag=1\r\n\tand CT.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD\r\n\tON CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\tAND CCD.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO\r\n\tON CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\tAND CPO.Crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC\r\n\tON CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\tAND  OCC.crrnt_snpsht_flag = 1\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim PD with(nolock)\r\n\ton LMF.pol_dim_id=PD.pol_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL with (nolock)\r\n\ton POL.pol_id=PD.edw_pol_pk_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton CCD.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand (case when LMC.trans_offset_onset_ind='O' and LMC.pms_acct_entered_date != '1800-01-01 01:00:00.000'\r\n\tthen LMC.pms_acct_entered_date\r\n\telse DATEADD(D,1,LMC.loss_master_run_date)  end) between RC.EffectiveDate and RC.ExpirationDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=LMF.InsuranceReferenceCoverageDimId\r\n\tLeft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.policyLimit PL\r\n\ton PC.PolicyAKID = Pl.PolicyAKId and PC.InsuranceLine =PL.InsuranceLine and LMC.loss_master_run_date between PL.EffectiveDate and PL.ExpirationDate\r\n\tleft join PremiumTransactionRatingRisk PTRR with (nolock) \r\n\ton PTRR.PremiumTransactionAKID=LMC.PremiumTransactionAKID\r\n\twhere PC.InsuranceLine = 'BusinessOwners'\r\n\tAND LMC.trans_kind_code='D'\r\n\tAND (DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,LMC.loss_master_run_date),-1) = @QuarterDate)\r\n\tAND (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0 or LMF.eom_unpaid_loss_adjust_exp <>0 or LMF.paid_exp_amt<>0) \r\n\tAND LMF.audit_id<>-9\r\n\t@{pipeline().parameters.WHERE_CLAUSE_2}\n),\nAGG_RemoveDuplicate AS (\n\tSELECT\n\tloss_master_calculation_id,\n\tloss_master_run_date,\n\tprim_bus_class_code,\n\tStateProvinceCode,\n\tclaim_loss_date,\n\tsub_line_code,\n\tclass_code,\n\tcause_of_loss,\n\tRiskTerritory,\n\tpol_eff_date,\n\tpol_key,\n\tclaim_occurrence_num,\n\tclaimant_num,\n\tpaid_loss_amt,\n\toutstanding_amt,\n\tpms_type_bureau_code,\n\tRiskUnitGroup,\n\tPolicySourceID,\n\tRiskType,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tpol_exp_date,\n\ts3p_claim_num,\n\tclaim_trans_id,\n\tclaim_coverage_detail_ak_id,\n\tasl_num,\n\tInsuranceLine,\n\tpol_num,\n\tstatistical_code1,\n\tInsuranceSegmentCode,\n\texposure,\n\tCoverageCode,\n\tDirectALAEOutstandingER,\n\tDirectALAEPaidIR,\n\tPolicyPerOccurenceLimit,\n\tMajorPerilCode,\n\tZipPostalCode,\n\tpms_pol_lob_code,\n\ttrans_date\n\tFROM SQ_Loss\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY loss_master_calculation_id ORDER BY NULL) = 1\n),\nLKP_ISSWorkTable_Loss AS (\n\tSELECT\n\tEDWLossMasterCalculationPKId\n\tFROM (\n\t\tSELECT \n\t\t\tEDWLossMasterCalculationPKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSBusinessOwnersExtract\n\t\tWHERE (DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,LossMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1))\r\n\t\tand EDWLossMasterCalculationPKId<>-1\r\n\t\t\r\n\t\t--YEAR(LossMasterRunDate)=YEAR(dateadd(year,@{pipeline().parameters.NO_OF_YEARS},GETDATE())) and EDWLossMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWLossMasterCalculationPKId ORDER BY EDWLossMasterCalculationPKId) = 1\n),\nEXP_Calculate_ClaimNumber AS (\n\tSELECT\n\tAGG_RemoveDuplicate.loss_master_calculation_id,\n\tAGG_RemoveDuplicate.loss_master_run_date,\n\t-- *INF*: TO_CHAR(loss_master_run_date, 'YYYYMMDD')\n\tTO_CHAR(loss_master_run_date, 'YYYYMMDD') AS loss_master_run_datekey,\n\tAGG_RemoveDuplicate.prim_bus_class_code,\n\tAGG_RemoveDuplicate.StateProvinceCode,\n\tAGG_RemoveDuplicate.claim_loss_date,\n\tAGG_RemoveDuplicate.sub_line_code,\n\tAGG_RemoveDuplicate.class_code,\n\tAGG_RemoveDuplicate.cause_of_loss,\n\tAGG_RemoveDuplicate.RiskTerritory,\n\tAGG_RemoveDuplicate.pol_eff_date,\n\tAGG_RemoveDuplicate.pol_key,\n\tAGG_RemoveDuplicate.claim_occurrence_num,\n\tAGG_RemoveDuplicate.claimant_num,\n\tAGG_RemoveDuplicate.paid_loss_amt,\n\tAGG_RemoveDuplicate.outstanding_amt,\n\tAGG_RemoveDuplicate.pms_type_bureau_code,\n\tAGG_RemoveDuplicate.RiskUnitGroup,\n\tAGG_RemoveDuplicate.PolicySourceID,\n\tAGG_RemoveDuplicate.RiskType,\n\tAGG_RemoveDuplicate.StatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\tAGG_RemoveDuplicate.RatingCoverageAKID AS i_RatingCoverageAKID,\n\t-- *INF*: IIF(\r\n\t-- i_StatisticalCoverageAKID=-1, i_RatingCoverageAKID, i_StatisticalCoverageAKID\r\n\t-- )\n\tIFF(i_StatisticalCoverageAKID = - 1, i_RatingCoverageAKID, i_StatisticalCoverageAKID) AS o_CoverageAKID,\n\t-- *INF*: IIF(i_StatisticalCoverageAKID=-1,'DCT','PMS')\n\tIFF(i_StatisticalCoverageAKID = - 1, 'DCT', 'PMS') AS o_SourceSystem,\n\tAGG_RemoveDuplicate.pol_exp_date,\n\tAGG_RemoveDuplicate.s3p_claim_num,\n\tAGG_RemoveDuplicate.claim_trans_id,\n\tLKP_ISSWorkTable_Loss.EDWLossMasterCalculationPKId,\n\tAGG_RemoveDuplicate.claim_coverage_detail_ak_id,\n\tAGG_RemoveDuplicate.asl_num,\n\tAGG_RemoveDuplicate.InsuranceLine,\n\tAGG_RemoveDuplicate.pol_num,\n\tAGG_RemoveDuplicate.statistical_code1,\n\tAGG_RemoveDuplicate.InsuranceSegmentCode,\n\tAGG_RemoveDuplicate.exposure,\n\tAGG_RemoveDuplicate.CoverageCode,\n\tAGG_RemoveDuplicate.DirectALAEOutstandingER,\n\tAGG_RemoveDuplicate.DirectALAEPaidIR,\n\tAGG_RemoveDuplicate.PolicyPerOccurenceLimit,\n\tAGG_RemoveDuplicate.MajorPerilCode,\n\tAGG_RemoveDuplicate.ZipPostalCode,\n\t-- *INF*: IIF(ISNULL(claim_occurrence_num) OR IS_SPACES(claim_occurrence_num) OR LENGTH(claim_occurrence_num)=0 OR claim_occurrence_num='N/A' OR IS_NUMBER(claim_occurrence_num)=0, 0, TO_INTEGER(claim_occurrence_num))\n\tIFF(\n\t    claim_occurrence_num IS NULL\n\t    or LENGTH(claim_occurrence_num)>0\n\t    and TRIM(claim_occurrence_num)=''\n\t    or LENGTH(claim_occurrence_num) = 0\n\t    or claim_occurrence_num = 'N/A'\n\t    or REGEXP_LIKE(claim_occurrence_num, '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(claim_occurrence_num AS INTEGER)\n\t) AS v_claim_occurrence_num,\n\t-- *INF*: LTRIM(RTRIM(pol_num))||TO_CHAR(claim_loss_date,'YYMMDD') ||SUBSTR(claim_occurrence_num,2,2)\n\tLTRIM(RTRIM(pol_num)) || TO_CHAR(claim_loss_date, 'YYMMDD') || SUBSTR(claim_occurrence_num, 2, 2) AS o_ClaimNum,\n\tAGG_RemoveDuplicate.pms_pol_lob_code,\n\tAGG_RemoveDuplicate.trans_date\n\tFROM AGG_RemoveDuplicate\n\tLEFT JOIN LKP_ISSWorkTable_Loss\n\tON LKP_ISSWorkTable_Loss.EDWLossMasterCalculationPKId = AGG_RemoveDuplicate.loss_master_calculation_id\n),\nSQ_Coverage AS (\n\tdeclare @QuarterDate as datetime\r\n\t\r\n\tset @QuarterDate=cast(DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) as date);\r\n\t\r\n\tselect loss_master_calculation_id as loss_master_calculation_id,\r\n\tCoverageAKID as CoverageAKID,\r\n\tConstructionCode AS ConstructionCode, \r\n\tIsoFireProtectionCode as IsoFireProtectionCode, \r\n\tSprinklerFlag as SprinklerFlag,\r\n\tBureauCode1 as BureauCode1,\r\n\tBureauCode2 as BureauCode2,\r\n\tBureauCode4 as BureauCode4,\r\n\tCoverageLimitValue as CoverageLimitValue,\r\n\tPremiumTransactionAKID as PremiumTransactionAKID,\r\n\tPremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate\r\n\tfrom \r\n\t--------------------------------------------------------------------------------------------\r\n\t(\r\n\t\tselect distinct LMC.loss_master_calculation_id,\r\n\t\tPT.RatingCoverageAKID as CoverageAKID,\r\n\t\tSCC.StandardConstructionCodeDescription AS ConstructionCode,\r\n\t\tCDCP.IsoFireProtectionCode as IsoFireProtectionCode, \r\n\t\tCDCP.SprinklerFlag as SprinklerFlag,\r\n\t\tnull as BureauCode1,\r\n\t\tnull as BureauCode2,\r\n\t\tnull as BureauCode4,\r\n\t\tCL.CoverageLimitValue as CoverageLimitValue,\r\n\t\tPT.PremiumTransactionAKID as PremiumTransactionAKID ,\r\n\t\tPT.PremiumTransactionEffectiveDate as PremiumTransactionEffectiveDate,\r\n\t\trow_number() over (partition by LMC.loss_master_calculation_id\r\n\t\torder by PT.PremiumTransactionEffectiveDate desc, PT.EffectiveDate desc, PT.OffsetOnsetCode desc) RowNumber\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_calculation LMC with (nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.loss_master_fact LMF with (nolock)\r\n\t\ton LMC.loss_master_calculation_id=LMF.edw_loss_master_calculation_pk_id\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_transaction CT with (nolock)\r\n\t\ton LMC.claim_trans_ak_id=CT.claim_trans_ak_id\r\n\t\tand LMC.crrnt_snpsht_flag=1\r\n\t\tand CT.crrnt_snpsht_flag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_detail CCD with (nolock)\r\n\t\ton CT.claimant_cov_det_ak_id= CCD.claimant_cov_det_ak_id\r\n\t\tand CCD.crrnt_snpsht_flag = 1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_party_occurrence CPO with (nolock)\r\n\t\ton CPO.claim_party_occurrence_ak_id=CCD.claim_party_occurrence_ak_id\r\n\t\tand CPO.Crrnt_snpsht_flag = 1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence OCC with (nolock)\r\n\t\ton CPO.claim_occurrence_ak_id= OCC.claim_occurrence_ak_id\r\n\t\tand  OCC.crrnt_snpsht_flag = 1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC with (nolock)\r\n\t\ton LMC.RatingCoverageAKID = RC.RatingCoverageAKID\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC with (nolock)\r\n\t\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\t\tand PC.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT with (nolock)\r\n\t\ton RC.RatingCoverageAKID = PT.RatingCoverageAKID \r\n\t\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialProperty CDCP with (nolock)\r\n\t\ton CDCP.PremiumTransactionID = PT.PremiumTransactionID\r\n\t\tand CDCP.CurrentSnapshotFlag=1\r\n\t\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupConstructionCode SCC\r\n\t\ton PT.ConstructionCode = SCC.ConstructionCode\r\n\t\tand SCC.CurrentSnapshotFlag=1\r\n\t\tleft join (@{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit CL\r\n\t\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge CLB\r\n\t\t\ton CL.CoverageLimitID=CLB.CoverageLimitID)\r\n\t\ton CLB.PremiumTransactionAKID = PT.PremiumTransactionAKID\r\n\t\twhere PT.SourceSystemID='DCT'\r\n\t\tand CL.coveragelimitvalue is not null\r\n\t\tand PT.OffsetOnsetCode in ('Onset', 'N/A')\r\n\t\tand PT.PremiumTransactionEffectiveDate < OCC.claim_loss_date\r\n\t\tand PC.InsuranceLine = 'BusinessOwners'\r\n\t\tand LMC.trans_kind_code='D'\r\n\t\tand (DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,LMC.loss_master_run_date),-1) = @QuarterDate)\r\n\t\tand (LMC.paid_loss_amt<>0 or LMC.outstanding_amt<>0 or LMF.eom_unpaid_loss_adjust_exp <>0 or LMF.paid_exp_amt<>0) \r\n\t\tand LMF.audit_id<>-9\r\n\t)  as lookuptable \r\n\twhere RowNumber = 1\r\n\t@{pipeline().parameters.WHERE_CLAUSE_3}\n),\nJNR_Coverage AS (SELECT\n\tEXP_Calculate_ClaimNumber.loss_master_calculation_id, \n\tEXP_Calculate_ClaimNumber.loss_master_run_date, \n\tEXP_Calculate_ClaimNumber.loss_master_run_datekey, \n\tEXP_Calculate_ClaimNumber.prim_bus_class_code, \n\tEXP_Calculate_ClaimNumber.StateProvinceCode, \n\tEXP_Calculate_ClaimNumber.claim_loss_date, \n\tEXP_Calculate_ClaimNumber.sub_line_code, \n\tEXP_Calculate_ClaimNumber.class_code, \n\tEXP_Calculate_ClaimNumber.cause_of_loss, \n\tEXP_Calculate_ClaimNumber.RiskTerritory, \n\tEXP_Calculate_ClaimNumber.pol_eff_date, \n\tEXP_Calculate_ClaimNumber.pol_key, \n\tEXP_Calculate_ClaimNumber.claim_occurrence_num, \n\tEXP_Calculate_ClaimNumber.claimant_num, \n\tEXP_Calculate_ClaimNumber.paid_loss_amt, \n\tEXP_Calculate_ClaimNumber.outstanding_amt, \n\tEXP_Calculate_ClaimNumber.pms_type_bureau_code, \n\tEXP_Calculate_ClaimNumber.RiskUnitGroup, \n\tEXP_Calculate_ClaimNumber.PolicySourceID, \n\tEXP_Calculate_ClaimNumber.RiskType, \n\tEXP_Calculate_ClaimNumber.o_CoverageAKID, \n\tEXP_Calculate_ClaimNumber.o_SourceSystem AS SourceSystem, \n\tEXP_Calculate_ClaimNumber.pol_exp_date, \n\tEXP_Calculate_ClaimNumber.s3p_claim_num, \n\tEXP_Calculate_ClaimNumber.claim_trans_id, \n\tEXP_Calculate_ClaimNumber.EDWLossMasterCalculationPKId, \n\tEXP_Calculate_ClaimNumber.claim_coverage_detail_ak_id, \n\tEXP_Calculate_ClaimNumber.asl_num, \n\tEXP_Calculate_ClaimNumber.InsuranceLine, \n\tEXP_Calculate_ClaimNumber.pol_num, \n\tEXP_Calculate_ClaimNumber.statistical_code1, \n\tEXP_Calculate_ClaimNumber.InsuranceSegmentCode, \n\tEXP_Calculate_ClaimNumber.exposure, \n\tEXP_Calculate_ClaimNumber.CoverageCode, \n\tEXP_Calculate_ClaimNumber.DirectALAEOutstandingER, \n\tEXP_Calculate_ClaimNumber.DirectALAEPaidIR, \n\tEXP_Calculate_ClaimNumber.PolicyPerOccurenceLimit, \n\tEXP_Calculate_ClaimNumber.MajorPerilCode, \n\tEXP_Calculate_ClaimNumber.ZipPostalCode, \n\tEXP_Calculate_ClaimNumber.o_ClaimNum AS ClaimNum, \n\tEXP_Calculate_ClaimNumber.pms_pol_lob_code, \n\tEXP_Calculate_ClaimNumber.trans_date, \n\tSQ_Coverage.loss_master_calculation_id AS loss_master_calculation_id1, \n\tSQ_Coverage.CoverageAKID, \n\tSQ_Coverage.ConstructionCode, \n\tSQ_Coverage.IsoFireProtectionCode, \n\tSQ_Coverage.SprinklerFlag, \n\tSQ_Coverage.BureauCode1, \n\tSQ_Coverage.BureauCode2, \n\tSQ_Coverage.BureauCode4, \n\tSQ_Coverage.CoverageLimitValue, \n\tSQ_Coverage.PremiumTransactionAKID, \n\tSQ_Coverage.PremiumTransactionEffectiveDate\n\tFROM SQ_Coverage\n\tRIGHT OUTER JOIN EXP_Calculate_ClaimNumber\n\tON EXP_Calculate_ClaimNumber.loss_master_calculation_id = SQ_Coverage.loss_master_calculation_id AND EXP_Calculate_ClaimNumber.o_CoverageAKID = SQ_Coverage.CoverageAKID\n),\nSRT_Sort_data AS (\n\tSELECT\n\tpol_key, \n\tClaimNum, \n\tloss_master_run_date, \n\tloss_master_run_datekey, \n\tclaim_coverage_detail_ak_id, \n\tloss_master_calculation_id, \n\tprim_bus_class_code, \n\tStateProvinceCode, \n\tclaim_loss_date, \n\tsub_line_code, \n\tclass_code, \n\tcause_of_loss, \n\tRiskTerritory, \n\tpol_eff_date, \n\tclaim_occurrence_num, \n\tclaimant_num, \n\tpaid_loss_amt, \n\toutstanding_amt, \n\tpms_type_bureau_code, \n\tRiskUnitGroup, \n\tPolicySourceID, \n\tRiskType, \n\tCoverageAKID, \n\tSourceSystem, \n\tpol_exp_date, \n\ts3p_claim_num, \n\tclaim_trans_id, \n\tEDWLossMasterCalculationPKId, \n\tasl_num, \n\tInsuranceLine, \n\tpol_num, \n\tstatistical_code1, \n\tInsuranceSegmentCode, \n\texposure, \n\tCoverageCode, \n\tDirectALAEOutstandingER, \n\tDirectALAEPaidIR, \n\tPolicyPerOccurenceLimit, \n\tMajorPerilCode, \n\tZipPostalCode, \n\tpms_pol_lob_code, \n\ttrans_date, \n\tConstructionCode, \n\tIsoFireProtectionCode, \n\tSprinklerFlag, \n\tBureauCode1, \n\tBureauCode2, \n\tBureauCode4, \n\tCoverageLimitValue, \n\tPremiumTransactionAKID, \n\tPremiumTransactionEffectiveDate\n\tFROM JNR_Coverage\n\tORDER BY pol_key ASC, ClaimNum ASC, loss_master_run_date ASC, claim_coverage_detail_ak_id ASC\n),\nLKP_InceptionToDatePaidLossAmount AS (\n\tSELECT\n\tInceptionToDatePaidLossAmount,\n\ti_loss_master_calculation_id,\n\tpol_key,\n\tedw_claimant_cov_det_ak_id,\n\ttrans_date,\n\tloss_master_calculation_id\n\tFROM (\n\t\tSELECT DISTINCT\r\n\t\t--Old logic for OutstandingAmount records\r\n\t\t--CASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN LAST_VALUE(InceptionToDatePaidLossAmount) OVER (partition by pol_key,edw_claimant_cov_det_ak_id,year(trans_date), month(trans_date) order by trans_date rows between unbounded preceding and unbounded following ) \r\n\t\tCASE WHEN InceptionToDatePaidLossAmount=0 and PaidLossAmount=0 THEN SUM(PaidLossAmount) OVER (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by loss_master_run_date)\r\n\t\tELSE InceptionToDatePaidLossAmount END AS InceptionToDatePaidLossAmount,\r\n\t\tpol_key AS pol_key,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date\r\n\t\t,loss_master_calculation_id AS loss_master_calculation_id\r\n\t\tFROM\r\n\t\t(\r\n\t\tSELECT distinct SUM(InceptionToDatePaidLossAmount) over (partition by pol_key,edw_claimant_cov_det_ak_id,claim_num order by edw_claimant_cov_det_ak_id,trans_date,claim_trans_pk_id) AS InceptionToDatePaidLossAmount,\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\ttrans_date AS trans_date,\r\n\t\tInceptionToDatePaidLossAmount AS PaidLossAmount,\r\n\t\tpol_key\r\n\t\t,loss_master_calculation_id\r\n\t\t,loss_master_run_date\r\n\t\t,claim_num\r\n\t\tFROM (\r\n\t\tSELECT  f.direct_loss_paid_including_recoveries AS InceptionToDatePaidLossAmount,  \r\n\t\t--f.direct_loss_outstanding_excluding_recoveries AS OutstandingAmount, --US-403702 Commenting out since we don't need it\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date<'2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O \r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\t--Join added for US-403702\r\n\t\tleft join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact lmf\r\n\t\ton lmf.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tjoin loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = lmf.edw_loss_master_calculation_pk_id\r\n\t\tUNION ALL\r\n\t\tSELECT f.DirectLossPaidIR AS InceptionToDatePaidLossAmount,  \r\n\t\t--f.DirectLossOutstandingER AS OutstandingAmount, --US-403702 Commenting out since we don't need it\r\n\t\tedw_claimant_cov_det_ak_id AS edw_claimant_cov_det_ak_id,\r\n\t\tct.trans_date,\r\n\t\tp.pol_key AS pol_key,\r\n\t\to.claim_num AS claim_num,\r\n\t\tlmc.loss_master_calculation_id,\r\n\t\tlmc.loss_master_run_date,\r\n\t\tlmc.claim_trans_pk_id\r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact f\r\n\t\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claimant_coverage_dim d\r\n\t\ton f.claimant_cov_dim_id = d.claimant_cov_dim_id\r\n\t\tinner join vw_claim_transaction ct\r\n\t\ton f.edw_claim_trans_pk_id=ct.claim_trans_id\r\n\t\tand ct.trans_date>='2001-01-01'\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim p\r\n\t\ton f.pol_dim_id=p.pol_dim_id\r\n\t\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim O \r\n\t\ton F.claim_occurrence_dim_id=o.claim_occurrence_dim_id\r\n\t\t--Join added for US-403702\r\n\t\tjoin loss_master_calculation lmc\r\n\t\ton lmc.loss_master_calculation_id = f.edw_loss_master_calculation_pk_id\r\n\t\t) T\r\n\t\t) T\r\n\t\tWHERE cast(trans_date as date)<=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS} ,-1) \r\n\t\tORDER BY pol_key,edw_claimant_cov_det_ak_id,trans_date\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,edw_claimant_cov_det_ak_id,trans_date,loss_master_calculation_id ORDER BY InceptionToDatePaidLossAmount DESC) = 1\n),\nFIL_Exists_Loss AS (\n\tSELECT\n\tSRT_Sort_data.EDWLossMasterCalculationPKId AS LKP_LossMasterCalculationId, \n\tSRT_Sort_data.pol_key, \n\tSRT_Sort_data.ClaimNum, \n\tSRT_Sort_data.loss_master_run_date, \n\tSRT_Sort_data.loss_master_calculation_id, \n\tSRT_Sort_data.prim_bus_class_code, \n\tSRT_Sort_data.StateProvinceCode, \n\tSRT_Sort_data.claim_loss_date, \n\tSRT_Sort_data.sub_line_code, \n\tSRT_Sort_data.class_code AS ClassCode, \n\tSRT_Sort_data.cause_of_loss, \n\tSRT_Sort_data.RiskTerritory, \n\tSRT_Sort_data.pol_eff_date, \n\tSRT_Sort_data.claim_occurrence_num, \n\tSRT_Sort_data.claimant_num, \n\tSRT_Sort_data.paid_loss_amt, \n\tSRT_Sort_data.outstanding_amt, \n\tSRT_Sort_data.pms_type_bureau_code AS TypeBureauCode, \n\tSRT_Sort_data.RiskUnitGroup, \n\tSRT_Sort_data.PolicySourceID, \n\tSRT_Sort_data.RiskType, \n\tSRT_Sort_data.CoverageAKID, \n\tSRT_Sort_data.SourceSystem, \n\tSRT_Sort_data.pol_exp_date, \n\tSRT_Sort_data.s3p_claim_num, \n\tSRT_Sort_data.claim_trans_id, \n\tSRT_Sort_data.claim_coverage_detail_ak_id, \n\tLKP_InceptionToDatePaidLossAmount.InceptionToDatePaidLossAmount, \n\tSRT_Sort_data.asl_num, \n\tSRT_Sort_data.InsuranceLine, \n\tSRT_Sort_data.pol_num, \n\tSRT_Sort_data.statistical_code1, \n\tSRT_Sort_data.InsuranceSegmentCode, \n\tSRT_Sort_data.exposure, \n\tSRT_Sort_data.CoverageCode, \n\tSRT_Sort_data.DirectALAEOutstandingER, \n\tSRT_Sort_data.DirectALAEPaidIR, \n\tSRT_Sort_data.PolicyPerOccurenceLimit, \n\tSRT_Sort_data.MajorPerilCode, \n\tSRT_Sort_data.ZipPostalCode, \n\tSRT_Sort_data.pms_pol_lob_code, \n\tSRT_Sort_data.ConstructionCode, \n\tSRT_Sort_data.IsoFireProtectionCode, \n\tSRT_Sort_data.SprinklerFlag, \n\tSRT_Sort_data.BureauCode1, \n\tSRT_Sort_data.BureauCode2, \n\tSRT_Sort_data.BureauCode4, \n\tSRT_Sort_data.CoverageLimitValue, \n\tSRT_Sort_data.PremiumTransactionAKID, \n\tSRT_Sort_data.PremiumTransactionEffectiveDate\n\tFROM SRT_Sort_data\n\tLEFT JOIN LKP_InceptionToDatePaidLossAmount\n\tON LKP_InceptionToDatePaidLossAmount.pol_key = SRT_Sort_data.pol_key AND LKP_InceptionToDatePaidLossAmount.edw_claimant_cov_det_ak_id = SRT_Sort_data.claim_coverage_detail_ak_id AND LKP_InceptionToDatePaidLossAmount.trans_date <= SRT_Sort_data.trans_date AND LKP_InceptionToDatePaidLossAmount.loss_master_calculation_id = SRT_Sort_data.loss_master_calculation_id\n\tWHERE ISNULL(LKP_LossMasterCalculationId) AND  \r\n(paid_loss_amt != 0 or outstanding_amt!=0 or DirectALAEPaidIR!=0  or DirectALAEOutstandingER !=0)\r\nand TO_CHAR(loss_master_run_date, 'YYYY') ||TO_CHAR(loss_master_run_date, 'QQ')=\r\nTO_CHAR( ADD_TO_DATE(sysdate, 'MM', 3*@{pipeline().parameters.NO_OF_QUARTERS}), 'YYYY') ||TO_CHAR( ADD_TO_DATE(sysdate, 'MM', 3*@{pipeline().parameters.NO_OF_QUARTERS}), 'QQ')\r\nand  NOT  IN(LTRIM(RTRIM(CoverageCode)),'MINE','COMPATT','CYBEXTEXP','NETSECLIAB','EXTREP')\r\n\r\n\r\n---CoverageCode != 'MINE'\r\n\r\n--Excluding coverage code COMPATT,CYBEXTEXP,NETSECLIAB,EXTREP as part of Cyber One project Requirement\n),\nEXP_Cleansing_Loss AS (\n\tSELECT\n\tpol_key AS i_pol_key,\n\tClaimNum AS i_ClaimNum,\n\tloss_master_run_date AS i_loss_master_run_date,\n\tloss_master_calculation_id AS i_loss_master_calculation_id,\n\tprim_bus_class_code AS i_prim_bus_class_code,\n\tStateProvinceCode AS i_StateProvinceCode,\n\tclaim_loss_date AS i_claim_loss_date,\n\tsub_line_code AS i_sub_line_code,\n\tClassCode AS i_ClassCode,\n\tcause_of_loss AS i_cause_of_loss,\n\tRiskTerritory AS i_RiskTerritory,\n\tpol_eff_date AS i_pol_eff_date,\n\tclaim_occurrence_num AS i_claim_occurrence_num,\n\tclaimant_num AS i_claimant_num,\n\tpaid_loss_amt AS i_paid_loss_amt,\n\toutstanding_amt AS i_outstanding_amt,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tRiskUnitGroup AS i_RiskUnitGroup,\n\tPolicySourceID AS i_PolicySourceID,\n\tRiskType AS i_RiskType,\n\tCoverageAKID,\n\tSourceSystem,\n\tpol_exp_date AS i_pol_exp_date,\n\ts3p_claim_num,\n\tInceptionToDatePaidLossAmount AS i_InceptionToDatePaidLossAmount,\n\tasl_num AS i_asl_num,\n\tclaim_coverage_detail_ak_id,\n\ti_loss_master_calculation_id AS o_loss_master_calculation_id,\n\ti_loss_master_run_date AS o_loss_master_run_date,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\ti_claim_loss_date AS o_claim_loss_date,\n\t-- *INF*: RTRIM(LTRIM(i_sub_line_code))\n\tRTRIM(LTRIM(i_sub_line_code)) AS o_sub_line_code,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_cause_of_loss))\n\tRTRIM(LTRIM(i_cause_of_loss)) AS o_cause_of_loss,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: RTRIM(LTRIM(i_claim_occurrence_num))\n\tRTRIM(LTRIM(i_claim_occurrence_num)) AS o_claim_occurrence_num,\n\t-- *INF*: RTRIM(LTRIM(i_claimant_num))\n\tRTRIM(LTRIM(i_claimant_num)) AS o_claimant_num,\n\t-- *INF*: IIF(ISNULL(i_paid_loss_amt), 0, i_paid_loss_amt)\r\n\t-- \r\n\t-- ---i_paid_loss_amt\n\tIFF(i_paid_loss_amt IS NULL, 0, i_paid_loss_amt) AS o_PaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_outstanding_amt), 0, i_outstanding_amt)\r\n\t-- \r\n\t-- --i_outstanding_amt\n\tIFF(i_outstanding_amt IS NULL, 0, i_outstanding_amt) AS o_OutstandingLossAmount,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_TypeBureauCode) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_PolicySourceID))\n\tLTRIM(RTRIM(i_PolicySourceID)) AS o_PolicySourceID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\ti_pol_exp_date AS o_pol_exp_date,\n\t-- *INF*: RTRIM(LTRIM(s3p_claim_num))\n\tRTRIM(LTRIM(s3p_claim_num)) AS o_s3p_claim_num,\n\t-- *INF*: DECODE(True,\r\n\t-- direct_alae_paid_including_recoveries<>0, 0,\r\n\t-- direct_loss_outstanding_excluding_recoveries<>0,0,\r\n\t-- i_InceptionToDatePaidLossAmount\r\n\t-- )\n\tDECODE(\n\t    True,\n\t    direct_alae_paid_including_recoveries <> 0, 0,\n\t    direct_loss_outstanding_excluding_recoveries <> 0, 0,\n\t    i_InceptionToDatePaidLossAmount\n\t) AS o_InceptionToDatePaidLossAmount,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tInsuranceLine AS i_InsuranceLine,\n\t-- *INF*: LTRIM(RTRIM(i_InsuranceLine))\n\tLTRIM(RTRIM(i_InsuranceLine)) AS o_InsuranceLine,\n\tpol_num,\n\ti_ClaimNum AS o_ClaimNum,\n\tstatistical_code1 AS i_statistical_code1,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- isnull(i_statistical_code1),'N/A',\r\n\t-- ltrim(rtrim(i_statistical_code1))='','N/A',\r\n\t-- length(rtrim(ltrim(i_statistical_code1))) < 5,'N/A',\r\n\t-- i_statistical_code1)\n\tDECODE(\n\t    TRUE,\n\t    i_statistical_code1 IS NULL, 'N/A',\n\t    ltrim(rtrim(i_statistical_code1)) = '', 'N/A',\n\t    length(rtrim(ltrim(i_statistical_code1))) < 5, 'N/A',\n\t    i_statistical_code1\n\t) AS v_statistical_code1,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,3,1),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 3, 1), 'N/A') AS o_pms_const_code,\n\t-- *INF*: IIF(v_statistical_code1 != 'N/A',substr(v_statistical_code1,4,2),'N/A')\n\tIFF(v_statistical_code1 != 'N/A', substr(v_statistical_code1, 4, 2), 'N/A') AS o_pms_iso_ppc_code,\n\tInsuranceSegmentCode,\n\texposure AS i_exposure,\n\t-- *INF*: IIF(ISNULL(i_exposure),0,i_exposure)\n\tIFF(i_exposure IS NULL, 0, i_exposure) AS o_exposure,\n\tCoverageCode,\n\tDirectALAEPaidIR AS direct_alae_paid_including_recoveries,\n\tDirectALAEOutstandingER AS direct_loss_outstanding_excluding_recoveries,\n\tPolicyPerOccurenceLimit,\n\tZipPostalCode AS i_ZipPostalCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode) AS o_ZipPostalCode,\n\tMajorPerilCode,\n\tpms_pol_lob_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(pms_pol_lob_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(pms_pol_lob_code) AS v_pms_pol_lob_code,\n\t-- *INF*: IIF(v_pms_pol_lob_code  != 'N/A' , v_pms_pol_lob_code  , \r\n\t-- decode(i_InsuranceLine, 'BusinessOwners' , 'BOP',\r\n\t-- 'CommercialAuto' , 'CPP',\r\n\t-- 'CommercialUmbrella' , 'CPP',\r\n\t-- 'Crime' , 'CPP',\r\n\t-- 'DirectorsAndOfficersNFP' , 'CPP',\r\n\t-- 'DirectorsAndOffsCondos' , 'CPP',\r\n\t-- 'EmploymentPracticesLiab' , 'CPP',\r\n\t-- 'ExcessLiability' , 'CPP',\r\n\t-- 'GamesOfChance' , 'CPP',\r\n\t-- 'GeneralLiability' , 'CPP',\r\n\t-- 'HoleInOne' , 'CPP',\r\n\t-- 'InlandMarine' , 'CPP',\r\n\t-- 'Property' , 'CPP',\r\n\t-- 'SBOPGeneralLiability' , 'CPP',\r\n\t-- 'SBOPProperty' , 'CPP',\r\n\t-- i_InsuranceLine))\n\tIFF(\n\t    v_pms_pol_lob_code != 'N/A', v_pms_pol_lob_code,\n\t    decode(\n\t        i_InsuranceLine,\n\t        'BusinessOwners', 'BOP',\n\t        'CommercialAuto', 'CPP',\n\t        'CommercialUmbrella', 'CPP',\n\t        'Crime', 'CPP',\n\t        'DirectorsAndOfficersNFP', 'CPP',\n\t        'DirectorsAndOffsCondos', 'CPP',\n\t        'EmploymentPracticesLiab', 'CPP',\n\t        'ExcessLiability', 'CPP',\n\t        'GamesOfChance', 'CPP',\n\t        'GeneralLiability', 'CPP',\n\t        'HoleInOne', 'CPP',\n\t        'InlandMarine', 'CPP',\n\t        'Property', 'CPP',\n\t        'SBOPGeneralLiability', 'CPP',\n\t        'SBOPProperty', 'CPP',\n\t        i_InsuranceLine\n\t    )\n\t) AS o_pms_pol_lob_code,\n\tConstructionCode,\n\tIsoFireProtectionCode,\n\tSprinklerFlag,\n\tBureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tCoverageLimitValue,\n\tPremiumTransactionAKID,\n\tPremiumTransactionEffectiveDate\n\tFROM FIL_Exists_Loss\n),\nEXP_Reset_Pms_ConstCode_IsoPPC AS (\n\tSELECT\n\to_TypeBureauCode AS i_TypeBureauCode,\n\to_pms_const_code AS i_pms_const_code,\n\to_pms_iso_ppc_code AS i_pms_iso_ppc_code,\n\tSourceSystem AS i_SourceSystem,\n\tConstructionCode AS lkp_ConstructionCode,\n\tIsoFireProtectionCode AS lkp_IsoFireProtectionCode,\n\tSprinklerFlag AS lkp_SprinklerFlag,\n\t-- *INF*: lkp_ConstructionCode\r\n\t-- \r\n\t-- --IIF(i_SourceSystem='PMS' and i_pms_const_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))--='CF',i_pms_const_code,lkp_ConstructionCode)\n\tlkp_ConstructionCode AS v_const_code,\n\t-- *INF*: lkp_IsoFireProtectionCode\r\n\t-- \r\n\t-- --IIF(i_SourceSystem='PMS' and i_pms_iso_ppc_code != 'N/A' and ltrim(rtrim(i_TypeBureauCode))--='CF',i_pms_iso_ppc_code,lkp_IsoFireProtectionCode)\n\tlkp_IsoFireProtectionCode AS v_iso_code,\n\tv_const_code AS o_ConsturctionCode,\n\tv_iso_code AS o_IsoFireProtectionCode,\n\t-- *INF*: DECODE(lkp_SprinklerFlag,'T','1','F','0',NULL)\n\tDECODE(\n\t    lkp_SprinklerFlag,\n\t    'T', '1',\n\t    'F', '0',\n\t    NULL\n\t) AS o_SprinklerFlag\n\tFROM EXP_Cleansing_Loss\n),\nLKP_CauseOfLoss AS (\n\tSELECT\n\tBureauCauseOfLoss,\n\tCauseOfLoss,\n\tLineOfBusiness,\n\tMajorPeril\n\tFROM (\n\t\tSELECT \n\t\t\tBureauCauseOfLoss,\n\t\t\tCauseOfLoss,\n\t\t\tLineOfBusiness,\n\t\t\tMajorPeril\n\t\tFROM sup_CauseOfLoss\n\t\tWHERE CurrentSnapshotFlag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CauseOfLoss,LineOfBusiness,MajorPeril ORDER BY BureauCauseOfLoss) = 1\n),\nEXP_Logic_Loss AS (\n\tSELECT\n\tEXP_Cleansing_Loss.o_loss_master_calculation_id AS loss_master_calculation_id,\n\tEXP_Cleansing_Loss.claim_coverage_detail_ak_id,\n\t-1 AS PremiumMasterCalculationID,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS PremiumMasterRunDate,\n\tEXP_Cleansing_Loss.o_loss_master_run_date AS loss_master_run_date,\n\tEXP_Cleansing_Loss.o_pol_key AS pol_key,\n\tEXP_Cleansing_Loss.o_prim_bus_class_code AS prim_bus_class_code,\n\tEXP_Cleansing_Loss.o_StateProvinceCode AS StateProvinceCode,\n\tEXP_Cleansing_Loss.o_claim_loss_date AS claim_loss_date,\n\tEXP_Cleansing_Loss.o_sub_line_code AS sub_line_code,\n\t-- *INF*: DECODE(TRUE,sub_line_code='025','027',sub_line_code)\n\tDECODE(\n\t    TRUE,\n\t    sub_line_code = '025', '027',\n\t    sub_line_code\n\t) AS sub_line_code_out,\n\tEXP_Cleansing_Loss.o_ClassCode AS ClassCode,\n\t'N/A' AS PremiumMasterClassCode_out,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR IS_SPACES(ClassCode) OR LENGTH(ClassCode)=0\r\n\t-- OR IN(ClassCode, 'N/A','TBD'),\r\n\t-- '00000',\r\n\t-- LPAD(ClassCode, 5, '0')\r\n\t-- )\r\n\t-- \r\n\t-- --ClassCode\n\tIFF(\n\t    ClassCode IS NULL\n\t    or LENGTH(ClassCode)>0\n\t    and TRIM(ClassCode)=''\n\t    or LENGTH(ClassCode) = 0\n\t    or ClassCode IN ('N/A','TBD'),\n\t    '00000',\n\t    LPAD(ClassCode, 5, '0')\n\t) AS LossMasterClassCode_out,\n\tLKP_CauseOfLoss.BureauCauseOfLoss AS cause_of_loss,\n\t-- *INF*: IIF(ISNULL(cause_of_loss) OR LENGTH(cause_of_loss)=0,'N/A',cause_of_loss)\n\tIFF(cause_of_loss IS NULL OR LENGTH(cause_of_loss) = 0, 'N/A', cause_of_loss) AS cause_of_loss_out,\n\tEXP_Cleansing_Loss.o_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode_out,\n\tEXP_Cleansing_Loss.o_pol_eff_date AS pol_eff_date,\n\tEXP_Cleansing_Loss.o_claim_occurrence_num AS i_claim_occurrence_num,\n\tEXP_Cleansing_Loss.o_s3p_claim_num AS i_s3p_claim_num,\n\tEXP_Cleansing_Loss.o_InsuranceLine AS i_InsuranceLine,\n\tEXP_Cleansing_Loss.pol_num AS i_pol_num,\n\t-- *INF*: IIF(ISNULL(i_claim_occurrence_num) OR IS_SPACES(i_claim_occurrence_num) OR LENGTH(i_claim_occurrence_num)=0 OR i_claim_occurrence_num='N/A' OR IS_NUMBER(i_claim_occurrence_num)=0, 0, TO_INTEGER(i_claim_occurrence_num))\n\tIFF(\n\t    i_claim_occurrence_num IS NULL\n\t    or LENGTH(i_claim_occurrence_num)>0\n\t    and TRIM(i_claim_occurrence_num)=''\n\t    or LENGTH(i_claim_occurrence_num) = 0\n\t    or i_claim_occurrence_num = 'N/A'\n\t    or REGEXP_LIKE(i_claim_occurrence_num, '^[0-9]+$') = 0,\n\t    0,\n\t    CAST(i_claim_occurrence_num AS INTEGER)\n\t) AS v_claim_occurrence_num,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_InsuranceLine='CF',\r\n\t-- IIF(TRUNC(pol_eff_date, 'MM')  <= TO_DATE('2003-10', 'YYYY-MM'), TO_CHAR(ADD_TO_DATE(claim_loss_date, 'DD', v_claim_occurrence_num), 'YYYYMMDD'), i_s3p_claim_num),\r\n\t-- i_InsuranceLine='CR',\r\n\t-- i_pol_num || TO_CHAR(claim_loss_date,'YYMMDD') || SUBSTR(i_claim_occurrence_num,2,2),\r\n\t-- --i_InsuranceLine='GL',\r\n\t-- i_s3p_claim_num\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_InsuranceLine = 'CF', IFF(\n\t        CAST(TRUNC(pol_eff_date, 'MONTH') AS TIMESTAMP_NTZ(0)) <= TO_TIMESTAMP('2003-10', 'YYYY-MM'),\n\t        TO_CHAR(DATEADD(DAY,v_claim_occurrence_num,claim_loss_date), 'YYYYMMDD'),\n\t        i_s3p_claim_num\n\t    ),\n\t    i_InsuranceLine = 'CR', i_pol_num || TO_CHAR(claim_loss_date, 'YYMMDD') || SUBSTR(i_claim_occurrence_num, 2, 2),\n\t    i_s3p_claim_num\n\t) AS v_ClaimNumber,\n\tEXP_Cleansing_Loss.o_ClaimNum AS i_ClaimNum,\n\ti_ClaimNum AS ClaimNum,\n\tEXP_Cleansing_Loss.o_claimant_num AS claimant_num,\n\t0.00 AS PremiumMasterPremium,\n\tEXP_Cleansing_Loss.o_PaidLossAmount AS PaidLossAmount,\n\tEXP_Cleansing_Loss.o_OutstandingLossAmount AS OutstandingLossAmount,\n\tEXP_Cleansing_Loss.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_Cleansing_Loss.o_RiskUnitGroup AS RiskUnitGroup,\n\tEXP_Cleansing_Loss.o_PolicySourceID AS PolicySourceID,\n\tEXP_Cleansing_Loss.o_RiskType AS RiskType,\n\tEXP_Cleansing_Loss.BureauCode1,\n\tEXP_Cleansing_Loss.BureauCode2,\n\tEXP_Cleansing_Loss.BureauCode4,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_ConsturctionCode AS i_ConstructionCode,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tEXP_Cleansing_Loss.CoverageCode AS i_CoverageCode,\n\ti_CoverageCode AS CoverageCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ConstructionCode) AS ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_IsoFireProtectionCode) AS IsoFireProtectionCode,\n\tEXP_Cleansing_Loss.o_pol_exp_date AS pol_exp_date,\n\tEXP_Cleansing_Loss.o_InceptionToDatePaidLossAmount AS InceptionToDatePaidLossAmount,\n\tEXP_Cleansing_Loss.o_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\tEXP_Cleansing_Loss.InsuranceSegmentCode,\n\t0 AS exposure,\n\tEXP_Cleansing_Loss.direct_alae_paid_including_recoveries,\n\tEXP_Cleansing_Loss.direct_loss_outstanding_excluding_recoveries,\n\tEXP_Cleansing_Loss.CoverageLimitValue AS InsuranceLineLimit,\n\tEXP_Cleansing_Loss.PolicyPerOccurenceLimit AS PolicyLimit,\n\tEXP_Cleansing_Loss.o_ZipPostalCode AS ZipPostalCode,\n\t'N/A' AS o_ExposureBasis,\n\tEXP_Reset_Pms_ConstCode_IsoPPC.o_SprinklerFlag AS SprinklerFlag,\n\t'N/A' AS LocationNumber,\n\t'N/A' AS BuildingNumber,\n\tEXP_Cleansing_Loss.PremiumTransactionEffectiveDate AS PT_EffectiveDate,\n\tEXP_Cleansing_Loss.PremiumTransactionAKID\n\tFROM EXP_Cleansing_Loss\n\t -- Manually join with EXP_Reset_Pms_ConstCode_IsoPPC\n\tLEFT JOIN LKP_CauseOfLoss\n\tON LKP_CauseOfLoss.CauseOfLoss = EXP_Cleansing_Loss.o_cause_of_loss AND LKP_CauseOfLoss.LineOfBusiness = EXP_Cleansing_Loss.o_pms_pol_lob_code AND LKP_CauseOfLoss.MajorPeril = EXP_Cleansing_Loss.MajorPerilCode\n),\nSQ_Premium AS (\n\tdeclare @QuarterDate as datetime\r\n\t\r\n\tset @QuarterDate=cast(DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1) as date);\r\n\t\r\n\tSELECT distinct\r\n\tPMC.PremiumMasterCalculationID,\r\n\tPMC.PremiumMasterRunDate,\r\n\tPOL.pol_key,\r\n\tPOL.prim_bus_class_code,\r\n\tRL.StateProvinceCode,\r\n\tPT.PremiumTransactionBookedDate,\r\n\tPMC.PremiumMasterSubLine,\r\n\tRC.ClassCode,\r\n\tPTRR.RatingTerritoryCode as RiskTerritory,\r\n\tPOL.pol_eff_date,\r\n\tPMC.PremiumMasterPremium,\r\n\t'BE' TypeBureauCode,\r\n\t'N/A' AS RiskUnitGroup,\r\n\tPT.SourceSystemID,\r\n\tPMC.PremiumMasterTransactionCode,\r\n\tPMC.PremiumMasterReasonAmendedCode,\r\n\tRC.RiskType,\r\n\tSCC.StandardConstructionCodeDescription AS ConstructionCode,\r\n\tCDCP. IsoFireProtectionCode,\r\n\t'N/A' AS BureauCode1,\r\n\t'N/A' AS BureauCode2,\r\n\t'N/A' AS BureauCode4,\r\n\tPOL.pol_exp_date,\r\n\t(case when ASL.asl_code='80' then '5.1'\r\n\twhen ASL.asl_code='100' then '5.2'\r\n\telse\r\n\tASL.asl_num\r\n\tend) asl_num,\r\n\tISG.InsuranceSegmentCode,\r\n\tPMC.PremiumMasterExposure,\r\n\tLTRIM(RTRIM(IRC.CoverageCode)),\r\n\tPL.PolicyPerOccurenceLimit,\r\n\tRL.ZipPostalCode,\r\n\tCDCP.SprinklerFlag,\r\n\tPT.ExposureBasis,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\t--added LocationNumber as part of 12020\r\n\tRL.Locationunitnumber,\r\n\t-- added BuildingNumber as part of 12020\r\n\tRC.SubLocationUnitNumber,\r\n\tPMC.PremiumTransactionAKID\r\n\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact PMF\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_dim ASL\r\n\ton PMF.AnnualStatementLineDimId=ASL.asl_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterCalculation PMC\r\n\ton PMF.EDWPremiumMasterCalculationPKID=PMC.PremiumMasterCalculationId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\ton PT.PremiumTransactionAKID=PMC.PremiumTransactionAKID\r\n\tand PMC.CurrentSnapshotFlag=1\r\n\tand PT.CurrentSnapshotFlag=1\r\n\tjoin  @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\tand RC.EffectiveDate=PT.EffectiveDate \r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\tand RL.CurrentSnapshotFlag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy POL\r\n\ton POL.pol_ak_id=RL.PolicyAKID\r\n\tand POL.crrnt_snpsht_flag=1\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment ISG\r\n\ton POL.InsuranceSegmentAKId=ISG.InsuranceSegmentAKId\r\n\tand ISG.CurrentSnapshotFlag=1 \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME_DATAMART}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRC\r\n\ton IRC.InsuranceReferenceCoverageDimId=PMF.InsuranceReferenceCoverageDimId\r\n\tLeft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.policyLimit PL\r\n\ton PC.PolicyAKID = Pl.PolicyAKId and PC.InsuranceLine =PL.InsuranceLine and PMC.PremiumMasterRunDate between PL.EffectiveDate and PL.ExpirationDate\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailCommercialProperty CDCP\r\n\tON CDCP.PremiumTransactionID=PT.PremiumTransactionID\r\n\tAND CDCP.CurrentSnapshotFlag=1\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupConstructionCode SCC\r\n\tON PT.ConstructionCode =SCC.ConstructionCode\r\n\tAND  SCC.CurrentSnapshotFlag=1\r\n\tleft join PremiumTransactionRatingRisk PTRR  with (nolock) \r\n\ton PTRR.PremiumTransactionAKID=PT.PremiumTransactionAKID\r\n\tWHERE\r\n\t(DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,PMC.PremiumMasterRunDate),-1) = @QuarterDate)\r\n\tand PC.InsuranceLine = 'BusinessOwners'\r\n\tAND PT.SourceSystemID='DCT'\r\n\t--AND RL.StateProvinceCode IN ('12','13','14','15','16','21','22','24','34','48')\r\n\tAND PMC.PremiumMasterPremium <>0\r\n\tAND PMC.PremiumMasterPremiumType='D'\r\n\tAND PMC.PremiumMasterTransactionCode IN ('10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67') \r\n\tAND PMC.PremiumMasterReasonAmendedCode NOT IN ('CWO', 'CWB')\r\n\t@{pipeline().parameters.WHERE_CLAUSE_1}\r\n\t\r\n\t/*Removed the sql and union using WorkBlanketPremiumBreakOut table for PROD-20016*/\n),\nLKP_ISSWorkTable_Premium AS (\n\tSELECT\n\tEDWPremiumMasterCalculationPKId,\n\tPremiumMasterDirectWrittenPremiumAmount\n\tFROM (\n\t\tSELECT \n\t\t\tEDWPremiumMasterCalculationPKId,\n\t\t\tPremiumMasterDirectWrittenPremiumAmount\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSBusinessOwnersExtract\n\t\tWHERE (DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,PremiumMasterRunDate),-1)=DATEADD(QUARTER,1+DATEDIFF(QUARTER,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},-1))\r\n\t\tand EDWPremiumMasterCalculationPKId<>-1\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t--YEAR(PremiumMasterRunDate)=YEAR(dateadd(year,@{pipeline().parameters.NO_OF_YEARS},GETDATE())) and EDWPremiumMasterCalculationPKId<>-1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWPremiumMasterCalculationPKId,PremiumMasterDirectWrittenPremiumAmount ORDER BY EDWPremiumMasterCalculationPKId) = 1\n),\nFIL_Exists_Premium AS (\n\tSELECT\n\tLKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId AS LKP_PremiumMasterCalculationID, \n\tSQ_Premium.PremiumMasterCalculationID, \n\tSQ_Premium.PremiumMasterRunDate, \n\tSQ_Premium.pol_key, \n\tSQ_Premium.prim_bus_class_code, \n\tSQ_Premium.StateProvinceCode, \n\tSQ_Premium.PremiumTransactionBookedDate, \n\tSQ_Premium.PremiumMasterSubLine, \n\tSQ_Premium.ClassCode, \n\tSQ_Premium.RiskTerritory, \n\tSQ_Premium.pol_eff_date, \n\tSQ_Premium.PremiumMasterPremium, \n\tSQ_Premium.TypeBureauCode, \n\tSQ_Premium.RiskUnitGroup, \n\tSQ_Premium.SourceSystemID, \n\tSQ_Premium.PremiumMasterTransactionCode, \n\tSQ_Premium.PremiumMasterReasonAmendedCode, \n\tSQ_Premium.RiskType, \n\tSQ_Premium.ConstructionCode, \n\tSQ_Premium.IsoFireProtectionCode, \n\tSQ_Premium.BureauCode1, \n\tSQ_Premium.BureauCode2, \n\tSQ_Premium.BureauCode4, \n\tSQ_Premium.pol_exp_date, \n\tSQ_Premium.asl_num, \n\tSQ_Premium.InsuranceSegmentCode, \n\tSQ_Premium.PremiumMasterExposure, \n\tSQ_Premium.CoverageCode, \n\tSQ_Premium.PolicyPerOccurenceLimit, \n\tSQ_Premium.ZipPostalCode, \n\tSQ_Premium.SprinklerFlag, \n\tSQ_Premium.ExposureBasis, \n\tSQ_Premium.PremiumTransactionEffectiveDate, \n\tSQ_Premium.LocationNumber, \n\tSQ_Premium.BuildingNumber, \n\tSQ_Premium.PremiumTransactionAKID\n\tFROM SQ_Premium\n\tLEFT JOIN LKP_ISSWorkTable_Premium\n\tON LKP_ISSWorkTable_Premium.EDWPremiumMasterCalculationPKId = SQ_Premium.PremiumMasterCalculationID AND LKP_ISSWorkTable_Premium.PremiumMasterDirectWrittenPremiumAmount = SQ_Premium.PremiumMasterPremium\n\tWHERE ISNULL(LKP_PremiumMasterCalculationID)\r\n-------------------Filter Premium is 0-------------------------\r\nAND ROUND(PremiumMasterPremium,2)<>0\r\n--------------------EDWP-4085---------------------------------\r\nand  NOT  IN(LTRIM(RTRIM(CoverageCode)),'MINE','COMPATT','CYBEXTEXP','NETSECLIAB','EXTREP')\r\n\r\n---CoverageCode != 'MINE'\r\n\r\n---Excluding coverage code COMPATT,CYBEXTEXP,NETSECLIAB,EXTREP as part of Cyber One project Requirement\n),\nEXP_Cleansing_Premium AS (\n\tSELECT\n\tPremiumMasterCalculationID AS i_PremiumMasterCalculationID,\n\tPremiumMasterRunDate AS i_PremiumMasterRunDate,\n\tpol_key AS i_pol_key,\n\tprim_bus_class_code AS i_prim_bus_class_code,\n\tStateProvinceCode AS i_StateProvinceCode,\n\tPremiumTransactionBookedDate AS i_PremiumTransactionBookedDate,\n\tPremiumMasterSubLine AS i_PremiumMasterSubLine,\n\tClassCode AS i_ClassCode,\n\tRiskTerritory AS i_RiskTerritory,\n\tpol_eff_date AS i_pol_eff_date,\n\tPremiumMasterPremium AS i_PremiumMasterPremium,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tRiskUnitGroup AS i_RiskUnitGroup,\n\tSourceSystemID AS i_SourceSystemID,\n\tPremiumMasterTransactionCode AS i_PremiumMasterTransactionCode,\n\tPremiumMasterReasonAmendedCode AS i_PremiumMasterReasonAmendedCode,\n\tRiskType AS i_RiskType,\n\tConstructionCode AS i_ConstructionCode,\n\tIsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tBureauCode1 AS i_BureauCode1,\n\tpol_exp_date AS i_pol_exp_date,\n\tasl_num AS i_asl_num,\n\tExposureBasis AS i_ExposureBasis,\n\t-- *INF*: IIF(i_PremiumMasterCalculationID<0,-1,i_PremiumMasterCalculationID)\n\tIFF(i_PremiumMasterCalculationID < 0, - 1, i_PremiumMasterCalculationID) AS o_PremiumMasterCalculationID,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\t-- *INF*: RTRIM(LTRIM(i_pol_key))\n\tRTRIM(LTRIM(i_pol_key)) AS o_pol_key,\n\t-- *INF*: RTRIM(LTRIM(i_prim_bus_class_code))\n\tRTRIM(LTRIM(i_prim_bus_class_code)) AS o_prim_bus_class_code,\n\t-- *INF*: RTRIM(LTRIM(i_StateProvinceCode))\n\tRTRIM(LTRIM(i_StateProvinceCode)) AS o_StateProvinceCode,\n\ti_PremiumTransactionBookedDate AS o_PremiumTransactionBookedDate,\n\t-- *INF*: RTRIM(LTRIM(i_PremiumMasterSubLine))\n\tRTRIM(LTRIM(i_PremiumMasterSubLine)) AS o_PremiumMasterSubLine,\n\t-- *INF*: RTRIM(LTRIM(i_ClassCode))\n\tRTRIM(LTRIM(i_ClassCode)) AS o_ClassCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskTerritory))\n\tRTRIM(LTRIM(i_RiskTerritory)) AS o_RiskTerritory,\n\ti_pol_eff_date AS o_pol_eff_date,\n\t-- *INF*: IIF( IN(i_PremiumMasterTransactionCode, '10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67') AND  NOT IN(i_PremiumMasterReasonAmendedCode, 'COL' , 'CWO'), i_PremiumMasterPremium, 0)\n\tIFF(\n\t    i_PremiumMasterTransactionCode IN ('10','11','12','13','14','15','18','19','20','21','22','23','24','25','28','29','30','31','57','67')\n\t    and NOT i_PremiumMasterReasonAmendedCode IN ('COL','CWO'),\n\t    i_PremiumMasterPremium,\n\t    0\n\t) AS o_PremiumMasterPremium,\n\t-- *INF*: RTRIM(LTRIM(i_TypeBureauCode))\n\tRTRIM(LTRIM(i_TypeBureauCode)) AS o_TypeBureauCode,\n\t-- *INF*: RTRIM(LTRIM(i_RiskUnitGroup))\n\tRTRIM(LTRIM(i_RiskUnitGroup)) AS o_RiskUnitGroup,\n\t-- *INF*: LTRIM(RTRIM(i_SourceSystemID))\n\tLTRIM(RTRIM(i_SourceSystemID)) AS o_SourceSystemID,\n\t-- *INF*: LTRIM(RTRIM(i_RiskType))\n\tLTRIM(RTRIM(i_RiskType)) AS o_RiskType,\n\t-- *INF*: RTRIM(LTRIM(i_ConstructionCode))\n\tRTRIM(LTRIM(i_ConstructionCode)) AS o_ConstructionCode,\n\t-- *INF*: RTRIM(LTRIM(i_IsoFireProtectionCode))\n\tRTRIM(LTRIM(i_IsoFireProtectionCode)) AS o_IsoFireProtectionCode,\n\t-- *INF*: RTRIM(LTRIM(i_BureauCode1))\n\tRTRIM(LTRIM(i_BureauCode1)) AS o_BureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\ti_pol_exp_date AS o_pol_exp_date,\n\ti_asl_num AS o_AnnualStatementLineNumber,\n\tInsuranceSegmentCode,\n\tPremiumMasterExposure,\n\tCoverageCode,\n\tPolicyPerOccurenceLimit,\n\tZipPostalCode AS i_ZipPostalCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ZipPostalCode) AS o_ZipPostalCode,\n\tSprinklerFlag,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_ExposureBasis)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_ExposureBasis) AS o_ExposureBasis,\n\tPremiumTransactionEffectiveDate,\n\tLocationNumber,\n\tBuildingNumber,\n\tPremiumTransactionAKID\n\tFROM FIL_Exists_Premium\n),\nEXP_Logic_Premium AS (\n\tSELECT\n\t-1 AS LossMasterCalculationId,\n\to_PremiumMasterCalculationID AS PremiumMasterCalculationID,\n\to_PremiumMasterRunDate AS PremiumMasterRunDate,\n\t-- *INF*: TO_DATE('1800-01-01','YYYY/MM/DD')\n\tTO_TIMESTAMP('1800-01-01', 'YYYY/MM/DD') AS loss_master_run_date,\n\to_pol_key AS pol_key,\n\to_prim_bus_class_code AS prim_bus_class_code,\n\to_StateProvinceCode AS StateProvinceCode,\n\to_PremiumTransactionBookedDate AS PremiumTransactionBookedDate,\n\to_PremiumMasterSubLine AS PremiumMasterSubLine,\n\t-- *INF*: DECODE(TRUE,PremiumMasterSubLine='025','027',PremiumMasterSubLine)\n\tDECODE(\n\t    TRUE,\n\t    PremiumMasterSubLine = '025', '027',\n\t    PremiumMasterSubLine\n\t) AS sub_line_code_out,\n\to_ClassCode AS ClassCode,\n\t-- *INF*: IIF(ISNULL(ClassCode) OR IS_SPACES(ClassCode) OR LENGTH(ClassCode)=0 OR IN(ClassCode, 'N/A','TBD'),\r\n\t-- '00000',\r\n\t-- LPAD(ClassCode, 5, '0')\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- --IIF(ISNULL(ClassCode) OR LENGTH(ClassCode)=0,'N/A',ClassCode)\n\tIFF(\n\t    ClassCode IS NULL\n\t    or LENGTH(ClassCode)>0\n\t    and TRIM(ClassCode)=''\n\t    or LENGTH(ClassCode) = 0\n\t    or ClassCode IN ('N/A','TBD'),\n\t    '00000',\n\t    LPAD(ClassCode, 5, '0')\n\t) AS PremiumMasterClassCode,\n\t'N/A' AS LossMasterClassCode,\n\t'N/A' AS Cause_of_Loss,\n\to_RiskTerritory AS RiskTerritory,\n\t-- *INF*: RiskTerritory\r\n\t-- \r\n\t-- --SUBSTR(RiskTerritory,2,2)\n\tRiskTerritory AS TerritoryCode,\n\to_pol_eff_date AS pol_eff_date,\n\t'N/A' AS ClaimNum,\n\t'N/A' AS ClaimantNum,\n\to_PremiumMasterPremium AS PremiumMasterPremium,\n\t-- *INF*: ROUND(PremiumMasterPremium,2)\n\tROUND(PremiumMasterPremium, 2) AS PremiumMasterPremium_out,\n\t0.00 AS PaidLossAmt,\n\t0.00 AS OutstandingAmt,\n\to_TypeBureauCode AS TypeBureauCode,\n\to_RiskUnitGroup AS RiskUnitGroup,\n\to_SourceSystemID AS SourceSystemID,\n\to_RiskType AS RiskType,\n\to_BureauCode1 AS BureauCode1,\n\tBureauCode2,\n\tBureauCode4,\n\tCoverageCode,\n\to_ConstructionCode AS ConstructionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(ConstructionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(ConstructionCode) AS ConstructionCode_out,\n\to_IsoFireProtectionCode AS IsoFireProtectionCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(IsoFireProtectionCode) AS IsoFireProtectionCode_out,\n\to_pol_exp_date AS pol_exp_date,\n\to_AnnualStatementLineNumber AS AnnualStatementLineNumber,\n\tInsuranceSegmentCode,\n\tPremiumMasterExposure,\n\t-- *INF*: '0'\r\n\t-- --This is hardcoded to 0 zero as the coverage limit has been removed from Src and then made it as lookup\n\t'0' AS InsuranceLineLimit,\n\tPolicyPerOccurenceLimit,\n\to_ZipPostalCode AS ZipPostalCode,\n\tSprinklerFlag,\n\to_ExposureBasis AS ExposureBasis,\n\tPremiumTransactionEffectiveDate,\n\tLocationNumber,\n\tBuildingNumber,\n\tPremiumTransactionAKID\n\tFROM EXP_Cleansing_Premium\n),\nUnion AS (\n\tSELECT LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode, LossMasterClassCode, Cause_of_Loss, TerritoryCode, pol_eff_date, ClaimNum, ClaimantNum, PremiumMasterPremium_out AS PremiumMasterPremium, PaidLossAmt, OutstandingAmt, TypeBureauCode, RiskUnitGroup, SourceSystemID, RiskType, CoverageCode, ConstructionCode_out AS ConstructionCode, IsoFireProtectionCode_out AS IsoFireProtectionCode, pol_exp_date AS PolicyExpirationDate, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, InsuranceSegmentCode, PremiumMasterExposure, PolicyPerOccurenceLimit AS PolicyLimit, ZipPostalCode, SprinklerFlag, ExposureBasis, InsuranceLineLimit, PremiumTransactionEffectiveDate, LocationNumber, BuildingNumber, PremiumTransactionAKID\n\tFROM EXP_Logic_Premium\n\tUNION\n\tSELECT loss_master_calculation_id AS LossMasterCalculationId, PremiumMasterCalculationID, PremiumMasterRunDate, loss_master_run_date, pol_key, prim_bus_class_code, StateProvinceCode, sub_line_code_out AS sub_line_code, PremiumMasterClassCode_out AS PremiumMasterClassCode, LossMasterClassCode_out AS LossMasterClassCode, cause_of_loss_out AS Cause_of_Loss, TerritoryCode_out AS TerritoryCode, pol_eff_date, ClaimNum, claimant_num AS ClaimantNum, PremiumMasterPremium, PaidLossAmount AS PaidLossAmt, OutstandingLossAmount AS OutstandingAmt, TypeBureauCode, RiskUnitGroup, PolicySourceID AS SourceSystemID, RiskType, CoverageCode, ConstructionCode, IsoFireProtectionCode, pol_exp_date AS PolicyExpirationDate, InceptionToDatePaidLossAmount, claim_coverage_detail_ak_id AS ClaimCoverageID, AnnualStatementLineNumber, BureauCode1, BureauCode2, BureauCode4, InsuranceSegmentCode, exposure AS PremiumMasterExposure, claim_loss_date, direct_alae_paid_including_recoveries, direct_loss_outstanding_excluding_recoveries, PolicyLimit, ZipPostalCode, SprinklerFlag, o_ExposureBasis AS ExposureBasis, InsuranceLineLimit, LocationNumber, BuildingNumber, PremiumTransactionAKID\n\tFROM EXP_Logic_Loss\n),\nEXP_ConstCode_IsoPC_Rules AS (\n\tSELECT\n\tsub_line_code AS i_sub_line_code,\n\tConstructionCode AS i_ConstructionCode,\n\tCoverageCode AS i_CoverageCode,\n\tIsoFireProtectionCode AS i_IsoFireProtectionCode,\n\t-- *INF*: DECODE\r\n\t-- (TRUE,\r\n\t-- in(i_ConstructionCode,'N/A',null),'N/A',\r\n\t-- i_ConstructionCode\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_ConstructionCode IN ('N/A',null), 'N/A',\n\t    i_ConstructionCode\n\t) AS v_ConstructionCode,\n\t-- *INF*: i_IsoFireProtectionCode\r\n\t-- \r\n\t-- --DECODE(TRUE,\r\n\t-- --i_IsoFireProtectionCode='N/A' and in--(i_sub_line_code,'010','015','016','017','018'),'10',\r\n\t-- --i_IsoFireProtectionCode='N/A', '00',\r\n\t-- --i_IsoFireProtectionCode='1', '01',\r\n\t-- --in (i_IsoFireProtectionCode,'2','20'),'02',\r\n\t-- --in (i_IsoFireProtectionCode,'3','13','30'),'03',\r\n\t-- --i_IsoFireProtectionCode='4','04',\r\n\t-- --i_IsoFireProtectionCode='5','05',\r\n\t-- --i_IsoFireProtectionCode='6','06',\r\n\t-- --i_IsoFireProtectionCode='7','07',\r\n\t-- --i_IsoFireProtectionCode='8','08',\r\n\t-- --in(i_IsoFireProtectionCode,'9','92','97'),'09',\r\n\t-- --i_IsoFireProtectionCode='12','10',\r\n\t-- --in(i_IsoFireProtectionCode,'OR','O4'),'04',\r\n\t-- --i_IsoFireProtectionCode='8B','19',\r\n\t-- --i_IsoFireProtectionCode='96','06',\r\n\t-- --i_IsoFireProtectionCode\r\n\t-- --)\r\n\t-- \n\ti_IsoFireProtectionCode AS v_IsoFireProtectionCode,\n\t-- *INF*: iif(in(i_CoverageCode,'BLDG','BLDGFUNCVAL','BLDRSK','BLKBC',\r\n\t-- 'BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT',\r\n\t-- 'LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO'),i_IsoFireProtectionCode,'00')\n\tIFF(\n\t    i_CoverageCode IN ('BLDG','BLDGFUNCVAL','BLDRSK','BLKBC','BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT','LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO'),\n\t    i_IsoFireProtectionCode,\n\t    '00'\n\t) AS v_IsoFireProtectionCode_BO,\n\tv_ConstructionCode AS o_ConstructionCode,\n\tv_IsoFireProtectionCode_BO AS o_IsoFireProtectionCode\n\tFROM Union\n),\nEXP_GetLimits AS (\n\tSELECT\n\tPremiumTransactionAKID AS i_PremiumTransactionAKID,\n\tCoverageCode AS i_CoverageCode,\n\t-- *INF*: DECODE(TRUE, i_LossMasterCalculationId = -1 AND UPPER(i_CoverageCode)='BLKBC',:LKP.LKP_BLANKETCOVERAGELIMIT(i_PremiumTransactionAKID),\r\n\t-- i_LossMasterCalculationId = -1 AND  IN ( UPPER(i_CoverageCode),'BLDG','BLDGFUNCVAL','BLDRSK','BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT','LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO')=1, :LKP.LKP_COVERAGELIMITNONBLANKET(i_PremiumTransactionAKID),\r\n\t-- i_LossMasterCalculationId != -1, i_InsuranceLineLimit,\r\n\t-- '0')\r\n\t-- \r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    i_LossMasterCalculationId = - 1 AND UPPER(i_CoverageCode) = 'BLKBC', LKP_BLANKETCOVERAGELIMIT_i_PremiumTransactionAKID.BlanketLimit,\n\t    i_LossMasterCalculationId = - 1 AND UPPER(i_CoverageCode) IN ('BLDG','BLDGFUNCVAL','BLDRSK','BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT','LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO') = 1, LKP_COVERAGELIMITNONBLANKET_i_PremiumTransactionAKID.NonBlanketLimit,\n\t    i_LossMasterCalculationId != - 1, i_InsuranceLineLimit,\n\t    '0'\n\t) AS v_LookupLimt,\n\t-- *INF*: IIF(ISNULL(v_LookupLimt),'0',v_LookupLimt)\n\tIFF(v_LookupLimt IS NULL, '0', v_LookupLimt) AS o_InsuranceLineLimit,\n\tLossMasterCalculationId AS i_LossMasterCalculationId,\n\tInsuranceLineLimit AS i_InsuranceLineLimit\n\tFROM Union\n\tLEFT JOIN LKP_BLANKETCOVERAGELIMIT LKP_BLANKETCOVERAGELIMIT_i_PremiumTransactionAKID\n\tON LKP_BLANKETCOVERAGELIMIT_i_PremiumTransactionAKID.PremiumTransactionAKID = i_PremiumTransactionAKID\n\n\tLEFT JOIN LKP_COVERAGELIMITNONBLANKET LKP_COVERAGELIMITNONBLANKET_i_PremiumTransactionAKID\n\tON LKP_COVERAGELIMITNONBLANKET_i_PremiumTransactionAKID.PremiumTransactionAKID = i_PremiumTransactionAKID\n\n),\nEXP_Values AS (\n\tSELECT\n\tUnion.LossMasterCalculationId AS i_LossMasterCalculationId,\n\tUnion.PremiumMasterCalculationID AS i_PremiumMasterCalculationID,\n\tUnion.PremiumMasterRunDate AS i_PremiumMasterRunDate,\n\tUnion.loss_master_run_date AS i_LossMasterRunDate,\n\tUnion.pol_key AS i_pol_key,\n\tUnion.prim_bus_class_code AS i_prim_bus_class_code,\n\tUnion.StateProvinceCode AS i_StateProvinceCode,\n\tUnion.sub_line_code AS i_sub_line_code,\n\tUnion.PremiumMasterClassCode AS i_PremiumMasterClassCode,\n\tUnion.LossMasterClassCode AS i_LossMasterClassCode,\n\tUnion.Cause_of_Loss AS i_Cause_of_Loss,\n\tUnion.TerritoryCode AS i_TerritoryCode,\n\tUnion.pol_eff_date AS i_pol_eff_date,\n\tUnion.ClaimNum AS i_ClaimNum,\n\tUnion.ClaimantNum AS i_ClaimantNum,\n\tUnion.PremiumMasterPremium AS i_PremiumMasterPremium,\n\tUnion.PaidLossAmt AS i_PaidLossAmt,\n\tUnion.OutstandingAmt AS i_OutstandingAmt,\n\tUnion.TypeBureauCode AS i_TypeBureauCode,\n\tUnion.SourceSystemID AS i_SourceSystemID,\n\tUnion.RiskType AS i_RiskType,\n\tEXP_ConstCode_IsoPC_Rules.i_CoverageCode,\n\tEXP_ConstCode_IsoPC_Rules.o_ConstructionCode AS i_ConstructionCode,\n\tEXP_ConstCode_IsoPC_Rules.o_IsoFireProtectionCode AS i_IsoFireProtectionCode,\n\tUnion.PolicyExpirationDate AS i_PolicyExpirationDate,\n\tUnion.InceptionToDatePaidLossAmount AS i_InceptionToDatePaidLossAmount,\n\tUnion.ClaimCoverageID AS i_ClaimCoverageID,\n\tUnion.AnnualStatementLineNumber AS i_AnnualStatementLineNumber,\n\tUnion.BureauCode1 AS i_BureauCode1,\n\tUnion.BureauCode2 AS i_BureauCode2,\n\tUnion.BureauCode4 AS i_BureauCode4,\n\tUnion.InsuranceSegmentCode AS i_InsuranceSegmentCode,\n\tUnion.PremiumMasterExposure AS i_PremiumMasterExposure,\n\tUnion.claim_loss_date AS i_claim_loss_date,\n\tUnion.direct_alae_paid_including_recoveries AS i_direct_alae_paid_including_recoveries,\n\tUnion.direct_loss_outstanding_excluding_recoveries AS i_direct_loss_outstanding_excluding_recoveries,\n\tUnion.PolicyLimit AS i_PolicyLimit,\n\tUnion.ZipPostalCode AS i_ZipPostalCode,\n\tUnion.SprinklerFlag AS i_SprinklerFlag,\n\tUnion.ExposureBasis AS i_ExposureBasis,\n\tEXP_GetLimits.o_InsuranceLineLimit AS i_InsuranceLineLimit,\n\tUnion.PremiumTransactionEffectiveDate AS i_PremiumTransactionEffectiveDate,\n\tUnion.LocationNumber AS i_LocationNUmber,\n\tUnion.BuildingNumber AS i_BuildingNumber,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TypeBureauCode='Property',\r\n\t-- DECODE(TRUE,\r\n\t-- i_RiskType='BLDG','01',\r\n\t-- i_RiskType='PP','02',\r\n\t-- 'N/A'\r\n\t-- ),\r\n\t-- \r\n\t-- i_TypeBureauCode='Crime',\r\n\t-- DECODE(TRUE,\r\n\t-- i_RiskType='ClientsProperty','200',\r\n\t-- i_RiskType='ClientsProperty_ETF','400',\r\n\t-- i_RiskType='ComputerFraud','200',\r\n\t-- i_RiskType='ComputerFraud_G','300',\r\n\t-- i_RiskType='EmployeeTheft','200',\r\n\t-- i_RiskType='EmployeeTheft_ETF','400',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition','200',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_ETF','400',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_G','300',\r\n\t-- i_RiskType='EmployeeTheftNameOrPosition_GETF','400',\r\n\t-- i_RiskType='EmployeeTheftPerEmployee','300',\r\n\t-- i_RiskType='EmployeeTheftPerEmployee_GETF','400',\r\n\t-- i_RiskType='EmployeeTheftPerLoss','300',\r\n\t-- i_RiskType='EmployeeTheftPerLoss_GETF','400',\r\n\t-- i_RiskType='ForgeryAndAlteration','200',\r\n\t-- i_RiskType='ForgeryAndAlteration_ETF','400',\r\n\t-- i_RiskType='ForgeryAndAlteration_G','300',\r\n\t-- i_RiskType='ForgeryAndAlteration_GETF','400',\r\n\t-- i_RiskType='FundsTransfer','200',\r\n\t-- i_RiskType='FundsTransfer_G','300',\r\n\t-- i_RiskType='GuestPropertyInsidePremises','200',\r\n\t-- i_RiskType='GuestPropertySafeDeposit','200',\r\n\t-- i_RiskType='InsideRobbery','200',\r\n\t-- i_RiskType='InsideRobbery_G','300',\r\n\t-- i_RiskType='InsideRobberyOther','200',\r\n\t-- i_RiskType='InsideRobberyOther_G','300',\r\n\t-- i_RiskType='InsideRobberySecurities','200',\r\n\t-- i_RiskType='InsideRobberySecurities_G','300',\r\n\t-- i_RiskType='InsideTheftMoney','200',\r\n\t-- i_RiskType='InsideTheftMoney_G','300',\r\n\t-- i_RiskType='InsideTheftProperty','200',\r\n\t-- i_RiskType='InsideTheftProperty_G','300',\r\n\t-- i_RiskType='MoneyOrders','200',\r\n\t-- i_RiskType='OutsidePremises','200',\r\n\t-- i_RiskType='OutsidePremises_G','300',\r\n\t-- 'N/A'\r\n\t-- ),\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'Property', DECODE(\n\t        TRUE,\n\t        i_RiskType = 'BLDG', '01',\n\t        i_RiskType = 'PP', '02',\n\t        'N/A'\n\t    ),\n\t    i_TypeBureauCode = 'Crime', DECODE(\n\t        TRUE,\n\t        i_RiskType = 'ClientsProperty', '200',\n\t        i_RiskType = 'ClientsProperty_ETF', '400',\n\t        i_RiskType = 'ComputerFraud', '200',\n\t        i_RiskType = 'ComputerFraud_G', '300',\n\t        i_RiskType = 'EmployeeTheft', '200',\n\t        i_RiskType = 'EmployeeTheft_ETF', '400',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition', '200',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_ETF', '400',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_G', '300',\n\t        i_RiskType = 'EmployeeTheftNameOrPosition_GETF', '400',\n\t        i_RiskType = 'EmployeeTheftPerEmployee', '300',\n\t        i_RiskType = 'EmployeeTheftPerEmployee_GETF', '400',\n\t        i_RiskType = 'EmployeeTheftPerLoss', '300',\n\t        i_RiskType = 'EmployeeTheftPerLoss_GETF', '400',\n\t        i_RiskType = 'ForgeryAndAlteration', '200',\n\t        i_RiskType = 'ForgeryAndAlteration_ETF', '400',\n\t        i_RiskType = 'ForgeryAndAlteration_G', '300',\n\t        i_RiskType = 'ForgeryAndAlteration_GETF', '400',\n\t        i_RiskType = 'FundsTransfer', '200',\n\t        i_RiskType = 'FundsTransfer_G', '300',\n\t        i_RiskType = 'GuestPropertyInsidePremises', '200',\n\t        i_RiskType = 'GuestPropertySafeDeposit', '200',\n\t        i_RiskType = 'InsideRobbery', '200',\n\t        i_RiskType = 'InsideRobbery_G', '300',\n\t        i_RiskType = 'InsideRobberyOther', '200',\n\t        i_RiskType = 'InsideRobberyOther_G', '300',\n\t        i_RiskType = 'InsideRobberySecurities', '200',\n\t        i_RiskType = 'InsideRobberySecurities_G', '300',\n\t        i_RiskType = 'InsideTheftMoney', '200',\n\t        i_RiskType = 'InsideTheftMoney_G', '300',\n\t        i_RiskType = 'InsideTheftProperty', '200',\n\t        i_RiskType = 'InsideTheftProperty_G', '300',\n\t        i_RiskType = 'MoneyOrders', '200',\n\t        i_RiskType = 'OutsidePremises', '200',\n\t        i_RiskType = 'OutsidePremises_G', '300',\n\t        'N/A'\n\t    ),\n\t    'N/A'\n\t) AS v_PolicyForm_DCT,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_TypeBureauCode = 'CR',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode4,'01','02','03'),'200',\r\n\t-- IN(i_BureauCode4,'11','12','13'),'300',\r\n\t-- IN(i_BureauCode4,'21','22','23','27','28'),'400',\r\n\t-- '200'),\r\n\t-- \r\n\t-- i_TypeBureauCode = 'BT',\r\n\t-- DECODE(TRUE,\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'01','02','03','04','05','06','09'),'120',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'07','08'),'190',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'10','20','26'),'170',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'),'110',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'31','32','39'),'130',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'42','43','44','45'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'45'),'111',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'47'),'121',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'48'),'131',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'49','41','42','43','44'),'140',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'51','59'),'150',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'52','53'),'141',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'54','55'),'151',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'56'),'161',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'57'),'171',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'58'),'181',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'60'),'191',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'61'),'160',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'62','63'),'192',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'64'),'112',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'67','68'),'142',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'69'),'152',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'70','71','72'),'180',\r\n\t-- IN(i_BureauCode1||i_BureauCode2,'73'),'122',\r\n\t-- '199'\r\n\t-- ),\r\n\t-- i_TypeBureauCode = 'FT','199',\r\n\t-- 'N/A')\n\tDECODE(\n\t    TRUE,\n\t    i_TypeBureauCode = 'CR', DECODE(\n\t        TRUE,\n\t        i_BureauCode4 IN ('01','02','03'), '200',\n\t        i_BureauCode4 IN ('11','12','13'), '300',\n\t        i_BureauCode4 IN ('21','22','23','27','28'), '400',\n\t        '200'\n\t    ),\n\t    i_TypeBureauCode = 'BT', DECODE(\n\t        TRUE,\n\t        i_BureauCode1 || i_BureauCode2 IN ('01','02','03','04','05','06','09'), '120',\n\t        i_BureauCode1 || i_BureauCode2 IN ('07','08'), '190',\n\t        i_BureauCode1 || i_BureauCode2 IN ('10','20','26'), '170',\n\t        i_BureauCode1 || i_BureauCode2 IN ('11','12','13','14','15','16','17','18','19','21','22','23','24','25','29','50'), '110',\n\t        i_BureauCode1 || i_BureauCode2 IN ('31','32','39'), '130',\n\t        i_BureauCode1 || i_BureauCode2 IN ('42','43','44','45'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('45'), '111',\n\t        i_BureauCode1 || i_BureauCode2 IN ('47'), '121',\n\t        i_BureauCode1 || i_BureauCode2 IN ('48'), '131',\n\t        i_BureauCode1 || i_BureauCode2 IN ('49','41','42','43','44'), '140',\n\t        i_BureauCode1 || i_BureauCode2 IN ('51','59'), '150',\n\t        i_BureauCode1 || i_BureauCode2 IN ('52','53'), '141',\n\t        i_BureauCode1 || i_BureauCode2 IN ('54','55'), '151',\n\t        i_BureauCode1 || i_BureauCode2 IN ('56'), '161',\n\t        i_BureauCode1 || i_BureauCode2 IN ('57'), '171',\n\t        i_BureauCode1 || i_BureauCode2 IN ('58'), '181',\n\t        i_BureauCode1 || i_BureauCode2 IN ('60'), '191',\n\t        i_BureauCode1 || i_BureauCode2 IN ('61'), '160',\n\t        i_BureauCode1 || i_BureauCode2 IN ('62','63'), '192',\n\t        i_BureauCode1 || i_BureauCode2 IN ('64'), '112',\n\t        i_BureauCode1 || i_BureauCode2 IN ('67','68'), '142',\n\t        i_BureauCode1 || i_BureauCode2 IN ('69'), '152',\n\t        i_BureauCode1 || i_BureauCode2 IN ('70','71','72'), '180',\n\t        i_BureauCode1 || i_BureauCode2 IN ('73'), '122',\n\t        '199'\n\t    ),\n\t    i_TypeBureauCode = 'FT', '199',\n\t    'N/A'\n\t) AS v_PolicyForm_PMS,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_SourceSystemID='PMS',v_PolicyForm_PMS,\r\n\t-- IN(i_SourceSystemID,'DCT','DUC'),v_PolicyForm_DCT\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    i_SourceSystemID = 'PMS', v_PolicyForm_PMS,\n\t    i_SourceSystemID IN ('DCT','DUC'), v_PolicyForm_DCT\n\t) AS v_PolicyForm,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSYSDATE AS o_CreatedDate,\n\ti_PremiumMasterCalculationID AS o_PremiumMasterCalculationID,\n\ti_LossMasterCalculationId AS o_LossMasterCalculationId,\n\ti_TypeBureauCode AS o_TypeBureauCode,\n\t'09' AS o_BureauLineOfInsurance,\n\t-- *INF*: --Fix for EDWP-3967\r\n\t-- '0731'\r\n\t-- --'0761'\n\t'0731' AS o_BureauCompanyNumber,\n\ti_StateProvinceCode AS o_StateProvinceCode,\n\ti_PremiumMasterRunDate AS o_PremiumMasterRunDate,\n\ti_LossMasterRunDate AS o_LossMasterRunDate,\n\ti_pol_key AS o_pol_key,\n\ti_PremiumMasterClassCode AS o_PremiumMasterClassCode,\n\ti_LossMasterClassCode AS o_LossMasterClassCode,\n\ti_ClaimNum AS o_ClaimNum,\n\ti_ClaimantNum AS o_ClaimantNum,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_TerritoryCode)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_TerritoryCode) AS o_RiskTerritoryCode,\n\ti_pol_eff_date AS o_PolicyEffectiveDate,\n\t-- *INF*: i_Cause_of_Loss\r\n\t-- --DECODE(TRUE,IN(i_Cause_of_Loss,'11','21','31','41','51','61','71','81','91'),'01',\r\n\t-- --IN(i_Cause_of_Loss,'12','22','32','42','52','62','72','82','92','97'),'02',\r\n\t-- --IN(i_Cause_of_Loss,'05','15','25','35','45','55','65','75','85','95'),'03',\r\n\t-- --IN(i_Cause_of_Loss,'14','24','34','44','54','64','74','84','94'),'04',\r\n\t-- --IN(i_Cause_of_Loss,'08','18','28','38','48','58','68','88','98'),'05',\r\n\t-- --IN(i_Cause_of_Loss,'16','26','36','46','56','66','76','86','96'),'06',\r\n\t-- --IN(i_Cause_of_Loss,'17','27','37','47','57','67','87'),'07',\r\n\t-- --IN(i_Cause_of_Loss,'03','13','23','33','43','53','63','73','83','93'),'08',\r\n\t-- --IN(i_Cause_of_Loss,'19','29','39','49','59','69','77','79','89','99'),'09',i_Cause_of_Loss)\n\ti_Cause_of_Loss AS o_CauseOfLoss,\n\ti_CoverageCode AS o_CoverageCode,\n\ti_IsoFireProtectionCode AS o_ISOFireProtectionCode,\n\t'2' AS o_TypeOfPolicyForm,\n\ti_PremiumMasterPremium AS o_PremiumMasterDirectWrittenPremiumAmount,\n\ti_PaidLossAmt AS o_PaidLossAmount,\n\ti_OutstandingAmt AS o_OutstandingLossAmount,\n\ti_PolicyExpirationDate AS o_PolicyExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_InceptionToDatePaidLossAmount), 0, i_InceptionToDatePaidLossAmount)\n\tIFF(i_InceptionToDatePaidLossAmount IS NULL, 0, i_InceptionToDatePaidLossAmount) AS o_InceptionToDatePaidLossAmount,\n\t-- *INF*: IIF(ISNULL(i_ClaimCoverageID), -1, i_ClaimCoverageID)\n\tIFF(i_ClaimCoverageID IS NULL, - 1, i_ClaimCoverageID) AS o_ClaimCoverageID,\n\ti_AnnualStatementLineNumber AS o_AnnualStatementLineNumber,\n\t-- *INF*: Decode(True,  isnull(i_PolicyLimit), 'N/A', Ltrim(rtrim(i_PolicyLimit)))\n\tDecode(\n\t    True,\n\t    i_PolicyLimit IS NULL, 'N/A',\n\t    Ltrim(rtrim(i_PolicyLimit))\n\t) AS o_PolicyLimit,\n\t-- *INF*: IIF( i_CoverageCode='RSKLIAB', i_ExposureBasis, 'N/A')\r\n\t-- \r\n\t-- --'N/A'\n\tIFF(i_CoverageCode = 'RSKLIAB', i_ExposureBasis, 'N/A') AS o_ExposureBasis,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- NOT IN(i_CoverageCode, 'BLDG', 'BLDGFUNCVAL', 'BLDRSK', 'BLKBC', 'BLKBLDG', 'BLKCON', 'BUSPTY', 'FUNCBPP', 'HYDROWC', 'IMPROV', 'IMPROVMNT', 'LLBBLDG', 'LLBPPTY', 'MISCPROP', 'MISCREALPROP', 'PERPTY', 'PPTYO'), 'N/A',\r\n\t-- i_ConstructionCode)\n\tDECODE(\n\t    TRUE,\n\t    NOT i_CoverageCode IN ('BLDG','BLDGFUNCVAL','BLDRSK','BLKBC','BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT','LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO'), 'N/A',\n\t    i_ConstructionCode\n\t) AS o_ConstructionCode,\n\t-- *INF*: DECODE(i_SprinklerFlag, 'T','YES',\r\n\t-- '1','YES',\r\n\t-- 'F','NO',\r\n\t-- '0','NO',\r\n\t-- 'N/A')\n\tDECODE(\n\t    i_SprinklerFlag,\n\t    'T', 'YES',\n\t    '1', 'YES',\n\t    'F', 'NO',\n\t    '0', 'NO',\n\t    'N/A'\n\t) AS v_SprinklerFlag,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- NOT IN(i_CoverageCode, 'BLDG', 'BLDGFUNCVAL', 'BLDRSK', 'BLKBC', 'BLKBLDG', 'BLKCON', 'BUSPTY', 'FUNCBPP', 'HYDROWC', 'IMPROV', 'IMPROVMNT', 'LLBBLDG', 'LLBPPTY', 'MISCPROP', 'MISCREALPROP', 'PERPTY', 'PPTYO'), 'N/A',\r\n\t-- v_SprinklerFlag)\n\tDECODE(\n\t    TRUE,\n\t    NOT i_CoverageCode IN ('BLDG','BLDGFUNCVAL','BLDRSK','BLKBC','BLKBLDG','BLKCON','BUSPTY','FUNCBPP','HYDROWC','IMPROV','IMPROVMNT','LLBBLDG','LLBPPTY','MISCPROP','MISCREALPROP','PERPTY','PPTYO'), 'N/A',\n\t    v_SprinklerFlag\n\t) AS o_SprinklerFlag,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_InsuranceLineLimit)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_InsuranceLineLimit) AS o_LimitOfInsurance,\n\t-- *INF*: IIF(ISNULL(i_PremiumMasterExposure), 0,i_PremiumMasterExposure )\r\n\t-- \n\tIFF(i_PremiumMasterExposure IS NULL, 0, i_PremiumMasterExposure) AS v_PremiumMasterExposure_1,\n\t-- *INF*: IIF(i_CoverageCode = 'RSKLIAB',v_PremiumMasterExposure_1,0)\n\tIFF(i_CoverageCode = 'RSKLIAB', v_PremiumMasterExposure_1, 0) AS v_PremiumMasterExposure_2,\n\t-- *INF*: IIF(v_PremiumMasterExposure_2 > 0 AND i_PremiumMasterPremium < 0, (v_PremiumMasterExposure_2 * -1), v_PremiumMasterExposure_2)\n\tIFF(\n\t    v_PremiumMasterExposure_2 > 0 AND i_PremiumMasterPremium < 0,\n\t    (v_PremiumMasterExposure_2 * - 1),\n\t    v_PremiumMasterExposure_2\n\t) AS o_PremiumMasterExposure,\n\t-- *INF*: IIF(ISNULL(i_direct_alae_paid_including_recoveries),0,i_direct_alae_paid_including_recoveries)\n\tIFF(\n\t    i_direct_alae_paid_including_recoveries IS NULL, 0, i_direct_alae_paid_including_recoveries\n\t) AS o_PaidAllocatedLossAdjustmentExpenseAmount,\n\t-- *INF*: IIF(ISNULL(i_direct_loss_outstanding_excluding_recoveries),0,i_direct_loss_outstanding_excluding_recoveries)\n\tIFF(\n\t    i_direct_loss_outstanding_excluding_recoveries IS NULL, 0,\n\t    i_direct_loss_outstanding_excluding_recoveries\n\t) AS o_OutstandingAllocatedLossAdjustmentExpenseAmount,\n\t-- *INF*: IIF(ISNULL(i_claim_loss_date),TO_DATE('18000101','YYYYMMDD'),i_claim_loss_date)\n\tIFF(i_claim_loss_date IS NULL, TO_TIMESTAMP('18000101', 'YYYYMMDD'), i_claim_loss_date) AS o_ClaimLossDate,\n\ti_ZipPostalCode AS o_ZipPostalCode,\n\t-- *INF*: IIF(ISNULL(i_PremiumTransactionEffectiveDate),TO_DATE('18000101','YYYYMMDD'),i_PremiumTransactionEffectiveDate)\n\tIFF(\n\t    i_PremiumTransactionEffectiveDate IS NULL, TO_TIMESTAMP('18000101', 'YYYYMMDD'),\n\t    i_PremiumTransactionEffectiveDate\n\t) AS o_PremiumTransactionEffectiveDate1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_prim_bus_class_code)\n\tUDF_DEFAULT_VALUE_FOR_STRINGS(i_prim_bus_class_code) AS o_prim_bus_class_code,\n\ti_LocationNUmber AS o_LocationNumber,\n\ti_BuildingNumber AS o_BuildingNumber\n\tFROM EXP_ConstCode_IsoPC_Rules\n\t -- Manually join with EXP_GetLimits\n\t -- Manually join with Union\n),\nFIL_ASL AS (\n\tSELECT\n\to_AuditID AS AuditID, \n\to_CreatedDate AS CreatedDate, \n\to_PremiumMasterCalculationID AS PremiumMasterCalculationID, \n\to_LossMasterCalculationId AS LossMasterCalculationId, \n\to_TypeBureauCode AS TypeBureauCode, \n\to_BureauLineOfInsurance AS BureauLineOfInsurance, \n\to_BureauCompanyNumber AS BureauCompanyNumber, \n\to_StateProvinceCode AS StateProvinceCode, \n\to_PremiumMasterRunDate AS PremiumMasterRunDate, \n\to_LossMasterRunDate AS LossMasterRunDate, \n\to_pol_key AS pol_key, \n\to_PremiumMasterClassCode AS PremiumMasterClassCode, \n\to_LossMasterClassCode AS LossMasterClassCode, \n\to_ClaimNum AS ClaimNum, \n\to_ClaimantNum AS ClaimantNum, \n\to_RiskTerritoryCode AS RiskTerritoryCode, \n\to_PolicyEffectiveDate AS PolicyEffectiveDate, \n\to_CauseOfLoss AS CauseOfLoss, \n\to_CoverageCode AS CoverageCode, \n\to_ISOFireProtectionCode AS ISOFireProtectionCode, \n\to_TypeOfPolicyForm AS TypeOfPolicyForm, \n\to_PremiumMasterDirectWrittenPremiumAmount AS PremiumMasterDirectWrittenPremiumAmount, \n\to_PaidLossAmount AS PaidLossAmount, \n\to_OutstandingLossAmount AS OutstandingLossAmount, \n\to_PolicyExpirationDate AS PolicyExpirationDate, \n\to_InceptionToDatePaidLossAmount AS InceptionToDatePaidLossAmount, \n\to_ClaimCoverageID AS ClaimCoverageID, \n\to_AnnualStatementLineNumber AS AnnualStatementLineNumber, \n\to_PolicyLimit AS PolicyLimit, \n\to_ExposureBasis AS ExposureBasis, \n\to_ConstructionCode AS ConstructionCode, \n\to_SprinklerFlag AS SprinklerFlag, \n\to_LimitOfInsurance AS LimitOfInsurance, \n\to_PremiumMasterExposure AS PremiumMasterExposure, \n\to_PaidAllocatedLossAdjustmentExpenseAmount AS PaidAllocatedLossAdjustmentExpenseAmount, \n\to_OutstandingAllocatedLossAdjustmentExpenseAmount AS OutstandingAllocatedLossAdjustmentExpenseAmount, \n\to_ClaimLossDate AS ClaimLossDate, \n\to_ZipPostalCode AS ZipPostalCode, \n\to_PremiumTransactionEffectiveDate1 AS PremiumTransactionEffectiveDate1, \n\to_prim_bus_class_code AS prim_bus_class_code, \n\to_LocationNumber AS LocationNumber, \n\to_BuildingNumber AS BuildingNumber\n\tFROM EXP_Values\n\tWHERE (NOT  in (AnnualStatementLineNumber,'9','17.2','27')) AND (NOT IN (CoverageCode,'DATACOMP','BOILER - BRK'))\n),\nISSBusinessOwnersExtract AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.ISSBusinessOwnersExtract\n\t(AuditId, CreatedDate, EDWPremiumMasterCalculationPKId, EDWLossMasterCalculationPKId, TypeBureauCode, BureauLineOfInsurance, BureauCompanyNumber, StateProvinceCode, PremiumMasterRunDate, LossMasterRunDate, PolicyKey, PremiumMasterClassCode, LossMasterClassCode, ClaimNumber, ClaimantNumber, RiskTerritoryCode, PolicyEffectiveDate, CauseOfLoss, CoverageCode, ISOFireProtectionCode, TypeOfPolicyForm, PremiumMasterDirectWrittenPremiumAmount, PaidLossAmount, OutstandingLossAmount, PolicyExpirationDate, InceptionToDatePaidLossAmount, ClaimantCoverageDetailId, AnnualStatementLineNumber, PolicyLimit, ExposureBasis, ConstructionCode, SprinklerFlag, LimitOfInsurance, WrittenExposure, PaidAllocatedLossAdjustmentExpenseAmount, OutstandingAllocatedLossAdjustmentExpenseAmount, ClaimLossDate, ZipPostalCode, TransactionEffectiveDate, BusinessClassificationCode, LocationNumber, BuildingNumber)\n\tSELECT \n\tAuditID AS AUDITID, \n\tCREATEDDATE, \n\tPremiumMasterCalculationID AS EDWPREMIUMMASTERCALCULATIONPKID, \n\tLossMasterCalculationId AS EDWLOSSMASTERCALCULATIONPKID, \n\tTYPEBUREAUCODE, \n\tBUREAULINEOFINSURANCE, \n\tBUREAUCOMPANYNUMBER, \n\tSTATEPROVINCECODE, \n\tPREMIUMMASTERRUNDATE, \n\tLOSSMASTERRUNDATE, \n\tpol_key AS POLICYKEY, \n\tPREMIUMMASTERCLASSCODE, \n\tLOSSMASTERCLASSCODE, \n\tClaimNum AS CLAIMNUMBER, \n\tClaimantNum AS CLAIMANTNUMBER, \n\tRISKTERRITORYCODE, \n\tPOLICYEFFECTIVEDATE, \n\tCAUSEOFLOSS, \n\tCOVERAGECODE, \n\tISOFIREPROTECTIONCODE, \n\tTYPEOFPOLICYFORM, \n\tPREMIUMMASTERDIRECTWRITTENPREMIUMAMOUNT, \n\tPAIDLOSSAMOUNT, \n\tOUTSTANDINGLOSSAMOUNT, \n\tPOLICYEXPIRATIONDATE, \n\tINCEPTIONTODATEPAIDLOSSAMOUNT, \n\tClaimCoverageID AS CLAIMANTCOVERAGEDETAILID, \n\tANNUALSTATEMENTLINENUMBER, \n\tPOLICYLIMIT, \n\tEXPOSUREBASIS, \n\tCONSTRUCTIONCODE, \n\tSPRINKLERFLAG, \n\tLIMITOFINSURANCE, \n\tPremiumMasterExposure AS WRITTENEXPOSURE, \n\tPAIDALLOCATEDLOSSADJUSTMENTEXPENSEAMOUNT, \n\tOUTSTANDINGALLOCATEDLOSSADJUSTMENTEXPENSEAMOUNT, \n\tCLAIMLOSSDATE, \n\tZIPPOSTALCODE, \n\tPremiumTransactionEffectiveDate1 AS TRANSACTIONEFFECTIVEDATE, \n\tprim_bus_class_code AS BUSINESSCLASSIFICATIONCODE, \n\tLOCATIONNUMBER, \n\tBUILDINGNUMBER\n\tFROM FIL_ASL\n),\nSQ_ISSBusinessOwnersExtract_Update_00000ClassCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0));\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS}+1, 0));\t--First day of current Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH IncorrectCodes\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.PremiumMasterClassCode AS CurrentClassCode,\r\n\t\tISS.CoverageCode, ISS.LocationNumber, ISS.BuildingNumber\r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE (ISS.CoverageCode NOT IN ('ADLINS', 'SELFSTRGSD', 'SELFSTRGCUST')\r\n\t\t\tAND ISS.PremiumMasterClassCode = '00000')\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate) \t--Returns previous quarter timeframe\r\n\t)\r\n\t\r\n\t\r\n\t\r\n\tSELECT DISTINCT IncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t(CASE\r\n\t\tWHEN IncorrectCodes.CurrentClassCode <> '00000'\r\n\t\tTHEN IncorrectCodes.CurrentClassCode\r\n\t\tELSE ISNULL(CorrectClassCode.ClassCode, 0)\r\n\tEND) AS PremiumMasterClassCode\r\n\tFROM IncorrectCodes AS IncorrectCodes\r\n\tLEFT JOIN(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey, \r\n\t\tISS.LocationNumber AS LocationNumber, \r\n\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\tISS.PremiumMasterClassCode AS ClassCode,\r\n\t\t(CASE \r\n\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\tTHEN \r\n\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\tELSE 0\r\n\t\tEND) \r\n\t\tAS RowNumber  \r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tINNER JOIN IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\tWHERE ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.PremiumMasterClassCode <> '00000'\t--Not replacing ClassCode w/ 00000\r\n\t\t\tAND ISS.CoverageCode NOT IN ('ADLINS', 'SELFSTRGSD', 'SELFSTRGCUST')\t--Not using ClassCodes where CoverageCode IN ADLINS, SELFSTRGSD, SELFSTRGCUST\r\n\t) AS CorrectClassCode\r\n\tON IncorrectCodes.PolicyKey = CorrectClassCode.PolicyKey\r\n\tAND CorrectClassCode.RowNumber = 1\r\n\tORDER BY ISSBusinessOwnersExtractId\n),\nFIL_Update_00000ClassCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPolicyKey, \n\tPremiumMasterClassCode\n\tFROM SQ_ISSBusinessOwnersExtract_Update_00000ClassCode\n\tWHERE PremiumMasterClassCode <> '0'\n),\nUPD_Update_00000ClassCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPremiumMasterClassCode\n\tFROM FIL_Update_00000ClassCode\n),\nISSBusinessOwnersExtract_Update_00000ClassCode AS (\n\tMERGE INTO ISSBusinessOwnersExtract AS T\n\tUSING UPD_Update_00000ClassCode AS S\n\tON T.ISSBusinessOwnersExtractId = S.ISSBusinessOwnersExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.PremiumMasterClassCode = S.PremiumMasterClassCode\n),\nSQ_ISSBusinessOwnersExtract_Update_00798ClassCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0));\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS}+1, 0));\t--First day of current Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH #IncorrectCodes\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.PremiumMasterClassCode AS CurrentClassCode,\r\n\t\tISS.LocationNumber AS LocationNumber,\r\n\t\tISS.BuildingNumber AS BuildingNumber\r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE ISS.PremiumMasterClassCode = '00798'\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate) \t--Returns previous quarter timeframe\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ClassCodeCase1 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\tISNULL(CorrectClassCode.ClassCode, 0) AS CorrectClassCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.PremiumMasterClassCode AS ClassCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND)\r\n\t\t\tAS SameLocationFirstBuilding  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.PremiumMasterClassCode NOT IN ('00000', '00798')\t--Not replacing ClassCode w/ 00000 or 00798\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectClassCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectClassCode.PolicyKey\r\n\t\tAND CorrectClassCode.SameLocationFirstBuilding = 1\r\n\t\tAND CorrectClassCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t#ClassCodeCase2 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\tISNULL(CorrectClassCode.ClassCode, 0) AS CorrectClassCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.PremiumMasterClassCode AS ClassCode,\r\n\t\t\t(ROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber))\r\n\t\t\tAS SameLocationAnyBuilding  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.PremiumMasterClassCode NOT IN ('00000', '00798')\t--Not replacing ClassCode w/ 00000 or 00798\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectClassCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectClassCode.PolicyKey\r\n\t\tAND CorrectClassCode.SameLocationAnyBuilding = 1\r\n\t\tAND CorrectClassCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t#ClassCodeCase3 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\tISNULL(CorrectClassCode.ClassCode, 0) AS CorrectClassCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.PremiumMasterClassCode AS ClassCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.PremiumMasterClassCode NOT IN ('00000', '00798')\t--Not replacing ClassCode w/ 00000 or 00798\r\n\t\t) AS CorrectClassCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectClassCode.PolicyKey\r\n\t\tAND CorrectClassCode.RowNumber = 1\r\n\t)\r\n\t\r\n\t\r\n\t\r\n\tSELECT ClassCodeCase1.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\tClassCodeCase1.PolicyKey AS PolicyKey,\r\n\t(CASE\r\n\t\tWHEN ClassCodeCase1.CorrectClassCode = '0'\r\n\t\tTHEN (CASE\r\n\t\t\t\tWHEN ClassCodeCase2.CorrectClassCode = '0'\r\n\t\t\t\tTHEN ClassCodeCase3.CorrectClassCode\r\n\t\t\t\tELSE ClassCodeCase2.CorrectClassCode\r\n\t\t\tEND)\r\n\t\tELSE ClassCodeCase1.CorrectClassCode\r\n\tEND) AS PremiumMasterClassCode\r\n\tFROM #ClassCodeCase1 AS ClassCodeCase1\r\n\tINNER JOIN #ClassCodeCase2 AS ClassCodeCase2\r\n\tON ClassCodeCase2.ISSBusinessOwnersExtractId = ClassCodeCase1.ISSBusinessOwnersExtractId\r\n\tINNER JOIN #ClassCodeCase3 AS ClassCodeCase3\r\n\tON ClassCodeCase3.ISSBusinessOwnersExtractId = ClassCodeCase1.ISSBusinessOwnersExtractId\r\n\tORDER BY ISSBusinessOwnersExtractId\n),\nFIL_Update_00798ClassCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPolicyKey, \n\tPremiumMasterClassCode\n\tFROM SQ_ISSBusinessOwnersExtract_Update_00798ClassCode\n\tWHERE PremiumMasterClassCode <> '0'\n),\nUPD_Update_00798ClassCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPremiumMasterClassCode\n\tFROM FIL_Update_00798ClassCode\n),\nISSBusinessOwnersExtract_Update_00798ClassCode AS (\n\tMERGE INTO ISSBusinessOwnersExtract AS T\n\tUSING UPD_Update_00798ClassCode AS S\n\tON T.ISSBusinessOwnersExtractId = S.ISSBusinessOwnersExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.PremiumMasterClassCode = S.PremiumMasterClassCode\n),\nSQ_ISSBusinessOwnersExtract_Update_SprinklerFlag AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0));\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS}+1, 0));\t--First day of current Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH #IncorrectCodes\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.SprinklerFlag AS CurrentSprinklerFlag,\r\n\t\tISS.CoverageCode AS CoverageCode,\r\n\t\tISS.LocationNumber AS LocationNumber,\r\n\t\tISS.BuildingNumber AS BuildingNumber\r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE (ISS.CoverageCode IN ('BLDG', 'BLDGFUNCVAL', 'BLDRSK', 'BLKBC', 'BLKBLDG', 'BLKCON', 'BUSPTY', 'FUNCBPP', 'HYDROWC', 'IMPROV', 'IMPROVMNT', 'LLBBLDG', 'LLBPPTY', 'MISCPROP', 'MISCREALPROP', 'PERPTY', 'PPTYO')\r\n\t\t\t\tAND ISS.SprinklerFlag = 'N/A')\r\n\t\tAND ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate) \t--Returns previous quarter timeframe\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#SprinklerCase1 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentSprinklerFlag <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentSprinklerFlag\r\n\t\t\tELSE ISNULL(CorrectSprinklerFlag.SprinklerFlag, 0)\r\n\t\tEND) AS CorrectSprinklerFlag\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.SprinklerFlag AS SprinklerFlag,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND)\r\n\t\t\tAS SameLocationFirstBuilding  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.SprinklerFlag <> 'N/A'\t--Not replacing SprinklerFlag w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectSprinklerFlag\r\n\t\tON IncorrectCodes.PolicyKey = CorrectSprinklerFlag.PolicyKey\r\n\t\tAND CorrectSprinklerFlag.SameLocationFirstBuilding = 1\r\n\t\tAND CorrectSprinklerFlag.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#SprinklerCase2 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentSprinklerFlag <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentSprinklerFlag\r\n\t\t\tELSE ISNULL(CorrectSprinklerFlag.SprinklerFlag, 0)\r\n\t\tEND) AS CorrectSprinklerFlag\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.SprinklerFlag AS SprinklerFlag,\r\n\t\t\t(ROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber))\r\n\t\t\tAS SameLocationAnyBuilding  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.SprinklerFlag <> 'N/A'\t--Not replacing SprinklerFlag w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectSprinklerFlag\r\n\t\tON IncorrectCodes.PolicyKey = CorrectSprinklerFlag.PolicyKey\r\n\t\tAND CorrectSprinklerFlag.SameLocationAnyBuilding = 1\r\n\t\tAND CorrectSprinklerFlag.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#SprinklerCase3 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentSprinklerFlag <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentSprinklerFlag\r\n\t\t\tELSE ISNULL(CorrectSprinklerFlag.SprinklerFlag, 0)\r\n\t\tEND) AS CorrectSprinklerFlag\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.SprinklerFlag AS SprinklerFlag,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.SprinklerFlag <> 'N/A'\t--Not replacing SprinklerFlag w/ N/A\r\n\t\t) AS CorrectSprinklerFlag\r\n\t\tON IncorrectCodes.PolicyKey = CorrectSprinklerFlag.PolicyKey\r\n\t\tAND CorrectSprinklerFlag.RowNumber = 1\r\n\t)\r\n\t\r\n\t\r\n\t\r\n\tSELECT SprinklerCase1.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\tSprinklerCase1.PolicyKey AS PolicyKey,\r\n\t(CASE\r\n\t\tWHEN SprinklerCase1.CorrectSprinklerFlag = '0'\r\n\t\tTHEN (CASE\r\n\t\t\t\tWHEN SprinklerCase2.CorrectSprinklerFlag = '0'\r\n\t\t\t\tTHEN SprinklerCase3.CorrectSprinklerFlag\r\n\t\t\t\tELSE SprinklerCase2.CorrectSprinklerFlag\r\n\t\t\tEND)\r\n\t\tELSE SprinklerCase1.CorrectSprinklerFlag\r\n\tEND) AS SprinklerFlag\r\n\tFROM #SprinklerCase1 AS SprinklerCase1\r\n\tINNER JOIN #SprinklerCase2 AS SprinklerCase2\r\n\tON SprinklerCase2.ISSBusinessOwnersExtractId = SprinklerCase1.ISSBusinessOwnersExtractId\r\n\tINNER JOIN #SprinklerCase3 AS SprinklerCase3\r\n\tON SprinklerCase3.ISSBusinessOwnersExtractId = SprinklerCase1.ISSBusinessOwnersExtractId\r\n\tORDER BY ISSBusinessOwnersExtractId\n),\nFIL_Update_SprinklerFlag AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPolicyKey, \n\tSprinklerFlag\n\tFROM SQ_ISSBusinessOwnersExtract_Update_SprinklerFlag\n\tWHERE SprinklerFlag <> '0'\n),\nUPD_Update_SprinklerFlag AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tSprinklerFlag\n\tFROM FIL_Update_SprinklerFlag\n),\nISSBusinessOwnersExtract_Update_SprinklerFlag AS (\n\tMERGE INTO ISSBusinessOwnersExtract AS T\n\tUSING UPD_Update_SprinklerFlag AS S\n\tON T.ISSBusinessOwnersExtractId = S.ISSBusinessOwnersExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.SprinklerFlag = S.SprinklerFlag\n),\nSQ_ISSBusinessOwnersExtract_Update_ConstructionCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0));\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS}+1, 0));\t--First day of current Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH #IncorrectCodes\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.ConstructionCode AS CurrentConstructionCode,\r\n\t\tISS.CoverageCode AS CoverageCode,\r\n\t\tISS.LocationNumber AS LocationNumber,\r\n\t\tISS.BuildingNumber AS BuildingNumber\r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE (ISS.CoverageCode IN ('BLDG', 'BLDGFUNCVAL', 'BLDRSK', 'BLKBC', 'BLKBLDG', 'BLKCON', 'BUSPTY', 'FUNCBPP', 'HYDROWC', 'IMPROV', 'IMPROVMNT', 'LLBBLDG', 'LLBPPTY', 'MISCPROP', 'MISCREALPROP', 'PERPTY', 'PPTYO')\r\n\t\t\t\tAND ISS.ConstructionCode = 'N/A')\r\n\t\tAND ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate) \t--Returns previous quarter timeframe\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ConstructionCase1 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentConstructionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentConstructionCode\r\n\t\t\tELSE ISNULL(CorrectConstructionCode.ConstructionCode, 0)\r\n\t\tEND) AS CorrectConstructionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ConstructionCode AS ConstructionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND)\r\n\t\t\tAS SameLocationFirstBuilding\r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.ConstructionCode <> 'N/A'\t--Not replacing ConstructionCode w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectConstructionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectConstructionCode.PolicyKey\r\n\t\tAND CorrectConstructionCode.SameLocationFirstBuilding = 1\r\n\t\tAND CorrectConstructionCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ConstructionCase2 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentConstructionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentConstructionCode\r\n\t\t\tELSE ISNULL(CorrectConstructionCode.ConstructionCode, 0)\r\n\t\tEND) AS CorrectConstructionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ConstructionCode AS ConstructionCode,\r\n\t\t\t(ROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber))\r\n\t\t\tAS SameLocationAnyBuilding  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.ConstructionCode <> 'N/A'\t--Not replacing ConstructionCode w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectConstructionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectConstructionCode.PolicyKey\r\n\t\tAND CorrectConstructionCode.SameLocationAnyBuilding = 1\r\n\t\tAND CorrectConstructionCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ConstructionCase3 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentConstructionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentConstructionCode\r\n\t\t\tELSE ISNULL(CorrectConstructionCode.ConstructionCode, 0)\r\n\t\tEND) AS CorrectConstructionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ConstructionCode AS ConstructionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.ConstructionCode <> 'N/A'\t--Not replacing ConstructionCode w/ N/A\r\n\t\t) AS CorrectConstructionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectConstructionCode.PolicyKey\r\n\t\tAND CorrectConstructionCode.RowNumber = 1\r\n\t)\r\n\t\r\n\t\r\n\t\r\n\tSELECT ConstructionCase1.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\tConstructionCase1.PolicyKey AS PolicyKey,\r\n\t(CASE\r\n\t\tWHEN ConstructionCase1.CorrectConstructionCode = '0'\r\n\t\tTHEN (CASE\r\n\t\t\t\tWHEN ConstructionCase2.CorrectConstructionCode = '0'\r\n\t\t\t\tTHEN ConstructionCase3.CorrectConstructionCode\r\n\t\t\t\tELSE ConstructionCase2.CorrectConstructionCode\r\n\t\t\tEND)\r\n\t\tELSE ConstructionCase1.CorrectConstructionCode\r\n\tEND) AS ConstructionCode\r\n\tFROM #ConstructionCase1 AS ConstructionCase1\r\n\tINNER JOIN #ConstructionCase2 AS ConstructionCase2\r\n\tON ConstructionCase2.ISSBusinessOwnersExtractId = ConstructionCase1.ISSBusinessOwnersExtractId\r\n\tINNER JOIN #ConstructionCase3 AS ConstructionCase3\r\n\tON ConstructionCase3.ISSBusinessOwnersExtractId = ConstructionCase1.ISSBusinessOwnersExtractId\r\n\tORDER BY ISSBusinessOwnersExtractId\n),\nEXP_Update_ConstructionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId,\n\tPolicyKey,\n\tConstructionCode AS i_ConstructionCode,\n\t-- *INF*: IIF(i_ConstructionCode = '0', :LKP.LKP_Update_ConstructionCode(PolicyKey),\r\n\t-- i_ConstructionCode)\n\tIFF(\n\t    i_ConstructionCode = '0', LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey.ConstructionCode,\n\t    i_ConstructionCode\n\t) AS v_ConstructionCode,\n\t-- *INF*: IIF(NOT ISNULL(v_ConstructionCode),\r\n\t-- v_ConstructionCode, '0')\n\tIFF(v_ConstructionCode IS NOT NULL, v_ConstructionCode, '0') AS o_ConstructionCode\n\tFROM SQ_ISSBusinessOwnersExtract_Update_ConstructionCode\n\tLEFT JOIN LKP_UPDATE_CONSTRUCTIONCODE LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey\n\tON LKP_UPDATE_CONSTRUCTIONCODE_PolicyKey.PolicyKey = PolicyKey\n\n),\nFIL_Update_ConstructionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPolicyKey, \n\to_ConstructionCode AS ConstructionCode\n\tFROM EXP_Update_ConstructionCode\n\tWHERE ConstructionCode <> '0'\n),\nUPD_Update_ConstructionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tConstructionCode\n\tFROM FIL_Update_ConstructionCode\n),\nISSBusinessOwnersExtract_Update_ConstructionCode AS (\n\tMERGE INTO ISSBusinessOwnersExtract AS T\n\tUSING UPD_Update_ConstructionCode AS S\n\tON T.ISSBusinessOwnersExtractId = S.ISSBusinessOwnersExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ConstructionCode = S.ConstructionCode\n),\nSQ_ISSBusinessOwnersExtract_Update_ISOFireProtectionCode AS (\n\tDECLARE @StartDate AS DATETIME = (SELECT DATEADD(qq,DATEDIFF(qq,0,GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS},0));\t--First day of last Quarter \r\n\tDECLARE @EndDate AS DATETIME = (SELECT DATEADD(qq, DATEDIFF(qq, 0, GETDATE())+@{pipeline().parameters.NO_OF_QUARTERS}+1, 0));\t--First day of current Quarter\r\n\t\r\n\t--INCORRECT DATA\r\n\tWITH #IncorrectCodes\r\n\tAS\r\n\t(\r\n\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tISS.PolicyKey AS PolicyKey,\r\n\t\tISS.ISOFireProtectionCode AS CurrentISOFireProtectionCode,\r\n\t\tISS.CoverageCode AS CoverageCode,\r\n\t\tISS.LocationNumber AS LocationNumber,\r\n\t\tISS.BuildingNumber AS BuildingNumber\r\n\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\tWHERE (ISS.CoverageCode IN ('BLDG', 'BLDGFUNCVAL', 'BLDRSK', 'BLKBC', 'BLKBLDG', 'BLKCON', 'BUSPTY', 'FUNCBPP', 'HYDROWC', 'IMPROV', 'IMPROVMNT', 'LLBBLDG', 'LLBPPTY', 'MISCPROP', 'MISCREALPROP', 'PERPTY', 'PPTYO')\r\n\t\t\tAND ISS.ISOFireProtectionCode IN ('N/A', '00'))\r\n\t\tAND ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\tAND (ISS.PremiumMasterRunDate BETWEEN @StartDate AND @EndDate) \t--Returns previous quarter timeframe\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ISOCase1 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentISOFireProtectionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentISOFireProtectionCode\r\n\t\t\tELSE ISNULL(CorrectISOFireProtectionCode.ISOFireProtectionCode, 0)\r\n\t\tEND) AS CorrectISOFireProtectionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId,\r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ISOFireProtectionCode AS ISOFireProtectionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND)\r\n\t\t\tAS SameLocationFirstBuilding\r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.ISOFireProtectionCode NOT IN ('N/A', '00')\t--Not replacing ISOFireProtectionCode w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectISOFireProtectionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectISOFireProtectionCode.PolicyKey\r\n\t\tAND CorrectISOFireProtectionCode.SameLocationFirstBuilding = 1\r\n\t\tAND CorrectISOFireProtectionCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t#ISOCase2 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentISOFireProtectionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentISOFireProtectionCode\r\n\t\t\tELSE ISNULL(CorrectISOFireProtectionCode.ISOFireProtectionCode, 0)\r\n\t\tEND) AS CorrectISOFireProtectionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ISOFireProtectionCode AS ISOFireProtectionCode,\r\n\t\t\t(ROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey, ISS.LocationNumber\r\n\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber))\r\n\t\t\tAS SameLocationAnyBuilding   \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.ISOFireProtectionCode NOT IN ('N/A', '00')\t--Not replacing ISOFireProtectionCode w/ N/A\r\n\t\t\tAND ISS.LocationNumber = IncorrectCodes.LocationNumber\r\n\t\t) AS CorrectISOFireProtectionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectISOFireProtectionCode.PolicyKey\r\n\t\tAND CorrectISOFireProtectionCode.SameLocationAnyBuilding = 1\r\n\t\tAND CorrectISOFireProtectionCode.LocationNumber = IncorrectCodes.LocationNumber\r\n\t),\r\n\t\r\n\t\r\n\t\r\n\t#ISOCase3 AS (\r\n\t\tSELECT DISTINCT\tIncorrectCodes.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\tIncorrectCodes.PolicyKey AS PolicyKey,\r\n\t\t(CASE\r\n\t\t\tWHEN IncorrectCodes.CurrentISOFireProtectionCode <> 'N/A'\r\n\t\t\tTHEN IncorrectCodes.CurrentISOFireProtectionCode\r\n\t\t\tELSE ISNULL(CorrectISOFireProtectionCode.ISOFireProtectionCode, 0)\r\n\t\tEND) AS CorrectISOFireProtectionCode\r\n\t\tFROM #IncorrectCodes AS IncorrectCodes\r\n\t\tLEFT JOIN(\r\n\t\t\tSELECT DISTINCT ISS.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\t\t\tISS.PolicyKey AS PolicyKey, \r\n\t\t\tISS.LocationNumber AS LocationNumber, \r\n\t\t\tISS.BuildingNumber AS BuildingNumber,\r\n\t\t\tISS.ISOFireProtectionCode AS ISOFireProtectionCode,\r\n\t\t\t(CASE \r\n\t\t\t\tWHEN ISS.BuildingNumber <> '000'\r\n\t\t\t\tTHEN \r\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY ISS.PolicyKey\r\n\t\t\t\tORDER BY ISS.LocationNumber, ISS.BuildingNumber)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND) \r\n\t\t\tAS RowNumber  \r\n\t\t\tFROM ISSBusinessOwnersExtract AS ISS WITH (NOLOCK)\r\n\t\t\tINNER JOIN #IncorrectCodes AS IncorrectCodes ON IncorrectCodes.PolicyKey = ISS.PolicyKey\r\n\t\t\tWHERE ISS.EDWPremiumMasterCalculationPKId <> -1\r\n\t\t\tAND ISS.BuildingNumber <> '000'\r\n\t\t\tAND ISS.ISOFireProtectionCode NOT IN ('N/A', '00')\t--Not replacing ISOFireProtectionCode w/ N/A\r\n\t\t) AS CorrectISOFireProtectionCode\r\n\t\tON IncorrectCodes.PolicyKey = CorrectISOFireProtectionCode.PolicyKey\r\n\t\tAND CorrectISOFireProtectionCode.RowNumber = 1\r\n\t)\r\n\t\r\n\t\r\n\t\r\n\tSELECT ISOCase1.ISSBusinessOwnersExtractId AS ISSBusinessOwnersExtractId, \r\n\tISOCase1.PolicyKey AS PolicyKey,\r\n\t(CASE\r\n\t\tWHEN ISOCase1.CorrectISOFireProtectionCode = '0'\r\n\t\tTHEN (CASE\r\n\t\t\t\tWHEN ISOCase2.CorrectISOFireProtectionCode = '0'\r\n\t\t\t\tTHEN ISOCase3.CorrectISOFireProtectionCode\r\n\t\t\t\tELSE ISOCase2.CorrectISOFireProtectionCode\r\n\t\t\tEND)\r\n\t\tELSE ISOCase1.CorrectISOFireProtectionCode\r\n\tEND) AS ISOFireProtectionCode\r\n\tFROM #ISOCase1 AS ISOCase1\r\n\tINNER JOIN #ISOCase2 AS ISOCase2\r\n\tON ISOCase2.ISSBusinessOwnersExtractId = ISOCase1.ISSBusinessOwnersExtractId\r\n\tINNER JOIN #ISOCase3 AS ISOCase3\r\n\tON ISOCase3.ISSBusinessOwnersExtractId = ISOCase1.ISSBusinessOwnersExtractId\r\n\tORDER BY ISSBusinessOwnersExtractId\n),\nEXP_Update_ISOFireProtectionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId,\n\tPolicyKey,\n\tISOFireProtectionCode AS i_ISOFireProtectionCode,\n\t-- *INF*: IIF(i_ISOFireProtectionCode = '0', :LKP.LKP_Update_ISOFireProtectionCode(PolicyKey),\r\n\t-- i_ISOFireProtectionCode)\n\tIFF(\n\t    i_ISOFireProtectionCode = '0',\n\t    LKP_UPDATE_ISOFIREPROTECTIONCODE_PolicyKey.IsoFireProtectionCode,\n\t    i_ISOFireProtectionCode\n\t) AS v_ISOFireProtectionCode,\n\t-- *INF*: IIF(NOT ISNULL(v_ISOFireProtectionCode),\r\n\t-- v_ISOFireProtectionCode, '0')\n\tIFF(v_ISOFireProtectionCode IS NOT NULL, v_ISOFireProtectionCode, '0') AS o_ISOFireProtectionCode\n\tFROM SQ_ISSBusinessOwnersExtract_Update_ISOFireProtectionCode\n\tLEFT JOIN LKP_UPDATE_ISOFIREPROTECTIONCODE LKP_UPDATE_ISOFIREPROTECTIONCODE_PolicyKey\n\tON LKP_UPDATE_ISOFIREPROTECTIONCODE_PolicyKey.PolicyKey = PolicyKey\n\n),\nFIL_Update_ISOFireProtectionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tPolicyKey, \n\to_ISOFireProtectionCode AS ISOFireProtectionCode\n\tFROM EXP_Update_ISOFireProtectionCode\n\tWHERE ISOFireProtectionCode <> '0'\n),\nUPD_Update_ISOFireProtectionCode AS (\n\tSELECT\n\tISSBusinessOwnersExtractId, \n\tISOFireProtectionCode\n\tFROM FIL_Update_ISOFireProtectionCode\n),\nISSBusinessOwnersExtract_Update_ISOFireProtectionCode AS (\n\tMERGE INTO ISSBusinessOwnersExtract AS T\n\tUSING UPD_Update_ISOFireProtectionCode AS S\n\tON T.ISSBusinessOwnersExtractId = S.ISSBusinessOwnersExtractId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ISOFireProtectionCode = S.ISOFireProtectionCode\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_QUARTERS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME_DATAMART": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NO_OF_YEARS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_3": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_1": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}