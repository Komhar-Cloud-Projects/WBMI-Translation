{
    "name": "s_m_CLM_DW_LOAD_EOR_sup_claim_vendor_1099_type",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_EOR_sup_claim_vendor_1099_type",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_vendor_1099_type_stage AS (\n\tSELECT \r\n\tvendor_1099_type_stage.vendor_1099_type_id, \r\n\tvendor_1099_type_stage.vendor_type_code, \r\n\tvendor_1099_type_stage.vendor_type_desc \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.vendor_1099_type_stage\n),\nEXP_vendor_type AS (\n\tSELECT\n\tvendor_1099_type_id,\n\tvendor_type_code,\n\tvendor_type_desc\n\tFROM SQ_vendor_1099_type_stage\n),\nLKP_sup_claim_vendor_type_desc AS (\n\tSELECT\n\tsup_claim_vendor_1099_type_id,\n\tvendor_type_code,\n\tvendor_type_code_descript\n\tFROM (\n\t\tSELECT \r\n\t\tsup_claim_vendor_1099_type.sup_claim_vendor_1099_type_id as sup_claim_vendor_1099_type_id, sup_claim_vendor_1099_type.vendor_type_code_descript as vendor_type_code_descript,\r\n\t\tltrim(rtrim(sup_claim_vendor_1099_type.vendor_type_code)) as vendor_type_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_vendor_1099_type\r\n\t\twhere \r\n\t\tsup_claim_vendor_1099_type.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY vendor_type_code ORDER BY sup_claim_vendor_1099_type_id) = 1\n),\nEXP_vendor_change AS (\n\tSELECT\n\tLKP_sup_claim_vendor_type_desc.sup_claim_vendor_1099_type_id AS in_LKP_sup_claim_vendor_1099_type_id,\n\tLKP_sup_claim_vendor_type_desc.vendor_type_code AS in_LKP_vendor_type_code,\n\tLKP_sup_claim_vendor_type_desc.vendor_type_code_descript AS in_LKP_vendor_type_code_descript,\n\tEXP_vendor_type.vendor_1099_type_id,\n\tEXP_vendor_type.vendor_type_code AS in_vendor_type_code,\n\t-- *INF*: iif(isnull(in_vendor_type_code) or IS_SPACES(in_vendor_type_code) or LENGTH(in_vendor_type_code)=0,'N/A',in_vendor_type_code)\n\tIFF(\n\t    in_vendor_type_code IS NULL\n\t    or LENGTH(in_vendor_type_code)>0\n\t    and TRIM(in_vendor_type_code)=''\n\t    or LENGTH(in_vendor_type_code) = 0,\n\t    'N/A',\n\t    in_vendor_type_code\n\t) AS v_vendor_type_code,\n\tv_vendor_type_code AS vendor_type_code,\n\tEXP_vendor_type.vendor_type_desc AS in_vendor_type_desc,\n\t-- *INF*: iif(isnull(in_vendor_type_desc) or IS_SPACES(in_vendor_type_desc) or LENGTH(in_vendor_type_desc)=0,'N/A',ltrim(rtrim(in_vendor_type_desc)))\n\tIFF(\n\t    in_vendor_type_desc IS NULL\n\t    or LENGTH(in_vendor_type_desc)>0\n\t    and TRIM(in_vendor_type_desc)=''\n\t    or LENGTH(in_vendor_type_desc) = 0,\n\t    'N/A',\n\t    ltrim(rtrim(in_vendor_type_desc))\n\t) AS v_vendor_type_desc,\n\tv_vendor_type_desc AS vendor_type_desc,\n\t-- *INF*: IIF(ISNULL(in_LKP_sup_claim_vendor_1099_type_id), 'NEW', \r\n\t-- IIF(ltrim(rtrim(in_LKP_vendor_type_code_descript)) != ltrim(rtrim(v_vendor_type_desc)),\r\n\t-- 'UPDATE', 'NOCHANGE'))\n\tIFF(\n\t    in_LKP_sup_claim_vendor_1099_type_id IS NULL, 'NEW',\n\t    IFF(\n\t        ltrim(rtrim(in_LKP_vendor_type_code_descript)) != ltrim(rtrim(v_vendor_type_desc)),\n\t        'UPDATE',\n\t        'NOCHANGE'\n\t    )\n\t) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(\n\t    v_changed_flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS v_eff_from_date,\n\tv_eff_from_date AS eff_from_date\n\tFROM EXP_vendor_type\n\tLEFT JOIN LKP_sup_claim_vendor_type_desc\n\tON LKP_sup_claim_vendor_type_desc.vendor_type_code = EXP_vendor_type.vendor_type_code\n),\nFIL_vendor_1099_type AS (\n\tSELECT\n\tvendor_1099_type_id, \n\tvendor_type_code, \n\tvendor_type_desc, \n\tchanged_flag, \n\teff_from_date\n\tFROM EXP_vendor_change\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nEXP_default_values AS (\n\tSELECT\n\tvendor_1099_type_id,\n\tvendor_type_code,\n\tvendor_type_desc,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\teff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM FIL_vendor_1099_type\n),\nTGT_sup_claim_vendor_1099_type_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_vendor_1099_type\n\t(vendor_type_code, vendor_type_code_descript, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tVENDOR_TYPE_CODE, \n\tvendor_type_desc AS VENDOR_TYPE_CODE_DESCRIPT, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM EXP_default_values\n),\nSQ_sup_claim_vendor_1099_type_UPDATE AS (\n\tSELECT \r\n\ta.sup_claim_vendor_1099_type_id, \r\n\ta.vendor_type_code, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_vendor_1099_type a\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_vendor_1099_type b\r\n\tWHERE b.crrnt_snpsht_flag = 1 \r\n\tAND \r\n\ta.vendor_type_code=b.vendor_type_code\r\n\tGROUP BY b.vendor_type_code\r\n\tHAVING COUNT(*) > 1)\r\n\tORDER BY a.vendor_type_code, a.eff_from_date  DESC\n),\nEXP_vendor_1099_upadte AS (\n\tSELECT\n\tsup_claim_vendor_1099_type_id,\n\tvendor_type_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- vendor_type_code=v_prev_vendor_type_code,\r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    vendor_type_code = v_prev_vendor_type_code, DATEADD(SECOND,- 1,v_prev_eff_from_date),\n\t    orig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tvendor_type_code AS v_prev_vendor_type_code,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snp_sht_flag,\n\tSYSDATE AS modified_dt\n\tFROM SQ_sup_claim_vendor_1099_type_UPDATE\n),\nFIL_vendor_1099_type_update AS (\n\tSELECT\n\tsup_claim_vendor_1099_type_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snp_sht_flag, \n\tmodified_dt\n\tFROM EXP_vendor_1099_upadte\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_vendor_1099_type AS (\n\tSELECT\n\tsup_claim_vendor_1099_type_id, \n\teff_to_date, \n\tcrrnt_snp_sht_flag, \n\tmodified_dt\n\tFROM FIL_vendor_1099_type_update\n),\nTGT_sup_claim_vendor_1099_type_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_vendor_1099_type AS T\n\tUSING UPD_vendor_1099_type AS S\n\tON T.sup_claim_vendor_1099_type_id = S.sup_claim_vendor_1099_type_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snp_sht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_dt\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Claims DataWarehouse/"
        },
        "annotations": []
    }
}