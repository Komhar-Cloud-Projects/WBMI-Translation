{
    "name": "s_m_CLM_DW_LOAD_sup_claim_financial_code",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_claim_financial_code",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_CLAIM_SUPPORT_01_STAGE AS (\n\tSELECT CS01_CODE, \r\n\tCS01_CODE_DES \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.CLAIM_SUPPORT_01_STAGE\r\n\tWHERE\r\n\tCS01_TABLE_ID = 'C046'\n),\nEXP_Default_Values AS (\n\tSELECT\n\tCS01_CODE AS in_CS01_CODE,\n\tCS01_CODE_DES AS in_CS01_CODE_DES,\n\t-- *INF*: IIF(ISNULL(in_CS01_CODE), \r\n\t-- 'N/A',\r\n\t-- ltrim(rtrim(in_CS01_CODE)))\n\tIFF(in_CS01_CODE IS NULL, 'N/A', ltrim(rtrim(in_CS01_CODE))) AS out_CS01_CODE,\n\t-- *INF*: IIF(ISNULL(in_CS01_CODE_DES), \r\n\t-- 'N/A',\r\n\t-- ltrim(rtrim(in_CS01_CODE_DES)))\n\tIFF(in_CS01_CODE_DES IS NULL, 'N/A', ltrim(rtrim(in_CS01_CODE_DES))) AS out_CS01_CODE_DES\n\tFROM SQ_CLAIM_SUPPORT_01_STAGE\n),\nLKP_Financial_type_code AS (\n\tSELECT\n\tin_CS01_CODE,\n\tsup_claim_financial_code_id,\n\tfinancial_code,\n\tfinancial_descript\n\tFROM (\n\t\tSELECT \r\n\t\ta.sup_claim_financial_code_id as sup_claim_financial_code_id, \r\n\t\ta.financial_descript as financial_descript, \r\n\t\ta.financial_code as financial_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_financial_code a\r\n\t\tWHERE a.sup_claim_financial_code_id \r\n\t\tin (select MAX(b. sup_claim_financial_code_id )\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_financial_code b\r\n\t\tWHERE crrnt_snpsht_flag=1\r\n\t\t\tGROUP BY b.financial_code )\r\n\t\tORDER BY financial_code\r\n\t\t\r\n\t\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer generate an ORDER BY statement\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY financial_code ORDER BY in_CS01_CODE) = 1\n),\nEXP_Lkp_Values AS (\n\tSELECT\n\tLKP_Financial_type_code.sup_claim_financial_code_id AS old_sup_claim_financial_code_id,\n\tLKP_Financial_type_code.financial_descript AS old_financial_descript,\n\tEXP_Default_Values.out_CS01_CODE,\n\tEXP_Default_Values.out_CS01_CODE_DES,\n\t-- *INF*: iif(isnull(old_sup_claim_financial_code_id),'NEW',\r\n\t-- \tiif((out_CS01_CODE_DES<> old_financial_descript),\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(\n\t    old_sup_claim_financial_code_id IS NULL, 'NEW',\n\t    IFF(\n\t        (out_CS01_CODE_DES <> old_financial_descript), 'UPDATE', 'NOCHANGE'\n\t    )\n\t) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(\n\t    v_changed_flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tsysdate AS created_date,\n\tsysdate AS modified_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS Source_Sys_id\n\tFROM EXP_Default_Values\n\tLEFT JOIN LKP_Financial_type_code\n\tON LKP_Financial_type_code.financial_code = EXP_Default_Values.out_CS01_CODE\n),\nFIL_Financial_code AS (\n\tSELECT\n\tout_CS01_CODE, \n\tout_CS01_CODE_DES, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tcreated_date, \n\tmodified_date, \n\tSource_Sys_id\n\tFROM EXP_Lkp_Values\n\tWHERE changed_flag = 'NEW' or changed_flag = 'UPDATE'\n),\nsup_claim_financial_code_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_financial_code\n\t(financial_code, financial_descript, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tout_CS01_CODE AS FINANCIAL_CODE, \n\tout_CS01_CODE_DES AS FINANCIAL_DESCRIPT, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSource_Sys_id AS SOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM FIL_Financial_code\n),\nSQ_sup_financial_code AS (\n\tSELECT \r\n\ta.sup_claim_financial_code_id, \r\n\ta.financial_code, \r\n\ta.eff_from_date,\r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_financial_code a\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_claim_financial_code  b\t\r\n\tWHERE crrnt_snpsht_flag=1\r\n\t\tAND a.financial_code  = b.financial_code \r\n\t\tGROUP BY financial_code \r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY financial_code , eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the eff_to_date by utilizing a local variable to keep track\n),\nEXP_Lag_Eff_From_date AS (\n\tSELECT\n\tsup_claim_financial_code_id AS sup_financial_code_id,\n\tfinancial_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tfinancial_code =v_PREV_ROW_Financial_code, ADD_TO_DATE(v_PREV_ROW_Eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(\n\t    TRUE,\n\t    financial_code = v_PREV_ROW_Financial_code, DATEADD(SECOND,- 1,v_PREV_ROW_Eff_from_date),\n\t    orig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_Eff_from_date,\n\tfinancial_code AS v_PREV_ROW_Financial_code,\n\t0 AS crrnt_snpsht_flag,\n\tsysdate AS modified_date\n\tFROM SQ_sup_financial_code\n),\nFIL_ak_id AS (\n\tSELECT\n\tsup_financial_code_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_Lag_Eff_From_date\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_Financial_Code AS (\n\tSELECT\n\tsup_financial_code_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_ak_id\n),\nsup_claim_financial_code_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TAB};E_OWNER.sup_claim_financial_code AS T\n\tUSING UPD_Financial_Code AS S\n\tON T.sup_claim_financial_code_id = S.sup_financial_code_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TAB": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "ClaimsDataWarehouse/"
        },
        "annotations": []
    }
}