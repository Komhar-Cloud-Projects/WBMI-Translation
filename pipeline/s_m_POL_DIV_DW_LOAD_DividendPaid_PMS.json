{
    "name": "s_m_POL_DIV_DW_LOAD_DividendPaid_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DIV_DW_LOAD_DividendPaid_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WCDividendPaidStage AS (\n\tSELECT\n\t\tWCDividendPaidStageId,\n\t\tWCDividendStageRecID,\n\t\tDividendPaidDate,\n\t\tDividendPaidAmt,\n\t\tAgencyCode,\n\t\tPolicySymbol,\n\t\tPolicyNumber,\n\t\tPolicyModule,\n\t\tExtractDate,\n\t\tSourceSystemId\n\tFROM WCDividendPaidStage\n),\nEXP_GetValues AS (\n\tSELECT\n\tAgencyCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(SUBSTR(AgencyCode,1,2))))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(SUBSTR(AgencyCode, 1, 2)))) AS o_StateCode,\n\tPolicySymbol,\n\tPolicyNumber,\n\tPolicyModule,\n\tPolicySymbol||PolicyNumber||PolicyModule AS O_POL_KEY,\n\tDividendPaidDate AS DividendTransactionEnteredDate,\n\t-- *INF*: LAST_DAY(DividendTransactionEnteredDate)\n\tLAST_DAY(DividendTransactionEnteredDate) AS DividendRunDate,\n\tDividendPaidAmt\n\tFROM SQ_WCDividendPaidStage\n),\nLKP_Policy_PolicyAKID AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT policy.pol_ak_id as pol_ak_id, ltrim(rtrim(policy.pol_key)) as pol_key FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\r\n\t\tWHERE crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id DESC) = 1\n),\nLKP_Dividend_Plan_Info AS (\n\tSELECT\n\tDividendPlan,\n\tDividendType,\n\tSupDividendTypeId,\n\tPolicyAKId\n\tFROM (\n\t\tSELECT \n\t\t\tDividendPlan,\n\t\t\tDividendType,\n\t\t\tSupDividendTypeId,\n\t\t\tPolicyAKId\n\t\tFROM Dividend\n\t\tWHERE DividendPaidAmount = 0.0 AND Dividendplan <> 'No Dividend'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId ORDER BY DividendPlan DESC) = 1\n),\nLKP_sup_state AS (\n\tSELECT\n\tsup_state_id,\n\tstate_abbrev\n\tFROM (\n\t\tSELECT \n\t\t\tsup_state_id,\n\t\t\tstate_abbrev\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_state\n\t\tWHERE crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY state_abbrev ORDER BY sup_state_id DESC) = 1\n),\nEXP_sup_state_id AS (\n\tSELECT\n\tLKP_Policy_PolicyAKID.pol_ak_id AS i_PolicyAKId,\n\t-- *INF*: IIF(ISNULL(i_PolicyAKId),-1,i_PolicyAKId)\n\tIFF(i_PolicyAKId IS NULL, - 1, i_PolicyAKId) AS o_PolicyAKId,\n\t0.0 AS DividendAmount,\n\tEXP_GetValues.DividendTransactionEnteredDate,\n\tEXP_GetValues.DividendRunDate,\n\tEXP_GetValues.o_StateCode AS StateCode,\n\tLKP_Dividend_Plan_Info.DividendPlan,\n\t-- *INF*: IIF(ISNULL(DividendPlan),'No Dividend',DividendPlan)\r\n\t-- \r\n\t-- ---- Default value of Dividend Plan which has dividend paid amount is No Dividend\n\tIFF(DividendPlan IS NULL, 'No Dividend', DividendPlan) AS O_DividendPlan,\n\tLKP_Dividend_Plan_Info.DividendType,\n\t-- *INF*: IIF(ISNULL(DividendType),'No Dividend Plan',DividendType)\r\n\t-- \r\n\t-- ---- Default values of Dividend Type which has dividend paid amount is No Dividend Plan\n\tIFF(DividendType IS NULL, 'No Dividend Plan', DividendType) AS O_DividendType,\n\tLKP_Dividend_Plan_Info.SupDividendTypeId,\n\t-- *INF*: IIF(ISNULL(SupDividendTypeId),-1,SupDividendTypeId)\n\tIFF(SupDividendTypeId IS NULL, - 1, SupDividendTypeId) AS O_SupDividendTypeId,\n\tLKP_sup_state.sup_state_id AS lkp_sup_state_id,\n\t-- *INF*: IIF(ISNULL(lkp_sup_state_id),-1,lkp_sup_state_id)\n\tIFF(lkp_sup_state_id IS NULL, - 1, lkp_sup_state_id) AS o_sup_state_id,\n\tEXP_GetValues.DividendPaidAmt\n\tFROM EXP_GetValues\n\tLEFT JOIN LKP_Dividend_Plan_Info\n\tON LKP_Dividend_Plan_Info.PolicyAKId = LKP_Policy_PolicyAKID.pol_ak_id\n\tLEFT JOIN LKP_Policy_PolicyAKID\n\tON LKP_Policy_PolicyAKID.pol_key = EXP_GetValues.O_POL_KEY\n\tLEFT JOIN LKP_sup_state\n\tON LKP_sup_state.state_abbrev = EXP_GetValues.o_StateCode\n),\nLKP_Dividend AS (\n\tSELECT\n\tDividendId,\n\tDividendPayableAmount,\n\tDividendPlan,\n\tDividendType,\n\tSupStateId,\n\tSupDividendTypeId,\n\tDividendPaidAmount,\n\tPolicyAKId,\n\tDividendTransactionEnteredDate,\n\tStateCode\n\tFROM (\n\t\tSELECT \n\t\t\tDividendId,\n\t\t\tDividendPayableAmount,\n\t\t\tDividendPlan,\n\t\t\tDividendType,\n\t\t\tSupStateId,\n\t\t\tSupDividendTypeId,\n\t\t\tDividendPaidAmount,\n\t\t\tPolicyAKId,\n\t\t\tDividendTransactionEnteredDate,\n\t\t\tStateCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.Dividend\n\t\tWHERE DividendPlan='N/A' and DividendType='N/A'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,DividendTransactionEnteredDate,StateCode ORDER BY DividendId DESC) = 1\n),\nEXP_MetaData AS (\n\tSELECT\n\tLKP_Dividend.DividendId AS lkp_DividendId,\n\tLKP_Dividend.DividendPayableAmount AS lkp_DividendPayableAmount,\n\tLKP_Dividend.DividendPlan AS lkp_DividendPlan,\n\tLKP_Dividend.DividendType AS lkp_DividendType,\n\tLKP_Dividend.SupStateId AS lkp_SupStateId,\n\tLKP_Dividend.SupDividendTypeId AS lkp_SupDividendTypeId,\n\tLKP_Dividend.DividendPaidAmount AS lkp_DividendPaidAmount,\n\tEXP_sup_state_id.o_PolicyAKId AS PolicyAKId,\n\tEXP_sup_state_id.DividendAmount AS DividendPayableAmount,\n\tEXP_sup_state_id.DividendTransactionEnteredDate,\n\tEXP_sup_state_id.DividendRunDate,\n\tEXP_sup_state_id.StateCode,\n\tEXP_sup_state_id.O_DividendPlan AS DividendPlan,\n\tEXP_sup_state_id.O_DividendType AS DividendType,\n\tEXP_sup_state_id.O_SupDividendTypeId AS SupDividendTypeId,\n\tEXP_sup_state_id.o_sup_state_id AS sup_state_id,\n\tlkp_DividendId AS o_DividendId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_DividendId), 'NEW', \r\n\t-- lkp_DividendPayableAmount <>DividendPayableAmount OR\r\n\t-- lkp_DividendPlan<>DividendPlan OR\r\n\t-- lkp_DividendType<>DividendType OR\r\n\t-- lkp_SupStateId<>sup_state_id OR\r\n\t-- lkp_SupDividendTypeId<>SupDividendTypeId OR\r\n\t-- lkp_DividendPaidAmount<>DividendPaidAmount,'UPDATE',\r\n\t-- 'NOCHANGE')\n\tDECODE(TRUE,\n\t\tlkp_DividendId IS NULL, 'NEW',\n\t\tlkp_DividendPayableAmount <> DividendPayableAmount OR lkp_DividendPlan <> DividendPlan OR lkp_DividendType <> DividendType OR lkp_SupStateId <> sup_state_id OR lkp_SupDividendTypeId <> SupDividendTypeId OR lkp_DividendPaidAmount <> DividendPaidAmount, 'UPDATE',\n\t\t'NOCHANGE') AS o_ChangeFlag,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: TO_DATE('1800-01-01 01:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('1800-01-01 01:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\tEXP_sup_state_id.DividendPaidAmt AS DividendPaidAmount\n\tFROM EXP_sup_state_id\n\tLEFT JOIN LKP_Dividend\n\tON LKP_Dividend.PolicyAKId = EXP_sup_state_id.o_PolicyAKId AND LKP_Dividend.DividendTransactionEnteredDate = EXP_sup_state_id.DividendTransactionEnteredDate AND LKP_Dividend.StateCode = EXP_sup_state_id.StateCode\n),\nRTR_Target AS (\n\tSELECT\n\to_ChangeFlag AS ChangeFlag,\n\to_DividendId AS DividendId,\n\tPolicyAKId,\n\tDividendPayableAmount AS DividendAmount,\n\tDividendTransactionEnteredDate,\n\tDividendRunDate,\n\tStateCode,\n\tDividendPlan,\n\tDividendType,\n\tSupDividendTypeId,\n\tsup_state_id AS SupStateId,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemID,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\tDividendPaidAmount\n\tFROM EXP_MetaData\n),\nRTR_Target_NEW AS (SELECT * FROM RTR_Target WHERE ChangeFlag='NEW'),\nRTR_Target_UPDATE AS (SELECT * FROM RTR_Target WHERE ChangeFlag='UPDATE'),\nSEQ_DividendAKId AS (\n\tCREATE SEQUENCE SEQ_DividendAKId\n\tSTART = 1\n\tINCREMENT = 1;\n),\nDividend_INSERT AS (\n\tINSERT INTO Dividend\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, DividendAKId, PolicyAKId, DividendPayableAmount, DividendTransactionEnteredDate, DividendRunDate, StateCode, DividendPlan, DividendType, SupStateId, SupDividendTypeId, DividendPaidAmount)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSourceSystemID AS SOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tSEQ_DividendAKId.NEXTVAL AS DIVIDENDAKID, \n\tPOLICYAKID, \n\tDividendAmount AS DIVIDENDPAYABLEAMOUNT, \n\tDIVIDENDTRANSACTIONENTEREDDATE, \n\tDIVIDENDRUNDATE, \n\tSTATECODE, \n\tDIVIDENDPLAN, \n\tDIVIDENDTYPE, \n\tSUPSTATEID, \n\tSUPDIVIDENDTYPEID, \n\tDIVIDENDPAIDAMOUNT\n\tFROM RTR_Target_NEW\n),\nUPD_UPDATE AS (\n\tSELECT\n\tDividendId, \n\tPolicyAKId, \n\tDividendAmount, \n\tDividendTransactionEnteredDate, \n\tDividendRunDate, \n\tStateCode, \n\tDividendPlan, \n\tDividendType, \n\tSupDividendTypeId, \n\tSupStateId, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\tDividendPaidAmount AS DividendPaidAmount3\n\tFROM RTR_Target_UPDATE\n),\nDividend_UPDATE AS (\n\tMERGE INTO Dividend AS T\n\tUSING UPD_UPDATE AS S\n\tON T.DividendId = S.DividendId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditID = S.AuditID, T.ModifiedDate = S.ModifiedDate, T.DividendPayableAmount = S.DividendAmount, T.DividendPlan = S.DividendPlan, T.DividendType = S.DividendType, T.SupStateId = S.SupStateId, T.SupDividendTypeId = S.SupDividendTypeId, T.DividendPaidAmount = S.DividendPaidAmount3\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244878"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893604"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7545023"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 12:26:42"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/02/2023 12:41:01"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}