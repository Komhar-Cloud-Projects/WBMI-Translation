{
    "name": "m_CLM_DW_LOAD_Claim_Party_Occurrence_4578_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_Occurrence_4578_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_PMS_Adjustor AS (\n\tSELECT\n\tadnm_type_adjustor,\n\tin_Claim_Adjustor_Nbr,\n\tadnm_adjustor_nbr\n\tFROM (\n\t\tSELECT \n\t\t\tadnm_type_adjustor,\n\t\t\tin_Claim_Adjustor_Nbr,\n\t\t\tadnm_adjustor_nbr\n\t\tFROM pms_adjuster_master_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY adnm_adjustor_nbr ORDER BY adnm_type_adjustor) = 1\n),\nLKP_CLAIM_OCCURRENCE AS (\n\tSELECT\n\tclaim_occurrence_ak_id,\n\tclaim_occurrence_key\n\tFROM (\n\t\tSELECT \r\n\t\t   claim_occurrence.claim_occurrence_ak_id as claim_occurrence_ak_id, \r\n\t\t   claim_occurrence.claim_occurrence_key as claim_occurrence_key \r\n\t\tFROM \r\n\t\t   claim_occurrence\r\n\t\tWHERE\r\n\t\t   source_sys_id = '@{pipeline().parameters.SOURCE_SYS_ID}' AND crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_key ORDER BY claim_occurrence_ak_id) = 1\n),\nLKP_CLAIM_PARTY AS (\n\tSELECT\n\tclaim_party_ak_id,\n\tclaim_party_key\n\tFROM (\n\t\tSELECT \r\n\t\t   claim_party.claim_party_ak_id as claim_party_ak_id, \r\n\t\t   claim_party.claim_party_key as claim_party_key \r\n\t\tFROM \r\n\t\t   claim_party\r\n\t\tWHERE \r\n\t\t   source_sys_id = 'PMS' AND crrnt_snpsht_flag = '1'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_ak_id) = 1\n),\nLKP_CLAIM_CASE_AK_ID AS (\n\tSELECT\n\tclaim_case_ak_id,\n\tclaim_case_key\n\tFROM (\n\t\tSELECT \r\n\t\tclaim_case.claim_case_ak_id as claim_case_ak_id, \r\n\t\tclaim_case.claim_case_key as claim_case_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case \r\n\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_case_key ORDER BY claim_case_ak_id) = 1\n),\nSQ_pif_4578_stage AS (\n\tSELECT distinct\r\n\tltrim(rtrim(a.pif_symbol)) as pif_symbol\r\n\t, ltrim(rtrim(a.pif_policy_number)) as pif_policy_number\r\n\t, ltrim(rtrim(a.pif_module)) as pif_module\r\n\t, ltrim(rtrim(a.loss_year)) as loss_year\r\n\t, ltrim(rtrim(a.loss_month)) as loss_month\r\n\t, ltrim(rtrim(a.loss_day)) as loss_day\r\n\t, ltrim(rtrim(a.loss_occurence)) as loss_occurence\r\n\t, ltrim(rtrim(a.loss_claimant)) as loss_claimant\r\n\t, ltrim(rtrim(a.loss_adjustor_no)) as loss_adjustor_no\r\n\t\r\n\tFROM\r\n\t pif_4578_stage a\r\n\tWHERE\r\n\t (a.loss_part = '7') AND \r\n\t(a.logical_flag ='0')\r\n\tAND LEN(LTRIM(RTRIM(a.loss_draft_no))) > 0\n),\nEXP_Source AS (\n\tSELECT\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module,\n\tpif_symbol  || pif_policy_number  || pif_module AS v_SYM_NUM_MODE,\n\tloss_year,\n\tloss_month,\n\tloss_day,\n\t-- *INF*: IIF ( LENGTH(to_char(loss_month)) = 1, '0' || TO_CHAR(loss_month),TO_CHAR(loss_month))\r\n\t-- ||  \r\n\t-- IIF ( LENGTH(to_char(loss_day)) = 1, '0' || TO_CHAR(loss_day), TO_CHAR(loss_day) )\r\n\t-- ||  \r\n\t-- TO_CHAR(loss_year)\n\tIFF(LENGTH(to_char(loss_month)) = 1, '0' || TO_CHAR(loss_month), TO_CHAR(loss_month)) || IFF(LENGTH(to_char(loss_day)) = 1, '0' || TO_CHAR(loss_day), TO_CHAR(loss_day)) || TO_CHAR(loss_year) AS v_CLM_LOSS_DT,\n\tloss_occurence,\n\tloss_claimant,\n\tv_SYM_NUM_MODE || v_CLM_LOSS_DT || loss_occurence AS claim_occurrence,\n\tloss_adjustor_no AS IN_loss_adjustor_no,\n\t-- *INF*: IIF(ISNULL(IN_loss_adjustor_no) OR IS_SPACES(LTRIM(RTRIM(IN_loss_adjustor_no))) OR LENGTH(LTRIM(RTRIM(IN_loss_adjustor_no))) = 0, 'N/A', LTRIM(RTRIM(IN_loss_adjustor_no)))\n\tIFF(IN_loss_adjustor_no IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_loss_adjustor_no))) OR LENGTH(LTRIM(RTRIM(IN_loss_adjustor_no))) = 0, 'N/A', LTRIM(RTRIM(IN_loss_adjustor_no))) AS o_loss_adjustor_no,\n\t-- *INF*: :LKP.LKP_PMS_ADJUSTOR(IN_loss_adjustor_no)\n\tLKP_PMS_ADJUSTOR_IN_loss_adjustor_no.adnm_type_adjustor AS adnm_type_adjustor\n\tFROM SQ_pif_4578_stage\n\tLEFT JOIN LKP_PMS_ADJUSTOR LKP_PMS_ADJUSTOR_IN_loss_adjustor_no\n\tON LKP_PMS_ADJUSTOR_IN_loss_adjustor_no.adnm_adjustor_nbr = IN_loss_adjustor_no\n\n),\nEXP_LKP_Values AS (\n\tSELECT\n\tclaim_occurrence AS CLAIM_OCCURRENCE_KEY,\n\to_loss_adjustor_no AS adnm_adjustor_nbr,\n\tadnm_type_adjustor,\n\tadnm_adjustor_nbr || adnm_type_adjustor AS v_claim_party_key,\n\tloss_claimant,\n\t-- *INF*: :LKP.LKP_CLAIM_PARTY(v_claim_party_key)\n\tLKP_CLAIM_PARTY_v_claim_party_key.claim_party_ak_id AS claim_party_ak_id,\n\t-- *INF*: :LKP.LKP_CLAIM_OCCURRENCE(CLAIM_OCCURRENCE_KEY)\n\tLKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY.claim_occurrence_ak_id AS claim_occurrence_ak_id,\n\tCLAIM_OCCURRENCE_KEY || loss_claimant AS v_claim_case_key,\n\t-- *INF*: iif(isnull(:LKP.LKP_CLAIM_CASE_AK_ID(v_claim_case_key))\r\n\t-- ,-1\r\n\t-- ,:LKP.LKP_CLAIM_CASE_AK_ID(v_claim_case_key)\r\n\t-- )\n\tIFF(LKP_CLAIM_CASE_AK_ID_v_claim_case_key.claim_case_ak_id IS NULL, - 1, LKP_CLAIM_CASE_AK_ID_v_claim_case_key.claim_case_ak_id) AS claim_case_ak_id,\n\t-- *INF*: TO_DATE('1/1/1800','MM/DD/YYYY')\n\tTO_DATE('1/1/1800', 'MM/DD/YYYY') AS denial_date\n\tFROM EXP_Source\n\tLEFT JOIN LKP_CLAIM_PARTY LKP_CLAIM_PARTY_v_claim_party_key\n\tON LKP_CLAIM_PARTY_v_claim_party_key.claim_party_key = v_claim_party_key\n\n\tLEFT JOIN LKP_CLAIM_OCCURRENCE LKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY\n\tON LKP_CLAIM_OCCURRENCE_CLAIM_OCCURRENCE_KEY.claim_occurrence_key = CLAIM_OCCURRENCE_KEY\n\n\tLEFT JOIN LKP_CLAIM_CASE_AK_ID LKP_CLAIM_CASE_AK_ID_v_claim_case_key\n\tON LKP_CLAIM_CASE_AK_ID_v_claim_case_key.claim_case_key = v_claim_case_key\n\n),\nAgg_Data AS (\n\tSELECT\n\tclaim_party_ak_id, \n\tadnm_type_adjustor, \n\tclaim_occurrence_ak_id, \n\tdenial_date, \n\tclaim_case_ak_id\n\tFROM EXP_LKP_Values\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_ak_id, adnm_type_adjustor, claim_occurrence_ak_id, denial_date, claim_case_ak_id ORDER BY NULL) = 1\n),\nLKP_CLAIM_PARTY_OCCURRENCE AS (\n\tSELECT\n\tclaim_party_occurrence_id,\n\tclaim_party_occurrence_ak_id,\n\tdenial_date,\n\tclaim_party_ak_id,\n\tclaim_occurrence_ak_id,\n\tclaim_case_ak_id,\n\tclaim_party_role_code\n\tFROM (\n\t\tSELECT \r\n\t\t  a.claim_party_occurrence_id as claim_party_occurrence_id\r\n\t\t, a.claim_party_occurrence_ak_id as claim_party_occurrence_ak_id\r\n\t\t, a.denial_date as denial_date\r\n\t\t, a.claim_party_ak_id as claim_party_ak_id\r\n\t\t, a.claim_occurrence_ak_id as claim_occurrence_ak_id\r\n\t\t, a.claim_case_ak_id as claim_case_ak_id\r\n\t\t, ltrim(rtrim(a.claim_party_role_code)) as claim_party_role_code \r\n\t\tFROM claim_party_occurrence a\r\n\t\tWHERE a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND a.crrnt_snpsht_flag = 1\r\n\t\tORDER BY a.claim_occurrence_ak_id, a.claim_party_role_code, a.claim_party_ak_id --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_ak_id,claim_occurrence_ak_id,claim_case_ak_id,claim_party_role_code ORDER BY claim_party_occurrence_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tAgg_Data.claim_party_ak_id AS CLAIM_PARTY_AK_ID,\n\tAgg_Data.adnm_type_adjustor AS CLAIM_PARTY_ROLE_CODE,\n\tAgg_Data.claim_occurrence_ak_id AS CLAIM_OCCURRENCE_AK_ID,\n\tAgg_Data.denial_date AS DENIAL_DATE,\n\tAgg_Data.claim_case_ak_id AS CLAIM_CASE_AK_ID,\n\tLKP_CLAIM_PARTY_OCCURRENCE.claim_party_occurrence_id AS lkp_claim_party_occurrence_id,\n\tLKP_CLAIM_PARTY_OCCURRENCE.claim_party_occurrence_ak_id AS lkp_claim_party_occurrence_ak_id,\n\tLKP_CLAIM_PARTY_OCCURRENCE.denial_date AS lkp_denial_date,\n\t'0' AS logical_flag_op,\n\t1 AS Crrnt_Snpsht_Flag,\n\t-- *INF*: iif(isnull(lkp_claim_party_occurrence_id), 'NEW',\r\n\t-- \tiif ((lkp_denial_date <> DENIAL_DATE), \r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(lkp_claim_party_occurrence_id IS NULL, 'NEW', IFF(( lkp_denial_date <> DENIAL_DATE ), 'UPDATE', 'NOCHANGE')) AS v_Changed_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date,\n\t'N/A' AS Dummy\n\tFROM Agg_Data\n\tLEFT JOIN LKP_CLAIM_PARTY_OCCURRENCE\n\tON LKP_CLAIM_PARTY_OCCURRENCE.claim_party_ak_id = Agg_Data.claim_party_ak_id AND LKP_CLAIM_PARTY_OCCURRENCE.claim_occurrence_ak_id = Agg_Data.claim_occurrence_ak_id AND LKP_CLAIM_PARTY_OCCURRENCE.claim_case_ak_id = Agg_Data.claim_case_ak_id AND LKP_CLAIM_PARTY_OCCURRENCE.claim_party_role_code = Agg_Data.adnm_type_adjustor\n),\nFIL_Insert AS (\n\tSELECT\n\tlkp_claim_party_occurrence_ak_id, \n\tCLAIM_PARTY_AK_ID, \n\tCLAIM_OCCURRENCE_AK_ID, \n\tCLAIM_CASE_AK_ID, \n\tCLAIM_PARTY_ROLE_CODE, \n\tDENIAL_DATE, \n\tDummy AS IPFCGQ_OFFSET_ONSET_IND, \n\tlogical_flag_op, \n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tChanged_Flag, \n\tDummy AS out_claimant_num\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_party_occurrence AS (\n\tCREATE SEQUENCE SEQ_claim_party_occurrence\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_Ak AS (\n\tSELECT\n\tlkp_claim_party_occurrence_ak_id,\n\tSEQ_claim_party_occurrence.NEXTVAL,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, lkp_claim_party_occurrence_ak_id)\n\tIFF(Changed_Flag = 'NEW', NEXTVAL, lkp_claim_party_occurrence_ak_id) AS claim_party_occurrence_ak_id,\n\tCLAIM_PARTY_AK_ID,\n\tCLAIM_OCCURRENCE_AK_ID,\n\tCLAIM_CASE_AK_ID,\n\tCLAIM_PARTY_ROLE_CODE,\n\tDENIAL_DATE,\n\tIPFCGQ_OFFSET_ONSET_IND,\n\tlogical_flag_op,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tChanged_Flag,\n\tout_claimant_num,\n\t'N/A' AS Out_Default_String\n\tFROM FIL_Insert\n),\nclaim_party_occurrence_Insert AS (\n\tINSERT INTO claim_party_occurrence\n\t(claim_party_occurrence_ak_id, claim_occurrence_ak_id, claim_party_ak_id, claim_case_ak_id, claim_party_role_code, claimant_num, denial_date, offset_onset_ind, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, preferred_contact_method)\n\tSELECT \n\tCLAIM_PARTY_OCCURRENCE_AK_ID, \n\tCLAIM_OCCURRENCE_AK_ID AS CLAIM_OCCURRENCE_AK_ID, \n\tCLAIM_PARTY_AK_ID AS CLAIM_PARTY_AK_ID, \n\tCLAIM_CASE_AK_ID AS CLAIM_CASE_AK_ID, \n\tCLAIM_PARTY_ROLE_CODE AS CLAIM_PARTY_ROLE_CODE, \n\tout_claimant_num AS CLAIMANT_NUM, \n\tDENIAL_DATE AS DENIAL_DATE, \n\tIPFCGQ_OFFSET_ONSET_IND AS OFFSET_ONSET_IND, \n\tlogical_flag_op AS LOGICAL_FLAG, \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tOut_Default_String AS PREFERRED_CONTACT_METHOD\n\tFROM EXP_Determine_Ak\n),\nSQ_claim_party_occurrence AS (\n\tSELECT \r\n\ta.claim_party_occurrence_id, \r\n\ta.claim_occurrence_ak_id, \r\n\ta.claim_party_role_code, \r\n\ta.claim_party_ak_id, \r\n\ta.claim_case_ak_id,\r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence a\r\n\tWHERE \r\n\t a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND \r\n\t EXISTS (SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_occurrence_ak_id = b.claim_occurrence_ak_id\r\n\t\t\tAND a.claim_party_role_code = b.claim_party_role_code\r\n\t            AND a.claim_party_occurrence_ak_id = b.claim_party_occurrence_ak_id\r\n\t\t\tAND a.claim_party_ak_id = b.claim_party_ak_id\r\n\t            AND a.claim_case_ak_id = b.claim_case_ak_id\r\n\t\t\tGROUP BY claim_occurrence_ak_id, claim_party_role_code, claim_party_ak_id, claim_case_ak_id\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_occurrence_ak_id, claim_party_role_code, claim_party_ak_id, a.claim_case_ak_id, eff_from_date  DESC\r\n\t\r\n\t--The extra condition ****** AND a.claim_party_occurrence_ak_id = b.claim_party_occurrence_ak_id *****  has been added on 11/18/2009 because 45GJ, 45GQ and 4578 sources loading claim_party_occurrence have different logical AK ids. 45GJ and 45GQ don't consider claim_case_ak_id as part of the overall AK id of target table whereas 4578 does. As a result, this pipeline was expiring some of the records loaded by 4578. In order to aviod that, this extra condition has been included.\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_occurrence_id,\n\tclaim_party_role_code,\n\tclaim_occurrence_ak_id,\n\tclaim_party_ak_id,\n\tclaim_case_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_occurrence_ak_id = v_PREV_ROW_claim_occurrence_ak_id AND\r\n\t-- \tclaim_party_ak_id = v_PREV_ROW_claim_party_ak_id AND\r\n\t-- \tclaim_party_role_code = v_PREV_ROW_claim_party_role_code AND\r\n\t--       claim_case_ak_id=v_PREV_ROW_claim_case_ak_id,\r\n\t-- ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- orig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_occurrence_ak_id = v_PREV_ROW_claim_occurrence_ak_id AND claim_party_ak_id = v_PREV_ROW_claim_party_ak_id AND claim_party_role_code = v_PREV_ROW_claim_party_role_code AND claim_case_ak_id = v_PREV_ROW_claim_case_ak_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_occurrence_ak_id AS v_PREV_ROW_claim_occurrence_ak_id,\n\tclaim_party_ak_id AS v_PREV_ROW_claim_party_ak_id,\n\tclaim_party_role_code AS v_PREV_ROW_claim_party_role_code,\n\tclaim_case_ak_id AS v_PREV_ROW_claim_case_ak_id,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party_occurrence\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_occurrence_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party_Occurrence AS (\n\tSELECT\n\tclaim_party_occurrence_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_occurrence_Update AS (\n\tMERGE INTO claim_party_occurrence AS T\n\tUSING UPD_Claim_Party_Occurrence AS S\n\tON T.claim_party_occurrence_id = S.claim_party_occurrence_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604322"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "SOURCE_SYS_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}