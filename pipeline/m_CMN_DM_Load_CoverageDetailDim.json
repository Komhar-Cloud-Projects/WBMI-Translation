{
    "name": "m_CMN_DM_Load_CoverageDetailDim",
    "properties": {
        "activities": [
            {
                "name": "m_CMN_DM_Load_CoverageDetailDim",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_CoverageLimit AS (\n\tSELECT\n\tCoverageLimitValue,\n\tPremiumTransactionAKID,\n\tCoverageLimitType\n\tFROM (\n\t\tSELECT PremiumTransactionAKID as PremiumTransactionAKID,\r\n\t\tCoverageLimitType as CoverageLimitType,\r\n\t\tCoverageLimitValue as CoverageLimitValue from (\r\n\t\tselect clb.PremiumTransactionAKID as PremiumTransactionAKID,\r\n\t\tcl.CoverageLimitType as CoverageLimitType,\r\n\t\tcl.CoverageLimitValue as CoverageLimitValue\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\t\ton cl.CoverageLimitId=clb.CoverageLimitId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\t\ton pt.PremiumTransactionAKId=clb.PremiumTransactionAKId\r\n\t\tWHERE PT.SourceSystemId='DCT' and ( '@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00' or \r\n\t\texists ( select 1 \r\n\t\t               from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT2 \r\n\t\t               where PT2.RatingCoverageAKId=PT.RatingCoverageAKId and PT2.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\t               AND PT2.SourceSystemId='DCT'))\r\n\t\t\r\n\t\tUNION ALL\r\n\t\t\r\n\t\tSELECT\r\n\t\tclb.PremiumTransactionAKID as PremiumTransactionAKID,\r\n\t\tcl.CoverageLimitType as CoverageLimitType,\r\n\t\tcl.CoverageLimitValue as CoverageLimitValue\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\t\ton cl.CoverageLimitId=clb.CoverageLimitId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\t\ton pt.PremiumTransactionAKId=clb.PremiumTransactionAKId\r\n\t\tWHERE PT.SourceSystemId='PMS' and ( '@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00' or \r\n\t\texists ( select 1 \r\n\t\t               from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT2 \r\n\t\t               where PT2.StatisticalCoverageAKId=PT.StatisticalCoverageAKId and \r\n\t\t              PT2.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}' AND PT2.SourceSystemId='PMS'))) a\r\n\t\torder by PremiumTransactionAKID,CoverageLimitType\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID,CoverageLimitType ORDER BY CoverageLimitValue) = 1\n),\nLKP_Supclassification_Lob AS (\n\tSELECT\n\tResult,\n\tLineOfBusinessAbbreviation,\n\tClassCode,\n\tRatingStateCode\n\tFROM (\n\t\tselect ClassCode as ClassCode \r\n\t\t,RatingStateCode as RatingStateCode \r\n\t\t,LineOfBusinessAbbreviation as LineOfBusinessAbbreviation\r\n\t\t, Result as Result  from \r\n\t\t(\r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'CF' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationCommercialProperty\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'CA' AS LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationCommercialAuto\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'CR' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationCrime\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'WC' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationWorkersCompensation\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'BND' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationBonds\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'IM' as LineOfBusinessAbbreviation , case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end  As Result\r\n\t\tfrom dbo.SupClassificationInlandMarine\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'UMB' as LineOfBusinessAbbreviation , case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationUmbrella\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'DNO' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationDirectorsOfficers\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'ENO' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationErrorsOmissions\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'EPLI' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationEPLI\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'EL' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result \r\n\t\tfrom dbo.SupClassificationExcessLiability\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion \r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'GA' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationGarage\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\tUnion\r\n\t\tselect ClassCode as ClassCode ,RatingStateCode as RatingStateCode,'GL' as LineOfBusinessAbbreviation, case when ClassDescription IS NULL then 'N/A'  Else ClassDescription end + '#'+case when OriginatingOrganizationCode IS NULL then 'N/A'  Else OriginatingOrganizationCode end As Result\r\n\t\tfrom dbo.SupClassificationGeneralLiability\r\n\t\twhere CurrentSnapshotFlag=1\r\n\t\t) a\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY LineOfBusinessAbbreviation,ClassCode,RatingStateCode ORDER BY Result) = 1\n),\nSQ_GetDataFromEDW AS (\n\tWITH CTE_DCT\r\n\tAS\r\n\t(\r\n\tselect \r\n\tPC.PolicyCoverageID,\r\n\tPT.PremiumTransactionID, \r\n\tRC.RatingCoverageId, \r\n\tPC.RiskLocationAKID\r\n\tfrom       @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT \r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC on PT.RatingCoverageAKId=RC.RatingCoverageAKID \r\n\tand PT.EffectiveDate=RC.EffectiveDate\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on RC.PolicyCoverageAKID=PC.PolicyCoverageAKID \r\n\tand PC.CurrentSnapshotFlag=1\r\n\twhere PT.RatingCoverageAKId in \r\n\t(\r\n\tselect distinct RatingCoverageAKId  from PremiumTransaction with (nolock) where SourceSystemId IN ('DCT') and\r\n\t(CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}' or ('@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00'))\r\n\t)\r\n\tAND PT.ReasonAmendedCode NOT IN ('CWO', 'Claw Back') -- Added filter for the JIRA PROD-19657\r\n\t)\r\n\t ,\r\n\tCTE_PMS\r\n\tAS\r\n\t(\r\n\tselect distinct PremiumTransaction.StatisticalCoverageAKID,PolicyCoverageAKID \r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction with (nolock) \r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage on PremiumTransaction.StatisticalCoverageAKID=StatisticalCoverage.StatisticalCoverageAKID\r\n\twhere PremiumTransaction.SourceSystemId IN ('PMS') \r\n\tAND PremiumTransaction.ReasonAmendedCode NOT IN ('CWO', 'Claw Back') -- Added filter for the JIRA PROD-19657\r\n\tand (PremiumTransaction.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}' or ('@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00'))\r\n\t)\r\n\t\r\n\tSELECT PT.IncreasedLimitGroupCode AS IncreasedLimitGroupCode\r\n\t , ILG.StandardIncreasedLimitGroupDescription AS IncreasedLimitGroupDescription \r\n\t,(case when PMAG.StandardPackageModifcationAdjustmentGroupCode is null  then 'N/A' \r\n\telse PMAG.StandardPackageModifcationAdjustmentGroupCode end) AS PackageModificationAdjustmentGroupCode\r\n\t , PMAG.StandardPackageModificationAsjustmentGroupDescription AS PackageModificationAdjustmentGroupDescription\r\n\t , RC.ClassCode\r\n\t , PT.IncreasedLimitFactor\r\n\t , RC.CoverageGUID\r\n\t , RC.SubLocationUnitNumber\r\n\t , Deductible.DeductibleAmount\r\n\t , PT.PackageModificationAdjustmentFactor\r\n\t , PT.YearBuilt\r\n\t , RC.ClassCodeOrganizationCode\r\n\t , SIL.StandardInsuranceLineCode\r\n\t , PC.RiskGradeCode\r\n\t , (case when RL.LocationIndicator='Y' then RL.LocationUnitNumber else '0000' end) as LocationUnitNumber\r\n\t , PTRR.RatingTerritoryCode as RiskTerritory\r\n\t , RL.StateProvinceCode\r\n\t , RL.ZipPostalCode\r\n\t , RL.RatingCity\r\n\t , RL.RatingCounty\r\n\t , RL.StreetAddress\r\n\t , (case when RC.ClassCodeOrganizationCode='ISS' then 'ALL' else SS.state_code end)  as state_code\r\n\t , RC.RatingCoverageEffectiveDate as CoverageEffectiveDate\r\n\t , PT.PremiumTransactionID\r\n\t , PT.PremiumTransactionEffectiveDate\r\n\t , '1' as OrderKey\r\n\t,PC.PriorCoverageId\r\n\t,PT.IndividualRiskPremiumModification\r\n\t,PT.PremiumTransactionAKID\r\n\t,PT.ConstructionCode\r\n\t,PT.WindCoverageFlag\r\n\t,'DCT' AS SourceSystemID\r\n\t, null as RiskUnitGroup\r\n\t, null as RiskUnit\r\n\t, PT.BaseRate\r\n\t, PT.ExposureBasis\r\n\t, IR.InsuranceReferenceLineOfBusinessAbbreviation\r\n\t, PC.PolicyAKID\r\n\t, P.ProductAbbreviation\r\n\t,PTRR.CensusBlockGroupCountyCode as CensusBlockGroupCountyCode\r\n\t,PTRR.CensusBlockGroupTractCode as CensusBlockGroupTractCode\r\n\t,PTRR.CensusBlockGroupBlockGroupCode as CensusBlockGroupBlockGroupCode\r\n\t,PTRR.Latitude as Latitude\r\n\t,PTRR.Longitude as Longitude\r\n\tFROM \r\n\tCTE_DCT\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on CTE_DCT.PolicyCoverageID=PC.PolicyCoverageID\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT ON CTE_DCT.PremiumTransactionID = PT.PremiumTransactionID\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC on CTE_DCT.RatingCoverageId=RC.RatingCoverageID\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceLineOfBusiness IR\r\n\tON IR.InsuranceReferenceLineOfBusinessAKId=RC.InsuranceReferenceLineOfBusinessAKId\r\n\tAND IR.CurrentSnapshotFlag=1\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKId=RL.RiskLocationAKId and RL.CurrentSnapshotFlag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupIncreasedLimitGroup ILG\r\n\tON ILG.StandardIncreasedLimitGroupCode = PT.IncreasedLimitGroupCode AND ILG.SourceSystemId='DCT' AND ILG.CurrentSnapshotFlag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupPackageModificationAdjustmentGroup PMAG\r\n\tON PMAG.PackageModificationAdjustmentGroupCode=PT.PackageModificationAdjustmentGroupCode\r\n\tAND PMAG.SourceSystemId='DCT' AND PMAG.CurrentSnapshotFlag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_insurance_line SIL\r\n\ton SIL.ins_line_code=PC.InsuranceLine and SIL.crrnt_snpsht_flag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_state SS\r\n\ton (case when len(SS.state_abbrev)=1 then '0'+SS.state_abbrev else SS.state_abbrev end)=(case when len(RL.StateProvinceCode)=1 then '0'+RL.StateProvinceCode else RL.StateProvinceCode end) and SS.crrnt_snpsht_flag=1\r\n\tLEFT JOIN (\r\n\tselect cdb.PremiumTransactionAKId, \r\n\tCONVERT(varchar(20),max(case when ISNUMERIC(cd.CoverageDeductibleValue)=1 then CONVERT(decimal,CoverageDeductibleValue) else 0 end)) as DeductibleAmount\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge cdb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible cd\r\n\ton cdb.CoverageDeductibleId=cd.CoverageDeductibleId\r\n\twhere cdb.SourceSystemID='DCT' and cd.SourceSystemID='DCT'\r\n\tgroup by cdb.PremiumTransactionAKId) Deductible\r\n\ton pt.PremiumTransactionAKID=Deductible.PremiumTransactionAKId\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.Product P\r\n\tON P.ProductAKId = RC.ProductAKId AND P.CurrentSnapshotFlag = 1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransactionRatingRisk PTRR\r\n\ton PTRR.PremiumTransactionID = PT.PremiumTransactionID\r\n\t@{pipeline().parameters.WHERE_CLAUSE_DCT}\r\n\t\r\n\tUNION ALL\r\n\t\r\n\tSELECT PT.IncreasedLimitGroupCode AS IncreasedLimitGroupCode\r\n\t , ILG.StandardIncreasedLimitGroupDescription AS IncreasedLimitGroupDescription\r\n\t ,(case when PMAG.StandardPackageModifcationAdjustmentGroupCode is null  then 'N/A' \r\n\telse PMAG.StandardPackageModifcationAdjustmentGroupCode end) AS PackageModificationAdjustmentGroupCode\r\n\t , PMAG.StandardPackageModificationAsjustmentGroupDescription AS PackageModificationAdjustmentGroupDescription\r\n\t , case when SC.Riskunitgroup='286' then SC.RiskUnit else SC.ClassCode end ClassCode\r\n\t , PT.IncreasedLimitFactor\r\n\t , SC.CoverageGUID\r\n\t , SC.SubLocationUnitNumber\r\n\t , Deductible.DeductibleAmount\r\n\t , PT.PackageModificationAdjustmentFactor\r\n\t , PT.YearBuilt\r\n\t , SC.ClassCodeOrganizationCode\r\n\t , SIL.StandardInsuranceLineCode\r\n\t , PC.RiskGradeCode\r\n\t , (case when RL.LocationIndicator='Y' then RL.LocationUnitNumber else '0000' end) as LocationUnitNumber\r\n\t , RL.RiskTerritory\r\n\t , RL.StateProvinceCode\r\n\t , RL.ZipPostalCode\r\n\t , RL.RatingCity\r\n\t , RL.RatingCounty\r\n\t , RL.StreetAddress\r\n\t , (case when SC.ClassCodeOrganizationCode='ISS' then 'ALL' else SS.state_code end)  as state_code\r\n\t , SC.StatisticalCoverageEffectiveDate as CoverageEffectiveDate\r\n\t , PT.PremiumTransactionID\r\n\t , PT.PremiumTransactionEffectiveDate\r\n\t , '2' as OrderKey\r\n\t,PC.PriorCoverageId\r\n\t,PT.IndividualRiskPremiumModification\r\n\t,PT.PremiumTransactionAKID\r\n\t,PT.ConstructionCode\r\n\t,PT.WindCoverageFlag\r\n\t,'PMS' AS SourceSystemID\r\n\t, SC.RiskUnitGroup\r\n\t, SC.RiskUnit\r\n\t, PT.BaseRate\r\n\t, PT.ExposureBasis\r\n\t, IR.InsuranceReferenceLineOfBusinessAbbreviation\r\n\t, PC.PolicyAKID\r\n\t, P.ProductAbbreviation\r\n\t,null as CensusBlockGroupCountyCode\r\n\t,null as CensusBlockGroupTractCode\r\n\t,null as CensusBlockGroupBlockGroupCode\r\n\t,null as Latitude\r\n\t,null as Longitude\r\n\tFROM \r\n\tCTE_PMS\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC on CTE_PMS.StatisticalCoverageAKID = SC.StatisticalCoverageAKID\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC on CTE_PMS.PolicyCoverageAKID= PC.PolicyCoverageAKID\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT on CTE_PMS.StatisticalCoverageAKID=PT.StatisticalCoverageAKID and PT.SourceSystemID='PMS'\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceLineOfBusiness IR\r\n\tON IR.InsuranceReferenceLineOfBusinessAKId=SC.InsuranceReferenceLineOfBusinessAKId\r\n\tAND IR.CurrentSnapshotFlag=1\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\ton PC.RiskLocationAKId=RL.RiskLocationAKId\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupIncreasedLimitGroup ILG\r\n\tON ILG.StandardIncreasedLimitGroupCode = PT.IncreasedLimitGroupCode AND ILG.SourceSystemId='PMS' AND ILG.CurrentSnapshotFlag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.SupPackageModificationAdjustmentGroup PMAG\r\n\tON PMAG.PackageModificationAdjustmentGroupCode =PT.PackageModificationAdjustmentGroupCode\r\n\tAND PMAG.SourceSystemId='PMS' AND PMAG.CurrentSnapshotFlag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_insurance_line SIL\r\n\ton SIL.ins_line_code=PC.InsuranceLine and SIL.crrnt_snpsht_flag=1\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_state SS\r\n\ton (case when len(SS.state_abbrev)=1 then '0'+SS.state_abbrev else SS.state_abbrev end)=(case when len(RL.StateProvinceCode)=1 then '0'+RL.StateProvinceCode else RL.StateProvinceCode end) and SS.crrnt_snpsht_flag=1\r\n\tLEFT JOIN (\r\n\tselect cdb.PremiumTransactionAKId, \r\n\tCONVERT(varchar(20),max(case when ISNUMERIC(cd.CoverageDeductibleValue)=1 then CONVERT(decimal,CoverageDeductibleValue) else 0 end)) as DeductibleAmount\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductibleBridge cdb\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDeductible cd\r\n\ton cdb.CoverageDeductibleId=cd.CoverageDeductibleId\r\n\twhere cdb.SourceSystemID='PMS' and cd.SourceSystemID='PMS'\r\n\tgroup by cdb.PremiumTransactionAKId) Deductible\r\n\ton pt.PremiumTransactionAKID=Deductible.PremiumTransactionAKId\r\n\tLEFT JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.Product P\r\n\tON P.ProductAKId = SC.ProductAKId AND P.CurrentSnapshotFlag = 1\r\n\t@{pipeline().parameters.WHERE_CLAUSE_PMS}\r\n\t\r\n\tUNION ALL      ----one dummy record\r\n\t\r\n\tselect null as IncreasedLimitGroupCode\r\n\t , null as IncreasedLimitGroupDescription\r\n\t , null as PackageModificationAdjustmentGroupCode\r\n\t , null as PackageModificationAdjustmentGroupDescription\r\n\t , null as ClassCode\r\n\t , null as IncreasedLimitFactor\r\n\t , null as CoverageGUID\r\n\t , null as SubLocationUnitNumber\r\n\t , null as DeductibleAmount\r\n\t , null as PackageModificationAdjustmentFactor\r\n\t , null as YearBuilt\r\n\t , null as ClassCodeOrganizationCode\r\n\t , null as StandardInsuranceLineCode\r\n\t , null as RiskGradeCode\r\n\t , null as LocationUnitNumber\r\n\t , null as RiskTerritory\r\n\t , null as StateProvinceCode\r\n\t , null as ZipPostalCode\r\n\t , null as RatingCity\r\n\t , null as RatingCounty\r\n\t , null as StreetAddress\r\n\t , null  as state_code\r\n\t , null as CoverageEffectiveDate\r\n\t , null as PremiumTransactionID\r\n\t , null as PremiumTransactionEffectiveDate\r\n\t , '3' as OrderKey\r\n\t,null as PriorCoverageId\r\n\t,null as IndividualRiskPremiumModification\r\n\t,null as PremiumTransactionAKID\r\n\t,null as ConstructionCode\r\n\t,null as WindCoverageFlag\r\n\t,null as SourceSystemID\r\n\t, null as RiskUnitGroup\r\n\t, null as RiskUnit\r\n\t, null as BaseRate\r\n\t, null as ExposureBasis\r\n\t, null as InsuranceReferenceLineOfBusinessAbbreviation\r\n\t, null as PolicyAKID\r\n\t, null as ProductAbbreviation\r\n\t,null as CensusBlockGroupCountyCode\r\n\t,null as CensusBlockGroupTractCode\r\n\t,null as CensusBlockGroupBlockGroupCode\r\n\t,null as Latitude\r\n\t,null as Longitude\n),\nEXP_Input AS (\n\tSELECT\n\tIncreasedLimitGroupCode,\n\tStandardIncreasedLimitGroupDescription,\n\tPackageModificationAdjustmentGroupCode,\n\tStandardPackageModificationAsjustmentGroupDescription,\n\tClassCode,\n\tIncreasedLimitFactor,\n\tCoverageGUID,\n\tSubLocationUnitNumber,\n\tDeductibleAmount,\n\tPackageModificationAdjustmentFactor,\n\tYearBuilt,\n\tClassCodeOrganizationCode,\n\tInsuranceLine,\n\tRiskGradeCode,\n\tLocationUnitNumber,\n\tRiskTerritory,\n\tStateProvinceCode,\n\tZipPostalCode,\n\tRatingCity,\n\tRatingCounty,\n\tStreetAddress,\n\tstate_code,\n\tCoverageEffectiveDate,\n\tPremiumTransactionID,\n\tPremiumTransactionEffectiveDate,\n\tOrderKey,\n\tPriorCoverageId,\n\tIndividualRiskPremiumModification,\n\tPremiumTransactionAKID,\n\tConstructionCode,\n\tWindCoverageFlag,\n\tSourceSystemId,\n\tRiskUnitGroup,\n\tRiskUnit,\n\tBaseRate,\n\tExposureBasis,\n\tInsuranceReferenceLineOfBusinessAbbreviation,\n\tPolicyAKID,\n\tProductAbbreviation,\n\tCensusBlockGroupCountyCode,\n\tCensusBlockGroupTractCode,\n\tCensusBlockGroupBlockGroupCode,\n\tLatitude,\n\tLongitude\n\tFROM SQ_GetDataFromEDW\n),\nSRT_Input AS (\n\tSELECT\n\tOrderKey, \n\tPolicyAKID, \n\tCoverageGUID, \n\tPremiumTransactionEffectiveDate, \n\tPremiumTransactionID, \n\tIncreasedLimitGroupCode, \n\tStandardIncreasedLimitGroupDescription, \n\tPackageModificationAdjustmentGroupCode, \n\tStandardPackageModificationAsjustmentGroupDescription, \n\tClassCode, \n\tIncreasedLimitFactor, \n\tSubLocationUnitNumber, \n\tDeductibleAmount, \n\tPackageModificationAdjustmentFactor, \n\tYearBuilt, \n\tClassCodeOrganizationCode, \n\tInsuranceLine, \n\tRiskGradeCode, \n\tLocationUnitNumber, \n\tRiskTerritory, \n\tStateProvinceCode, \n\tZipPostalCode, \n\tRatingCity, \n\tRatingCounty, \n\tStreetAddress, \n\tstate_code, \n\tCoverageEffectiveDate, \n\tPriorCoverageId, \n\tIndividualRiskPremiumModification, \n\tPremiumTransactionAKID, \n\tConstructionCode, \n\tWindCoverageFlag, \n\tSourceSystemId, \n\tRiskUnitGroup, \n\tRiskUnit, \n\tBaseRate, \n\tExposureBasis, \n\tInsuranceReferenceLineOfBusinessAbbreviation, \n\tProductAbbreviation, \n\tCensusBlockGroupCountyCode, \n\tCensusBlockGroupTractCode, \n\tCensusBlockGroupBlockGroupCode, \n\tLatitude, \n\tLongitude\n\tFROM EXP_Input\n\tORDER BY OrderKey ASC, PolicyAKID ASC, CoverageGUID ASC, PremiumTransactionEffectiveDate DESC, PremiumTransactionID DESC\n),\nEXP_GetValues AS (\n\tSELECT\n\tIncreasedLimitGroupCode AS i_IncreasedLimitGroupCode,\n\tStandardIncreasedLimitGroupDescription AS i_StandardIncreasedLimitGroupDescription,\n\tPackageModificationAdjustmentGroupCode AS i_PackageModificationAdjustmentGroupCode,\n\tStandardPackageModificationAsjustmentGroupDescription AS i_StandardPackageModificationAsjustmentGroupDescription,\n\tClassCode AS i_ClassCode,\n\tIncreasedLimitFactor AS i_IncreasedLimitFactor,\n\tCoverageGUID AS i_CoverageGUID,\n\tPolicyAKID AS i_PolicyAKID,\n\tSubLocationUnitNumber AS i_SubLocationUnitNumber,\n\tDeductibleAmount AS i_DeductibleAmount,\n\tPackageModificationAdjustmentFactor AS i_PackageModificationAdjustmentFactor,\n\tYearBuilt AS i_YearBuilt,\n\tClassCodeOrganizationCode AS i_ClassCodeOrganizationCode,\n\tInsuranceLine AS i_InsuranceLine,\n\tRiskGradeCode AS i_RiskGradeCode,\n\tLocationUnitNumber AS i_LocationUnitNumber,\n\tRiskTerritory AS i_RiskTerritory,\n\tStateProvinceCode AS i_StateProvinceCode,\n\tZipPostalCode AS i_ZipPostalCode,\n\tRatingCity AS i_RatingCity,\n\tRatingCounty AS i_RatingCounty,\n\tStreetAddress AS i_StreetAddress,\n\tstate_code AS i_state_code,\n\tCoverageEffectiveDate AS i_CoverageEffectiveDate,\n\tPremiumTransactionID AS i_PremiumTransactionID,\n\tPremiumTransactionEffectiveDate AS i_PremiumTransactionEffectiveDate,\n\tOrderKey AS i_OrderKey,\n\tPriorCoverageId AS i_PriorCoverageId,\n\tIndividualRiskPremiumModification AS i_IndividualRiskPremiumModification,\n\tPremiumTransactionAKID AS i_PremiumTransactionAKID,\n\tConstructionCode AS i_ConstructionCode,\n\tWindCoverageFlag AS i_WindCoverageFlag,\n\tSourceSystemId AS i_SourceSystemId,\n\tRiskUnitGroup AS i_RiskUnitGroup,\n\tRiskUnit AS i_RiskUnit,\n\tBaseRate AS i_BaseRate,\n\tExposureBasis AS i_ExposureBasis,\n\tInsuranceReferenceLineOfBusinessAbbreviation AS i_InsuranceReferenceLineOfBusinessAbbreviation,\n\tProductAbbreviation AS i_ProductAbbreviation,\n\tCensusBlockGroupCountyCode AS i_CensusBlockGroupCountyCode,\n\tCensusBlockGroupTractCode AS i_CensusBlockGroupTractCode,\n\tCensusBlockGroupBlockGroupCode AS i_CensusBlockGroupBlockGroupCode,\n\tLatitude AS i_Latitude,\n\tLongitude AS i_Longitude,\n\tv_Count+1 AS v_Count,\n\tv_Prev_InsuranceLine AS v_InsuranceLine,\n\tv_Prev_CoverageEffectiveDate AS v_CoverageEffectiveDate,\n\tv_Prev_IncreasedLimitGroupCode AS v_IncreasedLimitGroupCode,\n\tv_Prev_IncreasedLimitGroupDescription AS v_IncreasedLimitGroupDescription,\n\tv_Prev_PackageModificationAdjustmentGroupCode AS v_PackageModificationAdjustmentGroupCode,\n\tv_Prev_PackageModificationAdjustmentGroupDescription AS v_PackageModificationAdjustmentGroupDescription,\n\tv_Prev_ClassCode AS v_ClassCode,\n\tv_Prev_BuildingNumber AS v_BuildingNumber,\n\tv_Prev_LocationNumber AS v_LocationNumber,\n\tv_Prev_DeductibleAmount AS v_DeductibleAmount,\n\tv_Prev_RiskGradeCode AS v_RiskGradeCode,\n\tv_Prev_PackageModificationAdjustmentFactor AS v_PackageModificationAdjustmentFactor,\n\tv_Prev_YearBuilt AS v_YearBuilt,\n\tv_Prev_ClassCodeOrganizationCode AS v_ClassCodeOrganizationCode,\n\tv_Prev_IncreasedLimitFactor AS v_IncreasedLimitFactor,\n\tv_Prev_CoverageGUID AS v_CoverageGUID,\n\tv_Prev_RatingCity AS v_RatingCity,\n\tv_Prev_RatingCounty AS v_RatingCounty,\n\tv_Prev_RatingStateProvinceCode AS v_RatingStateProvinceCode,\n\tv_Prev_RatingStateProvinceAbbreviation AS v_RatingStateProvinceAbbreviation,\n\tv_Prev_RatingPostalCode AS v_RatingPostalCode,\n\tv_Prev_RatingAddress AS v_RatingAddress,\n\tv_Prev_RatingTerritory AS v_RatingTerritory,\n\tv_Prev_EDWPremiumTransactionPKId AS v_EDWPremiumTransactionPKId,\n\t-- *INF*: IIF( NOT ISNULL(v_Prev_EffectiveDate) AND\r\n\t-- ((i_CoverageGUID != v_Prev_CoverageGUID and i_PolicyAKID=v_Prev_PolicyAKID) or\r\n\t-- ( i_CoverageGUID != v_Prev_CoverageGUID and i_PolicyAKID!= v_Prev_PolicyAKID)) ,\r\n\t-- TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), v_Prev_EffectiveDate)\r\n\t-- -- Added above logic as part of DAP-879\r\n\t-- \r\n\t-- --IIF( NOT ISNULL(v_Prev_EffectiveDate) AND i_CoverageGUID != v_Prev_CoverageGUID, TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), v_Prev_EffectiveDate)\n\tIFF(NOT v_Prev_EffectiveDate IS NULL AND ( ( i_CoverageGUID != v_Prev_CoverageGUID AND i_PolicyAKID = v_Prev_PolicyAKID ) OR ( i_CoverageGUID != v_Prev_CoverageGUID AND i_PolicyAKID != v_Prev_PolicyAKID ) ), TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), v_Prev_EffectiveDate) AS v_EffectiveDate,\n\tv_Prev_ExpirationDate AS v_ExpirationDate,\n\tv_Prev_PriorCoverageId AS v_PriorCoverageId,\n\tv_Prev_IndividualRiskPremiumModification AS v_IndividualRiskPremiumModification,\n\tv_Prev_PremiumTransactionAKID AS v_PremiumTransactionAKID,\n\tv_Prev_ConstructionCode AS v_ConstructionCode,\n\tv_Prev_WindCoverageFlag AS v_WindCoverageFlag,\n\tv_Prev_SourceSystemId AS v_SourceSystemId,\n\tv_Prev_RiskUnitGroup AS v_RiskUnitGroup,\n\tv_Prev_RiskUnit AS v_RiskUnit,\n\tv_Prev_BaseRate AS v_BaseRate,\n\tv_Prev_ExposureBasis AS v_ExposureBasis,\n\tv_Prev_Out_ClassCode AS v_Out_ClassCode,\n\tv_Prev_LineOfBusinessAbbreviation AS v_LineOfBusinessAbbreviation,\n\tv_Prev_ProductAbbreviation AS v_ProductAbbreviation,\n\tv_Prev_CensusBlockGroupCountyCode AS v_CensusBlockGroupCountyCode,\n\tv_Prev_CensusBlockGroupTractCode AS v_CensusBlockGroupTractCode,\n\tv_Prev_CensusBlockGroupBlockGroupCode AS v_CensusBlockGroupBlockGroupCode,\n\tv_Prev_Latitude AS v_Latitude,\n\tv_Prev_Longitude AS v_Longitude,\n\ti_BaseRate AS v_Prev_BaseRate,\n\ti_InsuranceLine AS v_Prev_InsuranceLine,\n\ti_CoverageEffectiveDate AS v_Prev_CoverageEffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_IncreasedLimitGroupCode), 'N/A', i_IncreasedLimitGroupCode)\n\tIFF(i_IncreasedLimitGroupCode IS NULL, 'N/A', i_IncreasedLimitGroupCode) AS v_Prev_IncreasedLimitGroupCode,\n\t-- *INF*: IIF(ISNULL(i_StandardIncreasedLimitGroupDescription), 'N/A', i_StandardIncreasedLimitGroupDescription)\n\tIFF(i_StandardIncreasedLimitGroupDescription IS NULL, 'N/A', i_StandardIncreasedLimitGroupDescription) AS v_Prev_IncreasedLimitGroupDescription,\n\t-- *INF*: IIF(ISNULL(i_PackageModificationAdjustmentGroupCode), 'N/A', i_PackageModificationAdjustmentGroupCode)\n\tIFF(i_PackageModificationAdjustmentGroupCode IS NULL, 'N/A', i_PackageModificationAdjustmentGroupCode) AS v_Prev_PackageModificationAdjustmentGroupCode,\n\t-- *INF*: IIF(ISNULL(i_StandardPackageModificationAsjustmentGroupDescription), 'N/A', i_StandardPackageModificationAsjustmentGroupDescription)\n\tIFF(i_StandardPackageModificationAsjustmentGroupDescription IS NULL, 'N/A', i_StandardPackageModificationAsjustmentGroupDescription) AS v_Prev_PackageModificationAdjustmentGroupDescription,\n\t-- *INF*: IIF(ISNULL(i_ClassCode), 'N/A', i_ClassCode)\n\tIFF(i_ClassCode IS NULL, 'N/A', i_ClassCode) AS v_Prev_ClassCode,\n\t-- *INF*: IIF(ISNULL(i_SubLocationUnitNumber), '000', i_SubLocationUnitNumber)\n\tIFF(i_SubLocationUnitNumber IS NULL, '000', i_SubLocationUnitNumber) AS v_Prev_BuildingNumber,\n\t-- *INF*: IIF(ISNULL(i_LocationUnitNumber), '0000', i_LocationUnitNumber) \n\tIFF(i_LocationUnitNumber IS NULL, '0000', i_LocationUnitNumber) AS v_Prev_LocationNumber,\n\t-- *INF*: IIF(ISNULL(i_DeductibleAmount), '0', i_DeductibleAmount)\n\tIFF(i_DeductibleAmount IS NULL, '0', i_DeductibleAmount) AS v_Prev_DeductibleAmount,\n\t-- *INF*: IIF(ISNULL(i_RiskGradeCode), 'N/A', i_RiskGradeCode)\n\tIFF(i_RiskGradeCode IS NULL, 'N/A', i_RiskGradeCode) AS v_Prev_RiskGradeCode,\n\t-- *INF*: IIF(ISNULL(i_PackageModificationAdjustmentFactor), 0, i_PackageModificationAdjustmentFactor)\n\tIFF(i_PackageModificationAdjustmentFactor IS NULL, 0, i_PackageModificationAdjustmentFactor) AS v_Prev_PackageModificationAdjustmentFactor,\n\t-- *INF*: IIF(ISNULL(i_YearBuilt), '0000', i_YearBuilt)\n\tIFF(i_YearBuilt IS NULL, '0000', i_YearBuilt) AS v_Prev_YearBuilt,\n\t-- *INF*: IIF(ISNULL(i_ClassCodeOrganizationCode), 'N/A', i_ClassCodeOrganizationCode)\n\tIFF(i_ClassCodeOrganizationCode IS NULL, 'N/A', i_ClassCodeOrganizationCode) AS v_Prev_ClassCodeOrganizationCode,\n\t-- *INF*: IIF(ISNULL(i_IncreasedLimitFactor), 0, i_IncreasedLimitFactor)\n\tIFF(i_IncreasedLimitFactor IS NULL, 0, i_IncreasedLimitFactor) AS v_Prev_IncreasedLimitFactor,\n\t-- *INF*: IIF(ISNULL(i_RatingCity), 'N/A', i_RatingCity)\n\tIFF(i_RatingCity IS NULL, 'N/A', i_RatingCity) AS v_Prev_RatingCity,\n\t-- *INF*: IIF(ISNULL(i_RatingCounty), 'N/A', i_RatingCounty)\n\tIFF(i_RatingCounty IS NULL, 'N/A', i_RatingCounty) AS v_Prev_RatingCounty,\n\t-- *INF*: IIF(ISNULL(i_StateProvinceCode), 'N/A', i_StateProvinceCode)\n\tIFF(i_StateProvinceCode IS NULL, 'N/A', i_StateProvinceCode) AS v_Prev_RatingStateProvinceCode,\n\t-- *INF*: IIF(ISNULL(i_state_code), 'N/A', i_state_code)\n\tIFF(i_state_code IS NULL, 'N/A', i_state_code) AS v_Prev_RatingStateProvinceAbbreviation,\n\t-- *INF*: IIF(ISNULL(i_ZipPostalCode), 'N/A', i_ZipPostalCode)\n\tIFF(i_ZipPostalCode IS NULL, 'N/A', i_ZipPostalCode) AS v_Prev_RatingPostalCode,\n\t-- *INF*: IIF(ISNULL(i_StreetAddress), 'N/A', i_StreetAddress)\n\tIFF(i_StreetAddress IS NULL, 'N/A', i_StreetAddress) AS v_Prev_RatingAddress,\n\t-- *INF*: IIF(ISNULL(i_RiskTerritory), 'N/A', i_RiskTerritory)\n\tIFF(i_RiskTerritory IS NULL, 'N/A', i_RiskTerritory) AS v_Prev_RatingTerritory,\n\ti_PremiumTransactionID AS v_Prev_EDWPremiumTransactionPKId,\n\t-- *INF*: IIF((i_CoverageGUID != v_Prev_CoverageGUID and i_PolicyAKID=v_Prev_PolicyAKID) or\r\n\t--  ( i_CoverageGUID != v_Prev_CoverageGUID and i_PolicyAKID!= v_Prev_PolicyAKID), \r\n\t-- TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), ADD_TO_DATE(v_Prev_EffectiveDate, 'SS', +1))\r\n\t-- \r\n\t-- \r\n\t-- -- Added above logic as part of DAP-879\r\n\t-- --IIF(i_CoverageGUID != v_Prev_CoverageGUID, TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), ADD_TO_DATE(v_Prev_EffectiveDate, 'SS', -1))\n\tIFF(( i_CoverageGUID != v_Prev_CoverageGUID AND i_PolicyAKID = v_Prev_PolicyAKID ) OR ( i_CoverageGUID != v_Prev_CoverageGUID AND i_PolicyAKID != v_Prev_PolicyAKID ), TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), ADD_TO_DATE(v_Prev_EffectiveDate, 'SS', + 1)) AS v_Prev_ExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_CoverageGUID), 'N/A', i_CoverageGUID)\n\tIFF(i_CoverageGUID IS NULL, 'N/A', i_CoverageGUID) AS v_Prev_CoverageGUID,\n\ti_PremiumTransactionEffectiveDate AS v_Prev_EffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_PriorCoverageId),-1,i_PriorCoverageId)\n\tIFF(i_PriorCoverageId IS NULL, - 1, i_PriorCoverageId) AS v_Prev_PriorCoverageId,\n\t-- *INF*: IIF(ISNULL(i_IndividualRiskPremiumModification),0,i_IndividualRiskPremiumModification)\n\tIFF(i_IndividualRiskPremiumModification IS NULL, 0, i_IndividualRiskPremiumModification) AS v_Prev_IndividualRiskPremiumModification,\n\t-- *INF*: IIF(ISNULL(i_PremiumTransactionAKID),-1,i_PremiumTransactionAKID)\n\tIFF(i_PremiumTransactionAKID IS NULL, - 1, i_PremiumTransactionAKID) AS v_Prev_PremiumTransactionAKID,\n\t-- *INF*: IIF(ISNULL(i_ConstructionCode), 'N/A', i_ConstructionCode)\r\n\t-- \n\tIFF(i_ConstructionCode IS NULL, 'N/A', i_ConstructionCode) AS v_Prev_ConstructionCode,\n\t-- *INF*: IIF(ISNULL(i_WindCoverageFlag), '0', IIF( i_WindCoverageFlag='True', '1', '0')) \n\tIFF(i_WindCoverageFlag IS NULL, '0', IFF(i_WindCoverageFlag = 'True', '1', '0')) AS v_Prev_WindCoverageFlag,\n\ti_PolicyAKID AS v_Prev_PolicyAKID,\n\ti_SourceSystemId AS v_Prev_SourceSystemId,\n\t-- *INF*: IIF(ISNULL(i_RiskUnitGroup), 'N/A', i_RiskUnitGroup)\n\tIFF(i_RiskUnitGroup IS NULL, 'N/A', i_RiskUnitGroup) AS v_Prev_RiskUnitGroup,\n\t-- *INF*: IIF(ISNULL(i_RiskUnit), 'N/A',i_RiskUnit)\n\tIFF(i_RiskUnit IS NULL, 'N/A', i_RiskUnit) AS v_Prev_RiskUnit,\n\ti_ExposureBasis AS v_Prev_ExposureBasis,\n\t-- *INF*: DECODE(v_Prev_SourceSystemId,\r\n\t-- 'DCT',v_Prev_ClassCode,\r\n\t-- 'PMS', IIF(v_Prev_RiskUnitGroup='286',v_Prev_RiskUnit,v_Prev_ClassCode),\r\n\t-- 'N/A')\n\tDECODE(v_Prev_SourceSystemId,\n\t'DCT', v_Prev_ClassCode,\n\t'PMS', IFF(v_Prev_RiskUnitGroup = '286', v_Prev_RiskUnit, v_Prev_ClassCode),\n\t'N/A') AS v_Prev_Out_ClassCode,\n\ti_InsuranceReferenceLineOfBusinessAbbreviation AS v_Prev_LineOfBusinessAbbreviation,\n\ti_ProductAbbreviation AS v_Prev_ProductAbbreviation,\n\t-- *INF*: IIF(ISNULL(i_CensusBlockGroupCountyCode),'N/A',i_CensusBlockGroupCountyCode)\n\tIFF(i_CensusBlockGroupCountyCode IS NULL, 'N/A', i_CensusBlockGroupCountyCode) AS v_Prev_CensusBlockGroupCountyCode,\n\t-- *INF*: IIF(ISNULL(i_CensusBlockGroupTractCode),'N/A',i_CensusBlockGroupTractCode)\n\tIFF(i_CensusBlockGroupTractCode IS NULL, 'N/A', i_CensusBlockGroupTractCode) AS v_Prev_CensusBlockGroupTractCode,\n\t-- *INF*: IIF(ISNULL(i_CensusBlockGroupBlockGroupCode),'N/A',i_CensusBlockGroupBlockGroupCode)\n\tIFF(i_CensusBlockGroupBlockGroupCode IS NULL, 'N/A', i_CensusBlockGroupBlockGroupCode) AS v_Prev_CensusBlockGroupBlockGroupCode,\n\t-- *INF*: IIF(ISNULL(i_Latitude),0,i_Latitude)\n\tIFF(i_Latitude IS NULL, 0, i_Latitude) AS v_Prev_Latitude,\n\t-- *INF*: IIF(ISNULL(i_Longitude),0,i_Longitude)\n\tIFF(i_Longitude IS NULL, 0, i_Longitude) AS v_Prev_Longitude,\n\tv_Count AS o_Count,\n\tv_InsuranceLine AS o_InsuranceLine,\n\tv_CoverageEffectiveDate AS o_CoverageEffectiveDate,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\tv_IncreasedLimitGroupCode AS o_IncreasedLimitGroupCode,\n\tv_IncreasedLimitGroupDescription AS o_IncreasedLimitGroupDescription,\n\tv_PackageModificationAdjustmentGroupCode AS o_PackageModificationAdjustmentGroupCode,\n\tv_PackageModificationAdjustmentGroupDescription AS o_PackageModificationAdjustmentGroupDescription,\n\tv_Out_ClassCode AS Out_ClassCode,\n\t-- *INF*: LPAD(v_ClassCode, 6, '0')\n\tLPAD(v_ClassCode, 6, '0') AS o_ClassCode_lkp,\n\tv_BuildingNumber AS o_BuildingNumber,\n\tv_LocationNumber AS o_LocationNumber,\n\tv_DeductibleAmount AS o_DeductibleAmount,\n\tv_RiskGradeCode AS o_RiskGradeCode,\n\tv_PackageModificationAdjustmentFactor AS o_PackageModificationAdjustmentFactor,\n\tv_YearBuilt AS o_YearBuilt,\n\tv_ClassCodeOrganizationCode AS o_ClassCodeOrganizationCode,\n\tv_IncreasedLimitFactor AS o_IncreasedLimitFactor,\n\tv_CoverageGUID AS o_CoverageGUID,\n\tv_RatingCity AS o_RatingCity,\n\tv_RatingCounty AS o_RatingCounty,\n\tv_RatingStateProvinceCode AS o_RatingStateProvinceCode,\n\tv_RatingStateProvinceAbbreviation AS o_RatingStateProvinceAbbreviation,\n\tv_RatingPostalCode AS o_RatingPostalCode,\n\tv_RatingAddress AS o_RatingAddress,\n\tv_RatingTerritory AS o_RatingTerritory,\n\tv_EDWPremiumTransactionPKId AS o_EDWPremiumTransactionPKId,\n\tv_EffectiveDate AS o_EffectiveDate,\n\tv_ExpirationDate AS o_ExpirationDate,\n\tv_PriorCoverageId AS o_PriorCoverageId,\n\tv_IndividualRiskPremiumModification AS o_IndividualRiskPremiumModification,\n\tv_PremiumTransactionAKID AS o_PremiumTransactionAKID,\n\tv_ConstructionCode AS o_ConstructionCode,\n\tv_WindCoverageFlag AS o_WindCoverageFlag,\n\tv_SourceSystemId AS o_SourceSystemId,\n\tv_BaseRate AS o_BaseRate,\n\tv_ExposureBasis AS o_ExposureBasis,\n\tv_LineOfBusinessAbbreviation AS o_LineOfBusinessAbbreviation,\n\tv_ProductAbbreviation AS o_ProductAbbreviation,\n\tv_CensusBlockGroupCountyCode AS o_CensusBlockGroupCountyCode,\n\tv_CensusBlockGroupTractCode AS o_CensusBlockGroupTractCode,\n\tv_CensusBlockGroupBlockGroupCode AS o_CensusBlockGroupBlockGroupCode,\n\tv_Latitude AS o_Latitude,\n\tv_Longitude AS o_Longitude\n\tFROM SRT_Input\n),\nLKP_CoverageDetailDim AS (\n\tSELECT\n\tCoverageDetailDimId,\n\tEffectiveDate,\n\tExpirationDate,\n\tEDWPremiumTransactionPKId\n\tFROM (\n\t\tSELECT CDD.CoverageDetailDimId AS CoverageDetailDimId\r\n\t\t      ,CDD.EffectiveDate AS EffectiveDate\r\n\t\t      ,CDD.ExpirationDate AS ExpirationDate\r\n\t\t\t,CDD.EDWPremiumTransactionPKId AS EDWPremiumTransactionPKId\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDetailDim CDD\r\n\t\twhere '@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00' OR \r\n\t\texists (\r\n\t\t                         select 1 \r\n\t\t                        from (select RC.CoverageGUID\r\n\t\t                         from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\t\t                        join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\t                        on PT.RatingCoverageAKID=RC.RatingCoverageAKID and PT.SourceSystemID='DCT' and RC.EffectiveDate=PT.EffectiveDate and PT.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\t\t\t\t\tunion all\r\n\t\t                        select SC.CoverageGUID\r\n\t\t                        from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.StatisticalCoverage SC\r\n\t\t                        join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\t                        on SC.StatisticalCoverageAKID=PT.StatisticalCoverageAKID and PT.SourceSystemID='PMS' and PT.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}') a\r\n\t\t where  CDD.CoverageGUID=a.CoverageGUID)\r\n\t\torder by CDD.EDWPremiumTransactionPKId--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWPremiumTransactionPKId ORDER BY CoverageDetailDimId) = 1\n),\nLKP_LimitOfInsurance AS (\n\tSELECT\n\tCoverageLimitValue,\n\tCoverageLimitType,\n\tPremiumTransactionAKID\n\tFROM (\n\t\tselect t.PremiumTransactionAKID as PremiumTransactionAKID,\r\n\t\tt.CoverageLimitValue as CoverageLimitValue,\r\n\t\tt.CoverageLimitType as CoverageLimitType\r\n\t\tfrom (\r\n\t\tselect\r\n\t\tcl.CoverageLimitValue as CoverageLimitValue,\r\n\t\tcl.CoverageLimitType as CoverageLimitType,\r\n\t\tpt.PremiumTransactionAKID as PremiumTransactionAKID \r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\t\ton clb.CoverageLimitId = cl.CoverageLimitId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\t\ton clb.PremiumTransactionAKId = pt.PremiumTransactionAKID and pt.CurrentSnapshotFlag=1\r\n\t\tWHERE PT.SourceSystemId='DCT' and ( '@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00' or \r\n\t\texists ( select 1 \r\n\t\t               from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT2 \r\n\t\t               where PT2.RatingCoverageAKId=PT.RatingCoverageAKId and PT2.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\t               AND PT2.SourceSystemId='DCT'))\r\n\t\t \r\n\t\t union all\r\n\t\t \r\n\t\t select\r\n\t\t cl.CoverageLimitValue as CoverageLimitValue,\r\n\t\t cl.CoverageLimitType as CoverageLimitType,\r\n\t\t pt.PremiumTransactionAKID as PremiumTransactionAKID\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimitBridge clb\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageLimit cl\r\n\t\ton clb.CoverageLimitId = cl.CoverageLimitId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction pt\r\n\t\ton clb.PremiumTransactionAKId = pt.PremiumTransactionAKID\r\n\t\tWHERE PT.SourceSystemId='PMS' and ( '@{pipeline().parameters.SELECTION_START_TS}'<='01/01/1800 01:00:00' or \r\n\t\texists ( select 1 \r\n\t\t               from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT2 \r\n\t\t               where PT2.StatisticalCoverageAKId=PT.StatisticalCoverageAKId\r\n\t\t               and PT2.CreatedDate>='@{pipeline().parameters.SELECTION_START_TS}'\r\n\t\t               AND PT2.SourceSystemId='PMS')) \r\n\t\t)t\r\n\t\torder by PremiumTransactionAKId,CASE WHEN ISNUMERIC(CoverageLimitValue)=1 THEN CONVERT(bigint,CoverageLimitValue) ELSE 0 END desc,CoverageLimitValue desc\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKID ORDER BY CoverageLimitValue) = 1\n),\nLKP_PriorCoverage AS (\n\tSELECT\n\tPriorCarrierName,\n\tPriorPolicyKey,\n\tPriorCoverageId\n\tFROM (\n\t\tSELECT \n\t\t\tPriorCarrierName,\n\t\t\tPriorPolicyKey,\n\t\t\tPriorCoverageId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PriorCoverage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PriorCoverageId ORDER BY PriorCarrierName) = 1\n),\nEXP_GetAKId AS (\n\tSELECT\n\tLKP_CoverageDetailDim.CoverageDetailDimId AS LKP_CoverageDetailDimId,\n\tLKP_CoverageDetailDim.EffectiveDate AS LKP_EffectiveDate,\n\tLKP_CoverageDetailDim.ExpirationDate AS LKP_ExpirationDate,\n\tLKP_PriorCoverage.PriorCarrierName AS i_PriorCarrierName,\n\tLKP_PriorCoverage.PriorPolicyKey AS i_PriorPolicyKey,\n\tEXP_GetValues.o_PremiumTransactionAKID AS i_PremiumTransactionAKID,\n\tEXP_GetValues.o_SourceSystemId AS i_SourceSystemId,\n\tEXP_GetValues.o_Count AS i_Count,\n\tEXP_GetValues.o_AuditID AS AuditID,\n\tEXP_GetValues.o_CreatedDate AS CreatedDate,\n\tEXP_GetValues.o_ModifiedDate AS ModifiedDate,\n\tEXP_GetValues.o_IncreasedLimitGroupCode AS IncreasedLimitGroupCode,\n\tEXP_GetValues.o_IncreasedLimitGroupDescription AS IncreasedLimitGroupDescription,\n\tEXP_GetValues.o_PackageModificationAdjustmentGroupCode AS PackageModificationAdjustmentGroupCode,\n\tEXP_GetValues.o_PackageModificationAdjustmentGroupDescription AS PackageModificationAdjustmentGroupDescription,\n\tEXP_GetValues.Out_ClassCode AS ClassCode,\n\tEXP_GetValues.o_BuildingNumber AS BuildingNumber,\n\tEXP_GetValues.o_LocationNumber AS LocationNumber,\n\tEXP_GetValues.o_DeductibleAmount AS DeductibleAmount,\n\tEXP_GetValues.o_RiskGradeCode AS RiskGradeCode,\n\tEXP_GetValues.o_PackageModificationAdjustmentFactor AS PackageModificationAdjustmentFactor,\n\tEXP_GetValues.o_YearBuilt AS YearBuilt,\n\tEXP_GetValues.o_IncreasedLimitFactor AS IncreasedLimitFactor,\n\tEXP_GetValues.o_CoverageGUID AS CoverageGUID,\n\tEXP_GetValues.o_RatingCity AS RatingCity,\n\tEXP_GetValues.o_RatingCounty AS RatingCounty,\n\tEXP_GetValues.o_RatingStateProvinceCode AS RatingStateProvinceCode,\n\tEXP_GetValues.o_RatingStateProvinceAbbreviation AS RatingStateProvinceAbbreviation,\n\tEXP_GetValues.o_RatingPostalCode AS RatingPostalCode,\n\tEXP_GetValues.o_RatingAddress AS RatingAddress,\n\tEXP_GetValues.o_RatingTerritory AS RatingTerritory,\n\tEXP_GetValues.o_EDWPremiumTransactionPKId AS EDWPremiumTransactionPKId,\n\tEXP_GetValues.o_EffectiveDate AS EffectiveDate,\n\tEXP_GetValues.o_ExpirationDate AS ExpirationDate,\n\tEXP_GetValues.o_IndividualRiskPremiumModification AS IndividualRiskPremiumModification,\n\tEXP_GetValues.o_ConstructionCode AS ConstructionCode,\n\tEXP_GetValues.o_WindCoverageFlag AS WindCoverageFlag,\n\tEXP_GetValues.o_ExposureBasis AS ExposureBasis,\n\t'N/A' AS o_ISOClassGroupDescription,\n\t-- *INF*: IIF(ISNULL(i_PriorCarrierName), 'N/A', i_PriorCarrierName)\n\tIFF(i_PriorCarrierName IS NULL, 'N/A', i_PriorCarrierName) AS o_PriorCarrierName,\n\t-- *INF*: IIF(ISNULL(i_PriorPolicyKey), 'N/A',i_PriorPolicyKey)\n\tIFF(i_PriorPolicyKey IS NULL, 'N/A', i_PriorPolicyKey) AS o_PriorPolicyKey,\n\tLKP_LimitOfInsurance.CoverageLimitValue AS i_CoverageLimitValue,\n\tLKP_LimitOfInsurance.CoverageLimitType AS i_CoverageLimitType,\n\t-- *INF*: LOWER(LTRIM(RTRIM(i_CoverageLimitType)))\n\tLOWER(LTRIM(RTRIM(i_CoverageLimitType))) AS v_CoverageLimitType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- INSTR(v_CoverageLimitType,'peroccurrence')>0 \r\n\t-- OR INSTR(v_CoverageLimitType,'each')>0 \r\n\t-- OR INSTR(v_CoverageLimitType,'aggregate')>0,'N/A',\r\n\t-- i_CoverageLimitValue\r\n\t-- )\n\tDECODE(TRUE,\n\tINSTR(v_CoverageLimitType, 'peroccurrence') > 0 OR INSTR(v_CoverageLimitType, 'each') > 0 OR INSTR(v_CoverageLimitType, 'aggregate') > 0, 'N/A',\n\ti_CoverageLimitValue) AS v_LimitOfInsurance,\n\t-- *INF*: IIF(ISNULL(v_LimitOfInsurance),'N/A',v_LimitOfInsurance)\n\tIFF(v_LimitOfInsurance IS NULL, 'N/A', v_LimitOfInsurance) AS o_LimitOfInsurance,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'AGGREGATE LIMIT')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'AGGREGATE LIMIT'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'AggregateLimit')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'AggregateLimit'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'TotalAggregateLimit')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'TotalAggregateLimit'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'GENERAL AGGREGATE LIMIT')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'GENERAL AGGREGATE LIMIT'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'VoluntaryPropertyDamageAggregateLimit')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'VoluntaryPropertyDamageAggregateLimit'),\r\n\t-- 'N/A'\r\n\t-- )\n\tDECODE(TRUE,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AGGREGATE_LIMIT.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AGGREGATE_LIMIT.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AggregateLimit.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AggregateLimit.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_TotalAggregateLimit.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_TotalAggregateLimit.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_GENERAL_AGGREGATE_LIMIT.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_GENERAL_AGGREGATE_LIMIT.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageAggregateLimit.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageAggregateLimit.CoverageLimitValue,\n\t'N/A') AS v_CoverageAggregateLimit,\n\t-- *INF*: LTRIM(RTRIM(v_CoverageAggregateLimit))\n\tLTRIM(RTRIM(v_CoverageAggregateLimit)) AS o_CoverageAggregateLimit,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'OccurrenceLimit')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'OccurrenceLimit'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'EACH OCCURRENCE LIMIT')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'EACH OCCURRENCE LIMIT'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'VoluntaryPropertyDamageOccurrenceLimit')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'VoluntaryPropertyDamageOccurrenceLimit'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'PerOccurrence')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'PerOccurrence'),\r\n\t-- \r\n\t-- NOT ISNULL(:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'EachOccurrence')),:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'EachOccurrence'),\r\n\t-- \r\n\t-- 'N/A'\r\n\t-- )\n\tDECODE(TRUE,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_OccurrenceLimit.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_OccurrenceLimit.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EACH_OCCURRENCE_LIMIT.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EACH_OCCURRENCE_LIMIT.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageOccurrenceLimit.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageOccurrenceLimit.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PerOccurrence.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PerOccurrence.CoverageLimitValue,\n\tNOT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachOccurrence.CoverageLimitValue IS NULL, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachOccurrence.CoverageLimitValue,\n\t'N/A') AS v_CoveragePerOccurenceLimit,\n\t-- *INF*: LTRIM(RTRIM(v_CoveragePerOccurenceLimit))\n\tLTRIM(RTRIM(v_CoveragePerOccurenceLimit)) AS o_CoveragePerOccurrenceLimit,\n\t-- *INF*: IIF(i_SourceSystemId='PMS',:LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'PRODUCTS-COMPLETED OPERATIONS AGGREGATE LIMIT'),\r\n\t-- :LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID,'ProductsAggregateLimit'))\n\tIFF(i_SourceSystemId = 'PMS', LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PRODUCTS_COMPLETED_OPERATIONS_AGGREGATE_LIMIT.CoverageLimitValue, LKP_COVERAGELIMIT_i_PremiumTransactionAKID_ProductsAggregateLimit.CoverageLimitValue) AS v_CoverageProductAggregateLimit,\n\t-- *INF*: IIF(ISNULL(v_CoverageProductAggregateLimit),'N/A',v_CoverageProductAggregateLimit)\n\tIFF(v_CoverageProductAggregateLimit IS NULL, 'N/A', v_CoverageProductAggregateLimit) AS o_CoverageProductAggregateLimit,\n\tConstructionCode AS o_ConstructionCode,\n\tWindCoverageFlag AS o_WindCoverageFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_Count=1, 0, \r\n\t-- ISNULL(LKP_CoverageDetailDimId), 1,  \r\n\t-- LKP_EffectiveDate <> EffectiveDate\r\n\t-- \tOR LKP_ExpirationDate <> ExpirationDate @{pipeline().parameters.UPDATE_CLAUSE},\r\n\t--  2, 0)\n\t'' AS o_ChangeFlag,\n\tEXP_GetValues.o_BaseRate,\n\t-- *INF*: IIF(i_SourceSystemId = 'PMS', :LKP.LKP_COVERAGELIMIT(i_PremiumTransactionAKID, 'EachRelatedWrongfulEmploymentPractice'))\n\tIFF(i_SourceSystemId = 'PMS', LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachRelatedWrongfulEmploymentPractice.CoverageLimitValue) AS v_CoveragePerClaimLimit,\n\t-- *INF*: IIF(ISNULL(v_CoveragePerClaimLimit), 'N/A', v_CoveragePerClaimLimit)\n\tIFF(v_CoveragePerClaimLimit IS NULL, 'N/A', v_CoveragePerClaimLimit) AS o_CoveragePerClaimLimit,\n\t-- *INF*: LTRIM(RTRIM(i_CoverageLimitType))\n\tLTRIM(RTRIM(i_CoverageLimitType)) AS o_LimitOfInsuranceDescription,\n\tEXP_GetValues.o_LineOfBusinessAbbreviation AS i_LineOfBusinessAbbreviation,\n\tEXP_GetValues.o_ProductAbbreviation AS i_ProductAbbreviation,\n\t-- *INF*: DECODE(TRUE,IN (i_LineOfBusinessAbbreviation,'Bonds - Fidelity', 'Bonds - Surety') , 'BND' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'NFP D&O', 'D&O') , 'DNO' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'CL B&M', 'CL Mine Sub','CL Prop','Cyber Security','Data Compromise') , 'CF' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'CL IM') , 'IM',\r\n\t-- IN (i_LineOfBusinessAbbreviation,'CL Umb') , 'UMB',\r\n\t-- IN (i_LineOfBusinessAbbreviation,'CL Auto') , 'CA',\r\n\t-- IN (i_LineOfBusinessAbbreviation,'Crime') , 'CR',\r\n\t-- IN (i_LineOfBusinessAbbreviation,'E&O') , 'ENO' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'EPLI') , 'EPLI' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'Garage','Auto Dlrs') , 'GA' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'Excess Liab') , 'EL' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'GL') , 'GL' ,\r\n\t-- IN (i_LineOfBusinessAbbreviation,'WC') , 'WC' ,\r\n\t-- 'N/A')\n\tDECODE(TRUE,\n\tIN(i_LineOfBusinessAbbreviation, 'Bonds - Fidelity', 'Bonds - Surety'), 'BND',\n\tIN(i_LineOfBusinessAbbreviation, 'NFP D&O', 'D&O'), 'DNO',\n\tIN(i_LineOfBusinessAbbreviation, 'CL B&M', 'CL Mine Sub', 'CL Prop', 'Cyber Security', 'Data Compromise'), 'CF',\n\tIN(i_LineOfBusinessAbbreviation, 'CL IM'), 'IM',\n\tIN(i_LineOfBusinessAbbreviation, 'CL Umb'), 'UMB',\n\tIN(i_LineOfBusinessAbbreviation, 'CL Auto'), 'CA',\n\tIN(i_LineOfBusinessAbbreviation, 'Crime'), 'CR',\n\tIN(i_LineOfBusinessAbbreviation, 'E&O'), 'ENO',\n\tIN(i_LineOfBusinessAbbreviation, 'EPLI'), 'EPLI',\n\tIN(i_LineOfBusinessAbbreviation, 'Garage', 'Auto Dlrs'), 'GA',\n\tIN(i_LineOfBusinessAbbreviation, 'Excess Liab'), 'EL',\n\tIN(i_LineOfBusinessAbbreviation, 'GL'), 'GL',\n\tIN(i_LineOfBusinessAbbreviation, 'WC'), 'WC',\n\t'N/A') AS v_LineOfBusinessAbbreviation,\n\t-- *INF*: DECODE(TRUE, v_LineOfBusinessAbbreviation='WC',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,substr(ClassCode,1,4),RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,substr(ClassCode,1,4),RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,substr(ClassCode,1,4),'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='CA',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)), :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) ,\r\n\t-- IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99'),\r\n\t-- IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB('GA',ClassCode,RatingStateProvinceCode)), :LKP.LKP_SupClassification_LOB('GA',ClassCode,RatingStateProvinceCode), \r\n\t--  :LKP.LKP_SupClassification_LOB('GA',ClassCode,'99'))))\r\n\t-- ,v_LineOfBusinessAbbreviation='CF',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99'))\r\n\t-- ,v_LineOfBusinessAbbreviation='BND',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='UMB',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='IM',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='CR',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='DNO',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='ENO',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='EPLI',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) \r\n\t-- ,v_LineOfBusinessAbbreviation='EL',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99'))\r\n\t-- ,v_LineOfBusinessAbbreviation='GA',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)), :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) ,\r\n\t-- IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99')) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99'),\r\n\t-- IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB('CA',ClassCode,RatingStateProvinceCode)), :LKP.LKP_SupClassification_LOB('CA',ClassCode,RatingStateProvinceCode), \r\n\t--  :LKP.LKP_SupClassification_LOB('CA',ClassCode,'99'))))\r\n\t-- ,v_LineOfBusinessAbbreviation='GL',  IIF( NOT ISNULL( :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode)),\r\n\t-- :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,RatingStateProvinceCode) , :LKP.LKP_SupClassification_LOB(v_LineOfBusinessAbbreviation,ClassCode,'99'))\r\n\t-- )\n\tDECODE(TRUE,\n\tv_LineOfBusinessAbbreviation = 'WC', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_99.Result),\n\tv_LineOfBusinessAbbreviation = 'CA', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result, IFF(NOT LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_99.Result))),\n\tv_LineOfBusinessAbbreviation = 'CF', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'BND', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'UMB', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'IM', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'CR', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'DNO', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'ENO', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'EPLI', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'EL', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result),\n\tv_LineOfBusinessAbbreviation = 'GA', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result, IFF(NOT LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_99.Result))),\n\tv_LineOfBusinessAbbreviation = 'GL', IFF(NOT LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result IS NULL, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.Result, LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.Result)) AS v_Result,\n\t-- *INF*: DECODE(TRUE, IN( i_ProductAbbreviation,'SMART','BOP') OR IN(i_LineOfBusinessAbbreviation,'SMP','BOP'), 'Not Assigned',  ISNULL(v_Result), 'N/A', SUBSTR(v_Result,1,INSTR(v_Result,'#')-1))\n\tDECODE(TRUE,\n\tIN(i_ProductAbbreviation, 'SMART', 'BOP') OR IN(i_LineOfBusinessAbbreviation, 'SMP', 'BOP'), 'Not Assigned',\n\tv_Result IS NULL, 'N/A',\n\tSUBSTR(v_Result, 1, INSTR(v_Result, '#') - 1)) AS o_ClassDescription,\n\t-- *INF*: DECODE(TRUE, IN( i_ProductAbbreviation,'SMART','BOP') OR IN(i_LineOfBusinessAbbreviation,'SMP','BOP'), 'N/A', ISNULL(v_Result), 'N/A', SUBSTR(v_Result,INSTR(v_Result,'#')+1,length(v_Result)))\n\tDECODE(TRUE,\n\tIN(i_ProductAbbreviation, 'SMART', 'BOP') OR IN(i_LineOfBusinessAbbreviation, 'SMP', 'BOP'), 'N/A',\n\tv_Result IS NULL, 'N/A',\n\tSUBSTR(v_Result, INSTR(v_Result, '#') + 1, length(v_Result))) AS o_OriginatingOrganizationCode,\n\t-- *INF*: TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_CoverageEffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_CoverageExpirationDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_CoverageCancellationDate,\n\tEXP_GetValues.o_CensusBlockGroupCountyCode AS CensusBlockGroupCountyCode,\n\tEXP_GetValues.o_CensusBlockGroupTractCode AS CensusBlockGroupTractCode,\n\tEXP_GetValues.o_CensusBlockGroupBlockGroupCode AS CensusBlockGroupBlockGroupCode,\n\tEXP_GetValues.o_Latitude AS Latitude,\n\tEXP_GetValues.o_Longitude AS Longitude\n\tFROM EXP_GetValues\n\tLEFT JOIN LKP_CoverageDetailDim\n\tON LKP_CoverageDetailDim.EDWPremiumTransactionPKId = EXP_GetValues.o_EDWPremiumTransactionPKId\n\tLEFT JOIN LKP_LimitOfInsurance\n\tON LKP_LimitOfInsurance.PremiumTransactionAKID = EXP_GetValues.o_PremiumTransactionAKID\n\tLEFT JOIN LKP_PriorCoverage\n\tON LKP_PriorCoverage.PriorCoverageId = EXP_GetValues.o_PriorCoverageId\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AGGREGATE_LIMIT\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AGGREGATE_LIMIT.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AGGREGATE_LIMIT.CoverageLimitType = 'AGGREGATE LIMIT'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AggregateLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AggregateLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_AggregateLimit.CoverageLimitType = 'AggregateLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_TotalAggregateLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_TotalAggregateLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_TotalAggregateLimit.CoverageLimitType = 'TotalAggregateLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_GENERAL_AGGREGATE_LIMIT\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_GENERAL_AGGREGATE_LIMIT.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_GENERAL_AGGREGATE_LIMIT.CoverageLimitType = 'GENERAL AGGREGATE LIMIT'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageAggregateLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageAggregateLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageAggregateLimit.CoverageLimitType = 'VoluntaryPropertyDamageAggregateLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_OccurrenceLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_OccurrenceLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_OccurrenceLimit.CoverageLimitType = 'OccurrenceLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EACH_OCCURRENCE_LIMIT\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EACH_OCCURRENCE_LIMIT.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EACH_OCCURRENCE_LIMIT.CoverageLimitType = 'EACH OCCURRENCE LIMIT'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageOccurrenceLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageOccurrenceLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_VoluntaryPropertyDamageOccurrenceLimit.CoverageLimitType = 'VoluntaryPropertyDamageOccurrenceLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PerOccurrence\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PerOccurrence.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PerOccurrence.CoverageLimitType = 'PerOccurrence'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachOccurrence\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachOccurrence.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachOccurrence.CoverageLimitType = 'EachOccurrence'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PRODUCTS_COMPLETED_OPERATIONS_AGGREGATE_LIMIT\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PRODUCTS_COMPLETED_OPERATIONS_AGGREGATE_LIMIT.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_PRODUCTS_COMPLETED_OPERATIONS_AGGREGATE_LIMIT.CoverageLimitType = 'PRODUCTS-COMPLETED OPERATIONS AGGREGATE LIMIT'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_ProductsAggregateLimit\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_ProductsAggregateLimit.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_ProductsAggregateLimit.CoverageLimitType = 'ProductsAggregateLimit'\n\n\tLEFT JOIN LKP_COVERAGELIMIT LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachRelatedWrongfulEmploymentPractice\n\tON LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachRelatedWrongfulEmploymentPractice.PremiumTransactionAKID = i_PremiumTransactionAKID\n\tAND LKP_COVERAGELIMIT_i_PremiumTransactionAKID_EachRelatedWrongfulEmploymentPractice.CoverageLimitType = 'EachRelatedWrongfulEmploymentPractice'\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode\n\tON LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode.LineOfBusinessAbbreviation = v_LineOfBusinessAbbreviation\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode.ClassCode = substr(ClassCode, 1, 4)\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_RatingStateProvinceCode.RatingStateCode = RatingStateProvinceCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_99\n\tON LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_99.LineOfBusinessAbbreviation = v_LineOfBusinessAbbreviation\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_99.ClassCode = substr(ClassCode, 1, 4)\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_substr_ClassCode_1_4_99.RatingStateCode = '99'\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode\n\tON LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.LineOfBusinessAbbreviation = v_LineOfBusinessAbbreviation\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_RatingStateProvinceCode.RatingStateCode = RatingStateProvinceCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99\n\tON LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.LineOfBusinessAbbreviation = v_LineOfBusinessAbbreviation\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB_v_LineOfBusinessAbbreviation_ClassCode_99.RatingStateCode = '99'\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode\n\tON LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode.LineOfBusinessAbbreviation = 'GA'\n\tAND LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_RatingStateProvinceCode.RatingStateCode = RatingStateProvinceCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_99\n\tON LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_99.LineOfBusinessAbbreviation = 'GA'\n\tAND LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_99.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB__GA_ClassCode_99.RatingStateCode = '99'\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode\n\tON LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode.LineOfBusinessAbbreviation = 'CA'\n\tAND LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_RatingStateProvinceCode.RatingStateCode = RatingStateProvinceCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATION_LOB LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_99\n\tON LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_99.LineOfBusinessAbbreviation = 'CA'\n\tAND LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_99.ClassCode = ClassCode\n\tAND LKP_SUPCLASSIFICATION_LOB__CA_ClassCode_99.RatingStateCode = '99'\n\n),\nRTR_CoverageDetailDim AS (\n\tSELECT\n\tLKP_CoverageDetailDimId,\n\tAuditID,\n\tCreatedDate,\n\tModifiedDate,\n\tIncreasedLimitGroupCode,\n\tIncreasedLimitGroupDescription,\n\tPackageModificationAdjustmentGroupCode,\n\tPackageModificationAdjustmentGroupDescription,\n\tClassCode,\n\tBuildingNumber,\n\tLocationNumber,\n\tDeductibleAmount,\n\tRiskGradeCode,\n\tPackageModificationAdjustmentFactor,\n\tYearBuilt,\n\tIncreasedLimitFactor,\n\tCoverageGUID,\n\to_ISOClassGroupDescription AS ISOClassGroupDescription,\n\tRatingCity,\n\tRatingCounty,\n\tRatingStateProvinceCode,\n\tRatingStateProvinceAbbreviation,\n\tRatingPostalCode,\n\tRatingAddress,\n\tRatingTerritory,\n\to_ClassDescription AS ISOClassDescription,\n\tEDWPremiumTransactionPKId,\n\tEffectiveDate,\n\tExpirationDate,\n\tIndividualRiskPremiumModification,\n\to_PriorCarrierName AS PriorCarrierName,\n\to_PriorPolicyKey AS PriorPolicyKey,\n\to_LimitOfInsurance AS LimitOfInsurance,\n\to_CoveragePerOccurrenceLimit AS CoveragePerOccurrenceLimit,\n\to_CoverageAggregateLimit AS CoverageAggregateLimit,\n\to_CoverageProductAggregateLimit AS CoverageProductAggregateLimit,\n\to_ConstructionCode AS ConstructionCode,\n\to_WindCoverageFlag AS WindCoverageFlag,\n\to_ChangeFlag AS ChangeFlag,\n\to_BaseRate AS BaseRate,\n\to_CoveragePerClaimLimit AS CoveragePerClaimLimit,\n\to_LimitOfInsuranceDescription AS LimitOfInsuranceDescription,\n\tExposureBasis,\n\to_ClassDescription AS ClassDescription,\n\to_OriginatingOrganizationCode AS OriginatingOrganizationCode,\n\to_CoverageEffectiveDate AS CoverageEffectiveDate,\n\to_CoverageExpirationDate AS CoverageExpirationDate,\n\to_CoverageCancellationDate AS CoverageCancellationDate,\n\tCensusBlockGroupCountyCode,\n\tCensusBlockGroupTractCode,\n\tCensusBlockGroupBlockGroupCode,\n\tLatitude,\n\tLongitude\n\tFROM EXP_GetAKId\n),\nRTR_CoverageDetailDim_Insert AS (SELECT * FROM RTR_CoverageDetailDim WHERE ChangeFlag=1),\nRTR_CoverageDetailDim_Update AS (SELECT * FROM RTR_CoverageDetailDim WHERE ChangeFlag=2),\nTGT_CoverageDetailDim_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDetailDim\n\t(AuditId, CreateDate, ModifedDate, IncreasedLimitGroupCode, IncreasedLimitGroupDescription, PackageModificationAdjustmentGroupCode, PackageModificationAdjustmentGroupDescription, ISOClassCode, BuildingNumber, LocationNumber, DeductibleAmount, RiskGradeCode, PackageModificationAdjustmentFactor, YearBuilt, IncreasedLimitFactor, CoverageGuid, ClassGroupDescription, RatingCity, RatingCounty, RatingStateProvinceCode, RatingStateProvinceAbbreviation, RatingPostalCode, RatingAddress, RatingTerritory, ISOClassDescription, EDWPremiumTransactionPKId, EffectiveDate, ExpirationDate, IndividualRiskPremiumModification, PriorCarrierName, PriorPolicyKey, LimitOfInsurance, CoveragePerOccurrenceLimit, CoverageAggregateLimit, CoverageProductAggregateLimit, ConstructionCode, WindCoverageFlag, BaseRate, CoveragePerClaimLimit, LimitOfInsuranceDescription, ExposureBasis, ClassCode, ClassDescription, ClassCodeOrganizationCode, CoverageEffectiveDate, CoverageExpirationDate, CoverageCancellationDate, CensusBlockGroupCountyCode, CensusBlockGroupTractCode, CensusBlockGroupBlockGroupCode, Latitude, Longitude)\n\tSELECT \n\tAuditID AS AUDITID, \n\tCreatedDate AS CREATEDATE, \n\tModifiedDate AS MODIFEDDATE, \n\tINCREASEDLIMITGROUPCODE, \n\tINCREASEDLIMITGROUPDESCRIPTION, \n\tPACKAGEMODIFICATIONADJUSTMENTGROUPCODE, \n\tPACKAGEMODIFICATIONADJUSTMENTGROUPDESCRIPTION, \n\tClassCode AS ISOCLASSCODE, \n\tBUILDINGNUMBER, \n\tLOCATIONNUMBER, \n\tDEDUCTIBLEAMOUNT, \n\tRISKGRADECODE, \n\tPACKAGEMODIFICATIONADJUSTMENTFACTOR, \n\tYEARBUILT, \n\tINCREASEDLIMITFACTOR, \n\tCoverageGUID AS COVERAGEGUID, \n\tISOClassGroupDescription AS CLASSGROUPDESCRIPTION, \n\tRATINGCITY, \n\tRATINGCOUNTY, \n\tRATINGSTATEPROVINCECODE, \n\tRATINGSTATEPROVINCEABBREVIATION, \n\tRATINGPOSTALCODE, \n\tRATINGADDRESS, \n\tRATINGTERRITORY, \n\tISOCLASSDESCRIPTION, \n\tEDWPREMIUMTRANSACTIONPKID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tINDIVIDUALRISKPREMIUMMODIFICATION, \n\tPRIORCARRIERNAME, \n\tPRIORPOLICYKEY, \n\tLIMITOFINSURANCE, \n\tCOVERAGEPEROCCURRENCELIMIT, \n\tCOVERAGEAGGREGATELIMIT, \n\tCOVERAGEPRODUCTAGGREGATELIMIT, \n\tCONSTRUCTIONCODE, \n\tWINDCOVERAGEFLAG, \n\tBASERATE, \n\tCOVERAGEPERCLAIMLIMIT, \n\tLIMITOFINSURANCEDESCRIPTION, \n\tEXPOSUREBASIS, \n\tCLASSCODE, \n\tCLASSDESCRIPTION, \n\tOriginatingOrganizationCode AS CLASSCODEORGANIZATIONCODE, \n\tCOVERAGEEFFECTIVEDATE, \n\tCOVERAGEEXPIRATIONDATE, \n\tCOVERAGECANCELLATIONDATE, \n\tCENSUSBLOCKGROUPCOUNTYCODE, \n\tCENSUSBLOCKGROUPTRACTCODE, \n\tCENSUSBLOCKGROUPBLOCKGROUPCODE, \n\tLATITUDE, \n\tLONGITUDE\n\tFROM RTR_CoverageDetailDim_Insert\n),\nUPD_CoverageDetailDim AS (\n\tSELECT\n\tLKP_CoverageDetailDimId AS CoverageDetailDimId, \n\tModifiedDate, \n\tIncreasedLimitGroupCode, \n\tIncreasedLimitGroupDescription, \n\tPackageModificationAdjustmentGroupCode, \n\tPackageModificationAdjustmentGroupDescription, \n\tClassCode, \n\tBuildingNumber, \n\tLocationNumber, \n\tDeductibleAmount, \n\tRiskGradeCode, \n\tPackageModificationAdjustmentFactor, \n\tYearBuilt, \n\tIncreasedLimitFactor, \n\tCoverageGUID, \n\tISOClassGroupDescription AS ClassGroupDescription, \n\tRatingCity, \n\tRatingCounty, \n\tRatingStateProvinceCode, \n\tRatingStateProvinceAbbreviation, \n\tRatingPostalCode, \n\tRatingAddress, \n\tRatingTerritory, \n\tISOClassDescription, \n\tEffectiveDate, \n\tExpirationDate, \n\tIndividualRiskPremiumModification, \n\tPriorCarrierName, \n\tPriorPolicyKey, \n\tLimitOfInsurance, \n\tCoveragePerOccurrenceLimit, \n\tCoverageAggregateLimit, \n\tCoverageProductAggregateLimit, \n\tConstructionCode, \n\tWindCoverageFlag, \n\tBaseRate, \n\tCoveragePerClaimLimit, \n\tLimitOfInsuranceDescription, \n\tExposureBasis, \n\tClassDescription, \n\tOriginatingOrganizationCode AS ClassCodeOrganizationCode, \n\tCoverageEffectiveDate AS CoverageEffectiveDate3, \n\tCoverageExpirationDate AS CoverageExpirationDate3, \n\tCoverageCancellationDate AS CoverageCancellationDate3, \n\tCensusBlockGroupCountyCode AS CensusBlockGroupCountyCode3, \n\tCensusBlockGroupTractCode AS CensusBlockGroupTractCode3, \n\tCensusBlockGroupBlockGroupCode AS CensusBlockGroupBlockGroupCode3, \n\tLatitude AS Latitude3, \n\tLongitude AS Longitude3\n\tFROM RTR_CoverageDetailDim_Update\n),\nTGT_CoverageDetailDim_Update AS (\n\t@{pipeline().parameters.UPDATE_STATEMENT}\n\tFROM UPD_CoverageDetailDim S\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246503"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905513"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604112"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:14:33"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:30:27"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_DATA_MART_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "WHERE_CLAUSE_DCT": {
                "type": "string",
                "defaultValue": ""
            },
            "WHERE_CLAUSE_PMS": {
                "type": "string",
                "defaultValue": ""
            },
            "UPDATE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "UPDATE_STATEMENT": {
                "type": "string",
                "defaultValue": "UPDATE $$TARGET_TABLE_OWNER.CoverageDetailDim SET ModifedDate = :TU.ModifedDate, EffectiveDate = :TU.EffectiveDate, ExpirationDate = :TU.ExpirationDate WHERE CoverageDetailDimId = :TU.CoverageDetailDimId"
            }
        },
        "folder": {
            "name": "Common DataMart/"
        },
        "annotations": []
    }
}