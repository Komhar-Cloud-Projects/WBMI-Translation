{
    "name": "s_m_CLM_DW_LOAD_Claim_Representative_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Representative_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Sup_Claim_Staff_Email AS (\n\tSELECT\n\tEMAIL,\n\tWBCONNECT_USER_ID\n\tFROM (\n\t\tSELECT\r\n\t\tltrim(rtrim(a.EMAIL)) as EMAIL\r\n\t\t,ltrim(rtrim(a.WBCONNECT_USER_ID)) as WBCONNECT_USER_ID \r\n\t\tFROM \r\n\t\tsup_claim_staff_stage a\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WBCONNECT_USER_ID ORDER BY EMAIL) = 1\n),\nSQ_PMS_ADJUSTER_MASTER_STAGE AS (\n\tSELECT \r\n\tltrim(rtrim(a.ADNM_ADJUSTOR_NBR))\r\n\t, ltrim(rtrim(a.ADNM_NAME))\r\n\t,ltrim(rtrim(a.ADNM_ADJUSTOR_BRANCH_NUMBER))\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.PMS_ADJUSTER_MASTER_STAGE a\r\n\twhere a.ADNM_TYPE_ADJUSTOR = 'H'\n),\nEXP_Source AS (\n\tSELECT\n\tADNM_ADJUSTOR_NBR,\n\tADNM_NAME,\n\tADNM_ADJUSTOR_BRANCH_NUMBER,\n\t-- *INF*: IIF(IS_SPACES(ADNM_NAME) OR ISNULL(ADNM_NAME)\r\n\t-- ,'N/A'\r\n\t-- ,ADNM_NAME)\n\tIFF(IS_SPACES(ADNM_NAME) OR ADNM_NAME IS NULL, 'N/A', ADNM_NAME) AS out_ADNM_NAME\n\tFROM SQ_PMS_ADJUSTER_MASTER_STAGE\n),\nLKP_Sup_Claim_Adjuster_EDW AS (\n\tSELECT\n\twbconnect_user_id,\n\tadjuster_code\n\tFROM (\n\t\tSELECT \r\n\t\tltrim(rtrim(a.wbconnect_user_id)) as wbconnect_user_id\r\n\t\t, ltrim(rtrim(a.adjuster_code)) as adjuster_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_adjuster a\r\n\t\tWHERE a.crrnt_snpsht_flag  = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY adjuster_code ORDER BY wbconnect_user_id) = 1\n),\nLKP_Claim_Rep_handling_office AS (\n\tSELECT\n\thandling_office_code,\n\tclaim_rep_wbconnect_user_id\n\tFROM (\n\t\tSELECT \r\n\t\tclaim_representative.handling_office_code as handling_office_code, \r\n\t\tclaim_representative.claim_rep_wbconnect_user_id as claim_rep_wbconnect_user_id \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative\r\n\t\tWHERE source_sys_id  <> '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_rep_wbconnect_user_id ORDER BY handling_office_code) = 1\n),\nEXP_Adjustor_Claim_Exists AS (\n\tSELECT\n\thandling_office_code AS ipfcgp_loss_handling_office,\n\t-- *INF*: iif(isnull(ipfcgp_loss_handling_office) or is_spaces(ipfcgp_loss_handling_office) or ipfcgp_loss_handling_office ='' OR LENGTH( ipfcgp_loss_handling_office) = 0\r\n\t-- ,'N/A'\r\n\t-- ,ipfcgp_loss_handling_office)\n\tIFF(ipfcgp_loss_handling_office IS NULL OR is_spaces(ipfcgp_loss_handling_office) OR ipfcgp_loss_handling_office = '' OR LENGTH(ipfcgp_loss_handling_office) = 0, 'N/A', ipfcgp_loss_handling_office) AS ipfcgp_loss_handling_office_v,\n\tipfcgp_loss_handling_office_v AS ipfcgp_loss_handling_office_out,\n\t-- *INF*: iif(ipfcgp_loss_handling_office_v = 'N/A'\r\n\t-- ,'N'\r\n\t-- ,'Y')\n\tIFF(ipfcgp_loss_handling_office_v = 'N/A', 'N', 'Y') AS v_Exists_At_Claim_Level,\n\tv_Exists_At_Claim_Level AS Exists_At_Claim_level\n\tFROM LKP_Claim_Rep_handling_office\n),\nLKP_Claim_Representative_Hierachy_EDW AS (\n\tSELECT\n\tdvsn_code,\n\tdvsn_descript,\n\tdept_descript,\n\tdept_name,\n\tdept_mgr,\n\thandling_office_descript,\n\thandling_office_mgr,\n\thandling_office_code\n\tFROM (\n\t\tSELECT distinct \r\n\t\tLTRIM(RTRIM(a.dvsn_code)) as dvsn_code\r\n\t\t,LTRIM(RTRIM(a.dvsn_descript)) as dvsn_descript\r\n\t\t, LTRIM(RTRIM(a.dept_descript)) as dept_descript\r\n\t\t, LTRIM(RTRIM(a.dept_name)) as dept_name\r\n\t\t, LTRIM(RTRIM(a.dept_mgr)) as dept_mgr\r\n\t\t, LTRIM(RTRIM(a.handling_office_descript)) as handling_office_descript\r\n\t\t, LTRIM(RTRIM(a.handling_office_mgr)) as handling_office_mgr\r\n\t\t,LTRIM(RTRIM(a.handling_office_code)) as handling_office_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative a\r\n\t\twhere a.crrnt_snpsht_flag = 1\r\n\t\tand a.source_sys_id <> '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\r\n\t\t\r\n\t\t--the last filter is applied as the hierachy of the PMS adjustor is built upon that of EXCEED system.\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY handling_office_code ORDER BY dvsn_code) = 1\n),\nLKP_Sup_Claim_Report_Office_Stage AS (\n\tSELECT\n\tCLAIM_MANAGER_CODE,\n\tREPORT_OFFICE_NAME,\n\tDIRECTOR_CODE,\n\tDEPT_CODE,\n\tREPORT_OFFICE_CODE\n\tFROM (\n\t\tSELECT \r\n\t\tltrim(rtrim(a.CLAIM_MANAGER_CODE)) as CLAIM_MANAGER_CODE\r\n\t\t, ltrim(rtrim(a.REPORT_OFFICE_NAME)) as REPORT_OFFICE_NAME\r\n\t\t, ltrim(rtrim(a.DIRECTOR_CODE)) as DIRECTOR_CODE\r\n\t\t, ltrim(rtrim(a.DEPT_CODE)) as DEPT_CODE\r\n\t\t, ltrim(rtrim(a.REPORT_OFFICE_CODE)) as REPORT_OFFICE_CODE \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.SUP_REPORT_OFFICE_STAGE a\r\n\t\t\r\n\t\t--there is no filter needed on source_sys_id as this table is only loaded with EXCEED source\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY REPORT_OFFICE_CODE ORDER BY CLAIM_MANAGER_CODE) = 1\n),\nLKP_Sup_Claim_Adjuster_EDW_HANDLING_OFFICE_MGR AS (\n\tSELECT\n\twbconnect_user_id,\n\tadjuster_code\n\tFROM (\n\t\tSELECT \r\n\t\tltrim(rtrim(a.wbconnect_user_id)) as wbconnect_user_id\r\n\t\t, ltrim(rtrim(a.adjuster_code)) as adjuster_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_adjuster a\r\n\t\tWHERE a.crrnt_snpsht_flag  = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY adjuster_code ORDER BY wbconnect_user_id) = 1\n),\nLKP_gtam_wbadj_stage AS (\n\tSELECT\n\tCost_Center_Number,\n\tAdjuster_Code\n\tFROM (\n\t\tSELECT \n\t\t\tCost_Center_Number,\n\t\t\tAdjuster_Code\n\t\tFROM gtam_wbadj_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY Adjuster_Code ORDER BY Cost_Center_Number DESC) = 1\n),\nEXP_TARGET AS (\n\tSELECT\n\tEXP_Source.ADNM_ADJUSTOR_NBR,\n\tEXP_Source.out_ADNM_NAME AS ADNM_NAME,\n\t'WBMI' AS CO_Description,\n\tLKP_Claim_Representative_Hierachy_EDW.dvsn_code,\n\tLKP_Claim_Representative_Hierachy_EDW.dvsn_descript,\n\tLKP_Claim_Representative_Hierachy_EDW.dept_descript,\n\tLKP_Claim_Representative_Hierachy_EDW.dept_name,\n\tLKP_Claim_Representative_Hierachy_EDW.dept_mgr,\n\tEXP_Adjustor_Claim_Exists.ipfcgp_loss_handling_office_out AS office_id,\n\tLKP_Claim_Representative_Hierachy_EDW.handling_office_descript,\n\tLKP_Claim_Representative_Hierachy_EDW.handling_office_mgr,\n\tLKP_Sup_Claim_Adjuster_EDW.wbconnect_user_id AS Adjuster_User_id,\n\t-- *INF*: iif(isnull(:LKP.LKP_SUP_CLAIM_STAFF_EMAIL(Adjuster_User_id))\r\n\t-- ,'N/A'\r\n\t-- ,:LKP.LKP_SUP_CLAIM_STAFF_EMAIL(Adjuster_User_id)\r\n\t-- )\n\tIFF(LKP_SUP_CLAIM_STAFF_EMAIL_Adjuster_User_id.EMAIL IS NULL, 'N/A', LKP_SUP_CLAIM_STAFF_EMAIL_Adjuster_User_id.EMAIL) AS Claim_Rep_Email_ID,\n\tLKP_Sup_Claim_Adjuster_EDW_HANDLING_OFFICE_MGR.wbconnect_user_id AS wbconnect_user_id_handling_office_mgr,\n\t-- *INF*: iif(isnull(:LKP.LKP_SUP_CLAIM_STAFF_EMAIL(wbconnect_user_id_handling_office_mgr))\r\n\t-- ,'N/A'\r\n\t-- ,:LKP.LKP_SUP_CLAIM_STAFF_EMAIL(wbconnect_user_id_handling_office_mgr)\r\n\t-- )\r\n\t-- \n\tIFF(LKP_SUP_CLAIM_STAFF_EMAIL_wbconnect_user_id_handling_office_mgr.EMAIL IS NULL, 'N/A', LKP_SUP_CLAIM_STAFF_EMAIL_wbconnect_user_id_handling_office_mgr.EMAIL) AS Handling_Office_Mgr_Email_ID,\n\tEXP_Source.ADNM_ADJUSTOR_BRANCH_NUMBER AS adnm_adjustor_branch_number,\n\t-- *INF*: lpad(:UDF.DEFAULT_VALUE_FOR_STRINGS(TO_CHAR(adnm_adjustor_branch_number)),3,'0')\n\tlpad(:UDF.DEFAULT_VALUE_FOR_STRINGS(TO_CHAR(adnm_adjustor_branch_number)), 3, '0') AS adnm_adjustor_branch_number_Out,\n\tLKP_gtam_wbadj_stage.Cost_Center_Number,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(Cost_Center_Number)\r\n\t-- --rtrim(ltrim(Cost_Center_Number))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(Cost_Center_Number) AS cost_center_number_Out\n\tFROM EXP_Adjustor_Claim_Exists\n\t -- Manually join with EXP_Source\n\tLEFT JOIN LKP_Claim_Representative_Hierachy_EDW\n\tON LKP_Claim_Representative_Hierachy_EDW.handling_office_code = EXP_Adjustor_Claim_Exists.ipfcgp_loss_handling_office_out\n\tLEFT JOIN LKP_Sup_Claim_Adjuster_EDW\n\tON LKP_Sup_Claim_Adjuster_EDW.adjuster_code = EXP_Source.ADNM_ADJUSTOR_NBR\n\tLEFT JOIN LKP_Sup_Claim_Adjuster_EDW_HANDLING_OFFICE_MGR\n\tON LKP_Sup_Claim_Adjuster_EDW_HANDLING_OFFICE_MGR.adjuster_code = LKP_Sup_Claim_Report_Office_Stage.CLAIM_MANAGER_CODE\n\tLEFT JOIN LKP_gtam_wbadj_stage\n\tON LKP_gtam_wbadj_stage.Adjuster_Code = EXP_Source.ADNM_ADJUSTOR_NBR\n\tLEFT JOIN LKP_SUP_CLAIM_STAFF_EMAIL LKP_SUP_CLAIM_STAFF_EMAIL_Adjuster_User_id\n\tON LKP_SUP_CLAIM_STAFF_EMAIL_Adjuster_User_id.WBCONNECT_USER_ID = Adjuster_User_id\n\n\tLEFT JOIN LKP_SUP_CLAIM_STAFF_EMAIL LKP_SUP_CLAIM_STAFF_EMAIL_wbconnect_user_id_handling_office_mgr\n\tON LKP_SUP_CLAIM_STAFF_EMAIL_wbconnect_user_id_handling_office_mgr.WBCONNECT_USER_ID = wbconnect_user_id_handling_office_mgr\n\n),\nLKP_Claim_Representative_EDW AS (\n\tSELECT\n\tclaim_rep_id,\n\tclaim_rep_ak_id,\n\tclaim_rep_key,\n\tclaim_rep_full_name,\n\tdvsn_code,\n\tdvsn_descript,\n\tdept_descript,\n\tdept_name,\n\tdept_mgr,\n\thandling_office_code,\n\thandling_office_descript,\n\thandling_office_mgr,\n\tclaim_rep_wbconnect_user_id,\n\tclaim_rep_email,\n\tclaim_rep_direct_automatic_pay_lmt,\n\tclaim_rep_direct_automatic_reserve_lmt,\n\thandling_office_mgr_email,\n\thandling_office_mgr_direct_automatic_pay_lmt,\n\thandling_office_mgr_direct_automatic_reserve_lmt,\n\tcost_center,\n\tclaim_rep_branch_num,\n\tADNM_ADJUSTOR_NBR\n\tFROM (\n\t\tSELECT \r\n\t\ta.claim_rep_id as claim_rep_id\r\n\t\t, a.claim_rep_ak_id as claim_rep_ak_id\r\n\t\t, ltrim(rtrim(a.claim_rep_full_name)) as claim_rep_full_name\r\n\t\t, ltrim(rtrim(a.dvsn_code)) as dvsn_code\r\n\t\t, ltrim(rtrim(a.dvsn_descript)) as dvsn_descript\r\n\t\t, ltrim(rtrim(a.dept_descript)) as dept_descript\r\n\t\t, ltrim(rtrim(a.dept_name)) as dept_name\r\n\t\t, ltrim(rtrim(a.dept_mgr)) as dept_mgr\r\n\t\t, ltrim(rtrim(a.handling_office_code)) as handling_office_code\r\n\t\t, ltrim(rtrim(a.handling_office_descript)) as handling_office_descript\r\n\t\t, ltrim(rtrim(a.handling_office_mgr)) as handling_office_mgr\r\n\t\t, ltrim(rtrim(a.claim_rep_wbconnect_user_id)) as claim_rep_wbconnect_user_id\r\n\t\t, ltrim(rtrim(a.claim_rep_email)) AS claim_rep_email\r\n\t\t, a.claim_rep_direct_automatic_pay_lmt  AS claim_rep_direct_automatic_pay_lmt\r\n\t\t, a.claim_rep_direct_automatic_reserve_lmt  AS claim_rep_direct_automatic_reserve_lmt\r\n\t\t, ltrim(rtrim(a.handling_office_mgr_email)) AS handling_office_mgr_email\r\n\t\t, a.handling_office_mgr_direct_automatic_pay_lmt     AS handling_office_mgr_direct_automatic_pay_lmt\r\n\t\t, a.handling_office_mgr_direct_automatic_reserve_lmt AS handling_office_mgr_direct_automatic_reserve_lmt\r\n\t\t,a.cost_center as cost_center\r\n\t\t,a.claim_rep_branch_num as claim_rep_branch_num\r\n\t\t, a.claim_rep_key as claim_rep_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative a\r\n\t\twhere a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand\r\n\t\ta.claim_rep_id in (select max(b.claim_rep_id) from @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative b\r\n\t\twhere b.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and b.crrnt_snpsht_flag = 1\r\n\t\tgroup by b.claim_rep_key)\r\n\t\torder by a.claim_rep_key\r\n\t\t\r\n\t\t--IN Subquery exists so that we only pick the MAX value of the PK for each AK Group\r\n\t\t--WHERE clause is always eff_to_date = '12/31/2100 23:59:59'\r\n\t\t--GROUP BY clause is always the AK\r\n\t\t--ORDER BY clause is always the AK.  When any comments exist in the SQL override Informatica will no longer \r\n\t\t--generate default ORDER BY statement\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_rep_key ORDER BY claim_rep_id DESC) = 1\n),\nLKP_Get_Limit_Reserve_Amt_For_Claim_Rep AS (\n\tSELECT\n\tCAJ_DIR_AUT_RES,\n\tCAJ_DIR_AUT_PMT,\n\tWBCONNCT_USER_ID_CLAIM_REP,\n\tCAJ_USER_ID\n\tFROM (\n\t\tSELECT \r\n\t\tltrim(rtrim(a.CAJ_DIR_AUT_RES)) as CAJ_DIR_AUT_RES\r\n\t\t,ltrim(rtrim(a.CAJ_DIR_AUT_PMT)) as CAJ_DIR_AUT_PMT\r\n\t\t, ltrim(rtrim(a.CAJ_USER_ID)) as CAJ_USER_ID \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.ADJUSTER_TAB_STAGE a\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CAJ_USER_ID ORDER BY CAJ_DIR_AUT_RES) = 1\n),\nLKP_Get_Limit_Reserve_Amt_For_handling_office_mgr AS (\n\tSELECT\n\tCAJ_DIR_AUT_RES,\n\tCAJ_DIR_AUT_PMT,\n\tWBCONNCT_USER_ID_HANDLING_OFFICE_MGR,\n\tCAJ_USER_ID\n\tFROM (\n\t\tSELECT \r\n\t\tltrim(rtrim(a.CAJ_DIR_AUT_RES)) as CAJ_DIR_AUT_RES\r\n\t\t,ltrim(rtrim(a.CAJ_DIR_AUT_PMT)) as CAJ_DIR_AUT_PMT\r\n\t\t, ltrim(rtrim(a.CAJ_USER_ID)) as CAJ_USER_ID \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.ADJUSTER_TAB_STAGE a\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CAJ_USER_ID ORDER BY CAJ_DIR_AUT_RES) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_Claim_Representative_EDW.claim_rep_id AS lkp_claim_rep_id,\n\tLKP_Claim_Representative_EDW.claim_rep_ak_id AS lkp_claim_rep_ak_id,\n\tLKP_Claim_Representative_EDW.claim_rep_full_name AS lkp_claim_rep_name,\n\tLKP_Claim_Representative_EDW.dvsn_code AS lkp_dvsn_code,\n\tLKP_Claim_Representative_EDW.dvsn_descript AS lkp_dvsn_descript,\n\tLKP_Claim_Representative_EDW.dept_descript AS lkp_dept_descript,\n\tLKP_Claim_Representative_EDW.dept_name AS lkp_dept_name,\n\tLKP_Claim_Representative_EDW.dept_mgr AS lkp_dept_mgr,\n\tLKP_Claim_Representative_EDW.handling_office_code AS lkp_handling_office_code,\n\tLKP_Claim_Representative_EDW.handling_office_descript AS lkp_handling_office_descript,\n\tLKP_Claim_Representative_EDW.handling_office_mgr AS lkp_handling_office_mgr,\n\tLKP_Claim_Representative_EDW.claim_rep_wbconnect_user_id AS lkp_webconnect_user_id,\n\tLKP_Claim_Representative_EDW.claim_rep_email AS lkp_claim_rep_email,\n\tLKP_Claim_Representative_EDW.claim_rep_direct_automatic_pay_lmt AS lkp_claim_rep_direct_automatic_pay_lmt,\n\tLKP_Claim_Representative_EDW.claim_rep_direct_automatic_reserve_lmt AS lkp_claim_rep_direct_automatic_reserve_lmt,\n\tLKP_Claim_Representative_EDW.handling_office_mgr_email AS lkp_handling_office_mgr_email,\n\tLKP_Claim_Representative_EDW.handling_office_mgr_direct_automatic_pay_lmt AS lkp_handling_office_mgr_direct_automatic_pay_lmt,\n\tLKP_Claim_Representative_EDW.handling_office_mgr_direct_automatic_reserve_lmt AS lkp_handling_office_mgr_direct_automatic_reserve_lmt,\n\tLKP_Claim_Representative_EDW.cost_center AS lkp_cost_center,\n\tLKP_Claim_Representative_EDW.claim_rep_branch_num AS lkp_claim_rep_branch_num,\n\tEXP_TARGET.ADNM_NAME AS claim_rep_name,\n\tEXP_TARGET.dvsn_code AS DIVISION_CODE,\n\tEXP_TARGET.dvsn_descript AS DIVISION_DESC,\n\tEXP_TARGET.dept_descript AS DEPT_DESC,\n\tEXP_TARGET.dept_name AS DEPT_CODE,\n\tEXP_TARGET.dept_mgr AS DEPT_MGR,\n\tEXP_TARGET.office_id AS OFFICE_ID,\n\tEXP_TARGET.handling_office_descript AS REPORT_OFFICE_NAME,\n\tEXP_TARGET.Adjuster_User_id AS USER_ID,\n\tEXP_TARGET.handling_office_mgr AS Handling_Office_Mgr,\n\tEXP_Adjustor_Claim_Exists.Exists_At_Claim_level,\n\tEXP_TARGET.ADNM_ADJUSTOR_NBR AS Adjuster_No,\n\tEXP_TARGET.CO_Description,\n\tEXP_TARGET.Claim_Rep_Email_ID,\n\tLKP_Get_Limit_Reserve_Amt_For_Claim_Rep.CAJ_DIR_AUT_RES AS Claim_Rep_DIR_AUT_RES,\n\tLKP_Get_Limit_Reserve_Amt_For_Claim_Rep.CAJ_DIR_AUT_PMT AS Claim_Rep_DIR_AUT_PMT,\n\tEXP_TARGET.Handling_Office_Mgr_Email_ID,\n\tLKP_Get_Limit_Reserve_Amt_For_handling_office_mgr.CAJ_DIR_AUT_RES AS Handling_Office_Mgr_DIR_AUT_RES,\n\tLKP_Get_Limit_Reserve_Amt_For_handling_office_mgr.CAJ_DIR_AUT_PMT AS Handling_Office_Mgr_DIR_AUT_PMT,\n\tEXP_TARGET.adnm_adjustor_branch_number_Out AS adnm_adjustor_branch_number,\n\tEXP_TARGET.cost_center_number_Out AS cost_center_number,\n\t-- *INF*: iif(isnull(lkp_claim_rep_id)\r\n\t-- ,'NEW'\r\n\t-- ,iif(Exists_At_Claim_level = 'Y' and (lkp_claim_rep_name != claim_rep_name OR \r\n\t-- lkp_dvsn_code != DIVISION_CODE OR \r\n\t-- lkp_dvsn_descript != DIVISION_DESC OR \r\n\t-- lkp_dept_descript != DEPT_DESC OR \r\n\t-- lkp_dept_name != DEPT_CODE OR \r\n\t-- lkp_dept_mgr != DEPT_MGR OR \r\n\t-- lkp_handling_office_code != OFFICE_ID OR \r\n\t-- lkp_handling_office_descript != REPORT_OFFICE_NAME OR \r\n\t-- lkp_handling_office_mgr != Handling_Office_Mgr OR\r\n\t-- lkp_webconnect_user_id != USER_ID OR\r\n\t-- lkp_claim_rep_email != Claim_Rep_Email_ID OR \r\n\t-- lkp_handling_office_mgr_email != Handling_Office_Mgr_Email_ID OR \r\n\t-- lkp_claim_rep_direct_automatic_pay_lmt != Claim_Rep_DIR_AUT_PMT OR \r\n\t-- lkp_claim_rep_direct_automatic_reserve_lmt != Claim_Rep_DIR_AUT_RES OR \r\n\t-- lkp_handling_office_mgr_direct_automatic_pay_lmt != Handling_Office_Mgr_DIR_AUT_PMT OR \r\n\t-- lkp_handling_office_mgr_direct_automatic_reserve_lmt != Handling_Office_Mgr_DIR_AUT_RES OR\r\n\t-- rtrim(ltrim(lkp_cost_center)) != rtrim(ltrim(cost_center_number)) OR\r\n\t-- lkp_claim_rep_branch_num != adnm_adjustor_branch_number\r\n\t-- )\r\n\t-- ,'UPDATE'\r\n\t-- ,'NO CHANGE'))\n\tIFF(lkp_claim_rep_id IS NULL, 'NEW', IFF(Exists_At_Claim_level = 'Y' AND ( lkp_claim_rep_name != claim_rep_name OR lkp_dvsn_code != DIVISION_CODE OR lkp_dvsn_descript != DIVISION_DESC OR lkp_dept_descript != DEPT_DESC OR lkp_dept_name != DEPT_CODE OR lkp_dept_mgr != DEPT_MGR OR lkp_handling_office_code != OFFICE_ID OR lkp_handling_office_descript != REPORT_OFFICE_NAME OR lkp_handling_office_mgr != Handling_Office_Mgr OR lkp_webconnect_user_id != USER_ID OR lkp_claim_rep_email != Claim_Rep_Email_ID OR lkp_handling_office_mgr_email != Handling_Office_Mgr_Email_ID OR lkp_claim_rep_direct_automatic_pay_lmt != Claim_Rep_DIR_AUT_PMT OR lkp_claim_rep_direct_automatic_reserve_lmt != Claim_Rep_DIR_AUT_RES OR lkp_handling_office_mgr_direct_automatic_pay_lmt != Handling_Office_Mgr_DIR_AUT_PMT OR lkp_handling_office_mgr_direct_automatic_reserve_lmt != Handling_Office_Mgr_DIR_AUT_RES OR rtrim(ltrim(lkp_cost_center)) != rtrim(ltrim(cost_center_number)) OR lkp_claim_rep_branch_num != adnm_adjustor_branch_number ), 'UPDATE', 'NO CHANGE')) AS v_changed_flag,\n\t1 AS Crrnt_SnapSht_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AUDIT_ID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tto_date('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tv_changed_flag AS changed_flag,\n\tsysdate AS created_date,\n\tsysdate AS modified_date,\n\t'N/A' AS Not_Available_Field,\n\t0 AS ExceedAuthorityFlag,\n\t'N/A' AS ClaimsDesktopAuthorityType\n\tFROM EXP_Adjustor_Claim_Exists\n\t -- Manually join with EXP_TARGET\n\tLEFT JOIN LKP_Claim_Representative_EDW\n\tON LKP_Claim_Representative_EDW.claim_rep_key = EXP_TARGET.ADNM_ADJUSTOR_NBR\n\tLEFT JOIN LKP_Get_Limit_Reserve_Amt_For_Claim_Rep\n\tON LKP_Get_Limit_Reserve_Amt_For_Claim_Rep.CAJ_USER_ID = EXP_TARGET.Adjuster_User_id\n\tLEFT JOIN LKP_Get_Limit_Reserve_Amt_For_handling_office_mgr\n\tON LKP_Get_Limit_Reserve_Amt_For_handling_office_mgr.CAJ_USER_ID = EXP_TARGET.wbconnect_user_id_handling_office_mgr\n),\nFIL_Insert AS (\n\tSELECT\n\tlkp_claim_rep_id AS claim_rep_id, \n\tlkp_claim_rep_ak_id AS claim_rep_ak_id, \n\tAdjuster_No AS CAJ_EMP_CLIENT_ID, \n\tclaim_rep_name AS CICL_FULL_NM, \n\tNot_Available_Field AS CICL_FST_NM, \n\tNot_Available_Field AS CICL_MDL_NM, \n\tNot_Available_Field AS CICL_LST_NM, \n\tNot_Available_Field AS NM_PFX, \n\tNot_Available_Field AS NM_SFX, \n\tCO_Description, \n\tDIVISION_CODE, \n\tDIVISION_DESC, \n\tDEPT_DESC, \n\tDEPT_CODE, \n\tDEPT_MGR, \n\tOFFICE_ID AS CAJ_OFFICE_ID, \n\tREPORT_OFFICE_NAME, \n\tUSER_ID, \n\tHandling_Office_Mgr, \n\tClaim_Rep_Email_ID, \n\tClaim_Rep_DIR_AUT_RES, \n\tClaim_Rep_DIR_AUT_PMT, \n\tHandling_Office_Mgr_Email_ID, \n\tHandling_Office_Mgr_DIR_AUT_RES, \n\tHandling_Office_Mgr_DIR_AUT_PMT, \n\tCrrnt_SnapSht_Flag, \n\tAUDIT_ID, \n\tSOURCE_SYSTEM_ID, \n\teff_from_date, \n\teff_to_date, \n\tchanged_flag, \n\tcreated_date, \n\tmodified_date, \n\tNot_Available_Field AS Division_Manager, \n\tadnm_adjustor_branch_number, \n\tcost_center_number, \n\tExceedAuthorityFlag, \n\tClaimsDesktopAuthorityType\n\tFROM EXP_Detect_Changes\n\tWHERE changed_flag='NEW' or changed_flag='UPDATE'\n),\nSEQ_Claim_Representative_AK AS (\n\tCREATE SEQUENCE SEQ_Claim_Representative_AK\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\tclaim_rep_ak_id,\n\tSEQ_Claim_Representative_AK.NEXTVAL,\n\t-- *INF*: iif(isnull(claim_rep_ak_id)\r\n\t-- ,NEXTVAL\r\n\t-- ,claim_rep_ak_id)\n\tIFF(claim_rep_ak_id IS NULL, NEXTVAL, claim_rep_ak_id) AS out_claim_rep_ak_id,\n\tCAJ_EMP_CLIENT_ID,\n\tCICL_FULL_NM,\n\tCICL_FST_NM,\n\tCICL_LST_NM,\n\tCICL_MDL_NM,\n\tNM_PFX,\n\tNM_SFX,\n\tCO_Description,\n\tDIVISION_CODE,\n\tDIVISION_DESC,\n\tDEPT_DESC,\n\tDEPT_CODE,\n\tDEPT_MGR,\n\tCAJ_OFFICE_ID,\n\tREPORT_OFFICE_NAME,\n\tUSER_ID,\n\tHandling_Office_Mgr,\n\tClaim_Rep_Email_ID,\n\tClaim_Rep_DIR_AUT_RES,\n\tClaim_Rep_DIR_AUT_PMT,\n\tHandling_Office_Mgr_Email_ID,\n\tHandling_Office_Mgr_DIR_AUT_RES,\n\tHandling_Office_Mgr_DIR_AUT_PMT,\n\tCrrnt_SnapSht_Flag,\n\tAUDIT_ID,\n\tSOURCE_SYSTEM_ID,\n\teff_from_date,\n\teff_to_date,\n\tcreated_date,\n\tmodified_date,\n\tDivision_Manager,\n\tadnm_adjustor_branch_number,\n\tcost_center_number,\n\tExceedAuthorityFlag,\n\tClaimsDesktopAuthorityType\n\tFROM FIL_Insert\n),\nclaim_representative_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative\n\t(claim_rep_ak_id, claim_rep_key, claim_rep_full_name, claim_rep_first_name, claim_rep_last_name, claim_rep_mid_name, claim_rep_name_prfx, claim_rep_name_sfx, co_descript, dvsn_code, dvsn_descript, dvsn_mgr, dept_descript, dept_name, dept_mgr, handling_office_code, handling_office_descript, handling_office_mgr, claim_rep_wbconnect_user_id, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, claim_rep_email, handling_office_mgr_email, claim_rep_direct_automatic_pay_lmt, claim_rep_direct_automatic_reserve_lmt, handling_office_mgr_direct_automatic_pay_lmt, handling_office_mgr_direct_automatic_reserve_lmt, cost_center, claim_rep_branch_num, claim_rep_num, ExceedAuthorityFlag, ClaimsDesktopAuthorityType)\n\tSELECT \n\tout_claim_rep_ak_id AS CLAIM_REP_AK_ID, \n\tCAJ_EMP_CLIENT_ID AS CLAIM_REP_KEY, \n\tCICL_FULL_NM AS CLAIM_REP_FULL_NAME, \n\tCICL_FST_NM AS CLAIM_REP_FIRST_NAME, \n\tCICL_LST_NM AS CLAIM_REP_LAST_NAME, \n\tCICL_MDL_NM AS CLAIM_REP_MID_NAME, \n\tNM_PFX AS CLAIM_REP_NAME_PRFX, \n\tNM_SFX AS CLAIM_REP_NAME_SFX, \n\tCO_Description AS CO_DESCRIPT, \n\tDIVISION_CODE AS DVSN_CODE, \n\tDIVISION_DESC AS DVSN_DESCRIPT, \n\tDivision_Manager AS DVSN_MGR, \n\tDEPT_DESC AS DEPT_DESCRIPT, \n\tDEPT_CODE AS DEPT_NAME, \n\tDEPT_MGR AS DEPT_MGR, \n\tCAJ_OFFICE_ID AS HANDLING_OFFICE_CODE, \n\tREPORT_OFFICE_NAME AS HANDLING_OFFICE_DESCRIPT, \n\tHandling_Office_Mgr AS HANDLING_OFFICE_MGR, \n\tUSER_ID AS CLAIM_REP_WBCONNECT_USER_ID, \n\tCrrnt_SnapSht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAUDIT_ID AS AUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tClaim_Rep_Email_ID AS CLAIM_REP_EMAIL, \n\tHandling_Office_Mgr_Email_ID AS HANDLING_OFFICE_MGR_EMAIL, \n\tClaim_Rep_DIR_AUT_PMT AS CLAIM_REP_DIRECT_AUTOMATIC_PAY_LMT, \n\tClaim_Rep_DIR_AUT_RES AS CLAIM_REP_DIRECT_AUTOMATIC_RESERVE_LMT, \n\tHandling_Office_Mgr_DIR_AUT_PMT AS HANDLING_OFFICE_MGR_DIRECT_AUTOMATIC_PAY_LMT, \n\tHandling_Office_Mgr_DIR_AUT_RES AS HANDLING_OFFICE_MGR_DIRECT_AUTOMATIC_RESERVE_LMT, \n\tcost_center_number AS COST_CENTER, \n\tadnm_adjustor_branch_number AS CLAIM_REP_BRANCH_NUM, \n\tCAJ_EMP_CLIENT_ID AS CLAIM_REP_NUM, \n\tEXCEEDAUTHORITYFLAG, \n\tCLAIMSDESKTOPAUTHORITYTYPE\n\tFROM EXP_Determine_AK\n),\nSQ_claim_representative AS (\n\tSELECT\r\n\t a.claim_rep_id\r\n\t, a.claim_rep_key\r\n\t, a.eff_from_date\r\n\t, a.eff_to_date\r\n\t, a.source_sys_id \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative a\r\n\twhere a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tand EXISTS (SELECT 1\t\t\t\r\n\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative b\r\n\t\tWHERE b.crrnt_snpsht_flag = 1\r\n\t\tAND a.claim_rep_key = b.claim_rep_key\r\n\t      and a.source_sys_id = b.source_sys_id\r\n\t\tGROUP BY b.claim_rep_key, b.source_sys_id\r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY a.claim_rep_key, a.source_sys_id, a.eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of eff_to_date='12/31/2100 23:59:59' and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the eff_to_date by utilizing a local variable to keep track\n),\nEXP_Expire_Rows AS (\n\tSELECT\n\tclaim_rep_id,\n\tclaim_rep_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\tsource_sys_id,\n\t-- *INF*: DECODE (TRUE, claim_rep_key = v_PREV_ROW_claim_rep_key and source_sys_id = v_PREV_ROW_source_sys_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_rep_key = v_PREV_ROW_claim_rep_key AND source_sys_id = v_PREV_ROW_source_sys_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tclaim_rep_key AS v_PREV_ROW_claim_rep_key,\n\tsource_sys_id AS v_PREV_ROW_source_sys_id,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\t0 AS crrnt_Snpsht_flag,\n\tsysdate AS modified_date\n\tFROM SQ_claim_representative\n),\nFIL_Claim_Rep_Occurrence_Upd AS (\n\tSELECT\n\tclaim_rep_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM EXP_Expire_Rows\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_Claim_Rep_Occurrence AS (\n\tSELECT\n\tclaim_rep_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM FIL_Claim_Rep_Occurrence_Upd\n),\nclaim_representative_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative AS T\n\tUSING UPD_Claim_Rep_Occurrence AS S\n\tON T.claim_rep_id = S.claim_rep_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_Snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604339"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}