{
    "name": "m_AGY_DW_LOAD_SalesDirector",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_LOAD_SalesDirector",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_AssociateStage AS (\n\tSELECT\n\t\tHashKey,\n\t\tModifiedUserID,\n\t\tModifiedDate,\n\t\tWestBendAssociateID,\n\t\tAssociateRole,\n\t\tRoleSpecificUserCode,\n\t\tDisplayName,\n\t\tLastName,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tSuffix,\n\t\tEmailAddress,\n\t\tExtractDate,\n\t\tAsOfDate,\n\t\tRecordCount,\n\t\tSourceSystemID,\n\t\tUserId,\n\t\tStrategicProfitCenterCode,\n\t\tStrategicProfitCenterDescription\n\tFROM AssociateStage\n\tWHERE AssociateStage.AssociateRole = 'SALES DIRECTOR'\n),\nLKP_ExistingSalesDirector AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tHashKey,\n\tSalesDirectorAKID,\n\tWestBendAssociateID\n\tFROM (\n\t\tSELECT \n\t\t\tCurrentSnapshotFlag,\n\t\t\tHashKey,\n\t\t\tSalesDirectorAKID,\n\t\t\tWestBendAssociateID\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.SalesDirector\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WestBendAssociateID ORDER BY CurrentSnapshotFlag) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_ExistingSalesDirector.HashKey AS lkp_HashKey,\n\tLKP_ExistingSalesDirector.SalesDirectorAKID AS lkp_SalesDirectorAKID,\n\tSQ_AssociateStage.WestBendAssociateID,\n\tSQ_AssociateStage.DisplayName,\n\tSQ_AssociateStage.LastName,\n\tSQ_AssociateStage.FirstName,\n\tSQ_AssociateStage.MiddleName,\n\tSQ_AssociateStage.Suffix,\n\tSQ_AssociateStage.EmailAddress,\n\tSQ_AssociateStage.RoleSpecificUserCode AS SalesDirectorCode,\n\tSQ_AssociateStage.UserId,\n\t-- *INF*: IIF(IsNull(UserId), 'N/A', UserId)\n\tIFF(UserId IS NULL, 'N/A', UserId) AS o_UserId,\n\t-- *INF*: MD5(DisplayName || LastName || FirstName || MiddleName || Suffix || EmailAddress || SalesDirectorCode || UserId)\n\tMD5(DisplayName || LastName || FirstName || MiddleName || Suffix || EmailAddress || SalesDirectorCode || UserId) AS v_NewHashKey,\n\tv_NewHashKey AS o_NewHashKey,\n\t-- *INF*: IIF(ISNULL(lkp_HashKey), 'NEW', IIF((lkp_HashKey <> v_NewHashKey), 'UPDATE', 'NOCHANGE'))\n\tIFF(lkp_HashKey IS NULL, 'NEW', IFF(( lkp_HashKey <> v_NewHashKey ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t-- *INF*: iif(v_changed_flag='NEW', to_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'), sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate,\n\tSQ_AssociateStage.SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_AssociateStage\n\tLEFT JOIN LKP_ExistingSalesDirector\n\tON LKP_ExistingSalesDirector.WestBendAssociateID = SQ_AssociateStage.WestBendAssociateID\n),\nFIL_insert AS (\n\tSELECT\n\tlkp_SalesDirectorAKID AS lkp_SalesDirector_AKID, \n\tchanged_flag, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\to_NewHashKey AS HashKey, \n\tWestBendAssociateID, \n\tDisplayName, \n\tLastName, \n\tFirstName, \n\tMiddleName, \n\tSuffix, \n\tEmailAddress, \n\tSalesDirectorCode, \n\to_UserId AS UserId\n\tFROM EXP_Detect_Changes\n\tWHERE changed_flag='NEW'or changed_flag='UPDATE'\n),\nSEQ_SalesDirector_AKID AS (\n\tCREATE SEQUENCE SEQ_SalesDirector_AKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Assign_AKID AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tlkp_SalesDirector_AKID,\n\tSEQ_SalesDirector_AKID.NEXTVAL,\n\t-- *INF*: iif(isnull(lkp_SalesDirector_AKID),NEXTVAL,lkp_SalesDirector_AKID)\n\tIFF(lkp_SalesDirector_AKID IS NULL, NEXTVAL, lkp_SalesDirector_AKID) AS SalesDirectorAKID,\n\t0 AS Default_Int,\n\t'N/A' AS Default_char,\n\tHashKey,\n\tWestBendAssociateID,\n\tDisplayName,\n\tLastName,\n\tFirstName,\n\tMiddleName,\n\tSuffix,\n\tEmailAddress,\n\tSalesDirectorCode,\n\tUserId\n\tFROM FIL_insert\n),\nSalesDirector_Inserts AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDirector\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, HashKey, SalesDirectorAKID, WestBendAssociateID, SalesDirectorCode, DisplayName, LastName, FirstName, MiddleName, Suffix, EmailAddress, UserId)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tHASHKEY, \n\tSALESDIRECTORAKID, \n\tWESTBENDASSOCIATEID, \n\tSALESDIRECTORCODE, \n\tDISPLAYNAME, \n\tLASTNAME, \n\tFIRSTNAME, \n\tMIDDLENAME, \n\tSUFFIX, \n\tEMAILADDRESS, \n\tUSERID\n\tFROM EXP_Assign_AKID\n),\nSQ_SalesDirector AS (\n\tSELECT \r\n\t\ta.SalesDirectorID, \r\n\t\ta.EffectiveDate,\r\n\t\ta.ExpirationDate, \r\n\t\ta.SalesDirectorAKID  \r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDirector a\r\n\tWHERE  a.SalesDirectorAKID  IN\r\n\t\t( SELECT SalesDirectorAKID FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDirector\r\n\t\tWHERE CurrentSnapshotFlag = 1 GROUP BY SalesDirectorAKID HAVING count(*) > 1) \r\n\tORDER BY a.SalesDirectorAKID ,a.EffectiveDate DESC\r\n\t\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tSalesDirectorID,\n\tEffectiveDate,\n\tExpirationDate AS OriginalExpirationDate,\n\tSalesDirectorAKID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- SalesDirectorAKID = v_prev_AKID , ADD_TO_DATE(v_prev_EffectiveDate,'SS',-1),\r\n\t-- OriginalExpirationDate)\n\tDECODE(TRUE,\n\tSalesDirectorAKID = v_prev_AKID, ADD_TO_DATE(v_prev_EffectiveDate, 'SS', - 1),\n\tOriginalExpirationDate) AS v_ExpirationDate,\n\tv_ExpirationDate AS o_ExpirationDate,\n\tSalesDirectorAKID AS v_prev_AKID,\n\tEffectiveDate AS v_prev_EffectiveDate,\n\t0 AS CurrentSnapshotFlag,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_SalesDirector\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tSalesDirectorID, \n\tOriginalExpirationDate AS ExpirationDate, \n\to_ExpirationDate AS NewEffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM EXP_Lag_eff_from_date\n\tWHERE ExpirationDate != NewEffectiveToDate\n),\nUPD_OldRecord AS (\n\tSELECT\n\tSalesDirectorID, \n\tNewEffectiveToDate AS EffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nSalesDirector_Updates AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDirector AS T\n\tUSING UPD_OldRecord AS S\n\tON T.SalesDirectorID = S.SalesDirectorID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.EffectiveToDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246490"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905469"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603183"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:19:20"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:18:59"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCESYSTEMID": {
                "type": "string",
                "defaultValue": "AgencyODS"
            }
        },
        "folder": {
            "name": "Agency DataWarehouse/"
        },
        "annotations": []
    }
}