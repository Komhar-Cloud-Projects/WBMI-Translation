{
    "name": "s_m_POL_DW_Load_PolicyAudit_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_Load_PolicyAudit_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_EDWAuditStatus AS (\n\tSELECT\n\tAuditableFlag,\n\tPolicyAKId,\n\tInsuranceLine,\n\tEffectiveDate\n\tFROM (\n\t\tSELECT \n\t\t\tAuditableFlag,\n\t\t\tPolicyAKId,\n\t\t\tInsuranceLine,\n\t\t\tEffectiveDate\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,InsuranceLine,EffectiveDate ORDER BY AuditableFlag DESC) = 1\n),\nLKP_WBCLLineStage AS (\n\tSELECT\n\tIsAuditable,\n\tPolicyKey,\n\tInsuranceLine,\n\tCreatedDate\n\tFROM (\n\t\tselect distinct d.PolicyNumber+ISNULL(w.PolicyVersionFormatted,'00') as PolicyKey,\r\n\t\tc.Type as InsuranceLine,\r\n\t\tf.CreatedDate as CreatedDate,\r\n\t\tcase when d.Auditable=1 and a.IsAuditable=1 then '1' else '0' end as IsAuditable\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCLLineStage a\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLineStaging b\r\n\t\ton a.WBLineId=b.WB_LineId\r\n\t\tand a.SessionId=b.SessionId\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging c\r\n\t\ton b.LineId=c.LineId\r\n\t\tand b.SessionId=c.SessionId\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging d\r\n\t\ton c.PolicyId=d.PolicyId\r\n\t\tand c.SessionId=d.SessionId\r\n\t\tand d.Status<>'Quote'\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBPolicyStaging w\r\n\t\ton w.PolicyId=d.PolicyId\r\n\t\tand w.SessionId=d.SessionId\r\n\t\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging f\r\n\t\ton f.SessionId=a.SessionId\r\n\t\tand f.State='committed'\r\n\t\tleft hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging g\r\n\t\ton f.SessionId=g.SessionId\r\n\t\tand g.HistoryId>f.HistoryId\r\n\t\twhere g.TransactionId is null\r\n\t\torder by d.PolicyNumber+ISNULL(w.PolicyVersionFormatted,'00'),c.Type,f.CreatedDate--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,InsuranceLine,CreatedDate ORDER BY IsAuditable DESC) = 1\n),\nLKP_LatestPremiumTransaction AS (\n\tSELECT\n\tPremiumTransactionCode,\n\tPolicyAKId\n\tFROM (\n\t\tSELECT distinct CO.PolicyAKID AS PolicyAKId,CO.PremiumTransactionCode AS PremiumTransactionCode\r\n\t\tfrom (\r\n\t\tselect Row_number() over(partition by e.pol_ak_id order by  PremiumTransactionEnteredDate desc ) SEQ,\r\n\t\te.Pol_AK_Id PolicyAKID,PremiumTransactionEnteredDate,a.PremiumTransactionCode\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction a with (nolock)\r\n\t\tinner join @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy e with (nolock)\r\n\t\ton e.pol_ak_id=substring(a.PremiumTransactionKey,1,charindex('~',a.PremiumTransactionKey,1)-1)\r\n\t\t--SUBSTRING(a.PremiumTransactionKey,1,8)\r\n\t\tand e.crrnt_snpsht_flag=1 and e.source_sys_id='DCT' and A.SourceSystemID='DCT'\r\n\t\tinner join (select distinct W.PolicyNumber+RIGHT('0'+CONVERT(VARCHAR(2),ISNULL(W.PolicyVersion,0)),2) Policykey from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy W) W\r\n\t\ton e.pol_key=W.Policykey\r\n\t\tWHERE\r\n\t\ta.SourceSystemID='DCT'\r\n\t\tand a.OffsetOnsetCode <> 'Deprecated'\r\n\t\tand charindex('~',a.PremiumTransactionKey,1)>0\r\n\t\tand len(substring(a.PremiumTransactionKey,1,charindex('~',a.PremiumTransactionKey,1)-1))>0\r\n\t\tand a.ReasonAmendedCode  NOT IN  ( 'CWO','Claw Back')\r\n\t\tand PremiumTransactionCode not in ('RetrospectiveCalculation') \r\n\t\t) CO\r\n\t\twhere SEQ=1\r\n\t\tORDER BY PolicyAKId,PremiumTransactionCode--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId ORDER BY PremiumTransactionCode) = 1\n),\nSQ_DCLimitStaging AS (\n\tWITH DCPolicy AS(\r\n\tSELECT C.pol_ak_id,\r\n\tC.pol_key,\r\n\tA.PolicyId,\r\n\tA.SessionId,\r\n\tA.Auditable\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging A\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBPolicyStaging B\r\n\tON A.PolicyId=B.PolicyId\r\n\tAND A.SessionId=B.SessionId\r\n\tAND A.Status<>'Quote'\r\n\tJOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy C\r\n\tON C.pol_key=A.PolicyNumber+RIGHT('0'+CONVERT(VARCHAR(2),ISNULL(PolicyVersion,0)),2)\r\n\tAND C.crrnt_snpsht_flag=1)\r\n\tselect d.pol_ak_id as PolicyAKId,\r\n\tc.Type as InsuranceLine,\r\n\te.AssignedAuditor,\r\n\te.AuditType,\r\n\ta.AuditPeriod,\r\n\te.HasCorrespondingFrontingPolicy,\r\n\te.AuditTypePolicyPeriodOverride,\r\n\te.AuditTypePermanentOverride,\r\n\te.AssignedAuditorPolicyPeriodOverride,\r\n\te.AssignedAuditorPermanentOverride,\r\n\te.CloseAudit,\r\n\tISNULL(f.TransactionDate,f.CreatedDate),\r\n\td.pol_key,\r\n\tcase when d.Auditable=1 and a.IsAuditable=1 then '1' else '0' end as IsAuditable,\r\n\tcase when a.IsAuditable=1 then '1' else '0' \r\n\tend as LineAuditable,\r\n\tdcl.City,\r\n\tdcl.StateProv,\r\n\te.AuditablePremium,\r\n\tf.Type,\r\n\te.NoncomplianceofWCPoolAudit\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCLLineStage a\r\n\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLineStaging b\r\n\ton a.WBLineId=b.WB_LineId\r\n\tand a.SessionId=b.SessionId\r\n\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging c\r\n\ton b.LineId=c.LineId\r\n\tand b.SessionId=c.SessionId\r\n\tinner hash join DCPolicy d\r\n\ton c.PolicyId=d.PolicyId\r\n\tand c.SessionId=d.SessionId\r\n\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBCLPolicyStage e\r\n\ton d.SessionId=e.SessionId\r\n\tinner hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging f\r\n\ton f.SessionId=a.SessionId\r\n\tand f.State='committed'\r\n\tand not exists (\r\n\tselect 1 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging g\r\n\twhere f.SessionId=g.SessionId\r\n\tand g.HistoryId>f.HistoryId)\r\n\tleft hash join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging dcl\r\n\ton f.SessionId=dcl.SessionId\r\n\tand dcl.Description='Audit'\r\n\twhere f.Type @{pipeline().parameters.EXCLUDE_SQ_TTYPE}\r\n\torder by d.pol_ak_id,c.Type,f.CreatedDate,a.SessionId\n),\nEXP_UnderlyingInfo AS (\n\tSELECT\n\tPolicyAKId AS i_PolicyAKId,\n\tInsuranceLine AS i_InsuranceLine,\n\tAssignedAuditor AS i_AssignedAuditor,\n\tAuditType AS i_AuditType,\n\tAuditPeriod AS i_AuditPeriod,\n\tHasCorrespondingFrontingPolicy AS i_HasCorrespondingFrontingPolicy,\n\tAuditTypePolicyPeriodOverride AS i_AuditTypePolicyPeriodOverride,\n\tAuditTypePermanentOverride AS i_AuditTypePermanentOverride,\n\tAssignedAuditorPolicyPeriodOverride AS i_AssignedAuditorPolicyPeriodOverride,\n\tAssignedAuditorPermanentOverride AS i_AssignedAuditorPermanentOverride,\n\tCloseAudit AS i_CloseAudit,\n\tCreatedDate AS i_CreatedDate,\n\tPolicyKey AS i_PolicyKey,\n\tIsAuditable AS i_IsAuditable,\n\tLineAuditable AS i_LineAuditable,\n\tCity AS i_City,\n\tStateProv AS i_StateProv,\n\tAuditablePremium AS i_AuditablePremium,\n\t-- *INF*: IIF(i_IsAuditable='1', NULL, :LKP.LKP_WBCLLINESTAGE(i_PolicyKey,i_InsuranceLine,i_CreatedDate))\n\tIFF(i_IsAuditable = '1', NULL, LKP_WBCLLINESTAGE_i_PolicyKey_i_InsuranceLine_i_CreatedDate.IsAuditable) AS v_StagePrevAuditableFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_IsAuditable='1', NULL,\r\n\t-- NOT ISNULL(v_StagePrevAuditableFlag), v_StagePrevAuditableFlag,\r\n\t-- :LKP.LKP_EDWAUDITSTATUS(i_PolicyKey,i_InsuranceLine,i_CreatedDate))\n\tDECODE(TRUE,\n\ti_IsAuditable = '1', NULL,\n\tNOT v_StagePrevAuditableFlag IS NULL, v_StagePrevAuditableFlag,\n\tLKP_EDWAUDITSTATUS_i_PolicyKey_i_InsuranceLine_i_CreatedDate.AuditableFlag) AS v_EDWPrevAuditableFlag,\n\t-- *INF*: IIF(v_EDWPrevAuditableFlag='T','1',v_EDWPrevAuditableFlag)\n\tIFF(v_EDWPrevAuditableFlag = 'T', '1', v_EDWPrevAuditableFlag) AS v_PrevAuditableFlag,\n\t-- *INF*: :LKP.LKP_LATESTPREMIUMTRANSACTION(i_PolicyAKId)\n\tLKP_LATESTPREMIUMTRANSACTION_i_PolicyAKId.PremiumTransactionCode AS v_AuditStatus,\n\tType,\n\tNoncomplianceofWCPoolAudit,\n\ti_PolicyAKId AS o_PolicyAKId,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_InsuranceLine)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_InsuranceLine) AS o_InsuranceLine,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_AssignedAuditor)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_AssignedAuditor) AS o_AssignedAuditor,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_AuditPeriod)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_AuditPeriod) AS o_AuditFrequency,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_AuditType)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_AuditType) AS o_AuditType,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_City)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_City) AS o_AuditContactCity,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_StateProv)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_StateProv) AS o_AuditContactStateAbbreviation,\n\t-- *INF*: IIF(NOT ISNULL(i_CreatedDate),i_CreatedDate,TO_DATE('1800-1-1','YYYY-MM-DD'))\n\tIFF(NOT i_CreatedDate IS NULL, i_CreatedDate, TO_DATE('1800-1-1', 'YYYY-MM-DD')) AS o_CreatedDate,\n\t-- *INF*: DECODE(i_AuditTypePermanentOverride,'T','1','F','0','0')\n\tDECODE(i_AuditTypePermanentOverride,\n\t'T', '1',\n\t'F', '0',\n\t'0') AS o_PermanentOverrideFlag,\n\t-- *INF*: DECODE(i_AuditTypePolicyPeriodOverride,'T','1','F','0','0')\n\tDECODE(i_AuditTypePolicyPeriodOverride,\n\t'T', '1',\n\t'F', '0',\n\t'0') AS o_PolicyPeriodOverrideFlag,\n\t-- *INF*: DECODE(i_HasCorrespondingFrontingPolicy,'T','1','F','0','0')\n\tDECODE(i_HasCorrespondingFrontingPolicy,\n\t'T', '1',\n\t'F', '0',\n\t'0') AS o_FrontingPolicyFlag,\n\t-- *INF*: DECODE(i_CloseAudit,'T','1','F','0','0')\n\tDECODE(i_CloseAudit,\n\t'T', '1',\n\t'F', '0',\n\t'0') AS o_AuditCloseOutFlag,\n\t-- *INF*: IIF(IN(LTRIM(RTRIM(v_AuditStatus)),'FinalAudit','RevisedFinalAudit'),'Completed','NotCompleted')\r\n\t-- \r\n\t-- --IIF(IN(LTRIM(RTRIM(:LKP.LKP_LATESTPREMIUMTRANSACTION(i_PolicyAKId))),'FinalAudit','RevisedFinalAudit'),'Completed','NotCompleted')\r\n\t-- \r\n\t-- \n\tIFF(IN(LTRIM(RTRIM(v_AuditStatus)), 'FinalAudit', 'RevisedFinalAudit'), 'Completed', 'NotCompleted') AS o_AuditStatus,\n\ti_IsAuditable AS o_AuditableFlag,\n\ti_LineAuditable AS o_LineAuditableFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_AssignedAuditorPolicyPeriodOverride='T' AND i_AssignedAuditorPermanentOverride='T','PERM',\r\n\t-- i_AssignedAuditorPolicyPeriodOverride='T','POL',\r\n\t-- i_AssignedAuditorPermanentOverride='T','PERM',\r\n\t-- '')\n\tDECODE(TRUE,\n\ti_AssignedAuditorPolicyPeriodOverride = 'T' AND i_AssignedAuditorPermanentOverride = 'T', 'PERM',\n\ti_AssignedAuditorPolicyPeriodOverride = 'T', 'POL',\n\ti_AssignedAuditorPermanentOverride = 'T', 'PERM',\n\t'') AS o_AssignedAuditorOverideFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_AuditTypePolicyPeriodOverride='T' AND i_AuditTypePermanentOverride='T','PERM',\r\n\t-- i_AuditTypePolicyPeriodOverride='T','POL',\r\n\t-- i_AuditTypePermanentOverride='T','PERM',\r\n\t-- '')\n\tDECODE(TRUE,\n\ti_AuditTypePolicyPeriodOverride = 'T' AND i_AuditTypePermanentOverride = 'T', 'PERM',\n\ti_AuditTypePolicyPeriodOverride = 'T', 'POL',\n\ti_AuditTypePermanentOverride = 'T', 'PERM',\n\t'') AS o_AuditTypeOverrideFlag,\n\t-- *INF*: IIF(NOT ISNULL(i_AuditablePremium),ROUND(i_AuditablePremium,4),0)\n\tIFF(NOT i_AuditablePremium IS NULL, ROUND(i_AuditablePremium, 4), 0) AS o_AuditablePremium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_IsAuditable='1' OR i_LineAuditable='1', '1',\r\n\t-- v_PrevAuditableFlag='1' OR i_LineAuditable='1', '1',\r\n\t-- '0')\n\tDECODE(TRUE,\n\ti_IsAuditable = '1' OR i_LineAuditable = '1', '1',\n\tv_PrevAuditableFlag = '1' OR i_LineAuditable = '1', '1',\n\t'0') AS o_FilterFlag\n\tFROM SQ_DCLimitStaging\n\tLEFT JOIN LKP_WBCLLINESTAGE LKP_WBCLLINESTAGE_i_PolicyKey_i_InsuranceLine_i_CreatedDate\n\tON LKP_WBCLLINESTAGE_i_PolicyKey_i_InsuranceLine_i_CreatedDate.PolicyKey = i_PolicyKey\n\tAND LKP_WBCLLINESTAGE_i_PolicyKey_i_InsuranceLine_i_CreatedDate.InsuranceLine = i_InsuranceLine\n\tAND LKP_WBCLLINESTAGE_i_PolicyKey_i_InsuranceLine_i_CreatedDate.CreatedDate = i_CreatedDate\n\n\tLEFT JOIN LKP_EDWAUDITSTATUS LKP_EDWAUDITSTATUS_i_PolicyKey_i_InsuranceLine_i_CreatedDate\n\tON LKP_EDWAUDITSTATUS_i_PolicyKey_i_InsuranceLine_i_CreatedDate.PolicyAKId = i_PolicyKey\n\tAND LKP_EDWAUDITSTATUS_i_PolicyKey_i_InsuranceLine_i_CreatedDate.InsuranceLine = i_InsuranceLine\n\tAND LKP_EDWAUDITSTATUS_i_PolicyKey_i_InsuranceLine_i_CreatedDate.EffectiveDate = i_CreatedDate\n\n\tLEFT JOIN LKP_LATESTPREMIUMTRANSACTION LKP_LATESTPREMIUMTRANSACTION_i_PolicyAKId\n\tON LKP_LATESTPREMIUMTRANSACTION_i_PolicyAKId.PolicyAKId = i_PolicyAKId\n\n),\nFILTRANS AS (\n\tSELECT\n\tType, \n\tNoncomplianceofWCPoolAudit, \n\to_PolicyAKId AS PolicyAKId, \n\to_InsuranceLine AS InsuranceLine, \n\to_AssignedAuditor AS AssignedAuditor, \n\to_AuditFrequency AS AuditFrequency, \n\to_AuditType AS AuditType, \n\to_AuditContactCity AS AuditContactCity, \n\to_AuditContactStateAbbreviation AS AuditContactStateAbbreviation, \n\to_CreatedDate AS CreatedDate, \n\to_PermanentOverrideFlag AS PermanentOverrideFlag, \n\to_PolicyPeriodOverrideFlag AS PolicyPeriodOverrideFlag, \n\to_FrontingPolicyFlag AS FrontingPolicyFlag, \n\to_AuditCloseOutFlag AS AuditCloseOutFlag, \n\to_AuditStatus AS AuditStatus, \n\to_AuditableFlag AS AuditableFlag, \n\to_LineAuditableFlag AS LineAuditableFlag, \n\to_AssignedAuditorOverideFlag AS AssignedAuditorOverideFlag, \n\to_AuditTypeOverrideFlag AS AuditTypeOverrideFlag, \n\to_AuditablePremium AS AuditablePremium, \n\to_FilterFlag AS FilterFlag\n\tFROM EXP_UnderlyingInfo\n\tWHERE FilterFlag='1'\n),\nAGGTRANS AS (\n\tSELECT\n\tType, \n\tNoncomplianceofWCPoolAudit, \n\tPolicyAKId, \n\tInsuranceLine, \n\tAssignedAuditor, \n\tAuditFrequency, \n\tAuditType, \n\tAuditContactCity, \n\tAuditContactStateAbbreviation, \n\tCreatedDate, \n\tPermanentOverrideFlag, \n\tPolicyPeriodOverrideFlag, \n\tFrontingPolicyFlag, \n\tAuditCloseOutFlag, \n\tAuditStatus, \n\tAuditableFlag, \n\tLineAuditableFlag, \n\tAssignedAuditorOverideFlag, \n\tAuditTypeOverrideFlag, \n\tAuditablePremium\n\tFROM FILTRANS\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId, InsuranceLine, CreatedDate ORDER BY NULL) = 1\n),\nLKP_PolicyAudit AS (\n\tSELECT\n\tPolicyAuditId,\n\tPolicyAuditAKId,\n\tHashValue,\n\tAuditablePremium,\n\tEffectiveDate,\n\tIsAuditableFlag,\n\tNoncomplianceofWCPoolAudit,\n\tPolicyAKId,\n\tInsuranceLine,\n\tExpirationDate\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyAuditId,\n\t\t\tPolicyAuditAKId,\n\t\t\tHashValue,\n\t\t\tAuditablePremium,\n\t\t\tEffectiveDate,\n\t\t\tIsAuditableFlag,\n\t\t\tNoncomplianceofWCPoolAudit,\n\t\t\tPolicyAKId,\n\t\t\tInsuranceLine,\n\t\t\tExpirationDate\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,InsuranceLine,EffectiveDate,ExpirationDate ORDER BY PolicyAuditId) = 1\n),\nSEQ_PolicyAuditStatus AS (\n\tCREATE SEQUENCE SEQ_PolicyAuditStatus\n\tSTART = 1\n\tINCREMENT = 1;\n),\nEXPTRANS AS (\n\tSELECT\n\tLKP_PolicyAudit.PolicyAuditId AS lkp_PolicyAuditId,\n\tLKP_PolicyAudit.PolicyAuditAKId AS lkp_PolicyAuditAKId,\n\tLKP_PolicyAudit.HashValue AS lkp_HashKey,\n\tLKP_PolicyAudit.AuditablePremium AS lkp_AuditablePremium,\n\tLKP_PolicyAudit.EffectiveDate AS lkp_EffectiveDate,\n\tLKP_PolicyAudit.IsAuditableFlag AS lkp_IsAuditableFlag,\n\tLKP_PolicyAudit.NoncomplianceofWCPoolAudit AS lkp_NoncomplianceofWCPoolAudit,\n\tSEQ_PolicyAuditStatus.NEXTVAL AS i_NEXTVAL,\n\tAGGTRANS.CreatedDate AS i_CreatedDate,\n\tAGGTRANS.Type AS i_Type,\n\tAGGTRANS.NoncomplianceofWCPoolAudit AS i_NoncomplianceofWCPoolAudit,\n\t-- *INF*: DECODE(i_NoncomplianceofWCPoolAudit, 'T', '1', 'F', '0', NULL)\n\tDECODE(i_NoncomplianceofWCPoolAudit,\n\t'T', '1',\n\t'F', '0',\n\tNULL) AS o_NoncomplianceofWCPoolAudit,\n\tAGGTRANS.PolicyAKId,\n\tAGGTRANS.InsuranceLine,\n\tAGGTRANS.AssignedAuditor,\n\tAGGTRANS.AuditFrequency,\n\tAGGTRANS.AuditType,\n\tAGGTRANS.AuditContactCity,\n\tAGGTRANS.AuditContactStateAbbreviation,\n\tAGGTRANS.PermanentOverrideFlag,\n\tAGGTRANS.PolicyPeriodOverrideFlag,\n\tAGGTRANS.FrontingPolicyFlag,\n\tAGGTRANS.AuditCloseOutFlag,\n\tAGGTRANS.AuditStatus,\n\tAGGTRANS.AuditableFlag,\n\tAGGTRANS.LineAuditableFlag,\n\tAGGTRANS.AssignedAuditorOverideFlag,\n\tAGGTRANS.AuditTypeOverrideFlag,\n\tAGGTRANS.AuditablePremium,\n\t-- *INF*: DECODE(lkp_IsAuditableFlag,'T',1,'F',0,'1',1,'0',0,0)\r\n\t-- \n\tDECODE(lkp_IsAuditableFlag,\n\t'T', 1,\n\t'F', 0,\n\t'1', 1,\n\t'0', 0,\n\t0) AS v_lkp_IsAuditableFlag,\n\t-- *INF*: DECODE(LineAuditableFlag,'T',1,'F',0,'1',1,'0',0,0)\n\tDECODE(LineAuditableFlag,\n\t'T', 1,\n\t'F', 0,\n\t'1', 1,\n\t'0', 0,\n\t0) AS v_LineAuditableFlag,\n\t-- *INF*: MD5(AssignedAuditor||\r\n\t-- AuditFrequency||\r\n\t-- AuditType||\r\n\t-- AuditContactCity||\r\n\t-- AuditContactStateAbbreviation||\r\n\t-- PermanentOverrideFlag||\r\n\t-- PolicyPeriodOverrideFlag||\r\n\t-- FrontingPolicyFlag||\r\n\t-- AuditStatus||\r\n\t-- AuditCloseOutFlag||\r\n\t-- AssignedAuditorOverideFlag||\r\n\t-- AuditTypeOverrideFlag||\r\n\t-- i_Type||\r\n\t-- TO_CHAR(AuditablePremium)||i_NoncomplianceofWCPoolAudit)\n\tMD5(AssignedAuditor || AuditFrequency || AuditType || AuditContactCity || AuditContactStateAbbreviation || PermanentOverrideFlag || PolicyPeriodOverrideFlag || FrontingPolicyFlag || AuditStatus || AuditCloseOutFlag || AssignedAuditorOverideFlag || AuditTypeOverrideFlag || i_Type || TO_CHAR(AuditablePremium) || i_NoncomplianceofWCPoolAudit) AS v_HashKey,\n\t-- *INF*: DECODE(TRUE,PolicyAKId=v_prev_PolicyAKId AND InsuranceLine=v_prev_InsuranceLine AND v_HashKey=v_prev_HashKey AND\r\n\t-- v_LineAuditableFlag=v_prev_LineAuditableFlag,0,\r\n\t-- ISNULL(lkp_PolicyAuditAKId),1,\r\n\t-- (lkp_HashKey!=v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag) AND IN(i_Type,'New','Renew','Reissue','Rewrite'),2,\r\n\t-- (lkp_HashKey!=v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag) AND lkp_EffectiveDate=i_CreatedDate,2,\r\n\t-- (lkp_HashKey!=v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag) AND PolicyAKId=v_prev_PolicyAKId AND InsuranceLine=v_prev_InsuranceLine,3,\r\n\t-- (lkp_HashKey!=v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag) AND ISNULL(lkp_AuditablePremium),2,\r\n\t-- (lkp_HashKey!=v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag),3,\r\n\t-- lkp_HashKey=v_HashKey and lkp_EffectiveDate != i_CreatedDate,3,\r\n\t-- 0)\n\tDECODE(TRUE,\n\tPolicyAKId = v_prev_PolicyAKId AND InsuranceLine = v_prev_InsuranceLine AND v_HashKey = v_prev_HashKey AND v_LineAuditableFlag = v_prev_LineAuditableFlag, 0,\n\tlkp_PolicyAuditAKId IS NULL, 1,\n\t( lkp_HashKey != v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag ) AND IN(i_Type, 'New', 'Renew', 'Reissue', 'Rewrite'), 2,\n\t( lkp_HashKey != v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag ) AND lkp_EffectiveDate = i_CreatedDate, 2,\n\t( lkp_HashKey != v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag ) AND PolicyAKId = v_prev_PolicyAKId AND InsuranceLine = v_prev_InsuranceLine, 3,\n\t( lkp_HashKey != v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag ) AND lkp_AuditablePremium IS NULL, 2,\n\t( lkp_HashKey != v_HashKey OR v_lkp_IsAuditableFlag != v_LineAuditableFlag ), 3,\n\tlkp_HashKey = v_HashKey AND lkp_EffectiveDate != i_CreatedDate, 3,\n\t0) AS v_ChangeFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- PolicyAKId=v_prev_PolicyAKId AND InsuranceLine=v_prev_InsuranceLine,v_PolicyAuditAKId,\r\n\t-- v_ChangeFlag=1,i_NEXTVAL,\r\n\t-- lkp_PolicyAuditAKId)\n\tDECODE(TRUE,\n\tPolicyAKId = v_prev_PolicyAKId AND InsuranceLine = v_prev_InsuranceLine, v_PolicyAuditAKId,\n\tv_ChangeFlag = 1, i_NEXTVAL,\n\tlkp_PolicyAuditAKId) AS v_PolicyAuditAKId,\n\tPolicyAKId AS v_prev_PolicyAKId,\n\tInsuranceLine AS v_prev_InsuranceLine,\n\tv_HashKey AS v_prev_HashKey,\n\tv_LineAuditableFlag AS v_prev_LineAuditableFlag,\n\tv_ChangeFlag AS o_ChangeFlag,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditId,\n\ti_CreatedDate AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('21001231235959','YYYYMMDDHH24MISS')\n\tTO_DATE('21001231235959', 'YYYYMMDDHH24MISS') AS o_ExpirationDate,\n\t'DCT' AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\tv_HashKey AS o_HashKey,\n\tv_PolicyAuditAKId AS o_PolicyAuditAKId\n\tFROM AGGTRANS\n\tLEFT JOIN LKP_PolicyAudit\n\tON LKP_PolicyAudit.PolicyAKId = AGGTRANS.PolicyAKId AND LKP_PolicyAudit.InsuranceLine = AGGTRANS.InsuranceLine AND LKP_PolicyAudit.EffectiveDate <= AGGTRANS.CreatedDate AND LKP_PolicyAudit.ExpirationDate >= AGGTRANS.CreatedDate\n),\nRTR_Insert AS (\n\tSELECT\n\tlkp_PolicyAuditId,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_AuditId AS AuditId,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_SourceSystemID AS SourceSystemId,\n\to_CreatedDate AS CreatedDate,\n\to_ModifiedDate AS ModifiedDate,\n\to_HashKey AS HashKey,\n\to_PolicyAuditAKId AS PolicyAuditAKId,\n\to_NoncomplianceofWCPoolAudit AS NoncomplianceofWCPoolAudit,\n\tPolicyAKId,\n\tInsuranceLine,\n\tAssignedAuditor,\n\tAuditFrequency,\n\tAuditType,\n\tAuditContactCity,\n\tAuditContactStateAbbreviation,\n\tPermanentOverrideFlag,\n\tPolicyPeriodOverrideFlag,\n\tFrontingPolicyFlag,\n\tAuditCloseOutFlag,\n\tAuditStatus,\n\tAuditableFlag,\n\tAssignedAuditorOverideFlag,\n\tAuditTypeOverrideFlag,\n\tAuditablePremium,\n\tLineAuditableFlag AS IsAuditableFlag,\n\to_ChangeFlag AS ChangeFlag\n\tFROM EXPTRANS\n),\nRTR_Insert_INSERT AS (SELECT * FROM RTR_Insert WHERE IN(ChangeFlag,1,3)),\nRTR_Insert_UPDATE AS (SELECT * FROM RTR_Insert WHERE ChangeFlag=2),\nTGT_PolicyAudit_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit\n\t(CurrentSnapshotFlag, AuditId, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, HashValue, PolicyAuditAKId, PolicyAKId, InsuranceLine, AssignedAuditor, AuditFrequency, AuditType, AuditContactCity, AuditContactStateAbbreviation, PermanentOverrideFlag, PolicyPeriodOverrideFlag, FrontingPolicyFlag, AuditCloseOutFlag, AuditStatus, AuditableFlag, AssignedAuditorOveride, AuditTypeOverride, AuditablePremium, IsAuditableFlag, NoncomplianceofWCPoolAudit)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tHashKey AS HASHVALUE, \n\tPOLICYAUDITAKID, \n\tPOLICYAKID, \n\tINSURANCELINE, \n\tASSIGNEDAUDITOR, \n\tAUDITFREQUENCY, \n\tAUDITTYPE, \n\tAUDITCONTACTCITY, \n\tAUDITCONTACTSTATEABBREVIATION, \n\tPERMANENTOVERRIDEFLAG, \n\tPOLICYPERIODOVERRIDEFLAG, \n\tFRONTINGPOLICYFLAG, \n\tAUDITCLOSEOUTFLAG, \n\tAUDITSTATUS, \n\tAUDITABLEFLAG, \n\tAssignedAuditorOverideFlag AS ASSIGNEDAUDITOROVERIDE, \n\tAuditTypeOverrideFlag AS AUDITTYPEOVERRIDE, \n\tAUDITABLEPREMIUM, \n\tISAUDITABLEFLAG, \n\tNONCOMPLIANCEOFWCPOOLAUDIT\n\tFROM RTR_Insert_INSERT\n),\nUPD_CodeChange AS (\n\tSELECT\n\tlkp_PolicyAuditId AS PolicyAuditId, \n\tCurrentSnapshotFlag, \n\tAuditId, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemId, \n\tCreatedDate, \n\tModifiedDate, \n\tHashKey AS HashValue, \n\tPolicyAuditAKId, \n\tPolicyAKId, \n\tInsuranceLine, \n\tAssignedAuditor, \n\tAuditFrequency, \n\tAuditType, \n\tAuditContactCity, \n\tAuditContactStateAbbreviation, \n\tPermanentOverrideFlag, \n\tPolicyPeriodOverrideFlag, \n\tFrontingPolicyFlag, \n\tAuditCloseOutFlag, \n\tAuditStatus, \n\tAuditableFlag, \n\tAssignedAuditorOverideFlag AS AssignedAuditorOveride, \n\tAuditTypeOverrideFlag AS AuditTypeOverride, \n\tAuditablePremium, \n\tIsAuditableFlag, \n\tNoncomplianceofWCPoolAudit\n\tFROM RTR_Insert_UPDATE\n),\nTGT_PolicyAudit_CodeChange AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit AS T\n\tUSING UPD_CodeChange AS S\n\tON T.PolicyAuditId = S.PolicyAuditId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate, T.HashValue = S.HashValue, T.AssignedAuditor = S.AssignedAuditor, T.AuditFrequency = S.AuditFrequency, T.AuditType = S.AuditType, T.AuditContactCity = S.AuditContactCity, T.AuditContactStateAbbreviation = S.AuditContactStateAbbreviation, T.PermanentOverrideFlag = S.PermanentOverrideFlag, T.PolicyPeriodOverrideFlag = S.PolicyPeriodOverrideFlag, T.FrontingPolicyFlag = S.FrontingPolicyFlag, T.AuditCloseOutFlag = S.AuditCloseOutFlag, T.AuditStatus = S.AuditStatus, T.AuditableFlag = S.AuditableFlag, T.AssignedAuditorOveride = S.AssignedAuditorOveride, T.AuditTypeOverride = S.AuditTypeOverride, T.AuditablePremium = S.AuditablePremium, T.IsAuditableFlag = S.IsAuditableFlag, T.NoncomplianceofWCPoolAudit = S.NoncomplianceofWCPoolAudit\n),\nSQ_PolicyAudit AS (\n\tSELECT \r\n\t\ta.PolicyAuditId, \r\n\t\ta.EffectiveDate,\r\n\t\ta.ExpirationDate, \r\n\t\ta.PolicyAuditAKId\r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit a\r\n\tWHERE\r\n\tPolicyAuditAKId  IN\r\n\t\t( SELECT PolicyAuditAKId  FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit\r\n\t\tWHERE CurrentSnapshotFlag = 1 GROUP BY PolicyAuditAKId HAVING count(*) > 1) \r\n\tAND SourceSystemID='DCT'\r\n\tORDER BY a.PolicyAuditAKId,a.EffectiveDate DESC,a.PolicyAuditId DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tPolicyAuditAKId AS i_PolicyAuditAKId,\n\tEffectiveDate AS eff_from_date,\n\tExpirationDate AS orig_eff_to_date,\n\tPolicyAuditId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_PolicyAuditAKId = v_prev_PolicyAuditAKId ,\r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\ti_PolicyAuditAKId = v_prev_PolicyAuditAKId, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\ti_PolicyAuditAKId AS v_prev_PolicyAuditAKId,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS out_crrnt_snpsht_flag,\n\tv_eff_to_date AS out_eff_to_date,\n\tSYSDATE AS out_modified_date\n\tFROM SQ_PolicyAudit\n),\nFIL_FirstRow AS (\n\tSELECT\n\torig_eff_to_date AS i_orig_eff_to_date, \n\tPolicyAuditId, \n\tout_crrnt_snpsht_flag AS crrnt_snpsht_flag, \n\tout_eff_to_date AS eff_to_date, \n\tout_modified_date AS modified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE i_orig_eff_to_date != eff_to_date\n),\nUPD_policy AS (\n\tSELECT\n\tPolicyAuditId, \n\tcrrnt_snpsht_flag, \n\teff_to_date, \n\tmodified_date\n\tFROM FIL_FirstRow\n),\nTGT_PolicyAudit_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyAudit AS T\n\tUSING UPD_policy AS S\n\tON T.PolicyAuditId = S.PolicyAuditId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.crrnt_snpsht_flag, T.ExpirationDate = S.eff_to_date, T.ModifiedDate = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "EXCLUDE_SQ_TTYPE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}