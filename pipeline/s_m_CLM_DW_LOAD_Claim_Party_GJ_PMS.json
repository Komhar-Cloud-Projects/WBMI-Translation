{
    "name": "s_m_CLM_DW_LOAD_Claim_Party_GJ_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_GJ_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Sup_State AS (\n\tSELECT\n\tsup_state_id,\n\tstate_code\n\tFROM (\n\t\tSELECT \r\n\t\ta.sup_state_id as sup_state_id, \r\n\t\ta.state_code as state_code \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_state a\r\n\t\tWHERE \r\n\t\tcrrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY state_code ORDER BY sup_state_id) = 1\n),\nSQ_PIF_42GJ_stage AS (\n\tSELECT \r\n\tPIF_42GJ_stage.PIF_SYMBOL, \r\n\tPIF_42GJ_stage.PIF_POLICY_NUMBER, \r\n\tPIF_42GJ_stage.PIF_MODULE, \r\n\t(PIF_SYMBOL + PIF_POLICY_NUMBER + PIF_MODULE + \r\n\tCASE len(IPFC4J_LOSS_MONTH) when 1 THEN '0' + CAST(IPFC4J_LOSS_MONTH AS VARCHAR) ELSE CAST(IPFC4J_LOSS_MONTH AS VARCHAR) END + \r\n\tCASE len(IPFC4J_LOSS_DAY) when 1 THEN '0' + CAST(IPFC4J_LOSS_DAY AS VARCHAR) ELSE CAST(IPFC4J_LOSS_DAY AS VARCHAR) END +\r\n\tCAST(IPFC4J_LOSS_YEAR AS VARCHAR) +\r\n\tCAST(IPFC4J_LOSS_OCCURENCE AS VARCHAR) + \r\n\tCAST(IPFC4J_LOSS_CLAIMANT AS VARCHAR) + IPFC4J_USE_CODE) as  IPFC4J_ACTION_CODE, \r\n\tPIF_42GJ_stage.IPFC4J_LOSS_YEAR, \r\n\tPIF_42GJ_stage.IPFC4J_LOSS_MONTH, \r\n\tPIF_42GJ_stage.IPFC4J_LOSS_DAY, \r\n\tPIF_42GJ_stage.IPFC4J_LOSS_OCCURENCE, \r\n\tPIF_42GJ_stage.IPFC4J_LOSS_CLAIMANT, \r\n\tPIF_42GJ_stage.IPFC4J_ADDRESS_LINE_1, \r\n\tPIF_42GJ_stage.IPFC4J_ADDR_LIN_2_POS_1, \r\n\tPIF_42GJ_stage.IPFC4J_ADDR_LIN_2_POS_2_30, \r\n\tPIF_42GJ_stage.IPFC4J_ADDRESS_LINE_3, \r\n\tPIF_42GJ_stage.IPFC4J_ADDRESS_LINE_4, \r\n\tPIF_42GJ_STAGE.IPFC4J_ID_NUMBER,\r\n\tPIF_42GJ_stage.IPFC4J_ZIP_BASIC, \r\n\tPIF_42GJ_stage.IPFC4J_ZIP_EXPANDED , \r\n\tPIF_42GJ_STAGE.LOGICAL_FLAG \r\n\tFROM\r\n\t @{pipeline().parameters.SOURCE_TABLE_OWNER}.PIF_42GJ_STAGE\r\n\tWHERE\r\n\tIPFC4J_USE_CODE IN ('CMT','DRV','PS','HS','UNL')\r\n\tAND PIF_42GJ_STAGE.LOGICAL_FLAG  IN ('0','1','5')\n),\nEXP_Values AS (\n\tSELECT\n\tIPFC4J_ACTION_CODE AS CLIENT_ID,\n\tIPFC4J_ADDRESS_LINE_1,\n\tIPFC4J_ADDR_LIN_2_POS_1,\n\tIPFC4J_ADDR_LIN_2_POS_2_30,\n\t-- *INF*: DECODE (IPFC4J_ADDR_LIN_2_POS_1,\r\n\t-- 'E' , IPFC4J_ADDR_LIN_2_POS_1  || ' '  || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\r\n\t-- 'W' , IPFC4J_ADDR_LIN_2_POS_1  || ' '  || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\r\n\t-- 'N' , IPFC4J_ADDR_LIN_2_POS_1  || ' '  || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\r\n\t-- 'S' , IPFC4J_ADDR_LIN_2_POS_1  || ' '  || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\r\n\t-- IPFC4J_ADDR_LIN_2_POS_1  || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30))\r\n\t-- \n\tDECODE(\n\t    IPFC4J_ADDR_LIN_2_POS_1,\n\t    'E', IPFC4J_ADDR_LIN_2_POS_1 || ' ' || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\n\t    'W', IPFC4J_ADDR_LIN_2_POS_1 || ' ' || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\n\t    'N', IPFC4J_ADDR_LIN_2_POS_1 || ' ' || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\n\t    'S', IPFC4J_ADDR_LIN_2_POS_1 || ' ' || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30),\n\t    IPFC4J_ADDR_LIN_2_POS_1 || RTRIM(IPFC4J_ADDR_LIN_2_POS_2_30)\n\t) AS v_IPFC4J_ADDR_LIN_2,\n\t-- *INF*: IIF(ISNULL(in_IPFC4J_ADDRESS_LINE_3), \r\n\t-- v_IPFC4J_ADDR_LIN_2, \r\n\t-- v_IPFC4J_ADDR_LIN_2  || ' '\r\n\t-- )\n\tIFF(in_IPFC4J_ADDRESS_LINE_3 IS NULL, v_IPFC4J_ADDR_LIN_2, v_IPFC4J_ADDR_LIN_2 || ' ') AS v_ADDR_LIN_2,\n\tIPFC4J_ADDRESS_LINE_3 AS in_IPFC4J_ADDRESS_LINE_3,\n\t-- *INF*: IIF(ISNULL(IPFC4J_ADDRESS_LINE_4), \r\n\t-- RTRIM(in_IPFC4J_ADDRESS_LINE_3), \r\n\t-- RTRIM(in_IPFC4J_ADDRESS_LINE_3)  || ' '\r\n\t-- )\n\tIFF(\n\t    IPFC4J_ADDRESS_LINE_4 IS NULL, RTRIM(in_IPFC4J_ADDRESS_LINE_3),\n\t    RTRIM(in_IPFC4J_ADDRESS_LINE_3) || ' '\n\t) AS v_ADDRESS_LINE_3,\n\tIPFC4J_ADDRESS_LINE_4,\n\t-- *INF*: IIF(\r\n\t-- ISNULL(IPFC4J_ADDRESS_LINE_1), 'N/A',\r\n\t-- v_ADDR_LIN_2 || v_ADDRESS_LINE_3 || RTRIM(IPFC4J_ADDRESS_LINE_4))\n\tIFF(\n\t    IPFC4J_ADDRESS_LINE_1 IS NULL, 'N/A',\n\t    v_ADDR_LIN_2 || v_ADDRESS_LINE_3 || RTRIM(IPFC4J_ADDRESS_LINE_4)\n\t) AS IPFC4J_ADDRESS,\n\tIPFC4J_ZIP_BASIC,\n\tIPFC4J_ZIP_EXPANDED,\n\t-- *INF*: IIF(\r\n\t-- (ISNULL(IPFC4J_ZIP_BASIC) OR LENGTH(RTRIM(IPFC4J_ZIP_BASIC)) = 0),\r\n\t-- 'N/A',\r\n\t-- IPFC4J_ZIP_BASIC || '-'  || to_char(IPFC4J_ZIP_EXPANDED))\n\tIFF(\n\t    (IPFC4J_ZIP_BASIC IS NULL OR LENGTH(RTRIM(IPFC4J_ZIP_BASIC)) = 0), 'N/A',\n\t    IPFC4J_ZIP_BASIC || '-' || to_char(IPFC4J_ZIP_EXPANDED)\n\t) AS ZIP_CODE,\n\tPIF_SYMBOL,\n\tPIF_POLICY_NUMBER,\n\tPIF_MODULE,\n\tIPFC4J_LOSS_YEAR,\n\tIPFC4J_LOSS_MONTH,\n\tIPFC4J_LOSS_DAY,\n\tIPFC4J_LOSS_OCCURENCE,\n\tIPFC4J_LOSS_CLAIMANT,\n\tlogical_flag,\n\tIPFC4J_ID_NUMBER\n\tFROM SQ_PIF_42GJ_stage\n),\nLKP_PIF_42GQ_CMT_stage AS (\n\tSELECT\n\tipfcgq_claimant_birth_month,\n\tipfcgq_claimant_birth_day,\n\tipfcgq_claimant_birth_year,\n\tipfcgq_loss_sex,\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module,\n\tipfcgq_year_of_loss,\n\tipfcgq_month_of_loss,\n\tipfcgq_day_of_loss,\n\tipfcgq_loss_occurence,\n\tipfcgq_loss_claimant\n\tFROM (\n\t\tSELECT \n\t\t\tipfcgq_claimant_birth_month,\n\t\t\tipfcgq_claimant_birth_day,\n\t\t\tipfcgq_claimant_birth_year,\n\t\t\tipfcgq_loss_sex,\n\t\t\tpif_symbol,\n\t\t\tpif_policy_number,\n\t\t\tpif_module,\n\t\t\tipfcgq_year_of_loss,\n\t\t\tipfcgq_month_of_loss,\n\t\t\tipfcgq_day_of_loss,\n\t\t\tipfcgq_loss_occurence,\n\t\t\tipfcgq_loss_claimant\n\t\tFROM pif_42gq_cmt_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pif_symbol,pif_policy_number,pif_module,ipfcgq_year_of_loss,ipfcgq_month_of_loss,ipfcgq_day_of_loss,ipfcgq_loss_occurence,ipfcgq_loss_claimant ORDER BY ipfcgq_claimant_birth_month) = 1\n),\nLKP_PIF_4578_STAGE AS (\n\tSELECT\n\tLOSS_1099_NUMBER,\n\tPIF_SYMBOL,\n\tPIF_POLICY_NUMBER,\n\tPIF_MODULE,\n\tLOSS_YEAR,\n\tLOSS_MONTH,\n\tLOSS_DAY,\n\tLOSS_OCCURENCE,\n\tLOSS_CLAIMANT\n\tFROM (\n\t\tSELECT \n\t\t\tLOSS_1099_NUMBER,\n\t\t\tPIF_SYMBOL,\n\t\t\tPIF_POLICY_NUMBER,\n\t\t\tPIF_MODULE,\n\t\t\tLOSS_YEAR,\n\t\t\tLOSS_MONTH,\n\t\t\tLOSS_DAY,\n\t\t\tLOSS_OCCURENCE,\n\t\t\tLOSS_CLAIMANT\n\t\tFROM PIF_4578_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PIF_SYMBOL,PIF_POLICY_NUMBER,PIF_MODULE,LOSS_YEAR,LOSS_MONTH,LOSS_DAY,LOSS_OCCURENCE,LOSS_CLAIMANT ORDER BY LOSS_1099_NUMBER DESC) = 1\n),\nEXP_Lkp_Values AS (\n\tSELECT\n\tEXP_Values.CLIENT_ID,\n\tEXP_Values.IPFC4J_ADDRESS_LINE_1 AS in_CICL_FULL_NM,\n\t-- *INF*: iif(isnull(in_CICL_FULL_NM),'N/A',\r\n\t--    iif(is_spaces(in_CICL_FULL_NM),'N/A',\r\n\t--     rtrim(in_CICL_FULL_NM)))\n\tIFF(\n\t    in_CICL_FULL_NM IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(in_CICL_FULL_NM)>0\n\t    and TRIM(in_CICL_FULL_NM)='', 'N/A',\n\t        rtrim(in_CICL_FULL_NM)\n\t    )\n\t) AS CICL_FULL_NM,\n\t'N/A' AS CICL_FST_NM,\n\t'N/A' AS CICL_LST_NM,\n\t'N/A' AS CICL_MDL_NM,\n\t'N/A' AS NM_PFX,\n\t'N/A' AS NM_SFX,\n\tEXP_Values.IPFC4J_ADDRESS AS in_CICA_ADR,\n\t-- *INF*: iif(isnull(rtrim(in_CICA_ADR)),'N/A',\r\n\t--    iif(is_spaces(in_CICA_ADR),'N/A',\r\n\t--     rtrim(in_CICA_ADR)))\n\tIFF(\n\t    rtrim(in_CICA_ADR) IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(in_CICA_ADR)>0 AND TRIM(in_CICA_ADR)='', 'N/A', rtrim(in_CICA_ADR)\n\t    )\n\t) AS CICA_ADR,\n\t'N/A' AS CICA_CIT_NM,\n\t'N/A' AS CICA_CTY,\n\t-- *INF*: IIF(ISNULL(RTRIM(in_CICA_ADR)),'N/A',\r\n\t--    IIF(IS_SPACES(in_CICA_ADR),'N/A',\r\n\t-- ltrim(SUBSTR( RTRIM(in_CICA_ADR), LENGTH(in_CICA_ADR) - 2))\r\n\t-- ))\n\tIFF(\n\t    RTRIM(in_CICA_ADR) IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(in_CICA_ADR)>0\n\t    and TRIM(in_CICA_ADR)='', 'N/A',\n\t        ltrim(SUBSTR(RTRIM(in_CICA_ADR), LENGTH(in_CICA_ADR) - 2))\n\t    )\n\t) AS v_ST_CD,\n\t-- *INF*: IIF(ISNULL(:LKP.lkp_sup_state (v_ST_CD)),\r\n\t-- 'N/A',\r\n\t-- v_ST_CD)\n\tIFF(LKP_SUP_STATE_v_ST_CD.sup_state_id IS NULL, 'N/A', v_ST_CD) AS ST_CD,\n\tEXP_Values.ZIP_CODE AS in_CICA_PST_CD,\n\t-- *INF*: iif(isnull(rtrim(in_CICA_PST_CD)),'N/A',\r\n\t--    iif(is_spaces(in_CICA_PST_CD),'N/A',\r\n\t--     rtrim(in_CICA_PST_CD)))\n\tIFF(\n\t    rtrim(in_CICA_PST_CD) IS NULL, 'N/A',\n\t    IFF(\n\t        LENGTH(in_CICA_PST_CD)>0\n\t    and TRIM(in_CICA_PST_CD)='', 'N/A', rtrim(in_CICA_PST_CD)\n\t    )\n\t) AS CICA_PST_CD,\n\t'N/A' AS ADR_TYP_CD,\n\tLKP_PIF_4578_STAGE.LOSS_1099_NUMBER AS in_CICL_TAX_ID,\n\t'N/A' AS CICL_TAX_SSN_ID,\n\t-- *INF*: 'N/A'\r\n\t-- --iif(isnull(rtrim(in_CICL_TAX_ID)),'N/A',   iif(is_spaces(in_CICL_TAX_ID),'N/A',    rtrim(in_CICL_TAX_ID)))\n\t'N/A' AS CICL_TAX_FED_ID,\n\tLKP_PIF_42GQ_CMT_stage.ipfcgq_claimant_birth_year AS in_ipfcgq_claimant_birth_year,\n\tLKP_PIF_42GQ_CMT_stage.ipfcgq_loss_sex AS in_IPFCGQ_LOSS_SEX,\n\t-- *INF*: IIF(\r\n\t-- (ISNULL(in_IPFCGQ_LOSS_SEX) OR IS_SPACES(in_IPFCGQ_LOSS_SEX) OR LENGTH(in_IPFCGQ_LOSS_SEX) = 0),\r\n\t--    'N/A',\r\n\t--    in_IPFCGQ_LOSS_SEX)\n\tIFF(\n\t    (in_IPFCGQ_LOSS_SEX IS NULL\n\t    or LENGTH(in_IPFCGQ_LOSS_SEX)>0\n\t    and TRIM(in_IPFCGQ_LOSS_SEX)=''\n\t    or LENGTH(in_IPFCGQ_LOSS_SEX) = 0),\n\t    'N/A',\n\t    in_IPFCGQ_LOSS_SEX\n\t) AS IPFCGQ_LOSS_SEX,\n\tEXP_Values.logical_flag,\n\tLKP_PIF_42GQ_CMT_stage.ipfcgq_claimant_birth_month AS claimant_birth_month,\n\t-- *INF*: IIF(ISNULL(claimant_birth_month) OR LENGTH(to_char(claimant_birth_month)) =0, '00', \r\n\t-- IIF(LENGTH(to_char(claimant_birth_month)) =1, '0'  || TO_CHAR(claimant_birth_month),TO_CHAR(claimant_birth_month)))\n\tIFF(\n\t    claimant_birth_month IS NULL OR LENGTH(to_char(claimant_birth_month)) = 0, '00',\n\t    IFF(\n\t        LENGTH(to_char(claimant_birth_month)) = 1, '0' || TO_CHAR(claimant_birth_month),\n\t        TO_CHAR(claimant_birth_month)\n\t    )\n\t) AS var_claimant_birth_month,\n\tLKP_PIF_42GQ_CMT_stage.ipfcgq_claimant_birth_day AS claimant_birth_day,\n\t-- *INF*: IIF(ISNULL(claimant_birth_day) OR LENGTH(to_char(claimant_birth_day)) =0, '00', \r\n\t-- IIF(LENGTH(to_char(claimant_birth_day)) =1, '0'  || TO_CHAR(claimant_birth_day),TO_CHAR(claimant_birth_day)))\n\tIFF(\n\t    claimant_birth_day IS NULL OR LENGTH(to_char(claimant_birth_day)) = 0, '00',\n\t    IFF(\n\t        LENGTH(to_char(claimant_birth_day)) = 1, '0' || TO_CHAR(claimant_birth_day),\n\t        TO_CHAR(claimant_birth_day)\n\t    )\n\t) AS var_claimant_birth_day,\n\tLKP_PIF_42GQ_CMT_stage.ipfcgq_claimant_birth_year AS claimant_birth_year,\n\t-- *INF*: IIF(ISNULL(claimant_birth_year) OR LENGTH(to_char(claimant_birth_year)) <4, '0000', TO_CHAR(claimant_birth_year))\n\tIFF(\n\t    claimant_birth_year IS NULL OR LENGTH(to_char(claimant_birth_year)) < 4, '0000',\n\t    TO_CHAR(claimant_birth_year)\n\t) AS var_claimant_birth_year,\n\t-- *INF*: IIF(LENGTH(var_claimant_birth_month) =1 , '0' || var_claimant_birth_month, var_claimant_birth_month)\r\n\t-- || '/' ||\r\n\t-- IIF(LENGTH(var_claimant_birth_day) = 1, '0' || var_claimant_birth_day,var_claimant_birth_day)\r\n\t-- ||  '/' ||\r\n\t-- var_claimant_birth_year\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- ---var_claimant_birth_month || '/' ||   var_claimant_birth_day || '/' ||  var_claimant_birth_year\r\n\t-- \n\tIFF(\n\t    LENGTH(var_claimant_birth_month) = 1, '0' || var_claimant_birth_month,\n\t    var_claimant_birth_month\n\t) || '/' || IFF(\n\t    LENGTH(var_claimant_birth_day) = 1, '0' || var_claimant_birth_day, var_claimant_birth_day\n\t) || '/' || var_claimant_birth_year AS var_CLAIMANT_BIRTH_DATE,\n\t-- *INF*: IIF(LENGTH(var_CLAIMANT_BIRTH_DATE) < 10 OR claimant_birth_year < 1800 OR \r\n\t-- var_claimant_birth_month='00' OR var_claimant_birth_day = '00' OR var_claimant_birth_year = '0000' or NOT IS_DATE(var_CLAIMANT_BIRTH_DATE,'MM/DD/YYYY') ,\r\n\t-- TO_DATE('12/31/2100','MM/DD/YYYY'),\r\n\t-- TO_DATE(var_claimant_birth_month || '/' || var_claimant_birth_day || '/' || var_claimant_birth_year,'MM/DD/YYYY'))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(\n\t    LENGTH(var_CLAIMANT_BIRTH_DATE) < 10\n\t    or claimant_birth_year < 1800\n\t    or var_claimant_birth_month = '00'\n\t    or var_claimant_birth_day = '00'\n\t    or var_claimant_birth_year = '0000'\n\t    or NOT IS_DATE(var_CLAIMANT_BIRTH_DATE, 'MM/DD/YYYY'),\n\t    TO_TIMESTAMP('12/31/2100', 'MM/DD/YYYY'),\n\t    TO_TIMESTAMP(var_claimant_birth_month || '/' || var_claimant_birth_day || '/' || var_claimant_birth_year, 'MM/DD/YYYY')\n\t) AS v_CLAIMANT_BIRTH_DATE,\n\tv_CLAIMANT_BIRTH_DATE AS CLAIMANT_BIRTH_DATE,\n\tEXP_Values.IPFC4J_ID_NUMBER,\n\t-- *INF*: IIF(ISNULL(IPFC4J_ID_NUMBER) OR IS_SPACES(IPFC4J_ID_NUMBER) OR LENGTH(IPFC4J_ID_NUMBER)=0  \r\n\t-- OR LENGTH(IPFC4J_ID_NUMBER)<11 ,'N/A',IPFC4J_ID_NUMBER)\n\tIFF(\n\t    IPFC4J_ID_NUMBER IS NULL\n\t    or LENGTH(IPFC4J_ID_NUMBER)>0\n\t    and TRIM(IPFC4J_ID_NUMBER)=''\n\t    or LENGTH(IPFC4J_ID_NUMBER) = 0\n\t    or LENGTH(IPFC4J_ID_NUMBER) < 11,\n\t    'N/A',\n\t    IPFC4J_ID_NUMBER\n\t) AS IPFC4J_ID_NUMBER_OUT\n\tFROM EXP_Values\n\tLEFT JOIN LKP_PIF_42GQ_CMT_stage\n\tON LKP_PIF_42GQ_CMT_stage.pif_symbol = EXP_Values.PIF_SYMBOL AND LKP_PIF_42GQ_CMT_stage.pif_policy_number = EXP_Values.PIF_POLICY_NUMBER AND LKP_PIF_42GQ_CMT_stage.pif_module = EXP_Values.PIF_MODULE AND LKP_PIF_42GQ_CMT_stage.ipfcgq_year_of_loss = EXP_Values.IPFC4J_LOSS_YEAR AND LKP_PIF_42GQ_CMT_stage.ipfcgq_month_of_loss = EXP_Values.IPFC4J_LOSS_MONTH AND LKP_PIF_42GQ_CMT_stage.ipfcgq_day_of_loss = EXP_Values.IPFC4J_LOSS_DAY AND LKP_PIF_42GQ_CMT_stage.ipfcgq_loss_occurence = EXP_Values.IPFC4J_LOSS_OCCURENCE AND LKP_PIF_42GQ_CMT_stage.ipfcgq_loss_claimant = EXP_Values.IPFC4J_LOSS_CLAIMANT\n\tLEFT JOIN LKP_PIF_4578_STAGE\n\tON LKP_PIF_4578_STAGE.PIF_SYMBOL = EXP_Values.PIF_SYMBOL AND LKP_PIF_4578_STAGE.PIF_POLICY_NUMBER = EXP_Values.PIF_POLICY_NUMBER AND LKP_PIF_4578_STAGE.PIF_MODULE = EXP_Values.PIF_MODULE AND LKP_PIF_4578_STAGE.LOSS_YEAR = EXP_Values.IPFC4J_LOSS_YEAR AND LKP_PIF_4578_STAGE.LOSS_MONTH = EXP_Values.IPFC4J_LOSS_MONTH AND LKP_PIF_4578_STAGE.LOSS_DAY = EXP_Values.IPFC4J_LOSS_DAY AND LKP_PIF_4578_STAGE.LOSS_OCCURENCE = EXP_Values.IPFC4J_LOSS_OCCURENCE AND LKP_PIF_4578_STAGE.LOSS_CLAIMANT = EXP_Values.IPFC4J_LOSS_CLAIMANT\n\tLEFT JOIN LKP_SUP_STATE LKP_SUP_STATE_v_ST_CD\n\tON LKP_SUP_STATE_v_ST_CD.state_code = v_ST_CD\n\n),\nLKP_Claim_Party AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_ak_id,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_addr,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tclaim_party_key\n\tFROM (\n\t\tSELECT \r\n\t\ta.claim_party_id as claim_party_id, \r\n\t\ta.claim_party_ak_id as claim_party_ak_id,\r\n\t\ta.claim_party_full_name as claim_party_full_name,\r\n\t\ta.claim_party_first_name as claim_party_first_name, \r\n\t\ta.claim_party_last_name as claim_party_last_name, \r\n\t\ta.claim_party_mid_name as claim_party_mid_name, \r\n\t\ta.claim_party_name_prfx as claim_party_name_prfx, \r\n\t\ta.claim_party_name_sfx as claim_party_name_sfx, \r\n\t\ta.claim_party_addr as claim_party_addr, \r\n\t\ta.claim_party_city as claim_party_city, \r\n\t\ta.claim_party_county as claim_party_county, \r\n\t\ta.claim_party_state as claim_party_state, \r\n\t\ta.claim_party_zip as claim_party_zip, \r\n\t\ta.addr_type as addr_type, \r\n\t\ta.tax_ssn_id as tax_ssn_id, \r\n\t\ta.tax_fed_id as tax_fed_id, \r\n\t\ta.claim_party_birthdate as claim_party_birthdate,\r\n\t\ta.claim_party_gndr as claim_party_gndr,\r\n\t\ta.claim_party_key as claim_party_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\t\tWHERE  a. source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND a.crrnt_snpsht_flag = 1\r\n\t\tORDER BY claim_party_key --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_Lkp_Values.CLIENT_ID,\n\tEXP_Lkp_Values.CICL_FULL_NM,\n\tEXP_Lkp_Values.CICL_FST_NM,\n\tEXP_Lkp_Values.CICL_LST_NM,\n\tEXP_Lkp_Values.CICL_MDL_NM,\n\tEXP_Lkp_Values.NM_PFX,\n\tEXP_Lkp_Values.NM_SFX,\n\tEXP_Lkp_Values.ADR_TYP_CD,\n\tEXP_Lkp_Values.CICA_ADR,\n\tEXP_Lkp_Values.CICA_CIT_NM,\n\tEXP_Lkp_Values.CICA_CTY,\n\tEXP_Lkp_Values.ST_CD,\n\tEXP_Lkp_Values.CICA_PST_CD,\n\tEXP_Lkp_Values.CICL_TAX_SSN_ID,\n\tEXP_Lkp_Values.CICL_TAX_FED_ID,\n\tEXP_Lkp_Values.CLAIMANT_BIRTH_DATE,\n\tEXP_Lkp_Values.IPFCGQ_LOSS_SEX,\n\tEXP_Lkp_Values.IPFC4J_ID_NUMBER_OUT AS IPFC4J_ID_NUMBER,\n\tLKP_Claim_Party.claim_party_id,\n\tLKP_Claim_Party.claim_party_ak_id AS lkp_claim_party_ak_id,\n\tLKP_Claim_Party.claim_party_full_name,\n\tLKP_Claim_Party.claim_party_first_name,\n\tLKP_Claim_Party.claim_party_last_name,\n\tLKP_Claim_Party.claim_party_mid_name,\n\tLKP_Claim_Party.claim_party_name_prfx,\n\tLKP_Claim_Party.claim_party_name_sfx,\n\tLKP_Claim_Party.claim_party_addr AS claimant_addr,\n\tLKP_Claim_Party.claim_party_city AS claimant_city,\n\tLKP_Claim_Party.claim_party_county AS claimant_county,\n\tLKP_Claim_Party.claim_party_state AS claimant_state,\n\tLKP_Claim_Party.claim_party_zip AS claimant_zip,\n\tLKP_Claim_Party.addr_type,\n\tLKP_Claim_Party.tax_ssn_id,\n\tLKP_Claim_Party.tax_fed_id,\n\tLKP_Claim_Party.claim_party_birthdate,\n\tLKP_Claim_Party.claim_party_gndr,\n\tEXP_Lkp_Values.logical_flag,\n\t1 AS Crrnt_Snpsht_Flag,\n\t-- *INF*: iif(isnull(claim_party_id),'NEW',\r\n\t-- \tiif (\r\n\t-- \t(ltrim(rtrim(CICL_FULL_NM)) <> ltrim(rtrim(claim_party_full_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_FST_NM)) <> ltrim(rtrim(claim_party_first_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_LST_NM)) <> ltrim(rtrim(claim_party_last_name))) or\r\n\t-- \t(ltrim(rtrim(CICL_MDL_NM)) <> ltrim(rtrim(claim_party_mid_name))) or\r\n\t-- \t(ltrim(rtrim(NM_PFX)) <> ltrim(rtrim(claim_party_name_prfx))) or\r\n\t-- \t(ltrim(rtrim(NM_SFX)) <> ltrim(rtrim(claim_party_name_sfx))) or\r\n\t-- \t(ltrim(rtrim(CICA_ADR)) <> ltrim(rtrim(claimant_addr) )) or\r\n\t-- \t(ltrim(rtrim(CICA_CTY)) <> ltrim(rtrim(claimant_city) )) or\r\n\t-- \t(ltrim(rtrim(CICA_CIT_NM)) <>  ltrim(rtrim(claimant_county))) or\r\n\t-- \t(ltrim(rtrim(ST_CD)) <> ltrim(rtrim(claimant_state))) or\r\n\t-- \t(ltrim(rtrim(CICA_PST_CD)) <> ltrim(rtrim(claimant_zip))) or\r\n\t-- \t(ltrim(rtrim(CICL_TAX_FED_ID)) <>  ltrim(rtrim(tax_fed_id))) or\r\n\t--       (ltrim(rtrim(IPFC4J_ID_NUMBER)) <> ltrim(rtrim(tax_ssn_id))) or\r\n\t-- \t(CLAIMANT_BIRTH_DATE <> claim_party_birthdate) or\r\n\t-- \t(ltrim(rtrim(IPFCGQ_LOSS_SEX)) <>  ltrim(rtrim(claim_party_gndr))) or      \r\n\t-- \t(ltrim(rtrim(ADR_TYP_CD)) <> ltrim(rtrim(addr_type))) ,\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(\n\t    claim_party_id IS NULL, 'NEW',\n\t    IFF(\n\t        (ltrim(rtrim(CICL_FULL_NM)) <> ltrim(rtrim(claim_party_full_name)))\n\t        or (ltrim(rtrim(CICL_FST_NM)) <> ltrim(rtrim(claim_party_first_name)))\n\t        or (ltrim(rtrim(CICL_LST_NM)) <> ltrim(rtrim(claim_party_last_name)))\n\t        or (ltrim(rtrim(CICL_MDL_NM)) <> ltrim(rtrim(claim_party_mid_name)))\n\t        or (ltrim(rtrim(NM_PFX)) <> ltrim(rtrim(claim_party_name_prfx)))\n\t        or (ltrim(rtrim(NM_SFX)) <> ltrim(rtrim(claim_party_name_sfx)))\n\t        or (ltrim(rtrim(CICA_ADR)) <> ltrim(rtrim(claimant_addr)))\n\t        or (ltrim(rtrim(CICA_CTY)) <> ltrim(rtrim(claimant_city)))\n\t        or (ltrim(rtrim(CICA_CIT_NM)) <> ltrim(rtrim(claimant_county)))\n\t        or (ltrim(rtrim(ST_CD)) <> ltrim(rtrim(claimant_state)))\n\t        or (ltrim(rtrim(CICA_PST_CD)) <> ltrim(rtrim(claimant_zip)))\n\t        or (ltrim(rtrim(CICL_TAX_FED_ID)) <> ltrim(rtrim(tax_fed_id)))\n\t        or (ltrim(rtrim(IPFC4J_ID_NUMBER)) <> ltrim(rtrim(tax_ssn_id)))\n\t        or (CLAIMANT_BIRTH_DATE <> claim_party_birthdate)\n\t        or (ltrim(rtrim(IPFCGQ_LOSS_SEX)) <> ltrim(rtrim(claim_party_gndr)))\n\t        or (ltrim(rtrim(ADR_TYP_CD)) <> ltrim(rtrim(addr_type))),\n\t        'UPDATE',\n\t        'NOCHANGE'\n\t    )\n\t) AS v_Changed_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(\n\t    v_Changed_Flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date,\n\t'N/A' AS Out_Default_String,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS claim_party_ref_eff_from_date\n\tFROM EXP_Lkp_Values\n\tLEFT JOIN LKP_Claim_Party\n\tON LKP_Claim_Party.claim_party_key = EXP_Lkp_Values.CLIENT_ID\n),\nFIL_Insert AS (\n\tSELECT\n\tlkp_claim_party_ak_id, \n\tCLIENT_ID, \n\tCICL_FULL_NM, \n\tCICL_FST_NM, \n\tCICL_LST_NM, \n\tCICL_MDL_NM, \n\tNM_PFX, \n\tNM_SFX, \n\tADR_TYP_CD, \n\tCICA_ADR, \n\tCICA_CIT_NM, \n\tCICA_CTY, \n\tST_CD, \n\tCICA_PST_CD, \n\tIPFC4J_ID_NUMBER, \n\tCICL_TAX_FED_ID, \n\tCLAIMANT_BIRTH_DATE, \n\tIPFCGQ_LOSS_SEX, \n\tlogical_flag, \n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tChanged_Flag, \n\tOut_Default_String, \n\tclaim_party_ref_eff_from_date\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_party AS (\n\tCREATE SEQUENCE SEQ_claim_party\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\tSEQ_claim_party.NEXTVAL,\n\tlkp_claim_party_ak_id,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, lkp_claim_party_ak_id)\n\tIFF(Changed_Flag = 'NEW', NEXTVAL, lkp_claim_party_ak_id) AS claim_party_ak_id,\n\tCLIENT_ID,\n\tCICL_FULL_NM,\n\tCICL_FST_NM,\n\tCICL_LST_NM,\n\tCICL_MDL_NM,\n\tNM_PFX,\n\tNM_SFX,\n\tADR_TYP_CD,\n\tCICA_ADR,\n\tCICA_CIT_NM,\n\tCICA_CTY,\n\tST_CD,\n\tCICA_PST_CD,\n\tIPFC4J_ID_NUMBER,\n\tCICL_TAX_FED_ID,\n\tCLAIMANT_BIRTH_DATE,\n\tIPFCGQ_LOSS_SEX,\n\tlogical_flag,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tChanged_Flag,\n\tOut_Default_String,\n\tclaim_party_ref_eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2999','MM/DD/YYYY')\n\tTO_TIMESTAMP('12/31/2999', 'MM/DD/YYYY') AS out_default_high_date\n\tFROM FIL_Insert\n),\nclaim_party_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party\n\t(claim_party_ak_id, claim_party_key, claim_party_full_name, claim_party_first_name, claim_party_last_name, claim_party_mid_name, claim_party_name_prfx, claim_party_name_sfx, claim_party_addr, claim_party_city, claim_party_county, claim_party_state, claim_party_zip, addr_type, tax_ssn_id, tax_fed_id, claim_party_birthdate, claim_party_gndr, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, ph_num, ph_extension, ph_type, lgl_ent_code, claim_party_ref_eff_from_date, claim_party_death_date)\n\tSELECT \n\tCLAIM_PARTY_AK_ID, \n\tCLIENT_ID AS CLAIM_PARTY_KEY, \n\tCICL_FULL_NM AS CLAIM_PARTY_FULL_NAME, \n\tCICL_FST_NM AS CLAIM_PARTY_FIRST_NAME, \n\tCICL_LST_NM AS CLAIM_PARTY_LAST_NAME, \n\tCICL_MDL_NM AS CLAIM_PARTY_MID_NAME, \n\tNM_PFX AS CLAIM_PARTY_NAME_PRFX, \n\tNM_SFX AS CLAIM_PARTY_NAME_SFX, \n\tCICA_ADR AS CLAIM_PARTY_ADDR, \n\tCICA_CTY AS CLAIM_PARTY_CITY, \n\tCICA_CIT_NM AS CLAIM_PARTY_COUNTY, \n\tST_CD AS CLAIM_PARTY_STATE, \n\tCICA_PST_CD AS CLAIM_PARTY_ZIP, \n\tADR_TYP_CD AS ADDR_TYPE, \n\tIPFC4J_ID_NUMBER AS TAX_SSN_ID, \n\tCICL_TAX_FED_ID AS TAX_FED_ID, \n\tCLAIMANT_BIRTH_DATE AS CLAIM_PARTY_BIRTHDATE, \n\tIPFCGQ_LOSS_SEX AS CLAIM_PARTY_GNDR, \n\tLOGICAL_FLAG, \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tOut_Default_String AS PH_NUM, \n\tOut_Default_String AS PH_EXTENSION, \n\tOut_Default_String AS PH_TYPE, \n\tOut_Default_String AS LGL_ENT_CODE, \n\tCLAIM_PARTY_REF_EFF_FROM_DATE, \n\tout_default_high_date AS CLAIM_PARTY_DEATH_DATE\n\tFROM EXP_Determine_AK\n),\nSQ_claim_party AS (\n\tSELECT \r\n\ta.claim_party_id, \r\n\ta.claim_party_key, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\tWHERE a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tand EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_party_key = b.claim_party_key\r\n\t\t\tGROUP BY claim_party_key\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_party_key, eff_from_date  DESC--\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(\n\t    TRUE,\n\t    claim_party_key = v_PREV_ROW_party_key, DATEADD(SECOND,- 1,v_PREV_ROW_eff_from_date),\n\t    orig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_party_key AS v_PREV_ROW_party_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party AS (\n\tSELECT\n\tclaim_party_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party AS T\n\tUSING UPD_Claim_Party AS S\n\tON T.claim_party_id = S.claim_party_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Claims DataWarehouse/"
        },
        "annotations": []
    }
}