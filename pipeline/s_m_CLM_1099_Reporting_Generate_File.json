{
    "name": "s_m_CLM_1099_Reporting_Generate_File",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_1099_Reporting_Generate_File",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_Work1099Reporting AS (\n\tSELECT  \r\n\tWork1099Reporting.Work1099ReportingId,\r\n\tWork1099Reporting.IRSName, \r\n\tWork1099Reporting.AddressLine1, \r\n\tWork1099Reporting.AddressLine2, \r\n\tWork1099Reporting.City, \r\n\tWork1099Reporting.StateCode, \r\n\tWork1099Reporting.ZipCode, \r\n\tWork1099Reporting.CountryCode, \r\n\tWork1099Reporting.SearchTaxId, \r\n\tWork1099Reporting.TaxIdType, \r\n\tWork1099Reporting.TaxId, \r\n\tWork1099Reporting.VendorTypeCode, \r\n\tsum(Work1099Reporting.PaidAmount) as PaidAmount\r\n\tFROM\r\n\t Work1099Reporting as Work1099Reporting  with (nolock)\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\tGroup by \r\n\tWork1099Reporting.Work1099ReportingId,\r\n\tWork1099Reporting.IRSName, \r\n\tWork1099Reporting.AddressLine1, \r\n\tWork1099Reporting.AddressLine2, \r\n\tWork1099Reporting.City, \r\n\tWork1099Reporting.StateCode, \r\n\tWork1099Reporting.ZipCode, \r\n\tWork1099Reporting.CountryCode, \r\n\tWork1099Reporting.SearchTaxId, \r\n\tWork1099Reporting.TaxIdType, \r\n\tWork1099Reporting.TaxId, \r\n\tWork1099Reporting.VendorTypeCode\r\n\torder by IRSName\n),\nSQ_Work1099Reporting_SSN AS (\n\tSELECT Work1099Reporting.Work1099ReportingId, Work1099Reporting.TaxId \r\n\tFROM\r\n\t Work1099Reporting\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nmplt_Detokenize_WebService_call AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_SSN_FEIN_TAXID AS (\n\t\tSELECT\n\t\tIN_id AS id,\n\t\tIN_ssn_fein_taxid AS ssn_fein_taxid,\n\t\t-- *INF*: LTRIM(RTRIM(ssn_fein_taxid))\n\t\tLTRIM(RTRIM(ssn_fein_taxid)) AS V_ssn_fein_taxid,\n\t\t-- *INF*: IIF(LENGTH(V_ssn_fein_taxid)=0  or IS_NUMBER(V_ssn_fein_taxid),'FEIN','NONFEIN')\r\n\t\t-- --IIF(LENGTH(V_ssn_fein_taxid)=11 AND REG_MATCH(V_ssn_fein_taxid,'[\\da-zA-Z]+'),'NONFEIN','FEIN')\r\n\t\t-- \r\n\t\t-- \n\t\tIFF(\n\t\t    LENGTH(V_ssn_fein_taxid) = 0 or REGEXP_LIKE(V_ssn_fein_taxid, '^[0-9]+$'), 'FEIN', 'NONFEIN'\n\t\t) AS V_flag,\n\t\tV_flag AS flag,\n\t\tV_ssn_fein_taxid AS o_ssn_fein_taxid\n\t\tFROM INPUT\n\t),\n\tRTR_SSN_FEIN_TAXID AS (\n\t\tSELECT\n\t\tid,\n\t\tflag,\n\t\to_ssn_fein_taxid AS ssn_fein_taxid,\n\t\to_ssn_fein_taxid AS ssn_fein\n\t\tFROM EXP_SSN_FEIN_TAXID\n\t),\n\tRTR_SSN_FEIN_TAXID_FEIN_VALUES AS (SELECT * FROM RTR_SSN_FEIN_TAXID WHERE flag = 'FEIN'),\n\tRTR_SSN_FEIN_TAXID_NONFEIN_VALUES AS (SELECT * FROM RTR_SSN_FEIN_TAXID WHERE flag='NONFEIN'),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tid AS ID,\n\t\t'Detokenize' AS Function,\n\t\t'SSN' AS Scheme,\n\t\tssn_fein_taxid AS SSN_FEIN_TAXID,\n\t\t'DATAFEED_JOBS' AS Requestedby,\n\t\t'Claims' AS Application,\n\t\t'DataFeeds' AS Caller,\n\t\t-- *INF*: 'https://intsvc.wbconnect.com/services/TokenService/Token.svc'\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- \n\t\t'https://intsvc.wbconnect.com/services/TokenService/Token.svc' AS URL,\n\t\tssn_fein AS SSN_FEIN3\n\t\tFROM RTR_SSN_FEIN_TAXID_NONFEIN_VALUES\n\t),\n\tToken AS (-- Token\n\t\n\t\t##############################################\n\t\n\t\t# TODO: Place holder for Custom transformation\n\t\n\t\t##############################################\n\t),\n\tEXP_Response AS (\n\t\tSELECT\n\t\tREF_Id AS ID,\n\t\ttns_Data0 AS TokenResponse,\n\t\tREF_SSN_FEIN_TAXID,\n\t\t-- *INF*: ltrim(rtrim(REPLACECHR(0,TokenResponse,'-',NULL)))\r\n\t\t-- \n\t\tltrim(rtrim(REGEXP_REPLACE(TokenResponse,'-','','i'))) AS o_TokenResponse\n\t\tFROM Token\n\t),\n\tUnion_SSN_FEIN_TAXID AS (\n\t\tSELECT id AS ID, ssn_fein_taxid AS TokenReponse, ssn_fein_taxid AS SSN_FEIN\n\t\tFROM RTR_SSN_FEIN_TAXID_FEIN_VALUES\n\t\tUNION\n\t\tSELECT ID, o_TokenResponse AS TokenReponse, REF_SSN_FEIN_TAXID AS SSN_FEIN\n\t\tFROM EXP_Response\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tID AS OUT_id, \n\t\tTokenReponse AS OUT_TokenResponse, \n\t\tSSN_FEIN AS OUT_IN_ssn_fein_taxid\n\t\tFROM Union_SSN_FEIN_TAXID\n\t),\n),\nJNR_Work1099Reporting AS (SELECT\n\tSQ_Work1099Reporting.Work1099ReportingId, \n\tSQ_Work1099Reporting.IRSName, \n\tSQ_Work1099Reporting.AddressLine1, \n\tSQ_Work1099Reporting.AddressLine2, \n\tSQ_Work1099Reporting.City, \n\tSQ_Work1099Reporting.StateCode, \n\tSQ_Work1099Reporting.ZipCode, \n\tSQ_Work1099Reporting.CountryCode, \n\tSQ_Work1099Reporting.SearchTaxId, \n\tSQ_Work1099Reporting.TaxIdType, \n\tSQ_Work1099Reporting.TaxId, \n\tSQ_Work1099Reporting.VendorTypeCode, \n\tSQ_Work1099Reporting.PaidAmount, \n\tmplt_Detokenize_WebService_call.OUT_id AS IN_mplt_id, \n\tmplt_Detokenize_WebService_call.OUT_TokenResponse AS TokenReponse\n\tFROM SQ_Work1099Reporting\n\tINNER JOIN mplt_Detokenize_WebService_call\n\tON mplt_Detokenize_WebService_call.OUT_id = SQ_Work1099Reporting.Work1099ReportingId\n),\nAGGTRANS AS (\n\tSELECT\n\tWork1099ReportingId,\n\tIRSName,\n\tAddressLine1,\n\tAddressLine2,\n\tCity,\n\tStateCode,\n\tZipCode,\n\tCountryCode,\n\tTokenReponse AS SearchTaxId,\n\tTaxIdType,\n\tTokenReponse AS TaxId,\n\tVendorTypeCode,\n\tPaidAmount,\n\t-- *INF*: SUM(PaidAmount)\n\tSUM(PaidAmount) AS O_PaidAmount\n\tFROM JNR_Work1099Reporting\n\tGROUP BY IRSName, AddressLine1, AddressLine2, City, StateCode, ZipCode, CountryCode, SearchTaxId, TaxIdType, TaxId, VendorTypeCode\n),\nEXP_input AS (\n\tSELECT\n\tWork1099ReportingId,\n\tIRSName,\n\tAddressLine1,\n\tAddressLine2,\n\tCity,\n\tStateCode,\n\tZipCode,\n\tCountryCode,\n\tSearchTaxId,\n\tTaxIdType,\n\tTaxId,\n\tVendorTypeCode,\n\tO_PaidAmount AS PaidAmount\n\tFROM AGGTRANS\n),\nEXP_cleasne_output AS (\n\tSELECT\n\tIRSName,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(IRSName)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(IRSName) AS IRSName_out,\n\tAddressLine1,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(AddressLine1)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(AddressLine1) AS AddressLine1_out,\n\tAddressLine2,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(AddressLine2)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(AddressLine2) AS AddressLine2_out,\n\tCity,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(City)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(City) AS City_out,\n\tStateCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(StateCode)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(StateCode) AS StateCode_out,\n\tZipCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(ZipCode)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(ZipCode) AS ZipCode_out,\n\tCountryCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(CountryCode)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(CountryCode) AS CountryCode_out,\n\tSearchTaxId,\n\t-- *INF*: REPLACECHR(0,SearchTaxId,'-',NULL)\n\tREGEXP_REPLACE(SearchTaxId,'-','','i') AS v_SearchTaxId,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(v_SearchTaxId)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(v_SearchTaxId) AS SearchTaxId_out,\n\tTaxIdType,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(TaxIdType)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(TaxIdType) AS TaxIdType_out,\n\tTaxId,\n\t-- *INF*: IIF(TaxIdType='S' AND LENGTH(TaxId)=9,SUBSTR(TaxId, 1, 3) ||'-'||SUBSTR(TaxId, 4, 2)||'-'||SUBSTR(TaxId, 6, 4),IIF(TaxIdType='F' AND LENGTH(TaxId)=9,SUBSTR(TaxId, 1, 2) ||'-'||SUBSTR(TaxId, 3, 7),TaxId) )\r\n\t-- \r\n\t-- \n\tIFF(\n\t    TaxIdType = 'S' AND LENGTH(TaxId) = 9,\n\t    SUBSTR(TaxId, 1, 3) || '-' || SUBSTR(TaxId, 4, 2) || '-' || SUBSTR(TaxId, 6, 4),\n\t    IFF(\n\t        TaxIdType = 'F'\n\t    and LENGTH(TaxId) = 9,\n\t        SUBSTR(TaxId, 1, 2) || '-' || SUBSTR(TaxId, 3, 7),\n\t        TaxId\n\t    )\n\t) AS v_TaxId,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(v_TaxId)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(v_TaxId) AS TaxId_out,\n\tVendorTypeCode,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(VendorTypeCode)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(VendorTypeCode) AS VendorTypeCode_out,\n\tPaidAmount,\n\tPaidAmount AS PaidAmount_out\n\tFROM EXP_input\n),\nRTR_Claims1099ReportingFile AS (\n\tSELECT\n\tIRSName_out AS IRSName,\n\tAddressLine1_out AS AddressLine1,\n\tAddressLine2_out AS AddressLine2,\n\tCity_out AS City,\n\tStateCode_out AS StateCode,\n\tZipCode_out AS ZipCode,\n\tCountryCode_out AS CountryCode,\n\tSearchTaxId_out AS SearchTaxId,\n\tTaxIdType_out AS TaxIdType,\n\tTaxId_out AS TaxId,\n\tVendorTypeCode_out AS VendorTypeCode,\n\tPaidAmount_out AS PaidAmount\n\tFROM EXP_cleasne_output\n),\nRTR_Claims1099ReportingFile_NEWGROUP1 AS (SELECT * FROM RTR_Claims1099ReportingFile WHERE TRUE),\nRTR_Claims1099ReportingFile_NEWGROUP2 AS (SELECT * FROM RTR_Claims1099ReportingFile WHERE TRUE),\nClaims1099ReportingFile AS (\n\tINSERT INTO Claims1099ReportingFile\n\t(IRSName, AddressLine1, AddressLine2, City, StateCode, ZipCode, CountryCode, SearchTaxId, TaxIdType, TaxId, VendorTypeCode, PaidAmount)\n\tSELECT \n\tIRSNAME, \n\tAddressLine AS ADDRESSLINE1, \n\tADDRESSLINE2, \n\tCITY, \n\tSTATECODE, \n\tZIPCODE, \n\tCOUNTRYCODE, \n\tSEARCHTAXID, \n\tTAXIDTYPE, \n\tTAXID, \n\tVENDORTYPECODE, \n\tPAIDAMOUNT\n\tFROM RTR_Claims1099ReportingFile_NEWGROUP1\n),\nEXPTRANS AS (\n\tSELECT\n\tIRSName,\n\t@{pipeline().parameters.SPECIAL_CHARACTERS} AS v_special_characters,\n\t-- *INF*: ReplaceChr( 0, IRSName, v_special_characters, '')\n\tREGEXP_REPLACE(IRSName,v_special_characters,'','i') AS O_IRSName,\n\tSearchTaxId,\n\tTaxIdType,\n\t-- *INF*: IIF(TaxIdType='F','1','2')\n\tIFF(TaxIdType = 'F', '1', '2') AS O_TaxIdType,\n\t'' AS dummy\n\tFROM RTR_Claims1099ReportingFile_NEWGROUP2\n),\nclaims1099reportingfile_monthly AS (\n\tINSERT INTO claims1099reportingfile_monthly\n\t(TaxIdType, SearchTaxId, IRSName, dummy)\n\tSELECT \n\tO_TaxIdType AS TAXIDTYPE, \n\tSEARCHTAXID, \n\tO_IRSName AS IRSNAME, \n\tDUMMY\n\tFROM EXPTRANS\n),\nSQ_Work1099ReportingDetail AS (\n\tSELECT Work1099ReportingDetail.Work1099ReportingId, Work1099ReportingDetail.PaidAmount, Work1099ReportingDetail.ClaimNumber, Work1099ReportingDetail.CheckNumber, Work1099ReportingDetail.PaymentIssueDate, Work1099ReportingDetail.LossDate, Work1099ReportingDetail.LossDescription \r\n\tFROM\r\n\t Work1099ReportingDetail\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_Collect AS (\n\tSELECT\n\tWork1099ReportingId,\n\tPaidAmount,\n\tClaimNumber,\n\tCheckNumber,\n\tPaymentIssueDate,\n\tLossDate,\n\tLossDescription\n\tFROM SQ_Work1099ReportingDetail\n),\nJNR_Work1099Reporting_Detail AS (SELECT\n\tEXP_Collect.Work1099ReportingId, \n\tEXP_Collect.PaidAmount, \n\tEXP_Collect.ClaimNumber, \n\tEXP_Collect.CheckNumber, \n\tEXP_Collect.PaymentIssueDate, \n\tEXP_Collect.LossDate, \n\tEXP_Collect.LossDescription, \n\tmplt_Detokenize_WebService_call.OUT_id AS IN_id, \n\tmplt_Detokenize_WebService_call.OUT_TokenResponse AS IN_TokenResponse\n\tFROM EXP_Collect\n\tINNER JOIN mplt_Detokenize_WebService_call\n\tON mplt_Detokenize_WebService_call.OUT_id = EXP_Collect.Work1099ReportingId\n),\nEXP_PreTarget AS (\n\tSELECT\n\tIN_TokenResponse AS SearchTaxId,\n\t-- *INF*: REPLACECHR(0,SearchTaxId,'-',NULL)\n\tREGEXP_REPLACE(SearchTaxId,'-','','i') AS v_SearchTaxId,\n\t-- *INF*: :UDF.DEFAULT_VALUE_TO_BLANKS(v_SearchTaxId)\n\tUDF_DEFAULT_VALUE_TO_BLANKS(v_SearchTaxId) AS o_SearchTaxId,\n\tClaimNumber,\n\tLossDate,\n\tCheckNumber,\n\tPaymentIssueDate AS CheckIssuedDate,\n\tLossDescription,\n\tPaidAmount\n\tFROM JNR_Work1099Reporting_Detail\n),\nclaims1099reportingdetailfile AS (\n\tINSERT INTO claims1099reportingdetailfile\n\t(SearchTaxId, ClaimNumber, LossDate, CheckNumber, CheckIssuedDate, PaidAmount)\n\tSELECT \n\to_SearchTaxId AS SEARCHTAXID, \n\tCLAIMNUMBER, \n\tLOSSDATE, \n\tCHECKNUMBER, \n\tCHECKISSUEDDATE, \n\tPAIDAMOUNT\n\tFROM EXP_PreTarget\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SPECIAL_CHARACTERS": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/ClaimDataServices/"
        },
        "annotations": []
    }
}