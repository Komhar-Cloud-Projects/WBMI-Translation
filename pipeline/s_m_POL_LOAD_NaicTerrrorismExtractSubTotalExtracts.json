{
    "name": "s_m_POL_LOAD_NaicTerrrorismExtractSubTotalExtracts",
    "properties": {
        "activities": [
            {
                "name": "m_POL_LOAD_NaicTerrrorismExtractSubTotalExtracts",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_PolicyLimits AS (\n\tSELECT\n\tPolicyPerOccurenceLimit,\n\tPolicyAKId,\n\tpol_key,\n\tInsuranceLine,\n\tin_pol_key\n\tFROM (\n\t\tselect \r\n\t\t max(PL.PolicyPerOccurenceLimit) AS PolicyPerOccurenceLimit,\r\n\t\tP.pol_key as pol_key\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyLimit PL\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.v2.policy P on PL.PolicyAKId=P.pol_ak_id and P.crrnt_snpsht_flag=1 and PL.CurrentSnapshotFlag=1\r\n\t\twhere PL.InsuranceLine in\r\n\t\t( \r\n\t\t'BusinessOwners',\r\n\t\t'DirectorsAndOfficersNFP',\r\n\t\t'DirectorsAndOffsCondos',\r\n\t\t'EmploymentPracticesLiab',\r\n\t\t'ExcessLiability',\r\n\t\t'GamesOfChance',\r\n\t\t'GeneralLiability',\r\n\t\t'GL',\r\n\t\t'HoleInOne',\r\n\t\t'SBOPGeneralLiability'\r\n\t\t)\r\n\t\tand (YEAR(P.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(P.pol_exp_date)=@{pipeline().parameters.YEAR})\r\n\t\t--and P.pol_eff_date != P.pol_cancellation_date\r\n\t\tand isnumeric(PolicyPerOccurenceLimit)=1\r\n\t\tgroup by P.pol_key --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY PolicyPerOccurenceLimit) = 1\n),\nLKP_StatCovClass11111 AS (\n\tSELECT\n\tStatisticalCoverageID,\n\tStatisticalCoverageAKID,\n\tRiskUnitGroup,\n\tMajorPerilCode,\n\tClassCode\n\tFROM (\n\t\tSELECT \n\t\t\tStatisticalCoverageID,\n\t\t\tStatisticalCoverageAKID,\n\t\t\tRiskUnitGroup,\n\t\t\tMajorPerilCode,\n\t\t\tClassCode\n\t\tFROM StatisticalCoverage\n\t\tWHERE ClassCode='11111' and RiskUnitGroup='340' and  MajorPerilCode in ('540','530')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StatisticalCoverageAKID ORDER BY StatisticalCoverageID) = 1\n),\nLKP_PolicyLimits_Umbrella AS (\n\tSELECT\n\tPolicyPerOccurenceLimit,\n\tPolicyAKId,\n\tpol_key,\n\tInsuranceLine,\n\tin_pol_key\n\tFROM (\n\t\tselect \r\n\t\t max(PL.PolicyPerOccurenceLimit) AS PolicyPerOccurenceLimit,\r\n\t\tP.pol_key as pol_key\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyLimit PL\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.v2.policy P on PL.PolicyAKId=P.pol_ak_id and P.crrnt_snpsht_flag=1 and PL.CurrentSnapshotFlag=1\r\n\t\twhere PL.InsuranceLine in\r\n\t\t( \r\n\t\t'CommercialUmbrella'\r\n\t\t)\r\n\t\tand (YEAR(P.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(P.pol_exp_date)=@{pipeline().parameters.YEAR})\r\n\t\t--and P.pol_eff_date != P.pol_cancellation_date\r\n\t\tand isnumeric(PolicyPerOccurenceLimit)=1\r\n\t\tgroup by P.pol_key --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY PolicyPerOccurenceLimit) = 1\n),\nSQ_WorkNAICTerrorismControl AS (\n\tDeclare @YearStart as varchar(4) = @{pipeline().parameters.YEAR}\r\n\t\r\n\tSELECT DISTINCT\r\n\tWorkNAICTerrorismControl.AuditId, \r\n\tWorkNAICTerrorismControl.CreatedDate, \r\n\tWorkNAICTerrorismControl.SourceSystemID,\r\n\tWorkNAICTerrorismControl.StatisticalCoverageAKID, \r\n\tWorkNAICTerrorismControl.RatingCoverageAKId, \r\n\tWorkNAICTerrorismControl.ZipPostalCode,\r\n\tWorkNAICTerrorismControl.StateProvinceCodeAbbreviation, \r\n\tWorkNAICTerrorismControl.LocationNumber, \r\n\tWorkNAICTerrorismControl.PolicyEffectiveDateYear, \r\n\tWorkNAICTerrorismControl.pol_key, \r\n\tWorkNAICTerrorismControl.InsuranceLineCode, \r\n\tWorkNAICTerrorismControl.InsuranceLineDescription, \r\n\tWorkNAICTerrorismControl.InsuranceReferenceLineOfBusinessDescription, \r\n\tWorkNAICTerrorismControl.CoverageCode, \r\n\tWorkNAICTerrorismControl.CoverageDescription, \r\n\tWorkNAICTerrorismControl.Lob, \r\n\tWorkNAICTerrorismControl.Code, \r\n\tWorkNAICTerrorismControl.DctRiskTypeCode, \r\n\tWorkNAICTerrorismControl.PropertyCoverageCode, \r\n\tWorkNAICTerrorismControl.DctCoverageTypeCode, \r\n\tWorkNAICTerrorismControl.BOPCoverageCode, \r\n\tWorkNAICTerrorismControl.BureauCode1, \r\n\tWorkNAICTerrorismControl.PMSCoverageCode, \r\n\tWorkNAICTerrorismControl.PolicyOfferingCode, \r\n\tWorkNAICTerrorismControl.ProductCode, \r\n\tWorkNAICTerrorismControl.InsuranceReferenceLineOfBusinessCode, \r\n\tWorkNAICTerrorismControl.LiabilityCoverageCode, \r\n\tWorkNAICTerrorismControl.PolCat, \r\n\tWorkNAICTerrorismControl.TerrorismRiskInd, \r\n\tWorkNAICTerrorismControl.CoCode, \r\n\tWorkNAICTerrorismControl.CoType, \r\n\tWorkNAICTerrorismControl.IndCodeType, \r\n\tWorkNAICTerrorismControl.PolType, \r\n\tWorkNAICTerrorismControl.CovType, \r\n\tWorkNAICTerrorismControl.TableCode, \r\n\tWorkNAICTerrorismControl.TableCodeInsuranceLine, \r\n\tWorkNAICTerrorismControl.ReinsurancePercent, \r\n\tWorkNAICTerrorismControl.BlackListCoverageFlag \r\n\tFROM\r\n\t WorkNAICTerrorismControl\r\n\tWHERE\r\n\tWorkNAICTerrorismControl.PolicyEffectiveDateYear=@YearStart\r\n\tand\r\n\tWorkNAICTerrorismControl.AuditId=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\t@{pipeline().parameters.WHERE_CONTROL}\n),\nEXP_InputFromControlTable AS (\n\tSELECT\n\tAuditId,\n\tCreatedDate,\n\tSourceSystemID,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKId,\n\tZipPostalCode,\n\tStateProvinceCodeAbbreviation,\n\tLocationNumber,\n\t-- *INF*: IIF(IS_NUMBER(LocationNumber)=1,TO_INTEGER(LocationNumber),1)\n\tIFF(REGEXP_LIKE(LocationNumber, '^[0-9]+$') = 1, CAST(LocationNumber AS INTEGER), 1) AS v_LocationNumber,\n\tv_LocationNumber AS o_LocationNumber,\n\tPolicyEffectiveDateYear,\n\tpol_key,\n\tInsuranceLineCode,\n\tInsuranceLineDescription,\n\tInsuranceReferenceLineOfBusinessDescription,\n\tCoverageCode,\n\tCoverageDescription,\n\tLob,\n\tCode,\n\tDctRiskTypeCode,\n\tPropertyCoverageCode,\n\tDctCoverageTypeCode,\n\tBOPCoverageCode,\n\tBureauCode1,\n\tPMSCoverageCode,\n\tPolicyOfferingCode,\n\tProductCode,\n\tInsuranceReferenceLineOfBusinessCode,\n\tLiabilityCoverageCode,\n\tPolCat,\n\tTerrorismRiskInd,\n\t-- *INF*: IIF(DctCoverageTypeCode='TerrorismFireOnly','Y',TerrorismRiskInd)\r\n\t-- \r\n\t-- --- force TerrorismFireOnly to always be counted as terrorism limit and premium\n\tIFF(DctCoverageTypeCode = 'TerrorismFireOnly', 'Y', TerrorismRiskInd) AS v_TerrorismRiskInd,\n\tv_TerrorismRiskInd AS o_TerrorismRiskInd,\n\tCoCode,\n\tCoType,\n\tIndCodeType,\n\tPolType,\n\tCovType,\n\tTableCode AS TableCode1,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tBlackListCoverageFlag,\n\t-- *INF*: IIF(InsuranceReferenceLineOfBusinessDescription='Employment Practices Liability Insurance' and TableCodeInsuranceLine='Liability' and not (PolicyOfferingCode='330' and InsuranceReferenceLineOfBusinessCode='330' and ProductCode='330') ,'Y','N')\n\tIFF(\n\t    InsuranceReferenceLineOfBusinessDescription = 'Employment Practices Liability Insurance'\n\t    and TableCodeInsuranceLine = 'Liability'\n\t    and not (PolicyOfferingCode = '330'\n\t    and InsuranceReferenceLineOfBusinessCode = '330'\n\t    and ProductCode = '330'),\n\t    'Y',\n\t    'N'\n\t) AS v_LiabilityLimitAddOnFlag,\n\tv_LiabilityLimitAddOnFlag AS o_LiabilityLimitAddOnFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TableCode1='1' and PropertyCoverageCode !='N/A',PropertyCoverageCode,\r\n\t-- TableCode1='1' and BOPCoverageCode!='N/A',BOPCoverageCode,\r\n\t-- TableCode1='1' and PMSCoverageCode!='N/A',PMSCoverageCode,\r\n\t-- TableCode1='2' and LiabilityCoverageCode !='N/A' ,LiabilityCoverageCode,\r\n\t-- TableCode1='3','',\r\n\t-- 'N/A'||TableCode1\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    TableCode1 = '1' and PropertyCoverageCode != 'N/A', PropertyCoverageCode,\n\t    TableCode1 = '1' and BOPCoverageCode != 'N/A', BOPCoverageCode,\n\t    TableCode1 = '1' and PMSCoverageCode != 'N/A', PMSCoverageCode,\n\t    TableCode1 = '2' and LiabilityCoverageCode != 'N/A', LiabilityCoverageCode,\n\t    TableCode1 = '3', '',\n\t    'N/A' || TableCode1\n\t) AS v_Coverage,\n\tv_Coverage AS o_Coverage,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- SourceSystemID='PMS', StatisticalCoverageAKID,\r\n\t-- SourceSystemID='DCT',RatingCoverageAKId,\r\n\t-- -1\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    SourceSystemID = 'PMS', StatisticalCoverageAKID,\n\t    SourceSystemID = 'DCT', RatingCoverageAKId,\n\t    - 1\n\t) AS o_RCStatCoverageAkID,\n\t-- *INF*: MD5(pol_key||ZipPostalCode||StateProvinceCodeAbbreviation||Lob||Code||PolCat||TableCode1||v_Coverage||PolType)\n\tMD5(pol_key || ZipPostalCode || StateProvinceCodeAbbreviation || Lob || Code || PolCat || TableCode1 || v_Coverage || PolType) AS o_HashKey,\n\t-- *INF*: IIF(IN(DctCoverageTypeCode,'RatingGroup','Blanket'),'Y','N')\n\tIFF(DctCoverageTypeCode IN ('RatingGroup','Blanket'), 'Y', 'N') AS o_DCTCoverageTypeCodeRGBFlag\n\tFROM SQ_WorkNAICTerrorismControl\n),\nSRT_ControlInput AS (\n\tSELECT\n\to_HashKey AS HashKey, \n\to_LocationNumber AS LocationNumber, \n\tpol_key, \n\tSourceSystemID, \n\tPolCat, \n\tLob, \n\to_Coverage AS CoverageCode, \n\tTableCode1, \n\tZipPostalCode AS ZIP, \n\tStateProvinceCodeAbbreviation AS STABBR, \n\to_RCStatCoverageAkID AS RCStatCoverageAkID, \n\tCode, \n\tCoCode, \n\tCoType, \n\tIndCodeType, \n\tPolType, \n\tCovType, \n\tTableCodeInsuranceLine, \n\tReinsurancePercent, \n\tPolicyEffectiveDateYear, \n\tCreatedDate AS ExtractDate, \n\tAuditId, \n\to_TerrorismRiskInd AS TerrorismRiskInd, \n\tBlackListCoverageFlag, \n\to_LiabilityLimitAddOnFlag AS LiabilityLimitAddOnFlag, \n\to_DCTCoverageTypeCodeRGBFlag AS DctCoverageTypeCode\n\tFROM EXP_InputFromControlTable\n\tORDER BY HashKey ASC, LocationNumber ASC\n),\nEXP_SrtControlOutput AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAkID,\n\tSourceSystemID,\n\tPolCat,\n\tLob,\n\tCoverageCode,\n\tZIP,\n\tSTABBR,\n\tLocationNumber,\n\tTableCode1,\n\tCode,\n\tCoCode,\n\tCoType,\n\tIndCodeType,\n\tPolType,\n\tCovType,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tPolicyEffectiveDateYear,\n\tExtractDate,\n\tAuditId,\n\tTerrorismRiskInd,\n\tBlackListCoverageFlag,\n\tLiabilityLimitAddOnFlag,\n\tHashKey,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- isnull(v_PreviousLocationNumber), 1,\r\n\t-- HashKey != v_PreviousHashKey, 1,\r\n\t-- LocationNumber != v_PreviousLocationNumber,1,\r\n\t-- 0)\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    v_PreviousLocationNumber IS NULL, 1,\n\t    HashKey != v_PreviousHashKey, 1,\n\t    LocationNumber != v_PreviousLocationNumber, 1,\n\t    0\n\t) AS v_LocationCount,\n\tv_LocationCount AS o_LocationCount,\n\tLocationNumber AS v_PreviousLocationNumber,\n\tHashKey AS v_PreviousHashKey,\n\tDctCoverageTypeCode AS DctCoverageTypeCodeCBGFlag\n\tFROM SRT_ControlInput\n),\nAGG_MaxLocationNumber AS (\n\tSELECT\n\tHashKey,\n\to_LocationCount AS LocationCounter,\n\t-- *INF*: sum(LocationCounter)\n\tsum(LocationCounter) AS o_LocationCounter\n\tFROM EXP_SrtControlOutput\n\tGROUP BY HashKey\n),\nJNRTRANS AS (SELECT\n\tEXP_SrtControlOutput.pol_key, \n\tEXP_SrtControlOutput.RCStatCoverageAkID, \n\tEXP_SrtControlOutput.SourceSystemID, \n\tEXP_SrtControlOutput.PolCat, \n\tEXP_SrtControlOutput.Lob, \n\tEXP_SrtControlOutput.CoverageCode, \n\tEXP_SrtControlOutput.ZIP, \n\tEXP_SrtControlOutput.STABBR, \n\tEXP_SrtControlOutput.LocationNumber, \n\tEXP_SrtControlOutput.TableCode1, \n\tEXP_SrtControlOutput.Code, \n\tEXP_SrtControlOutput.CoCode, \n\tEXP_SrtControlOutput.CoType, \n\tEXP_SrtControlOutput.IndCodeType, \n\tEXP_SrtControlOutput.PolType, \n\tEXP_SrtControlOutput.CovType, \n\tEXP_SrtControlOutput.TableCodeInsuranceLine, \n\tEXP_SrtControlOutput.ReinsurancePercent, \n\tEXP_SrtControlOutput.PolicyEffectiveDateYear, \n\tEXP_SrtControlOutput.ExtractDate, \n\tEXP_SrtControlOutput.AuditId, \n\tEXP_SrtControlOutput.TerrorismRiskInd, \n\tEXP_SrtControlOutput.BlackListCoverageFlag, \n\tEXP_SrtControlOutput.LiabilityLimitAddOnFlag, \n\tEXP_SrtControlOutput.HashKey, \n\tAGG_MaxLocationNumber.HashKey AS HashKey1, \n\tAGG_MaxLocationNumber.o_LocationCounter, \n\tEXP_SrtControlOutput.DctCoverageTypeCodeCBGFlag AS DctCoverageTypeCode\n\tFROM EXP_SrtControlOutput\n\tINNER JOIN AGG_MaxLocationNumber\n\tON AGG_MaxLocationNumber.HashKey = EXP_SrtControlOutput.HashKey\n),\nAGG_RemoveDuplicates AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAkID AS RCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode1,\n\tPolicyEffectiveDateYear,\n\tSTABBR,\n\tCoCode AS COCODE,\n\tCoType AS COTYPE,\n\tLob AS LOB,\n\tZIP,\n\tPolCat AS POLCAT,\n\tCoverageCode AS COVERAGE,\n\tIndCodeType AS IND_CODE_TYPE,\n\tCode AS CODE,\n\tPolType AS POLTYPE,\n\tCovType AS COVTYPE,\n\to_LocationCounter AS location_counter,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tTerrorismRiskInd AS terrorism_risk_ind,\n\tExtractDate,\n\tAuditId AS AuditID,\n\tBlackListCoverageFlag AS IsBlackListCoverage,\n\tLiabilityLimitAddOnFlag,\n\tDctCoverageTypeCode AS DctCoverageTypeCodeCBGFlag\n\tFROM JNRTRANS\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key, RCStatCoverageAKId, SourceSystemID, TableCode1, PolicyEffectiveDateYear, STABBR, COCODE, COTYPE, LOB, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, location_counter, TableCodeInsuranceLine, ReinsurancePercent, terrorism_risk_ind, IsBlackListCoverage, LiabilityLimitAddOnFlag, DctCoverageTypeCodeCBGFlag ORDER BY NULL) = 1\n),\nEXP_BreakOutCalculations AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode1,\n\tPolicyEffectiveDateYear,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tlocation_counter AS Location_Counter,\n\t-- *INF*: IIF(Location_Counter=0,1,Location_Counter)\n\tIFF(Location_Counter = 0, 1, Location_Counter) AS o_Location_Counter,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage,\n\tLiabilityLimitAddOnFlag,\n\tDctCoverageTypeCodeCBGFlag\n\tFROM AGG_RemoveDuplicates\n),\nRTR_LimitsBySourceSystem AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode1,\n\tLiabilityLimitAddOnFlag,\n\tDctCoverageTypeCodeCBGFlag\n\tFROM EXP_BreakOutCalculations\n),\nRTR_LimitsBySourceSystem_PMS AS (SELECT * FROM RTR_LimitsBySourceSystem WHERE SourceSystemID='PMS'),\nRTR_LimitsBySourceSystem_DCT AS (SELECT * FROM RTR_LimitsBySourceSystem WHERE SourceSystemID='DCT'),\nLKP_RCActiveCoverageLimit AS (\n\tSELECT\n\tpol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\tCoverageType,\n\tRiskType,\n\tRatingCoverageAKID,\n\tin_pol_key,\n\tin_RCStatCoverageAKId,\n\tinSourceSystemID,\n\tin_TableCode1,\n\tin_LiabilityLimitAddOnFlag,\n\tin_DctCoverageTypeCodeCBGFlag\n\tFROM (\n\t\tSelect \r\n\t\t\r\n\t\tLocationUnitNumber as LocationUnitNumber,\r\n\t\tSubLocationUnitNumber as SubLocationUnitNumber,\r\n\t\tCoverageLimitType as CoverageLimitType,\r\n\t\tCoverageLimitValue as CoverageLimitValue,\r\n\t\tCoverageType as CoverageType,\r\n\t\tRiskType as RiskType,\r\n\t\tpol_key as pol_key ,\r\n\t\tRatingCoverageAKID as RatingCoverageAKID \r\n\t\tFrom\r\n\t\t(\r\n\t\tSELECT  Distinct\r\n\t\t\r\n\t\tRL.LocationUnitNumber AS LocationUnitNumber,  \r\n\t\tRC.SubLocationUnitNumber AS SubLocationUnitNumber,  \r\n\t\tLMT.CoverageLimitType AS CoverageLimitType,  \r\n\t\tFIRST_VALUE(LMT.CoverageLimitValue) OVER (PARTITION BY POL.pol_key, RL.LocationUnitNumber, RC.CoverageType, RC.SubLocationUnitNumber,LMT.CoverageLimitType ORDER BY pt.PremiumTransactionEffectiveDate desc, pt.PremiumTransactionEnteredDate desc,PT.Effectivedate desc, CLB.CreatedDate desc,lmt.coveragelimitvalue desc) AS CoverageLimitValue,\r\n\t\tCoverageType as CoverageType,\r\n\t\tRiskType as RiskType,\r\n\t\tPOL.pol_key AS pol_key,\r\n\t\tRC.RatingCoverageAKID AS RatingCoverageAKID \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PremiumTransaction PT  with (nolock)\t\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RatingCoverage RC with (nolock) ON PT.RatingCoverageAKID = RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate = PT.EffectiveDate\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyCoverage PC with (nolock) ON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RiskLocation RL with (nolock) ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.V2.policy POL with (nolock) ON POL.pol_ak_id = RL.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimitBridge CLB with (nolock) ON CLB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimit LMT with (nolock) ON CLB.CoverageLimitId = LMT.CoverageLimitId\r\n\t\tWHERE  PT.CurrentSnapshotFlag = 1\r\n\t\tand LMT.CoverageLimitType Not In ('Scheduled Property','Equipment Scheduled','GKLL','Non Std Open Lots','OTC Bldg Inv','Std Open Lots') \r\n\t\tand (YEAR(POL.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(POL.pol_exp_date)=@{pipeline().parameters.YEAR})\r\n\t\t--and POL.pol_eff_date != POL.pol_cancellation_date\r\n\t\tand isnumeric(LMT.CoverageLimitValue)=1\r\n\t\t@{pipeline().parameters.WHERE_LIMIT_DCT}\r\n\t\t) B\r\n\t\t\r\n\t\tUNION\r\n\t\t\r\n\t\tselect distinct \r\n\t\t\t\r\n\t\t\t\t\t\tLocationUnitNumber as LocationUnitNumber,\r\n\t\t\t\t\t\tSubLocationUnitNumber as SubLocationUnitNumber,\t\t\t\r\n\t\t\t\t\t\tCoverageLimitType as CoverageLimitType,\r\n\t\t\t\t\t\tcase when CoverageLimitType='GKLL' and cast(CoverageLimitValue as varchar) = '6000'  then\r\n\t\t\t\t\t\tFIRST_VALUE(cast(CoverageLimitValue as varchar)-6000) OVER (PARTITION BY  pol_key, LocationUnitNumber, SubLocationUnitNumber, CoverageType, CoverageLimitType ORDER BY PremiumTransactionEffectiveDate desc, PremiumTransactionEnteredDate desc,Effectivedate desc, CreatedDate desc) else\r\n\t\t\t\t\t\tFIRST_VALUE(cast(CoverageLimitValue as varchar)) OVER (PARTITION BY  pol_key, LocationUnitNumber, SubLocationUnitNumber, CoverageType, CoverageLimitType ORDER BY PremiumTransactionEffectiveDate desc, PremiumTransactionEnteredDate desc,Effectivedate desc, CreatedDate desc) \r\n\t\t\t\t\t\tend as CoverageLimitValue,\t\t\t\r\n\t\t\t\t\t\tCoverageType as CoverageType,\r\n\t\t\t\t\t\tRiskType as RiskType,\r\n\t\t\t\t\tpol_key as pol_key,\r\n\t\tRatingCoverageAKID as  RatingCoverageAKID\r\n\t\t\t\t\t\tfrom (\r\n\t\tSELECT DISTINCT\r\n\t\t\t\t\t\tPOL.pol_key,\r\n\t\t\t\t\t\tRL.LocationUnitNumber,\r\n\t\t\t\t\t\tRC.SubLocationUnitNumber,\r\n\t\t\t\t\t\tLMT.CoverageLimitType,\r\n\t\t\t\t\t\tRC.CoverageType,\r\n\t\t \t  \t\t\tRC.RiskType,\r\n\t\t  RC.RatingCoverageAKID,\r\n\t\t (Case When LMT.CoverageLimitType in ('Scheduled Property','Equipment Scheduled') then\r\n\t\t\t\t        Sum(cast(LMT.CoverageLimitValue as bigint)*CLB.CoverageLimitIDCount) OVER (PARTITION BY  POL.pol_key, RL.LocationUnitNumber, RC.SubLocationUnitNumber,  RC.CoverageType,LMT.CoverageLimitType ,pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate ) \r\n\t\t\t\t\t     else\r\n\t\t\t\t\t\tSum(cast(LMT.CoverageLimitValue as bigint)) OVER (PARTITION BY  POL.pol_key, RL.LocationUnitNumber, RC.SubLocationUnitNumber,  RC.CoverageType,LMT.CoverageLimitType ,pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate ) \r\n\t\t\t\t\t    end) AS CoverageLimitValue,\t\t\t  \r\n\t\t\t  pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate\r\n\t\t\t  from\r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PremiumTransaction PT with (nolock)\r\n\t\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RatingCoverage RC with (nolock) ON PT.RatingCoverageAKID = RC.RatingCoverageAKID\r\n\t\t\tAND RC.EffectiveDate = PT.EffectiveDate\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyCoverage PC with (nolock) ON PC.PolicyCoverageAKID = RC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RiskLocation RL with (nolock) ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.v2.policy POL with (nolock) ON POL.pol_ak_id = RL.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimitBridge CLB with (nolock) ON CLB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimit LMT with (nolock) ON CLB.CoverageLimitId = LMT.CoverageLimitId\r\n\t\tWHERE PT.CurrentSnapshotFlag = 1\r\n\t\tand LMT.CoverageLimitType In ('Scheduled Property','Equipment Scheduled','GKLL','Non Std Open Lots','OTC Bldg Inv','Std Open Lots') \r\n\t\tand (YEAR(POL.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(POL.pol_exp_date)=@{pipeline().parameters.YEAR}) \r\n\t\tand isnumeric(LMT.CoverageLimitValue)=1 \r\n\t\t--and POL.pol_eff_date != POL.pol_cancellation_date\r\n\t\t@{pipeline().parameters.WHERE_LIMIT_DCT}\r\n\t\t) A\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,RatingCoverageAKID ORDER BY pol_key) = 1\n),\nEXP_RC_SetHashCode AS (\n\tSELECT\n\tpol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\t-- *INF*: IIF(IN(in_DctCoverageTypeCodeCBGFlag,'Y'),'0',CoverageLimitValue)\n\tIFF(in_DctCoverageTypeCodeCBGFlag IN ('Y'), '0', CoverageLimitValue) AS v_CoverageLimitValue,\n\tv_CoverageLimitValue AS o_CoverageLimitValue,\n\tCoverageType,\n\tRiskType,\n\tRatingCoverageAKID,\n\tin_pol_key,\n\tin_RCStatCoverageAKId,\n\tinSourceSystemID,\n\tin_TableCode1,\n\tin_LiabilityLimitAddOnFlag,\n\tin_DctCoverageTypeCodeCBGFlag,\n\t-- *INF*: MD5(in_pol_key||LocationUnitNumber||SubLocationUnitNumber||CoverageLimitType||v_CoverageLimitValue||CoverageType||RiskType)\n\tMD5(in_pol_key || LocationUnitNumber || SubLocationUnitNumber || CoverageLimitType || v_CoverageLimitValue || CoverageType || RiskType) AS LimitHashKey\n\tFROM LKP_RCActiveCoverageLimit\n),\nLKP_SCActiveCoverageLimit AS (\n\tSELECT\n\tpol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\tStatisticalCoverageAKID,\n\tRiskUnitGroup,\n\tClassCode,\n\tin_pol_key,\n\tin_RCStatCoverageAKId,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\tin_LiabilityLimitAddOnFlag\n\tFROM (\n\t\tSelect \r\n\t\tLocationUnitNumber as LocationUnitNumber ,\r\n\t\tSubLocationUnitNumber as SubLocationUnitNumber,\r\n\t\tCoverageLimitType as CoverageLimitType,\r\n\t\tCoverageLimitValue as CoverageLimitValue,\r\n\t\tRiskUnitGroup as RiskUnitGroup,\r\n\t\tClassCode as ClassCode,\r\n\t\tpol_key as pol_key,\r\n\t\tStatisticalCoverageAKID as  StatisticalCoverageAKID\r\n\t\tFrom (\r\n\t\tSELECT DISTINCT \r\n\t\t\tRL.LocationUnitNumber as LocationUnitNumber,\r\n\t\t\tSC.SubLocationUnitNumber as SubLocationUnitNumber,\r\n\t\t\tLMT.CoverageLimitType as CoverageLimitType,\r\n\t\t      FIRST_VALUE(LMT.CoverageLimitValue) OVER (PARTITION BY \r\n\t\t\t  POL.pol_key, RL.LocationUnitNumber, SC.SubLocationUnitNumber, LMT.CoverageLimitType ORDER BY pt.PremiumTransactionEffectiveDate desc, pt.PremiumTransactionEnteredDate desc,PT.Effectivedate desc, CLB.CreatedDate desc,lmt.coveragelimitvalue desc) AS CoverageLimitValue,\r\n\t\t POL.pol_key as pol_key,\r\n\t\t  SC.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\tSC.RiskUnitGroup as RiskUnitGroup, SC.ClassCode as ClassCode\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PremiumTransaction PT  with (nolock)\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.StatisticalCoverage SC with (nolock) ON PT.StatisticalCoverageAKID = SC.StatisticalCoverageAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyCoverage PC with (nolock) ON PC.PolicyCoverageAKID = SC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RiskLocation RL with (nolock) ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.V2.policy POL with (nolock) ON POL.pol_ak_id = RL.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1 \r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimitBridge CLB with (nolock) ON CLB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimit LMT with (nolock) ON CLB.CoverageLimitId = LMT.CoverageLimitId\r\n\t\tWHERE  PT.CurrentSnapshotFlag = 1\r\n\t\tand LMT.CoverageLimitType Not In ('Scheduled Property','Equipment Scheduled','GKLL','Non Std Open Lots','OTC Bldg Inv','Std Open Lots','ProductsCompletedAggregate') \r\n\t\tand (YEAR(POL.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(POL.pol_exp_date)=@{pipeline().parameters.YEAR})\r\n\t\t--and POL.pol_eff_date != POL.pol_cancellation_date\r\n\t\tand isnumeric(LMT.CoverageLimitValue)=1\r\n\t\t@{pipeline().parameters.WHERE_LIMIT_PMS}\r\n\t\t) B\r\n\t\t\r\n\t\tUNION\r\n\t\t\r\n\t\tselect distinct \t\t\t\t\r\n\t\t\t\t\t\tLocationUnitNumber as LocationUnitNumber,\r\n\t\t\t\t\t\tSubLocationUnitNumber as SubLocationUnitNumber,\t\t\t\r\n\t\t\t\t\t\tCoverageLimitType as CoverageLimitType,\r\n\t\t\t\t\t\tcase when CoverageLimitType='GKLL' and cast(CoverageLimitValue as varchar) = '6000'  then\r\n\t\t\t\t\t\tFIRST_VALUE(cast(CoverageLimitValue as varchar)-6000) OVER (PARTITION BY  pol_key, LocationUnitNumber, SubLocationUnitNumber, CoverageLimitType ORDER BY PremiumTransactionEffectiveDate desc, PremiumTransactionEnteredDate desc,Effectivedate desc, CreatedDate desc) else\r\n\t\t\t\t\t\tFIRST_VALUE(cast(CoverageLimitValue as varchar)) OVER (PARTITION BY  pol_key, LocationUnitNumber, SubLocationUnitNumber,  CoverageLimitType ORDER BY PremiumTransactionEffectiveDate desc, PremiumTransactionEnteredDate desc,Effectivedate desc, CreatedDate desc) \r\n\t\t\t\t\t\tend as CoverageLimitValue,\r\n\t\t\t\t\t\tRiskUnitGroup as RiskUnitGroup,\r\n\t\tClassCode as ClassCode,\r\n\t\tpol_key as pol_key,\r\n\t\tStatisticalCoverageAKID as  StatisticalCoverageAKID\r\n\t\t\t\t\t\tfrom (\r\n\t\tSELECT DISTINCT\r\n\t\tPOL.pol_key,\t\t\t\t\r\n\t\t\t\t\t\tRL.LocationUnitNumber,\r\n\t\t\t\t\t\tSC.SubLocationUnitNumber,\r\n\t\t\t\t\t\tLMT.CoverageLimitType,\r\n\t\tSC.StatisticalCoverageAKID,\r\n\t\t (Case When LMT.CoverageLimitType in ('Scheduled Property','Equipment Scheduled') then\r\n\t\t\t\t        Sum(cast(LMT.CoverageLimitValue as bigint)*CLB.CoverageLimitIDCount) OVER (PARTITION BY  POL.pol_key, RL.LocationUnitNumber, SC.SubLocationUnitNumber,  LMT.CoverageLimitType ,pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate ) \r\n\t\t\t\t\t     else\r\n\t\t\t\t\t\tSum(cast(LMT.CoverageLimitValue as bigint)) OVER (PARTITION BY  POL.pol_key, RL.LocationUnitNumber, SC.SubLocationUnitNumber,  LMT.CoverageLimitType ,pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate) \r\n\t\t\t\t\t    end) AS CoverageLimitValue,\t\t\t  \r\n\t\t\t  pt.PremiumTransactionEffectiveDate , pt.PremiumTransactionEnteredDate ,PT.Effectivedate , CLB.CreatedDate,\r\n\t\tSC.RiskUnitGroup,SC.ClassCode\r\n\t\t\t  from\r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PremiumTransaction PT with (nolock)\r\n\t\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.StatisticalCoverage SC with (nolock) ON PT.StatisticalCoverageAKID = SC.StatisticalCoverageAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyCoverage PC with (nolock) ON PC.PolicyCoverageAKID = SC.PolicyCoverageAKID\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RiskLocation RL with (nolock) ON PC.RiskLocationAKID = RL.RiskLocationAKID\r\n\t\t\tAND RL.CurrentSnapshotFlag = 1\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.v2.policy POL with (nolock) ON POL.pol_ak_id = RL.PolicyAKID\r\n\t\t\tAND POL.crrnt_snpsht_flag = 1 \r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimitBridge CLB with (nolock) ON CLB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tINNER JOIN @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageLimit LMT with (nolock) ON CLB.CoverageLimitId = LMT.CoverageLimitId\r\n\t\tWHERE PT.CurrentSnapshotFlag = 1\r\n\t\tand LMT.CoverageLimitType In ('Scheduled Property','Equipment Scheduled','GKLL','Non Std Open Lots','OTC Bldg Inv','Std Open Lots') \r\n\t\tand (YEAR(POL.pol_eff_date)=@{pipeline().parameters.YEAR} or YEAR(POL.pol_exp_date)=@{pipeline().parameters.YEAR})\r\n\t\t--and POL.pol_eff_date != POL.pol_cancellation_date\r\n\t\tand isnumeric(LMT.CoverageLimitValue)=1\r\n\t\t@{pipeline().parameters.WHERE_LIMIT_PMS}\r\n\t\t) A\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,StatisticalCoverageAKID ORDER BY pol_key) = 1\n),\nEXP_SCSetHashKey AS (\n\tSELECT\n\tpol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\tStatisticalCoverageAKID,\n\tRiskUnitGroup,\n\tClassCode,\n\tin_pol_key,\n\tin_RCStatCoverageAKId,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\tin_LiabilityLimitAddOnFlag,\n\t-- *INF*: IIF(RiskUnitGroup='966' and ClassCode='966','0',CoverageLimitValue)\r\n\t-- -- force plus pak to 0, else it double counts\n\tIFF(RiskUnitGroup = '966' and ClassCode = '966', '0', CoverageLimitValue) AS v_Limit,\n\tv_Limit AS o_Limit,\n\t-- *INF*: MD5(in_pol_key||LocationUnitNumber||SubLocationUnitNumber||CoverageLimitType||v_Limit||RiskUnitGroup||ClassCode)\n\tMD5(in_pol_key || LocationUnitNumber || SubLocationUnitNumber || CoverageLimitType || v_Limit || RiskUnitGroup || ClassCode) AS LimitHashKey\n\tFROM LKP_SCActiveCoverageLimit\n),\nUnion_Limits AS (\n\tSELECT LocationUnitNumber, SubLocationUnitNumber, CoverageLimitType, o_Limit AS CoverageLimitValue, in_SourceSystemID, in_TableCode1, in_pol_key AS original_pol_key, in_RCStatCoverageAKId AS original_coverageakid, in_LiabilityLimitAddOnFlag AS LiabilityLimitAddOnFlag, LimitHashKey\n\tFROM EXP_SCSetHashKey\n\tUNION\n\tSELECT LocationUnitNumber, SubLocationUnitNumber, CoverageLimitType, o_CoverageLimitValue AS CoverageLimitValue, inSourceSystemID AS in_SourceSystemID, in_TableCode1, in_pol_key AS original_pol_key, in_RCStatCoverageAKId AS original_coverageakid, in_LiabilityLimitAddOnFlag AS LiabilityLimitAddOnFlag, LimitHashKey\n\tFROM EXP_RC_SetHashCode\n),\nEXP_ConsolodateLimitOutput AS (\n\tSELECT\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\t-- *INF*: IIF(ISNULL(CoverageLimitType),'N/A',CoverageLimitType)\n\tIFF(CoverageLimitType IS NULL, 'N/A', CoverageLimitType) AS o_CoverageLimitType,\n\tCoverageLimitValue,\n\t-- *INF*: IIF(isnull(CoverageLimitValue),'0',CoverageLimitValue)\n\tIFF(CoverageLimitValue IS NULL, '0', CoverageLimitValue) AS o_CoverageLimitValue,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\toriginal_pol_key,\n\toriginal_coverageakid,\n\tLiabilityLimitAddOnFlag,\n\tLimitHashKey\n\tFROM Union_Limits\n),\nEXP_ApplyLimitRules AS (\n\tSELECT\n\toriginal_pol_key AS pol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\to_CoverageLimitType AS CoverageLimitType,\n\to_CoverageLimitValue AS CoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- isnull(CoverageLimitValue),'0',\r\n\t-- LiabilityLimitAddOnFlag='Y' and CoverageLimitType ='EachRelatedWrongfulEmploymentPractice',CoverageLimitValue,\r\n\t-- in_TableCode1='2','0',\r\n\t-- CoverageLimitValue\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- -- if liability, unless it is an add on, then 0 this out, then we can assume all liability limits at coverage level going forward can be added to policy limits.\n\tDECODE(\n\t    TRUE,\n\t    CoverageLimitValue IS NULL, '0',\n\t    LiabilityLimitAddOnFlag = 'Y' and CoverageLimitType = 'EachRelatedWrongfulEmploymentPractice', CoverageLimitValue,\n\t    in_TableCode1 = '2', '0',\n\t    CoverageLimitValue\n\t) AS o_CoverageLimitValue,\n\toriginal_coverageakid AS RCStatCoverageAKID,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\t-- *INF*: IIF(in_TableCode1='3','SUM','MAX')\r\n\t-- \r\n\t-- -- need decode logic to set MAX,SUM\n\tIFF(in_TableCode1 = '3', 'SUM', 'MAX') AS LimitRule,\n\tLiabilityLimitAddOnFlag,\n\tLimitHashKey\n\tFROM EXP_ConsolodateLimitOutput\n),\nSRT_Limits AS (\n\tSELECT\n\tpol_key, \n\tRCStatCoverageAKID, \n\tLocationUnitNumber, \n\tSubLocationUnitNumber, \n\tCoverageLimitType, \n\to_CoverageLimitValue AS CoverageLimitValue, \n\tin_SourceSystemID, \n\tin_TableCode1, \n\tLimitRule, \n\tLimitHashKey\n\tFROM EXP_ApplyLimitRules\n\tORDER BY pol_key ASC, RCStatCoverageAKID ASC, LocationUnitNumber ASC, SubLocationUnitNumber ASC, in_SourceSystemID ASC, in_TableCode1 ASC, LimitRule ASC\n),\nAGG_LimitsSubTotalLocationLevel AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKID,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LimitRule='MAX', MAX(TO_INTEGER(CoverageLimitValue)),\r\n\t-- LimitRule='SUM', SUM(TO_INTEGER(CoverageLimitValue)),\r\n\t-- TO_INTEGER(CoverageLimitValue)\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    LimitRule = 'MAX', MAX(CAST(CoverageLimitValue AS INTEGER)),\n\t    LimitRule = 'SUM', SUM(CAST(CoverageLimitValue AS INTEGER)),\n\t    CAST(CoverageLimitValue AS INTEGER)\n\t) AS o_CoverageLimitValue,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\tLimitRule,\n\tLimitHashKey\n\tFROM SRT_Limits\n\tGROUP BY pol_key, RCStatCoverageAKID, LocationUnitNumber, SubLocationUnitNumber, in_SourceSystemID, in_TableCode1, LimitRule\n),\nEXP_LimitSubTotalView AS (\n\tSELECT\n\tpol_key,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\to_CoverageLimitValue AS CoverageLimitValue,\n\tRCStatCoverageAKID,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\tLimitRule,\n\tLimitHashKey\n\tFROM AGG_LimitsSubTotalLocationLevel\n),\nAGG_LimitTotalPolicyCoverage AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKID,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageLimitType,\n\tCoverageLimitValue,\n\t-- *INF*: sum(CoverageLimitValue)\n\tsum(CoverageLimitValue) AS o_CoverageLimitValue,\n\tin_SourceSystemID,\n\tin_TableCode1,\n\tLimitRule,\n\tLimitHashKey\n\tFROM EXP_LimitSubTotalView\n\tGROUP BY pol_key, RCStatCoverageAKID\n),\nLKP_CoverageDeductibleActive AS (\n\tSELECT\n\tpol_key,\n\tRatingCoverageAKId,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageDeductibleValue,\n\tin_pol_key,\n\tin_RCStatCoverageAKId,\n\tin_SourceSystemID,\n\tin_TableCode1\n\tFROM (\n\t\tselect distinct \r\n\t\tPOL.pol_key as pol_key,\r\n\t\tRC.RatingCoverageAKId as RatingCoverageAKId,\r\n\t\tRL.LocationUnitNumber as LocationUnitNumber,\r\n\t\tRC.SubLocationUnitNumber as SubLocationUnitNumber,\r\n\t\tMax(CoverageDeductibleValue) as CoverageDeductibleValue\r\n\t\tFROM\r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.PremiumTransaction PT\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RatingCoverage RC\r\n\t\ton PT.RatingCoverageAKID=RC.RatingCoverageAKID\r\n\t\tand RC.EffectiveDate=PT.EffectiveDate \r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.dbo.PolicyCoverage PC\r\n\t\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\t\tand PC.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.dbo.RiskLocation RL\r\n\t\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\t\tand RL.CurrentSnapshotFlag=1\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.V2.policy POL\r\n\t\ton POL.pol_ak_id=RL.PolicyAKID\r\n\t\tand POL.crrnt_snpsht_flag=1\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageDeductibleBridge CDB\r\n\t\ton CDB.PremiumTransactionAKId = PT.PremiumTransactionAKID\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IL}.dbo.CoverageDeductible CD \r\n\t\ton CDB.CoverageDeductibleId = CD.CoverageDeductibleId\r\n\t\tWHERE \r\n\t\tisnumeric(CD.CoverageDeductibleValue)=1\r\n\t\t@{pipeline().parameters.WHERE_DEDUCTIBLE}\r\n\t\tgroup by RL.LocationUnitNumber,  RC.SubLocationUnitNumber, POL.pol_key,  RC.RatingCoverageAKId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,RatingCoverageAKId ORDER BY pol_key) = 1\n),\nEXP_Deductible_out AS (\n\tSELECT\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\tCoverageDeductibleValue,\n\t-- *INF*: IIF(ISNULL(CoverageDeductibleValue),'0',CoverageDeductibleValue)\n\tIFF(CoverageDeductibleValue IS NULL, '0', CoverageDeductibleValue) AS o_CoverageDeductibleValue,\n\tin_pol_key AS pol_key,\n\tin_RCStatCoverageAKId AS RCStatCoverageAKId,\n\tin_SourceSystemID AS SourceSystemID,\n\tin_TableCode1 AS TableCode1\n\tFROM LKP_CoverageDeductibleActive\n),\nAGG_Deductible AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tLocationUnitNumber,\n\tSubLocationUnitNumber,\n\to_CoverageDeductibleValue AS CoverageDeductibleValue,\n\t-- *INF*: TO_INTEGER(CoverageDeductibleValue)\n\tCAST(CoverageDeductibleValue AS INTEGER) AS o_CoverageDeductibleValue,\n\tSourceSystemID,\n\tTableCode1\n\tFROM EXP_Deductible_out\n\tGROUP BY pol_key, RCStatCoverageAKId\n),\nSRT_Deductible AS (\n\tSELECT\n\tpol_key, \n\tRCStatCoverageAKId, \n\tSourceSystemID, \n\tTableCode1, \n\to_CoverageDeductibleValue AS CoverageDeductibleValue\n\tFROM AGG_Deductible\n\tORDER BY pol_key ASC, RCStatCoverageAKId ASC, SourceSystemID ASC, TableCode1 ASC\n),\nLKP_PremiumDCT AS (\n\tSELECT\n\tsumPremiumTransactionAmount,\n\tsumChangeInEarnedPremium,\n\tYEAR,\n\tPolicyKey,\n\tRatingCoverageAKId\n\tFROM (\n\t\tselect \r\n\t\tsum(PremiumTransactionAmount) as sumPremiumTransactionAmount, \r\n\t\tsum(ChangeInEarnedPremium) as sumChangeInEarnedPremium, \r\n\t\tyear(RunDate) as YEAR,\r\n\t\tPolicyKey as PolicyKey,\r\n\t\tRatingCoverageAKID as RatingCoverageAKID\r\n\t\tFrom\r\n\t\t(\r\n\t\tSELECT \r\n\t\tEarnedPremiumMonthlyCalculation.PremiumTransactionAmount, \r\n\t\tEarnedPremiumMonthlyCalculation.ChangeInEarnedPremium, \r\n\t\tEarnedPremiumMonthlyCalculation.PolicyKey as PolicyKey, \r\n\t\tEarnedPremiumMonthlyCalculation.RatingCoverageAKID as RatingCoverageAKID ,\r\n\t\tEarnedPremiumMonthlyCalculation.RunDate\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.EarnedPremiumMonthlyCalculation  with (nolock)\r\n\t\twhere RatingCoverageAKId !=-1 and year(RunDate)=@{pipeline().parameters.YEAR} \r\n\t\t--and PolicyEffectiveDate != StatisticalCoverageCancellationDate\r\n\t\tand PremiumType='D'\r\n\t\t@{pipeline().parameters.WHERE_PREM_DCT}\r\n\t\t) A\r\n\t\tgroup by year(RunDate),PolicyKey,RatingCoverageAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,RatingCoverageAKId ORDER BY sumPremiumTransactionAmount) = 1\n),\nLKP_PremiumPMS AS (\n\tSELECT\n\tsumPremiumTransactionAmount,\n\tsumChangeInEarnedPremium,\n\tYEAR,\n\tPolicyKey,\n\tStatisticalCoverageAKID\n\tFROM (\n\t\tselect \r\n\t\tsum(PremiumTransactionAmount) as sumPremiumTransactionAmount, \r\n\t\tsum(ChangeInEarnedPremium) as sumChangeInEarnedPremium, \r\n\t\tyear(RunDate) as YEAR,\r\n\t\tPolicyKey as PolicyKey,\r\n\t\tStatisticalCoverageAKID as StatisticalCoverageAKID\r\n\t\tFrom\r\n\t\t(\r\n\t\tSELECT \r\n\t\tEarnedPremiumMonthlyCalculation.PremiumTransactionAmount, \r\n\t\tEarnedPremiumMonthlyCalculation.ChangeInEarnedPremium, \r\n\t\tEarnedPremiumMonthlyCalculation.PolicyKey as PolicyKey, \r\n\t\tEarnedPremiumMonthlyCalculation.StatisticalCoverageAKID as StatisticalCoverageAKID,\r\n\t\tEarnedPremiumMonthlyCalculation.RatingCoverageAKId as RatingCoverageAKId,\r\n\t\tEarnedPremiumMonthlyCalculation.RunDate\r\n\t\tfrom \r\n\t\t@{pipeline().parameters.DATABASE_NAME_IL}.dbo.EarnedPremiumMonthlyCalculation  with (nolock)\r\n\t\twhere\r\n\t\tRatingCoverageAKId=-1 and year(RunDate)=@{pipeline().parameters.YEAR} \r\n\t\t--and PolicyEffectiveDate != StatisticalCoverageCancellationDate\r\n\t\tand PremiumType='D'\r\n\t\t@{pipeline().parameters.WHERE_PREM_PMS}\r\n\t\t) A\r\n\t\tgroup by year(RunDate),PolicyKey,StatisticalCoverageAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,StatisticalCoverageAKID ORDER BY sumPremiumTransactionAmount) = 1\n),\nEXP_ConsolodatePremium AS (\n\tSELECT\n\tEXP_BreakOutCalculations.pol_key,\n\tEXP_BreakOutCalculations.RCStatCoverageAKId,\n\tEXP_BreakOutCalculations.SourceSystemID,\n\tEXP_BreakOutCalculations.TableCode1,\n\tEXP_BreakOutCalculations.PolicyEffectiveDateYear AS YEAR,\n\tEXP_BreakOutCalculations.STABBR,\n\tEXP_BreakOutCalculations.COCODE,\n\tEXP_BreakOutCalculations.COTYPE,\n\tEXP_BreakOutCalculations.LOB,\n\tEXP_BreakOutCalculations.ZIP,\n\tEXP_BreakOutCalculations.POLCAT,\n\tEXP_BreakOutCalculations.COVERAGE,\n\tEXP_BreakOutCalculations.IND_CODE_TYPE,\n\tEXP_BreakOutCalculations.CODE,\n\tEXP_BreakOutCalculations.POLTYPE,\n\tEXP_BreakOutCalculations.COVTYPE,\n\t1 AS POLNUM,\n\tEXP_BreakOutCalculations.o_Location_Counter AS ESTNUM,\n\t0 AS Limit,\n\tLKP_PremiumPMS.sumPremiumTransactionAmount AS PMSsumPremiumTransactionAmount,\n\tLKP_PremiumPMS.sumChangeInEarnedPremium AS PMSsumChangeInEarnedPremium,\n\tLKP_PremiumDCT.sumPremiumTransactionAmount AS DCTsumPremiumTransactionAmount,\n\tLKP_PremiumDCT.sumChangeInEarnedPremium AS DCTsumChangeInEarnedPremium,\n\t-- *INF*: DECODE(True,\r\n\t-- SourceSystemID='PMS' and not ISNULL( PMSsumPremiumTransactionAmount),PMSsumPremiumTransactionAmount,\r\n\t-- SourceSystemID='DCT' and not ISNULL(DCTsumPremiumTransactionAmount),DCTsumPremiumTransactionAmount,\r\n\t-- 0\r\n\t-- )\n\tDECODE(\n\t    True,\n\t    SourceSystemID = 'PMS' and PMSsumPremiumTransactionAmount IS NOT NULL, PMSsumPremiumTransactionAmount,\n\t    SourceSystemID = 'DCT' and DCTsumPremiumTransactionAmount IS NOT NULL, DCTsumPremiumTransactionAmount,\n\t    0\n\t) AS DirectWrittenPremium,\n\t-- *INF*: DECODE(True,\r\n\t-- SourceSystemID='PMS' and not isnull(PMSsumChangeInEarnedPremium),PMSsumChangeInEarnedPremium,\r\n\t-- SourceSystemID='DCT' and not isnull(DCTsumChangeInEarnedPremium),DCTsumChangeInEarnedPremium,\r\n\t-- 0\r\n\t-- )\n\tDECODE(\n\t    True,\n\t    SourceSystemID = 'PMS' and PMSsumChangeInEarnedPremium IS NOT NULL, PMSsumChangeInEarnedPremium,\n\t    SourceSystemID = 'DCT' and DCTsumChangeInEarnedPremium IS NOT NULL, DCTsumChangeInEarnedPremium,\n\t    0\n\t) AS EarnedPremium,\n\tEXP_BreakOutCalculations.TableCodeInsuranceLine,\n\tEXP_BreakOutCalculations.ReinsurancePercent,\n\t-- *INF*: DECODE(True,\r\n\t-- SourceSystemID='PMS' and not isnull(PMSsumChangeInEarnedPremium ),PMSsumChangeInEarnedPremium * ReinsurancePercent,\r\n\t-- SourceSystemID='DCT' and not isnull(DCTsumChangeInEarnedPremium),DCTsumChangeInEarnedPremium * ReinsurancePercent,\r\n\t-- 0\r\n\t-- )\n\tDECODE(\n\t    True,\n\t    SourceSystemID = 'PMS' and PMSsumChangeInEarnedPremium IS NOT NULL, PMSsumChangeInEarnedPremium * ReinsurancePercent,\n\t    SourceSystemID = 'DCT' and DCTsumChangeInEarnedPremium IS NOT NULL, DCTsumChangeInEarnedPremium * ReinsurancePercent,\n\t    0\n\t) AS ReinsuranceEarnedPremium,\n\tEXP_BreakOutCalculations.terrorism_risk_ind,\n\tEXP_BreakOutCalculations.ExtractDate,\n\tEXP_BreakOutCalculations.AuditID,\n\tEXP_BreakOutCalculations.IsBlackListCoverage\n\tFROM EXP_BreakOutCalculations\n\tLEFT JOIN LKP_PremiumDCT\n\tON LKP_PremiumDCT.PolicyKey = EXP_BreakOutCalculations.pol_key AND LKP_PremiumDCT.RatingCoverageAKId = EXP_BreakOutCalculations.RCStatCoverageAKId\n\tLEFT JOIN LKP_PremiumPMS\n\tON LKP_PremiumPMS.PolicyKey = EXP_BreakOutCalculations.pol_key AND LKP_PremiumPMS.StatisticalCoverageAKID = EXP_BreakOutCalculations.RCStatCoverageAKId\n),\nSRT_Premium AS (\n\tSELECT\n\tpol_key, \n\tRCStatCoverageAKId, \n\tSourceSystemID, \n\tTableCode1, \n\tYEAR, \n\tSTABBR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tZIP, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\tPOLNUM, \n\tESTNUM, \n\tDirectWrittenPremium, \n\tEarnedPremium, \n\tTableCodeInsuranceLine, \n\tReinsurancePercent, \n\tReinsuranceEarnedPremium, \n\tterrorism_risk_ind, \n\tExtractDate, \n\tAuditID, \n\tIsBlackListCoverage\n\tFROM EXP_ConsolodatePremium\n\tORDER BY pol_key ASC, RCStatCoverageAKId ASC, SourceSystemID ASC, TableCode1 ASC\n),\nJNR_Premium_Deductible AS (SELECT\n\tSRT_Deductible.pol_key, \n\tSRT_Deductible.RCStatCoverageAKId, \n\tSRT_Deductible.CoverageDeductibleValue AS o_CoverageDeductibleValue, \n\tSRT_Premium.pol_key AS pol_key1, \n\tSRT_Premium.RCStatCoverageAKId AS RCStatCoverageAKId1, \n\tSRT_Premium.SourceSystemID, \n\tSRT_Premium.TableCode1, \n\tSRT_Premium.YEAR, \n\tSRT_Premium.STABBR, \n\tSRT_Premium.COCODE, \n\tSRT_Premium.COTYPE, \n\tSRT_Premium.LOB, \n\tSRT_Premium.ZIP, \n\tSRT_Premium.POLCAT, \n\tSRT_Premium.COVERAGE, \n\tSRT_Premium.IND_CODE_TYPE, \n\tSRT_Premium.CODE, \n\tSRT_Premium.POLTYPE, \n\tSRT_Premium.COVTYPE, \n\tSRT_Premium.POLNUM, \n\tSRT_Premium.ESTNUM, \n\tSRT_Premium.DirectWrittenPremium, \n\tSRT_Premium.EarnedPremium, \n\tSRT_Premium.TableCodeInsuranceLine, \n\tSRT_Premium.ReinsurancePercent, \n\tSRT_Premium.ReinsuranceEarnedPremium, \n\tSRT_Premium.terrorism_risk_ind, \n\tSRT_Premium.ExtractDate, \n\tSRT_Premium.AuditID, \n\tSRT_Premium.IsBlackListCoverage\n\tFROM SRT_Deductible\n\tRIGHT OUTER JOIN SRT_Premium\n\tON SRT_Premium.pol_key = SRT_Deductible.pol_key AND SRT_Premium.RCStatCoverageAKId = SRT_Deductible.RCStatCoverageAKId\n),\nJNR_LimitsAndPremiumns AS (SELECT\n\tAGG_LimitTotalPolicyCoverage.pol_key, \n\tAGG_LimitTotalPolicyCoverage.o_CoverageLimitValue AS CoverageLimitValue, \n\tAGG_LimitTotalPolicyCoverage.RCStatCoverageAKID, \n\tAGG_LimitTotalPolicyCoverage.in_SourceSystemID, \n\tAGG_LimitTotalPolicyCoverage.in_TableCode1, \n\tAGG_LimitTotalPolicyCoverage.LimitHashKey, \n\tJNR_Premium_Deductible.pol_key1, \n\tJNR_Premium_Deductible.RCStatCoverageAKId1, \n\tJNR_Premium_Deductible.SourceSystemID, \n\tJNR_Premium_Deductible.TableCode1, \n\tJNR_Premium_Deductible.YEAR, \n\tJNR_Premium_Deductible.STABBR, \n\tJNR_Premium_Deductible.COCODE, \n\tJNR_Premium_Deductible.COTYPE, \n\tJNR_Premium_Deductible.LOB, \n\tJNR_Premium_Deductible.ZIP, \n\tJNR_Premium_Deductible.POLCAT, \n\tJNR_Premium_Deductible.COVERAGE, \n\tJNR_Premium_Deductible.IND_CODE_TYPE, \n\tJNR_Premium_Deductible.CODE, \n\tJNR_Premium_Deductible.POLTYPE, \n\tJNR_Premium_Deductible.COVTYPE, \n\tJNR_Premium_Deductible.POLNUM, \n\tJNR_Premium_Deductible.ESTNUM, \n\tJNR_Premium_Deductible.DirectWrittenPremium, \n\tJNR_Premium_Deductible.EarnedPremium, \n\tJNR_Premium_Deductible.TableCodeInsuranceLine, \n\tJNR_Premium_Deductible.ReinsurancePercent, \n\tJNR_Premium_Deductible.ReinsuranceEarnedPremium, \n\tJNR_Premium_Deductible.terrorism_risk_ind, \n\tJNR_Premium_Deductible.ExtractDate, \n\tJNR_Premium_Deductible.AuditID, \n\tJNR_Premium_Deductible.IsBlackListCoverage, \n\tJNR_Premium_Deductible.o_CoverageDeductibleValue AS CoverageDeductibleValue\n\tFROM JNR_Premium_Deductible\n\tLEFT OUTER JOIN AGG_LimitTotalPolicyCoverage\n\tON AGG_LimitTotalPolicyCoverage.pol_key = JNR_Premium_Deductible.pol_key1 AND AGG_LimitTotalPolicyCoverage.RCStatCoverageAKID = JNR_Premium_Deductible.RCStatCoverageAKId1 AND AGG_LimitTotalPolicyCoverage.in_SourceSystemID = JNR_Premium_Deductible.SourceSystemID AND AGG_LimitTotalPolicyCoverage.in_TableCode1 = JNR_Premium_Deductible.TableCode1\n),\nEXP_JoinerOutput AS (\n\tSELECT\n\tpol_key1,\n\tRCStatCoverageAKId1,\n\tSourceSystemID,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\t-- *INF*: IIF(CODE='N/A','',CODE)\r\n\t-- \r\n\t-- -- replace N/A with an empty string, we can't have nulls and NAICS doesn't want N/A\n\tIFF(CODE = 'N/A', '', CODE) AS o_CODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tPOLNUM,\n\tESTNUM,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tCoverageLimitValue,\n\t-- *INF*: IIF(ISNULL(CoverageLimitValue),0,CoverageLimitValue)\n\tIFF(CoverageLimitValue IS NULL, 0, CoverageLimitValue) AS v_CoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TableCodeInsuranceLine='Liability' and COVERAGE='04',:LKP.LKP_POLICYLIMITS_UMBRELLA(pol_key1),\r\n\t-- TableCodeInsuranceLine='Liability',:LKP.LKP_POLICYLIMITS(pol_key1),\r\n\t-- 'N/A')\r\n\t-- \r\n\t-- --IIF(TableCodeInsuranceLine='Liability',:LKP.LKP_POLICYLIMITS(pol_key1),'N/A')\n\tDECODE(\n\t    TRUE,\n\t    TableCodeInsuranceLine = 'Liability' and COVERAGE = '04', LKP_POLICYLIMITS_UMBRELLA_pol_key1.PolicyPerOccurenceLimit,\n\t    TableCodeInsuranceLine = 'Liability', LKP_POLICYLIMITS_pol_key1.PolicyPerOccurenceLimit,\n\t    'N/A'\n\t) AS v_Lkp_PolicyLimitValue,\n\tv_Lkp_PolicyLimitValue AS o_Lkp_PolicyLimitValue,\n\tv_CoverageLimitValue AS o_CoverageLimitValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TableCodeInsuranceLine='Liability' and IS_NUMBER(v_Lkp_PolicyLimitValue) and v_CoverageLimitValue=0,to_integer(v_Lkp_PolicyLimitValue),\r\n\t-- v_CoverageLimitValue)\n\tDECODE(\n\t    TRUE,\n\t    TableCodeInsuranceLine = 'Liability' and REGEXP_LIKE(v_Lkp_PolicyLimitValue, '^[0-9]+$') and v_CoverageLimitValue = 0, CAST(v_Lkp_PolicyLimitValue AS INTEGER),\n\t    v_CoverageLimitValue\n\t) AS o_CoverageLimitValue_SubTotal,\n\tIsBlackListCoverage,\n\t-- *INF*: IIF(SourceSystemID='PMS' and NOT isnull(:LKP.LKP_STATCOVCLASS11111(RCStatCoverageAKId1)),'TRUE' ,'FALSE')\n\tIFF(\n\t    SourceSystemID = 'PMS'\n\t    and LKP_STATCOVCLASS11111_RCStatCoverageAKId1.StatisticalCoverageID IS NOT NULL,\n\t    'TRUE',\n\t    'FALSE'\n\t) AS v_PMSPlusPakClassCode,\n\t-- *INF*: IIF(v_PMSPlusPakClassCode='TRUE','Y',IsBlackListCoverage)\r\n\t-- \r\n\t-- --override the policy blacklist value for this record if it happens to be a pms plus pak coverage record.  Blacklist means do not count it in ther terrorism calcs\n\tIFF(v_PMSPlusPakClassCode = 'TRUE', 'Y', IsBlackListCoverage) AS o_BlackListCoverage,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TableCodeInsuranceLine='Liability' and IS_NUMBER(v_Lkp_PolicyLimitValue) and v_CoverageLimitValue!=0,to_integer(v_Lkp_PolicyLimitValue) + v_CoverageLimitValue,\r\n\t-- \r\n\t-- TableCodeInsuranceLine='Liability' and COVERAGE='04' and is_number(:LKP.LKP_POLICYLIMITS(pol_key1)) and is_number(v_Lkp_PolicyLimitValue), to_integer(:LKP.LKP_POLICYLIMITS(pol_key1))+ to_integer(v_Lkp_PolicyLimitValue),\r\n\t-- \r\n\t--  IS_NUMBER(v_Lkp_PolicyLimitValue),to_integer(v_Lkp_PolicyLimitValue),\r\n\t-- 0\r\n\t-- )\r\n\t-- \r\n\t-- -- case 1 is for EPLI coverage to be added to policy limit\r\n\t-- -- case 2 is for commercial umbrella to combine with GL policy limit\r\n\t-- -- case three is for all the other GL that just return a policy limit\n\tDECODE(\n\t    TRUE,\n\t    TableCodeInsuranceLine = 'Liability' and REGEXP_LIKE(v_Lkp_PolicyLimitValue, '^[0-9]+$') and v_CoverageLimitValue != 0, CAST(v_Lkp_PolicyLimitValue AS INTEGER) + v_CoverageLimitValue,\n\t    TableCodeInsuranceLine = 'Liability' and COVERAGE = '04' and REGEXP_LIKE(LKP_POLICYLIMITS_pol_key1.PolicyPerOccurenceLimit, '^[0-9]+$') and REGEXP_LIKE(v_Lkp_PolicyLimitValue, '^[0-9]+$'), CAST(LKP_POLICYLIMITS_pol_key1.PolicyPerOccurenceLimit AS INTEGER) + CAST(v_Lkp_PolicyLimitValue AS INTEGER),\n\t    REGEXP_LIKE(v_Lkp_PolicyLimitValue, '^[0-9]+$'), CAST(v_Lkp_PolicyLimitValue AS INTEGER),\n\t    0\n\t) AS o_CoverageLimitValue_GL_State_Override,\n\tLimitHashKey,\n\tCoverageDeductibleValue AS in_CoverageDeductibleValue,\n\t-- *INF*: IIF(ISNULL(in_CoverageDeductibleValue),0,in_CoverageDeductibleValue)\n\tIFF(in_CoverageDeductibleValue IS NULL, 0, in_CoverageDeductibleValue) AS o_CoverageDeductibleValue\n\tFROM JNR_LimitsAndPremiumns\n\tLEFT JOIN LKP_POLICYLIMITS_UMBRELLA LKP_POLICYLIMITS_UMBRELLA_pol_key1\n\tON LKP_POLICYLIMITS_UMBRELLA_pol_key1.pol_key = pol_key1\n\n\tLEFT JOIN LKP_POLICYLIMITS LKP_POLICYLIMITS_pol_key1\n\tON LKP_POLICYLIMITS_pol_key1.pol_key = pol_key1\n\n\tLEFT JOIN LKP_STATCOVCLASS11111 LKP_STATCOVCLASS11111_RCStatCoverageAKId1\n\tON LKP_STATCOVCLASS11111_RCStatCoverageAKId1.StatisticalCoverageAKID = RCStatCoverageAKId1\n\n),\nEXP_Apply_GLOverrideRule AS (\n\tSELECT\n\tpol_key1,\n\tRCStatCoverageAKId1,\n\tSourceSystemID,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\to_CODE AS CODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tPOLNUM,\n\tESTNUM,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\to_CoverageLimitValue_SubTotal AS CoverageLimitValue,\n\to_BlackListCoverage AS IsBlackListCoverage,\n\to_CoverageLimitValue_GL_State_Override AS CoverageLimitValue_GL_State_Override,\n\tLimitHashKey\n\tFROM EXP_JoinerOutput\n),\nRTR_RouteByLines AS (\n\tSELECT\n\tpol_key1 AS pol_key,\n\tRCStatCoverageAKId1 AS RCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tPOLNUM,\n\tESTNUM,\n\tCoverageLimitValue AS Limit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage,\n\tCoverageLimitValue_GL_State_Override AS CoverageLimitValueGLPolicyOverrideState,\n\tLimitHashKey\n\tFROM EXP_Apply_GLOverrideRule\n),\nRTR_RouteByLines_Property AS (SELECT * FROM RTR_RouteByLines WHERE TableCode1='1' and substr(COVERAGE,1,3) !='N/A'),\nRTR_RouteByLines_LIability AS (SELECT * FROM RTR_RouteByLines WHERE TableCode1='2' and substr(COVERAGE,1,3) !='N/A'),\nRTR_RouteByLines_InlandMarine AS (SELECT * FROM RTR_RouteByLines WHERE TableCode1='3'),\nEXP_InlandMarineBreakout AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tpol_key AS v_current_pol_key,\n\t-- *INF*: iif(v_current_pol_key=v_previous_pol_key,0,1)\r\n\t-- \r\n\t-- -- counter for unique policies- assign 1 to a unique policies, 0 to the rest.\n\tIFF(v_current_pol_key = v_previous_pol_key, 0, 1) AS POLNUM,\n\tESTNUM,\n\tLimit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tv_current_pol_key AS v_previous_pol_key,\n\tIsBlackListCoverage AS IsBlackListCoverage4\n\tFROM RTR_RouteByLines_InlandMarine\n),\nAGG_IMPolicyTerrorismIndLevel AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tLimit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage4 AS IsBlackListCoverage,\n\t-- *INF*: IIF(terrorism_risk_ind='Y'  and IsBlackListCoverage='N',sum(DirectWrittenPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(DirectWrittenPremium)) AS PRWTERR,\n\t-- *INF*: sum(DirectWrittenPremium)\n\tsum(DirectWrittenPremium) AS PRWTOT,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',sum(Limit))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(Limit)) AS LIMITSTERR,\n\t-- *INF*: sum(Limit)\n\tsum(Limit) AS LIMITSTOT,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',sum(EarnedPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(EarnedPremium)) AS PRETERR,\n\t-- *INF*: sum(EarnedPremium)\n\tsum(EarnedPremium) AS PRETOT,\n\t-- *INF*: sum(ReinsuranceEarnedPremium)\n\tsum(ReinsuranceEarnedPremium) AS GREINSPREM\n\tFROM EXP_InlandMarineBreakout\n\tGROUP BY pol_key, TableCode1, YEAR, STABBR, COCODE, COTYPE, LOB, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, terrorism_risk_ind, IsBlackListCoverage\n),\nSRT_IMBYPolicyZip AS (\n\tSELECT\n\tpol_key, \n\tZIP, \n\tTableCode1, \n\tYEAR, \n\tSTABBR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\tExtractDate, \n\tAuditID, \n\tPRWTERR, \n\tPRWTOT, \n\tLIMITSTERR, \n\tLIMITSTOT, \n\tPRETERR, \n\tPRETOT, \n\tGREINSPREM\n\tFROM AGG_IMPolicyTerrorismIndLevel\n\tORDER BY pol_key ASC, ZIP ASC\n),\nAGG_InlandMarineZIP AS (\n\tSELECT\n\tTableCode1 AS TableCode11,\n\tYEAR AS YEAR1,\n\tSTABBR AS STABBR1,\n\tCOCODE AS COCODE1,\n\tCOTYPE AS COTYPE1,\n\tLOB AS LOB1,\n\tZIP AS ZIP1,\n\tPOLCAT AS POLCAT1,\n\tCOVERAGE AS COVERAGE1,\n\tIND_CODE_TYPE AS IND_CODE_TYPE1,\n\tCODE AS CODE1,\n\tPOLTYPE AS POLTYPE1,\n\tCOVTYPE AS COVTYPE1,\n\tExtractDate,\n\tAuditID,\n\tpol_key,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- pol_key=v_previous_pol_key and ZIP1=v_previous_zip, v_POLNUM,\r\n\t-- pol_key!=v_previous_pol_key and ZIP1=v_previous_zip, v_POLNUM+1,\r\n\t-- 1\r\n\t-- )\r\n\t-- \r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    pol_key = v_previous_pol_key and ZIP1 = v_previous_zip, v_POLNUM,\n\t    pol_key != v_previous_pol_key and ZIP1 = v_previous_zip, v_POLNUM + 1,\n\t    1\n\t) AS v_POLNUM,\n\tpol_key AS v_previous_pol_key,\n\tZIP1 AS v_previous_zip,\n\tv_POLNUM AS o_PolNum,\n\tPRWTERR AS in_PRWTERR,\n\tPRWTOT AS in_PRWTOT,\n\tLIMITSTERR AS in_LIMITSTERR,\n\tLIMITSTOT AS in_LIMITSTOT,\n\tPRETERR AS in_PRETERR,\n\tPRETOT AS in_PRETOT,\n\tGREINSPREM AS in_GREINSPREM,\n\t-- *INF*: sum(in_PRWTERR)\n\tsum(in_PRWTERR) AS PRWTERR,\n\t-- *INF*: sum(in_PRWTOT)\n\tsum(in_PRWTOT) AS PRWTOT,\n\t-- *INF*: sum(in_LIMITSTERR)\n\tsum(in_LIMITSTERR) AS LIMITSTERR,\n\t-- *INF*: sum(in_LIMITSTOT)\n\tsum(in_LIMITSTOT) AS LIMITSTOT,\n\t-- *INF*: sum(in_PRETERR)\n\tsum(in_PRETERR) AS PRETERR,\n\t-- *INF*: sum(in_PRETOT)\n\tsum(in_PRETOT) AS PRETOT,\n\t-- *INF*: sum(in_GREINSPREM)\n\tsum(in_GREINSPREM) AS GREINSPREM\n\tFROM SRT_IMBYPolicyZip\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1, COTYPE1, LOB1, ZIP1, POLCAT1, COVERAGE1, IND_CODE_TYPE1, CODE1, POLTYPE1, COVTYPE1\n),\nAGG_InlandMarineState AS (\n\tSELECT\n\tTableCode11,\n\tYEAR1,\n\tSTABBR1,\n\tCOCODE1,\n\tPRWTERR AS i_PRWTERR,\n\t-- *INF*: sum(i_PRWTERR)\n\tsum(i_PRWTERR) AS o_PRWTERR,\n\tPRWTOT AS i_PRWTOT,\n\t-- *INF*: sum(i_PRWTOT)\n\tsum(i_PRWTOT) AS o_PRWTOT,\n\tLIMITSTERR AS i_TIVTERR,\n\t-- *INF*: sum(i_TIVTERR)\n\tsum(i_TIVTERR) AS o_TIVTERR,\n\tLIMITSTOT AS i_TIVTOT,\n\t-- *INF*: sum(i_TIVTOT)\n\tsum(i_TIVTOT) AS o_TIVTOT,\n\tGREINSPREM AS i_GREINSPREM,\n\t-- *INF*: sum(i_GREINSPREM)\n\tsum(i_GREINSPREM) AS o_GREINSPREM,\n\tPRETERR AS i_PRETERR,\n\t-- *INF*: sum(i_PRETERR)\n\tsum(i_PRETERR) AS o_PRETERR,\n\tPRETOT AS i_PRETOT,\n\t-- *INF*: sum(i_PRETOT)\n\tsum(i_PRETOT) AS o_PRETOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_InlandMarineZIP\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1\n),\nEXP_InlandMarineStateOutput AS (\n\tSELECT\n\t'NaicTerrorismInlandMarineState' || @{pipeline().parameters.YEAR}||'.csv' AS Filename,\n\tTableCode11,\n\tTableCode11 || 'S' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tSTABBR1 AS STABBR,\n\to_PRWTERR AS PRWTERR,\n\to_PRWTOT AS PRWTOT,\n\to_PRETERR AS PRETERR,\n\to_PRETOT AS PRETOT,\n\to_GREINSPREM AS GREINSPREM,\n\to_TIVTERR AS TIVTERR,\n\to_TIVTOT AS TIVTOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_InlandMarineState\n),\nNaicTerrorismInlandMarineStateExtractFile AS (\n\tINSERT INTO NaicTerrorismInlandMarineStateExtractFile\n\t(FileName, TableCode, YEAR, COCODE, STABBR, PRWTERR, PRWTOT, PRETERR, PRETOT, GREINSPREM, TIVTERR, TIVTOT)\n\tSELECT \n\tFilename AS FILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tSTABBR, \n\tPRWTERR, \n\tPRWTOT, \n\tPRETERR, \n\tPRETOT, \n\tGREINSPREM, \n\tTIVTERR, \n\tTIVTOT\n\tFROM EXP_InlandMarineStateOutput\n),\nEXP_LiabilityBreakout AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tSourceSystemID AS SourceSystemID3,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tESTNUM,\n\tLimit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage AS IsBlackListCoverage3,\n\tCoverageLimitValueGLPolicyOverrideState AS CoverageLimitValueGLPolicyOverrideState3\n\tFROM RTR_RouteByLines_LIability\n),\nEXP_LiabilityCheckPolicyLimits AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tLimit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage3,\n\tCoverageLimitValueGLPolicyOverrideState3\n\tFROM EXP_LiabilityBreakout\n),\nAGG_LiabilityPreZipPolicyLevelCalculateByBlacklistFlag AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tLimit,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',MAX(Limit))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', MAX(Limit)) AS LIMITSTERR,\n\t-- *INF*: MAX(Limit)\n\tMAX(Limit) AS LIMITSTOT,\n\tDirectWrittenPremium,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',sum(DirectWrittenPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(DirectWrittenPremium)) AS PRWTERR,\n\t-- *INF*: sum(DirectWrittenPremium)\n\tsum(DirectWrittenPremium) AS PRWTOT,\n\tEarnedPremium,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',SUM(EarnedPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', SUM(EarnedPremium)) AS PRETERR,\n\t-- *INF*: sum(EarnedPremium)\n\tsum(EarnedPremium) AS PRETOT,\n\tReinsuranceEarnedPremium,\n\t-- *INF*: sum(ReinsuranceEarnedPremium)\n\tsum(ReinsuranceEarnedPremium) AS GREINSPREM,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage3 AS IsBlackListCoverage,\n\tCoverageLimitValueGLPolicyOverrideState3 AS CoverageLimitValueGLPolicyOverrideState,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',MAX(CoverageLimitValueGLPolicyOverrideState))\n\tIFF(\n\t    terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N',\n\t    MAX(CoverageLimitValueGLPolicyOverrideState)\n\t) AS LIMITSTERR_Override,\n\t-- *INF*: max(CoverageLimitValueGLPolicyOverrideState)\n\tmax(CoverageLimitValueGLPolicyOverrideState) AS LIMITSTOT_Override\n\tFROM EXP_LiabilityCheckPolicyLimits\n\tGROUP BY pol_key, TableCode1, YEAR, STABBR, COCODE, COTYPE, LOB, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, Limit, DirectWrittenPremium, EarnedPremium, ReinsuranceEarnedPremium, terrorism_risk_ind, IsBlackListCoverage\n),\nAGG_LiabilityPreZipPolicyLevelTotals AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\t1 AS PolicyNumber,\n\tLIMITSTERR AS in_LIMITSTERR,\n\t-- *INF*: max(in_LIMITSTERR)\n\tmax(in_LIMITSTERR) AS o_LIMITSTERR,\n\tLIMITSTOT AS in_LIMITSTOT,\n\t-- *INF*: max(in_LIMITSTOT)\n\tmax(in_LIMITSTOT) AS o_LIMITSTOT,\n\tPRWTERR AS in_PRWTERR,\n\t-- *INF*: sum(in_PRWTERR)\n\tsum(in_PRWTERR) AS o_PRWTERR,\n\tPRWTOT AS in_PRWTOT,\n\t-- *INF*: sum(in_PRWTOT)\n\tsum(in_PRWTOT) AS o_PRWTOT,\n\tPRETERR AS in_PRETERR,\n\t-- *INF*: sum(in_PRETERR)\n\tsum(in_PRETERR) AS o_PRETERR,\n\tPRETOT AS in_PRETOT,\n\t-- *INF*: sum(in_PRETOT)\n\tsum(in_PRETOT) AS o_PRETOT,\n\tGREINSPREM AS in_GREINSPREM,\n\t-- *INF*: sum(in_GREINSPREM)\n\tsum(in_GREINSPREM) AS o_GREINSPREM,\n\tExtractDate,\n\tAuditID,\n\tLIMITSTERR_Override AS in_LIMITSTERR_Override,\n\t-- *INF*: max(in_LIMITSTERR_Override)\n\tmax(in_LIMITSTERR_Override) AS o_LIMITSTERR_Override,\n\tLIMITSTOT_Override AS in_LIMITSTOT_Override,\n\t-- *INF*: max(in_LIMITSTOT_Override)\n\tmax(in_LIMITSTOT_Override) AS o_LIMITSTOT_Override\n\tFROM AGG_LiabilityPreZipPolicyLevelCalculateByBlacklistFlag\n\tGROUP BY pol_key, TableCode1, YEAR, STABBR, COCODE, COTYPE, LOB, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE\n),\nAGG_LiabilityZIP AS (\n\tSELECT\n\tTableCode1 AS TableCode11,\n\tYEAR AS YEAR1,\n\tSTABBR AS STABBR1,\n\tCOCODE AS COCODE1,\n\tCOTYPE AS COTYPE1,\n\tLOB AS LOB1,\n\tZIP AS ZIP1,\n\tPOLCAT AS POLCAT1,\n\tCOVERAGE AS COVERAGE1,\n\tIND_CODE_TYPE AS IND_CODE_TYPE1,\n\tCODE AS CODE1,\n\tPOLTYPE AS POLTYPE1,\n\tCOVTYPE AS COVTYPE1,\n\tExtractDate,\n\tAuditID,\n\tPolicyNumber,\n\t-- *INF*: sum(PolicyNumber)\n\tsum(PolicyNumber) AS POLNUM_Count,\n\to_LIMITSTERR AS in_LIMITSTERR,\n\to_LIMITSTOT AS in_LIMITSTOT,\n\to_PRWTERR AS in_PRWTERR,\n\to_PRWTOT AS in_PRWTOT,\n\to_GREINSPREM AS in_GREINSPREM,\n\to_PRETERR AS in_PRETERR,\n\to_PRETOT AS in_PRETOT,\n\t-- *INF*: sum(in_LIMITSTERR)\n\tsum(in_LIMITSTERR) AS out_LIMITSTERR,\n\t-- *INF*: sum(in_LIMITSTOT)\n\tsum(in_LIMITSTOT) AS out_LIMITSTOT,\n\t-- *INF*: sum(in_PRWTERR)\n\tsum(in_PRWTERR) AS out_PRWTERR,\n\t-- *INF*: sum(in_PRWTOT)\n\tsum(in_PRWTOT) AS out_PRWTOT,\n\t-- *INF*: sum(in_GREINSPREM)\n\tsum(in_GREINSPREM) AS out_GREINSPREM,\n\t-- *INF*: sum(in_PRETERR)\n\tsum(in_PRETERR) AS out_PRETERR,\n\t-- *INF*: sum(in_PRETOT)\n\tsum(in_PRETOT) AS out_PRETOT\n\tFROM AGG_LiabilityPreZipPolicyLevelTotals\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1, COTYPE1, LOB1, ZIP1, POLCAT1, COVERAGE1, IND_CODE_TYPE1, CODE1, POLTYPE1, COVTYPE1\n),\nEXP_LiabilityZipOutput AS (\n\tSELECT\n\t'NaicTerrorismLiabilityZip' || @{pipeline().parameters.YEAR}||'.csv' AS Filename,\n\tTableCode11 AS i_TableCode,\n\ti_TableCode || 'D' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tCOTYPE1 AS COTYPE,\n\tLOB1 AS LOB,\n\tSTABBR1 AS STABBR,\n\tZIP1 AS ZIP,\n\tPOLCAT1 AS POLCAT,\n\tCOVERAGE1 AS COVERAGE,\n\tIND_CODE_TYPE1 AS IND_CODE_TYPE,\n\tCODE1 AS CODE,\n\tPOLTYPE1 AS POLTYPE,\n\tCOVTYPE1 AS COVTYPE,\n\tPOLNUM_Count AS POLNUM,\n\tout_PRWTERR AS PRWTERR,\n\tout_PRWTOT AS PRWTOT,\n\tout_LIMITSTERR AS LIMITSTERR,\n\tout_LIMITSTOT AS LIMITSTOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_LiabilityZIP\n),\nNAICTerrorismZipLevelExtract_Liability AS (\n\tINSERT INTO NAICTerrorismZipLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, CoType, Lob, Stabbr, Zip, PolCat, IndCodeType, Code, PolType, CovType, PrwTerr, PrwTot, Coverage, LimitsTerr, LimitsTot, PolNum)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tCOTYPE AS COTYPE, \n\tLOB AS LOB, \n\tSTABBR AS STABBR, \n\tZIP AS ZIP, \n\tPOLCAT AS POLCAT, \n\tIND_CODE_TYPE AS INDCODETYPE, \n\tCODE AS CODE, \n\tPOLTYPE AS POLTYPE, \n\tCOVTYPE AS COVTYPE, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tCOVERAGE AS COVERAGE, \n\tLIMITSTERR AS LIMITSTERR, \n\tLIMITSTOT AS LIMITSTOT, \n\tPOLNUM AS POLNUM\n\tFROM EXP_LiabilityZipOutput\n),\nEXP_InlandMarineZipOutput AS (\n\tSELECT\n\t'NaicTerrorismInlandMarineZip' || @{pipeline().parameters.YEAR}||'.csv' AS Filename,\n\tTableCode11 AS i_TableCode,\n\ti_TableCode || 'D' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tCOTYPE1 AS COTYPE,\n\tLOB1 AS LOB,\n\tSTABBR1 AS STABBR,\n\tZIP1 AS ZIP,\n\tPOLCAT1 AS POLCAT,\n\tIND_CODE_TYPE1 AS IND_CODE_TYPE,\n\tCODE1 AS CODE,\n\tPOLTYPE1 AS POLTYPE,\n\tCOVTYPE1 AS COVTYPE,\n\tPRWTERR,\n\tPRWTOT,\n\tLIMITSTERR,\n\tLIMITSTOT,\n\tExtractDate,\n\tAuditID,\n\to_PolNum\n\tFROM AGG_InlandMarineZIP\n),\nNAICTerrorismZipLevelExtract_InlandMarine AS (\n\tINSERT INTO NAICTerrorismZipLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, CoType, Lob, Stabbr, Zip, PolCat, IndCodeType, Code, PolType, CovType, PrwTerr, PrwTot, LimitsTerr, LimitsTot, PolNum)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tCOTYPE AS COTYPE, \n\tLOB AS LOB, \n\tSTABBR AS STABBR, \n\tZIP AS ZIP, \n\tPOLCAT AS POLCAT, \n\tIND_CODE_TYPE AS INDCODETYPE, \n\tCODE AS CODE, \n\tPOLTYPE AS POLTYPE, \n\tCOVTYPE AS COVTYPE, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tLIMITSTERR AS LIMITSTERR, \n\tLIMITSTOT AS LIMITSTOT, \n\to_PolNum AS POLNUM\n\tFROM EXP_InlandMarineZipOutput\n),\nAGG_LiabilityPreStatePolicyLevelTotals AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\to_PRWTERR AS in_PRWTERR,\n\t-- *INF*: sum(in_PRWTERR)\n\tsum(in_PRWTERR) AS out_PRWTERR,\n\to_PRWTOT AS in_PRWTOT,\n\t-- *INF*: sum(in_PRWTOT)\n\tsum(in_PRWTOT) AS out_PRWTOT,\n\to_PRETERR AS in_PRETERR,\n\t-- *INF*: sum(in_PRETERR)\n\tsum(in_PRETERR) AS out_PRETERR,\n\to_PRETOT AS in_PRETOT,\n\t-- *INF*: sum(in_PRETOT)\n\tsum(in_PRETOT) AS out_PRETOT,\n\to_LIMITSTERR_Override AS in_LIMITSTERR,\n\t-- *INF*: max(in_LIMITSTERR)\n\tmax(in_LIMITSTERR) AS out_LIMITSTERR,\n\to_LIMITSTOT_Override AS in_LIMITSTOT,\n\t-- *INF*: max(in_LIMITSTOT)\n\tmax(in_LIMITSTOT) AS out_LIMITSTOT,\n\to_GREINSPREM AS in_GREINSPREM,\n\t-- *INF*: sum(in_GREINSPREM)\n\tsum(in_GREINSPREM) AS out_GREINSPREM,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_LiabilityPreZipPolicyLevelTotals\n\tGROUP BY pol_key, TableCode1, YEAR, STABBR, COCODE\n),\nAGG_LiabilityState AS (\n\tSELECT\n\tTableCode1 AS TableCode11,\n\tYEAR AS YEAR1,\n\tSTABBR AS STABBR1,\n\tCOCODE AS COCODE1,\n\tout_PRWTERR AS i_PRWTERR,\n\t-- *INF*: sum(i_PRWTERR)\n\tsum(i_PRWTERR) AS o_PRWTERR,\n\tout_PRWTOT AS i_PRWTOT,\n\t-- *INF*: sum(i_PRWTOT)\n\tsum(i_PRWTOT) AS o_PRWTOT,\n\tout_LIMITSTERR AS i_LIMITSTERR,\n\t-- *INF*: sum(i_LIMITSTERR)\n\tsum(i_LIMITSTERR) AS o_LIMITSERR,\n\tout_LIMITSTOT AS i_LIMITSTOT,\n\t-- *INF*: sum(i_LIMITSTOT)\n\tsum(i_LIMITSTOT) AS o_LIMITSTOT,\n\tout_GREINSPREM AS i_GREINSPREM,\n\t-- *INF*: sum(i_GREINSPREM)\n\tsum(i_GREINSPREM) AS o_GREINSPREM,\n\tout_PRETERR AS i_PRETERR,\n\t-- *INF*: sum(i_PRETERR)\n\tsum(i_PRETERR) AS o_PRETERR,\n\tout_PRETOT AS i_PRETOT,\n\t-- *INF*: sum(i_PRETOT)\n\tsum(i_PRETOT) AS o_PRETOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_LiabilityPreStatePolicyLevelTotals\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1\n),\nEXP_LiabilityStateOutput AS (\n\tSELECT\n\t'NaicTerrorismLiabilityState' || @{pipeline().parameters.YEAR}||'.csv' AS Filename,\n\tTableCode11,\n\tTableCode11 || 'S' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tSTABBR1 AS STABBR,\n\to_PRWTERR AS PRWTERR,\n\to_PRWTOT AS PRWTOT,\n\to_PRETERR AS PRETERR,\n\to_PRETOT AS PRETOT,\n\to_GREINSPREM AS GREINSPREM,\n\to_LIMITSERR AS LIMITSTERR,\n\to_LIMITSTOT AS LIMITSTOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_LiabilityState\n),\nNAICTerrorismStateLevelExtract_Liability AS (\n\tINSERT INTO NAICTerrorismStateLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, Stabbr, PrwTerr, PrwTot, PreTerr, PreTot, GreinsPrem, LimitsTerr, LIMITSTot)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tSTABBR AS STABBR, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tPRETERR AS PRETERR, \n\tPRETOT AS PRETOT, \n\tGREINSPREM AS GREINSPREM, \n\tLIMITSTERR AS LIMITSTERR, \n\tLIMITSTOT AS LIMITSTOT\n\tFROM EXP_LiabilityStateOutput\n),\nNaicTerrorismInlandMarineZipExtractFile AS (\n\tINSERT INTO NaicTerrorismInlandMarineZipExtractFile\n\t(FileName, TableCode, YEAR, COCODE, COTYPE, LOB, STABBR, ZIP, POLCAT, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, POLNUM, PRWTERR, PRWTOT, LIMITSTERR, LIMITSTOT)\n\tSELECT \n\tFilename AS FILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tSTABBR, \n\tZIP, \n\tPOLCAT, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\to_PolNum AS POLNUM, \n\tPRWTERR, \n\tPRWTOT, \n\tLIMITSTERR, \n\tLIMITSTOT\n\tFROM EXP_InlandMarineZipOutput\n),\nEXP_PropertyBreakout AS (\n\tSELECT\n\tpol_key,\n\tRCStatCoverageAKId,\n\tSourceSystemID,\n\tTableCode AS TableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tPOLNUM,\n\tESTNUM,\n\tLimit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tTableCodeInsuranceLine,\n\tReinsurancePercent,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage,\n\tLimitHashKey\n\tFROM RTR_RouteByLines_Property\n),\nSRT_PropertyHashKey AS (\n\tSELECT\n\tpol_key, \n\tLimitHashKey, \n\tLimit, \n\tTableCode1, \n\tYEAR, \n\tSTABBR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tZIP, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\tPOLNUM, \n\tESTNUM, \n\tDirectWrittenPremium, \n\tEarnedPremium, \n\tReinsuranceEarnedPremium, \n\tterrorism_risk_ind, \n\tExtractDate, \n\tAuditID, \n\tIsBlackListCoverage\n\tFROM EXP_PropertyBreakout\n\tORDER BY pol_key ASC, LimitHashKey ASC, Limit DESC\n),\nEXP_PropertyZeroOutLimitFoDupCache AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tPOLNUM,\n\tESTNUM,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tReinsuranceEarnedPremium,\n\tterrorism_risk_ind,\n\tExtractDate,\n\tAuditID,\n\tIsBlackListCoverage,\n\tLimit,\n\tLimitHashKey,\n\t-- *INF*: IIF(LimitHashKey=v_previous_hash_key,'Y','N')\n\tIFF(LimitHashKey = v_previous_hash_key, 'Y', 'N') AS v_hashKey,\n\t-- *INF*: IIF(v_hashKey='Y',0,Limit)\n\tIFF(v_hashKey = 'Y', 0, Limit) AS o_Limit,\n\tLimitHashKey AS v_previous_hash_key\n\tFROM SRT_PropertyHashKey\n),\nAGG_PropertyPolicyTerroismLevel AS (\n\tSELECT\n\tpol_key,\n\tTableCode1,\n\tYEAR,\n\tSTABBR,\n\tCOCODE,\n\tCOTYPE,\n\tLOB,\n\tZIP,\n\tPOLCAT,\n\tCOVERAGE,\n\tIND_CODE_TYPE,\n\tCODE,\n\tPOLTYPE,\n\tCOVTYPE,\n\tESTNUM,\n\tterrorism_risk_ind,\n\tIsBlackListCoverage,\n\to_Limit AS Limit,\n\tDirectWrittenPremium,\n\tEarnedPremium,\n\tReinsuranceEarnedPremium,\n\tExtractDate,\n\tAuditID,\n\t-- *INF*: sum(Limit)\n\tsum(Limit) AS LIMITS_SE_SF_SUM,\n\t-- *INF*: IIF(terrorism_risk_ind='Y' and IsBlackListCoverage='N',sum(DirectWrittenPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(DirectWrittenPremium)) AS PRWTERR,\n\t-- *INF*: sum(DirectWrittenPremium)\n\tsum(DirectWrittenPremium) AS PRWTOT,\n\t-- *INF*: IIF(terrorism_risk_ind='Y'  and IsBlackListCoverage='N',sum(Limit))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(Limit)) AS TIVTERR,\n\t-- *INF*: sum(Limit)\n\tsum(Limit) AS TIVTOT,\n\t-- *INF*: IIF(terrorism_risk_ind='Y'  and IsBlackListCoverage='N',sum(EarnedPremium))\n\tIFF(terrorism_risk_ind = 'Y' and IsBlackListCoverage = 'N', sum(EarnedPremium)) AS PRETERR,\n\t-- *INF*: sum(EarnedPremium)\n\tsum(EarnedPremium) AS PRETOT,\n\t-- *INF*: sum(ReinsuranceEarnedPremium)\n\tsum(ReinsuranceEarnedPremium) AS GREINSPREM\n\tFROM EXP_PropertyZeroOutLimitFoDupCache\n\tGROUP BY pol_key, TableCode1, YEAR, STABBR, COCODE, COTYPE, LOB, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, ESTNUM, terrorism_risk_ind, IsBlackListCoverage\n),\nSRT_PropertyByPolicyAndZip AS (\n\tSELECT\n\tpol_key, \n\tZIP, \n\tTableCode1, \n\tYEAR, \n\tSTABBR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\tESTNUM, \n\tExtractDate, \n\tAuditID, \n\tLIMITS_SE_SF_SUM, \n\tPRWTERR, \n\tPRWTOT, \n\tTIVTERR, \n\tTIVTOT, \n\tPRETERR, \n\tPRETOT, \n\tGREINSPREM\n\tFROM AGG_PropertyPolicyTerroismLevel\n\tORDER BY pol_key ASC, ZIP ASC\n),\nAGG_PropertyZIP AS (\n\tSELECT\n\tTableCode1 AS TableCode11,\n\tYEAR AS YEAR1,\n\tSTABBR AS STABBR1,\n\tCOCODE AS COCODE1,\n\tCOTYPE AS COTYPE1,\n\tLOB AS LOB1,\n\tZIP AS ZIP1,\n\tPOLCAT AS POLCAT1,\n\tCOVERAGE AS COVERAGE1,\n\tIND_CODE_TYPE AS IND_CODE_TYPE1,\n\tCODE AS CODE1,\n\tPOLTYPE AS POLTYPE1,\n\tCOVTYPE AS COVTYPE1,\n\tExtractDate,\n\tAuditID,\n\tpol_key,\n\tESTNUM AS ESTNUM1,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- pol_key=v_previous_pol_key and ZIP1=v_previous_zip,v_EstNum,\r\n\t-- pol_key != v_previous_pol_key and ZIP1=v_previous_zip,v_EstNum + ESTNUM1,\r\n\t-- ESTNUM1\r\n\t-- )\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    pol_key = v_previous_pol_key and ZIP1 = v_previous_zip, v_EstNum,\n\t    pol_key != v_previous_pol_key and ZIP1 = v_previous_zip, v_EstNum + ESTNUM1,\n\t    ESTNUM1\n\t) AS v_EstNum,\n\tZIP1 AS v_previous_zip,\n\tpol_key AS v_previous_pol_key,\n\tv_EstNum AS ESTNUM_Count,\n\tLIMITS_SE_SF_SUM AS in_LIMITS_SE_SF_SUM,\n\tPRWTERR AS in_PRWTERR,\n\tPRWTOT AS in_PRWTOT,\n\tTIVTERR AS in_TIVTERR,\n\tTIVTOT AS in_TIVTOT,\n\tPRETERR AS in_PRETERR,\n\tPRETOT AS in_PRETOT,\n\tGREINSPREM AS in_GREINSPREM,\n\t-- *INF*: sum(in_PRWTERR)\n\tsum(in_PRWTERR) AS PRWTERR,\n\t-- *INF*: sum(in_PRWTOT)\n\tsum(in_PRWTOT) AS PRWTOT,\n\t-- *INF*: sum(in_TIVTERR)\n\tsum(in_TIVTERR) AS TIVTERR,\n\t-- *INF*: sum(in_TIVTOT)\n\tsum(in_TIVTOT) AS TIVTOT,\n\t-- *INF*: sum(in_LIMITS_SE_SF_SUM)\n\tsum(in_LIMITS_SE_SF_SUM) AS LIMITS_SE_SF_SUM,\n\t-- *INF*: sum(in_PRETERR)\n\tsum(in_PRETERR) AS PRETERR,\n\t-- *INF*: sum(in_PRETOT)\n\tsum(in_PRETOT) AS PRETOT,\n\t-- *INF*: sum(in_GREINSPREM)\n\tsum(in_GREINSPREM) AS GREINSPREM\n\tFROM SRT_PropertyByPolicyAndZip\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1, COTYPE1, LOB1, ZIP1, POLCAT1, COVERAGE1, IND_CODE_TYPE1, CODE1, POLTYPE1, COVTYPE1\n),\nAGG_PropertyState AS (\n\tSELECT\n\tTableCode11,\n\tYEAR1,\n\tSTABBR1,\n\tCOCODE1,\n\tPRWTERR AS i_PRWTERR,\n\t-- *INF*: sum(i_PRWTERR)\n\tsum(i_PRWTERR) AS o_PRWTERR,\n\tPRWTOT AS i_PRWTOT,\n\t-- *INF*: sum(i_PRWTOT)\n\tsum(i_PRWTOT) AS o_PRWTOT,\n\tTIVTERR AS i_TIVTERR,\n\t-- *INF*: sum(i_TIVTERR)\n\tsum(i_TIVTERR) AS o_TIVTERR,\n\tTIVTOT AS i_TIVTOT,\n\t-- *INF*: sum(i_TIVTOT)\n\tsum(i_TIVTOT) AS o_TIVTOT,\n\tGREINSPREM AS i_GREINSPREM,\n\t-- *INF*: sum(i_GREINSPREM)\n\tsum(i_GREINSPREM) AS o_GREINSPREM,\n\tPRETERR AS i_PRETERR,\n\t-- *INF*: sum(i_PRETERR)\n\tsum(i_PRETERR) AS o_PRETERR,\n\tPRETOT AS i_PRETOT,\n\t-- *INF*: sum(i_PRETOT)\n\tsum(i_PRETOT) AS o_PRETOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_PropertyZIP\n\tGROUP BY TableCode11, YEAR1, STABBR1, COCODE1\n),\nEXP_PropertyStateOutput AS (\n\tSELECT\n\t'NaicTerrorismPropertyState' || @{pipeline().parameters.YEAR}||'.csv' AS Filename,\n\tTableCode11,\n\tTableCode11 || 'S' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tSTABBR1 AS STABBR,\n\to_PRWTERR AS PRWTERR,\n\to_PRWTOT AS PRWTOT,\n\to_PRETERR AS PRETERR,\n\to_PRETOT AS PRETOT,\n\to_GREINSPREM AS GREINSPREM,\n\to_TIVTERR AS TIVTERR,\n\to_TIVTOT AS TIVTOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_PropertyState\n),\nNaicTerrorismPropertyStateExtractFile AS (\n\tINSERT INTO NaicTerrorismPropertyStateExtractFile\n\t(FileName, TableCode, YEAR, COCODE, STABBR, PRWTERR, PRWTOT, PRETERR, PRETOT, GREINSPREM, TIVTERR, TIVTOT)\n\tSELECT \n\tFilename AS FILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tSTABBR, \n\tPRWTERR, \n\tPRWTOT, \n\tPRETERR, \n\tPRETOT, \n\tGREINSPREM, \n\tTIVTERR, \n\tTIVTOT\n\tFROM EXP_PropertyStateOutput\n),\nWorkNAICTerrorismSubTotal AS (\n\n\t------------ PRE SQL ----------\n\tdelete from WorkNAICTerrorismSubTotal where AuditId=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} and Year=@{pipeline().parameters.YEAR}\n\t-------------------------------\n\n\n\tINSERT INTO WorkNAICTerrorismSubTotal\n\t(AuditId, CreatedDate, ModifiedDate, pol_key, RatingStatCoverageID, SourceSystemID, TableCode, Year, Stabbr, CoCode, CoType, Lob, Zip, PolCat, Coverage, IndCodeType, Code, PolType, CovType, PolNum, EstNum, Limit, DirectWrittenPremium, EarnedPremium, TableCodeInsuranceLine, ReinsurancePercent, ReinsuranceEarnedPremium, TerrorismRiskInd, BlackListCoverageFlag, CoverageLimitValueGLStateOverride, LimitHashKey, Deductible)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tpol_key1 AS POL_KEY, \n\tRCStatCoverageAKId1 AS RATINGSTATCOVERAGEID, \n\tSOURCESYSTEMID, \n\tTableCode1 AS TABLECODE, \n\tYEAR AS YEAR, \n\tSTABBR AS STABBR, \n\tCOCODE AS COCODE, \n\tCOTYPE AS COTYPE, \n\tLOB AS LOB, \n\tZIP AS ZIP, \n\tPOLCAT AS POLCAT, \n\tCOVERAGE AS COVERAGE, \n\tIND_CODE_TYPE AS INDCODETYPE, \n\to_CODE AS CODE, \n\tPOLTYPE AS POLTYPE, \n\tCOVTYPE AS COVTYPE, \n\tPOLNUM AS POLNUM, \n\tESTNUM AS ESTNUM, \n\to_CoverageLimitValue_SubTotal AS LIMIT, \n\tDIRECTWRITTENPREMIUM, \n\tEARNEDPREMIUM, \n\tTABLECODEINSURANCELINE, \n\tREINSURANCEPERCENT, \n\tREINSURANCEEARNEDPREMIUM, \n\tterrorism_risk_ind AS TERRORISMRISKIND, \n\to_BlackListCoverage AS BLACKLISTCOVERAGEFLAG, \n\to_CoverageLimitValue_GL_State_Override AS COVERAGELIMITVALUEGLSTATEOVERRIDE, \n\tLIMITHASHKEY, \n\to_CoverageDeductibleValue AS DEDUCTIBLE\n\tFROM EXP_JoinerOutput\n),\nNAICTerrorismStateLevelExtract_InlandMarine AS (\n\tINSERT INTO NAICTerrorismStateLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, Stabbr, PrwTerr, PrwTot, PreTerr, PreTot, GreinsPrem, TivTerr, TivTot)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tSTABBR AS STABBR, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tPRETERR AS PRETERR, \n\tPRETOT AS PRETOT, \n\tGREINSPREM AS GREINSPREM, \n\tTIVTERR AS TIVTERR, \n\tTIVTOT AS TIVTOT\n\tFROM EXP_InlandMarineStateOutput\n),\nEXP_PropertyZipOutput AS (\n\tSELECT\n\t'NaicTerrorismPropertyZip' || @{pipeline().parameters.YEAR} ||'.csv' AS FileName,\n\tTableCode11 AS i_TableCode,\n\ti_TableCode || 'D' AS TableCode,\n\tYEAR1 AS YEAR,\n\tCOCODE1 AS COCODE,\n\tCOTYPE1 AS COTYPE,\n\tLOB1 AS LOB,\n\tSTABBR1 AS STABBR,\n\tZIP1 AS ZIP,\n\tPOLCAT1 AS POLCAT,\n\tCOVERAGE1 AS COVERAGE,\n\tIND_CODE_TYPE1 AS IND_CODE_TYPE,\n\tCODE1 AS CODE,\n\tLIMITS_SE_SF_SUM AS SumLIMIT_SE_SF,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- SumLIMIT_SE_SF >= 100000000,'F',\r\n\t-- SumLIMIT_SE_SF >=99999999,'E',\r\n\t-- SumLIMIT_SE_SF >= 5000000, 'D',\r\n\t-- SumLIMIT_SE_SF >= 1000000,'C',\r\n\t-- SumLIMIT_SE_SF >= 500000,'B',\r\n\t-- 'A'\r\n\t-- )\r\n\t-- \r\n\t-- -- Default is A, else go in descending order to set value, SE and SF will be same\n\tDECODE(\n\t    TRUE,\n\t    SumLIMIT_SE_SF >= 100000000, 'F',\n\t    SumLIMIT_SE_SF >= 99999999, 'E',\n\t    SumLIMIT_SE_SF >= 5000000, 'D',\n\t    SumLIMIT_SE_SF >= 1000000, 'C',\n\t    SumLIMIT_SE_SF >= 500000, 'B',\n\t    'A'\n\t) AS LIMIT_SE_SF,\n\tPOLTYPE1 AS POLTYPE,\n\tCOVTYPE1 AS COVTYPE,\n\tESTNUM_Count AS ESTNUM,\n\tPRWTERR,\n\tPRWTOT,\n\tTIVTERR,\n\tTIVTOT,\n\tExtractDate,\n\tAuditID\n\tFROM AGG_PropertyZIP\n),\nNaicTerrorismPropertyZipExtractFile AS (\n\tINSERT INTO NaicTerrorismPropertyZipExtractFile\n\t(FileName, TableCode, YEAR, COCODE, COTYPE, LOB, STABBR, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, LIMITSE, LIMITSF, POLTYPE, COVTYPE, ESTNUM, PRWTERR, PRWTOT, TIVTERR, TIVTOT)\n\tSELECT \n\tFILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tSTABBR, \n\tZIP, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tLIMIT_SE_SF AS LIMITSE, \n\tLIMIT_SE_SF AS LIMITSF, \n\tPOLTYPE, \n\tCOVTYPE, \n\tESTNUM, \n\tPRWTERR, \n\tPRWTOT, \n\tTIVTERR, \n\tTIVTOT\n\tFROM EXP_PropertyZipOutput\n),\nNAICTerrorismZipLevelExtract_Property AS (\n\n\t------------ PRE SQL ----------\n\tDelete From NAICTerrorismZipLevelExtract where AuditId=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} and Year=@{pipeline().parameters.YEAR}\n\t-------------------------------\n\n\n\tINSERT INTO NAICTerrorismZipLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, CoType, Lob, Stabbr, Zip, PolCat, IndCodeType, Code, PolType, CovType, PrwTerr, PrwTot, Coverage, LimitsE, LimitsF, EstNum, TivTerr, TivTot)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tCOTYPE AS COTYPE, \n\tLOB AS LOB, \n\tSTABBR AS STABBR, \n\tZIP AS ZIP, \n\tPOLCAT AS POLCAT, \n\tIND_CODE_TYPE AS INDCODETYPE, \n\tCODE AS CODE, \n\tPOLTYPE AS POLTYPE, \n\tCOVTYPE AS COVTYPE, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tCOVERAGE AS COVERAGE, \n\tLIMIT_SE_SF AS LIMITSE, \n\tLIMIT_SE_SF AS LIMITSF, \n\tESTNUM AS ESTNUM, \n\tTIVTERR AS TIVTERR, \n\tTIVTOT AS TIVTOT\n\tFROM EXP_PropertyZipOutput\n),\nNaicTerrorismLiabilityStateExtractFile AS (\n\tINSERT INTO NaicTerrorismLiabilityStateExtractFile\n\t(FileName, TableCode, YEAR, COCODE, STABBR, PRWTERR, PRWTOT, PRETERR, PRETOT, GREINSPREM, LIMITSTERR, LIMITSTOT)\n\tSELECT \n\tFilename AS FILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tSTABBR, \n\tPRWTERR, \n\tPRWTOT, \n\tPRETERR, \n\tPRETOT, \n\tGREINSPREM, \n\tLIMITSTERR, \n\tLIMITSTOT\n\tFROM EXP_LiabilityStateOutput\n),\nNAICTerrorismStateLevelExtract_Property AS (\n\n\t------------ PRE SQL ----------\n\tDelete From NAICTerrorismStateLevelExtract where AuditId=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} and Year=@{pipeline().parameters.YEAR}\n\t-------------------------------\n\n\n\tINSERT INTO NAICTerrorismStateLevelExtract\n\t(AuditId, CreatedDate, ModifiedDate, TableCode, Year, CoCode, Stabbr, PrwTerr, PrwTot, PreTerr, PreTot, GreinsPrem, TivTerr, TivTot)\n\tSELECT \n\tAuditID AS AUDITID, \n\tExtractDate AS CREATEDDATE, \n\tExtractDate AS MODIFIEDDATE, \n\tTABLECODE, \n\tYEAR AS YEAR, \n\tCOCODE AS COCODE, \n\tSTABBR AS STABBR, \n\tPRWTERR AS PRWTERR, \n\tPRWTOT AS PRWTOT, \n\tPRETERR AS PRETERR, \n\tPRETOT AS PRETOT, \n\tGREINSPREM AS GREINSPREM, \n\tTIVTERR AS TIVTERR, \n\tTIVTOT AS TIVTOT\n\tFROM EXP_PropertyStateOutput\n),\nNaicTerrorismLiabilityZipExtractFile AS (\n\tINSERT INTO NaicTerrorismLiabilityZipExtractFile\n\t(FileName, TableCode, YEAR, COCODE, COTYPE, LOB, STABBR, ZIP, POLCAT, COVERAGE, IND_CODE_TYPE, CODE, POLTYPE, COVTYPE, POLNUM, PRWTERR, PRWTOT, LIMITSERR, LIMITSTOT)\n\tSELECT \n\tFilename AS FILENAME, \n\tTABLECODE, \n\tYEAR, \n\tCOCODE, \n\tCOTYPE, \n\tLOB, \n\tSTABBR, \n\tZIP, \n\tPOLCAT, \n\tCOVERAGE, \n\tIND_CODE_TYPE, \n\tCODE, \n\tPOLTYPE, \n\tCOVTYPE, \n\tPOLNUM, \n\tPRWTERR, \n\tPRWTOT, \n\tLIMITSTERR AS LIMITSERR, \n\tLIMITSTOT\n\tFROM EXP_LiabilityZipOutput\n),\nAGG_debugLimitRules AS (\n\tSELECT\n\tin_TableCode1 AS TableCode1,\n\tCoverageLimitType,\n\tLimitRule,\n\t'NaicTerrorismAggLimitRules' || @{pipeline().parameters.YEAR}|| '.csv' AS FileName\n\tFROM EXP_ApplyLimitRules\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY TableCode1, CoverageLimitType, LimitRule ORDER BY NULL) = 1\n),\nNaicTerrorismAggLimitRulesFlatFile AS (\n\tINSERT INTO NaicTerrorismAggLimitRulesFlatFile\n\t(FileName, TableCode1, CoverageLimitType, LimitRule)\n\tSELECT \n\tFILENAME, \n\tTABLECODE1, \n\tCOVERAGELIMITTYPE, \n\tLIMITRULE\n\tFROM AGG_debugLimitRules\n),\nFIL_MissingCoverages AS (\n\tSELECT\n\tSourceSystemID, \n\tInsuranceLineCode, \n\tInsuranceLineDescription, \n\tInsuranceReferenceLineOfBusinessDescription, \n\tCoverageCode, \n\tCoverageDescription, \n\tDctRiskTypeCode, \n\tPropertyCoverageCode, \n\tBureauCode1, \n\tPolicyOfferingCode, \n\tProductCode, \n\tInsuranceReferenceLineOfBusinessCode, \n\to_Coverage AS COVERAGE, \n\tPolCat AS POLCAT, \n\tTableCodeInsuranceLine\n\tFROM EXP_InputFromControlTable\n\tWHERE (SUBSTR(COVERAGE,1,3)='N/A' and TableCodeInsuranceLine !='InlandMarine') or POLCAT='N/A'\n),\nAGG_InvalidCoverageLimits AS (\n\tSELECT\n\tSourceSystemID,\n\tInsuranceLineCode,\n\tInsuranceLineDescription,\n\tInsuranceReferenceLineOfBusinessDescription,\n\tCoverageCode,\n\tCoverageDescription,\n\tDctRiskTypeCode,\n\tPropertyCoverageCode,\n\tDctCoverageTypeCode,\n\tBureauCode1,\n\tPolicyOfferingCode,\n\tProductCode,\n\tInsuranceReferenceLineOfBusinessCode,\n\tCOVERAGE,\n\tPOLCAT,\n\tTableCodeInsuranceLine,\n\t'NaicTerrorismInvalidPropertyLiabilityCoverages' || @{pipeline().parameters.YEAR}|| '.csv' AS FileName\n\tFROM FIL_MissingCoverages\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SourceSystemID, InsuranceLineCode, InsuranceLineDescription, InsuranceReferenceLineOfBusinessDescription, CoverageCode, CoverageDescription, DctRiskTypeCode, PropertyCoverageCode, DctCoverageTypeCode, BureauCode1, PolicyOfferingCode, ProductCode, InsuranceReferenceLineOfBusinessCode, COVERAGE, POLCAT, TableCodeInsuranceLine ORDER BY NULL) = 1\n),\nNaicTerrorismInvalidPropertyLiabilityCoveragesFlatFile1 AS (\n\tINSERT INTO NaicTerrorismInvalidPropertyLiabilityCoveragesFlatFile\n\t(FileName, SourceSystemID, InsuranceLineCode, InsuranceLineDescription, InsuranceReferenceLineOfBusinessDescription, CoverageCode, CoverageDescription, DctRiskTypeCode, PropertyCoverageCode, DctCoverageTypeCode, BureauCode1, PolicyOfferingCode, ProductCode, InsuranceReferenceLineOfBusinessCode, COVERAGE, POLCAT, TableCodeInsuranceLine)\n\tSELECT \n\tFILENAME, \n\tSOURCESYSTEMID, \n\tINSURANCELINECODE, \n\tINSURANCELINEDESCRIPTION, \n\tINSURANCEREFERENCELINEOFBUSINESSDESCRIPTION, \n\tCOVERAGECODE, \n\tCOVERAGEDESCRIPTION, \n\tDCTRISKTYPECODE, \n\tPROPERTYCOVERAGECODE, \n\tDCTCOVERAGETYPECODE, \n\tBUREAUCODE1, \n\tPOLICYOFFERINGCODE, \n\tPRODUCTCODE, \n\tINSURANCEREFERENCELINEOFBUSINESSCODE, \n\tCOVERAGE, \n\tPOLCAT, \n\tTABLECODEINSURANCELINE\n\tFROM AGG_InvalidCoverageLimits\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "DATABASE_NAME_IL": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "YEAR": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CONTROL": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_LIMIT_DCT": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_LIMIT_PMS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_DEDUCTIBLE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_PREM_DCT": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_PREM_PMS": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}