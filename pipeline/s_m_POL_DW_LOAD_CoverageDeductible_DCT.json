{
    "name": "s_m_POL_DW_LOAD_CoverageDeductible_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_CoverageDeductible_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_DCDeductibleStaging AS (\n\tWITH PCoverage as (\r\n\tselect A.SessionId, A.ObjectId AS ObjectId, A.ObjectName AS ObjectName, A.coverageID as PCoverageid,A.CoverageId, A.Id AS CoverageGUID, A.Type as CoverageType, \r\n\tCASE WHEN A.ObjectName = 'DC_Line' THEN L.Type \r\n\tELSE \r\n\tCASE substring(A.ObjectName,4,3) \r\n\twhen 'CF_' then 'Property'\r\n\twhen 'GL_' then 'GeneralLiability'\r\n\twhen 'WC_' then 'WorkersCompensation'\r\n\twhen 'BP_' then 'BusinessOwners'\r\n\twhen 'CR_' then 'Crime'\r\n\twhen 'IM_' then 'InlandMarine'\r\n\twhen 'EXL' then 'ExcessLiability'\r\n\twhen 'CU_' then 'CommercialUmbrella'\r\n\twhen 'CA_' then 'CommercialAuto'\r\n\twhen 'CDO' then 'DirectorsAndOffsCondos'\r\n\twhen 'EPL' then 'EmploymentPracticesLiab'\r\n\twhen 'HIO' then 'HoleInOne'\r\n\tELSE 'N/A' \r\n\tEND END AS InsuranceLine \r\n\tfrom DCCoverageStaging A\r\n\tleft join DCLineStaging L on L.sessionid = A.sessionid and A.objectid = L.lineID\r\n\twhere A.ObjectName <> 'DC_Coverage'\r\n\t\r\n\tunion all\r\n\t\r\n\tselect B.SessionId, B.ObjectId AS ObjectId, B.ObjectName AS ObjectName,B.coverageID as PCoverageid, A.CoverageId, A.Id AS CoverageGUID,A.Type as CoverageType, \r\n\tCASE WHEN B.ObjectName = 'DC_Line' THEN L.Type\r\n\tELSE\r\n\tcase substring(B.ObjectName,4,3) \r\n\twhen 'CF_' then 'Property'\r\n\twhen 'GL_' then 'GeneralLiability'\r\n\twhen 'WC_' then 'WorkersCompensation'\r\n\twhen 'BP_' then 'BusinessOwners'\r\n\twhen 'CR_' then 'Crime'\r\n\twhen 'IM_' then 'InlandMarine'\r\n\twhen 'EXL' then 'ExcessLiability'\r\n\twhen 'CU_' then 'CommercialUmbrella'\r\n\twhen 'CA_' then 'CommercialAuto'\r\n\twhen 'CDO' then 'DirectorsAndOffsCondos'\r\n\twhen 'EPL' then 'EmploymentPracticesLiab'\r\n\twhen 'HIO' then 'HoleInOne'\r\n\telse 'N/A' \r\n\tEND END AS  InsuranceLine\r\n\tfrom DCCoverageStaging A\r\n\tinner join DCCoverageStaging B on A.SessionId=B.SessionId  and A.ObjectId=B.CoverageId and A.ObjectName='DC_Coverage'\r\n\tleft join DCLineStaging L on L.sessionid = B.sessionid and B.objectid = L.lineID\r\n\twhere B.ObjectName <> 'DC_Coverage'\r\n\t)\r\n\t\r\n\tselect C.Coveragetype,C.CoverageGuid, C.CoverageId, DLT.Type as DeductibleType, DLT.Value as DeductibleValue, C.InsuranceLine as Insuranceline\r\n\tfrom DCDeductibleStaging DLT\r\n\tinner join PCoverage C on DLT.SessionId=C.SessionId and DLT.ObjectId=C.PCoverageId and  DLT.ObjectName='DC_Coverage'\r\n\twhere DLT.Type is not null and DLT.Value is not null\r\n\tAND case when isnull(DLT.value,0) in ('N/A','0') then 0 else 1 end>0\r\n\t\r\n\tUNION    ---- By using UNION we are elimination duplicates coming from above and below queries\r\n\t\r\n\t---- Below query is used to pull the deductible values from DCLimit tables if deductibles are tied to child coverage rather than parent, this is to cover odd ----scenarios in data\r\n\t\r\n\tselect C.CoverageType,C.CoverageGuid, C.CoverageId, DLT.Type as DeductibleType, DLT.Value as DeductibleValue, C.InsuranceLine as Insuranceline\r\n\tfrom DCDeductibleStaging DLT\r\n\tinner join PCoverage C on DLT.SessionId=C.SessionId and DLT.ObjectId=C.CoverageId and  DLT.ObjectName='DC_Coverage'\r\n\twhere DLT.Type is not null and DLT.Value is not null\r\n\tAND case when isnull(DLT.value,0) in ('N/A','0') then 0 else 1 end>0\n),\nEXP_DataCollectSRC AS (\n\tSELECT\n\tCoverageType,\n\tCoverageGuid AS CoverageGuId,\n\t-- *INF*: IIF(ISNULL(CoverageGuId) OR IS_SPACES(CoverageGuId) OR LENGTH(CoverageGuId)=0, 'N/A', LTRIM(RTRIM(CoverageGuId)))\n\tIFF(CoverageGuId IS NULL OR IS_SPACES(CoverageGuId) OR LENGTH(CoverageGuId) = 0, 'N/A', LTRIM(RTRIM(CoverageGuId))) AS O_CoverageGUID,\n\tCoverageId,\n\tType AS DeductibleType,\n\tValue,\n\tInsuranceLine,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditId\n\tFROM SQ_DCDeductibleStaging\n),\nSQ_WorkPremiumTransaction AS (\n\tSELECT wpt.PremiumTransactionAKId, wpt.PremiumTransactionStageId, pt.PremiumTransactionAKID, rc.CoverageType, rc.CoverageGUID, PC.InsuranceLine, rc.SubCoverageTypeCode\r\n\tFROM dbo.WorkPremiumTransaction wpt WITH (NOLOCK)\r\n\tJOIN dbo.PremiumTransaction pt WITH (NOLOCK) ON pt.PremiumTransactionAKID = wpt.PremiumTransactionAKId\r\n\tand pt.PremiumTransactionID not in (select WPTOL.PremiumTransactionID from dbo.WorkPremiumTransactionOffsetLineage WPTOL with (nolock) WHERE WPTOL.UpdateAttributeFlag = 1)\r\n\tJOIN dbo.RatingCoverage rc WITH (NOLOCK) ON pt.RatingCoverageAKId = rc.RatingCoverageAKID\r\n\t\tAND pt.EffectiveDate = rc.EffectiveDate\r\n\tINNER JOIN dbo.PolicyCoverage PC on PC.PolicyCoverageAKID = rc.PolicyCoverageAKID and PC.CurrentSnapshotFlag=1\r\n\t--WHERE wpt.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n),\nLKP_SupDeductibleTypeExclude AS (\n\tSELECT\n\tSupDeductibleTypeExcludeId,\n\tInsuranceLine,\n\tCoverageType,\n\tSubCoverageTypeCode\n\tFROM (\n\t\tSELECT \n\t\t\tSupDeductibleTypeExcludeId,\n\t\t\tInsuranceLine,\n\t\t\tCoverageType,\n\t\t\tSubCoverageTypeCode\n\t\tFROM SupDeductibleTypeExclude\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY InsuranceLine,CoverageType,SubCoverageTypeCode ORDER BY SupDeductibleTypeExcludeId) = 1\n),\nFIL_RemoveExcludedCoverages AS (\n\tSELECT\n\tSQ_WorkPremiumTransaction.PremiumTransactionAKId, \n\tSQ_WorkPremiumTransaction.PremiumTransactionStageId, \n\tSQ_WorkPremiumTransaction.PT_PremiumTransactionAKID, \n\tSQ_WorkPremiumTransaction.CoverageType, \n\tSQ_WorkPremiumTransaction.CoverageGUID, \n\tLKP_SupDeductibleTypeExclude.SupDeductibleTypeExcludeId\n\tFROM SQ_WorkPremiumTransaction\n\tLEFT JOIN LKP_SupDeductibleTypeExclude\n\tON LKP_SupDeductibleTypeExclude.InsuranceLine = SQ_WorkPremiumTransaction.InsuranceLine AND LKP_SupDeductibleTypeExclude.CoverageType = SQ_WorkPremiumTransaction.CoverageType AND LKP_SupDeductibleTypeExclude.SubCoverageTypeCode = SQ_WorkPremiumTransaction.SubCoverageTypeCode\n\tWHERE ISNULL(SupDeductibleTypeExcludeId)\n),\nJNR_AKID_STAGEID AS (SELECT\n\tFIL_RemoveExcludedCoverages.PremiumTransactionAKId, \n\tFIL_RemoveExcludedCoverages.PremiumTransactionStageId, \n\tFIL_RemoveExcludedCoverages.PT_PremiumTransactionAKID, \n\tFIL_RemoveExcludedCoverages.CoverageType, \n\tFIL_RemoveExcludedCoverages.CoverageGUID, \n\tEXP_DataCollectSRC.CoverageId, \n\tEXP_DataCollectSRC.DeductibleType, \n\tEXP_DataCollectSRC.Value, \n\tEXP_DataCollectSRC.InsuranceLine, \n\tEXP_DataCollectSRC.o_AuditId AS AuditId, \n\tEXP_DataCollectSRC.O_CoverageGUID\n\tFROM EXP_DataCollectSRC\n\tINNER JOIN FIL_RemoveExcludedCoverages\n\tON FIL_RemoveExcludedCoverages.PremiumTransactionStageId = EXP_DataCollectSRC.CoverageId AND FIL_RemoveExcludedCoverages.CoverageGUID = EXP_DataCollectSRC.O_CoverageGUID\n),\nmplt_Load_Deductibles_IL_Layer_DCT AS (WITH\n\tSEQ_CoverageDeductibleID AS (\n\t\tCREATE SEQUENCE SEQ_CoverageDeductibleID\n\t\tSTART = 0\n\t\tINCREMENT = 1;\n\t),\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_Input AS (\n\t\tSELECT\n\t\tPremiumTransactionAKId,\n\t\tCoverageType,\n\t\tDeductibleType,\n\t\tDeductibleValue,\n\t\tInsuranceLine,\n\t\tAuditId\n\t\tFROM INPUT\n\t),\n\tLKP_Valid_Deductibles AS (\n\t\tSELECT\n\t\tStandardDeductibleType,\n\t\tDeductibleLevel,\n\t\tIN_InsuranceLine,\n\t\tIN_CoverageType,\n\t\tIN_DeductibleType,\n\t\tInsuranceLine,\n\t\tCoverageType,\n\t\tDeductibleType\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tStandardDeductibleType,\n\t\t\t\tDeductibleLevel,\n\t\t\t\tIN_InsuranceLine,\n\t\t\t\tIN_CoverageType,\n\t\t\t\tIN_DeductibleType,\n\t\t\t\tInsuranceLine,\n\t\t\t\tCoverageType,\n\t\t\t\tDeductibleType\n\t\t\tFROM SupDeductibleType\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY InsuranceLine,CoverageType,DeductibleType ORDER BY StandardDeductibleType) = 1\n\t),\n\tFIL_UnnecessaryDeductibles AS (\n\t\tSELECT\n\t\tLKP_Valid_Deductibles.DeductibleLevel, \n\t\tEXP_Input.DeductibleValue AS Value, \n\t\tEXP_Input.PremiumTransactionAKId, \n\t\tLKP_Valid_Deductibles.StandardDeductibleType, \n\t\tEXP_Input.AuditId\n\t\tFROM EXP_Input\n\t\tLEFT JOIN LKP_Valid_Deductibles\n\t\tON LKP_Valid_Deductibles.InsuranceLine = EXP_Input.InsuranceLine AND LKP_Valid_Deductibles.CoverageType = EXP_Input.CoverageType AND LKP_Valid_Deductibles.DeductibleType = EXP_Input.DeductibleType\n\t\tWHERE Not ISNULL(DeductibleLevel)\n\t),\n\tEXP_Default_Values AS (\n\t\tSELECT\n\t\tStandardDeductibleType AS i_Type,\n\t\tValue AS i_Value,\n\t\tPremiumTransactionAKId,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(i_Type)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_Type) AS o_CoverageLimitType,\n\t\t-- *INF*: TO_CHAR(TO_DECIMAL(i_Value))\n\t\tTO_CHAR(TO_DECIMAL(i_Value)) AS o_CoverageLimitValue,\n\t\tAuditId\n\t\tFROM FIL_UnnecessaryDeductibles\n\t),\n\tAGG_VLAUE_TYPE AS (\n\t\tSELECT\n\t\to_CoverageLimitType AS CoverageDeductibleType,\n\t\to_CoverageLimitValue AS CoverageDeductibleValue,\n\t\tAuditId\n\t\tFROM EXP_Default_Values\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageDeductibleType, CoverageDeductibleValue ORDER BY NULL) = 1\n\t),\n\tSRt_bridege_type_value AS (\n\t\tSELECT\n\t\to_CoverageLimitType AS CoverageDeductibleType, \n\t\to_CoverageLimitValue AS CoverageDeductibleValue, \n\t\tPremiumTransactionAKId\n\t\tFROM EXP_Default_Values\n\t\tORDER BY CoverageDeductibleType ASC, CoverageDeductibleValue ASC\n\t),\n\tLKP_COVERAGEDEDUCTIBLEID AS (\n\t\tSELECT\n\t\tCoverageDeductibleId,\n\t\tCoverageDeductibleType,\n\t\tCoverageDeductibleValue,\n\t\ti_CoverageDeductibleType,\n\t\ti_CoverageDeductibleValue\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tCoverageDeductibleId,\n\t\t\t\tCoverageDeductibleType,\n\t\t\t\tCoverageDeductibleValue,\n\t\t\t\ti_CoverageDeductibleType,\n\t\t\t\ti_CoverageDeductibleValue\n\t\t\tFROM CoverageDeductible\n\t\t\tWHERE SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageDeductibleType,CoverageDeductibleValue ORDER BY CoverageDeductibleId) = 1\n\t),\n\tEXP_Set_CoverageDeductibleID AS (\n\t\tSELECT\n\t\tLKP_COVERAGEDEDUCTIBLEID.CoverageDeductibleId AS lkp_CoverageDeductibleId,\n\t\tSEQ_CoverageDeductibleID.NEXTVAL AS i_NEXTVAL,\n\t\tAGG_VLAUE_TYPE.CoverageDeductibleType,\n\t\tAGG_VLAUE_TYPE.CoverageDeductibleValue,\n\t\t-- *INF*: IIF(ISNULL(lkp_CoverageDeductibleId),i_NEXTVAL,lkp_CoverageDeductibleId)\n\t\tIFF(lkp_CoverageDeductibleId IS NULL, i_NEXTVAL, lkp_CoverageDeductibleId) AS CoverageDeductibleId,\n\t\tAGG_VLAUE_TYPE.AuditId\n\t\tFROM AGG_VLAUE_TYPE\n\t\tLEFT JOIN LKP_COVERAGEDEDUCTIBLEID\n\t\tON LKP_COVERAGEDEDUCTIBLEID.CoverageDeductibleType = AGG_VLAUE_TYPE.CoverageDeductibleType AND LKP_COVERAGEDEDUCTIBLEID.CoverageDeductibleValue = AGG_VLAUE_TYPE.CoverageDeductibleValue\n\t),\n\tSRT_type_vlaue AS (\n\t\tSELECT\n\t\tCoverageDeductibleType, \n\t\tCoverageDeductibleValue, \n\t\tCoverageDeductibleId, \n\t\tAuditId\n\t\tFROM EXP_Set_CoverageDeductibleID\n\t\tORDER BY CoverageDeductibleType ASC, CoverageDeductibleValue ASC\n\t),\n\tFIL_Insert_CoverageDeductible AS (\n\t\tSELECT\n\t\tlkp_CoverageDeductibleId, \n\t\tCoverageDeductibleId, \n\t\tCoverageDeductibleType, \n\t\tCoverageDeductibleValue, \n\t\tAuditId\n\t\tFROM EXP_Set_CoverageDeductibleID\n\t\tWHERE ISNULL(lkp_CoverageDeductibleId)\n\t),\n\tEXP_HANDE AS (\n\t\tSELECT\n\t\tCoverageDeductibleType AS i_CoverageDeductibleType,\n\t\tCoverageDeductibleValue AS i_CoverageDeductibleValue,\n\t\tCoverageDeductibleId AS i_CoverageDeductibleid,\n\t\ti_CoverageDeductibleid AS o_CoverageDeductibleid,\n\t\tAuditId,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_sourceSystemid,\n\t\tsysdate AS o_date,\n\t\ti_CoverageDeductibleType AS o_CoverageDeductibleType,\n\t\t-- *INF*: IIF(NOT ISNULL(i_CoverageDeductibleValue),i_CoverageDeductibleValue,'0')\n\t\tIFF(NOT i_CoverageDeductibleValue IS NULL, i_CoverageDeductibleValue, '0') AS o_CoverageDeductibleVlaue\n\t\tFROM FIL_Insert_CoverageDeductible\n\t),\n\tJNR_type_value AS (SELECT\n\t\tSRt_bridege_type_value.CoverageDeductibleType AS i_CoverageDeductibleType_bridge, \n\t\tSRt_bridege_type_value.CoverageDeductibleValue AS i_CoverageDeductibleValue_bridege, \n\t\tSRt_bridege_type_value.PremiumTransactionAKId AS i_PremiumTransactionAKId, \n\t\tSRT_type_vlaue.CoverageDeductibleType AS i_CoverageDeductibleType, \n\t\tSRT_type_vlaue.CoverageDeductibleValue AS i_CoverageDeductibleValue, \n\t\tSRT_type_vlaue.CoverageDeductibleId, \n\t\tSRT_type_vlaue.AuditId\n\t\tFROM SRT_type_vlaue\n\t\tINNER JOIN SRt_bridege_type_value\n\t\tON SRt_bridege_type_value.CoverageDeductibleType = SRT_type_vlaue.CoverageDeductibleType AND SRt_bridege_type_value.CoverageDeductibleValue = SRT_type_vlaue.CoverageDeductibleValue\n\t),\n\tLKP_CoverageDeductiblebridgeid AS (\n\t\tSELECT\n\t\tCoverageDeductibleBridgeId,\n\t\tCoverageDeductibleId,\n\t\tPremiumTransactionAKId\n\t\tFROM (\n\t\t\tSELECT CDB.CoverageDeductibleBridgeId as CoverageDeductibleBridgeId, \r\n\t\t\tCDB.CoverageDeductibleId as CoverageDeductibleId, \r\n\t\t\tCDB.PremiumTransactionAKId as PremiumTransactionAKId \r\n\t\t\tFROM CoverageDeductibleBridge CDB \r\n\t\t\tINNER JOIN dbo.WorkPremiumTransaction wpt WITH (NOLOCK)\r\n\t\t\ton  CDB.PremiumTransactionAKId = wpt.PremiumTransactionAKID \r\n\t\t\tWHERE CDB.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageDeductibleId,PremiumTransactionAKId ORDER BY CoverageDeductibleBridgeId) = 1\n\t),\n\tOUTPUT_CoverageDeductible_Insert AS (\n\t\tSELECT\n\t\to_CoverageDeductibleid AS CoverageDeductibleId, \n\t\tAuditId, \n\t\to_sourceSystemid AS SourceSystemId, \n\t\to_date AS CurrentDate, \n\t\to_CoverageDeductibleType AS CoverageDeductibleType, \n\t\to_CoverageDeductibleVlaue AS CoverageDeductibleValue\n\t\tFROM EXP_HANDE\n\t),\n\tFIL_Insert_CoverageDeductibleBridge AS (\n\t\tSELECT\n\t\tLKP_CoverageDeductiblebridgeid.CoverageDeductibleBridgeId AS i_CoverageDeductibleBridgeId, \n\t\tJNR_type_value.i_PremiumTransactionAKId AS PremiumTransactionAKId, \n\t\tJNR_type_value.CoverageDeductibleId, \n\t\tJNR_type_value.AuditId\n\t\tFROM JNR_type_value\n\t\tLEFT JOIN LKP_CoverageDeductiblebridgeid\n\t\tON LKP_CoverageDeductiblebridgeid.CoverageDeductibleId = JNR_type_value.CoverageDeductibleId AND LKP_CoverageDeductiblebridgeid.PremiumTransactionAKId = JNR_type_value.i_PremiumTransactionAKId\n\t\tWHERE ISNULL(i_CoverageDeductibleBridgeId) AND PremiumTransactionAKId<>-1\n\t),\n\tAGG_bridge_count AS (\n\t\tSELECT\n\t\tCoverageDeductibleId AS i_CoverageDeductibleId,\n\t\tPremiumTransactionAKId,\n\t\t-- *INF*: count(1)\n\t\tcount(1) AS o_CoverageDeductibleIdCount,\n\t\tAuditId\n\t\tFROM FIL_Insert_CoverageDeductibleBridge\n\t\tGROUP BY i_CoverageDeductibleId, PremiumTransactionAKId\n\t),\n\tEXP_bridge_target AS (\n\t\tSELECT\n\t\tAuditId,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_sourceSystemid,\n\t\tsysdate AS o_credatedate,\n\t\tPremiumTransactionAKId AS o_PremiumTransactionAKId,\n\t\ti_CoverageDeductibleId AS o_CoverageDeductibleId,\n\t\to_CoverageDeductibleIdCount,\n\t\t'N/A' AS o_CoverageDeductibleControl\n\t\tFROM AGG_bridge_count\n\t),\n\tOUTPUT_CoverageDeductibleBridge_Insert AS (\n\t\tSELECT\n\t\tAuditId, \n\t\to_sourceSystemid AS SourceSystemId, \n\t\to_credatedate AS CurrentDate, \n\t\to_PremiumTransactionAKId AS PremiumTransactionAKId, \n\t\to_CoverageDeductibleId AS CoverageDeductibleId, \n\t\to_CoverageDeductibleIdCount AS CoverageDeductibleIdCount, \n\t\to_CoverageDeductibleControl AS CoverageDeductibleControl\n\t\tFROM EXP_bridge_target\n\t),\n),\nCoverageDeductibleBridge AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDeductibleBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageDeductibleId, CoverageDeductibleIdCount, CoverageDeductibleControl)\n\tSELECT \n\tAuditId1 AS AUDITID, \n\tSourceSystemId AS SOURCESYSTEMID, \n\tCurrentDate AS CREATEDDATE, \n\tPremiumTransactionAKId1 AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGEDEDUCTIBLEID, \n\tCOVERAGEDEDUCTIBLEIDCOUNT, \n\tCOVERAGEDEDUCTIBLECONTROL\n\tFROM mplt_Load_Deductibles_IL_Layer_DCT\n),\nUPDTRANS AS (\n\tSELECT\n\tCoverageDeductibleId1 AS CoverageDeductibleId, \n\tAuditId2 AS O_AUDIT, \n\tSourceSystemId1 AS o_soureSystemid, \n\tCurrentDate1 AS o_createdate, \n\tCoverageDeductibleType AS o_CoverageDeductibletype, \n\tCoverageDeductibleValue AS o_CoverageDeductiblevalue\n\tFROM mplt_Load_Deductibles_IL_Layer_DCT\n),\nCoverageDeductible AS (\n\tSET IDENTITY_INSERT @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDeductible  ON\r\n\tINSERT @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDeductible (CoverageDeductibleId ,AuditID,SourceSystemID,CreatedDate,CoverageDeductibleType,CoverageDeductibleValue) \n\tSELECT S.CoverageDeductibleId,S.AuditID,S.SourceSystemID, S.CreatedDate,S.CoverageDeductibleType, S.CoverageDeductibleValue\n\tFROM UPDTRANS S\n),\nSQ_CoverageDeductibleBridge_Offsets AS (\n\tSELECT CDB.CoverageDeductibleId, CDB.CoverageDeductibleIdCount, CDB.CoverageDeductibleControl, WPTOL.PremiumTransactionAKID \r\n\tFROM\r\n\t WorkPremiumTransactionOffsetLineage WPTOL\r\n\t inner join CoveragedeductibleBridge CDB on\r\n\tWPTOL.PreviousPremiumTransactionAKID = CDB.PremiumTransactionAKId\r\n\tINNER JOIN premiumtransaction pt WITH (NOLOCK) on\r\n\tWPTOL.premiumtransactionID=pt.premiumtransactionID and PT.OffsetOnsetCode='Offset'\r\n\twhere\r\n\tWPTOL.UpdateAttributeFlag = 1\n),\nEXP_CoverageDeductibleBridge_PassThrough AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tCoverageDeductibleId,\n\tCoverageDeductibleIdCount,\n\tCoverageDeductibleControl,\n\tPremiumTransactionAKID\n\tFROM SQ_CoverageDeductibleBridge_Offsets\n),\nLKP_CoverageDeductibleBridge_Offsets AS (\n\tSELECT\n\tCoverageDeductibleBridgeId,\n\tPremiumTransactionAKId,\n\tCoverageDeductibleId\n\tFROM (\n\t\tSELECT CDB.CoverageDeductibleBridgeId as CoverageDeductibleBridgeId, \r\n\t\tCDB.PremiumTransactionAKId as PremiumTransactionAKId ,\r\n\t\tCDB.CoverageDeductibleId as CoverageDeductibleId\r\n\t\tFROM CoverageDeductibleBridge CDB \r\n\t\tINNER JOIN (SELECT distinct PreviousPremiumTransactionAKID as PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage ) A\r\n\t\ton CDB.PremiumTransactionAKId = A.PremiumTransactionAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,CoverageDeductibleId ORDER BY CoverageDeductibleBridgeId) = 1\n),\nFIL_Offset_Inserts_CoverageDeductibleBridge AS (\n\tSELECT\n\tLKP_CoverageDeductibleBridge_Offsets.CoverageDeductibleBridgeId, \n\tEXP_CoverageDeductibleBridge_PassThrough.AuditID, \n\tEXP_CoverageDeductibleBridge_PassThrough.SourceSystemID, \n\tEXP_CoverageDeductibleBridge_PassThrough.CreatedDate, \n\tEXP_CoverageDeductibleBridge_PassThrough.CoverageDeductibleId, \n\tEXP_CoverageDeductibleBridge_PassThrough.CoverageDeductibleIdCount, \n\tEXP_CoverageDeductibleBridge_PassThrough.CoverageDeductibleControl, \n\tEXP_CoverageDeductibleBridge_PassThrough.PremiumTransactionAKID\n\tFROM EXP_CoverageDeductibleBridge_PassThrough\n\tLEFT JOIN LKP_CoverageDeductibleBridge_Offsets\n\tON LKP_CoverageDeductibleBridge_Offsets.PremiumTransactionAKId = EXP_CoverageDeductibleBridge_PassThrough.PremiumTransactionAKID AND LKP_CoverageDeductibleBridge_Offsets.CoverageDeductibleId = EXP_CoverageDeductibleBridge_PassThrough.CoverageDeductibleId\n\tWHERE ISNULL(CoverageDeductibleBridgeId)\n),\nTGT_CoverageDeductibleBridge_Offsets_Insert AS (\n\tINSERT INTO CoverageDeductibleBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageDeductibleId, CoverageDeductibleIdCount, CoverageDeductibleControl)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tPremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGEDEDUCTIBLEID, \n\tCOVERAGEDEDUCTIBLEIDCOUNT, \n\tCOVERAGEDEDUCTIBLECONTROL\n\tFROM FIL_Offset_Inserts_CoverageDeductibleBridge\n),\nSQ_CoverageDeductibleBridge_Deprecated AS (\n\tSELECT CDB.CoverageDeductibleId, CDB.CoverageDeductibleIdCount, CDB.CoverageDeductibleControl, WPTOL.PremiumTransactionAKID \r\n\tFROM\r\n\t WorkPremiumTransactionOffsetLineage WPTOL\r\n\t inner join CoveragedeductibleBridge CDB on\r\n\tWPTOL.PreviousPremiumTransactionAKID = CDB.PremiumTransactionAKId\r\n\tINNER JOIN premiumtransaction pt WITH (NOLOCK) on\r\n\tWPTOL.premiumtransactionID=pt.premiumtransactionID and PT.OffsetOnsetCode='Deprecated'\r\n\twhere\r\n\tWPTOL.UpdateAttributeFlag = 1\n),\nEXP_CoverageDeductibleBridge_PassThrough_Deprecated AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tCoverageDeductibleId,\n\tCoverageDeductibleIdCount,\n\tCoverageDeductibleControl,\n\tPremiumTransactionAKID\n\tFROM SQ_CoverageDeductibleBridge_Deprecated\n),\nLKP_CoverageDeductibleBridge_Deprecated AS (\n\tSELECT\n\tCoverageDeductibleBridgeId,\n\tPremiumTransactionAKId,\n\tCoverageDeductibleId\n\tFROM (\n\t\tSELECT CDB.CoverageDeductibleBridgeId as CoverageDeductibleBridgeId, \r\n\t\tCDB.PremiumTransactionAKId as PremiumTransactionAKId ,\r\n\t\tCDB.CoverageDeductibleId as CoverageDeductibleId\r\n\t\tFROM CoverageDeductibleBridge CDB \r\n\t\tINNER JOIN (SELECT distinct PreviousPremiumTransactionAKID as PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage ) A\r\n\t\ton CDB.PremiumTransactionAKId = A.PremiumTransactionAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,CoverageDeductibleId ORDER BY CoverageDeductibleBridgeId) = 1\n),\nFIL_Offset_Inserts_CoverageDeductibleBridge_Deprecated AS (\n\tSELECT\n\tLKP_CoverageDeductibleBridge_Deprecated.CoverageDeductibleBridgeId, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.AuditID, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.SourceSystemID, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.CreatedDate, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.CoverageDeductibleId, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.CoverageDeductibleIdCount, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.CoverageDeductibleControl, \n\tEXP_CoverageDeductibleBridge_PassThrough_Deprecated.PremiumTransactionAKID\n\tFROM EXP_CoverageDeductibleBridge_PassThrough_Deprecated\n\tLEFT JOIN LKP_CoverageDeductibleBridge_Deprecated\n\tON LKP_CoverageDeductibleBridge_Deprecated.PremiumTransactionAKId = EXP_CoverageDeductibleBridge_PassThrough_Deprecated.PremiumTransactionAKID AND LKP_CoverageDeductibleBridge_Deprecated.CoverageDeductibleId = EXP_CoverageDeductibleBridge_PassThrough_Deprecated.CoverageDeductibleId\n\tWHERE ISNULL(CoverageDeductibleBridgeId)\n),\nTGT_CoverageDeductibleBridge_Deprecated_Insert AS (\n\tINSERT INTO CoverageDeductibleBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageDeductibleId, CoverageDeductibleIdCount, CoverageDeductibleControl)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tPremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGEDEDUCTIBLEID, \n\tCOVERAGEDEDUCTIBLEIDCOUNT, \n\tCOVERAGEDEDUCTIBLECONTROL\n\tFROM FIL_Offset_Inserts_CoverageDeductibleBridge_Deprecated\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}