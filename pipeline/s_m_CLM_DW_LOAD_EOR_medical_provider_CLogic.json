{
    "name": "s_m_CLM_DW_LOAD_EOR_medical_provider_CLogic",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_EOR_medical_provider_CLogic",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nmed_provider_stage AS (\n\tSELECT \r\n\trtrim(med_provider_stage.med_bill_id), \r\n\tcase rtrim(med_provider_stage.bus_name) when '' then null else rtrim(med_provider_stage.bus_name) end, \r\n\tcase rtrim(med_provider_stage.last_name)  when '' then null else rtrim(med_provider_stage.last_name)  end, \r\n\tcase rtrim(med_provider_stage.first_name) when '' then null else rtrim(med_provider_stage.first_name)  end, \r\n\tcase rtrim(med_provider_stage.prfx) when '' then null else rtrim(med_provider_stage.prfx)  end, \r\n\tcase rtrim(med_provider_stage.sfx) when '' then null else rtrim(med_provider_stage.sfx)  end, \r\n\tcase rtrim(med_provider_stage.title) when '' then null else rtrim(med_provider_stage.title) end, \r\n\tcase rtrim(med_provider_stage.spty_code) when '' then null else rtrim(med_provider_stage.spty_code) end, \r\n\tcase rtrim(med_provider_stage.addr) when '' then null else rtrim(med_provider_stage.addr) end, \r\n\tcase rtrim(med_provider_stage.city) when '' then null else rtrim(med_provider_stage.city) end, \r\n\tcase rtrim(med_provider_stage.state) when '' then null else rtrim(med_provider_stage.state) end, \r\n\tcase rtrim(med_provider_stage.zip) when '' then null else rtrim(med_provider_stage.zip) end, \r\n\tcase rtrim(med_provider_stage.tax_id) when '' then null else rtrim(med_provider_stage.tax_id)  end\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.med_provider_stage med_provider_stage\r\n\tWHERE 1=1 \r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_PROVIDER_TYPE AS (\n\tSELECT\n\tmed_bill_id,\n\tbus_name,\n\tlast_name,\n\t-- *INF*: iif (bus_name = 'N/A','INDIV','GROUP')\n\tIFF(bus_name = 'N/A', 'INDIV', 'GROUP') AS provider_type_code,\n\tfirst_name,\n\t'N/A' AS mid_name,\n\tprfx,\n\tsfx,\n\ttitle,\n\tspty_code,\n\taddr,\n\tcity,\n\tstate,\n\tzip,\n\ttax_id,\n\t1 AS current_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id\n\tFROM med_provider_stage\n),\nLKP_MED_BILL_KEY AS (\n\tSELECT\n\tmed_bill_ak_id,\n\tmed_bill_key,\n\tTCH_BILL_NBR\n\tFROM (\n\t\tSELECT \r\n\t\tmedical_bill.med_bill_ak_id as med_bill_ak_id, \r\n\t\tRTRIM(medical_bill.med_bill_key) as med_bill_key \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill medical_bill\r\n\t\tWHERE\r\n\t\tmedical_bill.CRRNT_SNPSHT_FLAG = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_bill_key ORDER BY med_bill_ak_id) = 1\n),\nEXP_default_values AS (\n\tSELECT\n\tEXP_PROVIDER_TYPE.bus_name,\n\tEXP_PROVIDER_TYPE.last_name,\n\tEXP_PROVIDER_TYPE.provider_type_code,\n\tEXP_PROVIDER_TYPE.first_name,\n\tEXP_PROVIDER_TYPE.mid_name,\n\tEXP_PROVIDER_TYPE.prfx,\n\tEXP_PROVIDER_TYPE.sfx,\n\tEXP_PROVIDER_TYPE.title,\n\tEXP_PROVIDER_TYPE.spty_code,\n\tEXP_PROVIDER_TYPE.addr,\n\tEXP_PROVIDER_TYPE.city,\n\tEXP_PROVIDER_TYPE.state,\n\tEXP_PROVIDER_TYPE.zip,\n\tEXP_PROVIDER_TYPE.tax_id,\n\tEXP_PROVIDER_TYPE.current_snpsht_flag,\n\tEXP_PROVIDER_TYPE.audit_id,\n\tLKP_MED_BILL_KEY.med_bill_ak_id\n\tFROM EXP_PROVIDER_TYPE\n\tLEFT JOIN LKP_MED_BILL_KEY\n\tON LKP_MED_BILL_KEY.med_bill_key = EXP_PROVIDER_TYPE.med_bill_id\n),\nLKP_medical_provider AS (\n\tSELECT\n\tmed_provider_ak_id,\n\tmed_bill_ak_id,\n\tprovider_type_code,\n\tbus_name,\n\tlast_name,\n\tfirst_name,\n\tmid_name,\n\tprfx,\n\tsfx,\n\ttitle,\n\tspecialty_code,\n\taddr,\n\tcity,\n\tstate,\n\tzip,\n\ttax_id,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tin_med_bill_ak_id\n\tFROM (\n\t\tSELECT \r\n\t\tmedical_provider.med_provider_ak_id as med_provider_ak_id, \r\n\t\tmedical_provider.med_bill_ak_id as med_bill_ak_id \r\n\t\trtrim(medical_provider.provider_type_code) as provider_type_code, \r\n\t\trtrim(medical_provider.bus_name) as bus_name, \r\n\t\trtrim(medical_provider.last_name) as last_name, \r\n\t\trtrim(medical_provider.first_name) as first_name, \r\n\t\trtrim(medical_provider.mid_name) as mid_name, \r\n\t\trtrim(medical_provider.prfx) as prfx, \r\n\t\trtrim(medical_provider.sfx) as sfx, \r\n\t\trtrim(medical_provider.title) as title, \r\n\t\trtrim(medical_provider.specialty_code) as specialty_code, \r\n\t\trtrim(medical_provider.addr) as addr, \r\n\t\trtrim(medical_provider.city) as city, \r\n\t\trtrim(medical_provider.state) as state, \r\n\t\trtrim(medical_provider.zip) as zip, \r\n\t\trtrim(medical_provider.tax_id) as tax_id\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_provider medical_provider\r\n\t\tWHERE\r\n\t\tmedical_provider.CRRNT_SNPSHT_FLAG = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY med_bill_ak_id ORDER BY med_provider_ak_id) = 1\n),\nEXP_detect_changes AS (\n\tSELECT\n\tLKP_medical_provider.med_provider_ak_id AS lkp_med_provider_ak_id,\n\tLKP_medical_provider.med_bill_ak_id AS lkp_med_bill_ak_id,\n\tLKP_medical_provider.provider_type_code AS lkp_provider_type_code,\n\tLKP_medical_provider.bus_name AS lkp_bus_name,\n\tLKP_medical_provider.last_name AS lkp_last_name,\n\tLKP_medical_provider.first_name AS lkp_first_name,\n\tLKP_medical_provider.mid_name AS lkp_mid_name,\n\tLKP_medical_provider.prfx AS lkp_prfx,\n\tLKP_medical_provider.sfx AS lkp_sfx,\n\tLKP_medical_provider.title AS lkp_title,\n\tLKP_medical_provider.specialty_code AS lkp_specialty_code,\n\tLKP_medical_provider.addr AS lkp_addr,\n\tLKP_medical_provider.city AS lkp_city,\n\tLKP_medical_provider.state AS lkp_state,\n\tLKP_medical_provider.zip AS lkp_zip,\n\tLKP_medical_provider.tax_id AS lkp_tax_id,\n\tEXP_default_values.bus_name,\n\tEXP_default_values.last_name,\n\tEXP_default_values.provider_type_code,\n\tEXP_default_values.first_name,\n\tEXP_default_values.mid_name,\n\tEXP_default_values.prfx,\n\tEXP_default_values.sfx,\n\tEXP_default_values.title,\n\tEXP_default_values.spty_code,\n\tEXP_default_values.addr,\n\tEXP_default_values.city,\n\tEXP_default_values.state,\n\tEXP_default_values.zip,\n\tEXP_default_values.tax_id,\n\tEXP_default_values.current_snpsht_flag,\n\tEXP_default_values.audit_id,\n\tEXP_default_values.med_bill_ak_id,\n\t-- *INF*: IIF(ISnull(lkp_med_provider_ak_id),'NEW',\r\n\t-- iif (\r\n\t-- lkp_provider_type_code <> provider_type_code OR\r\n\t-- lkp_bus_name <> bus_name OR\r\n\t-- lkp_last_name <> last_name OR\r\n\t-- lkp_first_name <> first_name OR\r\n\t-- lkp_mid_name <> mid_name OR\r\n\t-- lkp_prfx <> prfx OR\r\n\t-- lkp_sfx <> sfx OR\r\n\t-- lkp_title <> title OR\r\n\t-- lkp_specialty_code <> spty_code OR\r\n\t-- lkp_addr <> addr OR\r\n\t-- lkp_city <> city OR\r\n\t-- state <> lkp_state OR\r\n\t-- lkp_zip <> zip OR\r\n\t-- lkp_tax_id <> tax_id \r\n\t-- , 'UPDATE','NOCHANGE'))\r\n\t-- \n\tIFF(\n\t    lkp_med_provider_ak_id IS NULL, 'NEW',\n\t    IFF(\n\t        lkp_provider_type_code <> provider_type_code\n\t        or lkp_bus_name <> bus_name\n\t        or lkp_last_name <> last_name\n\t        or lkp_first_name <> first_name\n\t        or lkp_mid_name <> mid_name\n\t        or lkp_prfx <> prfx\n\t        or lkp_sfx <> sfx\n\t        or lkp_title <> title\n\t        or lkp_specialty_code <> spty_code\n\t        or lkp_addr <> addr\n\t        or lkp_city <> city\n\t        or state <> lkp_state\n\t        or lkp_zip <> zip\n\t        or lkp_tax_id <> tax_id,\n\t        'UPDATE',\n\t        'NOCHANGE'\n\t    )\n\t) AS v_change_flag,\n\tv_change_flag AS Change_Flag\n\tFROM EXP_default_values\n\tLEFT JOIN LKP_medical_provider\n\tON LKP_medical_provider.med_bill_ak_id = EXP_default_values.med_bill_ak_id\n),\nFilter_Insert AS (\n\tSELECT\n\tlkp_med_provider_ak_id, \n\tbus_name, \n\tlast_name, \n\tprovider_type_code, \n\tfirst_name, \n\tmid_name, \n\tprfx, \n\tsfx, \n\ttitle, \n\tspty_code, \n\taddr, \n\tcity, \n\tstate, \n\tzip, \n\ttax_id, \n\tcurrent_snpsht_flag, \n\taudit_id, \n\tmed_bill_ak_id, \n\tChange_Flag\n\tFROM EXP_detect_changes\n\tWHERE Change_Flag = 'NEW' or Change_Flag = 'UPDATE'\n),\nSEQ_medical_provider_ak_id AS (\n\tCREATE SEQUENCE SEQ_medical_provider_ak_id\n\tSTART = 2000000\n\tINCREMENT = 1;\n),\nEXP_AUDIT_FIELDS_INSERT AS (\n\tSELECT\n\t-- *INF*: IIF(Change_Flag = 'NEW',NEXTVAL,lkp_med_provider_ak_id)\n\tIFF(Change_Flag = 'NEW', NEXTVAL, lkp_med_provider_ak_id) AS med_provider_ak_id,\n\tmed_bill_ak_id,\n\tprovider_type_code,\n\tbus_name,\n\t-- *INF*: iif (v_full_name ='','N/A',v_full_name)\n\tIFF(v_full_name = '', 'N/A', v_full_name) AS full_name,\n\tlast_name,\n\tfirst_name,\n\tmid_name,\n\t-- *INF*: rtrim(REPLACESTR(TRUE,first_name  || ' ' ||  mid_name || ' ' || last_name,'N/A',''))\n\trtrim(REGEXP_REPLACE(first_name || ' ' || mid_name || ' ' || last_name,'N/A','')) AS v_full_name,\n\tprfx,\n\tsfx,\n\ttitle,\n\tspty_code,\n\taddr,\n\tcity,\n\tstate,\n\tzip,\n\ttax_id,\n\tcurrent_snpsht_flag,\n\taudit_id,\n\t-- *INF*: iif(Change_Flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),SYSDATE)\n\tIFF(\n\t    Change_Flag = 'NEW', TO_TIMESTAMP('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'),\n\t    CURRENT_TIMESTAMP\n\t) AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_TIMESTAMP('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS CREATE_MOD_DATE,\n\tSEQ_medical_provider_ak_id.NEXTVAL,\n\tlkp_med_provider_ak_id,\n\tChange_Flag\n\tFROM Filter_Insert\n),\nmedical_provider_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_provider\n\t(med_provider_ak_id, med_bill_ak_id, provider_type_code, bus_name, full_name, last_name, first_name, mid_name, prfx, sfx, title, specialty_code, addr, city, state, zip, tax_id, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tMED_PROVIDER_AK_ID, \n\tMED_BILL_AK_ID, \n\tPROVIDER_TYPE_CODE, \n\tBUS_NAME, \n\tFULL_NAME, \n\tLAST_NAME, \n\tFIRST_NAME, \n\tMID_NAME, \n\tPRFX, \n\tSFX, \n\tTITLE, \n\tspty_code AS SPECIALTY_CODE, \n\tADDR, \n\tCITY, \n\tSTATE, \n\tZIP, \n\tTAX_ID, \n\tcurrent_snpsht_flag AS CRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCREATE_MOD_DATE AS CREATED_DATE, \n\tCREATE_MOD_DATE AS MODIFIED_DATE\n\tFROM EXP_AUDIT_FIELDS_INSERT\n),\nmedical_provider AS (\n\tSELECT \r\n\tmedical_provider.med_provider_id, \r\n\tmedical_provider.med_provider_ak_id, \r\n\tmedical_provider.eff_from_date, \r\n\tmedical_provider.eff_to_date \r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_provider\r\n\tWHERE\r\n\tMedical_provider.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and exists\r\n\t(\r\n\tselect 1 from @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_provider medical_provider2\r\n\twhere source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  and crrnt_snpsht_flag = 1 and\r\n\tmedical_provider2.med_provider_ak_id = medical_provider2.med_provider_ak_id \r\n\tgroup by medical_provider2.med_provider_ak_id having count(*) > 1\r\n\t)\r\n\torder by medical_provider.med_provider_ak_id, medical_provider.eff_from_date  desc\n),\nEXP_Lag_eff_from_date11 AS (\n\tSELECT\n\tmed_provider_id,\n\tmed_provider_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tmed_provider_ak_id = v_PREV_ROW_occurrence_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(\n\t    TRUE,\n\t    med_provider_ak_id = v_PREV_ROW_occurrence_key, DATEADD(SECOND,- 1,v_PREV_ROW_eff_from_date),\n\t    orig_eff_to_date\n\t) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tmed_provider_ak_id AS v_PREV_ROW_occurrence_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM medical_provider\n),\nFIL_First_Row_in_AK_Group AS (\n\tSELECT\n\tmed_provider_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date11\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_MED_PROVIDER AS (\n\tSELECT\n\tmed_provider_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_First_Row_in_AK_Group\n),\nmedical_provider_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.medical_provider AS T\n\tUSING UPD_MED_PROVIDER AS S\n\tON T.med_provider_id = S.med_provider_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Claims DataWarehouse/"
        },
        "annotations": []
    }
}