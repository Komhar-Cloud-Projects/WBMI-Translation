{
    "name": "m_POL_DW_LOAD_PolicyCoverage_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PolicyCoverage_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_RatingPlanForSmallDeductible AS (\n\tSELECT\n\tPolicyNumber,\n\tPolicyVersion\n\tFROM (\n\t\tselect distinct P.PolicyNumber as PolicyNumber,\r\n\t\tISNULL(RIGHT('00'+CONVERT(VARCHAR(3),P.PolicyVersion),2),'00') as PolicyVersion\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTTransactionInsuranceLineLocationBridge B\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction C\r\n\t\ton C.CoverageId=B.CoverageId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTInsuranceLine L\r\n\t\ton L.LineId=B.LineId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy P\r\n\t\ton L.PolicyId=P.PolicyId\r\n\t\tand\r\n\t\tP.PolicyStatus<>'Quote'\r\n\t\tand\r\n\t\tP.TransactionState='committed'\r\n\t\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCClassCodeStaging CC\r\n\t\ton CC.ObjectId=C.ParentCoverageObjectId and CC.ObjectName='DC_WC_Risk'\r\n\t\tand L.LineType='WorkersCompensation' and LTRIM(RTRIM(C.ParentCoverageObjectName))='DC_WC_Risk' \r\n\t\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCStatCodeStaging STC2\r\n\t\ton STC2.ObjectId=C.CoverageId and STC2.ObjectName='DC_Coverage' and STC2.Type in ('AdmiraltyBalanceToMinimumCharge',\r\n\t\t'AircraftSeatSurcharge',\r\n\t\t'AlcoholDrugFreeWorkplace',\r\n\t\t'AlcoholOrDrugFreeWorkplaceCoalMinePremiumCredit',\r\n\t\t'AlcoholOrDrugFreeWorkplacePremiumCredit',\r\n\t\t'AlcoholOrDrugFreeWorkplaceSubjectPremiumCredit',\r\n\t\t'AtomicEnergyRadiationExposureCharge',\r\n\t\t'BalancetoMinimum',\r\n\t\t'CertifiedRiskManagement',\r\n\t\t'Class',\r\n\t\t'CompulsoryWorkplace',\r\n\t\t'ContractorsCredit',\r\n\t\t'DTEC',\r\n\t\t'EmployeeLeasingStatCode',\r\n\t\t'EmployersLiabilityIncreasedBalanceToMinimumCharge',\r\n\t\t'EmployersLiabilityIncreasedLimits',\r\n\t\t'ExpenseConstant',\r\n\t\t'ExperienceModification',\r\n\t\t'FELAIncreasedLimitsPremium',\r\n\t\t'ForeignVoluntaryCompensationFlatFeeStatCode',\r\n\t\t'ManagedCareFactor',\r\n\t\t'MeritRatingCreditPremium',\r\n\t\t'MeritRatingDebitPremium',\r\n\t\t'MeritRatingStatCode',\r\n\t\t'PremiumDiscount',\r\n\t\t'PremiumDiscountTypeA',\r\n\t\t'PremiumIncentiveForSmallEmployees',\r\n\t\t'PreviouslyInjuredEmployee',\r\n\t\t'Repatriation',\r\n\t\t'SafetyCertificationCreditProgram',\r\n\t\t'ScheduledCreditModification',\r\n\t\t'ScheduledModification',\r\n\t\t'SmallDeductibleCredit',\r\n\t\t'StrikeDutySurcharge',\r\n\t\t'TabularAdjustmentCreditProgram',\r\n\t\t'TabularAdjustmentDebitProgram',\r\n\t\t'TerrorismRiskInsuranceProgramReauthorizationAct',\r\n\t\t'TRIA',\r\n\t\t'VoluntaryCompensationFlatFee',\r\n\t\t'VoluntaryCompensationFlatFeeStatCode',\r\n\t\t'VolunteerAmbulance',\r\n\t\t'VolunteerFirefighter',\r\n\t\t'WaiverOfSubrogation',\r\n\t\t'WorkplaceSafetyIncentiveProgramSubject')\r\n\t\tand L.LineType='WorkersCompensation'\r\n\t\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCStatCodeStaging STC\r\n\t\ton STC.ObjectId=C.CoverageId and STC.ObjectName='DC_Coverage' and STC.Type in ('Class') \r\n\t\twhere B.RatingPlan='Guaranteed' \r\n\t\tand  case when L.LineType='WorkersCompensation' and LTRIM(RTRIM(C.ParentCoverageObjectName))='DC_WC_Risk'  then substring(ltrim(rtrim(CC.Value)), 1, 4) \r\n\t\twhen L.LineType='WorkersCompensation' then substring(ltrim(rtrim(STC2.Value)), 1, 4) else substring(ltrim(rtrim(STC.Value)), 1, 4) end  in ('9657','9663','9664','9667','9668','9669','9670','9671','9672','9673','9674','9675','9676','9677','9678','9679','9758','9759','9760','9761','9762','9763','9764','9770','9771','9772','9773','9780','9781','9784','9785','9786','9787','9788','9789','9790','9791','9792','9793','9794','9795','9796','9797','9798','9799','9801','9870','9871','9872','9878','9881','9882','9888','9895','9900','9901','9902','9903','9904','9905','9906','9907','9908','9909','9910','9911','9912','9913','9914','9915','9916','9917','9918','9919','9920','9924','9925','9926','9927','9928','9929','9930','9931','9932','9933','9934','9935','9936','9937','9938','9939','9940','9941','9942','9943','9944','9945','9946','9947','9948','9949','9950','9951','9952','9953','9954','9955','9970','9971','9972','9973','9974','9975','9981','9982','9983','9986','9987','9991','9992')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersion ORDER BY PolicyNumber) = 1\n),\nLKP_RatingPlanForSmallDeductible2 AS (\n\tSELECT\n\tRatingPlanAKId,\n\tPolicyNumber,\n\tPolicyVersion\n\tFROM (\n\t\tSELECT PC.RatingPlanAKId as RatingPlanAKId, \r\n\t\tP.pol_num as PolicyNumber, \r\n\t\tP.pol_mod as PolicyVersion \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy P\r\n\t\ton PC.PolicyAKID=P.pol_ak_id and P.crrnt_snpsht_flag=1\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingPlan RP\r\n\t\ton PC.RatingPlanAKID=RP.RatingPlanAKID and RP.CurrentSnapshotFlag=1\r\n\t\twhere PC.SourceSystemId='DCT' \r\n\t\tand RP.RatingPlanDescription='Small Deductible'\r\n\t\tand exists (select 1 \r\n\t\tfrom @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WP\r\n\t\twhere P.pol_num=WP.PolicyNumber and P.pol_mod=ISNULL(RIGHT('00'+CONVERT(VARCHAR(3),WP.PolicyVersion),2),'00') )\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyNumber,PolicyVersion ORDER BY RatingPlanAKId) = 1\n),\nLKP_RatingCoverage_Risk AS (\n\tSELECT\n\tRiskLocationAKID,\n\tPolicyAKID,\n\tCoverageGUID\n\tFROM (\n\t\tSELECT R.RiskLocationAKID as RiskLocationAKID, R.PolicyAKID as PolicyAKID, RC.CoverageGUID as CoverageGUID\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage RC\r\n\t\tINNER HASH JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage PC ON RC.PolicyCoverageAKID = PC.PolicyCoverageAKID\r\n\t\tand RC.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation R ON R.RiskLocationAKID = PC.RiskLocationAKID\r\n\t\t\tAND PC.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tAND PC.CurrentSnapshotFlag = 1\r\n\t\tAND R.SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tAND R.CurrentSnapshotFlag = 1\r\n\t\t\tand  exists( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\ton WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod  \r\n\t\tand pol.crrnt_snpsht_flag=1 and R.PolicyAKId=pol.pol_ak_id) \r\n\t\tORDER BY RC.RatingCoverageAKID\r\n\t\t\t,rc.EffectiveDate --\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID ORDER BY RiskLocationAKID DESC) = 1\n),\nSQ_PolicyCoverage_SRC AS (\n\tSELECT distinct WorkDCTPolicy.SessionId, WorkDCTPolicy.PartyId, WorkDCTPolicy.PolicyGUId, WorkDCTPolicy.PolicyEffectiveDate,\r\n\t WorkDCTPolicy.PolicyExpirationDate, WorkDCTPolicy.PolicyVersion, WorkDCTInsuranceLine.LineType, WorkDCTPolicy.CustomerNum,\r\n\t WorkDCTInsuranceLine.RiskGrade, WorkDCTInsuranceLine.IsAuditable, WorkDCTInsuranceLine.PriorCarrierName, WorkDCTPolicy.LineOfBusiness, \r\n\t WorkDCTPolicy.PolicyNumber, WorkDCTInsuranceLine.PriorPolicyNumber, WorkDCTLocation.Territory, WorkDCTLocation.LocationNumber, \r\n\t WorkDCTLocation.LocationXmlId, WorkDCTLocation.StateProvince,WorkDCTInsuranceLine.CommissionCustomerCareAmount,Bridge.RatingPlan,\r\n\t WorkDCTCoverageTransaction.ParentCoverageObjectName,WorkDCTCoverageTransaction.CoverageGUID\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy\r\n\tinner hash join\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTInsuranceLine\r\n\ton \r\n\tWorkDCTPolicy.PolicyId=WorkDCTInsuranceLine.PolicyId\r\n\tand\r\n\tWorkDCTPolicy.PolicyStatus<>'Quote'\r\n\tand\r\n\tWorkDCTPolicy.TransactionState='committed'\r\n\tinner hash join\r\n\t(select distinct LineId,LocationAssociationId, RatingPlan,CoverageId from\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTTransactionInsuranceLineLocationBridge) Bridge\r\n\ton\r\n\tBridge.LineId=WorkDCTInsuranceLine.LineId\r\n\tinner hash join\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTLocation\r\n\ton\r\n\tWorkDCTLocation.LocationAssociationId=Bridge.LocationAssociationId\r\n\tinner Hash Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTCoverageTransaction\r\n\ton WorkDCTCoverageTransaction.CoverageId=Bridge.CoverageId\r\n\tWHERE\r\n\tWorkDCTPolicy.TransactionType NOT IN ('RescindNonRenew','Reporting','VoidReporting','Information','Dividend','RevisedDividend',\r\n\t'VoidDividend','NonRenew','RescindCancelPending','CancelPending')\r\n\t@{pipeline().parameters.EXCLUDE_TTYPE}\r\n\torder by WorkDCTPolicy.SessionId\n),\nEXP_Pol_AK_ID AS (\n\tSELECT\n\tPolicyNumber AS i_PolicyNumber,\n\tPolicyVersion AS i_PolicyVersion,\n\tTerritory AS i_Territory,\n\tLocationNumber AS i_LocationNumber,\n\tLocationXmlId AS i_LocationXmlId,\n\t-- *INF*: rtrim(ltrim(:UDF.DEFAULT_VALUE_FOR_STRINGS(i_PolicyNumber)))\n\trtrim(ltrim(:UDF.DEFAULT_VALUE_FOR_STRINGS(i_PolicyNumber))) AS v_PolicyNumber,\n\t-- *INF*: rtrim(ltrim(IIF(ISNULL(i_PolicyVersion),'00',LPAD(TO_CHAR(i_PolicyVersion),2,'0'))))\n\trtrim(ltrim(IFF(i_PolicyVersion IS NULL, '00', LPAD(TO_CHAR(i_PolicyVersion), 2, '0')))) AS v_PolicyVersion,\n\t-- *INF*: IIF(ISNULL(i_LocationNumber) or IS_SPACES(i_LocationNumber) or LENGTH(i_LocationNumber)=0,'0000',LPAD(LTRIM(RTRIM(i_LocationNumber)), 4, '0'))\n\tIFF(i_LocationNumber IS NULL OR IS_SPACES(i_LocationNumber) OR LENGTH(i_LocationNumber) = 0, '0000', LPAD(LTRIM(RTRIM(i_LocationNumber)), 4, '0')) AS v_LocationNumber,\n\tv_LocationNumber AS o_LocationNumber,\n\t-- *INF*: IIF(ISNULL(i_Territory) or IS_SPACES(i_Territory) or LENGTH(i_Territory)=0,'N/A',LTRIM(RTRIM(i_Territory)))\n\tIFF(i_Territory IS NULL OR IS_SPACES(i_Territory) OR LENGTH(i_Territory) = 0, 'N/A', LTRIM(RTRIM(i_Territory))) AS v_Territory,\n\tv_Territory AS o_Territory,\n\t-- *INF*: IIF(ISNULL(i_LocationXmlId) or IS_SPACES(i_LocationXmlId) or LENGTH(i_LocationXmlId)=0,'N/A',LTRIM(RTRIM(i_LocationXmlId)))\n\tIFF(i_LocationXmlId IS NULL OR IS_SPACES(i_LocationXmlId) OR LENGTH(i_LocationXmlId) = 0, 'N/A', LTRIM(RTRIM(i_LocationXmlId))) AS v_LocationXmlId,\n\tv_PolicyNumber||v_PolicyVersion AS o_PolicyKey,\n\t-- *INF*: v_LocationXmlId\r\n\t-- --Change for UID new approch\r\n\t-- --v_LocationNumber||'~'||v_Territory||'~'||v_LocationXmlId\n\tv_LocationXmlId AS o_RiskLocationKey,\n\tCoverageGUID\n\tFROM SQ_PolicyCoverage_SRC\n),\nLKP_Policy AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\tpol_key\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol_num\r\n\t\tand ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol_mod)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n),\nEXP_RiskLocation_key AS (\n\tSELECT\n\tLKP_Policy.pol_ak_id AS Pol_ak_id,\n\tEXP_Pol_AK_ID.o_RiskLocationKey AS RiskLocationKey,\n\tEXP_Pol_AK_ID.o_LocationNumber AS LocationNumber,\n\tEXP_Pol_AK_ID.o_Territory AS Territory,\n\tSQ_PolicyCoverage_SRC.LineType AS i_LineType,\n\tSQ_PolicyCoverage_SRC.ParentCoverageObjectName AS i_ParentCoverageObjectName,\n\tSQ_PolicyCoverage_SRC.StateProvince AS i_StateProvince,\n\t-- *INF*: IIF(isnull(Pol_ak_id),-1,Pol_ak_id)\n\tIFF(Pol_ak_id IS NULL, - 1, Pol_ak_id) AS v_PolicyAKID,\n\t-- *INF*: IIF(ISNULL(i_LineType) or IS_SPACES(i_LineType) or LENGTH(i_LineType)=0,'N/A',LTRIM(RTRIM(i_LineType)))\n\tIFF(i_LineType IS NULL OR IS_SPACES(i_LineType) OR LENGTH(i_LineType) = 0, 'N/A', LTRIM(RTRIM(i_LineType))) AS v_LineType,\n\tEXP_Pol_AK_ID.CoverageGUID,\n\t-- *INF*: :LKP.LKP_RatingCoverage_Risk(v_PolicyAKID,CoverageGUID)\r\n\t-- -- Condition is to pull RiskLocationAKID for Policy Their Coverage is already present\n\tLKP_RATINGCOVERAGE_RISK_v_PolicyAKID_CoverageGUID.RiskLocationAKID AS v_RiskLocationAKID,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- in (i_ParentCoverageObjectName,  'DC_BP_Location','DC_BP_Risk','DC_CA_Risk','DC_CF_Risk','DC_GL_Risk','DC_IM_Risk','DC_WC_Risk','DCBPLocation','WB_GOC_Risk','WB_HIO_Risk', 'WB_EC_Risk')=1,\r\n\t-- v_PolicyAKID||'~'||RiskLocationKey,\r\n\t-- IN(i_ParentCoverageObjectName,'DC_CA_State','DC_WC_StateTerm','WB_GOC_State','WB_HIO_State','WB_IM_State','WB_EC_State','DC_WC_State')=1,\r\n\t-- v_PolicyAKID||'~'||'PrimaryLocation'||'~'||i_StateProvince||'~'||v_LineType ,\r\n\t-- IN(i_ParentCoverageObjectName,'DC_CR_Endorsement','DC_CR_Risk','DC_CR_RiskCrime','DC_Line','DC_CU_UmbrellaEmployersLiability','DC_IM_CoverageForm','WB_CU_PremiumDetail','DC_CA_BusinessInterruptionOption')=1,\r\n\t-- v_PolicyAKID||'~'||'PrimaryLocation'||'~'||v_LineType\r\n\t-- )\n\tDECODE(TRUE,\n\tin(i_ParentCoverageObjectName, 'DC_BP_Location', 'DC_BP_Risk', 'DC_CA_Risk', 'DC_CF_Risk', 'DC_GL_Risk', 'DC_IM_Risk', 'DC_WC_Risk', 'DCBPLocation', 'WB_GOC_Risk', 'WB_HIO_Risk', 'WB_EC_Risk') = 1, v_PolicyAKID || '~' || RiskLocationKey,\n\tIN(i_ParentCoverageObjectName, 'DC_CA_State', 'DC_WC_StateTerm', 'WB_GOC_State', 'WB_HIO_State', 'WB_IM_State', 'WB_EC_State', 'DC_WC_State') = 1, v_PolicyAKID || '~' || 'PrimaryLocation' || '~' || i_StateProvince || '~' || v_LineType,\n\tIN(i_ParentCoverageObjectName, 'DC_CR_Endorsement', 'DC_CR_Risk', 'DC_CR_RiskCrime', 'DC_Line', 'DC_CU_UmbrellaEmployersLiability', 'DC_IM_CoverageForm', 'WB_CU_PremiumDetail', 'DC_CA_BusinessInterruptionOption') = 1, v_PolicyAKID || '~' || 'PrimaryLocation' || '~' || v_LineType) AS v_RiskLocation_Key,\n\tv_RiskLocation_Key AS o_RiskLocationKey,\n\tv_RiskLocationAKID AS o_RatingCoverage_RiskLocationAKID\n\tFROM EXP_Pol_AK_ID\n\t -- Manually join with SQ_PolicyCoverage_SRC\n\tLEFT JOIN LKP_Policy\n\tON LKP_Policy.pol_key = EXP_Pol_AK_ID.o_PolicyKey\n\tLEFT JOIN LKP_RATINGCOVERAGE_RISK LKP_RATINGCOVERAGE_RISK_v_PolicyAKID_CoverageGUID\n\tON LKP_RATINGCOVERAGE_RISK_v_PolicyAKID_CoverageGUID.PolicyAKID = v_PolicyAKID\n\tAND LKP_RATINGCOVERAGE_RISK_v_PolicyAKID_CoverageGUID.CoverageGUID = CoverageGUID\n\n),\nMplt_RiskLocationAKID_Population AS (WITH\n\tLKP_RiskLocation_RiskLocationKey AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey ORDER BY RiskLocationAKID) = 1\n\t),\n\tLKP_RiskLocation_RiskLocationKey_LocNum_Territory AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey,\n\t\tLocationUnitNumber,\n\t\tRiskTerritory\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey,\n\t\t\t\tLocationUnitNumber,\n\t\t\t\tRiskTerritory\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey,LocationUnitNumber,RiskTerritory ORDER BY RiskLocationAKID) = 1\n\t),\n\tLKP_RiskLocation_RiskLocationKey_LocNum AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey,\n\t\tLocationUnitNumber\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey,\n\t\t\t\tLocationUnitNumber\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey,LocationUnitNumber ORDER BY RiskLocationAKID) = 1\n\t),\n\tSource_Input AS (\n\t\t\n\t),\n\tExp_RiskLocationAKID_population AS (\n\t\tSELECT\n\t\tRatingCoverage_RiskLocationAKID AS i_RatingCoverage_RiskLocationAKID,\n\t\tRiskLocationKey AS i_RiskLocationKey,\n\t\tLocationNumber AS i_LocationNumber,\n\t\tTerritory AS i_Territory,\n\t\t-- *INF*: IIF(ISNULL(i_RatingCoverage_RiskLocationAKID),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY(i_RiskLocationKey,i_LocationNumber,i_Territory),i_RatingCoverage_RiskLocationAKID)\n\t\tIFF(i_RatingCoverage_RiskLocationAKID IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskLocationAKID, i_RatingCoverage_RiskLocationAKID) AS v_RiskLocationAKID_RiskKey_Location_Territory,\n\t\t-- *INF*: IIF(ISNULL(v_RiskLocationAKID_RiskKey_Location_Territory),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM(i_RiskLocationKey,i_LocationNumber),v_RiskLocationAKID_RiskKey_Location_Territory)\n\t\tIFF(v_RiskLocationAKID_RiskKey_Location_Territory IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.RiskLocationAKID, v_RiskLocationAKID_RiskKey_Location_Territory) AS v_RiskLocationAKID_RiskKey_Location,\n\t\t-- *INF*: IIF(ISNULL(v_RiskLocationAKID_RiskKey_Location),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY(i_RiskLocationKey),v_RiskLocationAKID_RiskKey_Location)\n\t\tIFF(v_RiskLocationAKID_RiskKey_Location IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey.RiskLocationAKID, v_RiskLocationAKID_RiskKey_Location) AS v_RiskLocationAKID_RiskKey,\n\t\t-- *INF*: iif(isnull(v_RiskLocationAKID_RiskKey),-1,v_RiskLocationAKID_RiskKey)\n\t\tIFF(v_RiskLocationAKID_RiskKey IS NULL, - 1, v_RiskLocationAKID_RiskKey) AS o_RiskLocationAKID\n\t\tFROM Source_Input\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskLocationKey = i_RiskLocationKey\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.LocationUnitNumber = i_LocationNumber\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskTerritory = i_Territory\n\t\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.RiskLocationKey = i_RiskLocationKey\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.LocationUnitNumber = i_LocationNumber\n\t\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey.RiskLocationKey = i_RiskLocationKey\n\t\n\t),\n\tRiskLocationAKID AS (\n\t\tSELECT\n\t\to_RiskLocationAKID\n\t\tFROM Exp_RiskLocationAKID_population\n\t),\n),\nAGG_RemoveDuplicates AS (\n\tSELECT\n\tSQ_PolicyCoverage_SRC.PolicyGUId AS i_Id, \n\tSQ_PolicyCoverage_SRC.PolicyEffectiveDate AS i_EffectiveDate, \n\tSQ_PolicyCoverage_SRC.PolicyExpirationDate AS i_ExpirationDate, \n\tSQ_PolicyCoverage_SRC.PolicyVersion AS i_PolicyVersion, \n\tSQ_PolicyCoverage_SRC.LineType AS i_Type, \n\tSQ_PolicyCoverage_SRC.CustomerNum AS i_CustomerNumber, \n\tSQ_PolicyCoverage_SRC.RiskGrade AS i_RiskGrade, \n\tSQ_PolicyCoverage_SRC.IsAuditable AS i_IsAuditable, \n\tSQ_PolicyCoverage_SRC.PriorCarrierName, \n\tSQ_PolicyCoverage_SRC.PolicyNumber AS i_PolicyNumber, \n\tSQ_PolicyCoverage_SRC.LineOfBusiness AS i_LineOfBusiness, \n\tSQ_PolicyCoverage_SRC.Territory AS i_Territory, \n\tSQ_PolicyCoverage_SRC.LocationNumber AS i_LocationNumber, \n\tSQ_PolicyCoverage_SRC.CommissionCustomerCareAmount AS i_CommissionCustomerCareAmount, \n\tSQ_PolicyCoverage_SRC.LocationXmlId AS i_LocationXmlId, \n\tSQ_PolicyCoverage_SRC.StateProvince AS StateProv, \n\tSQ_PolicyCoverage_SRC.SessionId, \n\tSQ_PolicyCoverage_SRC.PartyId, \n\tSQ_PolicyCoverage_SRC.PriorPolicyNumber AS PriorInsurancePolicyNumber, \n\tSQ_PolicyCoverage_SRC.RatingPlan AS i_RatingPlan, \n\tLKP_Policy.pol_ak_id, \n\tMplt_RiskLocationAKID_Population.o_RiskLocationAKID AS RiskLocationAKID, \n\tIFF(i_CustomerNumber IS NULL OR IS_SPACES(i_CustomerNumber) OR LENGTH(i_CustomerNumber) = 0, 'N/A', LTRIM(RTRIM(i_CustomerNumber))) AS o_CustomerNumber, \n\tIFF(i_Id IS NULL OR IS_SPACES(i_Id) OR LENGTH(i_Id) = 0, 'N/A', LTRIM(RTRIM(i_Id))) AS o_Id, \n\tIFF(i_PolicyVersion IS NULL, '00', LPAD(TO_CHAR(i_PolicyVersion), 2, '0')) AS o_PolicyVersion, \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_PolicyNumber) AS o_PolicyNumber, \n\tIFF(i_LocationNumber IS NULL OR IS_SPACES(i_LocationNumber) OR LENGTH(i_LocationNumber) = 0, '0000', LPAD(LTRIM(RTRIM(i_LocationNumber)), 4, '0')) AS o_LocationNumber, \n\tIFF(i_LocationXmlId IS NULL OR IS_SPACES(i_LocationXmlId) OR LENGTH(i_LocationXmlId) = 0, 'N/A', LTRIM(RTRIM(i_LocationXmlId))) AS o_LocationXmlId, \n\tIFF(i_Territory IS NULL OR IS_SPACES(i_Territory) OR LENGTH(i_Territory) = 0, 'N/A', LTRIM(RTRIM(i_Territory))) AS o_Territory, \n\tIFF(i_Type IS NULL OR IS_SPACES(i_Type) OR LENGTH(i_Type) = 0, 'N/A', LTRIM(RTRIM(i_Type))) AS o_Type, \n\tIFF(i_EffectiveDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), i_EffectiveDate) AS o_EffectiveDate, \n\ti_ExpirationDate AS o_ExpirationDate, \n\tIFF(i_IsAuditable = 'T', '1', '0') AS o_AuditableIndicator, \n\tIFF(i_RiskGrade IS NULL OR IS_SPACES(i_RiskGrade) OR LENGTH(i_RiskGrade) = 0, 'N/A', LTRIM(RTRIM(i_RiskGrade))) AS o_RiskGrade, \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(PriorCarrierName) AS o_CarrierName, \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(i_LineOfBusiness) AS o_LineOfBusiness, \n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(PriorInsurancePolicyNumber) AS o_PriorInsurancePolicyKey, \n\tIFF(i_CommissionCustomerCareAmount IS NULL OR i_CommissionCustomerCareAmount = 0.000, 0, ABS(i_CommissionCustomerCareAmount / 100)) AS o_CommissionCustomerCareAmount, \n\tLTRIM(RTRIM(i_RatingPlan)) AS o_RatingPlan\n\tFROM SQ_PolicyCoverage_SRC\n\tGROUP BY pol_ak_id, RiskLocationAKID, o_PolicyVersion, o_PolicyNumber, o_Type, o_EffectiveDate\n),\nEXP_Values AS (\n\tSELECT\n\tStateProv AS i_StateProv,\n\to_CustomerNumber AS i_CustomerNumber,\n\to_Id AS i_Id,\n\to_PolicyVersion AS i_PolicyVersion,\n\to_LocationNumber AS i_LocationNumber,\n\to_LocationXmlId AS i_LocationXmlId,\n\to_Territory AS i_Territory,\n\to_Type AS i_Type,\n\to_EffectiveDate AS i_EffectiveDate,\n\to_ExpirationDate AS i_ExpirationDate,\n\to_AuditableIndicator AS i_AuditableIndicator,\n\to_RiskGrade AS i_RiskGrade,\n\to_LineOfBusiness AS i_LineOfBusiness,\n\to_CarrierName AS CarrierName,\n\to_PolicyNumber AS PolicyNumber,\n\to_PriorInsurancePolicyKey AS PriorInsurancePolicyKey,\n\tSessionId,\n\tPartyId,\n\to_CommissionCustomerCareAmount AS CommissionCustomerCareAmount,\n\to_RatingPlan AS i_RatingPlan,\n\tpol_ak_id AS i_pol_ak_id,\n\tRiskLocationAKID AS i_RiskLocationAKID,\n\t-- *INF*: rtrim(ltrim(PolicyNumber))||rtrim(ltrim(i_PolicyVersion))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --i_CustomerNumber||i_PolicyNumber||i_PolicyVersion\n\trtrim(ltrim(PolicyNumber)) || rtrim(ltrim(i_PolicyVersion)) AS v_PolicyKey,\n\ti_Id||i_PolicyVersion AS v_PolicyIDKey,\n\t-- *INF*: :LKP.LKP_RATINGPLANFORSMALLDEDUCTIBLE(PolicyNumber, i_PolicyVersion)\n\tLKP_RATINGPLANFORSMALLDEDUCTIBLE_PolicyNumber_i_PolicyVersion.PolicyNumber AS v_RatingPlanForSmallDeductible,\n\t-- *INF*: :LKP.LKP_RATINGPLANFORSMALLDEDUCTIBLE2(PolicyNumber, i_PolicyVersion)\n\tLKP_RATINGPLANFORSMALLDEDUCTIBLE2_PolicyNumber_i_PolicyVersion.RatingPlanAKId AS v_RatingPlanForSmallDeductible2,\n\t-- *INF*: LTRIM(RTRIM(i_StateProv))\n\tLTRIM(RTRIM(i_StateProv)) AS o_StateProv,\n\ti_pol_ak_id AS o_Pol_AK_ID,\n\t-- *INF*: i_RiskLocationAKID\r\n\t-- --i_pol_ak_id||i_LocationNumber||i_Territory||i_LocationXmlId\r\n\t-- \r\n\t-- --i_Id||i_PolicyVersion||i_LocationNumber||i_Territory||i_LocationXmlId\n\ti_RiskLocationAKID AS o_RiskLocationAKID,\n\ti_Type AS o_Type,\n\ti_EffectiveDate AS o_EffectiveDate,\n\t-- *INF*: IIF(ISNULL(i_ExpirationDate),TO_DATE('21001231235959' , 'YYYYMMDDHH24MISS'),i_ExpirationDate)\n\tIFF(i_ExpirationDate IS NULL, TO_DATE('21001231235959', 'YYYYMMDDHH24MISS'), i_ExpirationDate) AS o_ExpirationDate,\n\ti_AuditableIndicator AS o_AuditableIndicator,\n\ti_RiskGrade AS o_RiskGradeCode,\n\ti_LineOfBusiness AS o_PriorInsuranceLine,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  NOT ISNULL(v_RatingPlanForSmallDeductible) OR  NOT ISNULL(v_RatingPlanForSmallDeductible2),\r\n\t-- 'Small Deductible',\r\n\t-- UPPER(i_RatingPlan)='RETROSPECTIVE', \r\n\t-- 'Large Risk Alternative Rating Option(LRARO)', \r\n\t-- 'Guaranteed Cost'\r\n\t-- )\n\tDECODE(TRUE,\n\tNOT v_RatingPlanForSmallDeductible IS NULL OR NOT v_RatingPlanForSmallDeductible2 IS NULL, 'Small Deductible',\n\tUPPER(i_RatingPlan) = 'RETROSPECTIVE', 'Large Risk Alternative Rating Option(LRARO)',\n\t'Guaranteed Cost') AS o_RatingPlanDescription\n\tFROM AGG_RemoveDuplicates\n\tLEFT JOIN LKP_RATINGPLANFORSMALLDEDUCTIBLE LKP_RATINGPLANFORSMALLDEDUCTIBLE_PolicyNumber_i_PolicyVersion\n\tON LKP_RATINGPLANFORSMALLDEDUCTIBLE_PolicyNumber_i_PolicyVersion.PolicyNumber = PolicyNumber\n\tAND LKP_RATINGPLANFORSMALLDEDUCTIBLE_PolicyNumber_i_PolicyVersion.PolicyVersion = i_PolicyVersion\n\n\tLEFT JOIN LKP_RATINGPLANFORSMALLDEDUCTIBLE2 LKP_RATINGPLANFORSMALLDEDUCTIBLE2_PolicyNumber_i_PolicyVersion\n\tON LKP_RATINGPLANFORSMALLDEDUCTIBLE2_PolicyNumber_i_PolicyVersion.PolicyNumber = PolicyNumber\n\tAND LKP_RATINGPLANFORSMALLDEDUCTIBLE2_PolicyNumber_i_PolicyVersion.PolicyVersion = i_PolicyVersion\n\n),\nLKP_PolicyLimit AS (\n\tSELECT\n\tPolicyLimitAKId,\n\tPolicyAKId,\n\tInsuranceLine\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyLimitAKId,\n\t\t\tPolicyAKId,\n\t\t\tInsuranceLine\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit\n\t\tWHERE CurrentSnapshotFlag=1 AND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,InsuranceLine ORDER BY PolicyLimitAKId) = 1\n),\nLKP_PriorCoverage AS (\n\tSELECT\n\tPriorCoverageId,\n\tPriorCarrierName,\n\tPriorPolicyKey,\n\tPriorInsuranceLine\n\tFROM (\n\t\tSELECT \n\t\t\tPriorCoverageId,\n\t\t\tPriorCarrierName,\n\t\t\tPriorPolicyKey,\n\t\t\tPriorInsuranceLine\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PriorCoverage\n\t\tWHERE SourceSystemId='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PriorCarrierName,PriorPolicyKey,PriorInsuranceLine ORDER BY PriorCoverageId) = 1\n),\nLKP_RatingPlan AS (\n\tSELECT\n\tRatingPlanAKId,\n\tRatingPlanDescription\n\tFROM (\n\t\tSELECT \n\t\t\tRatingPlanAKId,\n\t\t\tRatingPlanDescription\n\t\tFROM RatingPlan\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RatingPlanDescription ORDER BY RatingPlanAKId) = 1\n),\nLKP_WBWCLineStage AS (\n\tSELECT\n\tInterstateRiskID,\n\tSessionId,\n\tPartyId,\n\tState\n\tFROM (\n\t\tselect distinct\r\n\t\tptya.SessionId as SessionId,\r\n\t\tptya.PartyId as PartyId,\r\n\t\tLTRIM(RTRIM(st.state)) as State,\r\n\t\tls.InterstateRiskId as InterstateRiskId\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCLineStage ls\r\n\t\t,@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCLineStaging wlin\r\n\t\t,@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging lin\r\n\t\t,@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPartyAssociationStaging ptya\r\n\t\t,@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCStateStaging st\r\n\t\twhere ls.SessionId = wlin.SessionId\r\n\t\tand ls.WCLineId = wlin.WC_LineId\r\n\t\tand wlin.SessionId = lin.SessionId\r\n\t\tand wlin.LineId = lin.LineId\r\n\t\tand ptya.SessionId = lin.SessionId\r\n\t\tand st.SessionId = lin.SessionId\r\n\t\tand st.LineId = lin.LineId\r\n\t\tand ptya.PartyAssociationType = 'Account'\r\n\t\tand lin.Type = 'WorkersCompensation'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,PartyId,State ORDER BY InterstateRiskID) = 1\n),\nLKP_sup_insurance_line AS (\n\tSELECT\n\tsup_ins_line_id,\n\tins_line_descript\n\tFROM (\n\t\tSELECT \n\t\t\tsup_ins_line_id,\n\t\t\tins_line_descript\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_insurance_line\n\t\tWHERE crrnt_snpsht_flag='1' and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ins_line_descript ORDER BY sup_ins_line_id) = 1\n),\nLKP_sup_type_bureau_code AS (\n\tSELECT\n\tsup_type_bureau_code_id,\n\ttype_bureau_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_type_bureau_code_id,\n\t\t\ttype_bureau_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_type_bureau_code\n\t\tWHERE crrnt_snpsht_flag='1' and source_sys_id='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY type_bureau_code ORDER BY sup_type_bureau_code_id) = 1\n),\nEXP_MD5 AS (\n\tSELECT\n\tEXP_Values.o_RiskLocationAKID AS i_RiskLocationAKID,\n\tEXP_Values.o_Pol_AK_ID AS i_pol_ak_id,\n\tLKP_sup_insurance_line.sup_ins_line_id AS i_sup_ins_line_id,\n\tLKP_sup_type_bureau_code.sup_type_bureau_code_id AS i_sup_type_bureau_code_id,\n\tEXP_Values.o_Type AS i_Type,\n\tEXP_Values.o_EffectiveDate AS i_EffectiveDate,\n\tEXP_Values.o_ExpirationDate AS i_ExpirationDate,\n\tLKP_WBWCLineStage.InterstateRiskID AS i_InterstateRiskID,\n\tEXP_Values.o_AuditableIndicator AS AuditableIndicator,\n\tEXP_Values.o_RiskGradeCode AS RiskGradeCode,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id),ERROR('Pol_ak_id can not be blank!'),i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, ERROR('Pol_ak_id can not be blank!'), i_pol_ak_id) AS v_pol_ak_id,\n\t-- *INF*: IIF(ISNULL(i_RiskLocationAKID),ERROR('RiskLocationAKID can not be blank!'),i_RiskLocationAKID)\n\tIFF(i_RiskLocationAKID IS NULL, ERROR('RiskLocationAKID can not be blank!'), i_RiskLocationAKID) AS v_RiskLocationAKID,\n\t-- *INF*: TO_CHAR(i_pol_ak_id)||'~'||TO_CHAR(i_RiskLocationAKID)\r\n\t-- \r\n\t-- --- Change ID and version with Pol_ak_id for UID Project\n\tTO_CHAR(i_pol_ak_id) || '~' || TO_CHAR(i_RiskLocationAKID) AS v_PolicyCoverageKey,\n\t-- *INF*: MD5(TO_CHAR(v_pol_ak_id)||TO_CHAR(v_RiskLocationAKID)||i_Type||TO_CHAR(i_EffectiveDate))\n\tMD5(TO_CHAR(v_pol_ak_id) || TO_CHAR(v_RiskLocationAKID) || i_Type || TO_CHAR(i_EffectiveDate)) AS o_PolicyCoverageHashKey,\n\tv_pol_ak_id AS o_PolicyAKID,\n\tv_RiskLocationAKID AS o_RiskLocationAKID,\n\t-- *INF*: IIF(ISNULL(v_PolicyCoverageKey),'N/A',v_PolicyCoverageKey)\n\tIFF(v_PolicyCoverageKey IS NULL, 'N/A', v_PolicyCoverageKey) AS o_PolicyCoverageKey,\n\ti_Type AS o_InsuranceLine,\n\ti_Type AS o_TypeBureauCode,\n\ti_EffectiveDate AS o_PolicyCoverageEffectiveDate,\n\ti_ExpirationDate AS o_PolicyCoverageExpirationDate,\n\t-- *INF*: IIF(ISNULL(i_sup_ins_line_id),-1,i_sup_ins_line_id)\n\tIFF(i_sup_ins_line_id IS NULL, - 1, i_sup_ins_line_id) AS o_sup_ins_line_id,\n\t-- *INF*: IIF(ISNULL(i_sup_type_bureau_code_id),-1,i_sup_type_bureau_code_id)\n\tIFF(i_sup_type_bureau_code_id IS NULL, - 1, i_sup_type_bureau_code_id) AS o_sup_type_bureau_code_id,\n\t-- *INF*: IIF(ISNULL(i_InterstateRiskID),'N/A',TO_CHAR(i_InterstateRiskID))\n\tIFF(i_InterstateRiskID IS NULL, 'N/A', TO_CHAR(i_InterstateRiskID)) AS o_InterstateRiskId,\n\tLKP_PolicyLimit.PolicyLimitAKId,\n\tLKP_PriorCoverage.PriorCoverageId,\n\tEXP_Values.CommissionCustomerCareAmount,\n\tLKP_RatingPlan.RatingPlanAKId\n\tFROM EXP_Values\n\tLEFT JOIN LKP_PolicyLimit\n\tON LKP_PolicyLimit.PolicyAKId = EXP_Values.o_Pol_AK_ID AND LKP_PolicyLimit.InsuranceLine = EXP_Values.o_Type\n\tLEFT JOIN LKP_PriorCoverage\n\tON LKP_PriorCoverage.PriorCarrierName = EXP_Values.CarrierName AND LKP_PriorCoverage.PriorPolicyKey = EXP_Values.PriorInsurancePolicyKey AND LKP_PriorCoverage.PriorInsuranceLine = EXP_Values.o_PriorInsuranceLine\n\tLEFT JOIN LKP_RatingPlan\n\tON LKP_RatingPlan.RatingPlanDescription = EXP_Values.o_RatingPlanDescription\n\tLEFT JOIN LKP_WBWCLineStage\n\tON LKP_WBWCLineStage.SessionId = EXP_Values.SessionId AND LKP_WBWCLineStage.PartyId = EXP_Values.PartyId AND LKP_WBWCLineStage.State = EXP_Values.o_StateProv\n\tLEFT JOIN LKP_sup_insurance_line\n\tON LKP_sup_insurance_line.ins_line_descript = EXP_Values.o_Type\n\tLEFT JOIN LKP_sup_type_bureau_code\n\tON LKP_sup_type_bureau_code.type_bureau_code = EXP_Values.o_Type\n),\nLKP_PolicyCoverage AS (\n\tSELECT\n\tPolicyCoverageAKID,\n\tPolicyCoverageExpirationDate,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tCustomerCareCommissionRate,\n\tRatingPlanAkId,\n\tPolicyCoverageHashKey\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyCoverageAKID,\n\t\t\tPolicyCoverageExpirationDate,\n\t\t\tAuditableIndicator,\n\t\t\tRiskGradeCode,\n\t\t\tInterstateRiskId,\n\t\t\tPolicyLimitAKId,\n\t\t\tPriorCoverageId,\n\t\t\tCustomerCareCommissionRate,\n\t\t\tRatingPlanAkId,\n\t\t\tPolicyCoverageHashKey\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t\tWHERE CurrentSnapshotFlag='1' and SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand\r\n\t\tPolicyAKId in (\r\n\t\tselect pol_ak_id from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\twhere exists (\r\n\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT\r\n\t\twhere WCT.PolicyNumber=pol.pol_num\r\n\t\tand ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod)\r\n\t\tand pol.crrnt_snpsht_flag=1)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageHashKey ORDER BY PolicyCoverageAKID) = 1\n),\nEXP_DetectChange AS (\n\tSELECT\n\tLKP_PolicyCoverage.PolicyCoverageAKID AS i_PolicyCoverageAKID,\n\tLKP_PolicyCoverage.PolicyCoverageExpirationDate AS i_PolicyCoverageExpirationDate,\n\tLKP_PolicyCoverage.AuditableIndicator AS i_AuditableIndicator,\n\tLKP_PolicyCoverage.RiskGradeCode AS i_RiskGradeCode,\n\tLKP_PolicyCoverage.InterstateRiskId AS i_InterstateRiskId,\n\tLKP_PolicyCoverage.PolicyLimitAKId AS i_PolicyLimitAKId,\n\tLKP_PolicyCoverage.PriorCoverageId AS i_PriorCoverageId,\n\tLKP_PolicyCoverage.CustomerCareCommissionRate AS i_CustomerCareCommissionRate,\n\tLKP_PolicyCoverage.RatingPlanAkId AS i_RatingPlanAkId,\n\t-- *INF*: DECODE(i_AuditableIndicator,'T', '1', 'F','0', NULL)\n\tDECODE(i_AuditableIndicator,\n\t'T', '1',\n\t'F', '0',\n\tNULL) AS v_LKP_AuditableIndicator,\n\tEXP_MD5.AuditableIndicator,\n\tEXP_MD5.RiskGradeCode,\n\tEXP_MD5.o_PolicyCoverageHashKey AS PolicyCoverageHashKey,\n\tEXP_MD5.o_PolicyAKID AS PolicyAKID,\n\tEXP_MD5.o_RiskLocationAKID AS RiskLocationAKID,\n\tEXP_MD5.o_PolicyCoverageKey AS PolicyCoverageKey,\n\tEXP_MD5.o_InsuranceLine AS InsuranceLine,\n\tEXP_MD5.o_TypeBureauCode AS TypeBureauCode,\n\tEXP_MD5.o_PolicyCoverageEffectiveDate AS PolicyCoverageEffectiveDate,\n\tEXP_MD5.o_PolicyCoverageExpirationDate AS PolicyCoverageExpirationDate,\n\tEXP_MD5.o_sup_ins_line_id AS sup_ins_line_id,\n\tEXP_MD5.o_sup_type_bureau_code_id AS sup_type_bureau_code_id,\n\tEXP_MD5.CommissionCustomerCareAmount,\n\tEXP_MD5.o_InterstateRiskId AS InterstateRiskId,\n\tEXP_MD5.PolicyLimitAKId,\n\tEXP_MD5.PriorCoverageId,\n\tEXP_MD5.RatingPlanAKId,\n\t-- *INF*: IIF(ISNULL(i_PolicyCoverageAKID), 'NEW', IIF(i_PolicyCoverageExpirationDate<>PolicyCoverageExpirationDate OR v_LKP_AuditableIndicator<>AuditableIndicator OR i_RiskGradeCode<>RiskGradeCode OR i_InterstateRiskId<>InterstateRiskId OR i_PolicyLimitAKId<>PolicyLimitAKId OR i_PriorCoverageId<>PriorCoverageId OR ISNULL(i_CustomerCareCommissionRate) OR i_CustomerCareCommissionRate<>CommissionCustomerCareAmount OR i_RatingPlanAkId <> RatingPlanAKId,\r\n\t-- 'UPDATE', 'NOCHANGE'))\n\tIFF(i_PolicyCoverageAKID IS NULL, 'NEW', IFF(i_PolicyCoverageExpirationDate <> PolicyCoverageExpirationDate OR v_LKP_AuditableIndicator <> AuditableIndicator OR i_RiskGradeCode <> RiskGradeCode OR i_InterstateRiskId <> InterstateRiskId OR i_PolicyLimitAKId <> PolicyLimitAKId OR i_PriorCoverageId <> PriorCoverageId OR i_CustomerCareCommissionRate IS NULL OR i_CustomerCareCommissionRate <> CommissionCustomerCareAmount OR i_RatingPlanAkId <> RatingPlanAKId, 'UPDATE', 'NOCHANGE')) AS o_ChangeFlag\n\tFROM EXP_MD5\n\tLEFT JOIN LKP_PolicyCoverage\n\tON LKP_PolicyCoverage.PolicyCoverageHashKey = EXP_MD5.o_PolicyCoverageHashKey\n),\nFIL_InsertNewRows AS (\n\tSELECT\n\ti_PolicyCoverageAKID, \n\tAuditableIndicator, \n\tRiskGradeCode, \n\tPolicyCoverageHashKey, \n\tPolicyAKID, \n\tRiskLocationAKID, \n\tPolicyCoverageKey, \n\tInsuranceLine, \n\tTypeBureauCode, \n\tPolicyCoverageEffectiveDate, \n\tPolicyCoverageExpirationDate, \n\tsup_ins_line_id, \n\tsup_type_bureau_code_id, \n\to_ChangeFlag AS ChangeFlag, \n\tInterstateRiskId, \n\tPolicyLimitAKId, \n\tPriorCoverageId, \n\tCommissionCustomerCareAmount, \n\tRatingPlanAKId\n\tFROM EXP_DetectChange\n\tWHERE ChangeFlag='NEW'  OR ChangeFlag='UPDATE'\n),\nSEQ_PolicyCoverageAKID AS (\n\tCREATE SEQUENCE SEQ_PolicyCoverageAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_AKandMetaData AS (\n\tSELECT\n\ti_PolicyCoverageAKID,\n\tAuditableIndicator AS i_AuditableIndicator,\n\tRiskGradeCode AS i_RiskGradeCode,\n\tPolicyCoverageHashKey AS i_PolicyCoverageHashKey,\n\tPolicyAKID AS i_PolicyAKID,\n\tRiskLocationAKID AS i_RiskLocationAKID,\n\tPolicyCoverageKey AS i_PolicyCoverageKey,\n\tInsuranceLine AS i_InsuranceLine,\n\tTypeBureauCode AS i_TypeBureauCode,\n\tPolicyCoverageEffectiveDate AS i_PolicyCoverageEffectiveDate,\n\tPolicyCoverageExpirationDate AS i_PolicyCoverageExpirationDate,\n\tsup_ins_line_id AS i_sup_ins_line_id,\n\tsup_type_bureau_code_id AS i_sup_type_bureau_code_id,\n\tChangeFlag AS i_ChangeFlag,\n\tSEQ_PolicyCoverageAKID.NEXTVAL,\n\t1 AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: IIF(i_ChangeFlag='NEW', TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE)\n\tIFF(i_ChangeFlag = 'NEW', TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreateDate,\n\tSYSDATE AS o_ModifiedDate,\n\t0 AS o_LogicalIndicator,\n\ti_PolicyCoverageHashKey AS o_PolicyCoverageHashKey,\n\t-- *INF*: IIF(ISNULL(i_PolicyCoverageAKID),NEXTVAL, i_PolicyCoverageAKID)\n\tIFF(i_PolicyCoverageAKID IS NULL, NEXTVAL, i_PolicyCoverageAKID) AS o_PolicyCoverageAKID,\n\ti_PolicyAKID AS o_PolicyAKID,\n\ti_RiskLocationAKID AS o_RiskLocationAKID,\n\ti_PolicyCoverageKey AS o_PolicyCoverageKey,\n\ti_InsuranceLine AS o_InsuranceLine,\n\ti_TypeBureauCode AS o_TypeBureauCode,\n\ti_PolicyCoverageEffectiveDate AS o_PolicyCoverageEffectiveDate,\n\ti_PolicyCoverageExpirationDate AS o_PolicyCoverageExpirationDate,\n\ti_sup_ins_line_id AS o_sup_ins_line_id,\n\ti_sup_type_bureau_code_id AS o_sup_type_bureau_code_id,\n\ti_AuditableIndicator AS o_AuditableIndicator,\n\ti_RiskGradeCode AS o_RiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tCommissionCustomerCareAmount,\n\tRatingPlanAKId\n\tFROM FIL_InsertNewRows\n),\nTGT_PolicyCoverage_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, PolicyCoverageHashKey, PolicyCoverageAKID, PolicyAKID, RiskLocationAKID, PolicyCoverageKey, InsuranceLine, TypeBureauCode, PolicyCoverageEffectiveDate, PolicyCoverageExpirationDate, SupInsuranceLineId, SupTypeBureauCodeId, RatingPlanAKId, AuditableIndicator, RiskGradeCode, InterstateRiskId, PolicyLimitAKId, PriorCoverageId, CustomerCareCommissionRate)\n\tSELECT \n\to_CurrentSnapshotFlag AS CURRENTSNAPSHOTFLAG, \n\to_AuditID AS AUDITID, \n\to_EffectiveDate AS EFFECTIVEDATE, \n\to_ExpirationDate AS EXPIRATIONDATE, \n\to_SourceSystemID AS SOURCESYSTEMID, \n\to_CreateDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_LogicalIndicator AS LOGICALINDICATOR, \n\to_PolicyCoverageHashKey AS POLICYCOVERAGEHASHKEY, \n\to_PolicyCoverageAKID AS POLICYCOVERAGEAKID, \n\to_PolicyAKID AS POLICYAKID, \n\to_RiskLocationAKID AS RISKLOCATIONAKID, \n\to_PolicyCoverageKey AS POLICYCOVERAGEKEY, \n\to_InsuranceLine AS INSURANCELINE, \n\to_TypeBureauCode AS TYPEBUREAUCODE, \n\to_PolicyCoverageEffectiveDate AS POLICYCOVERAGEEFFECTIVEDATE, \n\to_PolicyCoverageExpirationDate AS POLICYCOVERAGEEXPIRATIONDATE, \n\to_sup_ins_line_id AS SUPINSURANCELINEID, \n\to_sup_type_bureau_code_id AS SUPTYPEBUREAUCODEID, \n\tRATINGPLANAKID, \n\to_AuditableIndicator AS AUDITABLEINDICATOR, \n\to_RiskGradeCode AS RISKGRADECODE, \n\tINTERSTATERISKID, \n\tPOLICYLIMITAKID, \n\tPRIORCOVERAGEID, \n\tCommissionCustomerCareAmount AS CUSTOMERCARECOMMISSIONRATE\n\tFROM EXP_AKandMetaData\n),\nSQ_PolicyCoverage AS (\n\tSELECT \r\n\t\tPolicyCoverageID,\r\n\t\tEffectiveDate,\r\n\t\tExpirationDate,\r\n\t\tPolicyCoverageAKID \r\n\tFROM\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage a\r\n\tWHERE  exists \r\n\t\t   (SELECT 1 FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage b\r\n\t           WHERE CurrentSnapshotFlag = 1 AND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND a.PolicyCoverageAKID=b.PolicyCoverageAKID GROUP BY PolicyCoverageAKID  HAVING count(*) > 1)\r\n\tAND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and CurrentSnapshotFlag=1\r\n\tORDER BY PolicyCoverageAKID , EffectiveDate  DESC\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tEffectiveDate AS i_eff_from_date,\n\tPolicyCoverageAKID AS i_PolicyCoverageAKID,\n\tExpirationDate AS orig_eff_to_date,\n\tPolicyCoverageID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- i_PolicyCoverageAKID = v_prev_cust_ak_id  ,\r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\ti_PolicyCoverageAKID = v_prev_cust_ak_id, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\ti_PolicyCoverageAKID AS v_prev_cust_ak_id,\n\ti_eff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tv_eff_to_date AS eff_to_date,\n\tSYSDATE AS modified_date\n\tFROM SQ_PolicyCoverage\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\torig_eff_to_date AS i_orig_eff_to_date, \n\tPolicyCoverageID, \n\tcrrnt_snpsht_flag, \n\teff_to_date, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE i_orig_eff_to_date != eff_to_date\n),\nUPD_PolicyCoverage AS (\n\tSELECT\n\tPolicyCoverageID, \n\tcrrnt_snpsht_flag AS CurrentSnapshotFlag, \n\teff_to_date AS ExpirationDate, \n\tmodified_date AS ModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nTGT_PolicyCoverage_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage AS T\n\tUSING UPD_PolicyCoverage AS S\n\tON T.PolicyCoverageID = S.PolicyCoverageID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603271"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "EXCLUDE_TTYPE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}