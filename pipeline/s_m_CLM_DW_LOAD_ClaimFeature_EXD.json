{
    "name": "s_m_CLM_DW_LOAD_ClaimFeature_EXD",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_ClaimFeature_EXD",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_Clm_Feature_Staging AS (\n\tSELECT\n\t\tSourceSystemId,\n\t\tTch_Claim_Nbr,\n\t\tTch_Client_Id,\n\t\tCov_Type_Cd,\n\t\tBur_Cause_Loss,\n\t\tAdjuster_Client_Id,\n\t\tCreated_TS,\n\t\tModified_TS\n\tFROM Clm_Feature_Staging\n),\nEXP_Validate_Source_Values AS (\n\tSELECT\n\tTch_Claim_Nbr,\n\tTch_Client_Id,\n\tCov_Type_Cd,\n\tBur_Cause_Loss,\n\tAdjuster_Client_Id AS in_Adjuster_Client_Id,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Adjuster_Client_Id)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Adjuster_Client_Id\n\t) AS out_Adjuster_Client_Id,\n\tCreated_TS,\n\tModified_TS,\n\tSourceSystemId\n\tFROM SQ_Clm_Feature_Staging\n),\nLKP_FeatureRepAkId AS (\n\tSELECT\n\tclaim_rep_ak_id,\n\tclaim_rep_key,\n\tsource_sys_id\n\tFROM (\n\t\tSELECT \n\t\t\tclaim_rep_ak_id,\n\t\t\tclaim_rep_key,\n\t\t\tsource_sys_id\n\t\tFROM claim_representative\n\t\tWHERE crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_rep_key,source_sys_id ORDER BY claim_rep_ak_id) = 1\n),\nmplt_claim_party_occurrence_Claimant AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_SetClaimantRoleCode AS (\n\t\tSELECT\n\t\tclaim_occurrence_key,\n\t\tclaim_party_key,\n\t\tsource_sys_id,\n\t\t-- *INF*: DECODE(source_sys_id,\r\n\t\t-- \t'EXCEED', 'CLMT',\r\n\t\t-- \t'PMS', 'CMT',\r\n\t\t-- \tNULL)\n\t\tDECODE(source_sys_id,\n\t\t\t'EXCEED', 'CLMT',\n\t\t\t'PMS', 'CMT',\n\t\t\tNULL\n\t\t) AS ClaimantRoleCode\n\t\tFROM INPUT\n\t),\n\tLKP_Claim_Party_Occurrence_AK_ID AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id,\n\t\tclaim_occurrence_key,\n\t\tclaim_party_key,\n\t\tclaim_party_role_code\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tCPO.claim_party_occurrence_ak_id as claim_party_occurrence_ak_id, \r\n\t\t\tLTRIM(RTRIM(CO.claim_occurrence_key)) as claim_occurrence_key, \r\n\t\t\tLTRIM(RTRIM(CP.claim_party_key)) as claim_party_key,\r\n\t\t\tLTRIM(RTRIM(CPO.claim_party_role_code)) as claim_party_role_code\r\n\t\t\tFROM \r\n\t\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence CPO,\r\n\t\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party CP, \r\n\t\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence CO \r\n\t\t\tWHERE \r\n\t\t\tCO.claim_occurrence_ak_id = CPO.claim_occurrence_ak_id  \r\n\t\t\tAND CP.claim_party_ak_id = CPO.claim_party_ak_id \r\n\t\t\tAND CO.crrnt_snpsht_flag = 1\r\n\t\t\tAND CP.crrnt_snpsht_flag = 1\r\n\t\t\tAND CPO.crrnt_snpsht_flag = 1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_key,claim_party_key,claim_party_role_code ORDER BY claim_party_occurrence_ak_id) = 1\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id\n\t\tFROM LKP_Claim_Party_Occurrence_AK_ID\n\t),\n),\nEXP_Lookup_Values AS (\n\tSELECT\n\tmplt_claim_party_occurrence_Claimant.claim_party_occurrence_ak_id,\n\tEXP_Validate_Source_Values.Cov_Type_Cd AS in_MajorPerilCode,\n\t-- *INF*: SUBSTR(in_MajorPerilCode,1,3)\n\tSUBSTR(in_MajorPerilCode, 1, 3\n\t) AS out_MajorPerilCode,\n\tEXP_Validate_Source_Values.Bur_Cause_Loss AS in_Bur_Cause_Loss,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(in_Bur_Cause_Loss,1,2))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(in_Bur_Cause_Loss, 1, 2\n\t\t)\n\t) AS CauseOfLoss,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(in_Bur_Cause_Loss,3,1))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(SUBSTR(in_Bur_Cause_Loss, 3, 1\n\t\t)\n\t) AS ReserveCategory,\n\tEXP_Validate_Source_Values.Created_TS,\n\tEXP_Validate_Source_Values.Modified_TS,\n\tLKP_FeatureRepAkId.claim_rep_ak_id AS in_FeatureRepresentativeAkId,\n\t-- *INF*: IIF(ISNULL(in_FeatureRepresentativeAkId),\r\n\t-- \t-1,\r\n\t-- \tin_FeatureRepresentativeAkId)\n\tIFF(in_FeatureRepresentativeAkId IS NULL,\n\t\t- 1,\n\t\tin_FeatureRepresentativeAkId\n\t) AS FeatureRepresentativeAkId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tISNULL(in_FeatureRepresentativeAkId), TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tNOT ISNULL(Modified_TS), Modified_TS,\r\n\t-- \tNOT ISNULL(Created_TS), Created_TS,\r\n\t-- \tTO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'))\n\tDECODE(TRUE,\n\t\tin_FeatureRepresentativeAkId IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t),\n\t\tModified_TS IS NOT NULL, Modified_TS,\n\t\tCreated_TS IS NOT NULL, Created_TS,\n\t\tTO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t)\n\t) AS FeatureRepresentativeAssignedDate,\n\tEXP_Validate_Source_Values.SourceSystemId\n\tFROM EXP_Validate_Source_Values\n\t -- Manually join with mplt_claim_party_occurrence_Claimant\n\tLEFT JOIN LKP_FeatureRepAkId\n\tON LKP_FeatureRepAkId.claim_rep_key = EXP_Validate_Source_Values.out_Adjuster_Client_Id AND LKP_FeatureRepAkId.source_sys_id = EXP_Validate_Source_Values.SourceSystemId\n),\nLKP_ClaimFeature AS (\n\tSELECT\n\tClaimFeatureId,\n\tCurrentSnapshotFlag,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemId,\n\tCreatedDate,\n\tModifiedDate,\n\tClaimFeatureAKId,\n\tClaimPartyOccurrenceAKId,\n\tMajorPerilCode,\n\tReserveCategory,\n\tCauseOfLoss,\n\tClaimRepresentativeAkId,\n\tFeatureRepresentativeAssignedDate\n\tFROM (\n\t\tSELECT \n\t\t\tClaimFeatureId,\n\t\t\tCurrentSnapshotFlag,\n\t\t\tEffectiveDate,\n\t\t\tExpirationDate,\n\t\t\tSourceSystemId,\n\t\t\tCreatedDate,\n\t\t\tModifiedDate,\n\t\t\tClaimFeatureAKId,\n\t\t\tClaimPartyOccurrenceAKId,\n\t\t\tMajorPerilCode,\n\t\t\tReserveCategory,\n\t\t\tCauseOfLoss,\n\t\t\tClaimRepresentativeAkId,\n\t\t\tFeatureRepresentativeAssignedDate\n\t\tFROM ClaimFeature\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ClaimPartyOccurrenceAKId,MajorPerilCode,CauseOfLoss,ReserveCategory,SourceSystemId ORDER BY ClaimFeatureId) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_Lookup_Values.claim_party_occurrence_ak_id,\n\tEXP_Lookup_Values.out_MajorPerilCode AS MajorPerilCode,\n\tEXP_Lookup_Values.CauseOfLoss,\n\tEXP_Lookup_Values.ReserveCategory,\n\tEXP_Lookup_Values.FeatureRepresentativeAkId,\n\tEXP_Lookup_Values.FeatureRepresentativeAssignedDate,\n\tEXP_Lookup_Values.SourceSystemId,\n\tLKP_ClaimFeature.ClaimFeatureAKId AS lkp_ClaimFeatureAKId,\n\tLKP_ClaimFeature.ClaimRepresentativeAkId AS lkp_ClaimRepresentativeAkId,\n\t-- *INF*: IIF(ISNULL(lkp_ClaimFeatureAKId),\r\n\t-- \t'NEW',\t\r\n\t-- \tIIF(lkp_ClaimRepresentativeAkId != FeatureRepresentativeAkId,\r\n\t-- \t\t'UPDATE',\r\n\t-- \t\t'NOCHANGE'))\n\tIFF(lkp_ClaimFeatureAKId IS NULL,\n\t\t'NEW',\n\t\tIFF(lkp_ClaimRepresentativeAkId != FeatureRepresentativeAkId,\n\t\t\t'UPDATE',\n\t\t\t'NOCHANGE'\n\t\t)\n\t) AS v_ChangedFlag,\n\tv_ChangedFlag AS ChangedFlag\n\tFROM EXP_Lookup_Values\n\tLEFT JOIN LKP_ClaimFeature\n\tON LKP_ClaimFeature.ClaimPartyOccurrenceAKId = EXP_Lookup_Values.claim_party_occurrence_ak_id AND LKP_ClaimFeature.MajorPerilCode = EXP_Lookup_Values.out_MajorPerilCode AND LKP_ClaimFeature.CauseOfLoss = EXP_Lookup_Values.CauseOfLoss AND LKP_ClaimFeature.ReserveCategory = EXP_Lookup_Values.ReserveCategory AND LKP_ClaimFeature.SourceSystemId = EXP_Lookup_Values.SourceSystemId\n),\nFIL_Insert AS (\n\tSELECT\n\tclaim_party_occurrence_ak_id, \n\tMajorPerilCode, \n\tCauseOfLoss, \n\tReserveCategory, \n\tFeatureRepresentativeAkId, \n\tFeatureRepresentativeAssignedDate, \n\tSourceSystemId, \n\tlkp_ClaimFeatureAKId, \n\tChangedFlag\n\tFROM EXP_Detect_Changes\n\tWHERE ChangedFlag = 'NEW' OR ChangedFlag = 'UPDATE'\n),\nSEQ_ClaimFeature AS (\n\tCREATE SEQUENCE SEQ_ClaimFeature\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Insert_Target AS (\n\tSELECT\n\tlkp_ClaimFeatureAKId,\n\tSEQ_ClaimFeature.NEXTVAL,\n\tChangedFlag,\n\t-- *INF*: IIF(ChangedFlag='NEW',\r\n\t-- \tNEXTVAL,\r\n\t-- \tlkp_ClaimFeatureAKId)\n\tIFF(ChangedFlag = 'NEW',\n\t\tNEXTVAL,\n\t\tlkp_ClaimFeatureAKId\n\t) AS ClaimFeatureAkId,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\t-- *INF*: IIF(ChangedFlag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(ChangedFlag = 'NEW',\n\t\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t),\n\t\tSYSDATE\n\t) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t) AS ExpirationDate,\n\tSourceSystemId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tclaim_party_occurrence_ak_id,\n\tMajorPerilCode,\n\tCauseOfLoss,\n\tReserveCategory,\n\tFeatureRepresentativeAkId,\n\tFeatureRepresentativeAssignedDate\n\tFROM FIL_Insert\n),\nClaimFeature_Insert AS (\n\tINSERT INTO ClaimFeature\n\t(CurrentSnapshotFlag, AuditId, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, ClaimFeatureAKId, ClaimPartyOccurrenceAKId, MajorPerilCode, ReserveCategory, CauseOfLoss, ClaimRepresentativeAkId, FeatureRepresentativeAssignedDate)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tClaimFeatureAkId AS CLAIMFEATUREAKID, \n\tclaim_party_occurrence_ak_id AS CLAIMPARTYOCCURRENCEAKID, \n\tMAJORPERILCODE, \n\tRESERVECATEGORY, \n\tCAUSEOFLOSS, \n\tFeatureRepresentativeAkId AS CLAIMREPRESENTATIVEAKID, \n\tFEATUREREPRESENTATIVEASSIGNEDDATE\n\tFROM EXP_Insert_Target\n),\nSQ_ClaimFeature AS (\n\tSELECT a.ClaimFeatureId, a.EffectiveDate, a.ExpirationDate, a.ClaimFeatureAKId\r\n\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ClaimFeature a\r\n\tWHERE a.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' \r\n\tand EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.ClaimFeature b\r\n\t\t\tWHERE b.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND b.CurrentSnapshotFlag = 1\r\n\t\t\tAND b.ClaimFeatureAKId = a.ClaimFeatureAKId\r\n\t\t\tGROUP BY b.ClaimFeatureAKId\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY a.ClaimFeatureAKId, a.EffectiveDate DESC--\n),\nEXP_Lag_Eff_From_Date AS (\n\tSELECT\n\tClaimFeatureId,\n\tEffectiveDate,\n\tExpirationDate AS orig_ExpirationDate,\n\tClaimFeatureAKId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tClaimFeatureAKId = v_PREV_ROW_ClaimFeatureAKId, ADD_TO_DATE(v_PREV_ROW_EffectiveDate,'SS',-1),\r\n\t-- \torig_ExpirationDate)\n\tDECODE(TRUE,\n\t\tClaimFeatureAKId = v_PREV_ROW_ClaimFeatureAKId, DATEADD(SECOND,- 1,v_PREV_ROW_EffectiveDate),\n\t\torig_ExpirationDate\n\t) AS v_ExpirationDate,\n\tv_ExpirationDate AS ExpirationDate,\n\tEffectiveDate AS v_PREV_ROW_EffectiveDate,\n\tClaimFeatureAKId AS v_PREV_ROW_ClaimFeatureAKId,\n\tSYSDATE AS ModifiedDate,\n\t0 AS CurrentSnapshotFlag\n\tFROM SQ_ClaimFeature\n),\nFIL_RowsToExpire AS (\n\tSELECT\n\tClaimFeatureId, \n\torig_ExpirationDate, \n\tExpirationDate, \n\tModifiedDate, \n\tCurrentSnapshotFlag\n\tFROM EXP_Lag_Eff_From_Date\n\tWHERE orig_ExpirationDate <> ExpirationDate\n),\nUPD_ClaimFeature_Expire AS (\n\tSELECT\n\tClaimFeatureId, \n\tExpirationDate, \n\tModifiedDate, \n\tCurrentSnapshotFlag\n\tFROM FIL_RowsToExpire\n),\nClaimFeature_Update AS (\n\tMERGE INTO ClaimFeature AS T\n\tUSING UPD_ClaimFeature_Expire AS S\n\tON T.ClaimFeatureId = S.ClaimFeatureId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}