{
    "name": "m_AGY_DM_Load_AgencyEmployeeDim",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DM_Load_AgencyEmployeeDim",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_AgencyEmployee AS (\n\tSELECT\n\t\tAgencyEmployeeID,\n\t\tAgencyEmployeeAKID,\n\t\tAgencyAKID,\n\t\tAgencyEmployeeCode,\n\t\tAgencyEmployeeRole,\n\t\tProducerCode,\n\t\tLastName,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tSuffix,\n\t\tNickName,\n\t\tPhoneNumber,\n\t\tFaxNumber,\n\t\tEmailAddress,\n\t\tStatusCode,\n\t\tStatusCodeDescription,\n\t\tListedDate,\n\t\tTerminatedDate,\n\t\tUserID\n\tFROM AgencyEmployee\n\tWHERE CurrentSnapshotFlag = 1 and ModifiedDate >='@{pipeline().parameters.SELECTION_START_TS}'\n),\nLKP_AgencyCode AS (\n\tSELECT\n\tAgencyCode,\n\tAgencyAKID\n\tFROM (\n\t\tSELECT \n\t\t\tAgencyCode,\n\t\t\tAgencyAKID\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyAKID ORDER BY AgencyCode) = 1\n),\nEXP_CollectData AS (\n\tSELECT\n\tLKP_AgencyCode.AgencyCode AS i_lkp_AgencyCode,\n\t-- *INF*: IIF(ISNULL(i_lkp_AgencyCode), 'N/A',i_lkp_AgencyCode)\n\tIFF(i_lkp_AgencyCode IS NULL, 'N/A', i_lkp_AgencyCode) AS o_lkp_AgencyCode,\n\tSQ_AgencyEmployee.AgencyEmployeeID AS AgencyEmployeePKID,\n\tSQ_AgencyEmployee.AgencyEmployeeAKID,\n\tSQ_AgencyEmployee.AgencyAKID,\n\tSQ_AgencyEmployee.AgencyEmployeeCode,\n\tSQ_AgencyEmployee.AgencyEmployeeRole,\n\tSQ_AgencyEmployee.ProducerCode,\n\tSQ_AgencyEmployee.LastName,\n\tSQ_AgencyEmployee.FirstName,\n\tSQ_AgencyEmployee.MiddleName,\n\tSQ_AgencyEmployee.Suffix,\n\tSQ_AgencyEmployee.NickName,\n\tSQ_AgencyEmployee.PhoneNumber,\n\tSQ_AgencyEmployee.FaxNumber,\n\tSQ_AgencyEmployee.EmailAddress,\n\tSQ_AgencyEmployee.StatusCode,\n\tSQ_AgencyEmployee.StatusCodeDescription,\n\tSQ_AgencyEmployee.ListedDate,\n\tSQ_AgencyEmployee.TerminatedDate,\n\tSQ_AgencyEmployee.UserID\n\tFROM SQ_AgencyEmployee\n\tLEFT JOIN LKP_AgencyCode\n\tON LKP_AgencyCode.AgencyAKID = SQ_AgencyEmployee.AgencyAKID\n),\nLKP_Existing AS (\n\tSELECT\n\tin_AgencyEmployeeAKID,\n\tEDWAgencyEmployeeAKID,\n\tAgencyEmployeeDimID,\n\tAgencyEmployeeDimHashKey,\n\tEDWAgencyEmployeePKID\n\tFROM (\n\t\tSELECT \n\t\t\tin_AgencyEmployeeAKID,\n\t\t\tEDWAgencyEmployeeAKID,\n\t\t\tAgencyEmployeeDimID,\n\t\t\tAgencyEmployeeDimHashKey,\n\t\t\tEDWAgencyEmployeePKID\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyEmployeeDim\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWAgencyEmployeeAKID ORDER BY in_AgencyEmployeeAKID) = 1\n),\nEXP_CheckForChange AS (\n\tSELECT\n\tLKP_Existing.AgencyEmployeeDimID AS lkp_ExistingAgencyEmployeeDimID,\n\tLKP_Existing.AgencyEmployeeDimHashKey AS lkp_ExistingAgencyEmployeeDimHashKey,\n\tLKP_Existing.EDWAgencyEmployeePKID AS lkp_ExistingEDWAgencyEmployeePKID,\n\tEXP_CollectData.o_lkp_AgencyCode AS i_AgencyCode,\n\tEXP_CollectData.AgencyEmployeePKID AS i_AgencyEmployeePKID,\n\tEXP_CollectData.AgencyEmployeeAKID AS i_AgencyEmployeeAKID,\n\tEXP_CollectData.AgencyAKID AS i_AgencyAKID,\n\tEXP_CollectData.AgencyEmployeeCode AS i_AgencyEmployeeCode,\n\tEXP_CollectData.AgencyEmployeeRole AS i_AgencyEmployeeRole,\n\tEXP_CollectData.ProducerCode AS i_ProducerCode,\n\tEXP_CollectData.LastName AS i_LastName,\n\tEXP_CollectData.FirstName AS i_FirstName,\n\tEXP_CollectData.MiddleName AS i_MiddleName,\n\tEXP_CollectData.Suffix AS i_Suffix,\n\tEXP_CollectData.NickName AS i_NickName,\n\tEXP_CollectData.PhoneNumber AS i_PhoneNumber,\n\tEXP_CollectData.FaxNumber AS i_FaxNumber,\n\tEXP_CollectData.EmailAddress AS i_EmailAddress,\n\tEXP_CollectData.StatusCode AS i_StatusCode,\n\tEXP_CollectData.StatusCodeDescription AS i_StatusCodeDescription,\n\tEXP_CollectData.ListedDate AS i_ListedDate,\n\tEXP_CollectData.TerminatedDate AS i_TerminatedDate,\n\tEXP_CollectData.UserID AS i_UserID,\n\t-- *INF*: MD5(i_AgencyCode || '&' || i_AgencyEmployeeCode || '&' || i_AgencyEmployeeRole || '&' || i_ProducerCode || '&' || i_StatusCode || '&' || TO_CHAR(i_ListedDate) || '&' || TO_CHAR(i_TerminatedDate))\n\tMD5(i_AgencyCode || '&' || i_AgencyEmployeeCode || '&' || i_AgencyEmployeeRole || '&' || i_ProducerCode || '&' || i_StatusCode || '&' || TO_CHAR(i_ListedDate) || '&' || TO_CHAR(i_TerminatedDate)) AS v_new_Type2HashKey,\n\t-- *INF*: DECODE(true,\r\n\t-- i_AgencyEmployeePKID <> lkp_ExistingEDWAgencyEmployeePKID, 'Y',\r\n\t-- 'N')\n\tDECODE(true,\n\ti_AgencyEmployeePKID <> lkp_ExistingEDWAgencyEmployeePKID, 'Y',\n\t'N') AS v_ChangeToEDWRecord,\n\t-- *INF*: DECODE(true,\r\n\t-- ISNULL(lkp_ExistingAgencyEmployeeDimHashKey), 'Insert',\r\n\t-- (lkp_ExistingAgencyEmployeeDimHashKey = v_new_Type2HashKey) and (v_ChangeToEDWRecord = 'N'), 'Ignore',\r\n\t-- (lkp_ExistingAgencyEmployeeDimHashKey <> v_new_Type2HashKey), 'Expire',\r\n\t-- (lkp_ExistingAgencyEmployeeDimHashKey = v_new_Type2HashKey) and (v_ChangeToEDWRecord = 'Y'), 'Update',\r\n\t-- 'Ignore')\r\n\t-- \r\n\t-- \r\n\t-- -- If the existing record is not found based on the AKID, it's always an insert\r\n\t-- -- If there are no changes, we ignore the record\r\n\t-- -- If one of the type 2 attributes changed, we expire the old record (also inserts a new record, see router)\r\n\t-- -- If there was no change to the type 2 attributes AND there was a change to the PKID in the EDW then we update the record.  Important to have the logic comparing the hash keys, otherwise we might attempt to update records where we are already expiring and inserting a new record.\r\n\t-- \t\n\tDECODE(true,\n\tlkp_ExistingAgencyEmployeeDimHashKey IS NULL, 'Insert',\n\t( lkp_ExistingAgencyEmployeeDimHashKey = v_new_Type2HashKey ) AND ( v_ChangeToEDWRecord = 'N' ), 'Ignore',\n\t( lkp_ExistingAgencyEmployeeDimHashKey <> v_new_Type2HashKey ), 'Expire',\n\t( lkp_ExistingAgencyEmployeeDimHashKey = v_new_Type2HashKey ) AND ( v_ChangeToEDWRecord = 'Y' ), 'Update',\n\t'Ignore') AS v_InsertUpdateExpireOrIgnore,\n\tlkp_ExistingAgencyEmployeeDimID AS o_lkp_ExistingAgencyEmployeeDimID,\n\t1 AS o_CurrentSnapshotFlag,\n\t0 AS o_ExpireSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: DECODE(v_InsertUpdateExpireOrIgnore,\r\n\t-- 'Insert',   TO_DATE('1800-01-01 01:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\r\n\t-- SYSDATE)\n\tDECODE(v_InsertUpdateExpireOrIgnore,\n\t'Insert', TO_DATE('1800-01-01 01:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'),\n\tSYSDATE) AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS')\n\tTO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS') AS o_ExpirationDate,\n\t-- *INF*: ADD_TO_DATE(SYSDATE, 'MS', -1)\r\n\t-- \n\tADD_TO_DATE(SYSDATE, 'MS', - 1) AS o_ExpirationDate_ForExpire,\n\tSYSDATE AS o_CurrentDate,\n\tv_new_Type2HashKey AS o_Type2HashKey,\n\tv_InsertUpdateExpireOrIgnore AS o_InsertUpdateExpireOrIgnore\n\tFROM EXP_CollectData\n\tLEFT JOIN LKP_Existing\n\tON LKP_Existing.EDWAgencyEmployeeAKID = EXP_CollectData.AgencyEmployeeAKID\n),\nRTR_InsertUpdateOrExpire AS (\n\tSELECT\n\to_lkp_ExistingAgencyEmployeeDimID AS ExistingAgencyEmployeeDimID,\n\to_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\to_ExpireSnapshotFlag AS ExpireSnapshotFlag,\n\to_AuditID AS AuditID,\n\to_EffectiveDate AS EffectiveDate,\n\to_ExpirationDate AS ExpirationDate,\n\to_ExpirationDate_ForExpire AS ExpirationDate_ForExpire,\n\to_CurrentDate AS CurrentDate,\n\to_Type2HashKey AS AgencyEmployeeDimHashKey,\n\ti_AgencyEmployeePKID AS EDWAgencyEmployeePKID,\n\ti_AgencyEmployeeAKID AS EDWAgencyEmployeeAKID,\n\ti_AgencyCode AS AgencyCode,\n\ti_AgencyEmployeeCode AS AgencyEmployeeCode,\n\ti_AgencyEmployeeRole AS AgencyEmployeeRole,\n\ti_ProducerCode AS ProducerCode,\n\ti_LastName AS AgencyEmployeeLastName,\n\ti_FirstName AS AgencyEmployeeFirstName,\n\ti_MiddleName AS AgencyEmployeeMiddleName,\n\ti_Suffix AS AgencyEmployeeSuffix,\n\ti_NickName AS AgencyEmployeeNickName,\n\ti_PhoneNumber AS AgencyEmployeePhoneNumber,\n\ti_FaxNumber AS AgencyEmployeeFaxNumber,\n\ti_EmailAddress AS AgencyEmployeeEmailAddress,\n\ti_StatusCode AS AgencyEmployeeStatusCode,\n\ti_StatusCodeDescription AS AgencyEmployeeStatusCodeDescription,\n\ti_ListedDate AS AgencyEmployeeListedDate,\n\ti_TerminatedDate AS AgencyEmployeeTerminatedDate,\n\ti_UserID AS UserID,\n\to_InsertUpdateExpireOrIgnore AS InsertUpdateIgnoreOrExpire\n\tFROM EXP_CheckForChange\n),\nRTR_InsertUpdateOrExpire_Expire AS (SELECT * FROM RTR_InsertUpdateOrExpire WHERE InsertUpdateIgnoreOrExpire = 'Expire'),\nRTR_InsertUpdateOrExpire_Insert AS (SELECT * FROM RTR_InsertUpdateOrExpire WHERE InsertUpdateIgnoreOrExpire = 'Insert' or InsertUpdateIgnoreOrExpire = 'Expire'),\nRTR_InsertUpdateOrExpire_Update AS (SELECT * FROM RTR_InsertUpdateOrExpire WHERE InsertUpdateIgnoreOrExpire = 'Update'),\nUPD_ExpireOld AS (\n\tSELECT\n\tExistingAgencyEmployeeDimID AS AgencyEmployeeDimID, \n\tExpireSnapshotFlag AS CurrentSnapshotFlag, \n\tExpirationDate_ForExpire AS ExpirationDate, \n\tCurrentDate AS ModifiedDate\n\tFROM RTR_InsertUpdateOrExpire_Expire\n),\nTGT_AgencyEmployeeDim_Expire AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyEmployeeDim AS T\n\tUSING UPD_ExpireOld AS S\n\tON T.AgencyEmployeeDimID = S.AgencyEmployeeDimID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate\n),\nUPD_InsertNew AS (\n\tSELECT\n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tCurrentDate AS CreatedDate, \n\tCurrentDate AS ModifiedDate, \n\tAgencyEmployeeDimHashKey, \n\tEDWAgencyEmployeePKID, \n\tEDWAgencyEmployeeAKID, \n\tAgencyCode, \n\tAgencyEmployeeCode, \n\tAgencyEmployeeRole, \n\tProducerCode, \n\tAgencyEmployeeLastName, \n\tAgencyEmployeeFirstName, \n\tAgencyEmployeeMiddleName, \n\tAgencyEmployeeSuffix, \n\tAgencyEmployeeNickName, \n\tAgencyEmployeePhoneNumber, \n\tAgencyEmployeeFaxNumber, \n\tAgencyEmployeeEmailAddress, \n\tAgencyEmployeeStatusCode, \n\tAgencyEmployeeStatusCodeDescription, \n\tAgencyEmployeeListedDate, \n\tAgencyEmployeeTerminatedDate, \n\tUserID\n\tFROM RTR_InsertUpdateOrExpire_Insert\n),\nTGT_AgencyEmployeeDim_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyEmployeeDim\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, CreatedDate, ModifiedDate, AgencyEmployeeDimHashKey, EDWAgencyEmployeePKID, EDWAgencyEmployeeAKID, AgencyCode, AgencyEmployeeCode, AgencyEmployeeRole, ProducerCode, AgencyEmployeeLastName, AgencyEmployeeFirstName, AgencyEmployeeMiddleName, AgencyEmployeeSuffix, AgencyEmployeeNickName, AgencyEmployeePhoneNumber, AgencyEmployeeFaxNumber, AgencyEmployeeEmailAddress, AgencyEmployeeStatusCode, AgencyEmployeeStatusCodeDescription, AgencyEmployeeListedDate, AgencyEmployeeTerminatedDate, AgencyEmployeeUserID)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tAGENCYEMPLOYEEDIMHASHKEY, \n\tEDWAGENCYEMPLOYEEPKID, \n\tEDWAGENCYEMPLOYEEAKID, \n\tAGENCYCODE, \n\tAGENCYEMPLOYEECODE, \n\tAGENCYEMPLOYEEROLE, \n\tPRODUCERCODE, \n\tAGENCYEMPLOYEELASTNAME, \n\tAGENCYEMPLOYEEFIRSTNAME, \n\tAGENCYEMPLOYEEMIDDLENAME, \n\tAGENCYEMPLOYEESUFFIX, \n\tAGENCYEMPLOYEENICKNAME, \n\tAGENCYEMPLOYEEPHONENUMBER, \n\tAGENCYEMPLOYEEFAXNUMBER, \n\tAGENCYEMPLOYEEEMAILADDRESS, \n\tAGENCYEMPLOYEESTATUSCODE, \n\tAGENCYEMPLOYEESTATUSCODEDESCRIPTION, \n\tAGENCYEMPLOYEELISTEDDATE, \n\tAGENCYEMPLOYEETERMINATEDDATE, \n\tUserID AS AGENCYEMPLOYEEUSERID\n\tFROM UPD_InsertNew\n),\nUPD_Updates AS (\n\tSELECT\n\tExistingAgencyEmployeeDimID AS AgencyEmployeeDimID, \n\tCurrentDate AS ModifiedDate, \n\tEDWAgencyEmployeePKID, \n\tAgencyEmployeeLastName, \n\tAgencyEmployeeFirstName, \n\tAgencyEmployeeMiddleName, \n\tAgencyEmployeeSuffix, \n\tAgencyEmployeeNickName, \n\tAgencyEmployeePhoneNumber, \n\tAgencyEmployeeFaxNumber, \n\tAgencyEmployeeEmailAddress, \n\tAgencyEmployeeStatusCodeDescription, \n\tUserID\n\tFROM RTR_InsertUpdateOrExpire_Update\n),\nTGT_AgencyEmployeeDim_Updates AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyEmployeeDim AS T\n\tUSING UPD_Updates AS S\n\tON T.AgencyEmployeeDimID = S.AgencyEmployeeDimID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate, T.EDWAgencyEmployeePKID = S.EDWAgencyEmployeePKID, T.AgencyEmployeeLastName = S.AgencyEmployeeLastName, T.AgencyEmployeeFirstName = S.AgencyEmployeeFirstName, T.AgencyEmployeeMiddleName = S.AgencyEmployeeMiddleName, T.AgencyEmployeeSuffix = S.AgencyEmployeeSuffix, T.AgencyEmployeeNickName = S.AgencyEmployeeNickName, T.AgencyEmployeePhoneNumber = S.AgencyEmployeePhoneNumber, T.AgencyEmployeeFaxNumber = S.AgencyEmployeeFaxNumber, T.AgencyEmployeeEmailAddress = S.AgencyEmployeeEmailAddress, T.AgencyEmployeeStatusCodeDescription = S.AgencyEmployeeStatusCodeDescription, T.AgencyEmployeeUserID = S.UserID\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246490"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905471"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603199"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:20:50"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:20:23"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Data_Mart_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCESYSTEMID": {
                "type": "string",
                "defaultValue": "AgencyODS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}