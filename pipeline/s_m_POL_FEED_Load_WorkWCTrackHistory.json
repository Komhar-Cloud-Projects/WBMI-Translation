{
    "name": "s_m_POL_FEED_Load_WorkWCTrackHistory",
    "properties": {
        "activities": [
            {
                "name": "m_POL_FEED_Load_WorkWCTrackHistory",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_DC_WC_State_StateFlag AS (\n\tSelect distinct D.PolKey,DT.HistoryID,St.State ListedState,\r\n\tcase when St.Deleted=1 then '1' Else '0' End as DeletedStateFlag\r\n\tfrom DC_WC_State ST\t\r\n\tinner  join DC_Transaction DT\r\n\ton ST.SessionId=DT.SessionId\r\n\tinner join WB_Policy P\r\n\ton P.SessionId=DT.SessionId\r\n\tinner JOIN\r\n\t(Select distinct WP.PolicyNumber+WP.PolicyVersionFormatted PolKey from WB_Policy WP\r\n\tinner join DC_Transaction T with(nolock)\r\n\ton WP.SessionId=T.SessionId\r\n\tinner join DC_Line DL with(nolock)\r\n\ton T.Sessionid=DL.Sessionid\r\n\tinner join DC_Session S\r\n\ton WP.SessionID=S.SessionID\r\n\twhere S.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\tand T.State='Committed'\r\n\tand DL.Type='WorkersCompensation'\r\n\tand S.Purpose='Onset'\r\n\tand T.State='Committed'\r\n\t@{pipeline().parameters.WHERE_CLAUSE_STATE}\r\n\t) D\r\n\ton D.PolKey=(P.PolicyNumber+P.PolicyVersionFormatted)\r\n\twhere DT.State='Committed'\n),\nEXP_StateFlag AS (\n\tSELECT\n\tPolKey AS PolKey_StateFlag,\n\tHistoryID AS HistoryID_StateFlag,\n\tListedState AS State_StateFlag,\n\t-- *INF*: LTRIM(RTRIM(State_StateFlag))\n\tLTRIM(RTRIM(State_StateFlag)) AS o_State_StateFlag,\n\tDeletedStateFlag AS Deleted_StateFlag\n\tFROM SQ_DC_WC_State_StateFlag\n),\nLKP_TrackHistory AS (\n\tSELECT\n\tHistoryID,\n\tPolicyKey\n\tFROM (\n\t\tSelect distinct HistoryID as HistoryID, PolicyKey as PolicyKey  from WorkWCTrackHistory\r\n\t\torder by 2,1--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY HistoryID,PolicyKey ORDER BY HistoryID DESC) = 1\n),\nEXP_Filter AS (\n\tSELECT\n\tEXP_StateFlag.PolKey_StateFlag,\n\tEXP_StateFlag.HistoryID_StateFlag,\n\tEXP_StateFlag.o_State_StateFlag AS State_StateFlag,\n\tEXP_StateFlag.Deleted_StateFlag,\n\tLKP_TrackHistory.HistoryID AS HistoryID_LKP,\n\tLKP_TrackHistory.PolicyKey AS PolicyKey_LKP,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(HistoryID_LKP))),'NEW','EXISTS')\n\tIFF(LTRIM(RTRIM(HistoryID_LKP)) IS NULL, 'NEW', 'EXISTS') AS FilterFlag\n\tFROM EXP_StateFlag\n\tLEFT JOIN LKP_TrackHistory\n\tON LKP_TrackHistory.HistoryID = EXP_StateFlag.HistoryID_StateFlag AND LKP_TrackHistory.PolicyKey = EXP_StateFlag.PolKey_StateFlag\n),\nFIL_NewTxns AS (\n\tSELECT\n\tPolKey_StateFlag, \n\tHistoryID_StateFlag, \n\tState_StateFlag, \n\tDeleted_StateFlag, \n\tFilterFlag\n\tFROM EXP_Filter\n\tWHERE LTRIM(RTRIM(FilterFlag))='EXISTS'\n),\nSRT_State AS (\n\tSELECT\n\tPolKey_StateFlag, \n\tHistoryID_StateFlag, \n\tState_StateFlag, \n\tDeleted_StateFlag, \n\tFilterFlag\n\tFROM FIL_NewTxns\n\tORDER BY PolKey_StateFlag ASC, HistoryID_StateFlag ASC, State_StateFlag ASC, Deleted_StateFlag ASC\n),\nAGG_Latest_Txn AS (\n\tSELECT\n\tPolKey_StateFlag,\n\tHistoryID_StateFlag,\n\tState_StateFlag,\n\tDeleted_StateFlag\n\tFROM SRT_State\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolKey_StateFlag, State_StateFlag ORDER BY NULL) = 1\n),\nEXP_Latest_Txn AS (\n\tSELECT\n\tPolKey_StateFlag,\n\tHistoryID_StateFlag,\n\tState_StateFlag,\n\tDeleted_StateFlag\n\tFROM AGG_Latest_Txn\n),\nSQ_DC_Transaction_PrevTransType AS (\n\tselect distinct A.Policykey,A.Historyid,A.Type,ParentHistoryid,DT.Type as PreviousTransactionType from(\r\n\tselect Pol_key as Policykey,Historyid,Type,max(AHistoryID) over(partition by ID order by Historyid) ParentHistoryid\r\n\tfrom (\r\n\tselect B.PolicyNumber+B.PolicyVersionFormatted Pol_key,\r\n\tDC.ID,\r\n\tHistoryid,\r\n\tcase when C.Type in ('New','Renew') then C.Historyid else 0 end AHistoryID,\r\n\tC.Type\r\n\tfrom DC_Policy A\r\n\tinner join WB_Policy B\r\n\ton A.PolicyId=B.PolicyId\r\n\tinner join DC_Transaction C\r\n\ton A.SessionId=C.SessionId\r\n\tinner join DC_Session D\r\n\ton C.SessionId=D.SessionId\r\n\tinner join DC_Line E\r\n\ton D.SessionId=E.SessionId\r\n\tinner join DC_Coverage DC\r\n\ton C.Sessionid=DC.Sessionid\r\n\tinner join (\r\n\tselect distinct DC.ID CoverageGuid\r\n\tfrom DC_Transaction DT\r\n\tinner join DC_Session DS\r\n\ton DT.Sessionid=DS.Sessionid\r\n\tinner join DC_Line DL\r\n\ton DT.Sessionid=DL.Sessionid\r\n\tinner join DC_Coverage DC\r\n\ton DT.Sessionid=DC.Sessionid\r\n\tinner join WB_Policy WP\r\n\ton DT.SessionId=WP.SessionId\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand DT.State='Committed'\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t@{pipeline().parameters.WHERE_CLAUSE_TRANSTYPE}\r\n\t) X\r\n\ton DC.ID=X.CoverageGuid\r\n\twhere E.Type='WorkersCompensation'\r\n\tand D.Purpose='Onset'\r\n\tand C.State='Committed'\r\n\tand C.Type in ('New','Renew','Reissue','Rewrite','Restart')\r\n\t) A\r\n\t) A\r\n\tinner Join DC_Transaction DT \r\n\ton A.ParentHistoryid=DT.HistoryID\r\n\twhere A.ParentHistoryid<>A.HistoryID\r\n\torder by 1,2\n),\nEXP_PrevTransType AS (\n\tSELECT\n\tPolicykey AS Policykey_PrevTransType,\n\tHistoryID AS HistoryID_PrevTransType,\n\tType,\n\tParentHistoryid,\n\tPreviousTransactionType\n\tFROM SQ_DC_Transaction_PrevTransType\n),\nSQ_WCPOLS_DG_ExclusionList AS (\n\n-- TODO Manual --\n\n),\nEXP_ExclusionList AS (\n\tSELECT\n\tExtractDate,\n\t-- *INF*: ADD_TO_DATE(TO_DATE(ExtractDate,'MM/DD/YYYY'),'HH',13)\n\tDATEADD(HOUR,13,TO_TIMESTAMP(ExtractDate, 'MM/DD/YYYY')) AS v_ExtractDate,\n\tv_ExtractDate AS o_ExtractDate,\n\t-- *INF*: TO_CHAR(v_ExtractDate,'YYYYMMDD')\n\tTO_CHAR(v_ExtractDate, 'YYYYMMDD') AS TransactionDate_Exclusion,\n\tPolicykey,\n\t-- *INF*: LPAD(Policykey,9,'0')\n\tLPAD(Policykey, 9, '0') AS o_Policykey,\n\tTransactionType\n\tFROM SQ_WCPOLS_DG_ExclusionList\n),\nFIL_ExclusionList AS (\n\tSELECT\n\to_ExtractDate AS ExtractDate, \n\tTransactionDate_Exclusion, \n\to_Policykey AS Policykey, \n\tTransactionType\n\tFROM EXP_ExclusionList\n\tWHERE TRUE\r\n\r\n--ExtractDate>=@{pipeline().parameters.SELECTION_START_TS}\n),\nSQ_DC_Session AS (\n\tSelect HistoryID,TransactionDate,Trans_TransactionType,Policy_TransactionType,Purpose,Sessionid,\r\n\tPolicyNumber,PolicyVersionFormatted,A.StateProv,PremiumBearingFlag,max(StateAddFlag) over(partition by A.HistoryID,A.PolicyNumber,A.PolicyVersionFormatted) StateAddFlag,NewPremium,Charge,PriorPremium,ReasonCode,InterstateRiskID, DeletedStateFlag, PolicyState\r\n\tfrom (\r\n\tSelect distinct DT.HistoryID,DT.TransactionDate,\r\n\tDT.Type as Trans_TransactionType,\r\n\tWP.PolicyIssueCodeDesc as Policy_TransactionType,\r\n\tDS.Purpose,DS.Sessionid,DS.CreateDateTime,WP.PolicyNumber,WP.PolicyVersionFormatted,DLOC.StateProv,\r\n\tcase when DT.Type='Endorse' and DT.Charge<>0.00 then '1' else '0' end PremiumBearingFlag,\r\n\tDT.NewPremium,DT.Charge,DT.PriorPremium,WR.Code ReasonCode,WWL.InterstateRiskID,\r\n\tMax(DT.Sessionid) over(Partition by DT.HistoryID,Purpose) Max_Sessionid,\r\n\tcase when WWS.WCStateAddedThisTransaction=1 then '1' else '0' end as StateAddFlag,\r\n\tcase when DWS.Deleted=1 then '1' Else '0' End as DeletedStateFlag, \r\n\tDWS.[State] as PolicyState\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Reason WR with(nolock)\r\n\ton DT.Transactionid=WR.Transactionid\r\n\tand DT.Sessionid=WR.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\ton DT.Sessionid=DS.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\ton DT.Sessionid=DL.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP with(nolock)\r\n\ton DT.Sessionid=WP.Sessionid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Location DLOC with(nolock)\r\n\ton WP.SessionId=DLOC.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_LocationAssociation DLOCA with(nolock)\r\n\ton DLOC.SessionId=DLOCA.SessionId\r\n\tand DLOC.LocationId=DLOCA.LocationId\r\n\tand DLOCA.LocationAssociationType in ('Location','WC_Location')\r\n\tleft Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_WC_State WWS\r\n\ton DS.SessionId=WWS.SessionId\r\n\tleft Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_WC_Line WWL with(nolock)\r\n\ton DS.SessionId=WWL.SessionId\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_WC_State DWS with (nolock)\r\n\ton DS.sessionid=DWS.sessionid --and DWS.Deleted=1 \r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand DT.State='Committed'\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\tand DT.Type not in (@{pipeline().parameters.EXCLUDE_TRANSACTIONTYPES})\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t) A\r\n\twhere Sessionid=Max_Sessionid\r\n\torder by PolicyNumber+PolicyVersionFormatted ASC,PolicyState ASC,A.HistoryID DESC\n),\nEXP_DataCollect AS (\n\tSELECT\n\tHistoryID,\n\tTransactionDate,\n\t-- *INF*: TO_CHAR(TransactionDate,'YYYYMMDD')\n\tTO_CHAR(TransactionDate, 'YYYYMMDD') AS o_TransactionDate,\n\tTrans_TransactionType,\n\tPolicy_TransactionType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(Trans_TransactionType,'Reissue','Rewrite') AND NOT ISNULL(Policy_TransactionType),Policy_TransactionType,\r\n\t-- Trans_TransactionType)\n\tDECODE(\n\t    TRUE,\n\t    Trans_TransactionType IN ('Reissue','Rewrite') AND Policy_TransactionType IS NOT NULL, Policy_TransactionType,\n\t    Trans_TransactionType\n\t) AS v_TransactionType,\n\t-- *INF*: IIF(LTRIM(RTRIM(v_TransactionType))='Renewal','Renew',v_TransactionType)\n\tIFF(LTRIM(RTRIM(v_TransactionType)) = 'Renewal', 'Renew', v_TransactionType) AS o_TransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyNumber,\n\tPolicyVersionFormatted,\n\t-- *INF*: ltrim(rtrim(PolicyNumber)) || Ltrim(Rtrim(PolicyVersionFormatted))\n\tltrim(rtrim(PolicyNumber)) || Ltrim(Rtrim(PolicyVersionFormatted)) AS o_PolicyKey,\n\tStateProv,\n\tPremiumBearingFlag,\n\tStateAddFlag,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\tStateDeletedFlag,\n\tPolicyState,\n\t-- *INF*: LTRIM(RTRIM(PolicyState))\n\tLTRIM(RTRIM(PolicyState)) AS o_PolicyState\n\tFROM SQ_DC_Session\n),\nLKP_History_OSE AS (\n\tSELECT\n\tHistoryID\n\tFROM (\n\t\tSelect Historyid as Historyid\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.History (nolock)\r\n\t\twhere Change='OSEAdjustment'\r\n\t\tand Historyid not in (select HistoryID from (\r\n\t\tselect distinct WP.PolicyNumber,WP.PolicyVersionFormatted,DT.HistoryID,DT.Type,H.Change\r\n\t\t,ROW_NUMBER()over(Partition by WP.PolicyNumber,WP.PolicyVersionFormatted order by DT.Historyid) Cancel_Rank\r\n\t\tfrom \r\n\t\t(select distinct WP.PolicyNumber,WP.PolicyVersionFormatted,DT.HistoryID \r\n\t\tfrom @{pipeline().parameters.DATABASE_NAME_IDO}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IDO}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP\r\n\t\ton DT.Sessionid=WP.Sessionid\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IDO}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL\r\n\t\ton DT.SessionId=DL.SessionId\r\n\t\twhere DT.Historyid in (\r\n\t\tselect HistoryID\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.History\r\n\t\twhere Change='OSEAdjustment'\r\n\t\tand Type='Cancel')\r\n\t\tand DL.Type='WorkersCompensation'\r\n\t\tand DT.State='Committed') A\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IDO}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP\r\n\t\ton A.PolicyNumber=WP.PolicyNumber\r\n\t\tand A.PolicyVersionFormatted=WP.PolicyVersionFormatted\r\n\t\tinner join @{pipeline().parameters.DATABASE_NAME_IDO}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT\r\n\t\ton WP.SessionId=DT.SessionId\r\n\t\tleft Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.History H\r\n\t\ton DT.HistoryID=H.HistoryID\r\n\t\tand H.Change='OSEAdjustment'\r\n\t\tand H.Type='Cancel'\r\n\t\twhere DT.Type='Cancel'\r\n\t\t) A\r\n\t\twhere Cancel_rank=1\r\n\t\tand Change is not null)\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY HistoryID ORDER BY HistoryID) = 1\n),\nLKP_LatestSession AS (\n\tSELECT\n\tSessionId,\n\tPurpose,\n\tHistoryID\n\tFROM (\n\t\tSelect distinct DT.HistoryID AS HistoryID,\r\n\t\tDS.Purpose AS Purpose,\r\n\t\tMax(DS.Sessionid) AS Sessionid\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\t\ton DT.Sessionid=DS.Sessionid\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\t\ton DT.Sessionid=DL.Sessionid\r\n\t\twhere DL.Type='WorkersCompensation'\r\n\t\tand DS.Purpose='Onset'\r\n\t\tand DT.State='Committed'\r\n\t\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\tgroup by DT.HistoryID,DS.Purpose\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,Purpose,HistoryID ORDER BY SessionId) = 1\n),\nRTR_OSETransactions AS (\n\tSELECT\n\tLKP_History_OSE.HistoryID AS LKP_HistoryID,\n\tEXP_DataCollect.HistoryID,\n\tEXP_DataCollect.o_TransactionDate,\n\tEXP_DataCollect.o_TransactionType AS TransactionType,\n\tEXP_DataCollect.Purpose,\n\tEXP_DataCollect.SessionId,\n\tEXP_DataCollect.o_PolicyKey,\n\tEXP_DataCollect.StateProv,\n\tEXP_DataCollect.PremiumBearingFlag,\n\tEXP_DataCollect.StateCount,\n\tEXP_DataCollect.StateAddFlag,\n\tEXP_DataCollect.NewPremium,\n\tEXP_DataCollect.Charge,\n\tEXP_DataCollect.PriorPremium,\n\tEXP_DataCollect.ReasonCode,\n\tEXP_DataCollect.InterstateRiskID,\n\tLKP_LatestSession.SessionId AS LKP_SessionId,\n\tEXP_DataCollect.StateDeletedFlag,\n\tEXP_DataCollect.o_PolicyState AS PolicyState\n\tFROM EXP_DataCollect\n\tLEFT JOIN LKP_History_OSE\n\tON LKP_History_OSE.HistoryID = EXP_DataCollect.HistoryID\n\tLEFT JOIN LKP_LatestSession\n\tON LKP_LatestSession.SessionId = EXP_DataCollect.SessionId AND LKP_LatestSession.Purpose = EXP_DataCollect.Purpose AND LKP_LatestSession.HistoryID = EXP_DataCollect.HistoryID\n),\nRTR_OSETransactions_Non_Endorsement_Transactions AS (SELECT * FROM RTR_OSETransactions WHERE ISNULL(LKP_HistoryID) and (Not ISNULL(LKP_SessionId)) AND TransactionType<>'Endorse'),\nRTR_OSETransactions_Endorsement_Transactions AS (SELECT * FROM RTR_OSETransactions WHERE ISNULL(LKP_HistoryID) and (Not ISNULL(LKP_SessionId)) AND TransactionType='Endorse'),\nEXP_SRC_DataCollect_NonEndorse AS (\n\tSELECT\n\t'DCT' AS SourceSystemID,\n\t'WCPOLS02Record' AS TableName,\n\t'StateCode' AS ProcessName,\n\tHistoryID,\n\to_TransactionDate AS TransactionDate,\n\tTransactionType,\n\tPurpose,\n\tSessionId,\n\to_PolicyKey AS PolicyKey,\n\tStateProv,\n\tPremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\tStateDeletedFlag,\n\tPolicyState,\n\t-- *INF*: IIF(IN(TransactionType,'EndorsePremiumBearing','EndorseNonPremiumBearing','EndorseAddDeleteState'),'Endorse',\r\n\t-- TransactionType)\n\tIFF(\n\t    TransactionType IN ('EndorsePremiumBearing','EndorseNonPremiumBearing','EndorseAddDeleteState'),\n\t    'Endorse',\n\t    TransactionType\n\t) AS LKP_TransactionType,\n\tPolicyKey AS v_CurrentRecord,\n\tTransactionType AS v_CurrentEndorse,\n\tStateProv AS v_CurrentState,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_CurrentRecord=v_PreviousRecord AND v_CurrentState=v_OldState,\r\n\t-- 'NOCHANGE',\r\n\t-- v_CurrentRecord=v_PreviousRecord AND v_CurrentState<>v_OldState,\r\n\t-- 'CHANGE',\r\n\t-- v_CurrentRecord<>v_PreviousRecord,'CHANGE'\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    v_CurrentRecord = v_PreviousRecord AND v_CurrentState = v_OldState, 'NOCHANGE',\n\t    v_CurrentRecord = v_PreviousRecord AND v_CurrentState <> v_OldState, 'CHANGE',\n\t    v_CurrentRecord <> v_PreviousRecord, 'CHANGE'\n\t) AS v_StateCounter,\n\tStateProv AS v_OldState,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_CurrentRecord=v_PreviousRecord AND TransactionType='Endorse',\r\n\t-- v_EndorseCounter+1,\r\n\t-- v_CurrentRecord<>v_PreviousRecord AND TransactionType='Endorse',1,\r\n\t-- v_CurrentRecord=v_PreviousRecord AND TransactionType<> 'Endorse', v_EndorseCounter,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    v_CurrentRecord = v_PreviousRecord AND TransactionType = 'Endorse', v_EndorseCounter + 1,\n\t    v_CurrentRecord <> v_PreviousRecord AND TransactionType = 'Endorse', 1,\n\t    v_CurrentRecord = v_PreviousRecord AND TransactionType <> 'Endorse', v_EndorseCounter,\n\t    0\n\t) AS v_EndorseCounter,\n\tTransactionType AS v_OldEndorse,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TransactionType<>'Endorse' ,1,\r\n\t-- v_EndorseCounter=1,1,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    TransactionType <> 'Endorse', 1,\n\t    v_EndorseCounter = 1, 1,\n\t    0\n\t) AS v_RecordCount,\n\tPolicyKey AS v_PreviousRecord,\n\tv_RecordCount AS o_RecordCount\n\tFROM RTR_OSETransactions_Non_Endorsement_Transactions\n),\nEXP_SRC_DataCollect_Endorse AS (\n\tSELECT\n\t'DCT' AS SourceSystemID,\n\t'WCPOLS02Record' AS TableName,\n\t'StateCode' AS ProcessName,\n\tHistoryID,\n\to_TransactionDate AS TransactionDate,\n\tTransactionType,\n\tPurpose,\n\tSessionId,\n\to_PolicyKey AS PolicyKey,\n\tStateProv,\n\tPremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\tStateDeletedFlag,\n\tPolicyState,\n\t-- *INF*: IIF(IN(TransactionType,'EndorsePremiumBearing','EndorseNonPremiumBearing','EndorseAddDeleteState'),'Endorse',\r\n\t-- TransactionType)\n\tIFF(\n\t    TransactionType IN ('EndorsePremiumBearing','EndorseNonPremiumBearing','EndorseAddDeleteState'),\n\t    'Endorse',\n\t    TransactionType\n\t) AS LKP_TransactionType,\n\tPolicyKey||StateProv||TransactionDate AS v_CurrentRecord,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_CurrentRecord=v_PreviousRecord ,\r\n\t-- --AND TransactionType='Endorse',\r\n\t-- v_EndorseCounter+1,\r\n\t-- v_CurrentRecord<>v_PreviousRecord ,\r\n\t-- --AND TransactionType='Endorse',\r\n\t-- 1,\r\n\t-- --v_CurrentRecord=v_PreviousRecord AND TransactionType<> 'Endorse', v_EndorseCounter,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    v_CurrentRecord = v_PreviousRecord, v_EndorseCounter + 1,\n\t    v_CurrentRecord <> v_PreviousRecord, 1,\n\t    0\n\t) AS v_EndorseCounter,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_EndorseCounter=1,1,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    v_EndorseCounter = 1, 1,\n\t    0\n\t) AS v_RecordCount,\n\tPolicyKey||StateProv||TransactionDate AS v_PreviousRecord,\n\t-- *INF*: 1\r\n\t-- --v_RecordCount\n\t1 AS o_RecordCount\n\tFROM RTR_OSETransactions_Endorsement_Transactions\n),\nFIL_Latest_Endorsement AS (\n\tSELECT\n\tSourceSystemID, \n\tTableName, \n\tProcessName, \n\tHistoryID, \n\tTransactionDate, \n\tTransactionType, \n\tPurpose, \n\tSessionId, \n\tPolicyKey, \n\tStateProv, \n\tPremiumBearingFlag, \n\tStateCount, \n\tStateAddFlag, \n\tNewPremium, \n\tCharge, \n\tPriorPremium, \n\tReasonCode, \n\tInterstateRiskID, \n\tLKP_TransactionType, \n\to_RecordCount AS RecordCount, \n\tStateDeletedFlag, \n\tPolicyState\n\tFROM EXP_SRC_DataCollect_Endorse\n\tWHERE RecordCount=1\n),\nUnion_AllTransactions AS (\n\tSELECT SourceSystemID, TableName, ProcessName, HistoryID, TransactionDate, TransactionType, Purpose, SessionId, PolicyKey, StateProv, PremiumBearingFlag, StateCount, StateAddFlag, NewPremium, Charge, PriorPremium, ReasonCode, InterstateRiskID, LKP_TransactionType, o_RecordCount, StateDeletedFlag, PolicyState\n\tFROM EXP_SRC_DataCollect_NonEndorse\n\tUNION\n\tSELECT SourceSystemID, TableName, ProcessName, HistoryID, TransactionDate, TransactionType, Purpose, SessionId, PolicyKey, StateProv, PremiumBearingFlag, StateCount, StateAddFlag, NewPremium, Charge, PriorPremium, ReasonCode, InterstateRiskID, LKP_TransactionType, RecordCount AS o_RecordCount, StateDeletedFlag, PolicyState\n\tFROM FIL_Latest_Endorsement\n),\nJNR_TrackHistory AS (SELECT\n\tFIL_ExclusionList.TransactionDate_Exclusion, \n\tFIL_ExclusionList.Policykey AS Policykey_Exclusion, \n\tFIL_ExclusionList.TransactionType AS TransactionType_Exclusion, \n\tUnion_AllTransactions.SourceSystemID, \n\tUnion_AllTransactions.TableName, \n\tUnion_AllTransactions.ProcessName, \n\tUnion_AllTransactions.HistoryID, \n\tUnion_AllTransactions.TransactionDate, \n\tUnion_AllTransactions.TransactionType, \n\tUnion_AllTransactions.Purpose, \n\tUnion_AllTransactions.SessionId, \n\tUnion_AllTransactions.PolicyKey, \n\tUnion_AllTransactions.StateProv, \n\tUnion_AllTransactions.PremiumBearingFlag, \n\tUnion_AllTransactions.StateCount, \n\tUnion_AllTransactions.StateAddFlag, \n\tUnion_AllTransactions.NewPremium, \n\tUnion_AllTransactions.Charge, \n\tUnion_AllTransactions.PriorPremium, \n\tUnion_AllTransactions.ReasonCode, \n\tUnion_AllTransactions.InterstateRiskID, \n\tUnion_AllTransactions.LKP_TransactionType, \n\tUnion_AllTransactions.o_RecordCount AS RecordCount, \n\tUnion_AllTransactions.StateDeletedFlag, \n\tUnion_AllTransactions.PolicyState\n\tFROM Union_AllTransactions\n\tLEFT OUTER JOIN FIL_ExclusionList\n\tON FIL_ExclusionList.Policykey = Union_AllTransactions.PolicyKey AND FIL_ExclusionList.TransactionType = Union_AllTransactions.LKP_TransactionType AND FIL_ExclusionList.TransactionDate_Exclusion = Union_AllTransactions.TransactionDate\n),\nFIL_RemoveHistoryID AS (\n\tSELECT\n\tPolicykey_Exclusion, \n\tTransactionType_Exclusion, \n\tSourceSystemID, \n\tTableName, \n\tProcessName, \n\tHistoryID, \n\tTransactionDate, \n\tTransactionType, \n\tPurpose, \n\tSessionId, \n\tPolicyKey, \n\tStateProv, \n\tPremiumBearingFlag, \n\tStateCount, \n\tStateAddFlag, \n\tNewPremium, \n\tCharge, \n\tPriorPremium, \n\tReasonCode, \n\tInterstateRiskID, \n\tStateDeletedFlag, \n\tPolicyState\n\tFROM JNR_TrackHistory\n\tWHERE ISNULL (Policykey_Exclusion)\n),\nJNR_PrevTransType AS (SELECT\n\tFIL_RemoveHistoryID.HistoryID, \n\tFIL_RemoveHistoryID.TransactionType, \n\tFIL_RemoveHistoryID.Purpose, \n\tFIL_RemoveHistoryID.SessionId, \n\tFIL_RemoveHistoryID.PolicyKey, \n\tFIL_RemoveHistoryID.StateProv, \n\tFIL_RemoveHistoryID.PremiumBearingFlag, \n\tFIL_RemoveHistoryID.StateCount, \n\tFIL_RemoveHistoryID.StateAddFlag, \n\tFIL_RemoveHistoryID.NewPremium, \n\tFIL_RemoveHistoryID.Charge, \n\tFIL_RemoveHistoryID.PriorPremium, \n\tFIL_RemoveHistoryID.ReasonCode, \n\tFIL_RemoveHistoryID.InterstateRiskID, \n\tFIL_RemoveHistoryID.StateDeletedFlag, \n\tFIL_RemoveHistoryID.PolicyState, \n\tFIL_RemoveHistoryID.TransactionDate, \n\tEXP_PrevTransType.Policykey_PrevTransType, \n\tEXP_PrevTransType.HistoryID_PrevTransType, \n\tEXP_PrevTransType.Type, \n\tEXP_PrevTransType.ParentHistoryid, \n\tEXP_PrevTransType.PreviousTransactionType\n\tFROM FIL_RemoveHistoryID\n\tLEFT OUTER JOIN EXP_PrevTransType\n\tON EXP_PrevTransType.Policykey_PrevTransType = FIL_RemoveHistoryID.PolicyKey\n),\nJNR_StateLogic AS (SELECT\n\tEXP_Latest_Txn.PolKey_StateFlag, \n\tEXP_Latest_Txn.HistoryID_StateFlag, \n\tEXP_Latest_Txn.State_StateFlag, \n\tEXP_Latest_Txn.Deleted_StateFlag, \n\tJNR_PrevTransType.HistoryID, \n\tJNR_PrevTransType.TransactionType, \n\tJNR_PrevTransType.Purpose, \n\tJNR_PrevTransType.SessionId, \n\tJNR_PrevTransType.PolicyKey, \n\tJNR_PrevTransType.StateProv, \n\tJNR_PrevTransType.PremiumBearingFlag, \n\tJNR_PrevTransType.StateCount, \n\tJNR_PrevTransType.StateAddFlag, \n\tJNR_PrevTransType.PreviousTransactionType, \n\tJNR_PrevTransType.NewPremium, \n\tJNR_PrevTransType.Charge, \n\tJNR_PrevTransType.PriorPremium, \n\tJNR_PrevTransType.ReasonCode, \n\tJNR_PrevTransType.InterstateRiskID, \n\tJNR_PrevTransType.StateDeletedFlag, \n\tJNR_PrevTransType.PolicyState, \n\tJNR_PrevTransType.Policykey_PrevTransType, \n\tJNR_PrevTransType.HistoryID_PrevTransType, \n\tJNR_PrevTransType.Type, \n\tJNR_PrevTransType.ParentHistoryid, \n\tJNR_PrevTransType.TransactionDate\n\tFROM JNR_PrevTransType\n\tLEFT OUTER JOIN EXP_Latest_Txn\n\tON EXP_Latest_Txn.PolKey_StateFlag = JNR_PrevTransType.PolicyKey AND EXP_Latest_Txn.State_StateFlag = JNR_PrevTransType.PolicyState\n),\nEXP_GetFlags AS (\n\tSELECT\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(PolicyState,'WI','MN','MI','NC','PA','DE','MA','NJ','CA') and (ISNULL(InterstateRiskID) or InterstateRiskID=0),'0',\r\n\t-- NOT IN(PolicyState,'WI','MN','MI','NC','PA','DE','MA','NJ','CA') AND v_RequiredState='0','0',\r\n\t-- '1')\n\tDECODE(\n\t    TRUE,\n\t    PolicyState IN ('WI','MN','MI','NC','PA','DE','MA','NJ','CA') and (InterstateRiskID IS NULL or InterstateRiskID = 0), '0',\n\t    NOT PolicyState IN ('WI','MN','MI','NC','PA','DE','MA','NJ','CA') AND v_RequiredState = '0', '0',\n\t    '1'\n\t) AS o_NCCIRequiredFlag,\n\t-- *INF*: IIF(PolicyState='WI' AND v_RequiredState='1','1','0')\n\tIFF(PolicyState = 'WI' AND v_RequiredState = '1', '1', '0') AS o_WIRequiredFlag,\n\t-- *INF*: IIF(PolicyState='MI' AND v_RequiredState='1','1','0')\n\tIFF(PolicyState = 'MI' AND v_RequiredState = '1', '1', '0') AS o_MIRequiredFlag,\n\t-- *INF*: IIF(PolicyState='MN' AND v_RequiredState='1','1','0')\n\tIFF(PolicyState = 'MN' AND v_RequiredState = '1', '1', '0') AS o_MNRequiredFlag,\n\t-- *INF*: IIF(PolicyState='NC' AND v_RequiredState='1','1','0')\n\tIFF(PolicyState = 'NC' AND v_RequiredState = '1', '1', '0') AS o_NCRequiredFlag,\n\tHistoryID,\n\tTransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyKey,\n\tStateProv,\n\tPremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\tPreviousTransactionType,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\tStateDeletedFlag,\n\tPolicyState,\n\tPolicykey_PrevTransType,\n\tHistoryID_PrevTransType,\n\tType,\n\tParentHistoryid,\n\tHistoryID_StateFlag,\n\tPolKey_StateFlag,\n\tState_StateFlag,\n\tDeleted_StateFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(TransactionType,'Renew','New','Reissue','Rewrite') AND StateDeletedFlag='0', '1',\r\n\t-- IN(TransactionType,'Renew','New','Reissue','Rewrite') AND StateDeletedFlag='1', '0',\r\n\t-- NOT ISNULL (State_StateFlag) AND Deleted_StateFlag='0','1',\r\n\t-- NOT ISNULL(State_StateFlag) AND Deleted_StateFlag='1' AND StateDeletedFlag='1','0',\r\n\t-- ISNULL(State_StateFlag) AND StateDeletedFlag='0','1',\r\n\t-- ISNULL(State_StateFlag) AND StateDeletedFlag='1','1',\r\n\t-- '1'\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    TransactionType IN ('Renew','New','Reissue','Rewrite') AND StateDeletedFlag = '0', '1',\n\t    TransactionType IN ('Renew','New','Reissue','Rewrite') AND StateDeletedFlag = '1', '0',\n\t    State_StateFlag IS NULL AND Deleted_StateFlag =NOT  '0', '1',\n\t    State_StateFlag IS NULL AND Deleted_StateFlag = '1' AND StateDeletedFlag =NOT  '1', '0',\n\t    State_StateFlag IS NULL AND StateDeletedFlag = '0', '1',\n\t    State_StateFlag IS NULL AND StateDeletedFlag = '1', '1',\n\t    '1'\n\t) AS v_RequiredState,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN(TransactionType,'Renew','New','Reissue','Rewrite') AND StateDeletedFlag='1', '0',\r\n\t-- --NOT ISNULL (State_AB) AND Deleted_AB='0','0',\r\n\t-- --NOT ISNULL(State_AB) AND Deleted_AB='1' AND StateDeletedFlag='1','0',\r\n\t-- NOT ISNULL(State_StateFlag) AND Deleted_StateFlag='0' AND StateDeletedFlag='1','1',\r\n\t-- NOT IN(TransactionType,'Renew','New','Reissue','Rewrite') AND ISNULL(State_StateFlag) AND StateDeletedFlag='1','1',\r\n\t-- '0')\r\n\t-- \n\tDECODE(\n\t    TRUE,\n\t    TransactionType IN ('Renew','New','Reissue','Rewrite') AND StateDeletedFlag = '1', '0',\n\t    State_StateFlag IS NULL AND Deleted_StateFlag = '0' AND StateDeletedFlag =NOT  '1', '1',\n\t    NOT TransactionType IN ('Renew','New','Reissue','Rewrite') AND State_StateFlag IS NULL AND StateDeletedFlag = '1', '1',\n\t    '0'\n\t) AS v_DeletedStateFlag,\n\t-- *INF*: IIF(LTRIM(RTRIM(v_DeletedStateFlag))='1',LTRIM(RTRIM(PolicyState)))\n\tIFF(LTRIM(RTRIM(v_DeletedStateFlag)) = '1', LTRIM(RTRIM(PolicyState))) AS o_DeletedState,\n\t-- *INF*: LTRIM(RTRIM(v_DeletedStateFlag))\n\tLTRIM(RTRIM(v_DeletedStateFlag)) AS o_StateDeletedFlag,\n\tTransactionDate\n\tFROM JNR_StateLogic\n),\nAGG_RemoveDups AS (\n\tSELECT\n\to_NCCIRequiredFlag AS i_NCCIRequiredFlag,\n\to_WIRequiredFlag AS i_WIRequiredFlag,\n\to_MIRequiredFlag AS i_MIRequiredFlag,\n\to_MNRequiredFlag AS i_MNRequiredFlag,\n\to_NCRequiredFlag AS i_NCRequiredFlag,\n\t-- *INF*: Max(i_NCCIRequiredFlag)\n\tMax(i_NCCIRequiredFlag) AS o_NCCIRequiredFlag,\n\t-- *INF*: Max(i_WIRequiredFlag)\n\tMax(i_WIRequiredFlag) AS o_WIRequiredFlag,\n\t-- *INF*: Max(i_MIRequiredFlag)\n\tMax(i_MIRequiredFlag) AS o_MIRequiredFlag,\n\t-- *INF*: Max(i_MNRequiredFlag)\n\tMax(i_MNRequiredFlag) AS o_MNRequiredFlag,\n\t-- *INF*: Max(i_NCRequiredFlag)\n\tMax(i_NCRequiredFlag) AS o_NCRequiredFlag,\n\tHistoryID,\n\tTransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyKey,\n\tPremiumBearingFlag,\n\t-- *INF*: max(PremiumBearingFlag)\n\tmax(PremiumBearingFlag) AS o_PremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\t-- *INF*: Max(StateAddFlag)\n\tMax(StateAddFlag) AS o_StateAddFlag,\n\tPreviousTransactionType,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\to_StateDeletedFlag AS i_StateDeletedFlag,\n\to_DeletedState AS i_DeletedState,\n\t-- *INF*: MAX(i_StateDeletedFlag)\n\tMAX(i_StateDeletedFlag) AS o_StateDeletedFlag,\n\t-- *INF*: MAX(i_DeletedState)\n\tMAX(i_DeletedState) AS o_DeletedState,\n\tTransactionDate\n\tFROM EXP_GetFlags\n\tGROUP BY HistoryID, TransactionType, Purpose, SessionId, PolicyKey\n),\nEXP_TGTDataCollect AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tCURRENT_TIMESTAMP AS ExtractDate,\n\tHistoryID,\n\tTransactionType,\n\t-- *INF*: IIF(TransactionType='Endorse',IIF(StateAddFlag='1'  or StateDeletedFlag='1','EndorseAddDeleteState',IIF(PremiumBearingFlag='1','EndorsePremiumBearing','EndorseNonPremiumBearing')),TransactionType)\n\tIFF(\n\t    TransactionType = 'Endorse',\n\t    IFF(\n\t        StateAddFlag = '1'\n\t    or StateDeletedFlag = '1', 'EndorseAddDeleteState',\n\t        IFF(\n\t            PremiumBearingFlag = '1', 'EndorsePremiumBearing',\n\t            'EndorseNonPremiumBearing'\n\t        )\n\t    ),\n\t    TransactionType\n\t) AS o_TransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyKey,\n\to_NCCIRequiredFlag AS NCCIRequiredFlag,\n\to_WIRequiredFlag AS WIRequiredFlag,\n\to_MIRequiredFlag AS MIRequiredFlag,\n\to_MNRequiredFlag AS MNRequiredFlag,\n\to_PremiumBearingFlag AS PremiumBearingFlag,\n\tStateCount,\n\to_StateAddFlag AS StateAddFlag,\n\tPreviousTransactionType,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tInterstateRiskID,\n\to_StateDeletedFlag AS StateDeletedFlag,\n\to_DeletedState AS DeletedState,\n\tTransactionDate,\n\to_NCRequiredFlag AS NCRequiredFlag\n\tFROM AGG_RemoveDups\n),\nRTR_Split_For_DeleteState_Rules AS (\n\tSELECT\n\tAuditId,\n\tExtractDate,\n\tHistoryID,\n\to_TransactionType AS TransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyKey,\n\tNCCIRequiredFlag,\n\tWIRequiredFlag,\n\tMIRequiredFlag,\n\tMNRequiredFlag,\n\tPremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\tPreviousTransactionType,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tStateDeletedFlag,\n\tDeletedState,\n\tTransactionDate,\n\tNCRequiredFlag\n\tFROM EXP_TGTDataCollect\n),\nRTR_Split_For_DeleteState_Rules_Normal AS (SELECT * FROM RTR_Split_For_DeleteState_Rules WHERE NOT(TransactionType='Endorse' AND IN(StateDeletedFlag,'T','1') AND IN(DeletedState,'MN','WI'))),\nRTR_Split_For_DeleteState_Rules_WI_MN_DeleteState_via_Endorsment AS (SELECT * FROM RTR_Split_For_DeleteState_Rules WHERE (TransactionType='Endorse' AND IN(StateDeletedFlag,'T','1') AND IN(DeletedState,'MN','WI'))),\nEXP_Apply_Endorse_DeleteState_Rules AS (\n\tSELECT\n\tAuditId,\n\tExtractDate,\n\tHistoryID,\n\tTransactionType AS i_TransactionType,\n\t'Cancel' AS o_TransactionType,\n\tPurpose,\n\tSessionId,\n\tPolicyKey,\n\tNCCIRequiredFlag,\n\tWIRequiredFlag,\n\tMIRequiredFlag,\n\tMNRequiredFlag,\n\tPremiumBearingFlag,\n\tStateCount,\n\tStateAddFlag,\n\tPreviousTransactionType,\n\tNewPremium,\n\tCharge,\n\tPriorPremium,\n\tReasonCode,\n\tStateDeletedFlag,\n\tDeletedState,\n\tTransactionDate AS TransactionDate3,\n\tNCRequiredFlag AS NCRequiredFlag3\n\tFROM RTR_Split_For_DeleteState_Rules_WI_MN_DeleteState_via_Endorsment\n),\nWorkWCTrackHistory_WI_MN_DeleteState AS (\n\tINSERT INTO WorkWCTrackHistory\n\t(Auditid, ExtractDate, HistoryID, TransactionType, Purpose, Sessionid, PolicyKey, NCCIRequiredFlag, WIRequiredFlag, MIRequiredFlag, MNRequiredFlag, PremiumBearingFlag, StateCount, StateAddFlag, PreviousPolicyTransactionType, NewPremium, Charge, PriorPremium, ReasonCode, StateDeletedFlag, DeletedState, TransactionDate, OriginalTransactionType, NCRequiredFlag)\n\tSELECT \n\tAuditId AS AUDITID, \n\tEXTRACTDATE, \n\tHISTORYID, \n\to_TransactionType AS TRANSACTIONTYPE, \n\tPURPOSE, \n\tSessionId AS SESSIONID, \n\tPOLICYKEY, \n\tNCCIREQUIREDFLAG, \n\tWIREQUIREDFLAG, \n\tMIREQUIREDFLAG, \n\tMNREQUIREDFLAG, \n\tPREMIUMBEARINGFLAG, \n\tSTATECOUNT, \n\tSTATEADDFLAG, \n\tPreviousTransactionType AS PREVIOUSPOLICYTRANSACTIONTYPE, \n\tNEWPREMIUM, \n\tCHARGE, \n\tPRIORPREMIUM, \n\tREASONCODE, \n\tSTATEDELETEDFLAG, \n\tDELETEDSTATE, \n\tTransactionDate3 AS TRANSACTIONDATE, \n\to_TransactionType AS ORIGINALTRANSACTIONTYPE, \n\tNCRequiredFlag3 AS NCREQUIREDFLAG\n\tFROM EXP_Apply_Endorse_DeleteState_Rules\n),\nWorkWCTrackHistory AS (\n\tTRUNCATE TABLE WorkWCTrackHistory;\n\tINSERT INTO WorkWCTrackHistory\n\t(Auditid, ExtractDate, HistoryID, TransactionType, Purpose, Sessionid, PolicyKey, NCCIRequiredFlag, WIRequiredFlag, MIRequiredFlag, MNRequiredFlag, PremiumBearingFlag, StateCount, StateAddFlag, PreviousPolicyTransactionType, NewPremium, Charge, PriorPremium, ReasonCode, StateDeletedFlag, DeletedState, TransactionDate, OriginalTransactionType, NCRequiredFlag)\n\tSELECT \n\tAuditId AS AUDITID, \n\tEXTRACTDATE, \n\tHISTORYID, \n\tTRANSACTIONTYPE, \n\tPURPOSE, \n\tSessionId AS SESSIONID, \n\tPOLICYKEY, \n\tNCCIREQUIREDFLAG, \n\tWIREQUIREDFLAG, \n\tMIREQUIREDFLAG, \n\tMNREQUIREDFLAG, \n\tPREMIUMBEARINGFLAG, \n\tSTATECOUNT, \n\tSTATEADDFLAG, \n\tPreviousTransactionType AS PREVIOUSPOLICYTRANSACTIONTYPE, \n\tNEWPREMIUM, \n\tCHARGE, \n\tPRIORPREMIUM, \n\tREASONCODE, \n\tSTATEDELETEDFLAG, \n\tDELETEDSTATE, \n\tTRANSACTIONDATE, \n\tTransactionType AS ORIGINALTRANSACTIONTYPE, \n\tNCREQUIREDFLAG\n\tFROM RTR_Split_For_DeleteState_Rules_Normal\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_STATE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_TRANSTYPE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "EXCLUDE_TRANSACTIONTYPES": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DATABASE_NAME_IDO": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}