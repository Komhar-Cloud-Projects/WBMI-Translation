{
    "name": "s_m_CLM_DW_LOAD_Application_QUES",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Application_QUES",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_application_stage AS (\n\tSELECT  app_guid \r\n\t      ,display_name\r\n\t      ,published_to_prod_flag\r\n\t      ,enabled_flag\r\n\t      ,version_num\r\n\t, eff_date\r\n\t,exp_date\r\n\t      ,source_system_id\r\n\t  FROM  @{pipeline().parameters.SOURCE_TABLE_OWNER}.application_stage\n),\nEXP_VALIDATE AS (\n\tSELECT\n\tapp_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(app_guid))) OR IS_SPACES(LTRIM(RTRIM(app_guid))) OR LENGTH(LTRIM(RTRIM(app_guid)))=0,'N/A',LTRIM(RTRIM(app_guid)))\r\n\t-- \r\n\t-- \n\tIFF(LTRIM(RTRIM(app_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(app_guid))) OR LENGTH(LTRIM(RTRIM(app_guid))) = 0, 'N/A', LTRIM(RTRIM(app_guid))) AS v_app_guid,\n\tv_app_guid AS o_app_guid,\n\tdisplay_name,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(display_name))) OR IS_SPACES(LTRIM(RTRIM(display_name))) OR LENGTH(LTRIM(RTRIM(display_name)))=0,'N/A',LTRIM(RTRIM(display_name)))\r\n\t-- \r\n\t-- \n\tIFF(LTRIM(RTRIM(display_name)) IS NULL OR IS_SPACES(LTRIM(RTRIM(display_name))) OR LENGTH(LTRIM(RTRIM(display_name))) = 0, 'N/A', LTRIM(RTRIM(display_name))) AS v_display_name,\n\tv_display_name AS o_display_name,\n\tpublished_to_prod_flag,\n\t-- *INF*: IIF(ISNULL(published_to_prod_flag),' ',published_to_prod_flag)\n\tIFF(published_to_prod_flag IS NULL, ' ', published_to_prod_flag) AS v_published_to_prod_flag,\n\tv_published_to_prod_flag AS o_published_to_prod_flag,\n\tenabled_flag,\n\t-- *INF*: IIF(ISNULL(enabled_flag),' ',enabled_flag)\n\tIFF(enabled_flag IS NULL, ' ', enabled_flag) AS v_enabled_flag,\n\tv_enabled_flag AS o_enabled_flag,\n\tversion_num,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(version_num))) OR IS_SPACES(LTRIM(RTRIM(version_num))) OR LENGTH(LTRIM(RTRIM(version_num)))=0,'N/A',LTRIM(RTRIM(version_num)))\n\tIFF(LTRIM(RTRIM(version_num)) IS NULL OR IS_SPACES(LTRIM(RTRIM(version_num))) OR LENGTH(LTRIM(RTRIM(version_num))) = 0, 'N/A', LTRIM(RTRIM(version_num))) AS v_version_num,\n\tv_version_num AS o_version_num,\n\tsource_system_id,\n\teff_date,\n\t-- *INF*: IIF(ISNULL(eff_date),TO_DATE('1/1/1800','MM/DD/YYYY'),eff_date)\n\tIFF(eff_date IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), eff_date) AS v_eff_date,\n\tv_eff_date AS o_eff_date,\n\texp_date,\n\t-- *INF*: IIF(ISNULL(exp_date),TO_DATE('1/1/1800','MM/DD/YYYY'),exp_date)\n\tIFF(exp_date IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), exp_date) AS v_exp_date,\n\tv_exp_date AS o_exp_date\n\tFROM SQ_application_stage\n),\nLKP_APPLICATION AS (\n\tSELECT\n\tapp_id,\n\tapp_ak_id,\n\tdisplay_name,\n\tapp_guid,\n\tpublished_to_prod_flag,\n\tenabled_flag,\n\tversion_num,\n\teff_date,\n\texp_date,\n\tsource_sys_id\n\tFROM (\n\t\tselect a.app_id as app_id,\r\n\t\t       a.app_ak_Id as app_ak_id,\r\n\t\t       a.app_guid as app_guid,\r\n\t\t       a.display_name as display_name,\r\n\t\t       a.published_to_prod_flag as published_to_prod_flag,\r\n\t\t       a.enabled_flag as enabled_flag,\r\n\t\t       a.version_num as version_num,\r\n\t\t       a.source_sys_id as source_sys_id ,\r\n\t\t       a.eff_date as eff_date,\r\n\t\t       a.exp_date as exp_date\r\n\t\t       from @{pipeline().parameters.TARGET_TABLE_OWNER}.application a\r\n\t\t       where a.crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY app_guid,source_sys_id ORDER BY app_id DESC) = 1\n),\nEXP_DETECT_CHANGES AS (\n\tSELECT\n\tLKP_APPLICATION.app_id AS LKP_app_id,\n\tLKP_APPLICATION.app_ak_id AS LKP_app_ak_id,\n\tLKP_APPLICATION.display_name AS LKP_display_name,\n\tLKP_APPLICATION.app_guid AS LKP_app_guid,\n\tLKP_APPLICATION.published_to_prod_flag AS LKP_published_to_prod_flag,\n\tLKP_APPLICATION.enabled_flag AS LKP_enabled_flag,\n\tLKP_APPLICATION.version_num AS LKP_version_num,\n\tLKP_APPLICATION.eff_date AS LKP_eff_date,\n\tLKP_APPLICATION.exp_date AS LKP_exp_date,\n\tEXP_VALIDATE.o_app_guid,\n\tEXP_VALIDATE.o_display_name,\n\tEXP_VALIDATE.o_published_to_prod_flag,\n\tEXP_VALIDATE.o_enabled_flag,\n\tEXP_VALIDATE.o_version_num,\n\t-- *INF*: IIF(ISNULL(LKP_app_id),'NEW',\r\n\t--      IIF(LTRIM(RTRIM(o_display_name)) <> LTRIM(RTRIM(LKP_display_name)) OR \r\n\t-- \tLTRIM(RTRIM(o_published_to_prod_flag)) <> LTRIM(RTRIM(LKP_published_to_prod_flag)) OR \r\n\t-- \tLTRIM(RTRIM(o_enabled_flag)) <> LTRIM(RTRIM(LKP_enabled_flag)) OR \r\n\t-- \tLTRIM(RTRIM(o_version_num)) <> LTRIM(RTRIM(LKP_version_num))    OR LKP_eff_date <> o_eff_date  OR LKP_exp_date <> o_exp_date ,\r\n\t-- \t'UPDATE','NOCHANGE'))\n\tIFF(LKP_app_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(o_display_name)) <> LTRIM(RTRIM(LKP_display_name)) OR LTRIM(RTRIM(o_published_to_prod_flag)) <> LTRIM(RTRIM(LKP_published_to_prod_flag)) OR LTRIM(RTRIM(o_enabled_flag)) <> LTRIM(RTRIM(LKP_enabled_flag)) OR LTRIM(RTRIM(o_version_num)) <> LTRIM(RTRIM(LKP_version_num)) OR LKP_eff_date <> o_eff_date OR LKP_exp_date <> o_exp_date, 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tsysdate AS created_date,\n\tsysdate AS modified_date,\n\t-- *INF*: IIF(v_changed_flag='NEW',TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),SYSDATE)\n\tIFF(v_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tEXP_VALIDATE.o_eff_date,\n\tEXP_VALIDATE.o_exp_date\n\tFROM EXP_VALIDATE\n\tLEFT JOIN LKP_APPLICATION\n\tON LKP_APPLICATION.app_guid = EXP_VALIDATE.o_app_guid AND LKP_APPLICATION.source_sys_id = EXP_VALIDATE.source_system_id\n),\nFIL_INSERT1 AS (\n\tSELECT\n\tLKP_app_ak_id AS old_app_ak_id, \n\to_app_guid AS app_guid, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tmodified_date AS default_date, \n\to_app_guid, \n\to_display_name, \n\to_published_to_prod_flag, \n\to_enabled_flag, \n\to_version_num, \n\to_eff_date, \n\to_exp_date\n\tFROM EXP_DETECT_CHANGES\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nSEQ_APPLICATION AS (\n\tCREATE SEQUENCE SEQ_APPLICATION\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\told_app_ak_id,\n\t-- *INF*: IIF(changed_flag ='NEW',NEXTVAL,old_app_ak_id)\n\tIFF(changed_flag = 'NEW', NEXTVAL, old_app_ak_id) AS app_ak_id,\n\tchanged_flag,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tdefault_date,\n\tSEQ_APPLICATION.NEXTVAL,\n\to_app_guid,\n\to_display_name,\n\to_published_to_prod_flag,\n\to_enabled_flag,\n\to_version_num,\n\to_eff_date,\n\to_exp_date\n\tFROM FIL_INSERT1\n),\napplication_INS AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.application\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, app_ak_id, app_guid, display_name, published_to_prod_flag, enabled_flag, version_num, eff_date, exp_date)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tAPP_AK_ID, \n\to_app_guid AS APP_GUID, \n\to_display_name AS DISPLAY_NAME, \n\to_published_to_prod_flag AS PUBLISHED_TO_PROD_FLAG, \n\to_enabled_flag AS ENABLED_FLAG, \n\to_version_num AS VERSION_NUM, \n\to_eff_date AS EFF_DATE, \n\to_exp_date AS EXP_DATE\n\tFROM EXP_Determine_AK\n),\nSQ_application AS (\n\tSELECT \r\n\ta.app_id, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date ,\r\n\ta.app_guid \r\n\t\r\n\tFROM\r\n\t  @{pipeline().parameters.TARGET_TABLE_OWNER}.application a \r\n\tWHERE \r\n\ta.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND\r\n\tEXISTS(SELECT 1 \r\n\t                 FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.application b     \r\n\t                 \r\n\t                 WHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' \r\n\t                 and crrnt_snpsht_flag = 1\r\n\t                 AND a.app_guid = b.app_guid     \r\n\t \t           GROUP BY b.app_guid               \r\n\t                 HAVING COUNT(*) >1) \r\n\tORDER BY a.app_guid , a.eff_from_date DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tapp_id,\n\tapp_guid,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,app_guid=v_prev_row_app_guid  ,ADD_TO_DATE(v_prev_row_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\t\tapp_guid = v_prev_row_app_guid, ADD_TO_DATE(v_prev_row_eff_from_date, 'SS', - 1),\n\t\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tapp_guid AS v_prev_row_app_guid,\n\teff_from_date AS v_prev_row_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_application\n),\nFIL_Firstrow_INAKIDGROUP1 AS (\n\tSELECT\n\tapp_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <>eff_to_date\n),\nUPD_APPLICATION AS (\n\tSELECT\n\tapp_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_Firstrow_INAKIDGROUP1\n),\napplication_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.application AS T\n\tUSING UPD_APPLICATION AS S\n\tON T.app_id = S.app_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246501"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905505"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603948"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 00:32:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 00:37:25"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "QUES"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}