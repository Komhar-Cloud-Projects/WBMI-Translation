{
    "name": "s_m_AGY_DW_LOAD_SalesTerritory",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_LOAD_SalesTerritory",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_SalesTerritoryStage AS (\n\tSELECT\n\t\tSalesTerritoryStageID,\n\t\tAgencyODSSourceSystemID,\n\t\tHashKey,\n\t\tModifiedUserID,\n\t\tModifiedDate,\n\t\tSalesTerritoryCode,\n\t\tSalesTerritoryCodeDescription,\n\t\tExtractDate,\n\t\tAsOfDate,\n\t\tRecordCount,\n\t\tSourceSystemID\n\tFROM SalesTerritoryStage\n),\nLKP_ExistingSalesTerritory AS (\n\tSELECT\n\tin_SalesTerritoryCode,\n\tHashKey,\n\tSalesTerritoryAKID,\n\tSalesTerritoryCode\n\tFROM (\n\t\tSELECT \n\t\t\tin_SalesTerritoryCode,\n\t\t\tHashKey,\n\t\t\tSalesTerritoryAKID,\n\t\t\tSalesTerritoryCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesTerritory\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SalesTerritoryCode ORDER BY in_SalesTerritoryCode) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_ExistingSalesTerritory.HashKey AS lkp_HashKey,\n\tLKP_ExistingSalesTerritory.SalesTerritoryAKID AS lkp_SalesTerritoryAKID,\n\tSQ_SalesTerritoryStage.SalesTerritoryCode,\n\tSQ_SalesTerritoryStage.SalesTerritoryCodeDescription,\n\t-- *INF*: MD5(SalesTerritoryCode || SalesTerritoryCodeDescription)\n\tMD5(SalesTerritoryCode || SalesTerritoryCodeDescription) AS v_NewHashKey,\n\tv_NewHashKey AS o_NewHashKey,\n\t-- *INF*: IIF(ISNULL(lkp_SalesTerritoryAKID), 'NEW', IIF((lkp_HashKey <> v_NewHashKey), 'UPDATE', 'NOCHANGE'))\n\tIFF(lkp_SalesTerritoryAKID IS NULL, 'NEW', IFF(( lkp_HashKey <> v_NewHashKey ), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate,\n\tSQ_SalesTerritoryStage.SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_SalesTerritoryStage\n\tLEFT JOIN LKP_ExistingSalesTerritory\n\tON LKP_ExistingSalesTerritory.SalesTerritoryCode = SQ_SalesTerritoryStage.SalesTerritoryCode\n),\nFIL_insert AS (\n\tSELECT\n\tchanged_flag, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\to_NewHashKey AS HashKey, \n\tSalesTerritoryCode, \n\tSalesTerritoryCodeDescription\n\tFROM EXP_Detect_Changes\n\tWHERE changed_flag='NEW'or changed_flag='UPDATE'\n),\nSEQ_SalesTerritory_AKID AS (\n\tCREATE SEQUENCE SEQ_SalesTerritory_AKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Assign_AKID AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tlkp_SalesTerritoryAKID,\n\tSEQ_SalesTerritory_AKID.NEXTVAL,\n\t-- *INF*: iif(isnull(lkp_SalesTerritoryAKID),NEXTVAL,lkp_SalesTerritoryAKID)\n\tIFF(lkp_SalesTerritoryAKID IS NULL, NEXTVAL, lkp_SalesTerritoryAKID) AS SalesTerritoryAKID,\n\tHashKey,\n\tSalesTerritoryCode,\n\tSalesTerritoryCodeDescription\n\tFROM FIL_insert\n),\nSalesTerritory_Inserts AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesTerritory\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, HashKey, SalesTerritoryAKID, SalesTerritoryCode, SalesTerritoryCodeDescription)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tHASHKEY, \n\tSALESTERRITORYAKID, \n\tSALESTERRITORYCODE, \n\tSALESTERRITORYCODEDESCRIPTION\n\tFROM EXP_Assign_AKID\n),\nSQ_SalesTerritory AS (\n\tSELECT \r\n\t\ta.SalesTerritoryID, \r\n\t\ta.EffectiveDate,\r\n\t\ta.ExpirationDate, \r\n\t\ta.SalesTerritoryAKID\r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SalesTerritory a\r\n\tWHERE  a.SalesTerritoryAKID  IN\r\n\t\t( SELECT SalesTerritoryAKID  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesTerritory\r\n\t\tWHERE CurrentSnapshotFlag = 1 GROUP BY SalesTerritoryAKID HAVING count(*) > 1) \r\n\tORDER BY a.SalesTerritoryAKID, a.EffectiveDate DESC\r\n\t\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tSalesTerritoryID,\n\tEffectiveDate AS EffectiveFromDate,\n\tExpirationDate AS OriginalEffectiveToDate,\n\tSalesTerritoryAKID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- SalesTerritoryAKID = v_prev_AKID , ADD_TO_DATE(v_prev_EffectiveFromDate,'SS',-1),\r\n\t-- OriginalEffectiveToDate)\n\tDECODE(TRUE,\n\t\tSalesTerritoryAKID = v_prev_AKID, ADD_TO_DATE(v_prev_EffectiveFromDate, 'SS', - 1),\n\t\tOriginalEffectiveToDate) AS v_EffectiveToDate,\n\tv_EffectiveToDate AS o_EffectiveToDate,\n\tSalesTerritoryAKID AS v_prev_AKID,\n\tEffectiveFromDate AS v_prev_EffectiveFromDate,\n\t0 AS CurrentSnapshotFlag,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_SalesTerritory\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tSalesTerritoryID, \n\tOriginalEffectiveToDate, \n\to_EffectiveToDate AS NewEffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM EXP_Lag_eff_from_date\n\tWHERE OriginalEffectiveToDate != NewEffectiveToDate\n),\nUPD_OldRecord AS (\n\tSELECT\n\tSalesTerritoryID, \n\tNewEffectiveToDate AS EffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nSalesTerritory_Updates AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SalesTerritory AS T\n\tUSING UPD_OldRecord AS S\n\tON T.SalesTerritoryID = S.SalesTerritoryID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.EffectiveToDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246490"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905469"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603184"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:19:20"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:18:59"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCESYSTEMID": {
                "type": "string",
                "defaultValue": "AgencyODS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            }
        },
        "folder": {
            "name": "Agency DataWarehouse/"
        },
        "annotations": []
    }
}