{
    "name": "s_m_CLM_DW_LOAD_Claim_Case_EXD",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Case_EXD",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_CLM_COMMENTS_STAGE AS (\n\tSELECT\n\ttcc_comment_txt,\n\tfolder_key,\n\tcomment_item_nbr\n\tFROM (\n\t\tSELECT A.tcc_comment_txt as tcc_comment_txt, \r\n\t\tA.folder_key as folder_key, A.comment_item_nbr as comment_item_nbr \r\n\t\tFROM clm_comments_stage A INNER JOIN clm_case_manage_stage B ON \r\n\t\tB.tch_claim_nbr= A.folder_key\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY folder_key,comment_item_nbr ORDER BY tcc_comment_txt DESC) = 1\n),\nSQ_CLAIM_CASE_MANAGE_STAGE AS (\n\tSELECT \r\n\tccm.tch_claim_nbr, ccm.tch_client_id, ccm.case_name, ccm.case_number, \r\n\tccm.suit_venue, ccm.suit_state, ccm.trial_date, ccm.policy_limit_id, ccm.case_desc_id, ccm.inj_dam_desc_id, ccm.pripst_inj_desc_id, ccm.subro_cont_id, ccm.first_not_law_suit, ccm.declaratory_act, ccm.suit_status, ccm.denial_date, ccm.prim_lit_handler, ccm.litigation_date, ccm.litigation_closed, ccm.liab_cmt_id, ccm.pros_cmt_id, ccm.cons_cmt_id, ccm.com_umb_res, ccm.how_clm_closed, ccm.payment_amt, ccm.reins_reported, ccm.demand_at_init_lit ,ccm.settlement_type_cd \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.clm_case_manage_stage ccm\n),\nEXP_VALIDATE AS (\n\tSELECT\n\ttch_claim_nbr AS tch_claim_nbr_ccm,\n\ttch_client_id AS tch_client_id_ccm,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(tch_claim_nbr_ccm))) OR IS_SPACES(LTRIM(RTRIM(tch_claim_nbr_ccm))) OR LENGTH(LTRIM(RTRIM(tch_claim_nbr_ccm)))=0,'N/A',LTRIM(RTRIM(tch_claim_nbr_ccm)))\n\tIFF(LTRIM(RTRIM(tch_claim_nbr_ccm)) IS NULL OR IS_SPACES(LTRIM(RTRIM(tch_claim_nbr_ccm))) OR LENGTH(LTRIM(RTRIM(tch_claim_nbr_ccm))) = 0, 'N/A', LTRIM(RTRIM(tch_claim_nbr_ccm))) AS v_tch_claim_nbr,\n\tv_tch_claim_nbr AS tch_claim_nbr,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(tch_client_id_ccm))) OR IS_SPACES(LTRIM(RTRIM(tch_client_id_ccm))) OR LENGTH(LTRIM(RTRIM(tch_client_id_ccm)))=0,'N/A',LTRIM(RTRIM(tch_client_id_ccm)))\n\tIFF(LTRIM(RTRIM(tch_client_id_ccm)) IS NULL OR IS_SPACES(LTRIM(RTRIM(tch_client_id_ccm))) OR LENGTH(LTRIM(RTRIM(tch_client_id_ccm))) = 0, 'N/A', LTRIM(RTRIM(tch_client_id_ccm))) AS v_tch_client_id,\n\tv_tch_client_id AS tch_client_id,\n\t-- *INF*: v_tch_claim_nbr || '//'||v_tch_client_id\n\tv_tch_claim_nbr || '//' || v_tch_client_id AS CLAIM_CASE_KEY,\n\tcase_name AS IN_case_name,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_case_name))) OR IS_SPACES(LTRIM(RTRIM(IN_case_name))) OR LENGTH(LTRIM(RTRIM(IN_case_name)))=0,'N/A' ,LTRIM(RTRIM(IN_case_name)))\n\tIFF(LTRIM(RTRIM(IN_case_name)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_case_name))) OR LENGTH(LTRIM(RTRIM(IN_case_name))) = 0, 'N/A', LTRIM(RTRIM(IN_case_name))) AS case_name,\n\tcase_number AS IN_case_number,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_case_number))) OR IS_SPACES(LTRIM(RTRIM(IN_case_number))) OR LENGTH(LTRIM(RTRIM(IN_case_number)))=0,'N/A' ,LTRIM(RTRIM(IN_case_number)))\n\tIFF(LTRIM(RTRIM(IN_case_number)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_case_number))) OR LENGTH(LTRIM(RTRIM(IN_case_number))) = 0, 'N/A', LTRIM(RTRIM(IN_case_number))) AS case_number,\n\tsuit_venue AS IN_suit_venue,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_suit_venue))) OR IS_SPACES(LTRIM(RTRIM(IN_suit_venue))) OR LENGTH(LTRIM(RTRIM(IN_suit_venue)))=0,'N/A' ,LTRIM(RTRIM(IN_suit_venue)))\n\tIFF(LTRIM(RTRIM(IN_suit_venue)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_suit_venue))) OR LENGTH(LTRIM(RTRIM(IN_suit_venue))) = 0, 'N/A', LTRIM(RTRIM(IN_suit_venue))) AS suit_venue,\n\tsuit_state AS IN_suit_state,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_suit_state))) OR IS_SPACES(LTRIM(RTRIM(IN_suit_state))) OR LENGTH(LTRIM(RTRIM(IN_suit_state)))=0,'N/A' ,LTRIM(RTRIM(IN_suit_state)))\n\tIFF(LTRIM(RTRIM(IN_suit_state)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_suit_state))) OR LENGTH(LTRIM(RTRIM(IN_suit_state))) = 0, 'N/A', LTRIM(RTRIM(IN_suit_state))) AS suit_state,\n\ttrial_date AS IN_trial_date,\n\t-- *INF*: IIF(ISNULL(IN_trial_date) ,TO_DATE('01/01/1800 00:00:00','MM/DD/YYYY HH24:MI:SS'),IN_trial_date)\n\tIFF(IN_trial_date IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_trial_date) AS trial_date,\n\tpolicy_limit_id AS IN_policy_limit_id,\n\tcase_desc_id AS IN_case_desc_id,\n\tinj_dam_desc_id AS IN_inj_dam_desc_id,\n\tsubro_cont_id AS IN_subro_cont_id,\n\tfirst_not_law_suit AS IN_first_not_law_suit,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_first_not_law_suit))) OR IS_SPACES(LTRIM(RTRIM(IN_first_not_law_suit))) OR LENGTH(LTRIM(RTRIM(IN_first_not_law_suit)))=0,'N/A' ,LTRIM(RTRIM(IN_first_not_law_suit)))\n\tIFF(LTRIM(RTRIM(IN_first_not_law_suit)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_first_not_law_suit))) OR LENGTH(LTRIM(RTRIM(IN_first_not_law_suit))) = 0, 'N/A', LTRIM(RTRIM(IN_first_not_law_suit))) AS first_not_law_suit,\n\tdeclaratory_act AS IN_declaratory_act,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_declaratory_act))) OR IS_SPACES(LTRIM(RTRIM(IN_declaratory_act))) OR LENGTH(LTRIM(RTRIM(IN_declaratory_act)))=0,'N/A' ,LTRIM(RTRIM(IN_declaratory_act)))\n\tIFF(LTRIM(RTRIM(IN_declaratory_act)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_declaratory_act))) OR LENGTH(LTRIM(RTRIM(IN_declaratory_act))) = 0, 'N/A', LTRIM(RTRIM(IN_declaratory_act))) AS declaratory_act,\n\tsuit_status AS IN_suit_status,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_suit_status))) OR IS_SPACES(LTRIM(RTRIM(IN_suit_status))) OR LENGTH(LTRIM(RTRIM(IN_suit_status)))=0,'N/A' ,LTRIM(RTRIM(IN_suit_status)))\n\tIFF(LTRIM(RTRIM(IN_suit_status)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_suit_status))) OR LENGTH(LTRIM(RTRIM(IN_suit_status))) = 0, 'N/A', LTRIM(RTRIM(IN_suit_status))) AS suit_status,\n\tdenial_date AS IN_denial_date,\n\t-- *INF*: IIF(ISNULL(IN_denial_date) ,TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ,IN_denial_date)\n\tIFF(IN_denial_date IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_denial_date) AS denial_date,\n\tlitigation_date AS IN_litigation_date,\n\t-- *INF*: IIF(ISNULL(IN_litigation_date),TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ,IN_litigation_date)\n\tIFF(IN_litigation_date IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_litigation_date) AS litigation_date,\n\tprim_lit_handler AS IN_prim_lit_handler,\n\tlitigation_closed AS IN_litigation_closed,\n\t-- *INF*: IIF(ISNULL(IN_litigation_closed) ,TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ,IN_litigation_closed)\n\tIFF(IN_litigation_closed IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_litigation_closed) AS litigation_closed,\n\thow_clm_closed AS IN_how_clm_closed,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_how_clm_closed))) OR IS_SPACES(LTRIM(RTRIM(IN_how_clm_closed))) OR LENGTH(LTRIM(RTRIM(IN_how_clm_closed)))=0,'N/A' ,LTRIM(RTRIM(IN_how_clm_closed)))\n\tIFF(LTRIM(RTRIM(IN_how_clm_closed)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_how_clm_closed))) OR LENGTH(LTRIM(RTRIM(IN_how_clm_closed))) = 0, 'N/A', LTRIM(RTRIM(IN_how_clm_closed))) AS how_clm_closed,\n\treins_reported AS IN_reins_reported,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_reins_reported))) OR IS_SPACES(LTRIM(RTRIM(IN_reins_reported))) OR LENGTH(LTRIM(RTRIM(IN_reins_reported)))=0,'N/A' ,LTRIM(RTRIM(IN_reins_reported)))\n\tIFF(LTRIM(RTRIM(IN_reins_reported)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_reins_reported))) OR LENGTH(LTRIM(RTRIM(IN_reins_reported))) = 0, 'N/A', LTRIM(RTRIM(IN_reins_reported))) AS reins_reported,\n\tpros_cmt_id AS IN_pros_cmt_id,\n\tcons_cmt_id AS IN_cons_cmt_id,\n\tpripst_inj_desc_id AS IN_pripst_inj_desc_id,\n\tliab_cmt_id AS IN_liab_cmt_id,\n\tcom_umb_res AS IN_com_umb_res,\n\t-- *INF*: IIF(ISNULL(IN_com_umb_res) ,0 ,IN_com_umb_res)\n\tIFF(IN_com_umb_res IS NULL, 0, IN_com_umb_res) AS com_umb_res,\n\tpayment_amt AS IN_payment_amt,\n\t-- *INF*: IIF(ISNULL(IN_payment_amt) ,0 ,IN_payment_amt)\n\tIFF(IN_payment_amt IS NULL, 0, IN_payment_amt) AS payment_amt,\n\tdemand_at_init_lit,\n\t-- *INF*: IIF(ISNULL(demand_at_init_lit) ,0 ,demand_at_init_lit)\n\tIFF(demand_at_init_lit IS NULL, 0, demand_at_init_lit) AS demand_at_initial_litigation,\n\tsettlement_type_cd\n\tFROM SQ_CLAIM_CASE_MANAGE_STAGE\n),\nLKP_ADJUSTOR_TAB_STAGE AS (\n\tSELECT\n\tcaj_emp_client_id,\n\tcaj_adjuster_class,\n\tIN_prim_lit_handler\n\tFROM (\n\t\tSELECT \n\t\t\tcaj_emp_client_id,\n\t\t\tcaj_adjuster_class,\n\t\t\tIN_prim_lit_handler\n\t\tFROM adjuster_tab_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY caj_emp_client_id ORDER BY caj_emp_client_id) = 1\n),\nLKP_CLM_CLT_RELATION_STAGE AS (\n\tSELECT\n\tcre_client_id,\n\tcre_claim_nbr\n\tFROM (\n\t\tSELECT A.cre_claim_nbr as cre_claim_nbr, A.cre_client_id as cre_client_id \r\n\t\tFROM clm_clt_relation_stage A\r\n\t\tWHERE A.source_system_id ='EXCEED' and A.cre_client_role_cd ='WLIA'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY cre_claim_nbr,cre_client_id ORDER BY cre_client_id) = 1\n),\nLKP_Prim_Lit_handler_ak_id AS (\n\tSELECT\n\tclaim_party_ak_id,\n\tclaim_party_key\n\tFROM (\n\t\tSELECT \r\n\t\tA.claim_party_ak_id as claim_party_ak_id, \r\n\t\tA.claim_party_key as claim_party_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party  A INNER JOIN  \r\n\t\t@{pipeline().parameters.STAGING_DATABASE}.@{pipeline().parameters.TARGET_TABLE_OWNER}.clm_case_manage_stage B\r\n\t\tON RTRIM(A.claim_party_key) = RTRIM(B.prim_lit_handler)\r\n\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_ak_id DESC) = 1\n),\nEXP_LKP_VALUES AS (\n\tSELECT\n\tEXP_VALIDATE.tch_claim_nbr,\n\tEXP_VALIDATE.tch_client_id,\n\tEXP_VALIDATE.CLAIM_CASE_KEY,\n\tEXP_VALIDATE.case_name,\n\tEXP_VALIDATE.case_number,\n\tEXP_VALIDATE.suit_venue,\n\tEXP_VALIDATE.suit_state,\n\tEXP_VALIDATE.trial_date,\n\tEXP_VALIDATE.IN_policy_limit_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_policy_limit_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_policy_limit_id.tcc_comment_txt) AS v_pol_lim_comment,\n\tEXP_VALIDATE.IN_case_desc_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_case_desc_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_case_desc_id.tcc_comment_txt) AS v_claim_case_comment,\n\tEXP_VALIDATE.IN_inj_dam_desc_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_inj_dam_desc_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_inj_dam_desc_id.tcc_comment_txt) AS v_injury_dam_comment,\n\tEXP_VALIDATE.IN_subro_cont_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_subro_cont_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_subro_cont_id.tcc_comment_txt) AS v_subrogation_contri_comment,\n\tEXP_VALIDATE.first_not_law_suit,\n\tEXP_VALIDATE.declaratory_act,\n\tEXP_VALIDATE.suit_status,\n\tEXP_VALIDATE.denial_date,\n\tEXP_VALIDATE.IN_prim_lit_handler,\n\tLKP_Prim_Lit_handler_ak_id.claim_party_ak_id AS IN_prim_lit_handler_ak_id,\n\t-- *INF*: IIF(ISNULL(IN_prim_lit_handler_ak_id),-1,IN_prim_lit_handler_ak_id)\n\tIFF(IN_prim_lit_handler_ak_id IS NULL, - 1, IN_prim_lit_handler_ak_id) AS Out_prim_lit_handler_ak_id,\n\tLKP_ADJUSTOR_TAB_STAGE.caj_adjuster_class,\n\tLKP_ADJUSTOR_TAB_STAGE.caj_emp_client_id,\n\tLKP_CLM_CLT_RELATION_STAGE.cre_client_id,\n\t-- *INF*: IIF(ISNULL(IN_prim_lit_handler) OR IS_SPACES(IN_prim_lit_handler) OR LENGTH(IN_prim_lit_handler) =0,'N/A',\r\n\t-- \tIIF(NOT ISNULL(caj_emp_client_id),\r\n\t-- \t\tIIF(caj_adjuster_class = 'L','STF','ADJ'),IIF(ISNULL(cre_client_id),'REG','ARB')))\n\tIFF(IN_prim_lit_handler IS NULL OR IS_SPACES(IN_prim_lit_handler) OR LENGTH(IN_prim_lit_handler) = 0, 'N/A', IFF(NOT caj_emp_client_id IS NULL, IFF(caj_adjuster_class = 'L', 'STF', 'ADJ'), IFF(cre_client_id IS NULL, 'REG', 'ARB'))) AS v_prim_lit_handler_role_code,\n\tv_prim_lit_handler_role_code AS prim_lit_handler_role_code,\n\tEXP_VALIDATE.litigation_date,\n\tEXP_VALIDATE.litigation_closed,\n\tEXP_VALIDATE.how_clm_closed,\n\tEXP_VALIDATE.reins_reported,\n\tEXP_VALIDATE.IN_pros_cmt_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_pros_cmt_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pros_cmt_id.tcc_comment_txt) AS v_pros_comment,\n\tEXP_VALIDATE.IN_cons_cmt_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_cons_cmt_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_cons_cmt_id.tcc_comment_txt) AS v_cons_comment,\n\tEXP_VALIDATE.IN_pripst_inj_desc_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_pripst_inj_desc_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pripst_inj_desc_id.tcc_comment_txt) AS v_pripst_injury_comment,\n\tEXP_VALIDATE.IN_liab_cmt_id,\n\t-- *INF*: rtrim(:LKP.LKP_CLM_COMMENTS_STAGE(tch_claim_nbr,IN_liab_cmt_id))\n\trtrim(LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_liab_cmt_id.tcc_comment_txt) AS v_liability_comment,\n\tEXP_VALIDATE.com_umb_res,\n\tEXP_VALIDATE.payment_amt,\n\tEXP_VALIDATE.demand_at_initial_litigation,\n\t-- *INF*: 1+ length(\r\n\t-- v_pol_lim_comment || \r\n\t-- v_claim_case_comment || \r\n\t-- v_injury_dam_comment || \r\n\t-- v_subrogation_contri_comment ||  \r\n\t-- v_pros_comment || \r\n\t-- v_cons_comment || \r\n\t-- v_pripst_injury_comment ||  \r\n\t-- v_liability_comment\r\n\t-- )\r\n\t-- \r\n\t-- //getting the total length of all the comments\r\n\t-- // adding 1 so that the len is not equal to 0 if all comments are null\r\n\t-- // This helps to avoid zero divisor error in the ratio variables\n\t1 + length(v_pol_lim_comment || v_claim_case_comment || v_injury_dam_comment || v_subrogation_contri_comment || v_pros_comment || v_cons_comment || v_pripst_injury_comment || v_liability_comment) AS v_total_comments_length,\n\t-- *INF*: v_total_comments_length - 7000\r\n\t-- \r\n\t-- \r\n\t-- // the total length of comments should only be 7000. If it is more than that then the difference is calculated\n\tv_total_comments_length - 7000 AS v_extra_comments_length,\n\t-- *INF*: length(v_pol_lim_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_pol_lim_comment) / v_total_comments_length AS pol_lmt_comment_ratio,\n\t-- *INF*: length(v_claim_case_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_claim_case_comment) / v_total_comments_length AS claim_case_comment_ratio,\n\t-- *INF*: length(v_injury_dam_comment)/v_total_comments_length\r\n\t-- \r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_injury_dam_comment) / v_total_comments_length AS inj_dam_comment_ratio,\n\t-- *INF*: length(v_subrogation_contri_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_subrogation_contri_comment) / v_total_comments_length AS sub_cont_comment_ratio,\n\t-- *INF*: length(v_pros_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_pros_comment) / v_total_comments_length AS pros_comment_ratio,\n\t-- *INF*: length(v_cons_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_cons_comment) / v_total_comments_length AS cons_comment_ratio,\n\t-- *INF*: length(v_pripst_injury_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_pripst_injury_comment) / v_total_comments_length AS prior_post_inj_comment_ratio,\n\t-- *INF*: length(v_liability_comment)/v_total_comments_length\r\n\t-- \r\n\t-- //finding out what ratio of the total length, this particular comment field is taking\n\tlength(v_liability_comment) / v_total_comments_length AS liab_comment_ratio,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_pol_lim_comment) OR IS_SPACES(v_pol_lim_comment) OR LENGTH(v_pol_lim_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_pol_lim_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_pol_lim_comment, \r\n\t-- 1, \r\n\t-- length(v_pol_lim_comment) - ( FLOOR(v_extra_comments_length * pol_lmt_comment_ratio ))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_pol_lim_comment) OR IS_SPACES(v_pol_lim_comment) OR LENGTH(v_pol_lim_comment) =0, 'N/A', LTRIM(RTRIM(v_pol_lim_comment)))\n\tDECODE(TRUE,\n\t\tv_pol_lim_comment IS NULL OR IS_SPACES(v_pol_lim_comment) OR LENGTH(v_pol_lim_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_pol_lim_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_pol_lim_comment, 1, length(v_pol_lim_comment) - ( FLOOR(v_extra_comments_length * pol_lmt_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS pol_lim_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_claim_case_comment) OR IS_SPACES(v_claim_case_comment) OR LENGTH(v_claim_case_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_claim_case_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_claim_case_comment, \r\n\t-- 1, \r\n\t-- length(v_claim_case_comment) - ( FLOOR(v_extra_comments_length * claim_case_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_claim_case_comment) OR IS_SPACES(v_claim_case_comment) OR LENGTH(v_claim_case_comment) =0,'N/A',LTRIM(RTRIM(v_claim_case_comment)))\n\tDECODE(TRUE,\n\t\tv_claim_case_comment IS NULL OR IS_SPACES(v_claim_case_comment) OR LENGTH(v_claim_case_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_claim_case_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_claim_case_comment, 1, length(v_claim_case_comment) - ( FLOOR(v_extra_comments_length * claim_case_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS claim_case_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_injury_dam_comment) OR IS_SPACES(v_injury_dam_comment) OR LENGTH(v_injury_dam_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_injury_dam_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_injury_dam_comment, \r\n\t-- 1, \r\n\t-- length(v_injury_dam_comment) - ( FLOOR(v_extra_comments_length * inj_dam_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_injury_dam_comment) OR IS_SPACES(v_injury_dam_comment) OR LENGTH(v_injury_dam_comment) =0,'N/A',LTRIM(RTRIM(v_injury_dam_comment)))\n\tDECODE(TRUE,\n\t\tv_injury_dam_comment IS NULL OR IS_SPACES(v_injury_dam_comment) OR LENGTH(v_injury_dam_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_injury_dam_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_injury_dam_comment, 1, length(v_injury_dam_comment) - ( FLOOR(v_extra_comments_length * inj_dam_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS injury_dam_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_subrogation_contri_comment) OR IS_SPACES(v_subrogation_contri_comment) OR LENGTH(v_subrogation_contri_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_subrogation_contri_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_subrogation_contri_comment, \r\n\t-- 1, \r\n\t-- length(v_subrogation_contri_comment) - ( FLOOR(v_extra_comments_length * sub_cont_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_subrogation_contri_comment) OR IS_SPACES(v_subrogation_contri_comment) OR LENGTH(v_subrogation_contri_comment) =0,'N/A',LTRIM(RTRIM(v_subrogation_contri_comment)))\n\tDECODE(TRUE,\n\t\tv_subrogation_contri_comment IS NULL OR IS_SPACES(v_subrogation_contri_comment) OR LENGTH(v_subrogation_contri_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_subrogation_contri_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_subrogation_contri_comment, 1, length(v_subrogation_contri_comment) - ( FLOOR(v_extra_comments_length * sub_cont_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS subrogation_contri_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_pros_comment) OR IS_SPACES(v_pros_comment) OR LENGTH(v_pros_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_pros_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_pros_comment, \r\n\t-- 1, \r\n\t-- length(v_pros_comment) - ( FLOOR(v_extra_comments_length * pros_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_pros_comment) OR IS_SPACES(v_pros_comment) OR LENGTH(v_pros_comment) =0,'N/A',LTRIM--(RTRIM(v_pros_comment)))\n\tDECODE(TRUE,\n\t\tv_pros_comment IS NULL OR IS_SPACES(v_pros_comment) OR LENGTH(v_pros_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_pros_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_pros_comment, 1, length(v_pros_comment) - ( FLOOR(v_extra_comments_length * pros_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS pros_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_cons_comment) OR IS_SPACES(v_cons_comment) OR LENGTH(v_cons_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_cons_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_cons_comment, \r\n\t-- 1, \r\n\t-- length(v_cons_comment) - ( FLOOR(v_extra_comments_length * cons_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_cons_comment) OR IS_SPACES(v_cons_comment) OR LENGTH(v_cons_comment) =0,'N/A',LTRIM--(RTRIM(v_cons_comment)))\n\tDECODE(TRUE,\n\t\tv_cons_comment IS NULL OR IS_SPACES(v_cons_comment) OR LENGTH(v_cons_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_cons_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_cons_comment, 1, length(v_cons_comment) - ( FLOOR(v_extra_comments_length * cons_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS cons_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_pripst_injury_comment) OR IS_SPACES(v_pripst_injury_comment) OR LENGTH(v_pripst_injury_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_pripst_injury_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_pripst_injury_comment, \r\n\t-- 1, \r\n\t-- length(v_pripst_injury_comment) - ( FLOOR(v_extra_comments_length * prior_post_inj_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_pripst_injury_comment) OR IS_SPACES(v_pripst_injury_comment) OR LENGTH(v_pripst_injury_comment) =0,'N/A',LTRIM(RTRIM(v_pripst_injury_comment)))\n\tDECODE(TRUE,\n\t\tv_pripst_injury_comment IS NULL OR IS_SPACES(v_pripst_injury_comment) OR LENGTH(v_pripst_injury_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_pripst_injury_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_pripst_injury_comment, 1, length(v_pripst_injury_comment) - ( FLOOR(v_extra_comments_length * prior_post_inj_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS pripst_injury_comment,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- \r\n\t-- ISNULL(v_liability_comment) OR IS_SPACES(v_liability_comment) OR LENGTH(v_liability_comment) =0, 'N/A', \r\n\t-- \r\n\t-- v_total_comments_length <= 7000,v_liability_comment,\r\n\t-- \r\n\t-- v_total_comments_length > 7000, \r\n\t-- SUBSTR(v_liability_comment, \r\n\t-- 1, \r\n\t-- length(v_liability_comment) - ( FLOOR(v_extra_comments_length * liab_comment_ratio))   - 35) || '...Rest of the comments removed...'\r\n\t-- )\r\n\t-- \r\n\t-- // if this comment length is less than 7000 then it is loaded as it it.\r\n\t-- // if the length is more than 7000, then it is trimmed based on this comment's total length and the ratio of this length to the total length of all comment fields. A custom text is added to the end..\r\n\t-- \r\n\t-- \r\n\t-- --old expression removed on 9/8 by shiva\r\n\t-- --IIF(ISNULL(v_liability_comment) OR IS_SPACES(v_liability_comment) OR LENGTH(v_liability_comment) =--0,'N/A',LTRIM(RTRIM(v_liability_comment)))\n\tDECODE(TRUE,\n\t\tv_liability_comment IS NULL OR IS_SPACES(v_liability_comment) OR LENGTH(v_liability_comment) = 0, 'N/A',\n\t\tv_total_comments_length <= 7000, v_liability_comment,\n\t\tv_total_comments_length > 7000, SUBSTR(v_liability_comment, 1, length(v_liability_comment) - ( FLOOR(v_extra_comments_length * liab_comment_ratio) ) - 35) || '...Rest of the comments removed...') AS liability_comment,\n\tEXP_VALIDATE.settlement_type_cd,\n\t-- *INF*: IIF(ISNULL(settlement_type_cd), 'N/A', settlement_type_cd)\n\tIFF(settlement_type_cd IS NULL, 'N/A', settlement_type_cd) AS SettlementTypeCode\n\tFROM EXP_VALIDATE\n\tLEFT JOIN LKP_ADJUSTOR_TAB_STAGE\n\tON LKP_ADJUSTOR_TAB_STAGE.caj_emp_client_id = EXP_VALIDATE.IN_prim_lit_handler\n\tLEFT JOIN LKP_CLM_CLT_RELATION_STAGE\n\tON LKP_CLM_CLT_RELATION_STAGE.cre_claim_nbr = EXP_VALIDATE.tch_claim_nbr AND LKP_CLM_CLT_RELATION_STAGE.cre_client_id = EXP_VALIDATE.IN_prim_lit_handler\n\tLEFT JOIN LKP_Prim_Lit_handler_ak_id\n\tON LKP_Prim_Lit_handler_ak_id.claim_party_key = EXP_VALIDATE.IN_prim_lit_handler\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_policy_limit_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_policy_limit_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_policy_limit_id.comment_item_nbr = IN_policy_limit_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_case_desc_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_case_desc_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_case_desc_id.comment_item_nbr = IN_case_desc_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_inj_dam_desc_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_inj_dam_desc_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_inj_dam_desc_id.comment_item_nbr = IN_inj_dam_desc_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_subro_cont_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_subro_cont_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_subro_cont_id.comment_item_nbr = IN_subro_cont_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pros_cmt_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pros_cmt_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pros_cmt_id.comment_item_nbr = IN_pros_cmt_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_cons_cmt_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_cons_cmt_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_cons_cmt_id.comment_item_nbr = IN_cons_cmt_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pripst_inj_desc_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pripst_inj_desc_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_pripst_inj_desc_id.comment_item_nbr = IN_pripst_inj_desc_id\n\n\tLEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_liab_cmt_id\n\tON LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_liab_cmt_id.folder_key = tch_claim_nbr\n\tAND LKP_CLM_COMMENTS_STAGE_tch_claim_nbr_IN_liab_cmt_id.comment_item_nbr = IN_liab_cmt_id\n\n),\nLKP_Claim_Case AS (\n\tSELECT\n\tclaim_case_id,\n\tclaim_case_ak_id,\n\tclaim_case_name,\n\tclaim_case_num,\n\tsuit_county,\n\tsuit_state,\n\ttrial_date,\n\tfirst_notice_law_suit_ind,\n\tdeclaratory_action_ind,\n\tsuit_status_code,\n\tsuit_denial_date,\n\tprim_litigation_handler_ak_id,\n\tprim_litigation_handler_role_code,\n\tsuit_open_date,\n\tsuit_close_date,\n\tsuit_how_claim_closed,\n\treins_reported_ind,\n\tcommercl_umb_reserve,\n\tsuit_pay_amt,\n\tDemand_at_initial_litigation,\n\tSettlementTypeCode,\n\tIN_CLAIM_CASE_KEY,\n\tclaim_case_key\n\tFROM (\n\t\tSELECT a.claim_case_id as claim_case_id, \r\n\t\ta.claim_case_ak_id as claim_case_ak_id, \r\n\t\ta.claim_case_name as claim_case_name, \r\n\t\ta.claim_case_num as claim_case_num, \r\n\t\ta.suit_county as suit_county, \r\n\t\ta.suit_state as suit_state, \r\n\t\ta.trial_date as trial_date, \r\n\t\ta.first_notice_law_suit_ind as first_notice_law_suit_ind, \r\n\t\ta.declaratory_action_ind as declaratory_action_ind, \r\n\t\ta.suit_status_code as suit_status_code, \r\n\t\ta.suit_denial_date as suit_denial_date, \r\n\t\ta.prim_litigation_handler_ak_id as prim_litigation_handler_ak_id, \r\n\t\ta.prim_litigation_handler_role_code as prim_litigation_handler_role_code, \r\n\t\ta.suit_open_date as suit_open_date, \r\n\t\ta.suit_close_date as suit_close_date, \r\n\t\ta.suit_how_claim_closed as suit_how_claim_closed, \r\n\t\ta.reins_reported_ind as reins_reported_ind, \r\n\t\ta.commercl_umb_reserve as commercl_umb_reserve, \r\n\t\ta.suit_pay_amt as suit_pay_amt, \r\n\t\ta.Demand_at_initial_litigation as Demand_at_initial_litigation, \r\n\t\ta.SettlementTypeCode as SettlementTypeCode,\r\n\t\ta.claim_case_key as claim_case_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case A\r\n\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_case_key ORDER BY claim_case_id DESC) = 1\n),\nEXP_DETECT_CHANGES AS (\n\tSELECT\n\tEXP_LKP_VALUES.CLAIM_CASE_KEY,\n\tEXP_LKP_VALUES.case_name,\n\tEXP_LKP_VALUES.case_number,\n\tEXP_LKP_VALUES.suit_venue,\n\tEXP_LKP_VALUES.suit_state,\n\tEXP_LKP_VALUES.trial_date,\n\tEXP_LKP_VALUES.first_not_law_suit,\n\tEXP_LKP_VALUES.declaratory_act,\n\tEXP_LKP_VALUES.suit_status,\n\tEXP_LKP_VALUES.denial_date,\n\tEXP_LKP_VALUES.Out_prim_lit_handler_ak_id AS Prim_lit_handler_ak_id,\n\tEXP_LKP_VALUES.prim_lit_handler_role_code,\n\tEXP_LKP_VALUES.litigation_date,\n\tEXP_LKP_VALUES.litigation_closed,\n\tEXP_LKP_VALUES.how_clm_closed,\n\tEXP_LKP_VALUES.reins_reported,\n\tEXP_LKP_VALUES.com_umb_res,\n\tEXP_LKP_VALUES.payment_amt,\n\tEXP_LKP_VALUES.demand_at_initial_litigation,\n\tLKP_Claim_Case.claim_case_id AS old_claim_case_id,\n\tLKP_Claim_Case.claim_case_ak_id AS old_claim_case_ak_id,\n\tLKP_Claim_Case.claim_case_name AS old_claim_case_name,\n\tLKP_Claim_Case.claim_case_num AS old_claim_case_num,\n\tLKP_Claim_Case.suit_county AS old_suit_county,\n\tLKP_Claim_Case.suit_state AS old_suit_state,\n\tLKP_Claim_Case.trial_date AS old_trial_date,\n\tLKP_Claim_Case.first_notice_law_suit_ind AS old_first_notice_law_suit_ind,\n\tLKP_Claim_Case.declaratory_action_ind AS old_declaratory_act,\n\tLKP_Claim_Case.suit_status_code AS old_suit_status_code,\n\tLKP_Claim_Case.suit_denial_date AS old_suit_denial_date,\n\tLKP_Claim_Case.prim_litigation_handler_ak_id AS old_prim_litigation_handler_ak_id,\n\tLKP_Claim_Case.prim_litigation_handler_role_code AS old_prim_litigation_handler_role_code,\n\tLKP_Claim_Case.suit_open_date AS old_suit_open_date,\n\tLKP_Claim_Case.suit_close_date AS old_suit_close_date,\n\tLKP_Claim_Case.suit_how_claim_closed AS old_suit_how_claim_closed,\n\tLKP_Claim_Case.reins_reported_ind AS old_reins_reported_ind,\n\tLKP_Claim_Case.commercl_umb_reserve AS old_commercl_umb_reserve,\n\tLKP_Claim_Case.suit_pay_amt AS old_suit_pay_amt,\n\tLKP_Claim_Case.Demand_at_initial_litigation AS old_Demand_at_initial_litigation,\n\tLKP_Claim_Case.SettlementTypeCode AS Old_SettlementTypeCode,\n\t-- *INF*: IIF(ISNULL(old_claim_case_id),'NEW',\r\n\t--      IIF(LTRIM(RTRIM(case_name)) <> LTRIM(RTRIM(old_claim_case_name)) OR \r\n\t-- \tLTRIM(RTRIM(case_number)) <> LTRIM(RTRIM(old_claim_case_num)) OR \r\n\t-- \tLTRIM(RTRIM(suit_venue)) <> LTRIM(RTRIM(old_suit_county)) OR \r\n\t-- \tLTRIM(RTRIM(suit_state)) <> LTRIM(RTRIM(old_suit_state)) OR \r\n\t-- \ttrial_date <> old_trial_date OR \r\n\t-- \tLTRIM(RTRIM(first_not_law_suit)) <> LTRIM(RTRIM(old_first_notice_law_suit_ind)) OR \r\n\t-- \tLTRIM(RTRIM(declaratory_act)) <> LTRIM(RTRIM(old_declaratory_act)) OR \r\n\t-- \tLTRIM(RTRIM(suit_status)) <> LTRIM(RTRIM(old_suit_status_code)) OR \r\n\t-- \tdenial_date <> old_suit_denial_date OR \r\n\t-- \tPrim_lit_handler_ak_id <> old_prim_litigation_handler_ak_id OR \r\n\t-- \tLTRIM(RTRIM(prim_lit_handler_role_code)) <> LTRIM(RTRIM(old_prim_litigation_handler_role_code)) OR \r\n\t-- \tlitigation_date <>old_suit_open_date OR \r\n\t-- \tlitigation_closed<> old_suit_close_date OR \r\n\t-- \tLTRIM(RTRIM(how_clm_closed)) <> LTRIM(RTRIM(old_suit_how_claim_closed)) OR \r\n\t-- \tLTRIM(RTRIM(reins_reported)) <> LTRIM(RTRIM(old_reins_reported_ind)) OR \r\n\t-- \tcom_umb_res<> old_commercl_umb_reserve OR \r\n\t-- \tpayment_amt <> old_suit_pay_amt OR\r\n\t--       demand_at_initial_litigation <> old_Demand_at_initial_litigation OR \r\n\t--       SettlementTypeCode <> Old_SettlementTypeCode,\r\n\t-- \t'UPDATE','NOCHANGE'))\r\n\t-- \n\tIFF(old_claim_case_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(case_name)) <> LTRIM(RTRIM(old_claim_case_name)) OR LTRIM(RTRIM(case_number)) <> LTRIM(RTRIM(old_claim_case_num)) OR LTRIM(RTRIM(suit_venue)) <> LTRIM(RTRIM(old_suit_county)) OR LTRIM(RTRIM(suit_state)) <> LTRIM(RTRIM(old_suit_state)) OR trial_date <> old_trial_date OR LTRIM(RTRIM(first_not_law_suit)) <> LTRIM(RTRIM(old_first_notice_law_suit_ind)) OR LTRIM(RTRIM(declaratory_act)) <> LTRIM(RTRIM(old_declaratory_act)) OR LTRIM(RTRIM(suit_status)) <> LTRIM(RTRIM(old_suit_status_code)) OR denial_date <> old_suit_denial_date OR Prim_lit_handler_ak_id <> old_prim_litigation_handler_ak_id OR LTRIM(RTRIM(prim_lit_handler_role_code)) <> LTRIM(RTRIM(old_prim_litigation_handler_role_code)) OR litigation_date <> old_suit_open_date OR litigation_closed <> old_suit_close_date OR LTRIM(RTRIM(how_clm_closed)) <> LTRIM(RTRIM(old_suit_how_claim_closed)) OR LTRIM(RTRIM(reins_reported)) <> LTRIM(RTRIM(old_reins_reported_ind)) OR com_umb_res <> old_commercl_umb_reserve OR payment_amt <> old_suit_pay_amt OR demand_at_initial_litigation <> old_Demand_at_initial_litigation OR SettlementTypeCode <> Old_SettlementTypeCode, 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: IIF(v_changed_flag='NEW',TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),SYSDATE)\n\tIFF(v_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:00','MM:DD:YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:00', 'MM:DD:YYYY HH24:MI:SS') AS default_date,\n\tEXP_LKP_VALUES.SettlementTypeCode\n\tFROM EXP_LKP_VALUES\n\tLEFT JOIN LKP_Claim_Case\n\tON LKP_Claim_Case.claim_case_key = EXP_LKP_VALUES.CLAIM_CASE_KEY\n),\nFIL_INSERT AS (\n\tSELECT\n\told_claim_case_ak_id, \n\tCLAIM_CASE_KEY, \n\tcase_name, \n\tcase_number, \n\tsuit_venue, \n\tsuit_state, \n\ttrial_date, \n\tfirst_not_law_suit, \n\tdeclaratory_act, \n\tsuit_status, \n\tdenial_date, \n\tPrim_lit_handler_ak_id AS IN_prim_lit_handler_ak_id, \n\tprim_lit_handler_role_code, \n\tlitigation_date, \n\tlitigation_closed, \n\thow_clm_closed, \n\treins_reported, \n\tcom_umb_res, \n\tpayment_amt, \n\tdemand_at_initial_litigation, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tdefault_date, \n\tSettlementTypeCode\n\tFROM EXP_DETECT_CHANGES\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nSEQ_Claim_Case_AK_ID AS (\n\tCREATE SEQUENCE SEQ_Claim_Case_AK_ID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\told_claim_case_ak_id,\n\t-- *INF*: IIF(changed_flag ='NEW',NEXTVAL,old_claim_case_ak_id)\n\tIFF(changed_flag = 'NEW', NEXTVAL, old_claim_case_ak_id) AS claim_case_ak_id,\n\tCLAIM_CASE_KEY,\n\tcase_name,\n\tcase_number,\n\tsuit_venue,\n\tsuit_state,\n\ttrial_date,\n\tpol_lim_comment,\n\tclaim_case_comment,\n\tinjury_dam_comment,\n\tsubrogation_contri_comment,\n\tfirst_not_law_suit,\n\tdeclaratory_act,\n\tsuit_status,\n\tdenial_date,\n\tIN_prim_lit_handler_ak_id,\n\tprim_lit_handler_role_code,\n\tlitigation_date,\n\tlitigation_closed,\n\thow_clm_closed,\n\treins_reported,\n\tpros_comment,\n\tcons_comment,\n\tpripst_injury_comment,\n\tliability_comment,\n\tcom_umb_res,\n\tpayment_amt,\n\tdemand_at_initial_litigation,\n\tchanged_flag,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tdefault_date,\n\tSEQ_Claim_Case_AK_ID.NEXTVAL,\n\tSettlementTypeCode\n\tFROM FIL_INSERT\n),\nclaim_case AS (\n\tINSERT INTO claim_case\n\t(claim_case_ak_id, prim_litigation_handler_ak_id, claim_case_key, claim_case_name, claim_case_num, suit_county, suit_state, trial_date, first_notice_law_suit_ind, declaratory_action_ind, suit_status_code, suit_denial_date, prim_litigation_handler_role_code, suit_open_date, suit_close_date, suit_how_claim_closed, reins_reported_ind, commercl_umb_reserve, suit_pay_amt, arbitration_open_date, arbitration_close_date, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, demand_at_initial_litigation, SettlementTypeCode)\n\tSELECT \n\tCLAIM_CASE_AK_ID, \n\tIN_prim_lit_handler_ak_id AS PRIM_LITIGATION_HANDLER_AK_ID, \n\tCLAIM_CASE_KEY AS CLAIM_CASE_KEY, \n\tcase_name AS CLAIM_CASE_NAME, \n\tcase_number AS CLAIM_CASE_NUM, \n\tsuit_venue AS SUIT_COUNTY, \n\tSUIT_STATE, \n\tTRIAL_DATE, \n\tfirst_not_law_suit AS FIRST_NOTICE_LAW_SUIT_IND, \n\tdeclaratory_act AS DECLARATORY_ACTION_IND, \n\tsuit_status AS SUIT_STATUS_CODE, \n\tdenial_date AS SUIT_DENIAL_DATE, \n\tprim_lit_handler_role_code AS PRIM_LITIGATION_HANDLER_ROLE_CODE, \n\tlitigation_date AS SUIT_OPEN_DATE, \n\tlitigation_closed AS SUIT_CLOSE_DATE, \n\thow_clm_closed AS SUIT_HOW_CLAIM_CLOSED, \n\treins_reported AS REINS_REPORTED_IND, \n\tcom_umb_res AS COMMERCL_UMB_RESERVE, \n\tpayment_amt AS SUIT_PAY_AMT, \n\tdefault_date AS ARBITRATION_OPEN_DATE, \n\tdefault_date AS ARBITRATION_CLOSE_DATE, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tDEMAND_AT_INITIAL_LITIGATION, \n\tSETTLEMENTTYPECODE\n\tFROM EXP_Determine_AK\n),\nSQ_claim_case AS (\n\tSELECT \r\n\ta.claim_case_id, \r\n\ta.claim_case_key,\r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case a\r\n\tWHERE \r\n\ta.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND\r\n\tEXISTS(SELECT 1 \r\n\t                 FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case b\r\n\t                 WHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and crrnt_snpsht_flag = 1\r\n\t                 AND a.claim_case_key = b.claim_case_key\r\n\t \t           GROUP BY b.claim_case_key\r\n\t                 HAVING COUNT(*) >1) \r\n\tORDER BY a.claim_case_key, a.eff_from_date DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_case_id,\n\tclaim_case_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,claim_case_key=v_prev_row_claim_case_key,ADD_TO_DATE(v_prev_row_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\t\tclaim_case_key = v_prev_row_claim_case_key, ADD_TO_DATE(v_prev_row_eff_from_date, 'SS', - 1),\n\t\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tclaim_case_key AS v_prev_row_claim_case_key,\n\teff_from_date AS v_prev_row_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_claim_case\n),\nFIL_Firstrow_INAKIDGROUP AS (\n\tSELECT\n\tclaim_case_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <>eff_to_date\n),\nUPD_CLAIM_CASE AS (\n\tSELECT\n\tclaim_case_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_Firstrow_INAKIDGROUP\n),\nclaim_case_crrnt_snpsht_flag AS (\n\tMERGE INTO claim_case AS T\n\tUSING UPD_CLAIM_CASE AS S\n\tON T.claim_case_id = S.claim_case_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "STAGING_DATABASE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}