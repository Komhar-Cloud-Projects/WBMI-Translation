{
    "name": "m_CLM_DW_LOAD_sup_claim_pms_loss_disability",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_claim_pms_loss_disability",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_gtam_tc26_stage AS (\n\tSELECT\n\t\ttc26_stage_id,\n\t\ttable_fld,\n\t\tkey_len,\n\t\tlocation,\n\t\tmaster_company_number,\n\t\tline_of_business,\n\t\tloss_disability_code,\n\t\tdata_len,\n\t\tloss_disability_code_element,\n\t\tloss_disability_literal,\n\t\textract_date,\n\t\tas_of_date,\n\t\trecord_count,\n\t\tsource_system_id\n\tFROM gtam_tc26_stage\n),\nEXP_Default_Values AS (\n\tSELECT\n\tloss_disability_code,\n\t-- *INF*: IIF(ISNULL(loss_disability_code), 'N/A', loss_disability_code)\n\tIFF(loss_disability_code IS NULL, 'N/A', loss_disability_code) AS loss_disability_code_OUT,\n\tloss_disability_literal,\n\t-- *INF*: IIF(ISNULL(loss_disability_literal), 'N/A', loss_disability_literal)\n\tIFF(loss_disability_literal IS NULL, 'N/A', loss_disability_literal) AS loss_disability_literal_OUT\n\tFROM SQ_gtam_tc26_stage\n),\nLKP_sup_claim_pms_loss_disability AS (\n\tSELECT\n\tIN_loss_disability_code,\n\tsup_claim_pms_loss_disability_id,\n\tloss_disability_code,\n\tloss_disability_descript\n\tFROM (\n\t\tSELECT sup_claim_pms_loss_disability.sup_claim_pms_loss_disability_id as sup_claim_pms_loss_disability_id, sup_claim_pms_loss_disability.loss_disability_descript as loss_disability_descript, sup_claim_pms_loss_disability.crrnt_snpsht_flag as crrnt_snpsht_flag, sup_claim_pms_loss_disability.audit_id as audit_id, sup_claim_pms_loss_disability.eff_from_date as eff_from_date, sup_claim_pms_loss_disability.eff_to_date as eff_to_date, sup_claim_pms_loss_disability.source_sys_id as source_sys_id, sup_claim_pms_loss_disability.created_date as created_date, sup_claim_pms_loss_disability.modified_date as modified_date, sup_claim_pms_loss_disability.loss_disability_code as loss_disability_code FROM sup_claim_pms_loss_disability where crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY loss_disability_code ORDER BY IN_loss_disability_code) = 1\n),\nEXP_detect_changes AS (\n\tSELECT\n\tLKP_sup_claim_pms_loss_disability.sup_claim_pms_loss_disability_id AS old_sup_claim_pms_loss_disability_id,\n\tLKP_sup_claim_pms_loss_disability.loss_disability_descript AS old_loss_disability_descript,\n\tEXP_Default_Values.loss_disability_code_OUT,\n\tEXP_Default_Values.loss_disability_literal_OUT,\n\t-- *INF*: IIF(ISNULL(old_sup_claim_pms_loss_disability_id), 'NEW', IIF(old_loss_disability_descript!= loss_disability_literal_OUT, 'UPDATE', 'NOCHANGE'))\r\n\t-- \n\tIFF(old_sup_claim_pms_loss_disability_id IS NULL, 'NEW', IFF(old_loss_disability_descript != loss_disability_literal_OUT, 'UPDATE', 'NOCHANGE')) AS v_CHANGED_FLAG,\n\tv_CHANGED_FLAG AS CHANGED_FLAG,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_CHANGED_FLAG='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_CHANGED_FLAG = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id\n\tFROM EXP_Default_Values\n\tLEFT JOIN LKP_sup_claim_pms_loss_disability\n\tON LKP_sup_claim_pms_loss_disability.loss_disability_code = EXP_Default_Values.loss_disability_code_OUT\n),\nFIL_sup_insurance_line_insert AS (\n\tSELECT\n\tloss_disability_code_OUT, \n\tloss_disability_literal_OUT, \n\tCHANGED_FLAG, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tcreated_date, \n\tmodified_date, \n\tsource_sys_id\n\tFROM EXP_detect_changes\n\tWHERE CHANGED_FLAG = 'NEW' or CHANGED_FLAG = 'UPDATE'\n),\nsup_claim_pms_loss_disability_insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_pms_loss_disability\n\t(loss_disability_code, loss_disability_descript, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tloss_disability_code_OUT AS LOSS_DISABILITY_CODE, \n\tloss_disability_literal_OUT AS LOSS_DISABILITY_DESCRIPT, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM FIL_sup_insurance_line_insert\n),\nSQ_sup_claim_pms_loss_disability AS (\n\tSELECT a.sup_claim_pms_loss_disability_id, a.loss_disability_code, a.eff_from_date, a.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_pms_loss_disability a\r\n\t\r\n\tWHERE EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_pms_loss_disability  b\r\n\t\t\tWHERE source_sys_id= '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.loss_disability_code = b.loss_disability_code \r\n\t\t\tGROUP BY loss_disability_code \r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY loss_disability_code , eff_from_date  DESC\r\n\t\r\n\t--EXISTS Subquery exists to pick AK Groups that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag and all columns of the AK\r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\r\n\t\r\n\t--ORDER BY of main query orders all rows first by the AK and then by the eff_from_date in a DESC format\r\n\t--the descending order is important because this allows us to avoid another lookup and properly apply the eff_to_date by utilizing a local variable to keep track\n),\nEXP_lag_eff_from_date AS (\n\tSELECT\n\tsup_claim_pms_loss_disability_id,\n\tloss_disability_code,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tloss_disability_code = v_Prev_row_loss_disability_code, ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\r\n\t-- \t\n\tDECODE(TRUE,\n\tloss_disability_code = v_Prev_row_loss_disability_code, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tloss_disability_code AS v_Prev_row_loss_disability_code,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_sup_claim_pms_loss_disability\n),\nFIL_First_rown_inAKGroup AS (\n\tSELECT\n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_lag_eff_from_date\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_sup_insurance_line AS (\n\tSELECT\n\tsup_risk_unit_grp_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_First_rown_inAKGroup\n),\nsup_claim_pms_loss_disability_update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_claim_pms_loss_disability AS T\n\tUSING UPD_sup_insurance_line AS S\n\tON T.sup_claim_pms_loss_disability_id = S.sup_risk_unit_grp_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246507"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905524"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604418"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:23:26"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:28:04"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED AND PMS"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}