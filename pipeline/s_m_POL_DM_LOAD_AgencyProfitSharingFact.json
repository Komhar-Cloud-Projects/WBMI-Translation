{
    "name": "s_m_POL_DM_LOAD_AgencyProfitSharingFact",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DM_LOAD_AgencyProfitSharingFact",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_V3_AgencyDimID AS (\n\tSELECT\n\tagency_dim_id,\n\tedw_agency_ak_id,\n\teff_from_date,\n\teff_to_date\n\tFROM (\n\t\tSELECT AgencyDim.AgencyDimID as agency_dim_id, AgencyDim.EDWAgencyAKID as edw_agency_ak_id, AgencyDim.EffectiveDate as eff_from_date, AgencyDim.ExpirationDate as eff_to_date\r\n\t\t FROM V3.AgencyDim as AgencyDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY edw_agency_ak_id,eff_from_date,eff_to_date ORDER BY agency_dim_id DESC) = 1\n),\nLKP_SalesDivisionDim AS (\n\tSELECT\n\tSalesDivisionDimID,\n\tAgencyCode\n\tFROM (\n\t\tSelect A.AgencyCode AS AgencyCode, \r\n\t\tSDD.SalesDivisionDimID AS SalesDivisionDimID\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency A,\r\n\t\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RegionalSalesManager RSM,\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.SalesDivisionDim SDD\r\n\t\tWHERE A.CurrentSnapshotFlag =1\r\n\t\tAND RSM.RegionalSalesManagerAKID = A.RegionalSalesManagerAKID\r\n\t\tAND RSM.CurrentSnapshotFlag = 1\r\n\t\tAND RSM.SalesDirectorAKID = SDD.EDWSalesDirectorAKID\r\n\t\tAND A.SalesTerritoryAKID = SDD.EDWSalesTerritoryAKID\r\n\t\tAND RSM.RegionalSalesManagerAKID = SDD.EDWRegionalSalesManagerAKID\r\n\t\tAND SDD.CurrentSnapshotFlag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode ORDER BY SalesDivisionDimID DESC) = 1\n),\nLKP_V3_AgencyDimID_Group AS (\n\tSELECT\n\tagency_dim_id,\n\tAgencyCode,\n\teff_from_date,\n\teff_to_date\n\tFROM (\n\t\tSELECT AgencyDim.AgencyDimID as agency_dim_id, AgencyDim.AgencyCode as AgencyCode, AgencyDim.EffectiveDate as eff_from_date, AgencyDim.ExpirationDate as eff_to_date\r\n\t\t FROM V3.AgencyDim as AgencyDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode,eff_from_date,eff_to_date ORDER BY agency_dim_id DESC) = 1\n),\nLKP_SupProftSharingBonus AS (\n\tSELECT\n\tProfitSharingBonusRate,\n\tDirectWrittenPremiumLow,\n\tDirectWrittenPremiumHigh,\n\tLossRatioLow,\n\tLossRatioHigh\n\tFROM (\n\t\tSELECT \n\t\t\tProfitSharingBonusRate,\n\t\t\tDirectWrittenPremiumLow,\n\t\t\tDirectWrittenPremiumHigh,\n\t\t\tLossRatioLow,\n\t\t\tLossRatioHigh\n\t\tFROM @{pipeline().parameters.EDW_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.SupProftSharingBonus\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY DirectWrittenPremiumLow,DirectWrittenPremiumHigh,LossRatioLow,LossRatioHigh ORDER BY ProfitSharingBonusRate DESC) = 1\n),\nLKP_AgencyBonusRates AS (\n),\nSQ_EarnedPremiumTransactionMonthlyFact AS (\n\tDECLARE @DATEEPSTART as datetime,\r\n\t\t                @DATEEPEND as datetime\r\n\t\r\n\tSET @DATEEPSTART =dateadd(yy,DATEDIFF(MM,0,dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))/12-@{pipeline().parameters.NO_OF_YEARS},0)\r\n\tSET @DATEEPEND=dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))\r\n\t\r\n\tSELECT\r\n\tA.EDWAgencyAKID,\r\n\tA.AgencyCode,\r\n\tmax(CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   ard.LegalPrimaryAgencyCode end) as LegalPrimaryAgencyCode,\r\n\tSUM(case when ird.PolicyOfferingCode='600' then MonthlyChangeinDirectEarnedPremium else 0 end)  as BondsDirectEarnedPremium,\r\n\tSUM(case when ird.StrategicProfitCenterCode='3' and ird.PolicyOfferingCode<>'600' then MonthlyChangeinDirectEarnedPremium else 0 end)  as NSIEarnedPremium,\r\n\tsum(case when PolicyOfferingCode in ('600') \r\n\tOR ird.InsuranceSegmentCode = '3'\r\n\tOR (ircd.CoverageGroupCode in ('BOILER','CYBERSEC','DATACOMP','CYBERSUITE') \r\n\tOR ircd.CoverageGroupCode like '%TRIA' \r\n\tOR ircd.CoverageGroupDescription in ('MCCA Surcharge'))\r\n\tOR ird.InsuranceReferenceLineofBusinessCode in ('350','311','590','812','890','900')\r\n\tOR (ird.RatingPlanAbbreviation in ('LRARO','Retro'))\r\n\tOR apd.asl_prdct_code in ('200', '220')\r\n\tOR (ird.StrategicProfitCentercode <> '5' and cdd.ISOClassCode='0174')\r\n\tthen 0 else MonthlyChangeinDirectEarnedPremium end)  as ProfitSharingEligibleDirectEarnedPremium\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.EarnedPremiumTransactionMonthlyFact mf\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim IRD on MF.InsuranceReferenceDimID = IRD.InsuranceReferenceDimID\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim ircd on MF.InsuranceReferenceCoverageDimID = IRCD.InsuranceReferenceCoverageDimID\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailDim cdd on  MF.CoverageDetailDimID = CDD.CoverageDetailDimID\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.ASL_Product_code_Dim apd on MF.AnnualStatementLineProductCodeDimID = APD.asl_prdct_code_dim_id\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim cld on PremiumTransactionRunDateID=cld.clndr_id\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A ON MF.AgencyDimId=A.AgencyDimId \r\n\t\r\n\tleft join (select * from  @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\t on (A.edwagencyakid=ard.edwagencyakid and cld.clndr_date between ARD.agencyrelationshipeffectivedate and ARD.agencyrelationshipexpirationdate)\r\n\t\r\n\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P\r\n\ton mf.PolicyDimID=p.pol_dim_id\r\n\twhere cld.clndr_date between @DATEEPSTART and @DATEEPEND\r\n\t@{pipeline().parameters.WHERECLAUSEEARNEDPREMIUM}\r\n\tgroup by A.EDWAgencyAKID,\r\n\tA.AgencyCode\r\n\t--CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   --ard.LegalPrimaryAgencyCode end\r\n\t\r\n\t\r\n\t/*Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from \"AgencyRelationshipDim\" table*/\n),\nEXP_GetValues_EarnedPremium AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tBondsDirectEarnedPremium,\n\tNSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium\n\tFROM SQ_EarnedPremiumTransactionMonthlyFact\n),\nSQ_loss_master_fact AS (\n\tDECLARE @DATELMSTART_ONE AS DATETIME\r\n\t\t,@DATELMSTART_TWO AS DATETIME\r\n\t\t,@DATELMEND AS DATETIME\r\n\t\r\n\tSET @DATELMSTART_ONE = dateadd(yy, DATEDIFF(MM, 0, dateadd(SS, - 1, dateadd(mm, DATEDIFF(MM, 0, GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS}, 0))) / 12 - @{pipeline().parameters.NO_OF_YEARS}, 0)\r\n\tSET @DATELMSTART_TWO = dateadd(yy, DATEDIFF(MM, 0, dateadd(SS, - 1, dateadd(mm, DATEDIFF(MM, 0, GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS}, 0))) / 12 - 1 - @{pipeline().parameters.NO_OF_YEARS}, 0)\r\n\tSET @DATELMEND = dateadd(SS, - 1, dateadd(mm, DATEDIFF(MM, 0, GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS}, 0))\r\n\t\r\n\tSELECT EDWAgencyAKID\r\n\t\t,AgencyCode,\r\n\tmax(LegalPrimaryAgencyCode)  LegalPrimaryAgencyCode\r\n\t\t,sum(CASE \r\n\t\t\t\tWHEN PolicyOfferingCode = '600'\r\n\t\t\t\t\tTHEN CASE \r\n\t\t\t\t\t\t\tWHEN claim_rpted_date <= '2013-12-31 00:00:00'\r\n\t\t\t\t\t\t\t\tTHEN (DirectLossPaidIR + DirectLossOutstandingIR + DirectALAEPaidIR)\r\n\t\t\t\t\t\t\tELSE (DirectLossPaidIR + DirectLossOutstandingIR + DirectALAEPaidIR + DirectALAEOutstandingIR)\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\tELSE 0\r\n\t\t\t\tEND) BondsDirectIncurredLoss\r\n\t\t,SUM(CASE \r\n\t\t\t\tWHEN PolicyOfferingCode = '600' AND RunDate >= @DATELMSTART_ONE\r\n\t\t\t\t\tTHEN CASE \r\n\t\t\t\t\t\t\tWHEN claim_rpted_date <= '2013-12-31 00:00:00'\r\n\t\t\t\t\t\t\t\tTHEN (DirectLossPaidIR + DirectLossOutstandingIR + DirectALAEPaidIR)\r\n\t\t\t\t\t\t\tELSE (DirectLossPaidIR + DirectLossOutstandingIR + DirectALAEPaidIR + DirectALAEOutstandingIR)\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\tELSE 0\r\n\t\t\t\tEND) BondsDirectIncurredLossSameYear\r\n\t\t,SUM(CASE \r\n\t\t\t\tWHEN RunDate < @DATELMSTART_ONE\r\n\t\t\t\t\tOR PolicyOfferingCode in ('600')\r\n\tOR InsuranceSegmentCode = '3'\r\n\tOR (CoverageGroupCode in ('BOILER','CYBERSEC','DATACOMP','CYBERSUITE')\r\n\tOR CoverageGroupCode like '%TRIA'\r\n\tOR CoverageGroupDescription in ('MCCA Surcharge'))\r\n\tOR InsuranceReferenceLineofBusinessCode in ('350','311','590','812','890','900')\r\n\tOR (RatingPlanAbbreviation in ('LRARO','Retro'))\r\n\tOR asl_prdct_code in ('200', '220')\r\n\tOR (StrategicProfitCentercode <> '5' and ISOClassCode='0174')\r\n\tthen 0\t\t\tELSE (\r\n\t\t\t\t\t\tCASE \r\n\t\t\t\t\t\t\tWHEN claim_rpted_date <= '2013-12-31 00:00:00'\r\n\t\t\t\t\t\t\t\tTHEN (DirectLossPaidIR + DirectLossOutstandingER + DirectALAEPaidIR)\r\n\t\t\t\t\t\t\tELSE (DirectLossPaidIR + DirectLossOutstandingER + DirectALAEPaidIR + DirectALAEOutstandingER)\r\n\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t)\r\n\t\t\t\tEND) ProfitSharingEligibleDirectIncurredLoss ----Added new column to the query as the Profit Sharing loss should not include recoveries for Reserves.\r\n\t\r\n\tFROM (\r\n\t\tSELECT A.EDWAgencyAKID\r\n\t\t\t,A.AgencyCode\r\n\t\t\t,(\r\n\t\t\tCASE \r\n\t\t\t\tWHEN ard.LegalPrimaryAgencyCode IS NULL\r\n\t\t\t\t\tTHEN a.agencycode\r\n\t\t\t\tELSE ard.LegalPrimaryAgencyCode\r\n\t\t\t\tEND\r\n\t\t\t) AS LegalPrimaryAgencyCode,\r\n\t\t\tA.CurrentSnapshotFlag\r\n\t\t\t,POL.edw_pol_ak_id\r\n\t\t\t,OCC.edw_claim_occurrence_ak_id\r\n\t\t\t,CLTF.direct_loss_paid_including_recoveries DirectLossPaidIR\r\n\t\t\t,CLTF.direct_alae_paid_including_recoveries DirectALAEPaidIR\r\n\t\t\t,0.0 AS DirectLossOutstandingIR\r\n\t\t\t,0.0 AS DirectALAEOutstandingIR\r\n\t\t\t,0.0 AS DirectLossOutstandingER --Added new column to the query as the Profit Sharing loss should not include recoveries for Reserves.\r\n\t\t\t,0.0 AS DirectALAEOutstandingER --Added new column to the query as the Profit Sharing loss should not include recoveries for Reserves.\r\n\t\t\t,OCC.claim_rpted_date\r\n\t\t\t,CD.clndr_date AS RunDate\r\n\t\t\t,IRD.PolicyOfferingCode\r\n\t\t\t,ird.StrategicProfitCentercode\r\n\t\t\t,ird.InsuranceSegmentCode\r\n\t\t\t,ircd.CoverageGroupCode\r\n\t\t\t,ircd.CoverageGroupDescription\r\n\t\t\t,ird.InsuranceReferenceLineofBusinessCode\r\n\t\t\t,cdd.ISOClassCode\r\n\t\t\t,ird.RatingPlanAbbreviation\r\n\t\t\t,apd.asl_prdct_code\r\n\t\t\t,ircd.PmsMajorPerilCode\r\n\t\t\t,ircd.PmsRiskUnitGroupDescription\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_loss_transaction_fact CLTF\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD\r\n\t\t\tON CLTF.claim_trans_date_id = CD.clndr_id\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim OCC\r\n\t\t\tON CLTF.claim_occurrence_dim_id = OCC.claim_occurrence_dim_id\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A\r\n\t\t\tON CLTF.AgencyDimId = A.AgencyDimID\r\n\t\t\t\r\n\t\t\tleft join (select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\ton (a.edwagencyakid=ard.edwagencyakid and CD.clndr_date between agencyrelationshipeffectivedate and agencyrelationshipexpirationdate)\r\n\t\r\n\t\t\t\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim POL\r\n\t\t\tON CLTF.pol_dim_id = POL.pol_dim_id\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim ird\r\n\t\t\tON CLTF.InsuranceReferenceDimId = ird.InsuranceReferenceDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim ircd\r\n\t\t\tON CLTF.InsuranceReferenceCoverageDimId = ircd.InsuranceReferenceCoverageDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailDim cdd\r\n\t\t\tON CLTF.CoverageDetailDimId = cdd.CoverageDetailDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_product_code_dim apd\r\n\t\t\tON CLTF.asl_prdct_code_dim_id = apd.asl_prdct_code_dim_id\r\n\t\tWHERE clndr_date < '01/01/2001 00:00:00'\r\n\t\t\r\n\t\tUNION ALL\r\n\t\t\r\n\t\tSELECT A.EDWAgencyAKID\r\n\t\t\t,A.AgencyCode\r\n\t\t\t,(\r\n\t\t\tCASE \r\n\t\t\t\tWHEN ard.LegalPrimaryAgencyCode IS NULL\r\n\t\t\t\t\tTHEN a.agencycode\r\n\t\t\t\tELSE ard.LegalPrimaryAgencyCode\r\n\t\t\t\tEND\r\n\t\t\t) AS LegalPrimaryAgencyCode\r\n\t\t\t,A.CurrentSnapshotFlag\r\n\t\t\t,POL.edw_pol_ak_id\r\n\t\t\t,OCC.edw_claim_occurrence_ak_id\r\n\t\t\t,VLMF.DirectLossPaidIR\r\n\t\t\t,VLMF.DirectALAEPaidIR\r\n\t\t\t,VLMF.DirectLossOutstandingIR\r\n\t\t\t,VLMF.DirectALAEOutstandingIR\r\n\t\t\t,VLMF.DirectLossOutstandingER --Added new column to the query as the Profit Sharing loss should not include recoveries for Reserves.\r\n\t\t\t,VLMF.DirectALAEOutstandingER --Added new column to the query as the Profit Sharing loss should not include recoveries for Reserves.\r\n\t\t\t,OCC.claim_rpted_date\r\n\t\t\t,CD.clndr_date AS RunDate\r\n\t\t\t,IRD.PolicyOfferingCode\r\n\t\t\t,ird.StrategicProfitCentercode\r\n\t\t\t,ird.InsuranceSegmentCode\r\n\t\t\t,ircd.CoverageGroupCode\r\n\t\t\t,ircd.CoverageGroupDescription\r\n\t\t\t,ird.InsuranceReferenceLineofBusinessCode\r\n\t\t\t,cdd.ISOClassCode\r\n\t\t\t,ird.RatingPlanAbbreviation\r\n\t\t\t,apd.asl_prdct_code\r\n\t\t\t,ircd.PmsMajorPerilCode\r\n\t\t\t,ircd.PmsRiskUnitGroupDescription\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.vwLossMasterFact VLMF\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim CD\r\n\t\t\tON VLMF.loss_master_run_date_id = CD.clndr_id\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.claim_occurrence_dim OCC\r\n\t\t\tON VLMF.claim_occurrence_dim_id = OCC.claim_occurrence_dim_id\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A\r\n\t\t\tON VLMF.AgencyDimId = A.AgencyDimID\r\n\t\t\t\r\n\t\t\tleft join (select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\ton (a.edwagencyakid=ard.edwagencyakid and CD.clndr_date between ard.agencyrelationshipeffectivedate and ard.agencyrelationshipexpirationdate)\r\n\t\t\t\r\n\t\t\t\r\n\t\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim POL\r\n\t\t\tON VLMF.pol_dim_id = POL.pol_dim_id\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim ird\r\n\t\t\tON VLMF.InsuranceReferenceDimId = ird.InsuranceReferenceDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim ircd\r\n\t\t\tON VLMF.InsuranceReferenceCoverageDimId = ircd.InsuranceReferenceCoverageDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailDim cdd\r\n\t\t\tON VLMF.CoverageDetailDimId = cdd.CoverageDetailDimId\r\n\t\tLEFT OUTER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.asl_product_code_dim apd\r\n\t\t\tON VLMF.asl_prdct_code_dim_id = apd.asl_prdct_code_dim_id\r\n\t\tWHERE clndr_date >= '01/01/2001 00:00:00'\r\n\t\t) A\r\n\tWHERE RunDate BETWEEN @DATELMSTART_TWO\r\n\t\t\tAND @DATELMEND @{pipeline().parameters.WHERECLAUSELOSS}\r\n\tGROUP BY EDWAgencyAKID\r\n\t\t,AgencyCode\r\n\t--LegalPrimaryAgencyCode \r\n\t\r\n\t\r\n\t/*Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from \"AgencyRelationshipDim\" table*/\n),\nEXP_GetValues_Loss AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tDirectLossPaidExcludingRecoveries AS BondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear,\n\tDirectLossOutstandingExcludingRecoveries AS ProfitSharingEligibleDirectIncurredLoss\n\tFROM SQ_loss_master_fact\n),\nJNR_Earned_Loss AS (SELECT\n\tEXP_GetValues_EarnedPremium.EDWAgencyAKID, \n\tEXP_GetValues_EarnedPremium.AgencyCode, \n\tEXP_GetValues_EarnedPremium.LegalPrimaryAgencyCode, \n\tEXP_GetValues_EarnedPremium.BondsDirectEarnedPremium, \n\tEXP_GetValues_EarnedPremium.NSIEarnedPremium, \n\tEXP_GetValues_EarnedPremium.ProfitSharingEligibleDirectEarnedPremium, \n\tEXP_GetValues_Loss.EDWAgencyAKID AS EDWAgencyAKID1, \n\tEXP_GetValues_Loss.AgencyCode AS AgencyCode1, \n\tEXP_GetValues_Loss.LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode1, \n\tEXP_GetValues_Loss.BondsDirectIncurredLoss, \n\tEXP_GetValues_Loss.BondsDirectIncurredLossSameYear, \n\tEXP_GetValues_Loss.ProfitSharingEligibleDirectIncurredLoss\n\tFROM EXP_GetValues_EarnedPremium\n\tFULL OUTER JOIN EXP_GetValues_Loss\n\tON EXP_GetValues_Loss.EDWAgencyAKID = EXP_GetValues_EarnedPremium.EDWAgencyAKID\n),\nEXP_DefaultHandle AS (\n\tSELECT\n\tBondsDirectEarnedPremium,\n\tNSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium,\n\tBondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear,\n\tProfitSharingEligibleDirectIncurredLoss,\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tEDWAgencyAKID1,\n\tAgencyCode1,\n\tLegalPrimaryAgencyCode1,\n\t-- *INF*: IIF(ISNULL(EDWAgencyAKID),EDWAgencyAKID1,EDWAgencyAKID)\n\tIFF(EDWAgencyAKID IS NULL,\n\t\tEDWAgencyAKID1,\n\t\tEDWAgencyAKID\n\t) AS o_EDWAgencyAKID,\n\t-- *INF*: IIF(ISNULL(AgencyCode),AgencyCode1,AgencyCode)\n\tIFF(AgencyCode IS NULL,\n\t\tAgencyCode1,\n\t\tAgencyCode\n\t) AS o_AgencyCode,\n\t-- *INF*: IIF(ISNULL(LegalPrimaryAgencyCode),LegalPrimaryAgencyCode1,LegalPrimaryAgencyCode)\n\tIFF(LegalPrimaryAgencyCode IS NULL,\n\t\tLegalPrimaryAgencyCode1,\n\t\tLegalPrimaryAgencyCode\n\t) AS o_LegalPrimaryAgencyCode\n\tFROM JNR_Earned_Loss\n),\nSQ_PremiumMasterFact AS (\n\tDECLARE @DATEPMSTART as datetime,\r\n\t\t                @DATEPMEND as datetime\r\n\t\r\n\tSET @DATEPMSTART =dateadd(yy,DATEDIFF(MM,0,dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))/12-@{pipeline().parameters.NO_OF_YEARS},0)\r\n\tSET @DATEPMEND =dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))\r\n\t\r\n\tSELECT\r\n\tA.EDWAgencyAKID,\r\n\tA.AgencyCode,\r\n\tmax(CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   ard.LegalPrimaryAgencyCode end) as LegalPrimaryAgencyCode,\r\n\tSUM(case when ird.PolicyOfferingCode='600' then PremiumMasterDirectWrittenPremium else 0 end) as BondsDirectWrittenPremium,\r\n\tSUM(case when ird.StrategicProfitCenterCode='3' and ird.PolicyOfferingCode<>'600' then PremiumMasterDirectWrittenPremium else 0 end) as NSIDirectWrittenPremium,\r\n\tsum(case when PolicyOfferingCode in ('600') \r\n\tOR ird.InsuranceSegmentCode = '3'\r\n\tOR (ircd.CoverageGroupCode in ('BOILER','CYBERSEC','DATACOMP','CYBERSUITE') \r\n\tOR ircd.CoverageGroupCode like '%TRIA' \r\n\tOR ircd.CoverageGroupDescription in ('MCCA Surcharge'))\r\n\tOR ird.InsuranceReferenceLineofBusinessCode in ('350','311','590','812','890','900')\r\n\tOR (ird.RatingPlanAbbreviation in ('LRARO','Retro'))\r\n\tOR apd.asl_prdct_code in ('200', '220')\r\n\tOR (ird.StrategicProfitCentercode <> '5' and cdd.ISOClassCode='0174')\r\n\tthen 0\r\n\tELSE case when PTT.ReasonAmendedCode @{pipeline().parameters.REASON_AMENDED_CODE} and PTT.PremiumTypeCode='D' \r\n\tthen pmf.PremiumMasterDirectWrittenPremium+pmf.PremiumMasterPremium else pmf.PremiumMasterDirectWrittenPremium end end)  as ProfitSharingEligibleDirectWrittenPremium,\r\n\tsum(case when PTT.ReasonAmendedCode @{pipeline().parameters.REASON_AMENDED_CODE} and PTT.PremiumTypeCode='D' and not(PolicyOfferingCode in ('600') or \r\n\t InsuranceReferenceLineOfBusinessCode='330'\r\n\tOR ird.InsuranceSegmentCode = '3'\r\n\tOR ird.StrategicProfitCentercode ='5'\r\n\tOR (ircd.CoverageGroupCode in ('BOILER','CYBERSEC','DATACOMP','CYBERSUITE') \r\n\tOR ircd.CoverageGroupCode like '%TRIA' \r\n\tOR ircd.CoverageGroupDescription in ('Earthquake','MCCA Surcharge'))\r\n\tOR ird.InsuranceReferenceLineofBusinessCode in ('811','350','310','311', '312','590','812','890','900')\r\n\tOR (ird.InsuranceReferenceLineOfBusinessCode='100' and cdd.ISOClassCode in ('9741', '9740'))\r\n\tOR (ird.RatingPlanAbbreviation in ('LRARO','Retro'))\r\n\tOR apd.asl_prdct_code in ('200', '220')\r\n\tOR cdd.ISOClassCode='0174') then pmf.PremiumMasterPremium else 0 end) as CollectionWriteOffPremium,\r\n\tsum(PremiumMasterAgencyDirectWrittenCommission) AS PremiumMasterAgencyDirectWrittenCommission\r\n\t from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumMasterFact pmf\r\n\t LEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim IRD \r\n\ton pMF.InsuranceReferenceDimID = IRD.InsuranceReferenceDimID\r\n\t LEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceCoverageDim IRCD \r\n\ton \tPMF.InsuranceReferenceCoverageDimID = IRCD.InsuranceReferenceCoverageDimID\r\n\t LEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailDim cdd \r\n\ton  PMF.CoverageDetailDimID = CDD.CoverageDetailDimID\r\n\t LEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.ASL_Product_code_Dim apd\r\n\t on PMF.AnnualStatementLineProductCodeDimID = APD.asl_prdct_code_dim_id\r\n\t join @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim cld \r\n\ton pmf.PremiumMasterRunDateID=cld.clndr_id\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A \r\n\ton pmf.AgencyDimId=A.AgencyDimId \r\n\t--and a.currentsnapshotflag = 1\r\n\t\r\n\tleft join  (select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1)   ard on (A.edwagencyakid=ard.edwagencyakid and cld.clndr_date between ard.agencyrelationshipeffectivedate and ard.agencyrelationshipexpirationdate)\r\n\t\r\n\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransactionTypeDim PTT\r\n\ton pmf.PremiumTransactionTypeDimID=PTT.PremiumTransactionTypeDimID\r\n\tJOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim P\r\n\ton pmf.PolicyDimID=p.pol_dim_id\r\n\t where cld.clndr_date between @DATEPMSTART and @DATEPMEND\r\n\t@{pipeline().parameters.WHERECLAUSEPREMIUM}\r\n\tgroup by A.EDWAgencyAKID,\r\n\tA.AgencyCode\r\n\t--CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   --ard.LegalPrimaryAgencyCode end\r\n\t\r\n\t\r\n\t\r\n\t/*Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from \"AgencyRelationshipDim\" table*/\n),\nEXP_GetValues_PremiumMaster AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tBondsDirectWrittenPremium,\n\tNSIDirectWrittenPremium,\n\tProfitSharingEligibleDirectWrittenPremium,\n\tCollectionWriteOffPremium,\n\tPremiumMasterAgencyDirectWrittenCommission AS RegularCommission\n\tFROM SQ_PremiumMasterFact\n),\nJNR_Earned_Loss_PremiumMaster AS (SELECT\n\tEXP_GetValues_PremiumMaster.EDWAgencyAKID, \n\tEXP_GetValues_PremiumMaster.AgencyCode, \n\tEXP_GetValues_PremiumMaster.LegalPrimaryAgencyCode, \n\tEXP_GetValues_PremiumMaster.BondsDirectWrittenPremium, \n\tEXP_GetValues_PremiumMaster.NSIDirectWrittenPremium, \n\tEXP_GetValues_PremiumMaster.ProfitSharingEligibleDirectWrittenPremium, \n\tEXP_GetValues_PremiumMaster.CollectionWriteOffPremium, \n\tEXP_GetValues_PremiumMaster.RegularCommission, \n\tEXP_DefaultHandle.BondsDirectEarnedPremium, \n\tEXP_DefaultHandle.NSIEarnedPremium, \n\tEXP_DefaultHandle.ProfitSharingEligibleDirectEarnedPremium, \n\tEXP_DefaultHandle.BondsDirectIncurredLoss, \n\tEXP_DefaultHandle.BondsDirectIncurredLossSameYear, \n\tEXP_DefaultHandle.ProfitSharingEligibleDirectIncurredLoss, \n\tEXP_DefaultHandle.o_EDWAgencyAKID AS EDWAgencyAKID1, \n\tEXP_DefaultHandle.o_AgencyCode AS AgencyCode1, \n\tEXP_DefaultHandle.o_LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode1\n\tFROM EXP_GetValues_PremiumMaster\n\tFULL OUTER JOIN EXP_DefaultHandle\n\tON EXP_DefaultHandle.o_EDWAgencyAKID = EXP_GetValues_PremiumMaster.EDWAgencyAKID\n),\nEXP_DefaultHandle1 AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tBondsDirectWrittenPremium,\n\tNSIDirectWrittenPremium,\n\tProfitSharingEligibleDirectWrittenPremium,\n\tCollectionWriteOffPremium,\n\tRegularCommission,\n\tBondsDirectEarnedPremium,\n\tNSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium+CollectionWriteOffPremium AS O_ProfitSharingEligibleDirectEarnedPremium,\n\tBondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear,\n\tProfitSharingEligibleDirectIncurredLoss,\n\tEDWAgencyAKID1,\n\tAgencyCode1,\n\tLegalPrimaryAgencyCode1,\n\t-- *INF*: IIF(ISNULL(EDWAgencyAKID),EDWAgencyAKID1,EDWAgencyAKID)\n\tIFF(EDWAgencyAKID IS NULL,\n\t\tEDWAgencyAKID1,\n\t\tEDWAgencyAKID\n\t) AS o_EDWAgencyAKID,\n\t-- *INF*: IIF(ISNULL(AgencyCode),AgencyCode1,AgencyCode)\n\tIFF(AgencyCode IS NULL,\n\t\tAgencyCode1,\n\t\tAgencyCode\n\t) AS o_AgencyCode,\n\t-- *INF*: IIF(ISNULL(LegalPrimaryAgencyCode),LegalPrimaryAgencyCode1,LegalPrimaryAgencyCode)\n\tIFF(LegalPrimaryAgencyCode IS NULL,\n\t\tLegalPrimaryAgencyCode1,\n\t\tLegalPrimaryAgencyCode\n\t) AS o_LegalPrimaryAgencyCode\n\tFROM JNR_Earned_Loss_PremiumMaster\n),\nSQ_DCTDividendFact AS (\n\tDECLARE @DATEDVSTART as datetime,\r\n\t\t                @DATEDVEND as datetime\r\n\t\r\n\tSET @DATEDVSTART =dateadd(yy,DATEDIFF(MM,0,dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))/12-@{pipeline().parameters.NO_OF_YEARS},0)\r\n\tSET @DATEDVEND =dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))\r\n\t\r\n\tSELECT\r\n\tA.EDWAgencyAKID,\r\n\tA.AgencyCode,\r\n\tmax(CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   ard.LegalPrimaryAgencyCode end) as  LegalPrimaryAgencyCode,\r\n\tSUM(DividendPaidAmount) AS DividendPaidAmount\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTDividendFact df\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim ird on df.InsuranceReferenceDimId=ird.InsuranceReferenceDimId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim cld on df.DividendRunDateId=cld.clndr_id\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A on df.AgencyDimId=A.AgencyDimId\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim pol on pol.pol_dim_id=df.PolicyDimId and pol.pol_sym='000'\r\n\tleft join \r\n\t (select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\t on (A.edwagencyakid=ard.edwagencyakid \r\n\t and cld.clndr_date between ard.agencyrelationshipeffectivedate and ard.agencyrelationshipexpirationdate)\r\n\twhere cld.clndr_date between @DATEDVSTART and @DATEDVEND\r\n\t@{pipeline().parameters.WHERECLAUSEDIVIDEND}\r\n\tgroup by A.EDWAgencyAKID,\r\n\tA.AgencyCode\r\n\t--CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   --ard.LegalPrimaryAgencyCode end\r\n\t\r\n\t\r\n\t/*Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from \"AgencyRelationshipDim\" table*/\n),\nSQ_DividendFact AS (\n\tDECLARE @DATEDVSTART as datetime,\r\n\t\t                @DATEDVEND as datetime\r\n\t\r\n\tSET @DATEDVSTART =dateadd(yy,DATEDIFF(MM,0,dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))/12-@{pipeline().parameters.NO_OF_YEARS},0)\r\n\tSET @DATEDVEND =dateadd(SS,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))\r\n\t\r\n\tSELECT\r\n\tA.EDWAgencyAKID,\r\n\tA.AgencyCode,\r\n\t\r\n\tmax(CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   ard.LegalPrimaryAgencyCode end) as  LegalPrimaryAgencyCode,\r\n\t\r\n\t\r\n\tSUM(DividendPaidAmount) AS DividendPaidAmount\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DividendFact df\r\n\tLEFT OUTER join @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceReferenceDim ird on df.StrategicProfitCenterDimId=ird.InsuranceReferenceDimId\r\n\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.calendar_dim cld on df.DividendRunDateId=cld.clndr_id\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A on df.AgencyDimId=A.AgencyDimId\r\n\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy_dim pol on pol.pol_dim_id=df.PolicyDimId and pol.pol_sym<>'000'\r\n\tleft join \r\n\t (select * from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\t on (A.edwagencyakid=ard.edwagencyakid \r\n\t and cld.clndr_date between ard.agencyrelationshipeffectivedate and ard.agencyrelationshipexpirationdate)\r\n\t\r\n\twhere cld.clndr_date between @DATEDVSTART and @DATEDVEND\r\n\t@{pipeline().parameters.WHERECLAUSEDIVIDEND}\r\n\tgroup by A.EDWAgencyAKID,\r\n\tA.AgencyCode\r\n\t--CASE WHEN ard.LegalPrimaryAgencyCode is null THEN a.agencycode ELSE   --ard.LegalPrimaryAgencyCode end\r\n\t\r\n\t\r\n\t/*Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from \"AgencyRelationshipDim\" table*/\n),\nUN_DCT_and_NonDCT_DividendFact AS (\n\tSELECT EDWAgencyAKID, AgencyCode, LegalPrimaryAgencyCode, DividendPaidAmount\n\tFROM SQ_DCTDividendFact\n\tUNION\n\tSELECT EDWAgencyAKID, AgencyCode, LegalPrimaryAgencyCode, DividendPaidAmount\n\tFROM SQ_DividendFact\n),\nAGG_DividendPaidAmount AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tDividendPaidAmount,\n\t-- *INF*: SUM(DividendPaidAmount)\n\tSUM(DividendPaidAmount\n\t) AS o_DividendPaidAmount\n\tFROM UN_DCT_and_NonDCT_DividendFact\n\tGROUP BY EDWAgencyAKID\n),\nEXP_GetValues_Dividend AS (\n\tSELECT\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\to_DividendPaidAmount AS DividendPaidAmount\n\tFROM AGG_DividendPaidAmount\n),\nJNR_All AS (SELECT\n\tEXP_DefaultHandle1.BondsDirectWrittenPremium, \n\tEXP_DefaultHandle1.NSIDirectWrittenPremium, \n\tEXP_DefaultHandle1.ProfitSharingEligibleDirectWrittenPremium, \n\tEXP_DefaultHandle1.RegularCommission, \n\tEXP_DefaultHandle1.BondsDirectEarnedPremium, \n\tEXP_DefaultHandle1.NSIEarnedPremium, \n\tEXP_DefaultHandle1.O_ProfitSharingEligibleDirectEarnedPremium AS ProfitSharingEligibleDirectEarnedPremium, \n\tEXP_DefaultHandle1.BondsDirectIncurredLoss, \n\tEXP_DefaultHandle1.BondsDirectIncurredLossSameYear, \n\tEXP_DefaultHandle1.ProfitSharingEligibleDirectIncurredLoss, \n\tEXP_DefaultHandle1.o_EDWAgencyAKID AS EDWAgencyAKID, \n\tEXP_DefaultHandle1.o_AgencyCode AS AgencyCode, \n\tEXP_DefaultHandle1.o_LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode, \n\tEXP_GetValues_Dividend.EDWAgencyAKID AS EDWAgencyAKID1, \n\tEXP_GetValues_Dividend.AgencyCode AS AgencyCode1, \n\tEXP_GetValues_Dividend.LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode1, \n\tEXP_GetValues_Dividend.DividendPaidAmount\n\tFROM EXP_DefaultHandle1\n\tFULL OUTER JOIN EXP_GetValues_Dividend\n\tON EXP_GetValues_Dividend.EDWAgencyAKID = EXP_DefaultHandle1.o_EDWAgencyAKID\n),\nEXP_DefaultHandle3 AS (\n\tSELECT\n\tBondsDirectWrittenPremium AS i_BondsDirectWrittenPremium,\n\tNSIDirectWrittenPremium AS i_NSIDirectWrittenPremium,\n\tProfitSharingEligibleDirectWrittenPremium AS i_ProfitSharingEligibleDirectWrittenPremium,\n\tRegularCommission AS i_RegularCommission,\n\tBondsDirectEarnedPremium AS i_BondsDirectEarnedPremium,\n\tNSIEarnedPremium AS i_NSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium AS i_ProfitSharingEligibleDirectEarnedPremium,\n\tBondsDirectIncurredLoss AS i_BondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear AS i_BondsDirectIncurredLossSameYear,\n\tProfitSharingEligibleDirectIncurredLoss AS i_ProfitSharingEligibleDirectIncurredLoss,\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\tEDWAgencyAKID1,\n\tAgencyCode1,\n\tLegalPrimaryAgencyCode1,\n\tDividendPaidAmount,\n\t-- *INF*: IIF(ISNULL(EDWAgencyAKID),EDWAgencyAKID1,EDWAgencyAKID)\n\tIFF(EDWAgencyAKID IS NULL,\n\t\tEDWAgencyAKID1,\n\t\tEDWAgencyAKID\n\t) AS o_EDWAgencyAKID,\n\t-- *INF*: IIF(ISNULL(AgencyCode),AgencyCode1,AgencyCode)\n\tIFF(AgencyCode IS NULL,\n\t\tAgencyCode1,\n\t\tAgencyCode\n\t) AS o_AgencyCode,\n\t-- *INF*: IIF(ISNULL(LegalPrimaryAgencyCode),LegalPrimaryAgencyCode1,LegalPrimaryAgencyCode)\n\tIFF(LegalPrimaryAgencyCode IS NULL,\n\t\tLegalPrimaryAgencyCode1,\n\t\tLegalPrimaryAgencyCode\n\t) AS o_LegalPrimaryAgencyCode,\n\t-- *INF*: IIF(ISNULL(i_BondsDirectWrittenPremium),0,i_BondsDirectWrittenPremium)\n\tIFF(i_BondsDirectWrittenPremium IS NULL,\n\t\t0,\n\t\ti_BondsDirectWrittenPremium\n\t) AS o_BondsDirectWrittenPremium,\n\t-- *INF*: IIF(ISNULL(i_NSIDirectWrittenPremium),0,i_NSIDirectWrittenPremium)\n\tIFF(i_NSIDirectWrittenPremium IS NULL,\n\t\t0,\n\t\ti_NSIDirectWrittenPremium\n\t) AS o_NSIDirectWrittenPremium,\n\t-- *INF*: IIF(ISNULL(i_ProfitSharingEligibleDirectWrittenPremium),0,i_ProfitSharingEligibleDirectWrittenPremium)\n\tIFF(i_ProfitSharingEligibleDirectWrittenPremium IS NULL,\n\t\t0,\n\t\ti_ProfitSharingEligibleDirectWrittenPremium\n\t) AS o_ProfitSharingEligibleDirectWrittenPremium,\n\t-- *INF*: IIF(ISNULL(i_RegularCommission),0,i_RegularCommission)\n\tIFF(i_RegularCommission IS NULL,\n\t\t0,\n\t\ti_RegularCommission\n\t) AS o_RegularCommission,\n\t-- *INF*: IIF(ISNULL(i_BondsDirectEarnedPremium),0,i_BondsDirectEarnedPremium)\n\tIFF(i_BondsDirectEarnedPremium IS NULL,\n\t\t0,\n\t\ti_BondsDirectEarnedPremium\n\t) AS o_BondsDirectEarnedPremium,\n\t-- *INF*: IIF(ISNULL(i_NSIEarnedPremium),0,i_NSIEarnedPremium)\n\tIFF(i_NSIEarnedPremium IS NULL,\n\t\t0,\n\t\ti_NSIEarnedPremium\n\t) AS o_NSIEarnedPremium,\n\t-- *INF*: IIF(ISNULL(i_ProfitSharingEligibleDirectEarnedPremium),0,i_ProfitSharingEligibleDirectEarnedPremium)\n\tIFF(i_ProfitSharingEligibleDirectEarnedPremium IS NULL,\n\t\t0,\n\t\ti_ProfitSharingEligibleDirectEarnedPremium\n\t) AS o_ProfitSharingEligibleDirectEarnedPremium,\n\t-- *INF*: IIF(ISNULL(i_BondsDirectIncurredLoss),0,i_BondsDirectIncurredLoss)\n\tIFF(i_BondsDirectIncurredLoss IS NULL,\n\t\t0,\n\t\ti_BondsDirectIncurredLoss\n\t) AS o_BondsDirectIncurredLoss,\n\t-- *INF*: IIF(ISNULL(i_BondsDirectIncurredLossSameYear),0,i_BondsDirectIncurredLossSameYear)\n\tIFF(i_BondsDirectIncurredLossSameYear IS NULL,\n\t\t0,\n\t\ti_BondsDirectIncurredLossSameYear\n\t) AS o_BondsDirectIncurredLossSameYear,\n\t-- *INF*: IIF(ISNULL(i_ProfitSharingEligibleDirectIncurredLoss),0,i_ProfitSharingEligibleDirectIncurredLoss)\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(i_ProfitSharingEligibleDirectIncurredLoss IS NULL,\n\t\t0,\n\t\ti_ProfitSharingEligibleDirectIncurredLoss\n\t) AS o_ProfitSharingEligibleDirectIncurredLoss,\n\t-- *INF*: IIF(ISNULL(DividendPaidAmount),0,DividendPaidAmount)\n\tIFF(DividendPaidAmount IS NULL,\n\t\t0,\n\t\tDividendPaidAmount\n\t) AS o_DividendAmount,\n\t1 AS o_Dummy_Records\n\tFROM JNR_All\n),\nSQ_RunDate AS (\n\tSELECT\r\n\t       a.clndr_id AS RunDateID\r\n\t       ,a.clndr_date AS RunDate\r\n\t       ,c.clndr_id AS PreviousYearRunDateID\r\n\t       ,b.CalendarEndOfMonthDate AS PreviousYearRunDate\r\n\t       ,1 AS dummy\r\n\tFROM   calendar_dim a\r\n\t              ,calendar_dim b\r\n\t              ,calendar_dim c\r\n\tWHERE a.clndr_date = DATEADD(dd, -1, DATEADD(mm, DATEDIFF(MM, 0, GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS}, 0))\r\n\tAND b.clndr_date = DATEADD(yy, -1, a.clndr_date)\r\n\tAND b.CalendarEndOfMonthDate = c.clndr_date\n),\nJNR_RunDate AS (SELECT\n\tSQ_RunDate.RunDateID, \n\tSQ_RunDate.RunDate, \n\tSQ_RunDate.PreviousYearRunDateID, \n\tSQ_RunDate.PreviousYearRunDate, \n\tSQ_RunDate.Dummy, \n\tEXP_DefaultHandle3.o_EDWAgencyAKID AS EDWAgencyAKID, \n\tEXP_DefaultHandle3.o_AgencyCode AS AgencyCode, \n\tEXP_DefaultHandle3.o_LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode, \n\tEXP_DefaultHandle3.o_BondsDirectWrittenPremium AS BondsDirectWrittenPremium, \n\tEXP_DefaultHandle3.o_NSIDirectWrittenPremium AS NSIDirectWrittenPremium, \n\tEXP_DefaultHandle3.o_ProfitSharingEligibleDirectWrittenPremium AS ProfitSharingEligibleDirectWrittenPremium, \n\tEXP_DefaultHandle3.o_RegularCommission AS RegularCommission, \n\tEXP_DefaultHandle3.o_BondsDirectEarnedPremium AS BondsDirectEarnedPremium, \n\tEXP_DefaultHandle3.o_NSIEarnedPremium AS NSIEarnedPremium, \n\tEXP_DefaultHandle3.o_ProfitSharingEligibleDirectEarnedPremium AS ProfitSharingEligibleDirectEarnedPremium, \n\tEXP_DefaultHandle3.o_BondsDirectIncurredLoss AS BondsDirectIncurredLoss, \n\tEXP_DefaultHandle3.o_BondsDirectIncurredLossSameYear AS BondsDirectIncurredLossSameYear, \n\tEXP_DefaultHandle3.o_ProfitSharingEligibleDirectIncurredLoss AS ProfitSharingEligibleDirectIncurredLoss, \n\tEXP_DefaultHandle3.o_DividendAmount AS DividendAmount, \n\tEXP_DefaultHandle3.o_Dummy_Records AS Dummy_Records\n\tFROM SQ_RunDate\n\tINNER JOIN EXP_DefaultHandle3\n\tON EXP_DefaultHandle3.o_Dummy_Records = SQ_RunDate.Dummy\n),\nExp_DataCollect AS (\n\tSELECT\n\tRunDateID,\n\tRunDate,\n\tPreviousYearRunDateID,\n\tPreviousYearRunDate,\n\tDummy,\n\tEDWAgencyAKID,\n\tAgencyCode,\n\tLegalPrimaryAgencyCode,\n\t-- *INF*: :LKP.LKP_V3_AGENCYDIMID(EDWAgencyAKID,RunDate)\n\tLKP_V3_AGENCYDIMID_EDWAgencyAKID_RunDate.agency_dim_id AS AgencyDimId,\n\t-- *INF*: IIF(ISNULL(:LKP.LKP_SALESDIVISIONDIM(AgencyCode)),-1,:LKP.LKP_SALESDIVISIONDIM(AgencyCode))\n\tIFF(LKP_SALESDIVISIONDIM_AgencyCode.SalesDivisionDimID IS NULL,\n\t\t- 1,\n\t\tLKP_SALESDIVISIONDIM_AgencyCode.SalesDivisionDimID\n\t) AS SalesDivisionDimId,\n\tBondsDirectWrittenPremium,\n\tNSIDirectWrittenPremium,\n\tProfitSharingEligibleDirectWrittenPremium,\n\tRegularCommission,\n\tBondsDirectEarnedPremium,\n\tNSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium,\n\tBondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear,\n\tProfitSharingEligibleDirectIncurredLoss,\n\tDividendAmount,\n\tDummy_Records\n\tFROM JNR_RunDate\n\tLEFT JOIN LKP_V3_AGENCYDIMID LKP_V3_AGENCYDIMID_EDWAgencyAKID_RunDate\n\tON LKP_V3_AGENCYDIMID_EDWAgencyAKID_RunDate.edw_agency_ak_id = EDWAgencyAKID\n\tAND LKP_V3_AGENCYDIMID_EDWAgencyAKID_RunDate.eff_from_date = RunDate\n\n\tLEFT JOIN LKP_SALESDIVISIONDIM LKP_SALESDIVISIONDIM_AgencyCode\n\tON LKP_SALESDIVISIONDIM_AgencyCode.AgencyCode = AgencyCode\n\n),\nLKP_Agency AS (\n\tSELECT\n\tProfitSharingGuaranteeFlag,\n\tEDWAgencyAKID\n\tFROM (\n\t\tselect \r\n\t\tad.EDWAgencyAKID as EDWAgencyAKID,  \r\n\t\t--ad.AgencyDimID as AgencyDimID,\r\n\t\t  case when a.ProfitSharingGuaranteeFlag=1 then '1' else '0' end as ProfitSharingGuaranteeFlag\r\n\t\t  from \r\n\t\t  @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim ad, \r\n\t\t  @{pipeline().parameters.EDW_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency a\r\n\t\t  where ad.EDWAgencyAKID=a.AgencyAKID\r\n\t\t and a.CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWAgencyAKID ORDER BY ProfitSharingGuaranteeFlag DESC) = 1\n),\nLKP_LastYearAgencyProfitSharingYTDFact AS (\n\tSELECT\n\tBondsDirectWrittenPremium,\n\tEDWAgencyAKID,\n\tRunDateId\n\tFROM (\n\t\tSelect A.EDWAgencyAKID AS EDWAgencyAKID ,\r\n\t\tRunDateId AS RunDateId,\r\n\t\tBondsDirectWrittenPremium  AS BondsDirectWrittenPremium\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact af\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd \r\n\t\ton af.RunDateId=cd.clndr_id \r\n\t\tJoin @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim A\r\n\t\ton af.AgencyDimId=A.AgencyDimId\r\n\t\tand cd.clndr_yr=YEAR(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))-1\r\n\t\tWHERE af.GroupExperienceIndicator = 'INDIVIDUAL'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY EDWAgencyAKID,RunDateId ORDER BY BondsDirectWrittenPremium DESC) = 1\n),\nLKP_StopLossAdjustmentCatastropheFact AS (\n\tSELECT\n\tAgencyDimId_cat,\n\tStopLossAdjustmentAmount,\n\tRunDateId,\n\tLegalPrimaryAgencyCode\n\tFROM (\n\t\tselect \r\n\t\t(CASE WHEN ard.LegalPrimaryAgencyCode is null THEN agy.agencycode ELSE   ard.LegalPrimaryAgencyCode end) as  LegalPrimaryAgencyCode,\r\n\t\tRunDateId as RunDateId\r\n\t\t,agy.AgencyDimId as AgencyDimId_cat\r\n\t\t,SUM(ChangeInStopLossAdjustmentAmount) as StopLossAdjustmentAmount\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.StopLossAdjustmentCatastropheFact sacf\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd\r\n\t\ton sacf.RunDateId=cd.clndr_id\r\n\t\tand cd.clndr_yr=YEAR(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim agy\r\n\t\ton agy.AgencyDimId=sacf.AgencyDimId\r\n\t\t\r\n\t\tleft join \r\n\t\t (select * from Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\t\t on (Agy.edwagencyakid=ard.edwagencyakid \r\n\t\t and cd.clndr_date between ard.agencyrelationshipeffectivedate and ard.agencyrelationshipexpirationdate)\r\n\t\t\r\n\t\t\r\n\t\tgroup by \r\n\t\t--agy.LegalPrimaryAgencyCode\r\n\t\tRunDateId\r\n\t\t,agy.AgencyDimId,\r\n\t\tCASE WHEN ard.LegalPrimaryAgencyCode is null THEN agy.agencycode ELSE   ard.LegalPrimaryAgencyCode end\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t--Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from --\"AgencyRelationshipDim\" table\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RunDateId,LegalPrimaryAgencyCode ORDER BY AgencyDimId_cat DESC) = 1\n),\nLKP_StopLossAdjustmentClaimOccurrenceFact AS (\n\tSELECT\n\tStopLossAdjustmentAmount,\n\tRunDateId,\n\tEDWAgencyAKID\n\tFROM (\n\t\tselect \r\n\t\tagy.EDWAgencyAKID as EDWAgencyAKID\r\n\t\t,RunDateId as RunDateId\r\n\t\t,SUM(ChangeInStopLossAdjustmentAmount) as StopLossAdjustmentAmount\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.StopLossAdjustmentClaimOccurrenceFact saof\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd\r\n\t\ton saof.RunDateId=cd.clndr_id\r\n\t\tand cd.clndr_yr=YEAR(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim agy\r\n\t\ton agy.AgencyDimId=saof.AgencyDimId\r\n\t\tgroup by \r\n\t\tagy.EDWAgencyAKID\r\n\t\t,RunDateId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RunDateId,EDWAgencyAKID ORDER BY StopLossAdjustmentAmount DESC) = 1\n),\nLKP_V3_AgencyDimID_PrimaryAgency AS (\n\tSELECT\n\tLegalPrimaryAgencyCode,\n\tAgencyCode,\n\teff_from_date,\n\teff_to_date\n\tFROM (\n\t\tSELECT \r\n\t\tARD.LegalPrimaryAgencyCode as LegalPrimaryAgencyCode, \r\n\t\tAgencyDim.AgencyCode as AgencyCode, \r\n\t\tARD.AgencyRelationshipEffectivedate as eff_from_date, \r\n\t\tARD.AgencyRelationshipExpirationdate as eff_to_date\r\n\t\t FROM @{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim as AgencyDim\r\n\t\tleft join \r\n\t\t (select * from @{pipeline().parameters.TARGET_TABLE_OWNER}.Agencyrelationshipdim where currentsnapshotflag = 1) ard\r\n\t\t on (AgencyDim.edwagencyakid=ard.edwagencyakid )\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t--Left join with \"agencyrelationshipdim\" in order to get legalprimaryagencycode values from --\"AgencyRelationshipDim\" table\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode,eff_from_date,eff_to_date ORDER BY LegalPrimaryAgencyCode DESC) = 1\n),\nEXP_DataCollect_Individual_Group AS (\n\tSELECT\n\tExp_DataCollect.RunDateID,\n\tExp_DataCollect.PreviousYearRunDateID AS LastYearRunDateID,\n\tExp_DataCollect.AgencyDimId AS AgencyDimID,\n\tExp_DataCollect.SalesDivisionDimId,\n\tExp_DataCollect.BondsDirectWrittenPremium,\n\tExp_DataCollect.NSIDirectWrittenPremium,\n\tExp_DataCollect.ProfitSharingEligibleDirectWrittenPremium,\n\tExp_DataCollect.RegularCommission,\n\tExp_DataCollect.BondsDirectEarnedPremium,\n\tExp_DataCollect.NSIEarnedPremium,\n\tExp_DataCollect.ProfitSharingEligibleDirectEarnedPremium,\n\tExp_DataCollect.BondsDirectIncurredLoss,\n\tExp_DataCollect.BondsDirectIncurredLossSameYear,\n\tExp_DataCollect.ProfitSharingEligibleDirectIncurredLoss,\n\tExp_DataCollect.DividendAmount,\n\tLKP_LastYearAgencyProfitSharingYTDFact.BondsDirectWrittenPremium AS lkp_LastYearYTDBondsDirectWrittenPremium,\n\tLKP_StopLossAdjustmentClaimOccurrenceFact.StopLossAdjustmentAmount AS lkp_StopLossAdjustmentAmountOccurrence,\n\tLKP_StopLossAdjustmentCatastropheFact.StopLossAdjustmentAmount AS lkp_StopLossAdjustmentAmountCatastrophe,\n\tLKP_StopLossAdjustmentCatastropheFact.AgencyDimId_cat,\n\tLKP_Agency.ProfitSharingGuaranteeFlag AS lkp_ProfitSharingGuaranteeFlag,\n\tExp_DataCollect.EDWAgencyAKID,\n\tExp_DataCollect.AgencyCode,\n\tLKP_V3_AgencyDimID_PrimaryAgency.LegalPrimaryAgencyCode,\n\t-- *INF*: iif(isnull(LegalPrimaryAgencyCode),AgencyCode,LegalPrimaryAgencyCode)\n\tIFF(LegalPrimaryAgencyCode IS NULL,\n\t\tAgencyCode,\n\t\tLegalPrimaryAgencyCode\n\t) AS O_LegalPrimaryAgencyCode,\n\tExp_DataCollect.RunDate\n\tFROM Exp_DataCollect\n\tLEFT JOIN LKP_Agency\n\tON LKP_Agency.EDWAgencyAKID = Exp_DataCollect.EDWAgencyAKID\n\tLEFT JOIN LKP_LastYearAgencyProfitSharingYTDFact\n\tON LKP_LastYearAgencyProfitSharingYTDFact.EDWAgencyAKID = JNR_RunDate.EDWAgencyAKID AND LKP_LastYearAgencyProfitSharingYTDFact.RunDateId = JNR_RunDate.PreviousYearRunDateID\n\tLEFT JOIN LKP_StopLossAdjustmentCatastropheFact\n\tON LKP_StopLossAdjustmentCatastropheFact.RunDateId = Exp_DataCollect.RunDateID AND LKP_StopLossAdjustmentCatastropheFact.LegalPrimaryAgencyCode = Exp_DataCollect.LegalPrimaryAgencyCode\n\tLEFT JOIN LKP_StopLossAdjustmentClaimOccurrenceFact\n\tON LKP_StopLossAdjustmentClaimOccurrenceFact.RunDateId = Exp_DataCollect.RunDateID AND LKP_StopLossAdjustmentClaimOccurrenceFact.EDWAgencyAKID = Exp_DataCollect.EDWAgencyAKID\n\tLEFT JOIN LKP_V3_AgencyDimID_PrimaryAgency\n\tON LKP_V3_AgencyDimID_PrimaryAgency.AgencyCode = Exp_DataCollect.AgencyCode AND LKP_V3_AgencyDimID_PrimaryAgency.eff_from_date <= Exp_DataCollect.RunDate AND LKP_V3_AgencyDimID_PrimaryAgency.eff_to_date >= Exp_DataCollect.RunDate\n),\nAGG_Data_PrimaryAgency AS (\n\tSELECT\n\tO_LegalPrimaryAgencyCode AS LegalPrimaryAgencyCode,\n\tRunDateID,\n\tLastYearRunDateID,\n\tBondsDirectWrittenPremium,\n\t-- *INF*: SUM(BondsDirectWrittenPremium)\n\tSUM(BondsDirectWrittenPremium\n\t) AS O_BondsDirectWrittenPremium,\n\tNSIDirectWrittenPremium,\n\t-- *INF*: SUM(NSIDirectWrittenPremium)\n\tSUM(NSIDirectWrittenPremium\n\t) AS O_NSIDirectWrittenPremium,\n\tProfitSharingEligibleDirectWrittenPremium,\n\t-- *INF*: SUM(ProfitSharingEligibleDirectWrittenPremium)\n\tSUM(ProfitSharingEligibleDirectWrittenPremium\n\t) AS O_ProfitSharingEligibleDirectWrittenPremium,\n\tRegularCommission,\n\t-- *INF*: SUM(RegularCommission)\n\tSUM(RegularCommission\n\t) AS O_RegularCommission,\n\tBondsDirectEarnedPremium,\n\t-- *INF*: SUM(BondsDirectEarnedPremium)\n\tSUM(BondsDirectEarnedPremium\n\t) AS O_BondsDirectEarnedPremium,\n\tNSIEarnedPremium,\n\t-- *INF*: SUM(NSIEarnedPremium)\n\tSUM(NSIEarnedPremium\n\t) AS O_NSIEarnedPremium,\n\tProfitSharingEligibleDirectEarnedPremium,\n\t-- *INF*: SUM(ProfitSharingEligibleDirectEarnedPremium)\n\tSUM(ProfitSharingEligibleDirectEarnedPremium\n\t) AS O_ProfitSharingEligibleDirectEarnedPremium,\n\tBondsDirectIncurredLoss,\n\t-- *INF*: SUM(BondsDirectIncurredLoss)\n\tSUM(BondsDirectIncurredLoss\n\t) AS O_BondsDirectIncurredLoss,\n\tBondsDirectIncurredLossSameYear,\n\t-- *INF*: SUM(BondsDirectIncurredLossSameYear)\n\tSUM(BondsDirectIncurredLossSameYear\n\t) AS O_BondsDirectIncurredLossSameYear,\n\tProfitSharingEligibleDirectIncurredLoss,\n\t-- *INF*: SUM(ProfitSharingEligibleDirectIncurredLoss)\n\tSUM(ProfitSharingEligibleDirectIncurredLoss\n\t) AS O_ProfitSharingEligibleDirectIncurredLoss,\n\tDividendAmount,\n\t-- *INF*: SUM(DividendAmount)\n\tSUM(DividendAmount\n\t) AS O_DividendAmount,\n\tlkp_LastYearYTDBondsDirectWrittenPremium AS LastYearYTDBondsDirectWrittenPremium,\n\t-- *INF*: SUM(LastYearYTDBondsDirectWrittenPremium)\n\tSUM(LastYearYTDBondsDirectWrittenPremium\n\t) AS O_LastYearYTDBondsDirectWrittenPremium,\n\tlkp_StopLossAdjustmentAmountOccurrence AS StopLossAdjustmentAmountOccurrence,\n\t-- *INF*: SUM(StopLossAdjustmentAmountOccurrence)\n\tSUM(StopLossAdjustmentAmountOccurrence\n\t) AS O_StopLossAdjustmentAmountOccurrence,\n\tlkp_StopLossAdjustmentAmountCatastrophe AS StopLossAdjustmentAmountCatastrophe,\n\tStopLossAdjustmentAmountCatastrophe AS O_StopLossAdjustmentAmountCatastrophe,\n\tlkp_ProfitSharingGuaranteeFlag AS ProfitSharingGuaranteeFlag,\n\tRunDate\n\tFROM EXP_DataCollect_Individual_Group\n\tGROUP BY LegalPrimaryAgencyCode\n),\nEXP_Data_PrimaryAgency AS (\n\tSELECT\n\tLegalPrimaryAgencyCode,\n\tRunDate,\n\t-- *INF*: :LKP.LKP_V3_AGENCYDIMID_GROUP(LegalPrimaryAgencyCode,RunDate)\n\tLKP_V3_AGENCYDIMID_GROUP_LegalPrimaryAgencyCode_RunDate.agency_dim_id AS AgencyDimId,\n\t-- *INF*: IIF(ISNULL(:LKP.LKP_SALESDIVISIONDIM(LegalPrimaryAgencyCode)),-1,:LKP.LKP_SALESDIVISIONDIM(LegalPrimaryAgencyCode))\n\tIFF(LKP_SALESDIVISIONDIM_LegalPrimaryAgencyCode.SalesDivisionDimID IS NULL,\n\t\t- 1,\n\t\tLKP_SALESDIVISIONDIM_LegalPrimaryAgencyCode.SalesDivisionDimID\n\t) AS SalesDivisionDimId,\n\tRunDateID,\n\tLastYearRunDateID,\n\tO_BondsDirectWrittenPremium,\n\tO_NSIDirectWrittenPremium,\n\tO_ProfitSharingEligibleDirectWrittenPremium,\n\tO_RegularCommission,\n\tO_BondsDirectEarnedPremium,\n\tO_NSIEarnedPremium,\n\tO_ProfitSharingEligibleDirectEarnedPremium,\n\tO_BondsDirectIncurredLoss,\n\tO_BondsDirectIncurredLossSameYear,\n\tO_ProfitSharingEligibleDirectIncurredLoss,\n\tO_DividendAmount,\n\tO_LastYearYTDBondsDirectWrittenPremium,\n\tO_StopLossAdjustmentAmountOccurrence,\n\tO_StopLossAdjustmentAmountCatastrophe,\n\tProfitSharingGuaranteeFlag\n\tFROM AGG_Data_PrimaryAgency\n\tLEFT JOIN LKP_V3_AGENCYDIMID_GROUP LKP_V3_AGENCYDIMID_GROUP_LegalPrimaryAgencyCode_RunDate\n\tON LKP_V3_AGENCYDIMID_GROUP_LegalPrimaryAgencyCode_RunDate.AgencyCode = LegalPrimaryAgencyCode\n\tAND LKP_V3_AGENCYDIMID_GROUP_LegalPrimaryAgencyCode_RunDate.eff_from_date = RunDate\n\n\tLEFT JOIN LKP_SALESDIVISIONDIM LKP_SALESDIVISIONDIM_LegalPrimaryAgencyCode\n\tON LKP_SALESDIVISIONDIM_LegalPrimaryAgencyCode.AgencyCode = LegalPrimaryAgencyCode\n\n),\nLKP_AgencyProfitSharing_GuaranteedCommission AS (\n\tSELECT\n\tNetProfitSharingAmount,\n\tGuaranteeFee,\n\tIN_LegalPrimaryAgencyCode,\n\tLegalPrimaryAgencyCode\n\tFROM (\n\t\tSELECT\r\n\t\tC.AgencyCode  as LegalPrimaryAgencyCode, \r\n\t\tA.NetProfitSharingAmount AS NetProfitSharingAmount,\r\n\t\tA.GuaranteeFee as GuaranteeFee \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim B on (A.RunDateId=B.clndr_id)\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim C on (A.AgencyDimId=C.AgencyDimID)\r\n\t\tWHERE A.GroupExperienceIndicator = 'GROUP' AND B.clndr_month=9 AND\r\n\t\tYEAR(DATEADD(dd,-1,DATEADD(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))=B.clndr_yr\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY LegalPrimaryAgencyCode ORDER BY NetProfitSharingAmount DESC) = 1\n),\nLKP_Agency_Primary_Profit_SharingFlag AS (\n\tSELECT\n\tAgencyAppointedDate,\n\tProfitSharingGuaranteeFlag,\n\tAgencyDimId\n\tFROM (\n\t\tselect \r\n\t\tad.AgencyDimID as AgencyDimID,\r\n\t\tad.AgencyAppointedDate as AgencyAppointedDate,\r\n\t\t  case when a.ProfitSharingGuaranteeFlag=1 then '1' else '0' end as ProfitSharingGuaranteeFlag\r\n\t\t  from \r\n\t\t  @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim ad, \r\n\t\t  @{pipeline().parameters.EDW_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.Agency a\r\n\t\t  where ad.EDWAgencyAKID=a.AgencyAKID\r\n\t\t and a.CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyDimId ORDER BY AgencyAppointedDate DESC) = 1\n),\nLKP_LastYearAgencyProfitSharingYTDFact_GROUP AS (\n\tSELECT\n\tBondsDirectWrittenPremium,\n\tAgencyCode,\n\tRunDateId\n\tFROM (\n\t\tSELECT\r\n\t\t      PRIM.AgencyCode AS AgencyCode\r\n\t\t      ,RunDateId AS RunDateId\r\n\t\t      ,SUM(BondsDirectWrittenPremium) AS BondsDirectWrittenPremium\r\n\t\t\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact af\r\n\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd\r\n\t\t      ON af.RunDateId = cd.clndr_id\r\n\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim BRNCH\r\n\t\t      ON af.AgencyDimId = BRNCH.AgencyDimId\r\n\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyRelationshipCurrent ARC\r\n\t\t      ON (BRNCH.EDWAgencyAKID = ARC.EDWAgencyAKID\r\n\t\t                   AND DATEADD(dd, -1, DATEADD(mm, DATEDIFF(MM, 0, GETDATE()) - @{pipeline().parameters.NO_OF_MONTHS}, 0)) \r\n\t\t                   BETWEEN ARC.AgencyRelationshipEffectiveDate\r\n\t\t                   AND ARC.AgencyRelationshipExpirationDate)\r\n\t\t\r\n\t\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER_V3}.AgencyDim PRIM\r\n\t\t      ON (PRIM.EDWAgencyAKID = ARC.EDWLegalPrimaryAgencyAKId\r\n\t\t                   AND PRIM.CurrentSnapshotFlag = 1)\r\n\t\t\r\n\t\tWHERE af.GroupExperienceIndicator = 'GROUP'\r\n\t\tAND cd.clndr_date = DATEADD(dd, -1, DATEADD(mm, DATEDIFF(MM, 0, GETDATE()) - 12 - @{pipeline().parameters.NO_OF_MONTHS}, 0))\r\n\t\t\r\n\t\tGROUP BY\r\n\t\t                PRIM.AgencyCode,RunDateId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode,RunDateId ORDER BY BondsDirectWrittenPremium DESC) = 1\n),\nEXP_CalValues_PrimaryAgency AS (\n\tSELECT\n\tEXP_Data_PrimaryAgency.AgencyDimId AS i_AgencyDimId,\n\tEXP_Data_PrimaryAgency.RunDateID AS i_RunDateID,\n\tEXP_Data_PrimaryAgency.RunDate,\n\t-- *INF*: GET_DATE_PART(RunDate,'MM')\n\tDATE_PART(RunDate, 'MM'\n\t) AS v_RunMonth,\n\tEXP_Data_PrimaryAgency.SalesDivisionDimId AS i_SalesDivisionDimId,\n\tEXP_Data_PrimaryAgency.O_BondsDirectWrittenPremium AS i_BondsDirectWrittenPremium,\n\tEXP_Data_PrimaryAgency.O_NSIDirectWrittenPremium AS i_NSIDirectWrittenPremium,\n\tEXP_Data_PrimaryAgency.O_ProfitSharingEligibleDirectWrittenPremium AS i_ProfitSharingEligibleDirectWrittenPremium,\n\tEXP_Data_PrimaryAgency.O_RegularCommission AS i_RegularCommission,\n\tEXP_Data_PrimaryAgency.O_BondsDirectEarnedPremium AS i_BondsDirectEarnedPremium,\n\tEXP_Data_PrimaryAgency.O_NSIEarnedPremium AS i_NSIEarnedPremium,\n\tEXP_Data_PrimaryAgency.O_ProfitSharingEligibleDirectEarnedPremium AS i_ProfitSharingEligibleDirectEarnedPremium,\n\tEXP_Data_PrimaryAgency.O_BondsDirectIncurredLoss AS i_BondsDirectIncurredLoss,\n\tEXP_Data_PrimaryAgency.O_ProfitSharingEligibleDirectIncurredLoss AS i_ProfitSharingEligibleDirectIncurredLoss,\n\tEXP_Data_PrimaryAgency.O_DividendAmount AS i_DividendAmount,\n\tLKP_LastYearAgencyProfitSharingYTDFact_GROUP.BondsDirectWrittenPremium AS lkp_LastYearYTDBondsDirectWrittenPremium,\n\tEXP_Data_PrimaryAgency.O_StopLossAdjustmentAmountOccurrence AS lkp_StopLossAdjustmentAmountOccurrence,\n\tEXP_Data_PrimaryAgency.O_StopLossAdjustmentAmountCatastrophe AS lkp_StopLossAdjustmentAmountCatastrophe,\n\tLKP_Agency_Primary_Profit_SharingFlag.AgencyAppointedDate,\n\t-- *INF*: DATE_DIFF(RunDate,AgencyAppointedDate,'YY')\n\tDATEDIFF(YEAR,RunDate,AgencyAppointedDate) AS v_WB_AgencyYears,\n\tLKP_Agency_Primary_Profit_SharingFlag.ProfitSharingGuaranteeFlag AS lkp_ProfitSharingGuaranteeFlag,\n\tLKP_AgencyProfitSharing_GuaranteedCommission.NetProfitSharingAmount AS i_GuaranteedCommission,\n\tLKP_AgencyProfitSharing_GuaranteedCommission.IN_LegalPrimaryAgencyCode AS in_LegalPrimaryAgencyCode,\n\t-- *INF*: SUBSTR(in_LegalPrimaryAgencyCode,1,2)\n\tSUBSTR(in_LegalPrimaryAgencyCode, 1, 2\n\t) AS v_NSI_Agencies,\n\tLKP_AgencyProfitSharing_GuaranteedCommission.GuaranteeFee AS i_GuaranteeFee_Sep,\n\t-- *INF*: ROUND(i_BondsDirectWrittenPremium-lkp_LastYearYTDBondsDirectWrittenPremium,4)\n\tROUND(i_BondsDirectWrittenPremium - lkp_LastYearYTDBondsDirectWrittenPremium, 4\n\t) AS v_BondsGrowthAmount,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_BondsGrowthAmount<25000.00,\r\n\t-- 0.00,\r\n\t-- v_BondsGrowthAmount>=25000.00 AND v_BondsGrowthAmount<50001.00,\r\n\t-- 1.0,\r\n\t-- v_BondsGrowthAmount>=50001.00 AND v_BondsGrowthAmount<100001.00,\r\n\t-- 2.0,\r\n\t-- v_BondsGrowthAmount>=100001.00 AND v_BondsGrowthAmount<150001.00,\r\n\t-- 3.0,\r\n\t-- v_BondsGrowthAmount>=150001.00,\r\n\t-- 4.0)\r\n\t-- \n\tDECODE(TRUE,\n\t\tv_BondsGrowthAmount < 25000.00, 0.00,\n\t\tv_BondsGrowthAmount >= 25000.00 \n\t\tAND v_BondsGrowthAmount < 50001.00, 1.0,\n\t\tv_BondsGrowthAmount >= 50001.00 \n\t\tAND v_BondsGrowthAmount < 100001.00, 2.0,\n\t\tv_BondsGrowthAmount >= 100001.00 \n\t\tAND v_BondsGrowthAmount < 150001.00, 3.0,\n\t\tv_BondsGrowthAmount >= 150001.00, 4.0\n\t) AS v_BondsGrowthBonusRate,\n\t-- *INF*: lkp_ProfitSharingGuaranteeFlag\r\n\t-- \r\n\t-- --DECODE(lkp_ProfitSharingGuaranteeFlag,'T','1','F','0','')\n\tlkp_ProfitSharingGuaranteeFlag AS v_ProfitSharingGuaranteeFlag,\n\t-- *INF*: DECODE(TRUE,i_BondsDirectEarnedPremium<=0,100,i_BondsDirectIncurredLoss <=0,0,ROUND(i_BondsDirectIncurredLoss/ i_BondsDirectEarnedPremium  * 100,4))\n\tDECODE(TRUE,\n\t\ti_BondsDirectEarnedPremium <= 0, 100,\n\t\ti_BondsDirectIncurredLoss <= 0, 0,\n\t\tROUND(i_BondsDirectIncurredLoss / i_BondsDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_BondsLossRatio,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_BondsLossRatio<5.1,\r\n\t-- 4.0,\r\n\t-- v_BondsLossRatio>=5.1 AND v_BondsLossRatio<11.1,\r\n\t-- 3.0,\r\n\t-- v_BondsLossRatio>=11.1 AND v_BondsLossRatio<15.1,\r\n\t-- 2.0,\r\n\t-- v_BondsLossRatio>=15.1 AND v_BondsLossRatio<20.1,\r\n\t-- 1.0,\r\n\t-- 0)\n\tDECODE(TRUE,\n\t\tv_BondsLossRatio < 5.1, 4.0,\n\t\tv_BondsLossRatio >= 5.1 \n\t\tAND v_BondsLossRatio < 11.1, 3.0,\n\t\tv_BondsLossRatio >= 11.1 \n\t\tAND v_BondsLossRatio < 15.1, 2.0,\n\t\tv_BondsLossRatio >= 15.1 \n\t\tAND v_BondsLossRatio < 20.1, 1.0,\n\t\t0\n\t) AS v_BondsLossRatioBonusRate,\n\t-- *INF*: IIF(i_NSIDirectWrittenPremium<100000,ROUND(i_NSIDirectWrittenPremium*.1,4),0)\n\tIFF(i_NSIDirectWrittenPremium < 100000,\n\t\tROUND(i_NSIDirectWrittenPremium * .1, 4\n\t\t),\n\t\t0\n\t) AS v_NSIExpense,\n\t-- *INF*: ROUND(i_ProfitSharingEligibleDirectEarnedPremium-i_DividendAmount,4)\n\tROUND(i_ProfitSharingEligibleDirectEarnedPremium - i_DividendAmount, 4\n\t) AS v_NetDirectEarnedPremium,\n\t-- *INF*: ROUND(i_ProfitSharingEligibleDirectIncurredLoss-lkp_StopLossAdjustmentAmountOccurrence-lkp_StopLossAdjustmentAmountCatastrophe+0.00,4)\r\n\t-- \r\n\t-- --had v_NSIExpense value were 0.00 was present as it was removed for PROD-8913 issue 4\n\tROUND(i_ProfitSharingEligibleDirectIncurredLoss - lkp_StopLossAdjustmentAmountOccurrence - lkp_StopLossAdjustmentAmountCatastrophe + 0.00, 4\n\t) AS v_NetDirectIncurredLoss,\n\t-- *INF*: DECODE(TRUE,v_NetDirectEarnedPremium<=0,100,v_NetDirectIncurredLoss<=0,0,ROUND(v_NetDirectIncurredLoss/v_NetDirectEarnedPremium*100,4))\n\tDECODE(TRUE,\n\t\tv_NetDirectEarnedPremium <= 0, 100,\n\t\tv_NetDirectIncurredLoss <= 0, 0,\n\t\tROUND(v_NetDirectIncurredLoss / v_NetDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_NetLossRatio,\n\t-- *INF*: :LKP.LKP_SUPPROFTSHARINGBONUS(TO_INTEGER(ROUND(i_ProfitSharingEligibleDirectWrittenPremium)),ROUND(v_NetLossRatio,1))\n\tLKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.ProfitSharingBonusRate AS v_lkpProfitSharingBonusRate,\n\t-- *INF*: :LKP.LKP_AGENCYBONUSRATES(in_LegalPrimaryAgencyCode)\n\tLKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode.BonusRate AS v_lkpProfitSharingBonusRateOverride,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(v_lkpProfitSharingBonusRate),0,\r\n\t-- v_WB_AgencyYears<=2 and i_ProfitSharingEligibleDirectWrittenPremium>=100000,v_lkpProfitSharingBonusRate,\r\n\t-- v_WB_AgencyYears > 2 and i_ProfitSharingEligibleDirectWrittenPremium>=250000,v_lkpProfitSharingBonusRate,0)\n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRate IS NULL, 0,\n\t\tv_WB_AgencyYears <= 2 \n\t\tAND i_ProfitSharingEligibleDirectWrittenPremium >= 100000, v_lkpProfitSharingBonusRate,\n\t\tv_WB_AgencyYears > 2 \n\t\tAND i_ProfitSharingEligibleDirectWrittenPremium >= 250000, v_lkpProfitSharingBonusRate,\n\t\t0\n\t) AS v_ProfitSharingBonusRate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(v_lkpProfitSharingBonusRateOverride),\r\n\t-- v_ProfitSharingBonusRate,\r\n\t-- v_lkpProfitSharingBonusRateOverride)\r\n\t-- -- use Agency Bonus Rate override if it exists else default to calculated Bonus Rate\n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRateOverride IS NULL, v_ProfitSharingBonusRate,\n\t\tv_lkpProfitSharingBonusRateOverride\n\t) AS v_ProfitSharingBonusRateFinal,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  NOT ISNULL(v_lkpProfitSharingBonusRateOverride),'0',\r\n\t-- v_ProfitSharingGuaranteeFlag)\r\n\t-- --No Guarantee Fee applies for Agency Bonus Rate overrides\n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRateOverride IS NOT NULL, '0',\n\t\tv_ProfitSharingGuaranteeFlag\n\t) AS v_ProfitSharingGuaranteeFlagFinal,\n\t-- *INF*: ROUND((v_NetDirectEarnedPremium * v_ProfitSharingBonusRateFinal)/100,4)\r\n\t-- \r\n\t-- --v_ProfitSharingBonusRate)/100,4)\r\n\t-- -- Modified to use override rate if it exists else use computed rate\r\n\t-- -- Made change as part of fix for EDWP-1812, as BonusRate is %, we need divide by 100.\n\tROUND(( v_NetDirectEarnedPremium * v_ProfitSharingBonusRateFinal \n\t\t) / 100, 4\n\t) AS v_ProfitSharingCommission,\n\t-- *INF*: IIF(IN(v_RunMonth,'10','11','12'),i_GuaranteeFee_Sep,IIF(v_ProfitSharingGuaranteeFlagFinal='1',ROUND(v_ProfitSharingCommission * .15,4),0))\r\n\t-- \r\n\t-- --modified to check for guarantee flag final to allow for bonus rate overrides \n\tIFF(v_RunMonth IN ('10','11','12'),\n\t\ti_GuaranteeFee_Sep,\n\t\tIFF(v_ProfitSharingGuaranteeFlagFinal = '1',\n\t\t\tROUND(v_ProfitSharingCommission * .15, 4\n\t\t\t),\n\t\t\t0\n\t\t)\n\t) AS v_GuaranteeFee,\n\t-- *INF*: ROUND(v_ProfitSharingCommission-v_GuaranteeFee,4)\n\tROUND(v_ProfitSharingCommission - v_GuaranteeFee, 4\n\t) AS v_NetProfitSharingAmount,\n\t-- *INF*: IIF(IN(v_RunMonth,'10','11','12'),IIF(i_GuaranteedCommission>v_NetProfitSharingAmount,i_GuaranteedCommission,v_NetProfitSharingAmount),v_NetProfitSharingAmount)\n\tIFF(v_RunMonth IN ('10','11','12'),\n\t\tIFF(i_GuaranteedCommission > v_NetProfitSharingAmount,\n\t\t\ti_GuaranteedCommission,\n\t\t\tv_NetProfitSharingAmount\n\t\t),\n\t\tv_NetProfitSharingAmount\n\t) AS v_ProfitSharingPaymentAmount,\n\tEXP_Data_PrimaryAgency.O_BondsDirectIncurredLossSameYear AS i_BondsDirectIncurredLossSameYear,\n\t-- *INF*: DECODE(TRUE,i_BondsDirectEarnedPremium<=0,100,i_BondsDirectIncurredLossSameYear <=0,0,ROUND(i_BondsDirectIncurredLossSameYear/ i_BondsDirectEarnedPremium  * 100,4))\n\tDECODE(TRUE,\n\t\ti_BondsDirectEarnedPremium <= 0, 100,\n\t\ti_BondsDirectIncurredLossSameYear <= 0, 0,\n\t\tROUND(i_BondsDirectIncurredLossSameYear / i_BondsDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_BondsGrowthLossRatio,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditId,\n\ti_SalesDivisionDimId AS o_SalesDivisionDimId,\n\ti_AgencyDimId AS o_AgencyDimID,\n\ti_RunDateID AS o_RunDateID,\n\ti_BondsDirectWrittenPremium AS o_BondsDirectWrittenPremium,\n\ti_NSIDirectWrittenPremium AS o_NSIDirectWrittenPremium,\n\ti_ProfitSharingEligibleDirectWrittenPremium AS o_ProfitSharingEligibleDirectWrittenPremium,\n\ti_BondsDirectEarnedPremium AS o_BondsDirectEarnedPremium,\n\ti_NSIEarnedPremium AS o_NSIEarnedPremium,\n\ti_ProfitSharingEligibleDirectEarnedPremium AS o_ProfitSharingEligibleDirectEarnedPremium,\n\ti_BondsDirectIncurredLoss AS o_BondsDirectIncurredLoss,\n\ti_ProfitSharingEligibleDirectIncurredLoss AS o_ProfitSharingEligibleDirectIncurredLoss,\n\tv_BondsGrowthAmount AS o_BondsGrowthAmount,\n\tv_BondsGrowthBonusRate AS o_BondsGrowthBonusRate,\n\t-- *INF*: ROUND(i_BondsDirectWrittenPremium*v_BondsGrowthBonusRate/100,4)\n\tROUND(i_BondsDirectWrittenPremium * v_BondsGrowthBonusRate / 100, 4\n\t) AS o_BondsGrowthBonusAmount,\n\tv_BondsLossRatio AS o_BondsLossRatio,\n\tv_BondsLossRatioBonusRate AS o_BondsLossRatioBonusRate,\n\t-- *INF*: ROUND(v_BondsLossRatioBonusRate*i_BondsDirectEarnedPremium/100,4)\n\tROUND(v_BondsLossRatioBonusRate * i_BondsDirectEarnedPremium / 100, 4\n\t) AS o_BondsLossRatioBonusAmount,\n\ti_RegularCommission AS o_RegularCommission,\n\ti_DividendAmount AS o_DividendAmount,\n\t-- *INF*: 0\r\n\t-- --v_NSIExpense removed this variable condition for PROD-8913 issue #4 and defaulting the value to 0\n\t0 AS o_NSIExpense,\n\tlkp_StopLossAdjustmentAmountOccurrence AS o_StopLossAdjustmentClaimOccurrenceAmount,\n\tlkp_StopLossAdjustmentAmountCatastrophe AS o_StopLossAdjustmentCatastropheAmount,\n\tv_NetDirectEarnedPremium AS o_NetDirectEarnedPremium,\n\tv_NetDirectIncurredLoss AS o_NetDirectIncurredLoss,\n\tv_NetLossRatio AS o_NetLossRatio,\n\tv_ProfitSharingBonusRateFinal AS o_ProfitSharingBonusRate,\n\tv_ProfitSharingCommission AS o_ProfitSharingCommission,\n\t-- *INF*: IIF(isnull(v_GuaranteeFee),0,v_GuaranteeFee)\n\tIFF(v_GuaranteeFee IS NULL,\n\t\t0,\n\t\tv_GuaranteeFee\n\t) AS o_GuaranteeFee,\n\t-- *INF*: IIF(isnull(v_NetProfitSharingAmount),0,v_NetProfitSharingAmount)\n\tIFF(v_NetProfitSharingAmount IS NULL,\n\t\t0,\n\t\tv_NetProfitSharingAmount\n\t) AS o_NetProfitSharingAmount,\n\t-- *INF*: IIF(isnull(v_ProfitSharingPaymentAmount),0,v_ProfitSharingPaymentAmount)\n\tIFF(v_ProfitSharingPaymentAmount IS NULL,\n\t\t0,\n\t\tv_ProfitSharingPaymentAmount\n\t) AS o_ProfitSharingPaymentAmount,\n\tv_ProfitSharingGuaranteeFlagFinal AS o_ProfitSharingGuaranteeFlag,\n\t'GROUP' AS GroupExperienceIndicator,\n\ti_BondsDirectIncurredLossSameYear AS o_BondsDirectIncurredLossSameYear,\n\tv_BondsGrowthLossRatio AS o_BondsGrowthLossRatio\n\tFROM EXP_Data_PrimaryAgency\n\tLEFT JOIN LKP_AgencyProfitSharing_GuaranteedCommission\n\tON LKP_AgencyProfitSharing_GuaranteedCommission.LegalPrimaryAgencyCode = EXP_Data_PrimaryAgency.LegalPrimaryAgencyCode\n\tLEFT JOIN LKP_Agency_Primary_Profit_SharingFlag\n\tON LKP_Agency_Primary_Profit_SharingFlag.AgencyDimId = EXP_Data_PrimaryAgency.AgencyDimId\n\tLEFT JOIN LKP_LastYearAgencyProfitSharingYTDFact_GROUP\n\tON LKP_LastYearAgencyProfitSharingYTDFact_GROUP.AgencyCode = EXP_Data_PrimaryAgency.LegalPrimaryAgencyCode AND LKP_LastYearAgencyProfitSharingYTDFact_GROUP.RunDateId = EXP_Data_PrimaryAgency.LastYearRunDateID\n\tLEFT JOIN LKP_SUPPROFTSHARINGBONUS LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1\n\tON LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.DirectWrittenPremiumLow = CAST(ROUND(i_ProfitSharingEligibleDirectWrittenPremium\n) AS INTEGER)\n\tAND LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.DirectWrittenPremiumHigh = ROUND(v_NetLossRatio, 1\n)\n\n\tLEFT JOIN LKP_AGENCYBONUSRATES LKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode\n\tON LKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode.Agency = in_LegalPrimaryAgencyCode\n\n),\nLKP_AgencyProfitSharingYTDFact_PrimaryAgency AS (\n\tSELECT\n\tAgencyProfitSharingYTDFactId,\n\tSalesDivisionDimID,\n\tAgencyDimId,\n\tRunDateId\n\tFROM (\n\t\tselect AgencyDimId AS AgencyDimId,\r\n\t\tSalesDivisionDimID AS SalesDivisionDimID,\r\n\t\tRunDateId AS RunDateId,\r\n\t\tAgencyProfitSharingYTDFactId  AS AgencyProfitSharingYTDFactId\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact af\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd \r\n\t\ton af.RunDateId=cd.clndr_id \r\n\t\tand cd.clndr_yr=YEAR(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))\r\n\t\tand af.GroupExperienceIndicator='GROUP'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SalesDivisionDimID,AgencyDimId,RunDateId ORDER BY AgencyProfitSharingYTDFactId DESC) = 1\n),\nRTR_Insert_Update_PrimaryAgency AS (\n\tSELECT\n\tLKP_AgencyProfitSharingYTDFact_PrimaryAgency.AgencyProfitSharingYTDFactId,\n\tEXP_CalValues_PrimaryAgency.o_AuditId AS AuditId,\n\tEXP_CalValues_PrimaryAgency.o_SalesDivisionDimId AS SalesDivisionDimID,\n\tEXP_CalValues_PrimaryAgency.o_AgencyDimID AS AgencyDimId,\n\tEXP_CalValues_PrimaryAgency.o_RunDateID AS RunDateId,\n\tEXP_CalValues_PrimaryAgency.o_BondsDirectWrittenPremium AS BondsDirectWrittenPremium,\n\tEXP_CalValues_PrimaryAgency.o_NSIDirectWrittenPremium AS NSIDirectWrittenPremium,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingEligibleDirectWrittenPremium AS ProfitSharingEligibleDirectWrittenPremium,\n\tEXP_CalValues_PrimaryAgency.o_BondsDirectEarnedPremium AS BondsDirectEarnedPremium,\n\tEXP_CalValues_PrimaryAgency.o_NSIEarnedPremium AS NSIEarnedPremium,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingEligibleDirectEarnedPremium AS ProfitSharingEligibleDirectEarnedPremium,\n\tEXP_CalValues_PrimaryAgency.o_BondsDirectIncurredLoss AS BondsDirectIncurredLoss,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingEligibleDirectIncurredLoss AS ProfitSharingEligibleDirectIncurredLoss,\n\tEXP_CalValues_PrimaryAgency.o_BondsGrowthAmount AS BondsGrowthAmount,\n\tEXP_CalValues_PrimaryAgency.o_BondsGrowthBonusRate AS BondsGrowthBonusRate,\n\tEXP_CalValues_PrimaryAgency.o_BondsGrowthBonusAmount AS BondsGrowthBonusAmount,\n\tEXP_CalValues_PrimaryAgency.o_BondsLossRatio AS BondsLossRatio,\n\tEXP_CalValues_PrimaryAgency.o_BondsLossRatioBonusRate AS BondsLossRatioBonusRate,\n\tEXP_CalValues_PrimaryAgency.o_BondsLossRatioBonusAmount AS BondsLossRatioBonusAmount,\n\tEXP_CalValues_PrimaryAgency.o_RegularCommission AS RegularCommission,\n\tEXP_CalValues_PrimaryAgency.o_DividendAmount AS DividendAmount,\n\tEXP_CalValues_PrimaryAgency.o_NSIExpense AS NSIExpense,\n\tEXP_CalValues_PrimaryAgency.o_StopLossAdjustmentClaimOccurrenceAmount AS StopLossAdjustmentClaimOccurrenceAmount,\n\tEXP_CalValues_PrimaryAgency.o_StopLossAdjustmentCatastropheAmount AS StopLossAdjustmentCatastropheAmount,\n\tEXP_CalValues_PrimaryAgency.o_NetDirectEarnedPremium AS NetDirectEarnedPremium,\n\tEXP_CalValues_PrimaryAgency.o_NetDirectIncurredLoss AS NetDirectIncurredLoss,\n\tEXP_CalValues_PrimaryAgency.o_NetLossRatio AS NetLossRatio,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingBonusRate AS ProfitSharingBonusRate,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingCommission AS ProfitSharingCommission,\n\tEXP_CalValues_PrimaryAgency.o_GuaranteeFee AS GuaranteeFee,\n\tEXP_CalValues_PrimaryAgency.o_NetProfitSharingAmount AS NetProfitSharingAmount,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingPaymentAmount AS ProfitSharingPaymentAmount,\n\tEXP_CalValues_PrimaryAgency.o_ProfitSharingGuaranteeFlag AS ProfitSharingGuaranteeFlag,\n\tEXP_CalValues_PrimaryAgency.GroupExperienceIndicator,\n\tEXP_CalValues_PrimaryAgency.o_BondsDirectIncurredLossSameYear AS BondsDirectIncurredLossSameYear,\n\tEXP_CalValues_PrimaryAgency.o_BondsGrowthLossRatio AS BondsGrowthLossRatio\n\tFROM EXP_CalValues_PrimaryAgency\n\tLEFT JOIN LKP_AgencyProfitSharingYTDFact_PrimaryAgency\n\tON LKP_AgencyProfitSharingYTDFact_PrimaryAgency.SalesDivisionDimID = EXP_CalValues_PrimaryAgency.o_SalesDivisionDimId AND LKP_AgencyProfitSharingYTDFact_PrimaryAgency.AgencyDimId = EXP_CalValues_PrimaryAgency.o_AgencyDimID AND LKP_AgencyProfitSharingYTDFact_PrimaryAgency.RunDateId = EXP_CalValues_PrimaryAgency.o_RunDateID\n),\nRTR_Insert_Update_PrimaryAgency_INSERT AS (SELECT * FROM RTR_Insert_Update_PrimaryAgency WHERE ISNULL(AgencyProfitSharingYTDFactId)),\nRTR_Insert_Update_PrimaryAgency_DEFAULT1 AS (SELECT * FROM RTR_Insert_Update_PrimaryAgency WHERE NOT ( (ISNULL(AgencyProfitSharingYTDFactId)) )),\nTGT_AgencyProfitSharingYTDFact_PrimaryAgency_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact\n\t(AuditId, SalesDivisionDimID, AgencyDimId, RunDateId, BondsDirectWrittenPremium, NSIDirectWrittenPremium, ProfitSharingEligibleDirectWrittenPremium, BondsDirectEarnedPremium, NSIEarnedPremium, ProfitSharingEligibleDirectEarnedPremium, BondsDirectIncurredLoss, ProfitSharingEligibleDirectIncurredLoss, BondsGrowthAmount, BondsGrowthBonusRate, BondsGrowthBonusAmount, BondsLossRatio, BondsLossRatioBonusRate, BondsLossRatioBonusAmount, RegularCommission, DividendAmount, NSIExpense, StopLossAdjustmentClaimOccurrenceAmount, StopLossAdjustmentCatastropheAmount, NetDirectEarnedPremium, NetDirectIncurredLoss, NetLossRatio, ProfitSharingBonusRate, ProfitSharingCommission, GuaranteeFee, NetProfitSharingAmount, ProfitSharingPaymentAmount, ProfitSharingGuaranteeFlag, GroupExperienceIndicator, BondsDirectIncurredLossSameYear, BondsGrowthLossRatio)\n\tSELECT \n\tAUDITID, \n\tSALESDIVISIONDIMID, \n\tAGENCYDIMID, \n\tRUNDATEID, \n\tBONDSDIRECTWRITTENPREMIUM, \n\tNSIDIRECTWRITTENPREMIUM, \n\tPROFITSHARINGELIGIBLEDIRECTWRITTENPREMIUM, \n\tBONDSDIRECTEARNEDPREMIUM, \n\tNSIEARNEDPREMIUM, \n\tPROFITSHARINGELIGIBLEDIRECTEARNEDPREMIUM, \n\tBONDSDIRECTINCURREDLOSS, \n\tPROFITSHARINGELIGIBLEDIRECTINCURREDLOSS, \n\tBONDSGROWTHAMOUNT, \n\tBONDSGROWTHBONUSRATE, \n\tBONDSGROWTHBONUSAMOUNT, \n\tBONDSLOSSRATIO, \n\tBONDSLOSSRATIOBONUSRATE, \n\tBONDSLOSSRATIOBONUSAMOUNT, \n\tREGULARCOMMISSION, \n\tDIVIDENDAMOUNT, \n\tNSIEXPENSE, \n\tSTOPLOSSADJUSTMENTCLAIMOCCURRENCEAMOUNT, \n\tSTOPLOSSADJUSTMENTCATASTROPHEAMOUNT, \n\tNETDIRECTEARNEDPREMIUM, \n\tNETDIRECTINCURREDLOSS, \n\tNETLOSSRATIO, \n\tPROFITSHARINGBONUSRATE, \n\tPROFITSHARINGCOMMISSION, \n\tGUARANTEEFEE, \n\tNETPROFITSHARINGAMOUNT, \n\tPROFITSHARINGPAYMENTAMOUNT, \n\tPROFITSHARINGGUARANTEEFLAG, \n\tGROUPEXPERIENCEINDICATOR, \n\tBONDSDIRECTINCURREDLOSSSAMEYEAR, \n\tBONDSGROWTHLOSSRATIO\n\tFROM RTR_Insert_Update_PrimaryAgency_INSERT\n\n\t------------ POST SQL ----------\n\tif exists(select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A \r\n\t  join @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD ON \r\n\t  CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=12)\r\n\t  BEGIN\r\n\t  UPDATE A\r\n\t  SET A.ProfitSharingPaymentAmount=B.ProfitSharingPaymentAmount\r\n\t  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A\r\n\t  JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD\r\n\t  ON A.RunDateId=CD.clndr_id\r\n\t  JOIN \r\n\t  (SELECT SalesDivisionDimID,AgencyDimId,ProfitSharingPaymentAmount \r\n\t  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A\r\n\t  JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD\r\n\t  ON A.RunDateId=CD.clndr_id AND CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=9)B\r\n\t  ON A.AgencyDimId=B.AgencyDimId \r\n\t  AND A.SalesDivisionDimID=B.SalesDivisionDimID\r\n\t  AND A.ProfitSharingPaymentAmount<B.ProfitSharingPaymentAmount\r\n\t  WHERE CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=12\r\n\t  END\n\t-------------------------------\n\n\n),\nLKP_AgencyDim_LegalPrimary_AppointedDate AS (\n\tSELECT\n\tAgencyAppointedDate,\n\tin_LegalPrimaryAgencyCode,\n\tAgencyCode\n\tFROM (\n\t\tselect \r\n\t\tagy.Agencycode as Agencycode,\r\n\t\tagy.AgencyAppointedDate as AgencyAppointedDate\r\n\t\t\r\n\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim agy\r\n\t\twhere agy.CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AgencyCode ORDER BY AgencyAppointedDate) = 1\n),\nEXP_CalValues AS (\n\tSELECT\n\tEXP_DataCollect_Individual_Group.RunDateID AS i_RunDateID,\n\tEXP_DataCollect_Individual_Group.LastYearRunDateID AS i_LastYearRunDateID,\n\tEXP_DataCollect_Individual_Group.AgencyDimID AS i_AgencyDimID,\n\tEXP_DataCollect_Individual_Group.SalesDivisionDimId AS i_SalesDivisionDimId,\n\tEXP_DataCollect_Individual_Group.BondsDirectWrittenPremium AS i_BondsDirectWrittenPremium,\n\tEXP_DataCollect_Individual_Group.NSIDirectWrittenPremium AS i_NSIDirectWrittenPremium,\n\tEXP_DataCollect_Individual_Group.ProfitSharingEligibleDirectWrittenPremium AS i_ProfitSharingEligibleDirectWrittenPremium,\n\tEXP_DataCollect_Individual_Group.RegularCommission AS i_RegularCommission,\n\tEXP_DataCollect_Individual_Group.BondsDirectEarnedPremium AS i_BondsDirectEarnedPremium,\n\tEXP_DataCollect_Individual_Group.NSIEarnedPremium AS i_NSIEarnedPremium,\n\tEXP_DataCollect_Individual_Group.ProfitSharingEligibleDirectEarnedPremium AS i_ProfitSharingEligibleDirectEarnedPremium,\n\tEXP_DataCollect_Individual_Group.BondsDirectIncurredLoss AS i_BondsDirectIncurredLoss,\n\tEXP_DataCollect_Individual_Group.BondsDirectIncurredLossSameYear AS i_BondsDirectIncurredLossSameYear,\n\tEXP_DataCollect_Individual_Group.ProfitSharingEligibleDirectIncurredLoss AS i_ProfitSharingEligibleDirectIncurredLoss,\n\tEXP_DataCollect_Individual_Group.DividendAmount AS i_DividendAmount,\n\tEXP_DataCollect_Individual_Group.lkp_LastYearYTDBondsDirectWrittenPremium,\n\tEXP_DataCollect_Individual_Group.lkp_StopLossAdjustmentAmountOccurrence AS StopLossAdjustmentAmountOccurrence,\n\tEXP_DataCollect_Individual_Group.AgencyDimId_cat,\n\tEXP_DataCollect_Individual_Group.lkp_StopLossAdjustmentAmountCatastrophe AS StopLossAdjustmentAmountCatastrophe,\n\t-- *INF*: IIF(i_AgencyDimID=AgencyDimId_cat,StopLossAdjustmentAmountCatastrophe,0)\n\tIFF(i_AgencyDimID = AgencyDimId_cat,\n\t\tStopLossAdjustmentAmountCatastrophe,\n\t\t0\n\t) AS lkp_StopLossAdjustmentAmountCatastrophe,\n\tEXP_DataCollect_Individual_Group.lkp_ProfitSharingGuaranteeFlag,\n\tLKP_AgencyDim_LegalPrimary_AppointedDate.AgencyAppointedDate,\n\tLKP_AgencyDim_LegalPrimary_AppointedDate.in_LegalPrimaryAgencyCode,\n\t-- *INF*: SUBSTR(in_LegalPrimaryAgencyCode,1,2)\n\tSUBSTR(in_LegalPrimaryAgencyCode, 1, 2\n\t) AS v_NSI_Agencies,\n\t-- *INF*: DATE_DIFF(RunDate,AgencyAppointedDate,'YY')\n\tDATEDIFF(YEAR,RunDate,AgencyAppointedDate) AS v_WB_AgencyYears,\n\tEXP_DataCollect_Individual_Group.RunDate,\n\t-- *INF*: GET_DATE_PART(RunDate,'MM')\n\tDATE_PART(RunDate, 'MM'\n\t) AS v_RunMonth,\n\t0 AS GuaranteedCommission,\n\t-- *INF*: ROUND(i_BondsDirectWrittenPremium-lkp_LastYearYTDBondsDirectWrittenPremium,4)\n\tROUND(i_BondsDirectWrittenPremium - lkp_LastYearYTDBondsDirectWrittenPremium, 4\n\t) AS v_BondsGrowthAmount,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_BondsGrowthAmount<25000.00,\r\n\t-- 0.00,\r\n\t-- v_BondsGrowthAmount>=25000.00 AND v_BondsGrowthAmount<50001.00,\r\n\t-- 1.0,\r\n\t-- v_BondsGrowthAmount>=50001.00 AND v_BondsGrowthAmount<100001.00,\r\n\t-- 2.0,\r\n\t-- v_BondsGrowthAmount>=100001.00 AND v_BondsGrowthAmount<150001.00,\r\n\t-- 3.0,\r\n\t-- v_BondsGrowthAmount>=150001.00,\r\n\t-- 4.0)\r\n\t-- \n\tDECODE(TRUE,\n\t\tv_BondsGrowthAmount < 25000.00, 0.00,\n\t\tv_BondsGrowthAmount >= 25000.00 \n\t\tAND v_BondsGrowthAmount < 50001.00, 1.0,\n\t\tv_BondsGrowthAmount >= 50001.00 \n\t\tAND v_BondsGrowthAmount < 100001.00, 2.0,\n\t\tv_BondsGrowthAmount >= 100001.00 \n\t\tAND v_BondsGrowthAmount < 150001.00, 3.0,\n\t\tv_BondsGrowthAmount >= 150001.00, 4.0\n\t) AS v_BondsGrowthBonusRate,\n\t-- *INF*: lkp_ProfitSharingGuaranteeFlag\r\n\t-- \r\n\t-- --DECODE(lkp_ProfitSharingGuaranteeFlag,'T','1','F','0','')\n\tlkp_ProfitSharingGuaranteeFlag AS v_ProfitSharingGuaranteeFlag,\n\t-- *INF*: DECODE(TRUE,i_BondsDirectEarnedPremium<=0,100,i_BondsDirectIncurredLoss <=0,0,ROUND(i_BondsDirectIncurredLoss/ i_BondsDirectEarnedPremium  * 100,4))\n\tDECODE(TRUE,\n\t\ti_BondsDirectEarnedPremium <= 0, 100,\n\t\ti_BondsDirectIncurredLoss <= 0, 0,\n\t\tROUND(i_BondsDirectIncurredLoss / i_BondsDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_BondsLossRatio,\n\t-- *INF*: DECODE(TRUE,i_BondsDirectEarnedPremium<=0,100,i_BondsDirectIncurredLossSameYear <=0,0,ROUND(i_BondsDirectIncurredLossSameYear/ i_BondsDirectEarnedPremium  * 100,4))\n\tDECODE(TRUE,\n\t\ti_BondsDirectEarnedPremium <= 0, 100,\n\t\ti_BondsDirectIncurredLossSameYear <= 0, 0,\n\t\tROUND(i_BondsDirectIncurredLossSameYear / i_BondsDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_BondsGrowthLossRatio,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_BondsLossRatio<5.1,\r\n\t-- 4.0,\r\n\t-- v_BondsLossRatio>=5.1 AND v_BondsLossRatio<11.1,\r\n\t-- 3.0,\r\n\t-- v_BondsLossRatio>=11.1 AND v_BondsLossRatio<15.1,\r\n\t-- 2.0,\r\n\t-- v_BondsLossRatio>=15.1 AND v_BondsLossRatio<20.1,\r\n\t-- 1.0,\r\n\t-- 0)\n\tDECODE(TRUE,\n\t\tv_BondsLossRatio < 5.1, 4.0,\n\t\tv_BondsLossRatio >= 5.1 \n\t\tAND v_BondsLossRatio < 11.1, 3.0,\n\t\tv_BondsLossRatio >= 11.1 \n\t\tAND v_BondsLossRatio < 15.1, 2.0,\n\t\tv_BondsLossRatio >= 15.1 \n\t\tAND v_BondsLossRatio < 20.1, 1.0,\n\t\t0\n\t) AS v_BondsLossRatioBonusRate,\n\t-- *INF*: IIF(i_NSIDirectWrittenPremium<100000,ROUND(i_NSIDirectWrittenPremium*.1,4),0)\n\tIFF(i_NSIDirectWrittenPremium < 100000,\n\t\tROUND(i_NSIDirectWrittenPremium * .1, 4\n\t\t),\n\t\t0\n\t) AS v_NSIExpense,\n\t-- *INF*: ROUND(i_ProfitSharingEligibleDirectEarnedPremium-i_DividendAmount,4)\n\tROUND(i_ProfitSharingEligibleDirectEarnedPremium - i_DividendAmount, 4\n\t) AS v_NetDirectEarnedPremium,\n\t-- *INF*: ROUND(i_ProfitSharingEligibleDirectIncurredLoss-StopLossAdjustmentAmountOccurrence-lkp_StopLossAdjustmentAmountCatastrophe+0.00,4)\r\n\t-- \r\n\t-- --had v_NSIExpense value were 0.00 was present as it was removed for PROD-8913 issue 4\n\tROUND(i_ProfitSharingEligibleDirectIncurredLoss - StopLossAdjustmentAmountOccurrence - lkp_StopLossAdjustmentAmountCatastrophe + 0.00, 4\n\t) AS v_NetDirectIncurredLoss,\n\t-- *INF*: DECODE(TRUE,v_NetDirectEarnedPremium<=0,100,v_NetDirectIncurredLoss<=0,0,ROUND(v_NetDirectIncurredLoss/v_NetDirectEarnedPremium*100,4))\n\tDECODE(TRUE,\n\t\tv_NetDirectEarnedPremium <= 0, 100,\n\t\tv_NetDirectIncurredLoss <= 0, 0,\n\t\tROUND(v_NetDirectIncurredLoss / v_NetDirectEarnedPremium * 100, 4\n\t\t)\n\t) AS v_NetLossRatio,\n\t-- *INF*: :LKP.LKP_SUPPROFTSHARINGBONUS(TO_INTEGER(ROUND(i_ProfitSharingEligibleDirectWrittenPremium)),ROUND(v_NetLossRatio,1))\n\tLKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.ProfitSharingBonusRate AS v_lkpProfitSharingBonusRate,\n\t-- *INF*: :LKP.LKP_AGENCYBONUSRATES(in_LegalPrimaryAgencyCode)\n\tLKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode.BonusRate AS v_lkpProfitSharingBonusRateOverride,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(v_lkpProfitSharingBonusRate),0,\r\n\t-- v_WB_AgencyYears<=2 and i_ProfitSharingEligibleDirectWrittenPremium>=100000,v_lkpProfitSharingBonusRate,\r\n\t-- v_WB_AgencyYears > 2 and i_ProfitSharingEligibleDirectWrittenPremium>=250000,v_lkpProfitSharingBonusRate,0)\n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRate IS NULL, 0,\n\t\tv_WB_AgencyYears <= 2 \n\t\tAND i_ProfitSharingEligibleDirectWrittenPremium >= 100000, v_lkpProfitSharingBonusRate,\n\t\tv_WB_AgencyYears > 2 \n\t\tAND i_ProfitSharingEligibleDirectWrittenPremium >= 250000, v_lkpProfitSharingBonusRate,\n\t\t0\n\t) AS v_ProfitSharingBonusRate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(v_lkpProfitSharingBonusRateOverride),\r\n\t-- v_ProfitSharingBonusRate,\r\n\t-- v_lkpProfitSharingBonusRateOverride)\r\n\t-- -- use Agency Bonus Rate override if it exists else default to calculated Bonus Rate\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRateOverride IS NULL, v_ProfitSharingBonusRate,\n\t\tv_lkpProfitSharingBonusRateOverride\n\t) AS v_ProfitSharingBonusRateFinal,\n\t-- *INF*: ROUND((v_NetDirectEarnedPremium * \r\n\t-- v_ProfitSharingBonusRateFinal)/100,4)\r\n\t-- --v_ProfitSharingBonusRate)/100,4)\r\n\t-- -- Modified to use override rate if it exists else use computed rate\r\n\t-- -- Made change as part of fix for EDWP-1812, as BonusRate is %, we need divide by 100.\n\tROUND(( v_NetDirectEarnedPremium * v_ProfitSharingBonusRateFinal \n\t\t) / 100, 4\n\t) AS v_ProfitSharingCommission,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  NOT ISNULL(v_lkpProfitSharingBonusRateOverride),'0',\r\n\t-- v_ProfitSharingGuaranteeFlag)\r\n\t-- --No Guarantee Fee applies for Agency Bonus Rate overrides\n\tDECODE(TRUE,\n\t\tv_lkpProfitSharingBonusRateOverride IS NOT NULL, '0',\n\t\tv_ProfitSharingGuaranteeFlag\n\t) AS v_ProfitSharingGuaranteeFlagFinal,\n\t-- *INF*: IIF(IN(v_RunMonth,'10','11','12'),i_GuaranteeFee_Sep,IIF(v_ProfitSharingGuaranteeFlagFinal='1',ROUND(v_ProfitSharingCommission * .15,4),0))\r\n\t-- --modified to check for guarantee flag final to allow for bonus rate overrides \n\tIFF(v_RunMonth IN ('10','11','12'),\n\t\ti_GuaranteeFee_Sep,\n\t\tIFF(v_ProfitSharingGuaranteeFlagFinal = '1',\n\t\t\tROUND(v_ProfitSharingCommission * .15, 4\n\t\t\t),\n\t\t\t0\n\t\t)\n\t) AS v_GuaranteeFee,\n\t-- *INF*: ROUND(v_ProfitSharingCommission-v_GuaranteeFee,4)\n\tROUND(v_ProfitSharingCommission - v_GuaranteeFee, 4\n\t) AS v_NetProfitSharingAmount,\n\t-- *INF*: IIF(IN(v_RunMonth,'10','11','12'),IIF(i_GuaranteedCommission>v_NetProfitSharingAmount,i_GuaranteedCommission,v_NetProfitSharingAmount),v_NetProfitSharingAmount)\n\tIFF(v_RunMonth IN ('10','11','12'),\n\t\tIFF(i_GuaranteedCommission > v_NetProfitSharingAmount,\n\t\t\ti_GuaranteedCommission,\n\t\t\tv_NetProfitSharingAmount\n\t\t),\n\t\tv_NetProfitSharingAmount\n\t) AS v_ProfitSharingPaymentAmount,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditId,\n\ti_SalesDivisionDimId AS o_SalesDivisionDimId,\n\ti_AgencyDimID AS o_AgencyDimID,\n\ti_RunDateID AS o_RunDateID,\n\ti_BondsDirectWrittenPremium AS o_BondsDirectWrittenPremium,\n\ti_NSIDirectWrittenPremium AS o_NSIDirectWrittenPremium,\n\ti_ProfitSharingEligibleDirectWrittenPremium AS o_ProfitSharingEligibleDirectWrittenPremium,\n\ti_BondsDirectEarnedPremium AS o_BondsDirectEarnedPremium,\n\ti_NSIEarnedPremium AS o_NSIEarnedPremium,\n\ti_ProfitSharingEligibleDirectEarnedPremium AS o_ProfitSharingEligibleDirectEarnedPremium,\n\ti_BondsDirectIncurredLoss AS o_BondsDirectIncurredLoss,\n\ti_ProfitSharingEligibleDirectIncurredLoss AS o_ProfitSharingEligibleDirectIncurredLoss,\n\tv_BondsGrowthAmount AS o_BondsGrowthAmount,\n\tv_BondsGrowthBonusRate AS o_BondsGrowthBonusRate,\n\t-- *INF*: ROUND(i_BondsDirectWrittenPremium*v_BondsGrowthBonusRate/100,4)\n\tROUND(i_BondsDirectWrittenPremium * v_BondsGrowthBonusRate / 100, 4\n\t) AS o_BondsGrowthBonusAmount,\n\tv_BondsLossRatio AS o_BondsLossRatio,\n\tv_BondsLossRatioBonusRate AS o_BondsLossRatioBonusRate,\n\t-- *INF*: ROUND(v_BondsLossRatioBonusRate*i_BondsDirectEarnedPremium/100,4)\n\tROUND(v_BondsLossRatioBonusRate * i_BondsDirectEarnedPremium / 100, 4\n\t) AS o_BondsLossRatioBonusAmount,\n\ti_RegularCommission AS o_RegularCommission,\n\ti_DividendAmount AS o_DividendAmount,\n\t-- *INF*: 0\r\n\t-- \r\n\t-- --v_NSIExpense removed this variable condition for PROD-8913 issue #4 and defaulting the value to 0\n\t0 AS o_NSIExpense,\n\tStopLossAdjustmentAmountOccurrence AS o_StopLossAdjustmentClaimOccurrenceAmount,\n\tlkp_StopLossAdjustmentAmountCatastrophe AS o_StopLossAdjustmentCatastropheAmount,\n\tv_NetDirectEarnedPremium AS o_NetDirectEarnedPremium,\n\tv_NetDirectIncurredLoss AS o_NetDirectIncurredLoss,\n\tv_NetLossRatio AS o_NetLossRatio,\n\tv_ProfitSharingBonusRateFinal AS o_ProfitSharingBonusRate,\n\tv_ProfitSharingCommission AS o_ProfitSharingCommission,\n\t-- *INF*: IIF(isnull(v_GuaranteeFee),0,v_GuaranteeFee)\n\tIFF(v_GuaranteeFee IS NULL,\n\t\t0,\n\t\tv_GuaranteeFee\n\t) AS o_GuaranteeFee,\n\t-- *INF*: IIF(isnull(v_NetProfitSharingAmount),0,v_NetProfitSharingAmount)\n\tIFF(v_NetProfitSharingAmount IS NULL,\n\t\t0,\n\t\tv_NetProfitSharingAmount\n\t) AS o_NetProfitSharingAmount,\n\t-- *INF*: IIF(isnull(v_ProfitSharingPaymentAmount),0,v_ProfitSharingPaymentAmount)\n\tIFF(v_ProfitSharingPaymentAmount IS NULL,\n\t\t0,\n\t\tv_ProfitSharingPaymentAmount\n\t) AS o_ProfitSharingPaymentAmount,\n\tv_ProfitSharingGuaranteeFlagFinal AS o_ProfitSharingGuaranteeFlag,\n\t'INDIVIDUAL' AS GroupExperienceIndicator,\n\ti_BondsDirectIncurredLoss AS o_BondsDirectIncurredLossSameYear,\n\tv_BondsGrowthLossRatio AS o_BondsGrowthLossRatio\n\tFROM EXP_DataCollect_Individual_Group\n\tLEFT JOIN LKP_AgencyDim_LegalPrimary_AppointedDate\n\tON LKP_AgencyDim_LegalPrimary_AppointedDate.AgencyCode = EXP_DataCollect_Individual_Group.O_LegalPrimaryAgencyCode\n\tLEFT JOIN LKP_SUPPROFTSHARINGBONUS LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1\n\tON LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.DirectWrittenPremiumLow = CAST(ROUND(i_ProfitSharingEligibleDirectWrittenPremium\n) AS INTEGER)\n\tAND LKP_SUPPROFTSHARINGBONUS_TO_INTEGER_ROUND_i_ProfitSharingEligibleDirectWrittenPremium_ROUND_v_NetLossRatio_1.DirectWrittenPremiumHigh = ROUND(v_NetLossRatio, 1\n)\n\n\tLEFT JOIN LKP_AGENCYBONUSRATES LKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode\n\tON LKP_AGENCYBONUSRATES_in_LegalPrimaryAgencyCode.Agency = in_LegalPrimaryAgencyCode\n\n),\nLKP_AgencyProfitSharingYTDFact AS (\n\tSELECT\n\tAgencyProfitSharingYTDFactId,\n\tSalesDivisionDimID,\n\tAgencyDimId,\n\tRunDateId\n\tFROM (\n\t\tselect AgencyDimId AS AgencyDimId,\r\n\t\tSalesDivisionDimID AS SalesDivisionDimID,\r\n\t\tRunDateId AS RunDateId,\r\n\t\tAgencyProfitSharingYTDFactId  AS AgencyProfitSharingYTDFactId\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact af\r\n\t\tjoin @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim cd \r\n\t\ton af.RunDateId=cd.clndr_id \r\n\t\tand cd.clndr_yr=YEAR(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0)))\r\n\t\tand af.GroupExperienceIndicator='INDIVIDUAL'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SalesDivisionDimID,AgencyDimId,RunDateId ORDER BY AgencyProfitSharingYTDFactId DESC) = 1\n),\nRTR_Insert_Update AS (\n\tSELECT\n\tLKP_AgencyProfitSharingYTDFact.AgencyProfitSharingYTDFactId,\n\tEXP_CalValues.o_AuditId AS AuditId,\n\tEXP_CalValues.o_SalesDivisionDimId AS SalesDivisionDimID,\n\tEXP_CalValues.o_AgencyDimID AS AgencyDimId,\n\tEXP_CalValues.o_RunDateID AS RunDateId,\n\tEXP_CalValues.o_BondsDirectWrittenPremium AS BondsDirectWrittenPremium,\n\tEXP_CalValues.o_NSIDirectWrittenPremium AS NSIDirectWrittenPremium,\n\tEXP_CalValues.o_ProfitSharingEligibleDirectWrittenPremium AS ProfitSharingEligibleDirectWrittenPremium,\n\tEXP_CalValues.o_BondsDirectEarnedPremium AS BondsDirectEarnedPremium,\n\tEXP_CalValues.o_NSIEarnedPremium AS NSIEarnedPremium,\n\tEXP_CalValues.o_ProfitSharingEligibleDirectEarnedPremium AS ProfitSharingEligibleDirectEarnedPremium,\n\tEXP_CalValues.o_BondsDirectIncurredLoss AS BondsDirectIncurredLoss,\n\tEXP_CalValues.o_ProfitSharingEligibleDirectIncurredLoss AS ProfitSharingEligibleDirectIncurredLoss,\n\tEXP_CalValues.o_BondsGrowthAmount AS BondsGrowthAmount,\n\tEXP_CalValues.o_BondsGrowthBonusRate AS BondsGrowthBonusRate,\n\tEXP_CalValues.o_BondsGrowthBonusAmount AS BondsGrowthBonusAmount,\n\tEXP_CalValues.o_BondsLossRatio AS BondsLossRatio,\n\tEXP_CalValues.o_BondsLossRatioBonusRate AS BondsLossRatioBonusRate,\n\tEXP_CalValues.o_BondsLossRatioBonusAmount AS BondsLossRatioBonusAmount,\n\tEXP_CalValues.o_RegularCommission AS RegularCommission,\n\tEXP_CalValues.o_DividendAmount AS DividendAmount,\n\tEXP_CalValues.o_NSIExpense AS NSIExpense,\n\tEXP_CalValues.o_StopLossAdjustmentClaimOccurrenceAmount AS StopLossAdjustmentClaimOccurrenceAmount,\n\tEXP_CalValues.o_StopLossAdjustmentCatastropheAmount AS StopLossAdjustmentCatastropheAmount,\n\tEXP_CalValues.o_NetDirectEarnedPremium AS NetDirectEarnedPremium,\n\tEXP_CalValues.o_NetDirectIncurredLoss AS NetDirectIncurredLoss,\n\tEXP_CalValues.o_NetLossRatio AS NetLossRatio,\n\tEXP_CalValues.o_ProfitSharingBonusRate AS ProfitSharingBonusRate,\n\tEXP_CalValues.o_ProfitSharingCommission AS ProfitSharingCommission,\n\tEXP_CalValues.o_GuaranteeFee AS GuaranteeFee,\n\tEXP_CalValues.o_NetProfitSharingAmount AS NetProfitSharingAmount,\n\tEXP_CalValues.o_ProfitSharingPaymentAmount AS ProfitSharingPaymentAmount,\n\tEXP_CalValues.o_ProfitSharingGuaranteeFlag AS ProfitSharingGuaranteeFlag,\n\tEXP_CalValues.GroupExperienceIndicator,\n\tEXP_CalValues.o_BondsDirectIncurredLossSameYear AS BondsDirectIncurredLossSameYear,\n\tEXP_CalValues.o_BondsGrowthLossRatio AS BondsGrowthLossRatio\n\tFROM EXP_CalValues\n\tLEFT JOIN LKP_AgencyProfitSharingYTDFact\n\tON LKP_AgencyProfitSharingYTDFact.SalesDivisionDimID = EXP_CalValues.o_SalesDivisionDimId AND LKP_AgencyProfitSharingYTDFact.AgencyDimId = EXP_CalValues.o_AgencyDimID AND LKP_AgencyProfitSharingYTDFact.RunDateId = EXP_CalValues.o_RunDateID\n),\nRTR_Insert_Update_INSERT AS (SELECT * FROM RTR_Insert_Update WHERE ISNULL(AgencyProfitSharingYTDFactId)),\nRTR_Insert_Update_DEFAULT1 AS (SELECT * FROM RTR_Insert_Update WHERE NOT ( (ISNULL(AgencyProfitSharingYTDFactId)) )),\nUPD_Target AS (\n\tSELECT\n\tAgencyProfitSharingYTDFactId, \n\tAuditId, \n\tSalesDivisionDimID, \n\tAgencyDimId, \n\tRunDateId, \n\tBondsDirectWrittenPremium, \n\tNSIDirectWrittenPremium, \n\tProfitSharingEligibleDirectWrittenPremium, \n\tBondsDirectEarnedPremium, \n\tNSIEarnedPremium, \n\tProfitSharingEligibleDirectEarnedPremium, \n\tBondsDirectIncurredLoss, \n\tProfitSharingEligibleDirectIncurredLoss, \n\tBondsGrowthAmount, \n\tBondsGrowthBonusRate, \n\tBondsGrowthBonusAmount, \n\tBondsLossRatio, \n\tBondsLossRatioBonusRate, \n\tBondsLossRatioBonusAmount, \n\tRegularCommission, \n\tDividendAmount, \n\tNSIExpense, \n\tStopLossAdjustmentClaimOccurrenceAmount, \n\tStopLossAdjustmentCatastropheAmount, \n\tNetDirectEarnedPremium, \n\tNetDirectIncurredLoss, \n\tNetLossRatio, \n\tProfitSharingBonusRate, \n\tProfitSharingCommission, \n\tGuaranteeFee, \n\tNetProfitSharingAmount, \n\tProfitSharingPaymentAmount, \n\tProfitSharingGuaranteeFlag, \n\tGroupExperienceIndicator AS GroupExperienceIndicator2, \n\tBondsDirectIncurredLossSameYear AS BondsDirectIncurredLossSameYear2, \n\tBondsGrowthLossRatio AS BondsGrowthLossRatio2\n\tFROM RTR_Insert_Update_DEFAULT1\n),\nTGT_AgencyProfitSharingYTDFact_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact AS T\n\tUSING UPD_Target AS S\n\tON T.AgencyProfitSharingYTDFactId = S.AgencyProfitSharingYTDFactId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditId = S.AuditId, T.SalesDivisionDimID = S.SalesDivisionDimID, T.AgencyDimId = S.AgencyDimId, T.RunDateId = S.RunDateId, T.BondsDirectWrittenPremium = S.BondsDirectWrittenPremium, T.NSIDirectWrittenPremium = S.NSIDirectWrittenPremium, T.ProfitSharingEligibleDirectWrittenPremium = S.ProfitSharingEligibleDirectWrittenPremium, T.BondsDirectEarnedPremium = S.BondsDirectEarnedPremium, T.NSIEarnedPremium = S.NSIEarnedPremium, T.ProfitSharingEligibleDirectEarnedPremium = S.ProfitSharingEligibleDirectEarnedPremium, T.BondsDirectIncurredLoss = S.BondsDirectIncurredLoss, T.ProfitSharingEligibleDirectIncurredLoss = S.ProfitSharingEligibleDirectIncurredLoss, T.BondsGrowthAmount = S.BondsGrowthAmount, T.BondsGrowthBonusRate = S.BondsGrowthBonusRate, T.BondsGrowthBonusAmount = S.BondsGrowthBonusAmount, T.BondsLossRatio = S.BondsLossRatio, T.BondsLossRatioBonusRate = S.BondsLossRatioBonusRate, T.BondsLossRatioBonusAmount = S.BondsLossRatioBonusAmount, T.RegularCommission = S.RegularCommission, T.DividendAmount = S.DividendAmount, T.NSIExpense = S.NSIExpense, T.StopLossAdjustmentClaimOccurrenceAmount = S.StopLossAdjustmentClaimOccurrenceAmount, T.StopLossAdjustmentCatastropheAmount = S.StopLossAdjustmentCatastropheAmount, T.NetDirectEarnedPremium = S.NetDirectEarnedPremium, T.NetDirectIncurredLoss = S.NetDirectIncurredLoss, T.NetLossRatio = S.NetLossRatio, T.ProfitSharingBonusRate = S.ProfitSharingBonusRate, T.ProfitSharingCommission = S.ProfitSharingCommission, T.GuaranteeFee = S.GuaranteeFee, T.NetProfitSharingAmount = S.NetProfitSharingAmount, T.ProfitSharingPaymentAmount = S.ProfitSharingPaymentAmount, T.ProfitSharingGuaranteeFlag = S.ProfitSharingGuaranteeFlag, T.GroupExperienceIndicator = S.GroupExperienceIndicator2, T.BondsDirectIncurredLossSameYear = S.BondsDirectIncurredLossSameYear2, T.BondsGrowthLossRatio = S.BondsGrowthLossRatio2\n),\nTGT_AgencyProfitSharingYTDFact_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact\n\t(AuditId, SalesDivisionDimID, AgencyDimId, RunDateId, BondsDirectWrittenPremium, NSIDirectWrittenPremium, ProfitSharingEligibleDirectWrittenPremium, BondsDirectEarnedPremium, NSIEarnedPremium, ProfitSharingEligibleDirectEarnedPremium, BondsDirectIncurredLoss, ProfitSharingEligibleDirectIncurredLoss, BondsGrowthAmount, BondsGrowthBonusRate, BondsGrowthBonusAmount, BondsLossRatio, BondsLossRatioBonusRate, BondsLossRatioBonusAmount, RegularCommission, DividendAmount, NSIExpense, StopLossAdjustmentClaimOccurrenceAmount, StopLossAdjustmentCatastropheAmount, NetDirectEarnedPremium, NetDirectIncurredLoss, NetLossRatio, ProfitSharingBonusRate, ProfitSharingCommission, GuaranteeFee, NetProfitSharingAmount, ProfitSharingPaymentAmount, ProfitSharingGuaranteeFlag, GroupExperienceIndicator, BondsDirectIncurredLossSameYear, BondsGrowthLossRatio)\n\tSELECT \n\tAUDITID, \n\tSALESDIVISIONDIMID, \n\tAGENCYDIMID, \n\tRUNDATEID, \n\tBONDSDIRECTWRITTENPREMIUM, \n\tNSIDIRECTWRITTENPREMIUM, \n\tPROFITSHARINGELIGIBLEDIRECTWRITTENPREMIUM, \n\tBONDSDIRECTEARNEDPREMIUM, \n\tNSIEARNEDPREMIUM, \n\tPROFITSHARINGELIGIBLEDIRECTEARNEDPREMIUM, \n\tBONDSDIRECTINCURREDLOSS, \n\tPROFITSHARINGELIGIBLEDIRECTINCURREDLOSS, \n\tBONDSGROWTHAMOUNT, \n\tBONDSGROWTHBONUSRATE, \n\tBONDSGROWTHBONUSAMOUNT, \n\tBONDSLOSSRATIO, \n\tBONDSLOSSRATIOBONUSRATE, \n\tBONDSLOSSRATIOBONUSAMOUNT, \n\tREGULARCOMMISSION, \n\tDIVIDENDAMOUNT, \n\tNSIEXPENSE, \n\tSTOPLOSSADJUSTMENTCLAIMOCCURRENCEAMOUNT, \n\tSTOPLOSSADJUSTMENTCATASTROPHEAMOUNT, \n\tNETDIRECTEARNEDPREMIUM, \n\tNETDIRECTINCURREDLOSS, \n\tNETLOSSRATIO, \n\tPROFITSHARINGBONUSRATE, \n\tPROFITSHARINGCOMMISSION, \n\tGUARANTEEFEE, \n\tNETPROFITSHARINGAMOUNT, \n\tPROFITSHARINGPAYMENTAMOUNT, \n\tPROFITSHARINGGUARANTEEFLAG, \n\tGROUPEXPERIENCEINDICATOR, \n\tBONDSDIRECTINCURREDLOSSSAMEYEAR, \n\tBONDSGROWTHLOSSRATIO\n\tFROM RTR_Insert_Update_INSERT\n\n\t------------ POST SQL ----------\n\tif exists(select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A \r\n\t  join @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD ON \r\n\t  CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=12)\r\n\t  BEGIN\r\n\t  UPDATE A\r\n\t  SET A.ProfitSharingPaymentAmount=B.ProfitSharingPaymentAmount\r\n\t  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A\r\n\t  JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD\r\n\t  ON A.RunDateId=CD.clndr_id\r\n\t  JOIN \r\n\t  (SELECT SalesDivisionDimID,AgencyDimId,ProfitSharingPaymentAmount \r\n\t  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact A\r\n\t  JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CD\r\n\t  ON A.RunDateId=CD.clndr_id AND CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=9)B\r\n\t  ON A.AgencyDimId=B.AgencyDimId \r\n\t  AND A.SalesDivisionDimID=B.SalesDivisionDimID\r\n\t  AND A.ProfitSharingPaymentAmount<B.ProfitSharingPaymentAmount\r\n\t  WHERE CD.clndr_yr=year(dateadd(dd,-1,dateadd(mm,DATEDIFF(MM,0,GETDATE())-@{pipeline().parameters.NO_OF_MONTHS},0))) and CD.clndr_month=12\r\n\t  END\n\t-------------------------------\n\n\n),\nUPD_Target_PrimaryAgency AS (\n\tSELECT\n\tAgencyProfitSharingYTDFactId, \n\tAuditId, \n\tSalesDivisionDimID, \n\tAgencyDimId, \n\tRunDateId, \n\tBondsDirectWrittenPremium, \n\tNSIDirectWrittenPremium, \n\tProfitSharingEligibleDirectWrittenPremium, \n\tBondsDirectEarnedPremium, \n\tNSIEarnedPremium, \n\tProfitSharingEligibleDirectEarnedPremium, \n\tBondsDirectIncurredLoss, \n\tProfitSharingEligibleDirectIncurredLoss, \n\tBondsGrowthAmount, \n\tBondsGrowthBonusRate, \n\tBondsGrowthBonusAmount, \n\tBondsLossRatio, \n\tBondsLossRatioBonusRate, \n\tBondsLossRatioBonusAmount, \n\tRegularCommission, \n\tDividendAmount, \n\tNSIExpense, \n\tStopLossAdjustmentClaimOccurrenceAmount, \n\tStopLossAdjustmentCatastropheAmount, \n\tNetDirectEarnedPremium, \n\tNetDirectIncurredLoss, \n\tNetLossRatio, \n\tProfitSharingBonusRate, \n\tProfitSharingCommission, \n\tGuaranteeFee, \n\tNetProfitSharingAmount, \n\tProfitSharingPaymentAmount, \n\tProfitSharingGuaranteeFlag, \n\tGroupExperienceIndicator AS GroupExperienceIndicator2, \n\tBondsDirectIncurredLossSameYear AS BondsDirectIncurredLossSameYear2, \n\tBondsGrowthLossRatio AS BondsGrowthLossRatio2\n\tFROM RTR_Insert_Update_PrimaryAgency_DEFAULT1\n),\nTGT_AgencyProfitSharingYTDFact_PrimaryAgency_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.AgencyProfitSharingYTDFact AS T\n\tUSING UPD_Target_PrimaryAgency AS S\n\tON T.AgencyProfitSharingYTDFactId = S.AgencyProfitSharingYTDFactId\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditId = S.AuditId, T.SalesDivisionDimID = S.SalesDivisionDimID, T.AgencyDimId = S.AgencyDimId, T.RunDateId = S.RunDateId, T.BondsDirectWrittenPremium = S.BondsDirectWrittenPremium, T.NSIDirectWrittenPremium = S.NSIDirectWrittenPremium, T.ProfitSharingEligibleDirectWrittenPremium = S.ProfitSharingEligibleDirectWrittenPremium, T.BondsDirectEarnedPremium = S.BondsDirectEarnedPremium, T.NSIEarnedPremium = S.NSIEarnedPremium, T.ProfitSharingEligibleDirectEarnedPremium = S.ProfitSharingEligibleDirectEarnedPremium, T.BondsDirectIncurredLoss = S.BondsDirectIncurredLoss, T.ProfitSharingEligibleDirectIncurredLoss = S.ProfitSharingEligibleDirectIncurredLoss, T.BondsGrowthAmount = S.BondsGrowthAmount, T.BondsGrowthBonusRate = S.BondsGrowthBonusRate, T.BondsGrowthBonusAmount = S.BondsGrowthBonusAmount, T.BondsLossRatio = S.BondsLossRatio, T.BondsLossRatioBonusRate = S.BondsLossRatioBonusRate, T.BondsLossRatioBonusAmount = S.BondsLossRatioBonusAmount, T.RegularCommission = S.RegularCommission, T.DividendAmount = S.DividendAmount, T.NSIExpense = S.NSIExpense, T.StopLossAdjustmentClaimOccurrenceAmount = S.StopLossAdjustmentClaimOccurrenceAmount, T.StopLossAdjustmentCatastropheAmount = S.StopLossAdjustmentCatastropheAmount, T.NetDirectEarnedPremium = S.NetDirectEarnedPremium, T.NetDirectIncurredLoss = S.NetDirectIncurredLoss, T.NetLossRatio = S.NetLossRatio, T.ProfitSharingBonusRate = S.ProfitSharingBonusRate, T.ProfitSharingCommission = S.ProfitSharingCommission, T.GuaranteeFee = S.GuaranteeFee, T.NetProfitSharingAmount = S.NetProfitSharingAmount, T.ProfitSharingPaymentAmount = S.ProfitSharingPaymentAmount, T.ProfitSharingGuaranteeFlag = S.ProfitSharingGuaranteeFlag, T.GroupExperienceIndicator = S.GroupExperienceIndicator2, T.BondsDirectIncurredLossSameYear = S.BondsDirectIncurredLossSameYear2, T.BondsGrowthLossRatio = S.BondsGrowthLossRatio2\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244879"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893608"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7545034"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 12:24:09"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/02/2023 12:45:34"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_DATA_MART_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_DATA_MART_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "RUNDATESTART": {
                "type": "string",
                "defaultValue": "DATEADD(YEAR,datediff(year,0,getdate()),0)"
            },
            "RUNDATEEND": {
                "type": "string",
                "defaultValue": "dateadd(dd,-1,DATEADD(MM,DATEDIFF(mm,0,getdate()),0))"
            },
            "EDW_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_OWNER_V3": {
                "type": "string",
                "defaultValue": "V3"
            },
            "TARGET_TABLE_OWNER_V3": {
                "type": "string",
                "defaultValue": "V3"
            },
            "FILTERCLAUSE": {
                "type": "string",
                "defaultValue": "clndr_month=GET_DATE_PART(ADD_TO_DATE(sysdate,'mm',-1),'mm')"
            },
            "REASON_AMENDED_CODE": {
                "type": "string",
                "defaultValue": "in ('CWO','COL')"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "0"
            },
            "NO_OF_YEARS": {
                "type": "string",
                "defaultValue": "0"
            },
            "WHERECLAUSEEARNEDPREMIUM": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERECLAUSELOSS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERECLAUSEPREMIUM": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERECLAUSEDIVIDEND": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataMart/"
        },
        "annotations": []
    }
}