{
    "name": "m_CLM_DW_LOAD_sup_claim_payment_workflow",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_sup_claim_payment_workflow",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_SupPaymentWorkflowStage AS (\n\tSELECT\n\t\tSupPaymentWorkflowId,\n\t\tPaymentWorkflow\n\tFROM SupPaymentWorkflowStage\n),\nEXP_Source AS (\n\tSELECT\n\tSupPaymentWorkflowId,\n\tPaymentWorkflow\n\tFROM SQ_SupPaymentWorkflowStage\n),\nLKP_sup_claim_payment_workflow AS (\n\tSELECT\n\tsup_claim_payment_workflow_id,\n\tpayment_workflow,\n\tsource_payment_workflow_id\n\tFROM (\n\t\tSELECT sup_claim_payment_workflow_id as sup_claim_payment_workflow_id,\r\n\t\t\tsource_payment_workflow_id as source_payment_workflow_id,\r\n\t\t\tpayment_workflow as payment_workflow\r\n\t\tFROM dbo.sup_claim_payment_workflow \r\n\t\tWHERE crrnt_snpsht_flag=1 \r\n\t\tORDER BY source_payment_workflow_id, eff_from_date desc\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY source_payment_workflow_id ORDER BY sup_claim_payment_workflow_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tEXP_Source.SupPaymentWorkflowId,\n\tEXP_Source.PaymentWorkflow,\n\tLKP_sup_claim_payment_workflow.sup_claim_payment_workflow_id AS lkp_sup_claim_payment_workflow_id,\n\tLKP_sup_claim_payment_workflow.payment_workflow AS lkp_payment_workflow,\n\t-- *INF*: IIF(ISNULL(lkp_sup_claim_payment_workflow_id),\r\n\t-- \t'NEW',\r\n\t-- \tIIF(:UDF.DEFAULT_VALUE_FOR_STRINGS(PaymentWorkflow) != lkp_payment_workflow,\r\n\t-- \t\t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(lkp_sup_claim_payment_workflow_id IS NULL, 'NEW', IFF(:UDF.DEFAULT_VALUE_FOR_STRINGS(PaymentWorkflow) != lkp_payment_workflow, 'UPDATE', 'NOCHANGE')) AS v_ChangeFlag,\n\tv_ChangeFlag AS o_ChangeFlag,\n\t-- *INF*: IIF(v_ChangeFlag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t--     SYSDATE)\n\tIFF(v_ChangeFlag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\tSYSDATE AS CurrentDate\n\tFROM EXP_Source\n\tLEFT JOIN LKP_sup_claim_payment_workflow\n\tON LKP_sup_claim_payment_workflow.source_payment_workflow_id = EXP_Source.SupPaymentWorkflowId\n),\nFIL_NewOrChanged AS (\n\tSELECT\n\tSupPaymentWorkflowId, \n\tPaymentWorkflow, \n\to_ChangeFlag AS ChangeFlag, \n\teff_from_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\tCurrentDate\n\tFROM EXP_Detect_Changes\n\tWHERE ChangeFlag = 'NEW' or ChangeFlag = 'UPDATE'\n),\nsup_claim_payment_workflow_Insert AS (\n\tINSERT INTO sup_claim_payment_workflow\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, created_date, modified_date, source_payment_workflow_id, payment_workflow)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tCurrentDate AS CREATED_DATE, \n\tCurrentDate AS MODIFIED_DATE, \n\tSupPaymentWorkflowId AS SOURCE_PAYMENT_WORKFLOW_ID, \n\tPaymentWorkflow AS PAYMENT_WORKFLOW\n\tFROM FIL_NewOrChanged\n),\nSQ_sup_claim_payment_workflow_Type2 AS (\n\tSELECT a.sup_claim_payment_workflow_id,\r\n\t\ta.source_payment_workflow_id,\r\n\t\ta.eff_from_date,\r\n\t\ta.eff_to_date\r\n\tFROM dbo.sup_claim_payment_workflow a\r\n\tWHERE EXISTS (\r\n\t\t\tSELECT 1\r\n\t\t\tFROM dbo.sup_claim_payment_workflow b\r\n\t\t\tWHERE b.crrnt_snpsht_flag = 1\r\n\t\t\t\tAND a.source_payment_workflow_id = b.source_payment_workflow_id\r\n\t\t\tGROUP BY b.source_payment_workflow_id\r\n\t\t\tHAVING COUNT(1) > 1\r\n\t\t\t) \r\n\tORDER BY a.source_payment_workflow_id,\r\n\t\ta.eff_from_date DESC\n),\nEXP_eff_to_date AS (\n\tSELECT\n\tsup_claim_payment_workflow_id,\n\tsource_payment_workflow_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tsource_payment_workflow_id = v_prev_row_source_payment_workflow_id, \r\n\t-- \t\tADD_TO_DATE(v_prev_row_eff_from_date,'SS',-1), \r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tsource_payment_workflow_id = v_prev_row_source_payment_workflow_id, ADD_TO_DATE(v_prev_row_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tsource_payment_workflow_id AS v_prev_row_source_payment_workflow_id,\n\teff_from_date AS v_prev_row_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS CurrentDate\n\tFROM SQ_sup_claim_payment_workflow_Type2\n),\nFIL_First_Row_in_AK_Group AS (\n\tSELECT\n\tsup_claim_payment_workflow_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tCurrentDate\n\tFROM EXP_eff_to_date\n\tWHERE orig_eff_to_date != eff_to_date\n),\nEXP_RowsToExpire AS (\n\tSELECT\n\tsup_claim_payment_workflow_id,\n\teff_to_date,\n\tcrrnt_snpsht_flag,\n\tCurrentDate\n\tFROM FIL_First_Row_in_AK_Group\n),\nUPD_eff_to_date AS (\n\tSELECT\n\tsup_claim_payment_workflow_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tCurrentDate\n\tFROM EXP_RowsToExpire\n),\nsup_claim_payment_workflow_Update AS (\n\tMERGE INTO sup_claim_payment_workflow AS T\n\tUSING UPD_eff_to_date AS S\n\tON T.sup_claim_payment_workflow_id = S.sup_claim_payment_workflow_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.CurrentDate\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}