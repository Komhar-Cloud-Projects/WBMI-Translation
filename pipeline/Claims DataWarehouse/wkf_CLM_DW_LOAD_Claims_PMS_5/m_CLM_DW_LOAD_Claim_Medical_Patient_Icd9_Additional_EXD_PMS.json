{
    "name": "m_CLM_DW_LOAD_Claim_Medical_Patient_Icd9_Additional_EXD_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Medical_Patient_Icd9_Additional__00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_claim_medical_stage AS (\n\tSELECT\n\t\tclaim_medical_stage_id,\n\t\tinjured_party_id,\n\t\tmedicare_hicn,\n\t\tmedicare_elig,\n\t\tcms_date_of_incid,\n\t\tcause_code,\n\t\tdiag_code1,\n\t\tdiag_code2,\n\t\tdiag_code3,\n\t\tdiag_code4,\n\t\tdiag_code5,\n\t\tdiag_code6,\n\t\tdiag_code7,\n\t\tdiag_code8,\n\t\tdiag_code9,\n\t\tdiag_code10,\n\t\tdiag_code11,\n\t\tdiag_code12,\n\t\tdiag_code13,\n\t\tdiag_code14,\n\t\tdiag_code15,\n\t\tdiag_code16,\n\t\tdiag_code17,\n\t\tdiag_code18,\n\t\tdiag_code19,\n\t\tself_insd_ind,\n\t\tself_insd_type,\n\t\tself_insd_fst_nm,\n\t\tself_insd_last_nm,\n\t\tself_insd_dba_nm,\n\t\tself_insd_lgl_nm,\n\t\tproduct_liab_ind,\n\t\tprod_generic_nm,\n\t\tprod_brand_nm,\n\t\tprod_manufacturer,\n\t\tprod_allege_harm,\n\t\tinj_par_rep_firm,\n\t\texceed_claim_key,\n\t\texceed_claimnt_key,\n\t\tpms_policy_sym,\n\t\tpms_policy_num,\n\t\tpms_policy_mod,\n\t\tpms_date_of_loss,\n\t\tpms_loss_occurence,\n\t\tpms_loss_claimant,\n\t\tcms_source_system_id,\n\t\tclmt1_rep_firm,\n\t\tclmt2_rep_firm,\n\t\tclmt3_rep_firm,\n\t\tclmt4_rep_firm,\n\t\tcreated_ts,\n\t\tcreated_user_id,\n\t\tmodified_ts,\n\t\tmodified_user_id,\n\t\textract_date,\n\t\tas_of_date,\n\t\trecord_count,\n\t\tsource_system_id,\n\t\tquery_requested,\n\t\tquery_request_date\n\tFROM claim_medical_stage\n),\nEXP_Values AS (\n\tSELECT\n\texceed_claim_key,\n\texceed_claimnt_key,\n\tpms_policy_sym,\n\tpms_policy_num,\n\tpms_policy_mod,\n\tpms_date_of_loss,\n\tpms_loss_occurence,\n\tpms_loss_claimant,\n\tcms_source_system_id,\n\t-- *INF*: replaceChr(0,to_char(pms_date_of_loss),'/','')\n\treplaceChr(0, to_char(pms_date_of_loss), '/', '') AS v_pms_date_of_loss,\n\t-- *INF*: IIF(length(exceed_claim_key)>0,ltrim(rtrim(exceed_claim_key)),\r\n\t-- IIF(length(pms_policy_sym)>0,ltrim(rtrim(pms_policy_sym || pms_policy_num || pms_policy_mod || v_pms_date_of_loss || pms_loss_occurence)),\r\n\t-- 'N/A'))\r\n\t-- \n\tIFF(length(exceed_claim_key) > 0, ltrim(rtrim(exceed_claim_key)), IFF(length(pms_policy_sym) > 0, ltrim(rtrim(pms_policy_sym || pms_policy_num || pms_policy_mod || v_pms_date_of_loss || pms_loss_occurence)), 'N/A')) AS claim_key1,\n\t-- *INF*: IIF(length(exceed_claim_key)>0,ltrim(rtrim(exceed_claimnt_key)),\r\n\t-- IIF(length(pms_policy_sym)>0,ltrim(rtrim(pms_policy_sym || pms_policy_num || pms_policy_mod || v_pms_date_of_loss || pms_loss_occurence || pms_loss_claimant || 'CMT')),\r\n\t-- 'N/A'))\n\tIFF(length(exceed_claim_key) > 0, ltrim(rtrim(exceed_claimnt_key)), IFF(length(pms_policy_sym) > 0, ltrim(rtrim(pms_policy_sym || pms_policy_num || pms_policy_mod || v_pms_date_of_loss || pms_loss_occurence || pms_loss_claimant || 'CMT')), 'N/A')) AS claimnt_key1,\n\tdiag_code2,\n\tdiag_code3,\n\tdiag_code4,\n\tdiag_code5,\n\tdiag_code6,\n\tdiag_code7,\n\tdiag_code8,\n\tdiag_code9,\n\tdiag_code10,\n\tdiag_code11,\n\tdiag_code12,\n\tdiag_code13,\n\tdiag_code14,\n\tdiag_code15,\n\tdiag_code16,\n\tdiag_code17,\n\tdiag_code18,\n\tdiag_code19\n\tFROM SQ_claim_medical_stage\n),\nLKP_Claim_Med_AK_ID AS (\n\tSELECT\n\tclaim_med_ak_id,\n\tclaimant_num,\n\tclaim_party_role_code\n\tFROM (\n\t\tSELECT \r\n\t\tCM.claim_med_ak_id as claim_med_ak_id, \r\n\t\tLTRIM(RTRIM(CO.claim_occurrence_key)) as claimant_num, \r\n\t\tLTRIM(RTRIM(CP.claim_party_key)) as claim_party_role_code\r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical CM,\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence CPO,\r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party CP, \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence CO\r\n\t\tWHERE \r\n\t\tCM.claim_party_occurrence_ak_id = CPO.claim_party_occurrence_ak_id\r\n\t\tAND CO.claim_occurrence_ak_id = CPO.claim_occurrence_ak_id  \r\n\t\tAND CP.claim_party_ak_id = CPO.claim_party_ak_id \r\n\t\tAND CPO.claim_party_role_code IN ('CMT' , 'CLMT')\r\n\t\tAND CO.crrnt_snpsht_flag = 1\r\n\t\tAND CP.crrnt_snpsht_flag = 1\r\n\t\tAND CPO.crrnt_snpsht_flag = 1\r\n\t\tAND CM.crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_num,claim_party_role_code ORDER BY claim_med_ak_id) = 1\n),\nNRM_Values AS (\n),\nEXP_Default_values AS (\n\tSELECT\n\tclaim_med_ak_id,\n\tGCID_diag_code_val AS in_diag_code,\n\tin_diag_code + 1 AS diag_code,\n\tdiag_code_val AS in_diag_code_val,\n\t-- *INF*: LTRIM(RTRIM(in_diag_code_val))\n\tLTRIM(RTRIM(in_diag_code_val)) AS diag_code_val\n\tFROM NRM_Values\n),\nFIL_Valid_Codes AS (\n\tSELECT\n\tclaim_med_ak_id, \n\tdiag_code, \n\tdiag_code_val\n\tFROM EXP_Default_values\n\tWHERE IIF(ISNULL(diag_code_val),FALSE,TRUE)\n),\nLKP_Target AS (\n\tSELECT\n\tclaim_med_patient_diag_add_ak_id,\n\tclaim_med_ak_id,\n\tpatient_add_code,\n\tpatient_diag_code\n\tFROM (\n\t\tSELECT \r\n\t\ta.claim_med_patient_diag_add_ak_id as claim_med_patient_diag_add_ak_id, \r\n\t\tltrim(rtrim(a.patient_diag_code)) as patient_diag_code, \r\n\t\ta.claim_med_ak_id as claim_med_ak_id, \r\n\t\ta.patient_add_code as patient_add_code \r\n\t\tFROM \r\n\t\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_patient_diagnosis_additional a\r\n\t\tWHERE\r\n\t\t\tcrrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_med_ak_id,patient_add_code ORDER BY claim_med_patient_diag_add_ak_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tFIL_Valid_Codes.claim_med_ak_id,\n\tFIL_Valid_Codes.diag_code,\n\tFIL_Valid_Codes.diag_code_val,\n\tLKP_Target.claim_med_patient_diag_add_ak_id,\n\tLKP_Target.patient_diag_code,\n\t-- *INF*: iif(isnull(claim_med_patient_diag_add_ak_id),'NEW',\t\r\n\t-- \tiif (diag_code_val <> patient_diag_code,\r\n\t--  'UPDATE','NOCHANGE'))\n\tIFF(claim_med_patient_diag_add_ak_id IS NULL, 'NEW', IFF(diag_code_val <> patient_diag_code, 'UPDATE', 'NOCHANGE')) AS v_Changed_Flag,\n\t1 AS Crrnt_Snpsht_Flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Audit_Id,\n\t-- *INF*: IIF(v_Changed_Flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(v_Changed_Flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS Eff_From_Date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS Eff_To_Date,\n\tv_Changed_Flag AS Changed_Flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS Created_Date,\n\tSYSDATE AS Modified_Date\n\tFROM FIL_Valid_Codes\n\tLEFT JOIN LKP_Target\n\tON LKP_Target.claim_med_ak_id = FIL_Valid_Codes.claim_med_ak_id AND LKP_Target.patient_add_code = FIL_Valid_Codes.diag_code\n),\nFIL_Insert AS (\n\tSELECT\n\tCrrnt_Snpsht_Flag, \n\tAudit_Id, \n\tEff_From_Date, \n\tEff_To_Date, \n\tChanged_Flag, \n\tSOURCE_SYSTEM_ID, \n\tCreated_Date, \n\tModified_Date, \n\tclaim_med_ak_id, \n\tdiag_code, \n\tdiag_code_val, \n\tclaim_med_patient_diag_add_ak_id\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_Flag='NEW'  OR Changed_Flag='UPDATE'\n),\nSEQ_claim_medical_patient_icd9_additional AS (\n\tCREATE SEQUENCE SEQ_claim_medical_patient_icd9_additional\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Insert AS (\n\tSELECT\n\tclaim_med_patient_diag_add_ak_id,\n\tCrrnt_Snpsht_Flag,\n\tAudit_Id,\n\tEff_From_Date,\n\tEff_To_Date,\n\tChanged_Flag,\n\tSOURCE_SYSTEM_ID,\n\tCreated_Date,\n\tModified_Date,\n\tSEQ_claim_medical_patient_icd9_additional.NEXTVAL,\n\t-- *INF*: IIF(Changed_Flag='NEW', NEXTVAL, claim_med_patient_diag_add_ak_id)\n\tIFF(Changed_Flag = 'NEW', NEXTVAL, claim_med_patient_diag_add_ak_id) AS claim_med_patient_diag_add_ak_id_out,\n\tclaim_med_ak_id,\n\tdiag_code,\n\tdiag_code_val\n\tFROM FIL_Insert\n),\nclaim_medical_patient_diagnosis_additional_Insert AS (\n\tINSERT INTO claim_medical_patient_diagnosis_additional\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, claim_med_patient_diag_add_ak_id, claim_med_ak_id, patient_add_code, patient_diag_code)\n\tSELECT \n\tCrrnt_Snpsht_Flag AS CRRNT_SNPSHT_FLAG, \n\tAudit_Id AS AUDIT_ID, \n\tEff_From_Date AS EFF_FROM_DATE, \n\tEff_To_Date AS EFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCreated_Date AS CREATED_DATE, \n\tModified_Date AS MODIFIED_DATE, \n\tclaim_med_patient_diag_add_ak_id_out AS CLAIM_MED_PATIENT_DIAG_ADD_AK_ID, \n\tCLAIM_MED_AK_ID, \n\tdiag_code AS PATIENT_ADD_CODE, \n\tdiag_code_val AS PATIENT_DIAG_CODE\n\tFROM EXP_Insert\n),\nSQ_claim_medical_patient_icd9_additional_REFRESH AS (\n\tSELECT\n\t\tclaim_med_patient_diag_add_id,\n\t\tcrrnt_snpsht_flag,\n\t\taudit_id,\n\t\teff_from_date,\n\t\teff_to_date,\n\t\tsource_sys_id,\n\t\tcreated_date,\n\t\tmodified_date,\n\t\tclaim_med_patient_diag_add_ak_id,\n\t\tclaim_med_ak_id,\n\t\tpatient_add_code,\n\t\tpatient_diag_code\n\tFROM claim_medical_patient_diagnosis_additional1\n\tWHERE crrnt_snpsht_flag='1'\n),\nEXP_input_refresh AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tclaim_med_patient_diag_add_ak_id,\n\tclaim_med_ak_id,\n\tpatient_add_code,\n\tpatient_diag_code,\n\t-- *INF*: rtrim(ltrim(patient_diag_code))\n\trtrim(ltrim(patient_diag_code)) AS patient_diag_code_val_out\n\tFROM SQ_claim_medical_patient_icd9_additional_REFRESH\n),\nJNR_refresh AS (SELECT\n\tEXP_input_refresh.claim_med_patient_diag_add_id, \n\tEXP_input_refresh.crrnt_snpsht_flag, \n\tEXP_input_refresh.audit_id, \n\tEXP_input_refresh.eff_from_date, \n\tEXP_input_refresh.eff_to_date, \n\tEXP_input_refresh.source_sys_id, \n\tEXP_input_refresh.created_date, \n\tEXP_input_refresh.modified_date, \n\tEXP_input_refresh.claim_med_patient_diag_add_ak_id, \n\tEXP_input_refresh.claim_med_ak_id, \n\tEXP_input_refresh.patient_add_code, \n\tEXP_input_refresh.patient_diag_code_val_out, \n\tEXP_Default_values.claim_med_ak_id AS claim_med_ak_id_insert, \n\tEXP_Default_values.diag_code, \n\tEXP_Default_values.diag_code_val\n\tFROM EXP_Default_values\n\tRIGHT OUTER JOIN EXP_input_refresh\n\tON EXP_input_refresh.claim_med_ak_id = EXP_Default_values.claim_med_ak_id AND EXP_input_refresh.patient_add_code = EXP_Default_values.diag_code AND EXP_input_refresh.patient_diag_code_val_out = EXP_Default_values.diag_code_val\n),\nFIL_refresh AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tclaim_med_patient_diag_add_ak_id, \n\tclaim_med_ak_id, \n\tpatient_add_code, \n\tpatient_diag_code_val_out, \n\tclaim_med_ak_id_insert, \n\tdiag_code, \n\tdiag_code_val\n\tFROM JNR_refresh\n\tWHERE isnull(claim_med_ak_id_insert)\n),\nEXP_default_refresh AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id,\n\t'0' AS current_snapshot_flag,\n\tSYSDATE AS mod_date\n\tFROM FIL_refresh\n),\nUPD_refresh AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id, \n\tcurrent_snapshot_flag, \n\tmod_date\n\tFROM EXP_default_refresh\n),\nclaim_medical_patient_diagnosis_additional_REFRESH_Target AS (\n\tMERGE INTO claim_medical_patient_diagnosis_additional AS T\n\tUSING UPD_refresh AS S\n\tON T.claim_med_patient_diag_add_id = S.claim_med_patient_diag_add_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.current_snapshot_flag, T.modified_date = S.mod_date\n),\nSQ_claim_medical_patient_diagnosis_additional AS (\n\tSELECT \r\n\ta.claim_med_patient_diag_add_id, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date, \r\n\ta.claim_med_patient_diag_add_ak_id \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_patient_diagnosis_additional a\r\n\tWHERE \r\n\t a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND  \r\n\t EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_medical_patient_diagnosis_additional b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_med_patient_diag_add_ak_id  = b.claim_med_patient_diag_add_ak_id\r\n\t\t\tGROUP BY claim_med_patient_diag_add_ak_id \r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_med_patient_diag_add_ak_id, eff_from_date  DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id,\n\tclaim_med_patient_diag_add_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_med_patient_diag_add_ak_id = v_PREV_ROW_claim_med_patient_icd9_add_ak_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_med_patient_diag_add_ak_id = v_PREV_ROW_claim_med_patient_icd9_add_ak_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_med_patient_diag_add_ak_id AS v_PREV_ROW_claim_med_patient_icd9_add_ak_id,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_medical_patient_diagnosis_additional\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Occurrence AS (\n\tSELECT\n\tclaim_med_patient_diag_add_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_medical_patient_diagnosis_additional_Update AS (\n\tMERGE INTO claim_medical_patient_diagnosis_additional AS T\n\tUSING UPD_Claim_Occurrence AS S\n\tON T.claim_med_patient_diag_add_id = S.claim_med_patient_diag_add_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604336"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}