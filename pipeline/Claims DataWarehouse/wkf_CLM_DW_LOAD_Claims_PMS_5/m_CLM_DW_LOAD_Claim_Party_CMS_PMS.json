{
    "name": "m_CLM_DW_LOAD_Claim_Party_CMS_PMS",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claim_Party_CMS_PMS",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_cms_pms_relation_stage AS (\n\tSELECT cms_pms_relation_stage.cms_party_type, cms_pms_relation_stage.last_name, cms_pms_relation_stage.first_name, cms_pms_relation_stage.tin, cms_pms_relation_stage.address1, cms_pms_relation_stage.address2, cms_pms_relation_stage.city, cms_pms_relation_stage.state, cms_pms_relation_stage.zip_code, cms_pms_relation_stage.zip4, cms_pms_relation_stage.phone, cms_pms_relation_stage.phone_ext, claim_medical_stage.pms_policy_sym, claim_medical_stage.pms_policy_num, claim_medical_stage.pms_policy_mod, claim_medical_stage.pms_date_of_loss, claim_medical_stage.pms_loss_occurence, claim_medical_stage.pms_loss_claimant \r\n\tFROM\r\n\t cms_pms_relation_stage, claim_medical_stage\r\n\tWHERE\r\n\tclaim_medical_stage.injured_party_id=cms_pms_relation_stage.injured_party_id\r\n\tAND cms_pms_relation_stage.cms_party_type <> 'MINJ'\r\n\t\r\n\t\r\n\t--MINJ (injured party) will be already present with CMT suffix in the claim_party_key) so need not insert these records\r\n\t--AND claim_medical_stage.cms_source_system_id = 'PMS'  (This is not required as cms_pms_relation_stage contains data only for doc_nums where PMS injured partties.)\n),\nEXP_Values AS (\n\tSELECT\n\tpms_policy_sym,\n\tpms_policy_num,\n\tpms_policy_mod,\n\tpms_date_of_loss,\n\tpms_loss_occurence,\n\tpms_loss_claimant,\n\tcms_party_type,\n\t-- *INF*: replaceChr(0,to_char(pms_date_of_loss),'/','')\n\treplaceChr(0, to_char(pms_date_of_loss), '/', '') AS v_pms_date_of_loss,\n\tpms_policy_sym || pms_policy_num || pms_policy_mod || v_pms_date_of_loss || pms_loss_occurence || pms_loss_claimant || cms_party_type AS claim_party_key,\n\tlast_name AS claim_party_last_name,\n\tfirst_name AS claim_party_first_name,\n\t'N/A' AS claim_party_mid_name,\n\t'N/A' AS claim_party_name_prfx,\n\t'N/A' AS claim_party_name_sfx,\n\tclaim_party_first_name || ' ' ||  claim_party_last_name AS v_claim_party_full_name,\n\t-- *INF*: IIF(ISNULL(v_claim_party_full_name) or IS_SPACES(v_claim_party_full_name) or LENGTH(v_claim_party_full_name) = 0,'N/A',LTRIM(RTRIM(v_claim_party_full_name)))\n\tIFF(v_claim_party_full_name IS NULL OR IS_SPACES(v_claim_party_full_name) OR LENGTH(v_claim_party_full_name) = 0, 'N/A', LTRIM(RTRIM(v_claim_party_full_name))) AS claim_party_full_name,\n\taddress1,\n\taddress2,\n\taddress1 || ' ' ||  address2 AS v_claim_party_address,\n\t-- *INF*: IIF(ISNULL(v_claim_party_address) or IS_SPACES(v_claim_party_address) or LENGTH(v_claim_party_address) = 0 ,'N/A',LTRIM(RTRIM(v_claim_party_address)))\n\tIFF(v_claim_party_address IS NULL OR IS_SPACES(v_claim_party_address) OR LENGTH(v_claim_party_address) = 0, 'N/A', LTRIM(RTRIM(v_claim_party_address))) AS claim_party_address,\n\tcity,\n\t-- *INF*: IIF(ISNULL(city) or IS_SPACES(city) or LENGTH(city) = 0 ,'N/A',LTRIM(RTRIM(city)))\n\tIFF(city IS NULL OR IS_SPACES(city) OR LENGTH(city) = 0, 'N/A', LTRIM(RTRIM(city))) AS claim_party_city,\n\t'N/A' AS claim_party_county,\n\tstate,\n\t-- *INF*: IIF(ISNULL(state) or IS_SPACES(state) or LENGTH(state) = 0 ,'N/A',LTRIM(RTRIM(state)))\n\tIFF(state IS NULL OR IS_SPACES(state) OR LENGTH(state) = 0, 'N/A', LTRIM(RTRIM(state))) AS claim_party_state,\n\tzip_code,\n\tzip4,\n\tzip_code || '-' || zip4 AS v_claim_party_zip_code,\n\t-- *INF*: IIF(ISNULL(v_claim_party_zip_code) or IS_SPACES(v_claim_party_zip_code) or LENGTH(v_claim_party_zip_code) = 0 or v_claim_party_zip_code = '-'\r\n\t--  ,'N/A',LTRIM(RTRIM(v_claim_party_zip_code)))\n\tIFF(v_claim_party_zip_code IS NULL OR IS_SPACES(v_claim_party_zip_code) OR LENGTH(v_claim_party_zip_code) = 0 OR v_claim_party_zip_code = '-', 'N/A', LTRIM(RTRIM(v_claim_party_zip_code))) AS claim_party_zip_code,\n\t'N/A' AS addr_type,\n\ttin,\n\t-- *INF*: IIF(ISNULL(tin) or IS_SPACES(tin) or LENGTH(tin) = 0 ,'N/A',LTRIM(RTRIM(tin)))\n\tIFF(tin IS NULL OR IS_SPACES(tin) OR LENGTH(tin) = 0, 'N/A', LTRIM(RTRIM(tin))) AS claim_party_taxid_ssn,\n\t'N/A' AS tax_fed_id,\n\t-- *INF*: TO_DATE('12/31/2100','MM/DD/YYYY')\n\tTO_DATE('12/31/2100', 'MM/DD/YYYY') AS claim_party_birthdate,\n\t'N/A' AS claim_party_gndr,\n\tphone AS in_phone_num,\n\t-- *INF*: IIF(ISNULL(in_phone_num) or IS_SPACES(in_phone_num) or LENGTH(in_phone_num) = 0 ,'N/A',LTRIM(RTRIM(in_phone_num)))\n\tIFF(in_phone_num IS NULL OR IS_SPACES(in_phone_num) OR LENGTH(in_phone_num) = 0, 'N/A', LTRIM(RTRIM(in_phone_num))) AS phone_num,\n\tphone_ext AS in_phone_ext,\n\t-- *INF*: IIF(ISNULL(in_phone_ext) or IS_SPACES(in_phone_ext) or LENGTH(in_phone_ext) = 0 ,'N/A',LTRIM(RTRIM(in_phone_ext)))\n\tIFF(in_phone_ext IS NULL OR IS_SPACES(in_phone_ext) OR LENGTH(in_phone_ext) = 0, 'N/A', LTRIM(RTRIM(in_phone_ext))) AS phone_ext,\n\t'N/A' AS phone_type\n\tFROM SQ_cms_pms_relation_stage\n),\nLKP_Target AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_ak_id,\n\tclaim_party_key,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_addr,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tph_num,\n\tph_extension,\n\tph_type,\n\tin_claim_party_key\n\tFROM (\n\t\tSELECT \r\n\t\tA.claim_party_id as claim_party_id, \r\n\t\tA.claim_party_ak_id as claim_party_ak_id, \r\n\t\tA.claim_party_full_name as claim_party_full_name, \r\n\t\tA.claim_party_first_name as claim_party_first_name, \r\n\t\tA.claim_party_last_name as claim_party_last_name, \r\n\t\tA.claim_party_mid_name as claim_party_mid_name, \r\n\t\tA.claim_party_name_prfx as claim_party_name_prfx, \r\n\t\tA.claim_party_name_sfx as claim_party_name_sfx, \r\n\t\tA.claim_party_addr as claim_party_addr, \r\n\t\tA.claim_party_city as claim_party_city, \r\n\t\tA.claim_party_county as claim_party_county, \r\n\t\tA.claim_party_state as claim_party_state, \r\n\t\tA.claim_party_zip as claim_party_zip, \r\n\t\tA.addr_type as addr_type, \r\n\t\tA.tax_ssn_id as tax_ssn_id, \r\n\t\tA.tax_fed_id as tax_fed_id, \r\n\t\tA.claim_party_birthdate as claim_party_birthdate, \r\n\t\tA.claim_party_gndr as claim_party_gndr, \r\n\t\tA.ph_num as ph_num, \r\n\t\tA.ph_extension as ph_extension, \r\n\t\tA.ph_type as ph_type,\r\n\t\tA.claim_party_key as claim_party_key \r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party A\r\n\t\tWHERE A.source_sys_id ='@{pipeline().parameters.SOURCE_SYSTEM_ID}' and A.crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_id) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_Target.claim_party_id AS Old_claim_party_id,\n\tLKP_Target.claim_party_ak_id AS Old_claim_party_ak_id,\n\tLKP_Target.claim_party_key AS Old_claim_party_key,\n\tLKP_Target.claim_party_full_name AS Old_claim_party_full_name,\n\tLKP_Target.claim_party_first_name AS Old_claim_party_first_name,\n\tLKP_Target.claim_party_last_name AS Old_claim_party_last_name,\n\tLKP_Target.claim_party_mid_name AS Old_claim_party_mid_name,\n\tLKP_Target.claim_party_name_prfx AS Old_claim_party_name_prfx,\n\tLKP_Target.claim_party_name_sfx AS Old_claim_party_name_sfx,\n\tLKP_Target.claim_party_addr AS Old_claim_party_addr,\n\tLKP_Target.claim_party_city AS Old_claim_party_city,\n\tLKP_Target.claim_party_county AS Old_claim_party_county,\n\tLKP_Target.claim_party_state AS Old_claim_party_state,\n\tLKP_Target.claim_party_zip AS Old_claim_party_zip,\n\tLKP_Target.addr_type AS Old_addr_type,\n\tLKP_Target.tax_ssn_id AS Old_tax_ssn_id,\n\tLKP_Target.tax_fed_id AS Old_tax_fed_id,\n\tLKP_Target.claim_party_birthdate AS Old_claim_party_birthdate,\n\tLKP_Target.claim_party_gndr AS Old_claim_party_gndr,\n\tLKP_Target.ph_num AS Old_phone_num,\n\tLKP_Target.ph_extension AS Old_phone_ext,\n\tLKP_Target.ph_type AS Old_phone_type,\n\tEXP_Values.claim_party_key,\n\tEXP_Values.claim_party_full_name,\n\tEXP_Values.claim_party_first_name,\n\tEXP_Values.claim_party_last_name,\n\tEXP_Values.claim_party_mid_name,\n\tEXP_Values.claim_party_name_prfx,\n\tEXP_Values.claim_party_name_sfx,\n\tEXP_Values.claim_party_address,\n\tEXP_Values.claim_party_city,\n\tEXP_Values.claim_party_county,\n\tEXP_Values.claim_party_state,\n\tEXP_Values.claim_party_zip_code,\n\tEXP_Values.addr_type,\n\tEXP_Values.claim_party_taxid_ssn AS adnm_taxid_ssn,\n\tEXP_Values.tax_fed_id,\n\tEXP_Values.claim_party_birthdate,\n\tEXP_Values.claim_party_gndr,\n\tEXP_Values.phone_num,\n\tEXP_Values.phone_ext,\n\tEXP_Values.phone_type,\n\t-- *INF*: iif(isnull(Old_claim_party_id),'NEW',\r\n\t-- \tiif (\r\n\t-- \t(ltrim(rtrim(claim_party_full_name)) <> ltrim(rtrim(Old_claim_party_full_name))) or\r\n\t-- \t(ltrim(rtrim(claim_party_last_name)) <> ltrim(rtrim(Old_claim_party_last_name))) or\r\n\t-- \t(ltrim(rtrim(claim_party_first_name)) <> ltrim(rtrim(Old_claim_party_first_name))) or\r\n\t-- \t(ltrim(rtrim(claim_party_address)) <> ltrim(rtrim(Old_claim_party_addr))) or\r\n\t-- \t(ltrim(rtrim(claim_party_city)) <> ltrim(rtrim(Old_claim_party_city))) or\r\n\t-- \t(ltrim(rtrim(claim_party_state)) <> ltrim(rtrim(Old_claim_party_state))) or\r\n\t-- \t(ltrim(rtrim(claim_party_zip_code)) <> ltrim(rtrim(Old_claim_party_zip))) or\r\n\t-- \t(ltrim(rtrim(phone_num)) <> ltrim(rtrim(Old_phone_num))) or\r\n\t-- \t(ltrim(rtrim(phone_ext)) <> ltrim(rtrim(Old_phone_ext))) or\t\r\n\t-- \t(ltrim(rtrim(phone_type)) <> ltrim(rtrim(Old_phone_type))) or\r\n\t-- \t(ltrim(rtrim(adnm_taxid_ssn)) <> ltrim(rtrim(Old_tax_ssn_id))) ,\r\n\t-- \t'UPDATE',\r\n\t-- \t'NOCHANGE'))\n\tIFF(Old_claim_party_id IS NULL, 'NEW', IFF(( ltrim(rtrim(claim_party_full_name)) <> ltrim(rtrim(Old_claim_party_full_name)) ) OR ( ltrim(rtrim(claim_party_last_name)) <> ltrim(rtrim(Old_claim_party_last_name)) ) OR ( ltrim(rtrim(claim_party_first_name)) <> ltrim(rtrim(Old_claim_party_first_name)) ) OR ( ltrim(rtrim(claim_party_address)) <> ltrim(rtrim(Old_claim_party_addr)) ) OR ( ltrim(rtrim(claim_party_city)) <> ltrim(rtrim(Old_claim_party_city)) ) OR ( ltrim(rtrim(claim_party_state)) <> ltrim(rtrim(Old_claim_party_state)) ) OR ( ltrim(rtrim(claim_party_zip_code)) <> ltrim(rtrim(Old_claim_party_zip)) ) OR ( ltrim(rtrim(phone_num)) <> ltrim(rtrim(Old_phone_num)) ) OR ( ltrim(rtrim(phone_ext)) <> ltrim(rtrim(Old_phone_ext)) ) OR ( ltrim(rtrim(phone_type)) <> ltrim(rtrim(Old_phone_type)) ) OR ( ltrim(rtrim(adnm_taxid_ssn)) <> ltrim(rtrim(Old_tax_ssn_id)) ), 'UPDATE', 'NOCHANGE')) AS V_changed_flag,\n\t'0' AS logical_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: IIF(V_changed_flag='NEW',\r\n\t-- \tTO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),\r\n\t-- \tSYSDATE)\n\tIFF(V_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tV_changed_flag AS Changed_flag,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t'N/A' AS Default_String,\n\t-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS claim_party_ref_eff_from_date\n\tFROM EXP_Values\n\tLEFT JOIN LKP_Target\n\tON LKP_Target.claim_party_key = EXP_Values.claim_party_key\n),\nFIL_Insert AS (\n\tSELECT\n\tOld_claim_party_ak_id, \n\tclaim_party_key, \n\tclaim_party_full_name, \n\tclaim_party_first_name, \n\tclaim_party_last_name, \n\tclaim_party_mid_name, \n\tclaim_party_name_prfx, \n\tclaim_party_name_sfx, \n\tclaim_party_address, \n\tclaim_party_city, \n\tclaim_party_county, \n\tclaim_party_state, \n\tclaim_party_zip_code, \n\taddr_type, \n\tadnm_taxid_ssn AS tax_ssn_id, \n\ttax_fed_id, \n\tclaim_party_birthdate, \n\tclaim_party_gndr, \n\tlogical_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tChanged_flag, \n\tphone_num, \n\tphone_ext, \n\tphone_type, \n\tDefault_String, \n\tclaim_party_ref_eff_from_date\n\tFROM EXP_Detect_Changes\n\tWHERE Changed_flag='NEW'  OR Changed_flag='UPDATE'\n),\nSEQ_claim_party AS (\n\tCREATE SEQUENCE SEQ_claim_party\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK AS (\n\tSELECT\n\tOld_claim_party_ak_id,\n\t-- *INF*: IIF(Changed_flag='NEW', NEXTVAL, Old_claim_party_ak_id)\n\tIFF(Changed_flag = 'NEW', NEXTVAL, Old_claim_party_ak_id) AS claim_party_ak_id,\n\tclaim_party_key,\n\tclaim_party_full_name,\n\tclaim_party_first_name,\n\tclaim_party_last_name,\n\tclaim_party_mid_name,\n\tclaim_party_name_prfx,\n\tclaim_party_name_sfx,\n\tclaim_party_address,\n\tclaim_party_city,\n\tclaim_party_county,\n\tclaim_party_state,\n\tclaim_party_zip_code,\n\taddr_type,\n\ttax_ssn_id,\n\ttax_fed_id,\n\tclaim_party_birthdate,\n\tclaim_party_gndr,\n\tlogical_flag,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tChanged_flag,\n\tphone_num,\n\tphone_ext,\n\tphone_type,\n\tDefault_String,\n\tclaim_party_ref_eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2999','MM/DD/YYYY')\n\tTO_DATE('12/31/2999', 'MM/DD/YYYY') AS out_default_high_date,\n\tSEQ_claim_party.NEXTVAL\n\tFROM FIL_Insert\n),\nclaim_party_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party\n\t(claim_party_ak_id, claim_party_key, claim_party_full_name, claim_party_first_name, claim_party_last_name, claim_party_mid_name, claim_party_name_prfx, claim_party_name_sfx, claim_party_addr, claim_party_city, claim_party_county, claim_party_state, claim_party_zip, addr_type, tax_ssn_id, tax_fed_id, claim_party_birthdate, claim_party_gndr, logical_flag, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, ph_num, ph_extension, ph_type, lgl_ent_code, claim_party_ref_eff_from_date, claim_party_death_date)\n\tSELECT \n\tCLAIM_PARTY_AK_ID, \n\tCLAIM_PARTY_KEY, \n\tCLAIM_PARTY_FULL_NAME, \n\tCLAIM_PARTY_FIRST_NAME, \n\tCLAIM_PARTY_LAST_NAME, \n\tCLAIM_PARTY_MID_NAME, \n\tCLAIM_PARTY_NAME_PRFX, \n\tCLAIM_PARTY_NAME_SFX, \n\tclaim_party_address AS CLAIM_PARTY_ADDR, \n\tCLAIM_PARTY_CITY, \n\tCLAIM_PARTY_COUNTY, \n\tCLAIM_PARTY_STATE, \n\tclaim_party_zip_code AS CLAIM_PARTY_ZIP, \n\tADDR_TYPE, \n\tTAX_SSN_ID, \n\tTAX_FED_ID, \n\tCLAIM_PARTY_BIRTHDATE, \n\tCLAIM_PARTY_GNDR, \n\tLOGICAL_FLAG, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tphone_num AS PH_NUM, \n\tphone_ext AS PH_EXTENSION, \n\tphone_type AS PH_TYPE, \n\tDefault_String AS LGL_ENT_CODE, \n\tCLAIM_PARTY_REF_EFF_FROM_DATE, \n\tout_default_high_date AS CLAIM_PARTY_DEATH_DATE\n\tFROM EXP_Determine_AK\n),\nSQ_claim_party AS (\n\tSELECT \r\n\ta.claim_party_id, \r\n\ta.claim_party_key, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date \r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party a\r\n\tWHERE a.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tand EXISTS(SELECT 1\t\t\t\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party b\r\n\t\t\tWHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND crrnt_snpsht_flag = 1\r\n\t\t\tAND a.claim_party_key = b.claim_party_key\r\n\t\t\tGROUP BY claim_party_key\r\n\t\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY claim_party_key, eff_from_date  DESC--\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tclaim_party_id,\n\tclaim_party_key,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaim_party_key = v_PREV_ROW_party_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tclaim_party_key AS v_PREV_ROW_party_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_claim_party\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tclaim_party_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <> eff_to_date\r\n\r\n--If these two dates equal each other we are dealing with the first row in an AK group.  This row\r\n--does not need to be expired or updated for any reason thus it can be filtered out\r\n-- but we must source it to capture the eff_from_date of this row \r\n--so that we can properly expire the subsequent row\n),\nUPD_Claim_Party AS (\n\tSELECT\n\tclaim_party_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_FirstRowInAKGroup\n),\nclaim_party_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party AS T\n\tUSING UPD_Claim_Party AS S\n\tON T.claim_party_id = S.claim_party_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246504"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905521"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604362"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:13:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:19:56"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}