{
    "name": "m_CLM_DW_LOAD_Claimant_Cov_Dtl_Calc",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Claimant_Cov_Dtl_Calc",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_claim_transaction AS (\n\tSELECT\n\tclaimant_cov_det_ak_id,\n\tIN_claimant_cov_det_ak_id,\n\tIN_trans_date,\n\ttrans_code,\n\ttrans_date\n\tFROM (\n\t\tSELECT claim_transaction.trans_code as trans_code, claim_transaction.claimant_cov_det_ak_id as claimant_cov_det_ak_id,  claim_transaction.trans_date as trans_date FROM claim_transaction\r\n\t\twhere claim_transaction.trans_code in('24', '34')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,trans_date ORDER BY claimant_cov_det_ak_id) = 1\n),\nSQ_claimant_coverage_detail_reserve_calculation AS (\n\tSELECT a.claimant_cov_det_ak_id, a.financial_type_code, a.reserve_date, a.reserve_date_type, a.source_sys_id \r\n\tFROM\r\n\t claimant_coverage_detail_reserve_calculation a WHERE a.claimant_cov_det_ak_id IN\r\n\t(SELECT b.claimant_cov_det_ak_id \r\n\tFROM claimant_coverage_detail_reserve_calculation b WHERE b.created_date >= '@{pipeline().parameters.SELECTION_START_TS}' ) \r\n\tORDER BY a.claimant_cov_det_ak_id, a.reserve_date,a.reserve_date_type\n),\nEXP_get_values AS (\n\tSELECT\n\tclaimant_cov_det_ak_id,\n\tfinancial_type_code,\n\treserve_date,\n\treserve_date_type,\n\t-- *INF*: IIF(claimant_cov_det_ak_id = v_prev_row_claimant_cov_det_ak_id , 'OLD', 'NEW')\n\tIFF(claimant_cov_det_ak_id = v_prev_row_claimant_cov_det_ak_id, 'OLD', 'NEW') AS v_coverage,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'D', reserve_date_type,'NA'), IIF(financial_type_code = 'D', reserve_date_type, v_claimant_cov_date_type_D_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'D', reserve_date_type, 'NA'), IFF(financial_type_code = 'D', reserve_date_type, v_claimant_cov_date_type_D_old)) AS v_claimant_cov_date_type_D,\n\tv_claimant_cov_date_type_D AS v_claimant_cov_date_type_D_old,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'E', reserve_date_type,'NA'), IIF(financial_type_code = 'E', reserve_date_type, v_claimant_cov_date_type_E_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'E', reserve_date_type, 'NA'), IFF(financial_type_code = 'E', reserve_date_type, v_claimant_cov_date_type_E_old)) AS v_claimant_cov_date_type_E,\n\tv_claimant_cov_date_type_E AS v_claimant_cov_date_type_E_old,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'S', reserve_date_type,'NA'), IIF(financial_type_code = 'S', reserve_date_type, v_claimant_cov_date_type_S_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'S', reserve_date_type, 'NA'), IFF(financial_type_code = 'S', reserve_date_type, v_claimant_cov_date_type_S_old)) AS v_claimant_cov_date_type_S,\n\tv_claimant_cov_date_type_S AS v_claimant_cov_date_type_S_old,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'B', reserve_date_type,'NA'), IIF(financial_type_code = 'B', reserve_date_type, v_claimant_cov_date_type_B_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'B', reserve_date_type, 'NA'), IFF(financial_type_code = 'B', reserve_date_type, v_claimant_cov_date_type_B_old)) AS v_claimant_cov_date_type_B,\n\tv_claimant_cov_date_type_B AS v_claimant_cov_date_type_B_old,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'R', reserve_date_type,'NA'), IIF(financial_type_code = 'R', reserve_date_type, v_claimant_cov_date_type_R_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'R', reserve_date_type, 'NA'), IFF(financial_type_code = 'R', reserve_date_type, v_claimant_cov_date_type_R_old)) AS v_claimant_cov_date_type_R,\n\tv_claimant_cov_date_type_R AS v_claimant_cov_date_type_R_old,\n\t-- *INF*: IIF(v_coverage = 'NEW', IIF(financial_type_code = 'R', 'Y','N'), IIF(financial_type_code = 'R', 'Y', v_claimant_cov_recovery_ind_old))\n\tIFF(v_coverage = 'NEW', IFF(financial_type_code = 'R', 'Y', 'N'), IFF(financial_type_code = 'R', 'Y', v_claimant_cov_recovery_ind_old)) AS v_claimant_cov_recovery_ind,\n\tv_claimant_cov_recovery_ind AS v_claimant_cov_recovery_ind_old,\n\tv_claimant_cov_recovery_ind AS claimant_cov_recovery_ind_out,\n\t-- *INF*: IIF(\r\n\t-- (ISNULL(v_claimant_cov_date_type_D) OR v_claimant_cov_date_type_D = 'NA' OR v_claimant_cov_date_type_D = '1NOTICEONLY' )\r\n\t-- AND(ISNULL(v_claimant_cov_date_type_E) OR v_claimant_cov_date_type_E = 'NA' OR v_claimant_cov_date_type_E = '1NOTICEONLY') \r\n\t-- AND (ISNULL(v_claimant_cov_date_type_S) OR v_claimant_cov_date_type_S = 'NA' OR v_claimant_cov_date_type_S = '1NOTICEONLY') \r\n\t-- AND (ISNULL(v_claimant_cov_date_type_B) \r\n\t-- OR v_claimant_cov_date_type_B = 'NA' OR v_claimant_cov_date_type_B = '1NOTICEONLY') \r\n\t-- AND (ISNULL(v_claimant_cov_date_type_R) \r\n\t-- OR v_claimant_cov_date_type_R = 'NA' OR v_claimant_cov_date_type_R = '1NOTICEONLY'), '1NOTICEONLY', \r\n\t-- \r\n\t-- IIF(v_claimant_cov_date_type_D = '2OPEN' OR v_claimant_cov_date_type_D = '4REOPEN' OR v_claimant_cov_date_type_E = '2OPEN' OR v_claimant_cov_date_type_E = '4REOPEN' OR v_claimant_cov_date_type_S = '2OPEN' OR v_claimant_cov_date_type_S = '4REOPEN' OR v_claimant_cov_date_type_B = '2OPEN' OR v_claimant_cov_date_type_B = '4REOPEN' OR v_claimant_cov_date_type_R = '2OPEN' OR v_claimant_cov_date_type_R = '4REOPEN', '2OPEN',\r\n\t-- \r\n\t-- '3CLOSED'))\n\tIFF(( v_claimant_cov_date_type_D IS NULL OR v_claimant_cov_date_type_D = 'NA' OR v_claimant_cov_date_type_D = '1NOTICEONLY' ) AND ( v_claimant_cov_date_type_E IS NULL OR v_claimant_cov_date_type_E = 'NA' OR v_claimant_cov_date_type_E = '1NOTICEONLY' ) AND ( v_claimant_cov_date_type_S IS NULL OR v_claimant_cov_date_type_S = 'NA' OR v_claimant_cov_date_type_S = '1NOTICEONLY' ) AND ( v_claimant_cov_date_type_B IS NULL OR v_claimant_cov_date_type_B = 'NA' OR v_claimant_cov_date_type_B = '1NOTICEONLY' ) AND ( v_claimant_cov_date_type_R IS NULL OR v_claimant_cov_date_type_R = 'NA' OR v_claimant_cov_date_type_R = '1NOTICEONLY' ), '1NOTICEONLY', IFF(v_claimant_cov_date_type_D = '2OPEN' OR v_claimant_cov_date_type_D = '4REOPEN' OR v_claimant_cov_date_type_E = '2OPEN' OR v_claimant_cov_date_type_E = '4REOPEN' OR v_claimant_cov_date_type_S = '2OPEN' OR v_claimant_cov_date_type_S = '4REOPEN' OR v_claimant_cov_date_type_B = '2OPEN' OR v_claimant_cov_date_type_B = '4REOPEN' OR v_claimant_cov_date_type_R = '2OPEN' OR v_claimant_cov_date_type_R = '4REOPEN', '2OPEN', '3CLOSED')) AS v_overall_claimant_cov_date_type_crrnt,\n\t-- *INF*: IIF(v_overall_claimant_cov_date_type_crrnt = '1NOTICEONLY', '1NOTICEONLY', IIF(v_overall_claimant_cov_date_type_crrnt = '2OPEN', IIF(IN(v_claimant_cov_date_type_out_old,  '3CLOSED', '5CLOSEDAFTERREOPEN', '4REOPEN')  AND v_coverage = 'OLD', '4REOPEN', '2OPEN'), IIF(v_overall_claimant_cov_date_type_crrnt = '3CLOSED', IIF(IN(v_claimant_cov_date_type_out_old , '4REOPEN', '5CLOSEDAFTERREOPEN') AND  v_coverage = 'OLD', '5CLOSEDAFTERREOPEN', '3CLOSED'))))\r\n\t-- \r\n\t-- --IIF(v_overall_claimant_cov_date_type_crrnt = 'NOTICEONLY', 'NOTICEONLY', IIF(v_overall_claimant_cov_date_type_crrnt = 'OPEN', IIF(v_overall_claimant_cov_date_type_old = 'CLOSED' AND v_coverage = 'OLD', 'REOPEN', 'OPEN'), IIF(v_overall_claimant_cov_date_type_crrnt = 'CLOSED', 'CLOSED')))\n\tIFF(v_overall_claimant_cov_date_type_crrnt = '1NOTICEONLY', '1NOTICEONLY', IFF(v_overall_claimant_cov_date_type_crrnt = '2OPEN', IFF(IN(v_claimant_cov_date_type_out_old, '3CLOSED', '5CLOSEDAFTERREOPEN', '4REOPEN') AND v_coverage = 'OLD', '4REOPEN', '2OPEN'), IFF(v_overall_claimant_cov_date_type_crrnt = '3CLOSED', IFF(IN(v_claimant_cov_date_type_out_old, '4REOPEN', '5CLOSEDAFTERREOPEN') AND v_coverage = 'OLD', '5CLOSEDAFTERREOPEN', '3CLOSED')))) AS v_claimant_cov_date_type_out,\n\t-- *INF*: IIF(v_coverage = 'NEW', 'INSERT', IIF(v_claimant_cov_date_type_out = v_claimant_cov_date_type_out_old, 'NOCHANGE', 'INSERT'))\n\tIFF(v_coverage = 'NEW', 'INSERT', IFF(v_claimant_cov_date_type_out = v_claimant_cov_date_type_out_old, 'NOCHANGE', 'INSERT')) AS v_insert_flag,\n\tv_insert_flag AS insert_flag_out,\n\tv_claimant_cov_date_type_out AS v_claimant_cov_date_type_out_old,\n\tv_claimant_cov_date_type_out AS claimant_cov_date_type_out,\n\tclaimant_cov_det_ak_id AS v_prev_row_claimant_cov_det_ak_id,\n\treserve_date_type AS v_prev_row_reserve_date_type,\n\tfinancial_type_code AS v_prev_row_financial_type_code,\n\tsource_sys_id\n\tFROM SQ_claimant_coverage_detail_reserve_calculation\n),\nFIL_remove_non_inserts AS (\n\tSELECT\n\tinsert_flag_out, \n\tclaimant_cov_det_ak_id, \n\treserve_date, \n\treserve_date_type, \n\tclaimant_cov_cause_of_loss, \n\tclaimant_cov_reserve_ctgry, \n\tclaimant_cov_date_type_out, \n\tsource_sys_id, \n\tclaimant_cov_recovery_ind_out\n\tFROM EXP_get_values\n\tWHERE insert_flag_out = 'INSERT'\n),\nLKP_claimant_cov_dtl_calc AS (\n\tSELECT\n\tIN_reserve_date,\n\tIN_claimant_cov_date_type,\n\tclaimant_cov_det_calculation_id,\n\tclaimant_cov_det_ak_id,\n\tclaimant_cov_date,\n\tclaimant_cov_date_type\n\tFROM (\n\t\tSELECT \n\t\t\tIN_reserve_date,\n\t\t\tIN_claimant_cov_date_type,\n\t\t\tclaimant_cov_det_calculation_id,\n\t\t\tclaimant_cov_det_ak_id,\n\t\t\tclaimant_cov_date,\n\t\t\tclaimant_cov_date_type\n\t\tFROM claimant_coverage_detail_calculation\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,claimant_cov_date,claimant_cov_date_type ORDER BY IN_reserve_date) = 1\n),\nFIL_existing_records AS (\n\tSELECT\n\tLKP_claimant_cov_dtl_calc.claimant_cov_det_calculation_id AS lkp_claimant_cov_det_calculation_id, \n\tFIL_remove_non_inserts.claimant_cov_det_ak_id, \n\tFIL_remove_non_inserts.reserve_date, \n\tFIL_remove_non_inserts.reserve_date_type, \n\tFIL_remove_non_inserts.claimant_cov_cause_of_loss, \n\tFIL_remove_non_inserts.claimant_cov_reserve_ctgry, \n\tFIL_remove_non_inserts.claimant_cov_date_type_out, \n\tFIL_remove_non_inserts.source_sys_id, \n\tFIL_remove_non_inserts.claimant_cov_recovery_ind_out\n\tFROM FIL_remove_non_inserts\n\tLEFT JOIN LKP_claimant_cov_dtl_calc\n\tON LKP_claimant_cov_dtl_calc.claimant_cov_det_ak_id = FIL_remove_non_inserts.claimant_cov_det_ak_id AND LKP_claimant_cov_dtl_calc.claimant_cov_date = FIL_remove_non_inserts.reserve_date AND LKP_claimant_cov_dtl_calc.claimant_cov_date_type = FIL_remove_non_inserts.claimant_cov_date_type_out\n\tWHERE IIF(ISNULL(lkp_claimant_cov_det_calculation_id), TRUE, FALSE)\n),\nEXP_calculate_values AS (\n\tSELECT\n\tclaimant_cov_det_ak_id,\n\treserve_date,\n\treserve_date_type,\n\tclaimant_cov_cause_of_loss,\n\tclaimant_cov_reserve_ctgry,\n\tclaimant_cov_date_type_out,\n\t-- *INF*: DECODE(claimant_cov_date_type_out, '1NOTICEONLY', 'N', '2OPEN', 'O', '3CLOSED', 'C', '4REOPEN', 'O', '5CLOSEDAFTERREOPEN', 'C')\n\tDECODE(claimant_cov_date_type_out,\n\t'1NOTICEONLY', 'N',\n\t'2OPEN', 'O',\n\t'3CLOSED', 'C',\n\t'4REOPEN', 'O',\n\t'5CLOSEDAFTERREOPEN', 'C') AS claimant_cov_status_code_out,\n\t-- *INF*: IIF(claimant_cov_date_type_out =  '1NOTICEONLY', 'Y', 'N')\n\tIFF(claimant_cov_date_type_out = '1NOTICEONLY', 'Y', 'N') AS claimant_cov_ntice_only_indicator,\n\tclaimant_cov_recovery_ind_out,\n\t-- *INF*: IIF(ISNULL(:LKP.LKP_CLAIM_TRANSACTION(claimant_cov_det_ak_id, reserve_date)), 'N', 'Y')\n\tIFF(LKP_CLAIM_TRANSACTION_claimant_cov_det_ak_id_reserve_date.claimant_cov_det_ak_id IS NULL, 'N', 'Y') AS claimant_cov_supplemental_ind_out,\n\t-- *INF*: IIF(claimant_cov_date_type_out =  '1NOTICEONLY', 'N', 'Y')\n\tIFF(claimant_cov_date_type_out = '1NOTICEONLY', 'N', 'Y') AS claimant_cov_financial_indicator,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\treserve_date AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS') \n\tto_date('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\tsource_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM FIL_existing_records\n\tLEFT JOIN LKP_CLAIM_TRANSACTION LKP_CLAIM_TRANSACTION_claimant_cov_det_ak_id_reserve_date\n\tON LKP_CLAIM_TRANSACTION_claimant_cov_det_ak_id_reserve_date.claimant_cov_det_ak_id = claimant_cov_det_ak_id\n\tAND LKP_CLAIM_TRANSACTION_claimant_cov_det_ak_id_reserve_date.trans_date = reserve_date\n\n),\nSEQ_Claimant_Cov_Detail_Calc_AK_ID AS (\n\tCREATE SEQUENCE SEQ_Claimant_Cov_Detail_Calc_AK_ID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nclaimant_coverage_detail_calculation_insert AS (\n\tINSERT INTO claimant_coverage_detail_calculation\n\t(claimant_cov_det_calculation_ak_id, claimant_cov_det_ak_id, claimant_cov_status_code, claimant_cov_date, claimant_cov_date_type, claimant_cov_supplemental_ind, claimant_cov_financial_ind, claimant_cov_recovery_ind, claimant_cov_notice_only_ind, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date)\n\tSELECT \n\tSEQ_Claimant_Cov_Detail_Calc_AK_ID.NEXTVAL AS CLAIMANT_COV_DET_CALCULATION_AK_ID, \n\tCLAIMANT_COV_DET_AK_ID, \n\tclaimant_cov_status_code_out AS CLAIMANT_COV_STATUS_CODE, \n\treserve_date AS CLAIMANT_COV_DATE, \n\tclaimant_cov_date_type_out AS CLAIMANT_COV_DATE_TYPE, \n\tclaimant_cov_supplemental_ind_out AS CLAIMANT_COV_SUPPLEMENTAL_IND, \n\tclaimant_cov_financial_indicator AS CLAIMANT_COV_FINANCIAL_IND, \n\tclaimant_cov_recovery_ind_out AS CLAIMANT_COV_RECOVERY_IND, \n\tclaimant_cov_ntice_only_indicator AS CLAIMANT_COV_NOTICE_ONLY_IND, \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\treserve_date AS EFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE\n\tFROM EXP_calculate_values\n),\nSQ_claimant_coverage_detail_calculation_update AS (\n\tSELECT a.claimant_cov_det_calculation_id, a.claimant_cov_det_ak_id,  a.eff_from_date, a.eff_to_date, a.source_sys_id FROM\r\n\t claimant_coverage_detail_calculation a\r\n\tWHERE EXISTS\r\n\t(SELECT 1\t\t\t\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claimant_coverage_detail_calculation b\r\n\tWHERE b.crrnt_snpsht_flag = 1\r\n\tAND a.claimant_cov_det_ak_id = b.claimant_cov_det_ak_id\r\n\tand a.source_sys_id = b.source_sys_id\r\n\tGROUP BY b.claimant_cov_det_ak_id,  b.source_sys_id\r\n\t\tHAVING COUNT(*) > 1)\r\n\tORDER BY a.claimant_cov_det_ak_id, a.source_sys_id,  a.eff_from_date  DESC, a.claimant_cov_det_calculation_ak_id DESC\r\n\t\r\n\t\r\n\t-- In the order by clause we added claimant_cov_det_calculation_ak_id DESC ,because say a coverage has staus order of \r\n\t-- '4REOPEN',\r\n\t-- '5CLOSEDAFTERREOPEN',\r\n\t-- '4REOPEN' on same day for PMS data , then the latest row with '4REOPEN' status should have a crrnt_snpsht_flag value of  1.\n),\nEXP_Expire_Rows AS (\n\tSELECT\n\tclaimant_cov_det_calculation_id,\n\tclaimant_cov_det_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\tsource_sys_id,\n\t-- *INF*: DECODE (TRUE, claimant_cov_det_ak_id = v_PREV_ROW_claimant_cov_det_ak_id and source_sys_id = v_PREV_ROW_source_sys_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tclaimant_cov_det_ak_id = v_PREV_ROW_claimant_cov_det_ak_id AND source_sys_id = v_PREV_ROW_source_sys_id, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tclaimant_cov_det_ak_id AS v_PREV_ROW_claimant_cov_det_ak_id,\n\tsource_sys_id AS v_PREV_ROW_source_sys_id,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\t0 AS crrnt_Snpsht_flag,\n\tsysdate AS modified_date\n\tFROM SQ_claimant_coverage_detail_calculation_update\n),\nFLT_Claimant_cov_dtl_calc_Upd AS (\n\tSELECT\n\tclaimant_cov_det_calculation_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM EXP_Expire_Rows\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_Claimant_cov_dtl_calc AS (\n\tSELECT\n\tclaimant_cov_det_calculation_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_Snpsht_flag, \n\tmodified_date\n\tFROM FLT_Claimant_cov_dtl_calc_Upd\n),\nclaimant_coverage_detail_calculation_update AS (\n\tMERGE INTO claimant_coverage_detail_calculation AS T\n\tUSING UPD_Claimant_cov_dtl_calc AS S\n\tON T.claimant_cov_det_calculation_id = S.claimant_cov_det_calculation_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_Snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246506"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905523"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604394"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:23:25"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:28:03"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED AND PMS"
            }
        },
        "folder": {
            "name": ""
        },
        "annotations": []
    }
}