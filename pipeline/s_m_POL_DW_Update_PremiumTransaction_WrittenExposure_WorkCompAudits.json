{
    "name": "s_m_POL_DW_Update_PremiumTransaction_WrittenExposure_WorkCompAudits",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_Update_PremiumTransaction_WrittenExposure_W_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_PremiumTransaction_WorkCompNonAudits AS (\n\tWith PolicyList\r\n\t(Policyakid)\r\n\tAS\r\n\t(\r\n\tSELECT \r\n\tdistinct PC.PolicyAKID AS PolicyAKId \r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton PT.RatingCoverageAKId=RC.RatingCoverageAKID\r\n\tand PT.EffectiveDate=RC.EffectiveDate\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton RC.PolicyCoverageAKID=PC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.v2.policy p\r\n\ton p.pol_ak_id = PC.PolicyAKID and p.crrnt_snpsht_flag = 1\r\n\t@{pipeline().parameters.JOIN_POLICY_LIST}\r\n\tWHERE\r\n\tPT.SourceSystemID='DCT' and \r\n\tPT.PremiumTransactionCode in \r\n\t('RevisedFinalAudit',\r\n\t'VoidFinalAudit',\r\n\t'FinalAudit') \r\n\tAND RC.CoverageType = 'ManualPremium'\r\n\tAND PC.TypeBureauCode = 'WorkersCompensation'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t)\r\n\t,\r\n\tcte_transactionlist as\r\n\t(SELECT \r\n\tPC.PolicyAKID, \r\n\tRC.RatingCoverageAKID,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tPT.PremiumTransactionEnteredDate, \r\n\tPT.PremiumTransactionID, \r\n\tPT.Exposure, \r\n\tPT.PremiumTransactionCode,\r\n\tPT.OffsetOnsetCode,\r\n\tPT.WrittenExposure\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton PT.RatingCoverageAKId=RC.RatingCoverageAKID\r\n\tand PT.EffectiveDate=RC.EffectiveDate and RC.CoverageType = 'ManualPremium'\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton RC.PolicyCoverageAKID=PC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tinner join PolicyList PL\r\n\ton PC.PolicyAKID = PL.PolicyAKID\r\n\t)\r\n\tSELECT \r\n\tnonaudittran.PolicyAKID, \r\n\tnonaudittran.RatingCoverageAKID,\r\n\tnonaudittran.PremiumTransactionID, \r\n\tnonaudittran.WrittenExposure,\r\n\taudittran.PremiumTransactionID as ParentAuditTransactionId\r\n\tfrom cte_transactionlist audittran\r\n\tleft join cte_transactionlist nonaudittran\r\n\ton\r\n\taudittran.PolicyAKID = nonaudittran.PolicyAKID and\r\n\taudittran.RatingCoverageAKID = nonaudittran.RatingCoverageAKID and\r\n\tnonaudittran.PremiumTransactionEffectiveDate <= audittran.PremiumTransactionEffectiveDate and\r\n\tnonaudittran.PremiumTransactionEnteredDate < audittran.PremiumTransactionEnteredDate\r\n\twhere audittran.PremiumTransactionCode in ('RevisedFinalAudit',\r\n\t'FinalAudit')\r\n\tand nonaudittran.PremiumTransactionCode not in ('RevisedFinalAudit',\r\n\t'VoidFinalAudit',\r\n\t'FinalAudit')\n),\nSRT_Non_Audits AS (\n\tSELECT\n\tPolicyAKID, \n\tRatingCoverageAKId, \n\tParentAuditTransactionID, \n\tPremiumTransactionID, \n\tWrittenExposure\n\tFROM SQ_PremiumTransaction_WorkCompNonAudits\n\tORDER BY PolicyAKID ASC, RatingCoverageAKId ASC, ParentAuditTransactionID ASC, PremiumTransactionID ASC\n),\nAGG_Non_Audit_Transaction_WrittenExposure AS (\n\tSELECT\n\tPolicyAKID,\n\tRatingCoverageAKId,\n\tParentAuditTransactionID,\n\tPremiumTransactionID,\n\tWrittenExposure,\n\t-- *INF*: SUM(WrittenExposure)\n\tSUM(WrittenExposure) AS OutWrittenExposure\n\tFROM SRT_Non_Audits\n\tGROUP BY PolicyAKID, RatingCoverageAKId, ParentAuditTransactionID\n),\nSRT_CoverageExposures AS (\n\tSELECT\n\tPolicyAKID, \n\tRatingCoverageAKId, \n\tParentAuditTransactionID, \n\tOutWrittenExposure\n\tFROM AGG_Non_Audit_Transaction_WrittenExposure\n\tORDER BY PolicyAKID ASC, RatingCoverageAKId ASC, ParentAuditTransactionID ASC\n),\nSQ_PremiumTransaction_WorkCompAudits AS (\n\tSELECT \r\n\tPC.PolicyAKID, \r\n\tRC.RatingCoverageAKID,\r\n\tPT.PremiumTransactionEffectiveDate,\r\n\tPT.PremiumTransactionEnteredDate, \r\n\tPT.PremiumTransactionID, \r\n\tPT.Exposure, \r\n\tPT.PremiumTransactionCode,\r\n\tPT.OffsetOnsetCode,\r\n\tPT.WrittenExposure\r\n\tFROM\r\n\t@{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\ton PT.RatingCoverageAKId=RC.RatingCoverageAKID\r\n\tand PT.EffectiveDate=RC.EffectiveDate\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\ton RC.PolicyCoverageAKID=PC.PolicyCoverageAKID\r\n\tand PC.CurrentSnapshotFlag=1\r\n\tinner join @{pipeline().parameters.SOURCE_DATABASE_NAME}.v2.policy p\r\n\ton p.pol_ak_id = PC.PolicyAKID and p.crrnt_snpsht_flag = 1\r\n\t@{pipeline().parameters.JOIN_POLICY_LIST}\r\n\tWHERE\r\n\tPT.SourceSystemID='DCT' and \r\n\tPT.PremiumTransactionCode in \r\n\t('RevisedFinalAudit',\r\n\t'VoidFinalAudit',\r\n\t'FinalAudit') \r\n\tAND RC.CoverageType = 'ManualPremium'\r\n\tAND PC.TypeBureauCode = 'WorkersCompensation'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\torder by\r\n\tPC.PolicyAKID,\r\n\tPT.RatingCoverageAKID,\r\n\tPT.PremiumTransactionId\n),\nEXP_Collect AS (\n\tSELECT\n\tPolicyAKID,\n\tRatingCoverageAKId,\n\tPremiumTransactionEffectiveDate,\n\tPremiumTransactionEnteredDate,\n\tPremiumTransactionID,\n\tExposure,\n\tPremiumTransactionCode,\n\tOffsetOnsetCode,\n\tWrittenExposure,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- INSTR(PremiumTransactionCode,'Audit')>0,0,\r\n\t-- WrittenExposure)\n\tDECODE(TRUE,\n\t\tINSTR(PremiumTransactionCode, 'Audit') > 0, 0,\n\t\tWrittenExposure) AS BaseWrittenExposure\n\tFROM SQ_PremiumTransaction_WorkCompAudits\n),\nSRT_Transactions AS (\n\tSELECT\n\tPolicyAKID, \n\tRatingCoverageAKId, \n\tPremiumTransactionID, \n\tExposure, \n\tPremiumTransactionCode, \n\tOffsetOnsetCode, \n\tWrittenExposure\n\tFROM EXP_Collect\n\tORDER BY PolicyAKID ASC, RatingCoverageAKId ASC, PremiumTransactionID ASC\n),\nJNR_Transaction_NetWrittenExposure_Coverage AS (SELECT\n\tSRT_Transactions.PolicyAKID, \n\tSRT_Transactions.RatingCoverageAKId, \n\tSRT_Transactions.PremiumTransactionID, \n\tSRT_Transactions.Exposure, \n\tSRT_Transactions.PremiumTransactionCode, \n\tSRT_Transactions.OffsetOnsetCode, \n\tSRT_Transactions.WrittenExposure, \n\tSRT_CoverageExposures.PolicyAKID AS in_PolicyAKID, \n\tSRT_CoverageExposures.RatingCoverageAKId AS in_RatingCoverageAKId, \n\tSRT_CoverageExposures.ParentAuditTransactionID AS in_ParentAuditTransactionID, \n\tSRT_CoverageExposures.OutWrittenExposure AS NetNonAuditWrittenExposure\n\tFROM SRT_CoverageExposures\n\tRIGHT OUTER JOIN SRT_Transactions\n\tON SRT_Transactions.PolicyAKID = SRT_CoverageExposures.PolicyAKID AND SRT_Transactions.RatingCoverageAKId = SRT_CoverageExposures.RatingCoverageAKId AND SRT_Transactions.PremiumTransactionID = SRT_CoverageExposures.ParentAuditTransactionID\n),\nEXP_EVAL_WrittenExposure AS (\n\tSELECT\n\tPolicyAKID,\n\tRatingCoverageAKId,\n\tPremiumTransactionID,\n\tExposure,\n\tPremiumTransactionCode,\n\tOffsetOnsetCode,\n\tWrittenExposure,\n\tNetNonAuditWrittenExposure AS i_NonAuditNetWrittenExposure,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(i_NonAuditNetWrittenExposure),0,\r\n\t-- i_NonAuditNetWrittenExposure)\r\n\t-- -- Cleansing nulls from Master Joins of Void audit Transactions as well as incoming audit transactions with ratingcoverageakids that appear to have no corresponding non audit transactions\n\tDECODE(TRUE,\n\t\ti_NonAuditNetWrittenExposure IS NULL, 0,\n\t\ti_NonAuditNetWrittenExposure) AS v_NonAuditNetWrittenExposure,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- OffsetOnsetCode = 'Deprecated',-1,\r\n\t-- 1)\n\tDECODE(TRUE,\n\t\tOffsetOnsetCode = 'Deprecated', - 1,\n\t\t1) AS v_Multiplier,\n\t-- *INF*: Exposure - v_NonAuditNetWrittenExposure\r\n\t-- -- True up exposure in magnitude is equal to the mathematical difference between incoming InForce Exposure on Audit Transaction less the cumulative computed written exposure from the non audit transaction effective and entered prior to the audit transaction\n\tExposure - v_NonAuditNetWrittenExposure AS v_TrueUpExposureValue,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- PremiumTransactionCode = 'VoidFinalAudit',0,\r\n\t-- ROUND(v_TrueUpExposureValue * v_Multiplier,4)\r\n\t-- )\r\n\t-- --we zero out the value of writtenexposure for VoidFinalAudits else we compute the mathematical value with sign correct to four decimal places. Note that deprecated audit transactions have the multipler of -1 effectively nullify what was added by the original audit transaction\n\tDECODE(TRUE,\n\t\tPremiumTransactionCode = 'VoidFinalAudit', 0,\n\t\tROUND(v_TrueUpExposureValue * v_Multiplier, 4)) AS v_WrittenExposureTruedUp,\n\tv_WrittenExposureTruedUp AS o_WrittenExposure,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- INSTR(PremiumTransactionCode,'Audit') > 0  AND v_WrittenExposureTruedUp  !=  WrittenExposure,1,\r\n\t-- 0)\r\n\t-- -- We only permit Audit type transactions where the recalculated Audit true up exposure is different than the incoming WrittenExposure on the record\n\tDECODE(TRUE,\n\t\tINSTR(PremiumTransactionCode, 'Audit') > 0 AND v_WrittenExposureTruedUp != WrittenExposure, 1,\n\t\t0) AS FilterFlag\n\tFROM JNR_Transaction_NetWrittenExposure_Coverage\n),\nFIL_Unchanged_WrittenExposure AS (\n\tSELECT\n\tPremiumTransactionID, \n\tFilterFlag, \n\to_WrittenExposure\n\tFROM EXP_EVAL_WrittenExposure\n\tWHERE FilterFlag = 1\n),\nUPD_PremiumTransaction_WrittenExposure_changes AS (\n\tSELECT\n\tPremiumTransactionID, \n\to_WrittenExposure\n\tFROM FIL_Unchanged_WrittenExposure\n),\nPremiumTransaction_Update_Audit_TrueUp AS (\n\tMERGE INTO PremiumTransaction AS T\n\tUSING UPD_PremiumTransaction_WrittenExposure_changes AS S\n\tON T.PremiumTransactionID = S.PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.WrittenExposure = S.o_WrittenExposure\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603296"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "JOIN_POLICY_LIST": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}