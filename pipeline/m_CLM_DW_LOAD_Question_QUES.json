{
    "name": "m_CLM_DW_LOAD_Question_QUES",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Question_QUES",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_question_stage AS (\n\tSELECT  \r\n\t      question_guid\r\n\t      , optn_set_guid\r\n\t       ,app_context_guid    \r\n\t      ,app_context_grp_guid\r\n\t      ,display_name\r\n\t      ,logical_name\r\n\t      ,published_to_prod_flag\r\n\t      ,enabled_flag\r\n\t      ,help_text\r\n\t      ,prompt\r\n\t      ,notes\r\n\t      ,surrogate_question_guid      \r\n\t      ,eff_date\r\n\t      ,exp_date\r\n\t       ,source_system_id      \r\n\t  FROM  @{pipeline().parameters.SOURCE_TABLE_OWNER}.question_stage\n),\nEXP_VALIDATE AS (\n\tSELECT\n\tquestion_guid AS IN_question_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_question_guid))) OR IS_SPACES(LTRIM(RTRIM(IN_question_guid))) OR LENGTH(LTRIM(RTRIM(IN_question_guid)))=0,'N/A' ,LTRIM(RTRIM(IN_question_guid)))\n\tIFF(LTRIM(RTRIM(IN_question_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_question_guid))) OR LENGTH(LTRIM(RTRIM(IN_question_guid))) = 0, 'N/A', LTRIM(RTRIM(IN_question_guid))) AS question_guid,\n\toptn_set_guid AS IN_optn_set_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_optn_set_guid))) OR IS_SPACES(LTRIM(RTRIM(IN_optn_set_guid))) OR LENGTH(LTRIM(RTRIM(IN_optn_set_guid)))=0,'N/A' ,LTRIM(RTRIM(IN_optn_set_guid)))\n\tIFF(LTRIM(RTRIM(IN_optn_set_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_optn_set_guid))) OR LENGTH(LTRIM(RTRIM(IN_optn_set_guid))) = 0, 'N/A', LTRIM(RTRIM(IN_optn_set_guid))) AS optn_set_guid,\n\tapp_context_guid AS IN_app_context_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_app_context_guid))) OR IS_SPACES(LTRIM(RTRIM(IN_app_context_guid))) OR LENGTH(LTRIM(RTRIM(IN_app_context_guid)))=0,'N/A' ,LTRIM(RTRIM(IN_app_context_guid)))\n\tIFF(LTRIM(RTRIM(IN_app_context_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_app_context_guid))) OR LENGTH(LTRIM(RTRIM(IN_app_context_guid))) = 0, 'N/A', LTRIM(RTRIM(IN_app_context_guid))) AS app_context_guid,\n\tapp_context_grp_guid AS IN_app_context_group_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_app_context_group_guid))) OR IS_SPACES(LTRIM(RTRIM(IN_app_context_group_guid))) OR LENGTH(LTRIM(RTRIM(IN_app_context_group_guid)))=0,'N/A' ,LTRIM(RTRIM(IN_app_context_group_guid)))\n\tIFF(LTRIM(RTRIM(IN_app_context_group_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_app_context_group_guid))) OR LENGTH(LTRIM(RTRIM(IN_app_context_group_guid))) = 0, 'N/A', LTRIM(RTRIM(IN_app_context_group_guid))) AS app_context_group_guid,\n\tdisplay_name AS IN_display_name,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_display_name))) OR IS_SPACES(LTRIM(RTRIM(IN_display_name))) OR LENGTH(LTRIM(RTRIM(IN_display_name)))=0,'N/A' ,LTRIM(RTRIM(IN_display_name)))\n\tIFF(LTRIM(RTRIM(IN_display_name)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_display_name))) OR LENGTH(LTRIM(RTRIM(IN_display_name))) = 0, 'N/A', LTRIM(RTRIM(IN_display_name))) AS display_name,\n\tlogical_name AS IN_logical_name,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_logical_name))) OR IS_SPACES(LTRIM(RTRIM(IN_logical_name))) OR LENGTH(LTRIM(RTRIM(IN_logical_name)))=0,'N/A' ,LTRIM(RTRIM(IN_logical_name)))\n\tIFF(LTRIM(RTRIM(IN_logical_name)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_logical_name))) OR LENGTH(LTRIM(RTRIM(IN_logical_name))) = 0, 'N/A', LTRIM(RTRIM(IN_logical_name))) AS logical_name,\n\tpublished_to_prod_flag AS IN_published_to_prod_flag,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_published_to_prod_flag))) OR IS_SPACES(LTRIM(RTRIM(IN_published_to_prod_flag))) OR LENGTH(LTRIM(RTRIM(IN_published_to_prod_flag)))=0,' ' ,LTRIM(RTRIM(IN_published_to_prod_flag)))\n\tIFF(LTRIM(RTRIM(IN_published_to_prod_flag)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_published_to_prod_flag))) OR LENGTH(LTRIM(RTRIM(IN_published_to_prod_flag))) = 0, ' ', LTRIM(RTRIM(IN_published_to_prod_flag))) AS published_to_prod_flag,\n\tenabled_flag AS IN_enabled_flag,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_enabled_flag))) OR IS_SPACES(LTRIM(RTRIM(IN_enabled_flag))) OR LENGTH(LTRIM(RTRIM(IN_enabled_flag)))=0,' ' ,LTRIM(RTRIM(IN_enabled_flag)))\n\tIFF(LTRIM(RTRIM(IN_enabled_flag)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_enabled_flag))) OR LENGTH(LTRIM(RTRIM(IN_enabled_flag))) = 0, ' ', LTRIM(RTRIM(IN_enabled_flag))) AS enabled_flag,\n\thelp_text AS IN_help_text,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_help_text))) OR IS_SPACES(LTRIM(RTRIM(IN_help_text))) OR LENGTH(LTRIM(RTRIM(IN_help_text)))=0,'N/A' ,LTRIM(RTRIM(IN_help_text)))\n\tIFF(LTRIM(RTRIM(IN_help_text)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_help_text))) OR LENGTH(LTRIM(RTRIM(IN_help_text))) = 0, 'N/A', LTRIM(RTRIM(IN_help_text))) AS help_text,\n\tprompt AS IN_prompt,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_prompt))) OR IS_SPACES(LTRIM(RTRIM(IN_prompt))) OR LENGTH(LTRIM(RTRIM(IN_prompt)))=0,'N/A' ,LTRIM(RTRIM(IN_prompt)))\n\tIFF(LTRIM(RTRIM(IN_prompt)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_prompt))) OR LENGTH(LTRIM(RTRIM(IN_prompt))) = 0, 'N/A', LTRIM(RTRIM(IN_prompt))) AS prompt,\n\tnotes AS IN_notes,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_notes))) OR IS_SPACES(LTRIM(RTRIM(IN_notes))) OR LENGTH(LTRIM(RTRIM(IN_notes)))=0,'N/A' ,LTRIM(RTRIM(IN_notes)))\n\tIFF(LTRIM(RTRIM(IN_notes)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_notes))) OR LENGTH(LTRIM(RTRIM(IN_notes))) = 0, 'N/A', LTRIM(RTRIM(IN_notes))) AS notes,\n\tsurrogate_question_guid AS IN_surrogate_question_guid,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(IN_surrogate_question_guid))) OR IS_SPACES(LTRIM(RTRIM(IN_surrogate_question_guid))) OR LENGTH(LTRIM(RTRIM(IN_surrogate_question_guid)))=0,'N/A' ,LTRIM(RTRIM(IN_surrogate_question_guid)))\n\tIFF(LTRIM(RTRIM(IN_surrogate_question_guid)) IS NULL OR IS_SPACES(LTRIM(RTRIM(IN_surrogate_question_guid))) OR LENGTH(LTRIM(RTRIM(IN_surrogate_question_guid))) = 0, 'N/A', LTRIM(RTRIM(IN_surrogate_question_guid))) AS surrogate_question_guid,\n\teff_date AS IN_eff_date,\n\t-- *INF*: IIF(ISNULL(IN_eff_date) ,TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ,IN_eff_date)\n\tIFF(IN_eff_date IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_eff_date) AS eff_date,\n\texp_date AS IN_exp_date,\n\t-- *INF*: IIF(ISNULL(IN_exp_date) ,TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ,IN_exp_date)\n\tIFF(IN_exp_date IS NULL, TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), IN_exp_date) AS exp_date,\n\tsource_system_id\n\tFROM SQ_question_stage\n),\nLKP_APP_CONTEXT AS (\n\tSELECT\n\tapp_context_ak_id,\n\tapp_context_guid\n\tFROM (\n\t\tselect  \r\n\t\t         q.app_context_ak_id as app_context_ak_id,\r\n\t\t         q.app_context_guid as app_context_guid\r\n\t\t  FROM  application_context q\r\n\t\t  where q.crrnt_snpsht_flag = 1\r\n\t\t  and q.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY app_context_guid ORDER BY app_context_ak_id DESC) = 1\n),\nLKP_QUESTION AS (\n\tSELECT\n\tquestion_ak_id,\n\tquestion_guid,\n\teff_date,\n\toptn_set_guid,\n\tdisplay_name,\n\tlogical_name,\n\tpublished_to_prod_flag,\n\tenabled_flag,\n\thelp_text,\n\tprompt,\n\tnotes,\n\tsurrogate_question_guid,\n\texp_date,\n\tapp_context_ak_id,\n\tapp_context_group_guid\n\tFROM (\n\t\tselect  q.question_ak_id as question_ak_id ,\r\n\t\t         q.eff_date as eff_date,\r\n\t\t         q.question_guid as question_guid, \r\n\t\t           q.optn_set_guid  as optn_set_guid  ,    \r\n\t\t          q.display_name as display_name,\r\n\t\t          q.logical_name as logical_name,\r\n\t\t           q.published_to_prod_flag as published_to_prod_flag  ,\r\n\t\t           q.enabled_flag as enabled_flag,\r\n\t\t         q.help_text as help_text,\r\n\t\t          q.prompt as prompt,\r\n\t\t           q.notes as notes,\r\n\t\t           q.surrogate_question_guid            as surrogate_question_guid,\r\n\t\t           q.exp_date as exp_date,   \r\n\t\t            q.app_context_ak_id as app_context_ak_id       ,\r\n\t\t             q.app_context_group_guid as app_context_group_guid     \r\n\t\t  FROM  question q\r\n\t\t  where q.crrnt_snpsht_flag = 1\r\n\t\t  and q.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY question_guid ORDER BY question_ak_id DESC) = 1\n),\nEXP_DETECT_CHANGES AS (\n\tSELECT\n\tLKP_QUESTION.question_ak_id AS LKP_question_ak_id,\n\tEXP_VALIDATE.question_guid,\n\tEXP_VALIDATE.optn_set_guid,\n\tLKP_APP_CONTEXT.app_context_ak_id AS IN_app_context_ak_id,\n\t-- *INF*: IIF(ISNULL(IN_app_context_ak_id),-1,IN_app_context_ak_id)\r\n\t--  \r\n\t--  \n\tIFF(IN_app_context_ak_id IS NULL, - 1, IN_app_context_ak_id) AS v_app_context_ak_id,\n\tv_app_context_ak_id AS app_context_ak_id,\n\tEXP_VALIDATE.app_context_group_guid,\n\tEXP_VALIDATE.display_name,\n\tEXP_VALIDATE.logical_name,\n\tEXP_VALIDATE.published_to_prod_flag,\n\tEXP_VALIDATE.enabled_flag,\n\tEXP_VALIDATE.help_text,\n\tEXP_VALIDATE.prompt,\n\tEXP_VALIDATE.notes,\n\tEXP_VALIDATE.surrogate_question_guid,\n\tEXP_VALIDATE.eff_date,\n\tEXP_VALIDATE.exp_date,\n\tLKP_QUESTION.eff_date AS LKP_eff_date,\n\tLKP_QUESTION.optn_set_guid AS LKP_optn_set_guid,\n\tLKP_QUESTION.display_name AS LKP_display_name,\n\tLKP_QUESTION.logical_name AS LKP_logical_name,\n\tLKP_QUESTION.published_to_prod_flag AS LKP_published_to_prod_flag,\n\tLKP_QUESTION.enabled_flag AS LKP_enabled_flag,\n\tLKP_QUESTION.help_text AS LKP_help_text,\n\tLKP_QUESTION.prompt AS LKP_prompt,\n\tLKP_QUESTION.notes AS LKP_notes,\n\tLKP_QUESTION.surrogate_question_guid AS LKP_surrogate_question_guid,\n\tLKP_QUESTION.exp_date AS LKP_exp_date,\n\tLKP_QUESTION.app_context_ak_id AS LKP_app_context_ak_id,\n\tLKP_QUESTION.app_context_group_guid AS LKP_app_context_group_guid,\n\t-- *INF*: IIF(ISNULL(LKP_question_ak_id),'NEW',\r\n\t--      IIF(LTRIM(RTRIM(optn_set_guid)) <> LTRIM(RTRIM(LKP_optn_set_guid)) OR \r\n\t-- \tLTRIM(RTRIM(display_name)) <> LTRIM(RTRIM(LKP_display_name)) OR \r\n\t-- \tLTRIM(RTRIM(logical_name)) <> LTRIM(RTRIM(LKP_logical_name)) OR \r\n\t-- LTRIM(RTRIM(published_to_prod_flag)) <> LTRIM(RTRIM(LKP_published_to_prod_flag)) OR \r\n\t-- \texp_date <> LKP_exp_date OR \r\n\t-- eff_date <> LKP_eff_date OR \r\n\t-- \tLTRIM(RTRIM(enabled_flag)) <> LTRIM(RTRIM(LKP_enabled_flag)) OR \r\n\t-- \tLTRIM(RTRIM(help_text)) <> LTRIM(RTRIM(LKP_help_text)) OR \r\n\t-- \tLTRIM(RTRIM(prompt)) <> LTRIM(RTRIM(LKP_prompt)) OR \r\n\t-- v_app_context_ak_id <> LKP_app_context_ak_id  OR \r\n\t-- \tLTRIM(RTRIM(notes)) <> LTRIM(RTRIM(LKP_notes)) OR  \r\n\t-- \tLTRIM(RTRIM(app_context_group_guid)) <> LTRIM(RTRIM(LKP_app_context_group_guid)) \r\n\t-- OR\r\n\t-- \tLTRIM(RTRIM(surrogate_question_guid)) <> LTRIM(RTRIM(LKP_surrogate_question_guid) ) ,\r\n\t-- \t'UPDATE','NOCHANGE'))\r\n\t-- \n\tIFF(LKP_question_ak_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(optn_set_guid)) <> LTRIM(RTRIM(LKP_optn_set_guid)) OR LTRIM(RTRIM(display_name)) <> LTRIM(RTRIM(LKP_display_name)) OR LTRIM(RTRIM(logical_name)) <> LTRIM(RTRIM(LKP_logical_name)) OR LTRIM(RTRIM(published_to_prod_flag)) <> LTRIM(RTRIM(LKP_published_to_prod_flag)) OR exp_date <> LKP_exp_date OR eff_date <> LKP_eff_date OR LTRIM(RTRIM(enabled_flag)) <> LTRIM(RTRIM(LKP_enabled_flag)) OR LTRIM(RTRIM(help_text)) <> LTRIM(RTRIM(LKP_help_text)) OR LTRIM(RTRIM(prompt)) <> LTRIM(RTRIM(LKP_prompt)) OR v_app_context_ak_id <> LKP_app_context_ak_id OR LTRIM(RTRIM(notes)) <> LTRIM(RTRIM(LKP_notes)) OR LTRIM(RTRIM(app_context_group_guid)) <> LTRIM(RTRIM(LKP_app_context_group_guid)) OR LTRIM(RTRIM(surrogate_question_guid)) <> LTRIM(RTRIM(LKP_surrogate_question_guid)), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: IIF(v_changed_flag='NEW',TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),SYSDATE)\n\tIFF(v_changed_flag = 'NEW', TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), SYSDATE) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:00','MM:DD:YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:00', 'MM:DD:YYYY HH24:MI:SS') AS default_date\n\tFROM EXP_VALIDATE\n\tLEFT JOIN LKP_APP_CONTEXT\n\tON LKP_APP_CONTEXT.app_context_guid = EXP_VALIDATE.app_context_guid\n\tLEFT JOIN LKP_QUESTION\n\tON LKP_QUESTION.question_guid = EXP_VALIDATE.question_guid\n),\nFIL_INSERT AS (\n\tSELECT\n\tLKP_question_ak_id AS LKP_questoin_ak_id, \n\tchanged_flag, \n\tapp_context_ak_id, \n\tquestion_guid, \n\toptn_set_guid, \n\tapp_context_group_guid, \n\tdisplay_name, \n\tlogical_name, \n\tpublished_to_prod_flag, \n\tenabled_flag, \n\thelp_text, \n\tprompt, \n\tnotes, \n\tsurrogate_question_guid, \n\teff_date, \n\texp_date, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date, \n\tdefault_date\n\tFROM EXP_DETECT_CHANGES\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nSEQ_Question_AK_ID AS (\n\tCREATE SEQUENCE SEQ_Question_AK_ID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK1 AS (\n\tSELECT\n\tLKP_questoin_ak_id AS LKP_question_ak_id,\n\t-- *INF*: IIF(changed_flag ='NEW',NEXTVAL,LKP_question_ak_id)\n\tIFF(changed_flag = 'NEW', NEXTVAL, LKP_question_ak_id) AS question_ak_id,\n\tapp_context_ak_id,\n\tquestion_guid,\n\toptn_set_guid,\n\tapp_context_group_guid,\n\tdisplay_name,\n\tlogical_name,\n\tpublished_to_prod_flag,\n\tenabled_flag,\n\thelp_text,\n\tprompt,\n\tnotes,\n\tsurrogate_question_guid,\n\teff_date,\n\texp_date,\n\tchanged_flag,\n\tcrrnt_snpsht_flag,\n\taudit_id,\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tmodified_date,\n\tdefault_date,\n\tSEQ_Question_AK_ID.NEXTVAL\n\tFROM FIL_INSERT\n),\nquestion_INS AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.question\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, question_ak_id, app_context_ak_id, question_guid, optn_set_guid, app_context_group_guid, display_name, logical_name, published_to_prod_flag, enabled_flag, help_text, prompt, notes, surrogate_question_guid, eff_date, exp_date)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tQUESTION_AK_ID, \n\tAPP_CONTEXT_AK_ID, \n\tQUESTION_GUID, \n\tOPTN_SET_GUID, \n\tAPP_CONTEXT_GROUP_GUID, \n\tDISPLAY_NAME, \n\tLOGICAL_NAME, \n\tPUBLISHED_TO_PROD_FLAG, \n\tENABLED_FLAG, \n\tHELP_TEXT, \n\tPROMPT, \n\tNOTES, \n\tSURROGATE_QUESTION_GUID, \n\tEFF_DATE, \n\tEXP_DATE\n\tFROM EXP_Determine_AK1\n),\nSQ_question AS (\n\tSELECT \r\n\ta.question_id, \r\n\ta.eff_from_date, \r\n\ta.eff_to_date ,\r\n\ta.question_guid\r\n\t \r\n\tFROM\r\n\t  @{pipeline().parameters.TARGET_TABLE_OWNER}.question a \r\n\tWHERE \r\n\ta.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'  AND\r\n\tEXISTS(SELECT 1 \r\n\t                 FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.question b                      \r\n\t                 WHERE source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' \r\n\t                 and crrnt_snpsht_flag = 1\r\n\t                 AND a.question_guid = b.question_guid                                     \r\n\t \t           GROUP BY b.question_guid                 \r\n\t                 HAVING COUNT(*) >1) \r\n\tORDER BY a.question_guid , a.eff_from_date DESC\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tquestion_id,\n\tquestion_guid AS question_quid,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE, question_quid=v_prev_row_question_guid  ,ADD_TO_DATE(v_prev_row_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\tquestion_quid = v_prev_row_question_guid, ADD_TO_DATE(v_prev_row_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tquestion_quid AS v_prev_row_question_guid,\n\teff_from_date AS v_prev_row_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_date\n\tFROM SQ_question\n),\nFIL_Firstrow_INAKIDGROUP AS (\n\tSELECT\n\tquestion_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date <>eff_to_date\n),\nUPD_QUESTION AS (\n\tSELECT\n\tquestion_id, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_date\n\tFROM FIL_Firstrow_INAKIDGROUP\n),\nquestion_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.question AS T\n\tUSING UPD_QUESTION AS S\n\tON T.question_id = S.question_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246501"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905505"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603949"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 00:32:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 00:37:25"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "QUES"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}