{
    "name": "s_m_POL_DW_LOAD_CoverageDetailCrime_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_CoverageDetailCrime_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_SupClassificationCrime AS (\n\tSELECT\n\tIndustryGroup,\n\tClassCode,\n\tRatingStateCode\n\tFROM (\n\t\tSELECT \n\t\t\tIndustryGroup,\n\t\t\tClassCode,\n\t\t\tRatingStateCode\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupClassificationCrime\n\t\tWHERE CurrentSnapshotFlag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ClassCode,RatingStateCode ORDER BY IndustryGroup) = 1\n),\nSQ_PremiumTransaction AS (\n\tSELECT DISTINCT PT.Premiumtransactionid, \r\n\t                PT.Currentsnapshotflag, \r\n\t                RC.Coverageguid, \r\n\t                RC.Classcode, \r\n\t                PT.Premiumtransactioneffectivedate, \r\n\t                RL.Stateprovincecode AS StateCode \r\n\tFROM   dbo.Premiumtransaction PT INNER JOIN Ratingcoverage RC ON PT.Ratingcoverageakid = RC.Ratingcoverageakid \r\n\t                  AND PT.Effectivedate = RC.Effectivedate \r\n\t       INNER JOIN dbo.Policycoverage PC ON RC.Policycoverageakid = PC.Policycoverageakid AND PC.Currentsnapshotflag = 1 \r\n\t       INNER JOIN dbo.Risklocation RL ON RL.Risklocationakid = PC.Risklocationakid AND RL.Currentsnapshotflag = 1 \r\n\t       INNER JOIN dbo.Workpremiumtransaction WPT ON WPT.Premiumtransactionakid = PT.Premiumtransactionakid \r\n\tWHERE  PT.Sourcesystemid = 'DCT' AND WPT.Sourcesystemid = 'DCT'\r\n\t       AND PC.Insuranceline = 'Crime' \r\n\t       AND PT.Createddate >= '@{pipeline().parameters.SELECTION_START_TS}'\n),\nEXP_Default AS (\n\tSELECT\n\tPremiumTransactionID,\n\tCurrentSnapshotFlag,\n\tCoverageGUID,\n\tClassCode,\n\tPremiumTransactionEffectiveDate,\n\tStateCode\n\tFROM SQ_PremiumTransaction\n),\nLKP_CDC AS (\n\tSELECT\n\tPremiumTransactionID,\n\tIndustryGroup,\n\ti_PremiumTransactionID\n\tFROM (\n\t\tSELECT \n\t\t\tPremiumTransactionID,\n\t\t\tIndustryGroup,\n\t\t\ti_PremiumTransactionID\n\t\tFROM CoverageDetailCrime\n\t\tWHERE SourceSystemID='DCT'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionID ORDER BY PremiumTransactionID) = 1\n),\nEXP_DetectChanges AS (\n\tSELECT\n\tLKP_CDC.PremiumTransactionID AS lkp_PremiumTransactionID,\n\tLKP_CDC.IndustryGroup AS lkp_IndustryGroup,\n\tEXP_Default.PremiumTransactionID AS i_PremiumTransactionID,\n\tEXP_Default.CurrentSnapshotFlag AS i_CurrentSnapshotFlag,\n\tEXP_Default.CoverageGUID AS i_CoverageGUID,\n\tEXP_Default.ClassCode AS i_ClassCode,\n\tEXP_Default.PremiumTransactionEffectiveDate AS i_PTEffDate,\n\tEXP_Default.StateCode AS i_StateCode,\n\ti_PremiumTransactionID AS o_PremiumTransactionID,\n\ti_CurrentSnapshotFlag AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\t-- *INF*: TO_DATE('1800/01/01 00:00:00','YYYY/MM/DD HH24:MI:SS')\n\tTO_TIMESTAMP('1800/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS') AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100/12/31 23:59:59','YYYY/MM/DD HH24:MI:SS')\n\tTO_TIMESTAMP('2100/12/31 23:59:59', 'YYYY/MM/DD HH24:MI:SS') AS o_ExpirationDate,\n\t'DCT' AS o_SourceSystemID,\n\tsysdate AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate,\n\ti_CoverageGUID AS o_CoverageGUID,\n\t-- *INF*: IIF( NOT ISNULL(:LKP.LKP_SupClassificationCrime(i_ClassCode,i_StateCode) ) , :LKP.LKP_SupClassificationCrime(i_ClassCode, i_StateCode) , 'N/A')\n\tIFF(\n\t    LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_i_StateCode.IndustryGroup IS NOT NULL,\n\t    LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_i_StateCode.IndustryGroup,\n\t    'N/A'\n\t) AS v_lkp_result,\n\t-- *INF*: IIF( v_lkp_result ='N/A', \r\n\t-- IIF( NOT ISNULL(:LKP.LKP_SupClassificationCrime(i_ClassCode,'99') ) , :LKP.LKP_SupClassificationCrime(i_ClassCode, '99') , 'N/A')\r\n\t--   ,v_lkp_result )\r\n\t-- --IIF( NOT ISNULL(:LKP.LKP_SupClassificationCrime(i_ClassCode,'99') ) , :LKP.LKP_SupClassificationCrime(i_ClassCode, '99') , 'N/A'), \n\tIFF(\n\t    v_lkp_result = 'N/A',\n\t    IFF(\n\t        LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_99.IndustryGroup IS NOT NULL,\n\t        LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_99.IndustryGroup,\n\t        'N/A'\n\t    ),\n\t    v_lkp_result\n\t) AS v_lkp_result_99,\n\t-- *INF*: LTRIM(RTRIM(v_lkp_result_99))\n\tLTRIM(RTRIM(v_lkp_result_99)) AS o_IndustryGroup,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(lkp_PremiumTransactionID), 'INSERT',\r\n\t-- lkp_IndustryGroup<>v_lkp_result_99, 'UPDATE',\r\n\t-- 'NOCHANGE')\n\tDECODE(\n\t    TRUE,\n\t    lkp_PremiumTransactionID IS NULL, 'INSERT',\n\t    lkp_IndustryGroup <> v_lkp_result_99, 'UPDATE',\n\t    'NOCHANGE'\n\t) AS o_changeflag\n\tFROM EXP_Default\n\tLEFT JOIN LKP_CDC\n\tON LKP_CDC.PremiumTransactionID = EXP_Default.PremiumTransactionID\n\tLEFT JOIN LKP_SUPCLASSIFICATIONCRIME LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_i_StateCode\n\tON LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_i_StateCode.ClassCode = i_ClassCode\n\tAND LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_i_StateCode.RatingStateCode = i_StateCode\n\n\tLEFT JOIN LKP_SUPCLASSIFICATIONCRIME LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_99\n\tON LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_99.ClassCode = i_ClassCode\n\tAND LKP_SUPCLASSIFICATIONCRIME_i_ClassCode_99.RatingStateCode = '99'\n\n),\nFIL_Records AS (\n\tSELECT\n\to_PremiumTransactionID, \n\to_CurrentSnapshotFlag, \n\to_AuditID, \n\to_EffectiveDate, \n\to_ExpirationDate, \n\to_SourceSystemID, \n\to_CreatedDate, \n\to_ModifiedDate, \n\to_CoverageGUID, \n\to_IndustryGroup, \n\to_changeflag\n\tFROM EXP_DetectChanges\n\tWHERE o_changeflag='INSERT'\n),\nCoverageDetailCrime_INSERT AS (\n\tINSERT INTO CoverageDetailCrime\n\t(PremiumTransactionID, CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, CoverageGuid, IndustryGroup)\n\tSELECT \n\to_PremiumTransactionID AS PREMIUMTRANSACTIONID, \n\to_CurrentSnapshotFlag AS CURRENTSNAPSHOTFLAG, \n\to_AuditID AS AUDITID, \n\to_EffectiveDate AS EFFECTIVEDATE, \n\to_ExpirationDate AS EXPIRATIONDATE, \n\to_SourceSystemID AS SOURCESYSTEMID, \n\to_CreatedDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_CoverageGUID AS COVERAGEGUID, \n\to_IndustryGroup AS INDUSTRYGROUP\n\tFROM FIL_Records\n),\nSQ_CoverageDetailCrime AS (\n\tSELECT \r\n\tCDCRPrevious.IndustryGroup,\r\n\tWPTOL.PremiumTransactionID AS Wrk_PremiumTransactionID\r\n\tFROM\r\n\tWorkPremiumTransactionOffsetLineage WPTOL\r\n\tinner join CoverageDetailCrime CDCRPrevious\r\n\ton ( CDCRPrevious.PremiumTransactionID= WPTOL.previouspremiumtransactionid)\r\n\tinner join CoverageDetailCrime CDCRToUpdate\r\n\ton ( CDCRToUpdate.PremiumTransactionID= WPTOL.PremiumTransactionid)\r\n\tINNER JOIN premiumtransaction pt WITH (NOLOCK) on\r\n\tWPTOL.premiumtransactionID=pt.premiumtransactionID and PT.OffsetOnsetCode='Offset'\r\n\tWHERE\r\n\tWPTOL.UpdateAttributeFlag = 1 \r\n\tAND (CDCRPrevious.IndustryGroup <> CDCRToUpdate.IndustryGroup)\n),\nExp_CoverageDetailCrime AS (\n\tSELECT\n\tIndustryGroup,\n\tWrk_PremiumTransactionID,\n\tSYSDATE AS o_ModifiedDate\n\tFROM SQ_CoverageDetailCrime\n),\nUPD_CoverageDetailCrime AS (\n\tSELECT\n\tIndustryGroup, \n\tWrk_PremiumTransactionID, \n\to_ModifiedDate AS ModifiedDate\n\tFROM Exp_CoverageDetailCrime\n),\nTGT_CoverageDetailCrime_Upd_Offsets AS (\n\tMERGE INTO CoverageDetailCrime AS T\n\tUSING UPD_CoverageDetailCrime AS S\n\tON T.PremiumTransactionID = S.Wrk_PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate, T.IndustryGroup = S.IndustryGroup\n),\nSQ_CoverageDetailCrime_Deprecated AS (\n\tSELECT \r\n\tCDCRPrevious.IndustryGroup,\r\n\tWPTOL.PremiumTransactionID AS Wrk_PremiumTransactionID\r\n\tFROM\r\n\tWorkPremiumTransactionOffsetLineage WPTOL\r\n\tinner join CoverageDetailCrime CDCRPrevious\r\n\ton ( CDCRPrevious.PremiumTransactionID= WPTOL.previouspremiumtransactionid)\r\n\tinner join CoverageDetailCrime CDCRToUpdate\r\n\ton ( CDCRToUpdate.PremiumTransactionID= WPTOL.PremiumTransactionid)\r\n\tINNER JOIN premiumtransaction pt WITH (NOLOCK) on\r\n\tWPTOL.premiumtransactionID=pt.premiumtransactionID and PT.OffsetOnsetCode='Deprecated'\r\n\tWHERE\r\n\tWPTOL.UpdateAttributeFlag = 1 \r\n\tAND (CDCRPrevious.IndustryGroup <> CDCRToUpdate.IndustryGroup)\n),\nExp_CoverageDetailCrime_Deprecated AS (\n\tSELECT\n\tIndustryGroup,\n\tWrk_PremiumTransactionID,\n\tSYSDATE AS o_ModifiedDate\n\tFROM SQ_CoverageDetailCrime_Deprecated\n),\nUPD_CoverageDetailCrime_Deprecated AS (\n\tSELECT\n\tIndustryGroup, \n\tWrk_PremiumTransactionID, \n\to_ModifiedDate AS ModifiedDate\n\tFROM Exp_CoverageDetailCrime_Deprecated\n),\nTGT_CoverageDetailCrime_Upd_Deprecated AS (\n\tMERGE INTO CoverageDetailCrime AS T\n\tUSING UPD_CoverageDetailCrime_Deprecated AS S\n\tON T.PremiumTransactionID = S.Wrk_PremiumTransactionID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.ModifiedDate = S.ModifiedDate, T.IndustryGroup = S.IndustryGroup\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Policy DataWarehouse/"
        },
        "annotations": []
    }
}