{
    "name": "s_m_CLM_DW_LOAD_EOR_Medical_Bill_Vendor",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_EOR_Medical_Bill_Vendor",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_sup_eor_vendor_stage AS (\n\tSELECT\tcase rtrim(vendor_code) when ''  then 'N/A'   else rtrim(vendor_code) end\tAS vendor_code \r\n\t,\t\tcase rtrim(vendor_name) when ''  then 'N/A'    else rtrim(vendor_name) end\tAS vendor_name \r\n\t,\t\tcase rtrim(vendor_addr) when ''  then 'N/A'   else rtrim(vendor_addr) end\tAS vendor_addr \r\n\t,\t\tcase rtrim(vendor_city) when ''  then 'N/A'    else rtrim(vendor_city) end\tAS vendor_city \r\n\t,\t\tcase rtrim(vendor_state) when ''  then 'N/A'    else rtrim(vendor_state) end\tAS vendor_state\r\n\t,\t\tcase rtrim(vendor_zip) when ''  then 'N/A'    else rtrim(vendor_zip) end\t\tAS vendor_zip\r\n\t,\t\tcase rtrim(vendor_ph) when ''  then 'N/A'    else rtrim(vendor_ph) end\t\tAS vendor_ph \r\n\t,\t\tcase rtrim(vendor_fax) when ''  then 'N/A'   else rtrim(vendor_fax) end\t\tAS vendor_fax\r\n\tFROM\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_eor_vendor_stage\n),\nEXP_PROVIDER_TYPE AS (\n\tSELECT\n\tvendor_code,\n\tvendor_name,\n\tvendor_addr,\n\tvendor_city,\n\tvendor_state,\n\tvendor_zip,\n\tvendor_ph,\n\tvendor_fax,\n\t1 AS current_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id\n\tFROM SQ_sup_eor_vendor_stage\n),\nLKP_medical_bill_vendor AS (\n\tSELECT\n\tNewLookupRow,\n\tmed_bill_vendor_ak_id,\n\tin_vendor_code,\n\tvendor_code,\n\tin_vendor_name,\n\tvendor_name,\n\tin_vendor_addr,\n\tvendor_addr,\n\tin_vendor_city,\n\tvendor_city,\n\tin_vendor_state,\n\tvendor_state,\n\tin_vendor_zip,\n\tvendor_zip,\n\tin_vendor_ph,\n\tvendor_ph,\n\tin_vendor_fax,\n\tvendor_fax,\n\tcurrent_snpsht_flag,\n\taudit_id\n\tFROM (\n\t\tSELECT\tmed_bill_vendor_ak_id\tAS med_bill_vendor_ak_id\r\n\t\t,\t\trtrim(vendor_code)\t\tAS vendor_code\r\n\t\t,\t\trtrim(vendor_name)\t\tAS vendor_name\r\n\t\t,\t\trtrim(vendor_addr)\t\tAS vendor_addr\r\n\t\t,\t\trtrim(vendor_city)\t\tAS vendor_city\r\n\t\t,\t\trtrim(vendor_state)\t\tAS vendor_state\r\n\t\t,\t\trtrim(vendor_zip)\t\tAS vendor_zip\r\n\t\t,\t\trtrim(vendor_ph)\t\tAS vendor_ph\r\n\t\t,\t\trtrim(vendor_fax)\t\tAS vendor_fax\r\n\t\tFROM\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_vendor\r\n\t\tWHERE\tcrrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY vendor_code ORDER BY NewLookupRow) = 1\n),\nFIL_NEW_CHANGED_ROWS AS (\n\tSELECT\n\tNewLookupRow, \n\tcurrent_snpsht_flag, \n\taudit_id, \n\tmed_bill_vendor_ak_id, \n\tvendor_code, \n\tvendor_name, \n\tvendor_addr, \n\tvendor_city, \n\tvendor_state, \n\tvendor_zip, \n\tvendor_ph, \n\tvendor_fax\n\tFROM LKP_medical_bill_vendor\n\tWHERE NewLookupRow = 1 OR \r\nNewLookupRow = 2\n),\nEXP_AUDIT_FIELDS AS (\n\tSELECT\n\tcurrent_snpsht_flag,\n\taudit_id,\n\tNewLookupRow,\n\t-- *INF*: iif(NewLookupRow=1,\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(NewLookupRow = 1, to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: to_date('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tto_date('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SOURCE_SYSTEM_ID,\n\tSYSDATE AS CREATE_MOD_DATE,\n\tmed_bill_vendor_ak_id,\n\tvendor_code,\n\tvendor_name,\n\tvendor_addr,\n\tvendor_city,\n\tvendor_state,\n\tvendor_zip,\n\tvendor_ph,\n\tvendor_fax\n\tFROM FIL_NEW_CHANGED_ROWS\n),\nmedical_bill_vendor AS (\n\tINSERT INTO medical_bill_vendor\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, med_bill_vendor_ak_id, vendor_code, vendor_name, vendor_addr, vendor_city, vendor_state, vendor_zip, vendor_ph, vendor_fax)\n\tSELECT \n\tcurrent_snpsht_flag AS CRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYSTEM_ID AS SOURCE_SYS_ID, \n\tCREATE_MOD_DATE AS CREATED_DATE, \n\tCREATE_MOD_DATE AS MODIFIED_DATE, \n\tMED_BILL_VENDOR_AK_ID, \n\tVENDOR_CODE, \n\tVENDOR_NAME, \n\tVENDOR_ADDR, \n\tVENDOR_CITY, \n\tVENDOR_STATE, \n\tVENDOR_ZIP, \n\tVENDOR_PH, \n\tVENDOR_FAX\n\tFROM EXP_AUDIT_FIELDS\n),\nSQ_medical_bill_vendor AS (\n\tSELECT\tmed_bill_vendor_id\r\n\t,\t\teff_from_date\r\n\t,\t\teff_to_date \r\n\t,\t\tmed_bill_vendor_ak_id\r\n\tFROM\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_vendor MBV\r\n\tWHERE\tsource_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tAND\t\tEXISTS\r\n\t\t\t(select 1\r\n\t\t\tFROM\t@{pipeline().parameters.TARGET_TABLE_OWNER}.medical_bill_vendor MBV2\r\n\t\t\tWHERE\tsource_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tAND\t\tcrrnt_snpsht_flag = 1\r\n\t\t\tAND\t\tMBV2.med_bill_vendor_ak_id = MBV.med_bill_vendor_ak_id \r\n\t\t\tGROUP\tBY\tMBV2.med_bill_vendor_ak_id\r\n\t\t\tHAVING\tcount(*) > 1\r\n\t)\r\n\tORDER\tBY med_bill_vendor_ak_id\r\n\t,\t\teff_from_date  desc\n),\nEXP_Lag_eff_from_date11 AS (\n\tSELECT\n\tmed_bill_vendor_id,\n\tmed_bill_vendor_ak_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- \tmed_bill_vendor_ak_id = v_PREV_ROW_occurrence_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date,'SS',-1),\r\n\t-- \torig_eff_to_date)\n\tDECODE(TRUE,\n\tmed_bill_vendor_ak_id = v_PREV_ROW_occurrence_key, ADD_TO_DATE(v_PREV_ROW_eff_from_date, 'SS', - 1),\n\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\teff_from_date AS v_PREV_ROW_eff_from_date,\n\tmed_bill_vendor_ak_id AS v_PREV_ROW_occurrence_key,\n\tSYSDATE AS modified_date,\n\t0 AS crrnt_snpsht_flag\n\tFROM SQ_medical_bill_vendor\n),\nFIL_First_Row_in_AK_Group AS (\n\tSELECT\n\tmed_bill_vendor_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM EXP_Lag_eff_from_date11\n\tWHERE orig_eff_to_date <> eff_to_date\n),\nUPD_MED_Vendor AS (\n\tSELECT\n\tmed_bill_vendor_id, \n\teff_to_date, \n\tmodified_date, \n\tcrrnt_snpsht_flag\n\tFROM FIL_First_Row_in_AK_Group\n),\nmedical_bill_vendor1 AS (\n\tMERGE INTO medical_bill_vendor AS T\n\tUSING UPD_MED_Vendor AS S\n\tON T.med_bill_vendor_id = S.med_bill_vendor_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_date\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246497"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905526"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604444"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:30:37"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:35:40"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}