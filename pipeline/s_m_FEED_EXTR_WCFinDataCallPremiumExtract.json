{
    "name": "s_m_FEED_EXTR_WCFinDataCallPremiumExtract",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_EXTR_WCFinDataCallPremiumExtract",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WorkPremiumWorkersCompensationDataCallExtract AS (\n\tSELECT \r\n\tWorkPremiumWorkersCompensationDataCallExtract.WorkPremiumWorkersCompensationDataCallExtractId, \r\n\tWorkPremiumWorkersCompensationDataCallExtract.AuditId, WorkPremiumWorkersCompensationDataCallExtract.CreatedDate, \r\n\tWorkPremiumWorkersCompensationDataCallExtract.EDWEarnedPremiumMonthlyCalculationPKID, WorkPremiumWorkersCompensationDataCallExtract.RunDate, \r\n\tWorkPremiumWorkersCompensationDataCallExtract.EarnedPremiumRunDate, WorkPremiumWorkersCompensationDataCallExtract.PolicyKey,\r\n\tWorkPremiumWorkersCompensationDataCallExtract.PolicyEffectiveDate, WorkPremiumWorkersCompensationDataCallExtract.StateCode, WorkPremiumWorkersCompensationDataCallExtract.NCCIClassCode, workPremiumWorkersCompensationDataCallExtract.StrategicProfitCenterAbbreviation,\r\n\tWorkPremiumWorkersCompensationDataCallExtract.InsuranceSegmentDescription, WorkPremiumWorkersCompensationDataCallExtract.PolicyOfferingDescription,\r\n\t WorkPremiumWorkersCompensationDataCallExtract.WorkersCompensationPremiumAdjustmentFactorEffectiveDate,\r\n\tWorkPremiumWorkersCompensationDataCallExtract.WorkersCompensationPremiumAdjustmentFactor, WorkPremiumWorkersCompensationDataCallExtract.WorkersCompensationPremiumAdjustmentType, \r\n\t\tWorkPremiumWorkersCompensationDataCallExtract.ConsentToRateFlag, WorkPremiumWorkersCompensationDataCallExtract.RateOverride, WorkPremiumWorkersCompensationDataCallExtract.BaseRate, \r\n\t\tWorkPremiumWorkersCompensationDataCallExtract.RatingStateType, WorkPremiumWorkersCompensationDataCallExtract.DirectEarnedPremium, \r\n\t\tWorkPremiumWorkersCompensationDataCallExtract.RatingCompanyLevelEarnedPremium, WorkPremiumWorkersCompensationDataCallExtract.RatingDSRLevelEarnedPremium,\r\n\t\tWorkPremiumWorkersCompensationDataCallExtract.LossCostCompanyLevelEarnedPremium, WorkPremiumWorkersCompensationDataCallExtract.LossCostDSRLevelEarnedPremium \r\n\tFROM\r\n\tWorkPremiumWorkersCompensationDataCallExtract\r\n\twhere \r\n\t( \r\n\t  (@{pipeline().parameters.RUN_YEAR} !=0 AND\r\n\tYEAR(CAST(WorkPremiumWorkersCompensationDataCallExtract.RunDate AS DATE))=@{pipeline().parameters.RUN_YEAR})\r\n\t    OR\r\n\t  (@{pipeline().parameters.RUN_YEAR} =0 AND YEAR(CAST(WorkPremiumWorkersCompensationDataCallExtract.RunDate as DATE))=(SELECT YEAR(CAST(MAX(RunDate)as DATE)) from WorkPremiumWorkersCompensationDataCallExtract)))      \r\n\torder by statecode,PolicyEffectiveDate,EarnedPremiumRunDate,InsuranceSegmentDescription,PolicyOfferingDescription\n),\nEXP_WCFinDataCallPremiumExtractPassThrough AS (\n\tSELECT\n\tWorkPremiumWorkersCompensationDataCallExtractId,\n\tAuditId,\n\tCreatedDate,\n\tEDWEarnedPremiumMonthlyCalculationPKID,\n\tRunDate,\n\tEarnedPremiumRunDate,\n\t-- *INF*: GET_DATE_PART(EarnedPremiumRunDate, 'YYYY')\n\tDATE_PART(EarnedPremiumRunDate, 'YYYY') AS EPRunYear,\n\tPolicyKey,\n\tPolicyEffectiveDate,\n\t-- *INF*: GET_DATE_PART(PolicyEffectiveDate, 'YYYY')\n\tDATE_PART(PolicyEffectiveDate, 'YYYY') AS PolicyYear,\n\tStateCode,\n\tNCCIClassCode,\n\tStrategicProfitCenterAbbreviation,\n\tInsuranceSegmentDescription,\n\tPolicyOfferingDescription,\n\tWorkersCompensationPremiumAdjustmentFactorEffectiveDate,\n\tWorkersCompensationPremiumAdjustmentFactor,\n\tWorkersCompensationPremiumAdjustmentType,\n\tConsentToRateFlag,\n\t-- *INF*: DECODE (TRUE,\r\n\t-- ConsentToRateFlag = 'F','0',\r\n\t-- ConsentToRateFlag = 'T','1',\r\n\t-- '0')\r\n\t-- --INC0020061: Fix reading of bit flag to activate override logic\n\tDECODE(\n\t    TRUE,\n\t    ConsentToRateFlag = 'F', '0',\n\t    ConsentToRateFlag = 'T', '1',\n\t    '0'\n\t) AS v_ConsentToRateFlag,\n\tRateOverride,\n\tBaseRate,\n\tRatingStateType,\n\tDirectEarnedPremium,\n\tRatingCompanyLevelEarnedPremium,\n\tRatingDSRLevelEarnedPremium,\n\t-- *INF*: IIF(WorkersCompensationPremiumAdjustmentType = 'Deviation' and v_ConsentToRateFlag ='1', (DirectEarnedPremium*  ( BaseRate / RateOverride) * WorkersCompensationPremiumAdjustmentFactor),RatingDSRLevelEarnedPremium)\n\tIFF(\n\t    WorkersCompensationPremiumAdjustmentType = 'Deviation' and v_ConsentToRateFlag = '1',\n\t    (DirectEarnedPremium * (BaseRate / RateOverride) * WorkersCompensationPremiumAdjustmentFactor),\n\t    RatingDSRLevelEarnedPremium\n\t) AS o_RatingDSRLevelEarnedPremium,\n\tLossCostCompanyLevelEarnedPremium,\n\tLossCostDSRLevelEarnedPremium,\n\t-- *INF*: IIF(WorkersCompensationPremiumAdjustmentType = 'LCM' and v_ConsentToRateFlag ='1', (DirectEarnedPremium*  ( BaseRate / RateOverride) * WorkersCompensationPremiumAdjustmentFactor),LossCostDSRLevelEarnedPremium)\n\tIFF(\n\t    WorkersCompensationPremiumAdjustmentType = 'LCM' and v_ConsentToRateFlag = '1',\n\t    (DirectEarnedPremium * (BaseRate / RateOverride) * WorkersCompensationPremiumAdjustmentFactor),\n\t    LossCostDSRLevelEarnedPremium\n\t) AS o_LossCostDSRLevelEarnedPremium\n\tFROM SQ_WorkPremiumWorkersCompensationDataCallExtract\n),\nAGGTRANS AS (\n\tSELECT\n\tWorkPremiumWorkersCompensationDataCallExtractId,\n\tAuditId,\n\tCreatedDate,\n\tEDWEarnedPremiumMonthlyCalculationPKID,\n\tRunDate,\n\tEPRunYear AS EarnedPremiumRunYear,\n\tPolicyKey,\n\tPolicyYear,\n\tStateCode,\n\tNCCIClassCode,\n\tStrategicProfitCenterAbbreviation,\n\tInsuranceSegmentDescription,\n\tPolicyOfferingDescription,\n\tWorkersCompensationPremiumAdjustmentFactorEffectiveDate,\n\tWorkersCompensationPremiumAdjustmentFactor,\n\tWorkersCompensationPremiumAdjustmentType,\n\tRateOverride,\n\tBaseRate,\n\tRatingStateType,\n\tDirectEarnedPremium,\n\t-- *INF*: sum(DirectEarnedPremium)\n\tsum(DirectEarnedPremium) AS o_DirectEarnedPremium,\n\tRatingCompanyLevelEarnedPremium,\n\t-- *INF*: sum(RatingCompanyLevelEarnedPremium)\n\tsum(RatingCompanyLevelEarnedPremium) AS o_RatingCompanyLevelEarnedPremium,\n\to_RatingDSRLevelEarnedPremium AS RatingDSRLevelEarnedPremium,\n\t-- *INF*: sum(RatingDSRLevelEarnedPremium)\n\tsum(RatingDSRLevelEarnedPremium) AS o_RatingDSRLevelEarnedPremium,\n\tLossCostCompanyLevelEarnedPremium,\n\t-- *INF*: sum(LossCostCompanyLevelEarnedPremium)\n\tsum(LossCostCompanyLevelEarnedPremium) AS o_LossCostCompanyLevelEarnedPremium,\n\to_LossCostDSRLevelEarnedPremium AS LossCostDSRLevelEarnedPremium,\n\t-- *INF*: sum(LossCostDSRLevelEarnedPremium)\n\tsum(LossCostDSRLevelEarnedPremium) AS o_LossCostDSRLevelEarnedPremium\n\tFROM EXP_WCFinDataCallPremiumExtractPassThrough\n\tGROUP BY EarnedPremiumRunYear, PolicyYear, StateCode, StrategicProfitCenterAbbreviation, InsuranceSegmentDescription, PolicyOfferingDescription\n),\nAGGTRANS1 AS (\n\tSELECT\n\tRunDate,\n\tEarnedPremiumRunYear,\n\tPolicyKey,\n\tPolicyYear,\n\tStateCode,\n\tStrategicProfitCenterAbbreviation,\n\tInsuranceSegmentDescription,\n\tPolicyOfferingDescription,\n\to_DirectEarnedPremium AS DirectEarnedPremium,\n\to_RatingCompanyLevelEarnedPremium AS RatingCompanyLevelEarnedPremium,\n\to_RatingDSRLevelEarnedPremium AS RatingDSRLevelEarnedPremium,\n\to_LossCostCompanyLevelEarnedPremium AS LossCostCompanyLevelEarnedPremium,\n\to_LossCostDSRLevelEarnedPremium AS LossCostDSRLevelEarnedPremium,\n\t-- *INF*: SUM(RatingCompanyLevelEarnedPremium+LossCostCompanyLevelEarnedPremium)\n\tSUM(RatingCompanyLevelEarnedPremium + LossCostCompanyLevelEarnedPremium) AS o_CompanyLevelEP,\n\t-- *INF*: sum(RatingDSRLevelEarnedPremium+LossCostDSRLevelEarnedPremium)\n\tsum(RatingDSRLevelEarnedPremium + LossCostDSRLevelEarnedPremium) AS o_DSRLevelEP\n\tFROM AGGTRANS\n\tGROUP BY EarnedPremiumRunYear, PolicyYear, StateCode, StrategicProfitCenterAbbreviation, InsuranceSegmentDescription, PolicyOfferingDescription\n),\nSRT_EXTR AS (\n\tSELECT\n\tStateCode, \n\tPolicyYear, \n\tEarnedPremiumRunYear, \n\tStrategicProfitCenterAbbreviation, \n\tInsuranceSegmentDescription, \n\tPolicyOfferingDescription, \n\tRunDate, \n\tDirectEarnedPremium, \n\to_CompanyLevelEP, \n\to_DSRLevelEP\n\tFROM AGGTRANS1\n\tORDER BY StateCode ASC, PolicyYear ASC, EarnedPremiumRunYear ASC, StrategicProfitCenterAbbreviation ASC, InsuranceSegmentDescription ASC, PolicyOfferingDescription ASC\n),\nWorkPremiumWorkersCompensationExtractFile AS (\n\tINSERT INTO WorkPremiumWorkersCompensationExtractFile\n\t(RunDate, StateCode, StrategicProfitCenterAbbreviation, InsuranceSegmentDescription, PolicyOfferingDescription, PolicyYear, CalendarYear, DirectEarnedPremium, CompanyLevelEarnedPremium, DSRLevelEarnedPremium)\n\tSELECT \n\tRUNDATE, \n\tSTATECODE, \n\tSTRATEGICPROFITCENTERABBREVIATION, \n\tINSURANCESEGMENTDESCRIPTION, \n\tPOLICYOFFERINGDESCRIPTION, \n\tPOLICYYEAR, \n\tEarnedPremiumRunYear AS CALENDARYEAR, \n\tDIRECTEARNEDPREMIUM, \n\to_CompanyLevelEP AS COMPANYLEVELEARNEDPREMIUM, \n\to_DSRLevelEP AS DSRLEVELEARNEDPREMIUM\n\tFROM SRT_EXTR\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "RUN_YEAR": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataServices/"
        },
        "annotations": []
    }
}