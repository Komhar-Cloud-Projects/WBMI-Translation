{
    "name": "s_m_POL_DIV_DW_LOAD_DCTDividend",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DIV_DW_LOAD_DCTDividend",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Policy AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_num,\n\ti_pol_num,\n\tpol_mod,\n\ti_pol_mod\n\tFROM (\n\t\tSELECT \n\t\t\tpol_ak_id,\n\t\t\tpol_num,\n\t\t\ti_pol_num,\n\t\t\tpol_mod,\n\t\t\ti_pol_mod\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\n\t\tWHERE source_sys_id  = 'DCT' and crrnt_snpsht_flag = '1'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_num,pol_mod ORDER BY pol_ak_id) = 1\n),\nSQ_WBWCDCTDividendStage AS (\n\tSelect \r\n\tWBWCD.DividendType, \r\n\tWBWCD.DividendOptions, \r\n\tDCP.PolicyNumber, \r\n\tDCT.HistoryID,\r\n\tDCS.Purpose, \r\n\tDCT.Type,\r\n\tWBWCL.DividendPrior, \r\n\tWBWCL.DividendChange, \r\n\tWBWCL.DividendPremium, \r\n\tWBWCD.DividendPaid, \r\n\twbwcl.DividendPaidDate,\r\n\tDCS.Createdatetime, \r\n\tDCS.SessionID,\r\n\tmax(DCS.SessionID) over(partition by DCT.HistoryID,DCS.Purpose, ISNULL(WBWCD.State,DCWCL.PrimaryLocationState),DCT.Type) MaxSessionId,\r\n\tWBWCD.State,\r\n\tDCWCL.PrimaryLocationState,\r\n\twbp.PolicyVersionFormatted,\r\n\tWBWCD.ManualDividendCalculation,\r\n\tWBWCD.ExtractDate as TransactionPostedDate\r\n\tFROM @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging DCP\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WBPolicyStaging WBP on DCP.SessionId=WBP.SessionId and DCP.PolicyId=WBP.PolicyId \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging DCT on DCT.SessionId=DCP.SessionId  \r\n\tand DCT.State='Committed' and DCT.type like '%Dividend'\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCL on WBP.SessionID = DCL.SessionID and WBP.PolicyID = DCL.PolicyID and DCL.Type = 'WorkersCompensation'\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCLineStaging DCWCL on DCL.SessionID = DCWCL.SessionID and DCL.LineID = DCWCL.LineID\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCLineStage WBWCL on WBWCL.SessionId = DCWCL.SessionId and WBWCL.WCLineId = DCWCL.WC_LineId \r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WBWCDividendStage WBWCD on WBWCL.SessionId=WBWCD.SessionId  and WBWCD.WCLineId = WBWCL.WCLineId\r\n\tjoin @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.DCSessionStaging DCS on dcs.SessionId = DCT.SessionId\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\r\n\t  order by  DCT.SessionId\n),\nFLT_Remove_Invalid_Policies AS (\n\tSELECT\n\tCreateDateTime AS TransactionDate, \n\tDividendType, \n\tDividendOption, \n\tPolicyNumber, \n\tHistoryID, \n\tPurpose, \n\tType, \n\tDividendPrior, \n\tDividendChange, \n\tDividendPremium, \n\tDividendPaid, \n\tDividendPaidDate, \n\tSessionId, \n\tMaxSessionId, \n\tDividend_state, \n\tLine_state, \n\tPolicyVersionFormatted, \n\tManualDividendCalculation, \n\tTransactionPostedDate\n\tFROM SQ_WBWCDCTDividendStage\n\tWHERE LENGTH(PolicyNumber)=7  and SessionId = MaxSessionId\n),\nEXP_GetValue AS (\n\tSELECT\n\tTransactionDate AS i_TransactionDate,\n\tDividendType AS i_DividendType,\n\tDividendOption AS i_DividendOption,\n\tHistoryID AS i_HistoryID,\n\tPurpose AS i_Purpose,\n\tType AS i_Type,\n\tDividendPrior AS i_DividendPrior,\n\tDividendChange AS i_DividendChange,\n\tDividendPremium AS i_DividendPremium,\n\tDividendPaid AS i_DividendPaid,\n\tDividend_state AS i_Dividend_state,\n\tLine_state AS i_Line_state,\n\tPolicyNumber AS i_PolicyNumber,\n\tPolicyVersionFormatted AS i_PolicyVersionFormatted,\n\tManualDividendCalculation AS i_ManualDividendCalculation,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(iif (not isnull(i_Dividend_state),i_Dividend_state,i_Line_state))))\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(IFF(NOT i_Dividend_state IS NULL, i_Dividend_state, i_Line_state)))) AS v_PrimaryLocationState,\n\t-- *INF*: :LKP.LKP_POLICY(i_PolicyNumber,i_PolicyVersionFormatted)\n\tLKP_POLICY_i_PolicyNumber_i_PolicyVersionFormatted.pol_ak_id AS v_pol_ak_id,\n\t-- *INF*: REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(IIF(LTRIM(RTRIM(i_DividendType))='None','N/A',LTRIM(RTRIM(i_DividendType)))),' ','')\n\tREPLACESTR(1, :UDF.DEFAULT_VALUE_FOR_STRINGS(IFF(LTRIM(RTRIM(i_DividendType)) = 'None', 'N/A', LTRIM(RTRIM(i_DividendType)))), ' ', '') AS v_DividendType,\n\t-- *INF*: REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_DividendOption))),' ','')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --REPLACESTR(1,:UDF.DEFAULT_VALUE_FOR_STRINGS(IIF(LTRIM(RTRIM(i_DividendOption))='0','N/A',LTRIM(RTRIM(i_DividendOption)))),' ','')\r\n\t-- \r\n\t-- \r\n\t-- \n\tREPLACESTR(1, :UDF.DEFAULT_VALUE_FOR_STRINGS(LTRIM(RTRIM(i_DividendOption))), ' ', '') AS v_DividendOption,\n\t-- *INF*: IIF(i_ManualDividendCalculation='T',1,0)\n\tIFF(i_ManualDividendCalculation = 'T', 1, 0) AS v_ManualDividendCalculation,\n\t-- *INF*: iif(not isnull(i_DividendChange),i_DividendChange, 0.00)\n\tIFF(NOT i_DividendChange IS NULL, i_DividendChange, 0.00) AS v_DividendChange,\n\t-- *INF*: iif(not isnull(i_DividendPremium),i_DividendPremium, 0.00)\n\tIFF(NOT i_DividendPremium IS NULL, i_DividendPremium, 0.00) AS v_DividendPremium,\n\t-- *INF*: iif(not isnull(i_DividendPaid),i_DividendPaid, 0.00)\n\tIFF(NOT i_DividendPaid IS NULL, i_DividendPaid, 0.00) AS v_DividendPaid,\n\t-- *INF*: decode(TRUE, i_Type = 'Dividend' and i_Purpose = 'Onset' ,v_DividendPremium,\r\n\t-- \t i_Type = 'Dividend' and i_Purpose = 'Offset', v_DividendPremium * -1, i_Type = 'RevisedDividend' and i_Purpose = 'Onset', v_DividendChange, i_Type = 'RevisedDividend' and i_Purpose = 'Offset' , v_DividendChange * -1,\r\n\t--  i_Type = 'VoidDividend' , 0 )\n\tdecode(TRUE,\n\t\ti_Type = 'Dividend' AND i_Purpose = 'Onset', v_DividendPremium,\n\t\ti_Type = 'Dividend' AND i_Purpose = 'Offset', v_DividendPremium * - 1,\n\t\ti_Type = 'RevisedDividend' AND i_Purpose = 'Onset', v_DividendChange,\n\t\ti_Type = 'RevisedDividend' AND i_Purpose = 'Offset', v_DividendChange * - 1,\n\t\ti_Type = 'VoidDividend', 0) AS v_DividendPaidAmount,\n\tDividendPaidDate AS i_DividendPaidDate,\n\t-- *INF*: iif(not isnull(v_pol_ak_id),v_pol_ak_id,-1)\n\tIFF(NOT v_pol_ak_id IS NULL, v_pol_ak_id, - 1) AS o_pol_ak_id,\n\tv_DividendPaidAmount AS o_DividendPaidAmount,\n\t-- *INF*: TO_DATE(TO_CHAR(\r\n\t-- IIF(ISNULL(i_TransactionDate),TO_DATE('1800-01-01 00:00:00.000','YYYY-MM-DD HH24:MI:SS.MS'),i_TransactionDate)\r\n\t-- ,'YYYYMMDD'),'YYYYMMDD')\n\tTO_DATE(TO_CHAR(IFF(i_TransactionDate IS NULL, TO_DATE('1800-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_TransactionDate), 'YYYYMMDD'), 'YYYYMMDD') AS o_TransactionDate,\n\tv_PrimaryLocationState AS o_PrimaryLocationState,\n\t-- *INF*: v_DividendType\r\n\t-- \r\n\t-- --IIF(v_DividendType!='FlatCapped',v_DividendType,'CappedFlat')\n\tv_DividendType AS o_DividendType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_DividendOption='0','N/A',\r\n\t-- IS_NUMBER(v_DividendOption),v_DividendOption||'%',\r\n\t-- REPLACESTR(0,v_DividendOption,'with','w/'))\n\tDECODE(TRUE,\n\t\tv_DividendOption = '0', 'N/A',\n\t\tIS_NUMBER(v_DividendOption), v_DividendOption || '%',\n\t\tREPLACESTR(0, v_DividendOption, 'with', 'w/')) AS o_DividendOption,\n\ti_HistoryID AS o_HistoryID,\n\ti_Purpose AS o_Purpose,\n\ti_Type AS o_Type,\n\ti_DividendPrior AS o_DividendPrior,\n\ti_DividendChange AS o_DividendChange,\n\ti_DividendPremium AS o_DividendPremium,\n\t-- *INF*: IIF(ISNULL(i_DividendPaidDate),TO_DATE('1800-01-01 00:00:00.000','YYYY-MM-DD HH24:MI:SS.MS'),i_DividendPaidDate)\n\tIFF(i_DividendPaidDate IS NULL, TO_DATE('1800-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_DividendPaidDate) AS o_DividendPaidDate,\n\tTransactionPostedDate,\n\tSessionId\n\tFROM FLT_Remove_Invalid_Policies\n\tLEFT JOIN LKP_POLICY LKP_POLICY_i_PolicyNumber_i_PolicyVersionFormatted\n\tON LKP_POLICY_i_PolicyNumber_i_PolicyVersionFormatted.pol_num = i_PolicyNumber\n\tAND LKP_POLICY_i_PolicyNumber_i_PolicyVersionFormatted.pol_mod = i_PolicyVersionFormatted\n\n),\nmplt_Evaluate_DCTDividend AS (WITH\n\tINPUT_DCTDividend AS (\n\t\t\n\t),\n\tEXP_Passthrough AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tDividendPaidAmount,\n\t\tTransactionEnteredDate,\n\t\tTransactionPostedDate,\n\t\tPrimaryLocationState,\n\t\tDividendType,\n\t\tDividendOption,\n\t\tHistoryID,\n\t\tPurpose,\n\t\tType,\n\t\tDividendPrior,\n\t\tDividendChange,\n\t\tDividendPremium,\n\t\tDividendPaidDate,\n\t\tSessionId,\n\t\tPolicyKey\n\t\tFROM INPUT_DCTDividend\n\t),\n\tAGG_RemoveDuplicate AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tDividendPaidAmount,\n\t\tTransactionEnteredDate,\n\t\tTransactionPostedDate,\n\t\tPrimaryLocationState,\n\t\tDividendType,\n\t\tDividendOption,\n\t\tHistoryID,\n\t\tPurpose,\n\t\tType,\n\t\tDividendPrior,\n\t\tDividendChange,\n\t\tDividendPremium,\n\t\tDividendPaidDate,\n\t\tSessionId,\n\t\tPolicyKey\n\t\tFROM EXP_Passthrough\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id, TransactionEnteredDate, TransactionPostedDate, PrimaryLocationState, HistoryID, Purpose, Type, SessionId, PolicyKey ORDER BY NULL) = 1\n\t),\n\tLKP_SupDividendType AS (\n\t\tSELECT\n\t\tSupDividendTypeID,\n\t\tPMSStateCode,\n\t\tDividendType,\n\t\tDividendPlan,\n\t\tStandardDividendType,\n\t\tStandardDividendPlan\n\t\tFROM (\n\t\t\tSELECT a.SupDividendTypeID as SupDividendTypeID,\r\n\t\t\treplace(a.StandardDividendType,'?','') as StandardDividendType, \r\n\t\t\treplace(replace(a.StandardDividendPlan,' ',''),'?','') as StandardDividendPlan,\r\n\t\t\ta.PMSStateCode as PMSStateCode, \r\n\t\t\treplace(a.DividendType,' ','') as DividendType, \r\n\t\t\treplace(replace(a.DividendPlan,' ',''),'?','') as DividendPlan\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupDividendType a\r\n\t\t\twhere a.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PMSStateCode,DividendType,DividendPlan ORDER BY SupDividendTypeID DESC) = 1\n\t),\n\tEXP_PlanandType AS (\n\t\tSELECT\n\t\tAGG_RemoveDuplicate.pol_ak_id AS i_pol_ak_id,\n\t\tAGG_RemoveDuplicate.DividendPaidAmount AS i_DividendPaidAmount,\n\t\tAGG_RemoveDuplicate.TransactionEnteredDate AS i_TransactionDate,\n\t\tAGG_RemoveDuplicate.TransactionPostedDate,\n\t\tAGG_RemoveDuplicate.PrimaryLocationState AS i_PrimaryLocationState,\n\t\tLKP_SupDividendType.SupDividendTypeID AS lkp_SupDividendTypeID,\n\t\tLKP_SupDividendType.PMSStateCode AS lkp_PMSStateCode,\n\t\tLKP_SupDividendType.DividendType AS lkp_DividendType,\n\t\tLKP_SupDividendType.DividendPlan AS lkp_DividendPlan,\n\t\tLKP_SupDividendType.StandardDividendType AS lkp_StandardDividendType,\n\t\tLKP_SupDividendType.StandardDividendPlan AS lkp_StandardDividendPlan,\n\t\ti_pol_ak_id AS o_PolicyAKId,\n\t\t-- *INF*: IIF(ISNULL(i_DividendPaidAmount),0,i_DividendPaidAmount)\n\t\tIFF(i_DividendPaidAmount IS NULL, 0, i_DividendPaidAmount) AS o_DividendPaidAmount,\n\t\t-- *INF*: IIF(ISNULL(i_TransactionDate),TO_DATE('1800-01-01 00:00:00.000','YYYY-MM-DD HH24:MI:SS.MS'),i_TransactionDate)\n\t\tIFF(i_TransactionDate IS NULL, TO_DATE('1800-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.MS'), i_TransactionDate) AS o_DividendTransactionEnteredDate,\n\t\t-- *INF*: IIF(ISNULL(i_PrimaryLocationState),'N/A',i_PrimaryLocationState)\r\n\t\t-- \r\n\t\t-- --IIF(ISNULL(lkp_PMSStateCode),'N/A',lkp_PMSStateCode)\n\t\tIFF(i_PrimaryLocationState IS NULL, 'N/A', i_PrimaryLocationState) AS o_StateCode,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- ISNULL(lkp_DividendPlan) or lkp_DividendPlan='N/A','No Dividend',\r\n\t\t-- lkp_DividendType='FlatVariable', 'Flat '||lkp_StandardDividendPlan||' Variable',\r\n\t\t-- lkp_DividendType='Flat',lkp_StandardDividendPlan||' Flat',\r\n\t\t-- lkp_StandardDividendType||' '||lkp_StandardDividendPlan\r\n\t\t-- )\r\n\t\t-- \n\t\tDECODE(TRUE,\n\t\t\tlkp_DividendPlan IS NULL OR lkp_DividendPlan = 'N/A', 'No Dividend',\n\t\t\tlkp_DividendType = 'FlatVariable', 'Flat ' || lkp_StandardDividendPlan || ' Variable',\n\t\t\tlkp_DividendType = 'Flat', lkp_StandardDividendPlan || ' Flat',\n\t\t\tlkp_StandardDividendType || ' ' || lkp_StandardDividendPlan) AS v_DividendPlan,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- NOT ISNULL(lkp_DividendType),lkp_StandardDividendType,\r\n\t\t-- 'No Dividend')\r\n\t\t-- \n\t\tDECODE(TRUE,\n\t\t\tNOT lkp_DividendType IS NULL, lkp_StandardDividendType,\n\t\t\t'No Dividend') AS v_DividendType,\n\t\t-- *INF*: IIF(ISNULL(v_DividendPlan),'N/A',v_DividendPlan)\r\n\t\t-- \n\t\tIFF(v_DividendPlan IS NULL, 'N/A', v_DividendPlan) AS o_DividendPlan,\n\t\t-- *INF*: IIF(ISNULL(v_DividendType),'N/A',v_DividendType)\r\n\t\t-- \n\t\tIFF(v_DividendType IS NULL, 'N/A', v_DividendType) AS o_DividendType,\n\t\t-- *INF*: IIF(ISNULL(lkp_SupDividendTypeID),-1,lkp_SupDividendTypeID)\n\t\tIFF(lkp_SupDividendTypeID IS NULL, - 1, lkp_SupDividendTypeID) AS o_SupDividendTypeId,\n\t\tAGG_RemoveDuplicate.HistoryID AS i_HistoryID,\n\t\tAGG_RemoveDuplicate.Purpose AS i_Purpose,\n\t\tAGG_RemoveDuplicate.Type AS i_Type,\n\t\tAGG_RemoveDuplicate.DividendPrior AS i_DividendPrior,\n\t\tAGG_RemoveDuplicate.DividendChange AS i_DividendChange,\n\t\tAGG_RemoveDuplicate.DividendPremium AS i_DividendPremium,\n\t\tAGG_RemoveDuplicate.DividendPaidDate AS i_DividendPaidDate,\n\t\tAGG_RemoveDuplicate.SessionId,\n\t\tAGG_RemoveDuplicate.PolicyKey\n\t\tFROM AGG_RemoveDuplicate\n\t\tLEFT JOIN LKP_SupDividendType\n\t\tON LKP_SupDividendType.PMSStateCode = AGG_RemoveDuplicate.PrimaryLocationState AND LKP_SupDividendType.DividendType = AGG_RemoveDuplicate.DividendType AND LKP_SupDividendType.DividendPlan = AGG_RemoveDuplicate.DividendOption\n\t),\n\tLKP_sup_state AS (\n\t\tSELECT\n\t\tsup_state_id,\n\t\tstate_code\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\ts.sup_state_id as sup_state_id, \r\n\t\t\ts.state_code as state_code FROM \r\n\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_state s\r\n\t\t\tWHERE s.crrnt_snpsht_flag = 1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY state_code ORDER BY sup_state_id DESC) = 1\n\t),\n\tEXP_sup_state AS (\n\t\tSELECT\n\t\tEXP_PlanandType.o_PolicyAKId AS PolicyAKId,\n\t\tEXP_PlanandType.o_DividendPaidAmount AS DividendPaidAmount,\n\t\tEXP_PlanandType.o_DividendTransactionEnteredDate AS DividendTransactionEnteredDate,\n\t\tEXP_PlanandType.o_StateCode AS StateCode,\n\t\tEXP_PlanandType.o_DividendPlan AS DividendPlan,\n\t\tEXP_PlanandType.o_DividendType AS DividendType,\n\t\tEXP_PlanandType.o_SupDividendTypeId AS SupDividendTypeId,\n\t\tEXP_PlanandType.i_HistoryID AS HistoryID,\n\t\tEXP_PlanandType.i_Purpose AS Purpose,\n\t\tEXP_PlanandType.i_Type AS Type,\n\t\tEXP_PlanandType.i_DividendPrior AS DividendPrior,\n\t\tEXP_PlanandType.i_DividendChange AS DividendChange,\n\t\tEXP_PlanandType.i_DividendPremium AS DividendPremium,\n\t\tEXP_PlanandType.i_DividendPaidDate AS DividendPaidDate,\n\t\tLKP_sup_state.sup_state_id AS lkp_sup_state_id,\n\t\t-- *INF*: IIF(ISNULL(lkp_sup_state_id),-1,lkp_sup_state_id)\n\t\tIFF(lkp_sup_state_id IS NULL, - 1, lkp_sup_state_id) AS o_sup_state_id,\n\t\tEXP_PlanandType.SessionId,\n\t\tEXP_PlanandType.PolicyKey,\n\t\tEXP_PlanandType.TransactionPostedDate\n\t\tFROM EXP_PlanandType\n\t\tLEFT JOIN LKP_sup_state\n\t\tON LKP_sup_state.state_code = EXP_PlanandType.o_StateCode\n\t),\n\tLKP_DCTDividend_find_prior AS (\n\t\tSELECT\n\t\tDCTDividendId,\n\t\tDCTDividendAKId,\n\t\tDividendTransactionEnteredDate,\n\t\tDividendPaidAmount,\n\t\tDCTDividendPriorAmount,\n\t\tDCTDividendChangeAmount,\n\t\tDCTDividendPremiumAmount,\n\t\tDCTDividendPaidDate,\n\t\tDCTDividendHistoryId,\n\t\tStateCode,\n\t\tDCTDividendPurpose\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tDCTDividend.DCTDividendId as DCTDividendId, \r\n\t\t\tDCTDividend.DCTDividendAKId as DCTDividendAKId, \r\n\t\t\tDCTDividend.DividendTransactionEnteredDate as DividendTransactionEnteredDate, DCTDividend.DividendTransactionPostedDate as DividendTransactionPostedDate, DCTDividend.DividendPaidAmount as DividendPaidAmount, \r\n\t\t\tDCTDividend.DCTDividendPriorAmount as DCTDividendPriorAmount, DCTDividend.DCTDividendChangeAmount as DCTDividendChangeAmount, DCTDividend.DCTDividendPremiumAmount as DCTDividendPremiumAmount, DCTDividend.DCTDividendPaidDate as DCTDividendPaidDate, \r\n\t\t\tDCTDividend.DCTDividendHistoryId as DCTDividendHistoryId, \r\n\t\t\tDCTDividend.DCTDividendPurpose as DCTDividendPurpose, \r\n\t\t\tDCTDividend.StateCode as StateCode \r\n\t\t\tFROM DCTDividend\r\n\t\t\torder by DCTDividendHistoryId,DCTDividendPurpose, DCTDividendAKId --\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY DCTDividendHistoryId,StateCode,DCTDividendPurpose ORDER BY DCTDividendId DESC) = 1\n\t),\n\tEXP_Collect_Original_Build_Deprecated AS (\n\t\tSELECT\n\t\tEXP_sup_state.PolicyAKId,\n\t\tEXP_sup_state.DividendPaidAmount,\n\t\tEXP_sup_state.DividendTransactionEnteredDate,\n\t\tEXP_sup_state.StateCode,\n\t\tEXP_sup_state.DividendPlan,\n\t\tEXP_sup_state.DividendType,\n\t\tEXP_sup_state.SupDividendTypeId,\n\t\tEXP_sup_state.o_sup_state_id,\n\t\tEXP_sup_state.HistoryID,\n\t\tEXP_sup_state.Purpose,\n\t\tEXP_sup_state.Type,\n\t\tEXP_sup_state.DividendPrior,\n\t\tEXP_sup_state.DividendChange,\n\t\tEXP_sup_state.DividendPremium,\n\t\tEXP_sup_state.DividendPaidDate,\n\t\tEXP_sup_state.SessionId,\n\t\tEXP_sup_state.PolicyKey,\n\t\tLKP_DCTDividend_find_prior.DCTDividendId AS lkp_DCTDividendId,\n\t\tLKP_DCTDividend_find_prior.DCTDividendAKId AS lkp_DCTDividendAKId,\n\t\tlkp_DCTDividendAKId*-1 AS o_lkp_DCTDividendAKId,\n\t\tLKP_DCTDividend_find_prior.DividendTransactionEnteredDate AS lkp_DividendTransactionEnteredDate,\n\t\tLKP_DCTDividend_find_prior.DividendPaidAmount AS lkp_DividendPaidAmount,\n\t\tlkp_DividendPaidAmount *  - 1 AS o_lkp_DividendPaidAmount,\n\t\t-- *INF*: decode (TRUE,\r\n\t\t-- Purpose = 'Onset','Offset',\r\n\t\t-- 'Onset')\n\t\tdecode(TRUE,\n\t\t\tPurpose = 'Onset', 'Offset',\n\t\t\t'Onset') AS DerivedPurpose,\n\t\tLKP_DCTDividend_find_prior.DCTDividendPriorAmount AS lkp_DCTDividendPriorAmount,\n\t\tLKP_DCTDividend_find_prior.DCTDividendChangeAmount AS lkp_DCTDividendChangeAmount,\n\t\tLKP_DCTDividend_find_prior.DCTDividendPremiumAmount AS lkp_DCTDividendPremiumAmount,\n\t\tLKP_DCTDividend_find_prior.DCTDividendPaidDate AS lkp_DCTDividendPaidDate,\n\t\t-- *INF*: DECODE (TRUE,\r\n\t\t-- NOT isnull(lkp_DCTDividendId)  AND Type = 'Dividend'  AND lkp_DCTDividendPremiumAmount != DividendPremium,'Y',\r\n\t\t-- NOT isnull(lkp_DCTDividendId)  AND Type = 'RevisedDividend'  AND lkp_DCTDividendChangeAmount != DividendChange,'Y',\r\n\t\t-- NOT isnull(lkp_DCTDividendId)  AND Type = 'Dividend'  AND lkp_DCTDividendPremiumAmount = DividendPremium,'S',\r\n\t\t-- NOT isnull(lkp_DCTDividendId)  AND Type = 'RevisedDividend'  AND lkp_DCTDividendChangeAmount = DividendChange,'S',\r\n\t\t-- NOT isnull(lkp_DCTDividendId)  AND Type = 'VoidDividend','S',\r\n\t\t-- 'N')\n\t\tDECODE(TRUE,\n\t\t\tNOT lkp_DCTDividendId IS NULL AND Type = 'Dividend' AND lkp_DCTDividendPremiumAmount != DividendPremium, 'Y',\n\t\t\tNOT lkp_DCTDividendId IS NULL AND Type = 'RevisedDividend' AND lkp_DCTDividendChangeAmount != DividendChange, 'Y',\n\t\t\tNOT lkp_DCTDividendId IS NULL AND Type = 'Dividend' AND lkp_DCTDividendPremiumAmount = DividendPremium, 'S',\n\t\t\tNOT lkp_DCTDividendId IS NULL AND Type = 'RevisedDividend' AND lkp_DCTDividendChangeAmount = DividendChange, 'S',\n\t\t\tNOT lkp_DCTDividendId IS NULL AND Type = 'VoidDividend', 'S',\n\t\t\t'N') AS Deprecate_Flag,\n\t\tEXP_sup_state.TransactionPostedDate\n\t\tFROM EXP_sup_state\n\t\tLEFT JOIN LKP_DCTDividend_find_prior\n\t\tON LKP_DCTDividend_find_prior.DCTDividendHistoryId = EXP_sup_state.HistoryID AND LKP_DCTDividend_find_prior.StateCode = EXP_sup_state.StateCode AND LKP_DCTDividend_find_prior.DCTDividendPurpose = EXP_sup_state.Purpose\n\t),\n\tRTR_Insert_and_Deprecation AS (\n\t\tSELECT\n\t\tPolicyAKId,\n\t\tDividendPaidAmount,\n\t\tDividendTransactionEnteredDate,\n\t\tTransactionPostedDate AS DividendTransactionPostedDate,\n\t\tStateCode,\n\t\tDividendPlan,\n\t\tDividendType,\n\t\tSupDividendTypeId,\n\t\to_sup_state_id,\n\t\tHistoryID,\n\t\tPurpose,\n\t\tType,\n\t\tDividendPrior,\n\t\tDividendChange,\n\t\tDividendPremium,\n\t\tDividendPaidDate,\n\t\tSessionId,\n\t\tPolicyKey,\n\t\to_lkp_DCTDividendAKId AS lkp_DCTDividendAKId,\n\t\tDerivedPurpose,\n\t\tlkp_DividendTransactionEnteredDate,\n\t\to_lkp_DividendPaidAmount AS lkp_DividendPaidAmount,\n\t\tlkp_DCTDividendPriorAmount,\n\t\tlkp_DCTDividendChangeAmount,\n\t\tlkp_DCTDividendPremiumAmount,\n\t\tlkp_DCTDividendPaidDate,\n\t\tDeprecate_Flag\n\t\tFROM EXP_Collect_Original_Build_Deprecated\n\t),\n\tRTR_Insert_and_Deprecation_DEPRECATION AS (SELECT * FROM RTR_Insert_and_Deprecation WHERE Deprecate_Flag = 'Y'),\n\tRTR_Insert_and_Deprecation_SKIP AS (SELECT * FROM RTR_Insert_and_Deprecation WHERE Deprecate_Flag = 'S'),\n\tRTR_Insert_and_Deprecation_INSERT AS (SELECT * FROM RTR_Insert_and_Deprecation WHERE Deprecate_Flag  !=  'S'),\n\tUnion_Insert_and_Deprecation AS (\n\t\tSELECT PolicyAKId, DividendPaidAmount, DividendTransactionEnteredDate, StateCode, DividendPlan, DividendType, SupDividendTypeId, o_sup_state_id AS sup_state_id, HistoryID, Purpose, Type, DividendPrior, DividendChange, DividendPremium, DividendPaidDate, SessionId, PolicyKey, DividendTransactionPostedDate\n\t\tFROM \n\t\tUNION\n\t\tSELECT PolicyAKId, lkp_DividendPaidAmount AS DividendPaidAmount, lkp_DividendTransactionEnteredDate AS DividendTransactionEnteredDate, StateCode, DividendPlan, DividendType, SupDividendTypeId, o_sup_state_id AS sup_state_id, HistoryID, DerivedPurpose AS Purpose, Type, lkp_DCTDividendPriorAmount AS DividendPrior, lkp_DCTDividendChangeAmount AS DividendChange, lkp_DCTDividendPremiumAmount AS DividendPremium, lkp_DCTDividendPaidDate AS DividendPaidDate, lkp_DCTDividendAKId AS SessionId, PolicyKey, DividendTransactionPostedDate\n\t\tFROM \n\t),\n\tEXP_PreTarget AS (\n\t\tSELECT\n\t\tPolicyAKId,\n\t\tDividendPaidAmount,\n\t\tDividendTransactionEnteredDate,\n\t\tDividendTransactionPostedDate,\n\t\tStateCode,\n\t\tDividendPlan,\n\t\tDividendType,\n\t\tSupDividendTypeId,\n\t\tsup_state_id,\n\t\tHistoryID,\n\t\tPurpose,\n\t\tType,\n\t\tDividendPrior,\n\t\tDividendChange,\n\t\tDividendPremium,\n\t\tDividendPaidDate,\n\t\tSessionId,\n\t\tPolicyKey\n\t\tFROM Union_Insert_and_Deprecation\n\t),\n\tOUTPUT_DCTDividend AS (\n\t\tSELECT\n\t\tPolicyAKId, \n\t\tDividendPaidAmount, \n\t\tDividendTransactionEnteredDate, \n\t\tDividendTransactionPostedDate, \n\t\tStateCode, \n\t\tDividendPlan, \n\t\tDividendType, \n\t\tSupDividendTypeId, \n\t\tsup_state_id, \n\t\tHistoryID, \n\t\tPurpose, \n\t\tType, \n\t\tDividendPrior, \n\t\tDividendChange, \n\t\tDividendPremium, \n\t\tDividendPaidDate, \n\t\tSessionId, \n\t\tPolicyKey\n\t\tFROM EXP_PreTarget\n\t),\n),\nEXP_MetaData AS (\n\tSELECT\n\tPolicyAKId,\n\tDividendPaidAmount1 AS DividendPaidAmount,\n\tDividendTransactionEnteredDate,\n\tDividendTransactionPostedDate,\n\t-- *INF*: ADD_TO_DATE(TRUNC(ADD_TO_DATE(DividendTransactionPostedDate,'MM',1), 'MM'),'DD',-1)\r\n\t-- \n\tADD_TO_DATE(TRUNC(ADD_TO_DATE(DividendTransactionPostedDate, 'MM', 1), 'MM'), 'DD', - 1) AS DividendRunDate,\n\tStateCode,\n\tDividendPlan,\n\tDividendType1 AS DividendType,\n\tSupDividendTypeId,\n\tsup_state_id,\n\tHistoryID1 AS HistoryID,\n\tPurpose1 AS Purpose,\n\tType1 AS Type,\n\tDividendPrior1 AS DividendPrior,\n\tDividendChange1 AS DividendChange,\n\tDividendPremium1 AS DividendPremium,\n\tDividendPaidDate1 AS DividendPaidDate,\n\t'1' AS o_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditID,\n\tSessionId1 AS o_DCTDividendAKId,\n\t-- *INF*: TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_EffectiveDate,\n\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\tTO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\tSYSDATE AS o_CreatedDate,\n\tSYSDATE AS o_ModifiedDate\n\tFROM mplt_Evaluate_DCTDividend\n),\nDCTDividend AS (\n\tINSERT INTO DCTDividend\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, DCTDividendAKId, PolicyAKId, DividendTransactionEnteredDate, DividendRunDate, StateCode, DividendPlan, DividendType, SupStateId, SupDividendTypeId, DividendPaidAmount, DCTDividendHistoryId, DCTDividendPurpose, DCTDividendTransactionType, DCTDividendPriorAmount, DCTDividendChangeAmount, DCTDividendPremiumAmount, DCTDividendPaidDate)\n\tSELECT \n\to_CurrentSnapshotFlag AS CURRENTSNAPSHOTFLAG, \n\to_AuditID AS AUDITID, \n\to_EffectiveDate AS EFFECTIVEDATE, \n\to_ExpirationDate AS EXPIRATIONDATE, \n\to_SourceSystemID AS SOURCESYSTEMID, \n\to_CreatedDate AS CREATEDDATE, \n\to_ModifiedDate AS MODIFIEDDATE, \n\to_DCTDividendAKId AS DCTDIVIDENDAKID, \n\tPOLICYAKID, \n\tDIVIDENDTRANSACTIONENTEREDDATE, \n\tDIVIDENDRUNDATE, \n\tSTATECODE, \n\tDIVIDENDPLAN, \n\tDIVIDENDTYPE, \n\tsup_state_id AS SUPSTATEID, \n\tSUPDIVIDENDTYPEID, \n\tDIVIDENDPAIDAMOUNT, \n\tHistoryID AS DCTDIVIDENDHISTORYID, \n\tPurpose AS DCTDIVIDENDPURPOSE, \n\tType AS DCTDIVIDENDTRANSACTIONTYPE, \n\tDividendPrior AS DCTDIVIDENDPRIORAMOUNT, \n\tDividendChange AS DCTDIVIDENDCHANGEAMOUNT, \n\tDividendPremium AS DCTDIVIDENDPREMIUMAMOUNT, \n\tDividendPaidDate AS DCTDIVIDENDPAIDDATE\n\tFROM EXP_MetaData\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905520"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604320"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:27:36"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 02:03:07"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_CLAIM"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}