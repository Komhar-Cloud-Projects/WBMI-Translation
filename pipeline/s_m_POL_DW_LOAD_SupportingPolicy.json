{
    "name": "s_m_POL_DW_LOAD_SupportingPolicy",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_SupportingPolicy",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_arch_pif_03_stage AS (\n\twith t(rownum) as\r\n\t(select 1 rownum\r\n\tunion all\r\n\tselect rownum+1 from t\r\n\twhere rownum<100)\r\n\tselect a.pif_symbol,a.pif_policy_number,a.pif_module,\r\n\t','+rtrim(a.comments_area)\r\n\t+case when right(rtrim(a.comments_area),1)<>',' and len(a.comments_area_2)>0 then ',' else '' end\r\n\t+rtrim(a.comments_area_2)+',' as comments_area,t.rownum\r\n\tfrom arch_pif_03_stage a\r\n\tjoin t\r\n\ton t.rownum between 1 and len(a.comments_area+isnull(a.comments_area_2,''))\r\n\t-len(replace(a.comments_area+isnull(a.comments_area_2,''),',',''))+1\r\n\t+case when right(rtrim(a.comments_area),1)<>',' and len(a.comments_area_2)>0 then 1 else 0 end \r\n\twhere a.comments_reason_suspended = 'ZS'\r\n\tand a.comments_area is not null\r\n\tand not exists (\r\n\tselect 1 from arch_pif_03_stage b\r\n\twhere b.arch_pif_03_stage_id>a.arch_pif_03_stage_id\r\n\tand a.pif_symbol=b.pif_symbol\r\n\tand a.pif_policy_number=b.pif_policy_number\r\n\tand a.pif_module=b.pif_module\r\n\tand b.comments_reason_suspended = 'ZS'\r\n\tand b.comments_area is not null)\r\n\tand not exists (\r\n\tselect 1 from arch_pif_03_stage b\r\n\twhere b.audit_id>a.audit_id\r\n\tand a.pif_symbol=b.pif_symbol\r\n\tand a.pif_policy_number=b.pif_policy_number\r\n\tand a.pif_module=b.pif_module)\r\n\torder by a.audit_id,a.arch_pif_03_stage_id,a.pif_symbol,a.pif_policy_number,a.pif_module,rownum\n),\nEXPTRANS AS (\n\tSELECT\n\tpif_symbol AS i_pif_symbol,\n\tpif_policy_number AS i_pif_policy_number,\n\tpif_module AS i_pif_module,\n\tcomments_area AS i_comments_area,\n\trownum AS i_rownum,\n\t-- *INF*: REG_REPLACE(i_comments_area, '[^A-Za-z0-9,]', '')\n\tREG_REPLACE(i_comments_area, '[^A-Za-z0-9,]', ''\n\t) AS v_comments_area,\n\t-- *INF*: INSTR(v_comments_area,',',1,i_rownum)+1\n\tREGEXP_INSTR(v_comments_area, ',', 1, i_rownum\n\t) + 1 AS v_start_pos,\n\t-- *INF*: INSTR(v_comments_area,',',1,i_rownum+1)-v_start_pos\n\tREGEXP_INSTR(v_comments_area, ',', 1, i_rownum + 1\n\t) - v_start_pos AS v_end_pos,\n\t-- *INF*: SUBSTR(v_comments_area,v_start_pos,v_end_pos)\n\tSUBSTR(v_comments_area, v_start_pos, v_end_pos\n\t) AS v_Parsed,\n\t-- *INF*: RTRIM(i_pif_symbol)||i_pif_policy_number||i_pif_module\n\tRTRIM(i_pif_symbol\n\t) || i_pif_policy_number || i_pif_module AS o_PolicyKey,\n\t-- *INF*: Substr(v_Parsed,1,1) ||  REG_REPLACE(Substr(v_Parsed,2), '[^0-9,]', '')\n\tSubstr(v_Parsed, 1, 1\n\t) || REG_REPLACE(Substr(v_Parsed, 2\n\t\t), '[^0-9,]', ''\n\t) AS o_Parsed\n\tFROM SQ_arch_pif_03_stage\n),\nLKP_policy AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT a.pol_ak_id as pol_ak_id, a.pol_key as pol_key\r\n\t\tFROM V2.policy a\r\n\t\tjoin dbo.StrategicProfitCenter b\r\n\t\ton a.StrategicProfitCenterAKId=b.StrategicProfitCenterAKId\r\n\t\tand b.CurrentSnapshotFlag=1\r\n\t\tand b.StrategicProfitCenterAbbreviation='WB - PL'\r\n\t\twhere a.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n),\nFILTRANS AS (\n\tSELECT\n\tLKP_policy.pol_ak_id AS PolicyAKId, \n\tEXPTRANS.o_Parsed AS Parsed\n\tFROM EXPTRANS\n\tLEFT JOIN LKP_policy\n\tON LKP_policy.pol_key = EXPTRANS.o_PolicyKey\n\tWHERE NOT ISNULL(PolicyAKId) AND LENGTH(Parsed)=7\n),\nAGGTRANS AS (\n\tSELECT\n\tPolicyAKId,\n\tParsed\n\tFROM FILTRANS\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId, Parsed ORDER BY NULL) = 1\n),\nEXPTRANS1 AS (\n\tSELECT\n\tPolicyAKId,\n\tParsed\n\tFROM AGGTRANS\n),\nSQ_policy AS (\n\tDECLARE @FirstDayOfCurrMonth datetime\r\n\t\r\n\tset @FirstDayOfCurrMonth=DATEADD(month, DATEDIFF(month, 0, getdate()), 0)\r\n\t\r\n\tSELECT a.pol_ak_id as pol_ak_id,\r\n\ta.pol_num as pol_num,\r\n\ta.pol_key as pol_key\r\n\tFROM V2.policy a\r\n\twhere not exists (\r\n\tselect 1 from V2.policy b\r\n\twhere a.pol_num=b.pol_num\r\n\tand b.crrnt_snpsht_flag=1\r\n\tand b.pol_mod>a.pol_mod and b.pol_eff_date < @FirstDayOfCurrMonth)\r\n\tand a.crrnt_snpsht_flag=1 and a.pol_eff_date < @FirstDayOfCurrMonth\n),\nJNRTRANS AS (SELECT\n\tSQ_policy.pol_ak_id, \n\tSQ_policy.pol_num, \n\tSQ_policy.pol_key, \n\tEXPTRANS1.PolicyAKId, \n\tEXPTRANS1.Parsed\n\tFROM SQ_policy\n\tINNER JOIN EXPTRANS1\n\tON EXPTRANS1.Parsed = SQ_policy.pol_num\n),\nEXPTRANS2 AS (\n\tSELECT\n\tPolicyAKId,\n\tpol_ak_id AS SupportingPolicyAKId,\n\tpol_key AS SupportingPolicyKey,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\t'PMS' AS SourceSystemId,\n\tSYSDATE AS CreatedDate,\n\t-- *INF*: TRUNC(SYSDATE,'MM')\n\tCAST(TRUNC(SYSDATE, 'MONTH') AS TIMESTAMP_NTZ(0)) AS RunDate,\n\t'loo' AS SupportingPolicyType\n\tFROM JNRTRANS\n),\nSupportingPolicy AS (\n\tTRUNCATE TABLE @{pipeline().parameters.TARGET_TABLE_OWNER}.SupportingPolicy;\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.SupportingPolicy\n\t(AuditId, SourceSystemId, CreatedDate, PolicyAKId, RunDate, SupportingPolicyAKId, SupportingPolicyKey, SupportingPolicyType)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tPOLICYAKID, \n\tRUNDATE, \n\tSUPPORTINGPOLICYAKID, \n\tSUPPORTINGPOLICYKEY, \n\tSUPPORTINGPOLICYTYPE\n\tFROM EXPTRANS2\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}