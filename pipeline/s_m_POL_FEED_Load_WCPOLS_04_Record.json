{
    "name": "s_m_POL_FEED_Load_WCPOLS_04_Record",
    "properties": {
        "activities": [
            {
                "name": "m_POL_FEED_Load_WCPOLS_04_Record",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_SupWCPOLS AS (\n\tSELECT\n\tWCPOLSCode,\n\tSourcesystemID,\n\tSourceCode,\n\tTableName,\n\tProcessName,\n\ti_SourcesystemID,\n\ti_SourceCode,\n\ti_TableName,\n\ti_ProcessName\n\tFROM (\n\t\tSELECT\r\n\t\t     WCPOLSCode as WCPOLSCode\r\n\t\t\t,SourcesystemID as SourcesystemID\r\n\t\t\t,SourceCode as SourceCode\r\n\t\t\t,TableName as TableName\r\n\t\t\t,ProcessName as ProcessName\r\n\t\tFROM SupWCPOLS\r\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SourcesystemID,SourceCode,TableName,ProcessName ORDER BY WCPOLSCode) = 1\n),\nLKP_SupClaimAdministratorFEIN AS (\n\tSELECT\n\tClaimAdministratorFEIN,\n\tStateCode\n\tFROM (\n\t\tSELECT\r\n\t\t\t ClaimAdministratorFEIN as ClaimAdministratorFEIN,\r\n\t\t\t StateCode as StateCode\r\n\t\tFROM SupClaimAdministratorFEIN\r\n\t\tWHERE ClaimAdministratorFEIN <> 'Monopolistic'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StateCode ORDER BY ClaimAdministratorFEIN) = 1\n),\nSQ_WorkWCTrackHistory AS (\n\tSELECT \r\n\t\t WCTrackHistoryID\r\n\t\t,[State]\r\n\t\t,TransactionType\r\n\t\t,BureauNumber\r\n\t\t,ExperienceModificationFactorMeritRatingFactor\r\n\t\t,ExpenseConstant\r\n\t\t,PremiumDiscount\r\n\t\t,TransactionEffectiveDate\r\n\t\t,TransactionExpirationDate\r\n\t\t,PolicyEffectiveDate\r\n\t\t,PolicyExpirationDate\r\n\t\t,PolicyKey\r\n\t\t,ReasonCode\r\n\t\t,TotalStandardPremium\r\n\t\t,ExperienceModType\r\n\t\t,PeriodStartDate\r\n\t\t,PeriodEndDate\r\n\t\t,TermType\r\n\t\t,ExperienceModEffectiveDate\r\n\t\t,AnniversaryRatingDate\r\n\t\t,AnniversaryRating\r\n\t\t,AuditPeriod\r\n\t    ,WCStateAddedThisTransaction\r\n\t\t,StateDeletedFlag\r\n\t\t,SUM(ExpenseConstant) OVER(PARTITION BY WCTrackHistoryID, State) ROLLUP_ExpenseConstant\r\n\t\t,SUM(PremiumDiscount) OVER(PARTITION BY WCTrackHistoryID, State) ROLLUP_PremiumDiscount\r\n\t\t,SUM(TotalStandardPremium) OVER(PARTITION BY WCTrackHistoryID, State) ROLLUP_TotalStandardPremium\r\n\t\t,MIN(PeriodStartDate) OVER(PARTITION BY WCTrackHistoryID, State) FIRST_PeriodStartDate\r\n\t\t,MAX(PeriodStartDate) OVER(PARTITION BY WCTrackHistoryID, State) LAST_PeriodStartDate\r\n\t\t,MIN(TransactionEffectiveDate) OVER(PARTITION BY WCTrackHistoryID, State) FIRST_TransactionEffectiveDate\r\n\t\t,MAX(CASE WHEN TermType in ('ARD','EMF') THEN '1' ELSE '0' END)  OVER(PARTITION BY PolicyKey,State) SplitRated\r\n\tFROM\r\n\t(\r\n\tSELECT\r\n\t\t st.WCTrackHistoryID\r\n\t\t,st.[State]\r\n\t\t,th.TransactionType\r\n\t\t,PE.BureauNumber\r\n\t\t,st.ExperienceModificationFactorMeritRatingFactor\r\n\t\t,max(IIF(c_EC.ParentCoverageType = 'ExpenseConstant', c_EC.Premium, 0)) as ExpenseConstant\r\n\t\t,max(IIF(c_EC.ParentCoverageType = 'PremiumDiscount', ABS(c_EC.Premium), 0)) as PremiumDiscount\r\n\t\t,pol.TransactionEffectiveDate\r\n\t\t,pol.TransactionExpirationDate\r\n\t\t,pol.PolicyEffectiveDate\r\n\t\t,pol.PolicyExpirationDate\r\n\t\t,pol.PolicyKey\r\n\t\t,th.ReasonCode\r\n\t\t,TotalStandardPremium\r\n\t\t,st.ExperienceModType\r\n\t\t,st.PeriodStartDate\r\n\t\t,st.PeriodEndDate\r\n\t\t,st.TermType\r\n\t\t,st.ExperienceModEffectiveDate\r\n\t\t,lin.AnniversaryRatingDate\r\n\t      ,lin.AnniversaryRating\r\n\t\t,lin.AuditPeriod\r\n\t\t,st.WCStateAddedThisTransaction\r\n\t\t,st.StateDeletedFlag\r\n\t\r\n\tFROM dbo.WorkWCStateTerm st\r\n\tLEFT JOIN dbo.WorkWCCoverage c_EC\r\n\t\tON st.WCTrackHistoryID = c_EC.WCTrackHistoryID\r\n\t\t\tAND st.WC_StateTermId = c_EC.ParentObjectId\r\n\t\t\tAND c_EC.ParentObjectName = 'DC_WC_StateTerm'\r\n\t\t\tAND c_EC.ParentCoverageType IN ('ExpenseConstant', 'PremiumDiscount')\r\n\t             AND c_EC.ParentCoverageDeleteFlag=0\t\r\n\t\r\n\tINNER JOIN dbo.WorkWCTrackHistory th\r\n\t\tON th.WCTrackHistoryID = st.WCTrackHistoryID\r\n\t\r\n\tINNER JOIN dbo.WorkWCLine lin\r\n\t\tON lin.WCTrackHistoryID = st.WCTrackHistoryID\r\n\t\r\n\tINNER JOIN dbo.WorkWCParty p\r\n\t\tON st.WCTrackHistoryID = p.WCTrackHistoryID\r\n\t\t\tAND p.PartyAssociationType = 'Account'\r\n\t\r\n\tLEFT JOIN dbo.WorkWCParty PE\r\n\t\tON P.WCTrackHistoryID=PE.WCTrackHistoryID\r\n\t\tand ISNULL(P.Name,'N/A')=ISNULL(PE.Name,'N/A')  and P.Name IS NOT NULL and PE.Name IS NOT NULL\r\n\t\t\tAND PE.PartyAssociationType = 'PrimaryEntity'\r\n\t\r\n\tINNER JOIN dbo.WorkWCPolicy pol\r\n\t\tON st.WCTrackHistoryID = pol.WCTrackHistoryID\r\n\t\r\n\tINNER JOIN dbo.WorkWCLocation loc\r\n\t\tON st.WCTrackHistoryID = loc.WCTrackHistoryID\r\n\t\tand st.[State]=loc.StateProv\r\n\t\tAND (loc.LocationDeletedIndicator != 1 or st.StateDeletedFlag=1)\r\n\t\r\n\tWHERE 1 = 1\r\n\tAND st.AuditId = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\t@{pipeline().parameters.WHERE_CLAUSE_04}\r\n\t\r\n\tGROUP BY st.WCTrackHistoryID\r\n\t\t,st.[State]\r\n\t\t,th.TransactionType\r\n\t\t,PE.BureauNumber\r\n\t\t,st.ExperienceModificationFactorMeritRatingFactor\r\n\t\t,pol.TransactionEffectiveDate\r\n\t\t,pol.TransactionExpirationDate\r\n\t\t,pol.PolicyEffectiveDate\r\n\t\t,pol.PolicyExpirationDate\r\n\t\t,pol.PolicyKey\r\n\t\t,th.ReasonCode\r\n\t\t,TotalStandardPremium\r\n\t\t,st.ExperienceModType\r\n\t\t,st.PeriodStartDate\r\n\t\t,st.PeriodEndDate\r\n\t\t,st.TermType\r\n\t\t,st.ExperienceModEffectiveDate\r\n\t\t,lin.AnniversaryRatingDate\r\n\t      ,lin.AnniversaryRating\r\n\t\t,lin.AuditPeriod\r\n\t      ,st.WCStateAddedThisTransaction\r\n\t\t  ,st.StateDeletedFlag\r\n\t) T1\r\n\t\r\n\tORDER BY WCTrackHistoryID,State,PeriodStartDate\n),\nEXP_DataCollect_Input AS (\n\tSELECT\n\tWCTrackHistoryID,\n\tState,\n\tTransactionType,\n\tBureauNumber,\n\tExperienceModificationFactorMeritRatingFactor,\n\tExpenseConstant,\n\tPremiumDiscount,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPolicyKey,\n\tReasonCode,\n\tTotalStandardPremium,\n\tExperienceModType,\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tTermType,\n\tExperienceModEffectiveDate,\n\tAnniversaryRatingDate,\n\tAnniversaryRating,\n\tAuditPeriod,\n\tWCStateAddedThisTransaction,\n\tStateDeletedFlag,\n\tROLLUP_ExpenseConstant,\n\tROLLUP_PremiumDiscount,\n\tROLLUP_TotalStandardPremium,\n\tFIRST_PeriodStartDate,\n\tLAST_PeriodStartDate,\n\tFIRST_TransactionEffectiveDate,\n\tSplitRated\n\tFROM SQ_WorkWCTrackHistory\n),\nSQ_WCPols00Record AS (\n\tSELECT\r\n\t\tWCTrackHistoryID,\r\n\t\tLinkData,\r\n\t     AuditId,\r\n\t\tTransactionCode\r\n\tFROM dbo.WCPols00Record\r\n\tWHERE 1=1\r\n\tAND AuditId = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\tORDER BY WCTrackHistoryID\n),\nJNR_Record04LinkData AS (SELECT\n\tSQ_WCPols00Record.WCTrackHistoryID, \n\tSQ_WCPols00Record.LinkData, \n\tSQ_WCPols00Record.AuditId, \n\tSQ_WCPols00Record.TransactionCode, \n\tEXP_DataCollect_Input.WCTrackHistoryID AS WCTrackHistoryID1, \n\tEXP_DataCollect_Input.State, \n\tEXP_DataCollect_Input.TransactionType, \n\tEXP_DataCollect_Input.BureauNumber, \n\tEXP_DataCollect_Input.ExperienceModificationFactorMeritRatingFactor, \n\tEXP_DataCollect_Input.ExpenseConstant, \n\tEXP_DataCollect_Input.PremiumDiscount, \n\tEXP_DataCollect_Input.TransactionEffectiveDate, \n\tEXP_DataCollect_Input.TransactionExpirationDate, \n\tEXP_DataCollect_Input.PolicyEffectiveDate, \n\tEXP_DataCollect_Input.PolicyExpirationDate, \n\tEXP_DataCollect_Input.PolicyKey, \n\tEXP_DataCollect_Input.ReasonCode, \n\tEXP_DataCollect_Input.TotalStandardPremium, \n\tEXP_DataCollect_Input.ExperienceModType, \n\tEXP_DataCollect_Input.PeriodStartDate, \n\tEXP_DataCollect_Input.PeriodEndDate, \n\tEXP_DataCollect_Input.TermType, \n\tEXP_DataCollect_Input.ExperienceModEffectiveDate, \n\tEXP_DataCollect_Input.AnniversaryRatingDate, \n\tEXP_DataCollect_Input.AnniversaryRating, \n\tEXP_DataCollect_Input.AuditPeriod, \n\tEXP_DataCollect_Input.WCStateAddedThisTransaction, \n\tEXP_DataCollect_Input.StateDeletedFlag, \n\tEXP_DataCollect_Input.ROLLUP_ExpenseConstant, \n\tEXP_DataCollect_Input.ROLLUP_PremiumDiscount, \n\tEXP_DataCollect_Input.ROLLUP_TotalStandardPremium, \n\tEXP_DataCollect_Input.FIRST_PeriodStartDate, \n\tEXP_DataCollect_Input.LAST_PeriodStartDate, \n\tEXP_DataCollect_Input.FIRST_TransactionEffectiveDate, \n\tEXP_DataCollect_Input.SplitRated\n\tFROM EXP_DataCollect_Input\n\tINNER JOIN SQ_WCPols00Record\n\tON SQ_WCPols00Record.WCTrackHistoryID = EXP_DataCollect_Input.WCTrackHistoryID\n),\nSRT_LatestTerm AS (\n\tSELECT\n\tWCTrackHistoryID, \n\tLinkData, \n\tAuditId, \n\tTransactionCode, \n\tWCTrackHistoryID1, \n\tState, \n\tTransactionType, \n\tBureauNumber, \n\tExperienceModificationFactorMeritRatingFactor, \n\tExpenseConstant, \n\tPremiumDiscount, \n\tTransactionEffectiveDate, \n\tTransactionExpirationDate, \n\tPolicyEffectiveDate, \n\tPolicyExpirationDate, \n\tPolicyKey, \n\tReasonCode, \n\tTotalStandardPremium, \n\tExperienceModType, \n\tPeriodStartDate, \n\tPeriodEndDate, \n\tTermType, \n\tExperienceModEffectiveDate, \n\tAnniversaryRatingDate, \n\tAnniversaryRating, \n\tAuditPeriod, \n\tWCStateAddedThisTransaction, \n\tStateDeletedFlag, \n\tROLLUP_ExpenseConstant, \n\tROLLUP_PremiumDiscount, \n\tROLLUP_TotalStandardPremium, \n\tFIRST_PeriodStartDate, \n\tLAST_PeriodStartDate, \n\tFIRST_TransactionEffectiveDate, \n\tSplitRated\n\tFROM JNR_Record04LinkData\n\tORDER BY WCTrackHistoryID ASC, State ASC, PeriodStartDate DESC, PeriodEndDate DESC\n),\nEXP_Joinercollect AS (\n\tSELECT\n\tWCTrackHistoryID,\n\tLinkData,\n\tAuditId,\n\tTransactionCode,\n\tWCTrackHistoryID1,\n\tState,\n\tTransactionType,\n\tBureauNumber,\n\tExperienceModificationFactorMeritRatingFactor,\n\t-- *INF*: RPAD(ExperienceModificationFactorMeritRatingFactor,4,'0')\n\tRPAD(ExperienceModificationFactorMeritRatingFactor, 4, '0') AS o_ExperienceModificationFactorMeritRatingFactor,\n\tExpenseConstant,\n\tPremiumDiscount,\n\tTransactionEffectiveDate,\n\tTransactionExpirationDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\tPolicyKey,\n\tReasonCode,\n\tTotalStandardPremium,\n\tExperienceModType,\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tTermType,\n\tExperienceModEffectiveDate,\n\tAnniversaryRatingDate,\n\tAnniversaryRating,\n\tAuditPeriod,\n\tWCStateAddedThisTransaction,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- WCStateAddedThisTransaction='T','1',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    WCStateAddedThisTransaction = 'T', '1',\n\t    '0'\n\t) AS o_WCStateAddedThisTransaction,\n\tStateDeletedFlag,\n\tROLLUP_ExpenseConstant,\n\tROLLUP_PremiumDiscount,\n\tROLLUP_TotalStandardPremium,\n\tFIRST_PeriodStartDate,\n\tLAST_PeriodStartDate,\n\tFIRST_TransactionEffectiveDate,\n\tSplitRated,\n\t-- *INF*:  IIF(IsNull(:LKP.LKP_SupWCPOLS('DCT',State,'WCPOLS04Record','SplitRateStateList')),'NO','YES')\n\tIFF(\n\t    LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList.WCPOLSCode IS NULL, 'NO', 'YES'\n\t) AS v_SplitState,\n\t-- *INF*: IIF(v_SplitState = 'YES' or PeriodStartDate = LAST_PeriodStartDate, 'YES', 'NO')\n\tIFF(v_SplitState = 'YES' or PeriodStartDate = LAST_PeriodStartDate, 'YES', 'NO') AS o_PassRecord,\n\t-- *INF*: IIF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_ExpenseConstant)\n\tIFF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_ExpenseConstant) AS o_ExpenseConstant,\n\t-- *INF*: IIF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_PremiumDiscount)\n\tIFF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_PremiumDiscount) AS o_PremiumDiscount,\n\t-- *INF*: IIF(v_SplitState = 'NO', FIRST_TransactionEffectiveDate, TransactionEffectiveDate)\n\tIFF(v_SplitState = 'NO', FIRST_TransactionEffectiveDate, TransactionEffectiveDate) AS o_TransactionEffectiveDate,\n\t-- *INF*: IIF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_TotalStandardPremium)\n\tIFF(PeriodStartDate < LAST_PeriodStartDate, 0, ROLLUP_TotalStandardPremium) AS o_TotalStandardPremium,\n\t-- *INF*: IIF(WCTrackHistoryID<>v_WCTrackHistoryID,'1',\r\n\t-- IIF(State<>v_state,'1','0'))\n\tIFF(\n\t    WCTrackHistoryID <> v_WCTrackHistoryID, '1',\n\t    IFF(\n\t        State <> v_state, '1', '0'\n\t    )\n\t) AS v_Latest_Flag,\n\tv_Latest_Flag AS o_Latest_Flag,\n\tWCTrackHistoryID AS v_WCTrackHistoryID,\n\tState AS v_state\n\tFROM SRT_LatestTerm\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList\n\tON LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList.SourceCode = State\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_SplitRateStateList.ProcessName = 'SplitRateStateList'\n\n),\nEXP_04_Output AS (\n\tSELECT\n\to_PassRecord AS PassRecord,\n\tCURRENT_TIMESTAMP AS ExtractDate,\n\tAuditId,\n\tWCTrackHistoryID,\n\tLinkData,\n\tState,\n\t-- *INF*:  :LKP.LKP_SupWCPOLS('DCT',State,'WCPOLS04Record','StateCodeRecord04')\n\tLKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04.WCPOLSCode AS v_StateCode,\n\tv_StateCode AS o_StateCode,\n\t'04' AS o_RecordTypeCode,\n\tTransactionCode,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TransactionCode='15' and WCStateAddedThisTransaction='1','A',\r\n\t-- TransactionCode='15' and StateDeletedFlag='1','D',\r\n\t-- ' ')\n\tDECODE(\n\t    TRUE,\n\t    TransactionCode = '15' and WCStateAddedThisTransaction = '1', 'A',\n\t    TransactionCode = '15' and StateDeletedFlag = '1', 'D',\n\t    ' '\n\t) AS v_StateAddDeleteCode,\n\t-- *INF*: :LKP.LKP_SupClaimAdministratorFEIN(v_StateCode)\n\tLKP_SUPCLAIMADMINISTRATORFEIN_v_StateCode.ClaimAdministratorFEIN AS o_ClaimAdministratorFEIN,\n\tv_StateAddDeleteCode AS o_StateAddDeleteCode,\n\tBureauNumber AS IndependentDCORiskIDNumberFileNumberAccountNumber,\n\to_ExperienceModificationFactorMeritRatingFactor AS ExperienceModificationFactorMeritRatingFactor,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ExperienceModificationFactorMeritRatingFactor<'1.00',\r\n\t-- CONCAT('0',SUBSTR(ExperienceModificationFactorMeritRatingFactor,INSTR(ExperienceModificationFactorMeritRatingFactor,'.',1,1),3))\r\n\t-- ,ExperienceModificationFactorMeritRatingFactor)\n\tDECODE(\n\t    TRUE,\n\t    ExperienceModificationFactorMeritRatingFactor < '1.00', CONCAT('0', SUBSTR(ExperienceModificationFactorMeritRatingFactor, REGEXP_INSTR(ExperienceModificationFactorMeritRatingFactor, '.', 1, 1), 3)),\n\t    ExperienceModificationFactorMeritRatingFactor\n\t) AS v_ExperienceModificationFactorMeritRatingFactor,\n\t-- *INF*: Decode(TRUE,\r\n\t-- IN(v_ExperienceModificationFactorMeritRatingFactor,'0.0','0000','0'),'1000',\r\n\t-- IN(v_ExperienceModificationFactorMeritRatingFactor,'1.00','1'),'1000',\r\n\t-- Rpad(Replacechr(1,v_ExperienceModificationFactorMeritRatingFactor,'.',''),4,'0')\r\n\t-- )\n\tDecode(\n\t    TRUE,\n\t    v_ExperienceModificationFactorMeritRatingFactor IN ('0.0','0000','0'), '1000',\n\t    v_ExperienceModificationFactorMeritRatingFactor IN ('1.00','1'), '1000',\n\t    Rpad(REGEXP_REPLACE(v_ExperienceModificationFactorMeritRatingFactor,'.',''), 4, '0')\n\t) AS o_ExperienceModificationFactorMeritRatingFactor,\n\tExperienceModType,\n\t-- *INF*:  :LKP.LKP_SupWCPOLS('DCT',ExperienceModType,'WCPOLS04Record','ExperienceModificationStatusCode')\n\tLKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode.WCPOLSCode AS o_ExperienceModificationStatusCode,\n\t'1' AS o_ExperienceModificationPlanTypeCode,\n\t'1000' AS OtherIndividualRiskRatingFactor,\n\t'1000' AS InsurerPremiumDeviationFactor,\n\t'4' AS TypeOfPremiumDeviationCode,\n\tTotalStandardPremium,\n\t-- *INF*: To_Char(Round(TotalStandardPremium))\n\tTo_Char(Round(TotalStandardPremium)) AS o_TotalStandardPremium,\n\to_TotalStandardPremium AS ROLLUP_TotalStandardPremium,\n\t-- *INF*: To_Char(Round(ROLLUP_TotalStandardPremium))\n\tTo_Char(Round(ROLLUP_TotalStandardPremium)) AS o_EstimatedStateStandardPremiumTotal,\n\tReasonCode,\n\t-- *INF*: Decode(TRUE,\r\n\t-- TransactionCode = '15' and WCStateAddedThisTransaction='1'  and ReasonCode = 'AddingRatingStatePerAudit',\r\n\t--  :LKP.LKP_SupWCPOLS('DCT','AddingRatingStatePerAudit','WCPOLS04Record','ReasonStateWasAddedToThePolicyCode')\r\n\t-- ,TransactionCode = '15'  and WCStateAddedThisTransaction='1'  and ReasonCode <> 'AddingRatingStatePerAudit',\r\n\t--  :LKP.LKP_SupWCPOLS('DCT','AddingRatingStateOther','WCPOLS04Record','ReasonStateWasAddedToThePolicyCode'),\r\n\t-- '0')\n\tDecode(\n\t    TRUE,\n\t    TransactionCode = '15' and WCStateAddedThisTransaction = '1' and ReasonCode = 'AddingRatingStatePerAudit', LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.WCPOLSCode,\n\t    TransactionCode = '15' and WCStateAddedThisTransaction = '1' and ReasonCode <> 'AddingRatingStatePerAudit', LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.WCPOLSCode,\n\t    '0'\n\t) AS o_ReasonStateWasAddedToThePolicyCode,\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tTermType,\n\t-- *INF*: IIF(TermType = 'EMF',To_Char(PeriodStartDate,'YYMMDD'),NULL)\n\tIFF(TermType = 'EMF', To_Char(PeriodStartDate, 'YYMMDD'), NULL) AS o_ExperienceModificationEffectiveDate,\n\tPolicyEffectiveDate,\n\tPolicyExpirationDate,\n\t-- *INF*: IIF(DATE_DIFF(PolicyExpirationDate,PolicyEffectiveDate,'DD')<=366,'2','0')\n\tIFF(DATEDIFF(DAY,PolicyExpirationDate,PolicyEffectiveDate) <= 366, '2', '0') AS o_ProRatedExpenseConstantAmountReasonCode,\n\t-- *INF*: IIF(DATE_DIFF(PolicyExpirationDate,PolicyEffectiveDate,'DD')<=366,'2','0')\n\tIFF(DATEDIFF(DAY,PolicyExpirationDate,PolicyEffectiveDate) <= 366, '2', '0') AS o_ProRatedMinimumPremiumAmountReasonCode,\n\tAnniversaryRatingDate,\n\tAnniversaryRating,\n\t-- *INF*: IIF (AnniversaryRating='T' AND TermType='ARD' AND AnniversaryRatingDate > PolicyEffectiveDate, To_Char(AnniversaryRatingDate,'YYMMDD'),NULL)\n\tIFF(\n\t    AnniversaryRating = 'T' AND TermType = 'ARD' AND AnniversaryRatingDate > PolicyEffectiveDate,\n\t    To_Char(AnniversaryRatingDate, 'YYMMDD'),\n\t    NULL\n\t) AS o_AnniversaryRatingDate,\n\t'1000' AS o_AssignedRiskAdjustmentProgramFactor,\n\tAuditPeriod,\n\to_WCStateAddedThisTransaction AS WCStateAddedThisTransaction,\n\tStateDeletedFlag,\n\t-- *INF*: IIF(ISNULL( :LKP.LKP_SupWCPOLS('DCT',AuditPeriod,'WCPOLS04Record','PremiumAdjustmentPeriodCode')),'1',\r\n\t--  :LKP.LKP_SupWCPOLS('DCT',AuditPeriod,'WCPOLS04Record','PremiumAdjustmentPeriodCode') )\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(\n\t    LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.WCPOLSCode IS NULL,\n\t    '1',\n\t    LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.WCPOLSCode\n\t) AS o_PremiumAdjustmentPeriodCode,\n\t'01' AS o_TypeOfNonStandardIDCode,\n\to_TransactionEffectiveDate AS TransactionEffectiveDate,\n\tTransactionExpirationDate,\n\t-- *INF*: TO_CHAR(TransactionEffectiveDate,'YYMMDD')\n\tTO_CHAR(TransactionEffectiveDate, 'YYMMDD') AS o_PolicyChangeEffectiveDate,\n\t-- *INF*: IIF((FIRST_PeriodStartDate<>LAST_PeriodStartDate) AND (SplitRated='1'),TO_CHAR(PeriodStartDate,'YYMMDD'),TO_CHAR(TransactionEffectiveDate,'YYMMDD'))\n\tIFF(\n\t    (FIRST_PeriodStartDate <> LAST_PeriodStartDate) AND (SplitRated = '1'),\n\t    TO_CHAR(PeriodStartDate, 'YYMMDD'),\n\t    TO_CHAR(TransactionEffectiveDate, 'YYMMDD')\n\t) AS v_PolicyChangeEffectiveDate_NonNCCI,\n\tv_PolicyChangeEffectiveDate_NonNCCI AS o_PolicyChangeEffectiveDate_NonNCCI,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_StateAddDeleteCode='D',TO_CHAR(TransactionEffectiveDate,'YYMMDD'),\r\n\t-- TO_CHAR(TransactionExpirationDate,'YYMMDD')\r\n\t-- )\n\tDECODE(\n\t    TRUE,\n\t    v_StateAddDeleteCode = 'D', TO_CHAR(TransactionEffectiveDate, 'YYMMDD'),\n\t    TO_CHAR(TransactionExpirationDate, 'YYMMDD')\n\t) AS o_PolicyChangeExpirationDate,\n\t-- *INF*: IIF((FIRST_PeriodStartDate<>LAST_PeriodStartDate) AND (SplitRated='1'),TO_CHAR(PeriodEndDate,'YYMMDD'),TO_CHAR(TransactionExpirationDate,'YYMMDD'))\n\tIFF(\n\t    (FIRST_PeriodStartDate <> LAST_PeriodStartDate) AND (SplitRated = '1'),\n\t    TO_CHAR(PeriodEndDate, 'YYMMDD'),\n\t    TO_CHAR(TransactionExpirationDate, 'YYMMDD')\n\t) AS v_PolicyChangeExpirationDate_NonNCCI,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_StateAddDeleteCode='D',v_PolicyChangeEffectiveDate_NonNCCI,\r\n\t-- v_PolicyChangeExpirationDate_NonNCCI)\n\tDECODE(\n\t    TRUE,\n\t    v_StateAddDeleteCode = 'D', v_PolicyChangeEffectiveDate_NonNCCI,\n\t    v_PolicyChangeExpirationDate_NonNCCI\n\t) AS o_PolicyChangeExpirationDate_NonNCCI,\n\to_ExpenseConstant AS ExpenseConstant,\n\tSplitRated,\n\to_PremiumDiscount AS PremiumDiscount,\n\t-- *INF*: TO_CHAR(ROUND(ExpenseConstant))\n\tTO_CHAR(ROUND(ExpenseConstant)) AS o_EC_Written,\n\t-- *INF*: TO_CHAR(ABS(ROUND(PremiumDiscount)))\n\tTO_CHAR(ABS(ROUND(PremiumDiscount))) AS o_PD_Written,\n\to_Latest_Flag AS Latest_Flag,\n\tFIRST_PeriodStartDate,\n\tLAST_PeriodStartDate\n\tFROM EXP_Joinercollect\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04\n\tON LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04.SourceCode = State\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_State_WCPOLS04Record_StateCodeRecord04.ProcessName = 'StateCodeRecord04'\n\n\tLEFT JOIN LKP_SUPCLAIMADMINISTRATORFEIN LKP_SUPCLAIMADMINISTRATORFEIN_v_StateCode\n\tON LKP_SUPCLAIMADMINISTRATORFEIN_v_StateCode.StateCode = v_StateCode\n\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode\n\tON LKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode.SourceCode = ExperienceModType\n\tAND LKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_ExperienceModType_WCPOLS04Record_ExperienceModificationStatusCode.ProcessName = 'ExperienceModificationStatusCode'\n\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode\n\tON LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.SourceCode = 'AddingRatingStatePerAudit'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStatePerAudit_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.ProcessName = 'ReasonStateWasAddedToThePolicyCode'\n\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode\n\tON LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.SourceCode = 'AddingRatingStateOther'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_AddingRatingStateOther_WCPOLS04Record_ReasonStateWasAddedToThePolicyCode.ProcessName = 'ReasonStateWasAddedToThePolicyCode'\n\n\tLEFT JOIN LKP_SUPWCPOLS LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode\n\tON LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.SourcesystemID = 'DCT'\n\tAND LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.SourceCode = AuditPeriod\n\tAND LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.TableName = 'WCPOLS04Record'\n\tAND LKP_SUPWCPOLS__DCT_AuditPeriod_WCPOLS04Record_PremiumAdjustmentPeriodCode.ProcessName = 'PremiumAdjustmentPeriodCode'\n\n),\nSRT_ExpMod AS (\n\tSELECT\n\tPassRecord, \n\tExtractDate, \n\tAuditId, \n\tWCTrackHistoryID, \n\tLinkData, \n\to_StateCode AS StateCode, \n\to_ClaimAdministratorFEIN AS ClaimAdministratorFEIN, \n\to_RecordTypeCode AS RecordTypeCode, \n\to_StateAddDeleteCode AS StateAddDeleteCode, \n\tPeriodStartDate, \n\tIndependentDCORiskIDNumberFileNumberAccountNumber, \n\to_ExperienceModificationFactorMeritRatingFactor AS ExperienceModificationFactorMeritRatingFactor, \n\to_ExperienceModificationStatusCode AS ExperienceModificationStatusCode, \n\to_ExperienceModificationPlanTypeCode AS ExperienceModificationPlanTypeCode, \n\tOtherIndividualRiskRatingFactor, \n\tInsurerPremiumDeviationFactor, \n\tTypeOfPremiumDeviationCode, \n\to_TotalStandardPremium AS TotalStandardPremium, \n\to_EstimatedStateStandardPremiumTotal AS EstimatedStateStandardPremiumTotal, \n\to_ReasonStateWasAddedToThePolicyCode AS ReasonStateWasAddedToThePolicyCode, \n\tTermType, \n\to_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate, \n\to_ProRatedExpenseConstantAmountReasonCode AS ProRatedExpenseConstantAmountReasonCode, \n\to_ProRatedMinimumPremiumAmountReasonCode AS ProRatedMinimumPremiumAmountReasonCode, \n\to_AnniversaryRatingDate AS AnniversaryRatingDate, \n\to_AssignedRiskAdjustmentProgramFactor AS AssignedRiskAdjustmentProgramFactor, \n\to_PremiumAdjustmentPeriodCode AS PremiumAdjustmentPeriodCode, \n\to_TypeOfNonStandardIDCode AS TypeOfNonStandardIDCode, \n\to_PolicyChangeEffectiveDate AS PolicyChangeEffectiveDate, \n\to_PolicyChangeEffectiveDate_NonNCCI AS PolicyChangeEffectiveDate_NonNCCI, \n\to_PolicyChangeExpirationDate AS PolicyChangeExpirationDate, \n\to_PolicyChangeExpirationDate_NonNCCI AS PolicyChangeExpirationDate_NonNCCI, \n\to_EC_Written AS EC_Written, \n\to_PD_Written AS PD_Written, \n\tLatest_Flag, \n\tSplitRated\n\tFROM EXP_04_Output\n\tORDER BY WCTrackHistoryID ASC, StateCode ASC, PeriodStartDate ASC\n),\nEXP_ExpModCalc AS (\n\tSELECT\n\tPassRecord,\n\tExtractDate,\n\tAuditId,\n\tWCTrackHistoryID,\n\tLinkData,\n\tStateCode,\n\tClaimAdministratorFEIN,\n\tRecordTypeCode,\n\tStateAddDeleteCode,\n\tPeriodStartDate,\n\tIndependentDCORiskIDNumberFileNumberAccountNumber,\n\tExperienceModificationFactorMeritRatingFactor,\n\tExperienceModificationStatusCode,\n\tExperienceModificationPlanTypeCode,\n\tOtherIndividualRiskRatingFactor,\n\tInsurerPremiumDeviationFactor,\n\tTypeOfPremiumDeviationCode,\n\tTotalStandardPremium,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- LTRIM(RTRIM(SplitRated))='1',TotalStandardPremium,\r\n\t-- EstimatedStateStandardPremiumTotal)\n\tDECODE(\n\t    TRUE,\n\t    LTRIM(RTRIM(SplitRated)) = '1', TotalStandardPremium,\n\t    EstimatedStateStandardPremiumTotal\n\t) AS o_TotalStandardPremium,\n\tEstimatedStateStandardPremiumTotal,\n\tReasonStateWasAddedToThePolicyCode,\n\tTermType,\n\tExperienceModificationEffectiveDate,\n\tProRatedExpenseConstantAmountReasonCode,\n\tProRatedMinimumPremiumAmountReasonCode,\n\tAnniversaryRatingDate,\n\tAssignedRiskAdjustmentProgramFactor,\n\tPremiumAdjustmentPeriodCode,\n\tTypeOfNonStandardIDCode,\n\tPolicyChangeEffectiveDate,\n\tPolicyChangeEffectiveDate_NonNCCI,\n\tPolicyChangeExpirationDate,\n\tPolicyChangeExpirationDate_NonNCCI,\n\tEC_Written,\n\tPD_Written,\n\tLatest_Flag,\n\tWCTrackHistoryID AS v_CurrentRecord,\n\tStateCode AS v_CurrentState,\n\t-- *INF*: IIF(v_CurrentRecord<>v_PreviousRecord,1,\r\n\t-- IIF(v_CurrentState<>v_PreviousState,1,v_CompareFlag+1))\n\tIFF(\n\t    v_CurrentRecord <> v_PreviousRecord, 1,\n\t    IFF(\n\t        v_CurrentState <> v_PreviousState, 1, v_CompareFlag + 1\n\t    )\n\t) AS v_CompareFlag,\n\tWCTrackHistoryID AS v_PreviousRecord,\n\tStateCode AS v_PreviousState,\n\tExperienceModificationFactorMeritRatingFactor AS v_CurrentExpModRatingFactor,\n\t-- *INF*: IIF(v_CompareFlag>1 AND v_CurrentExpModRatingFactor<>v_PreviousExpModRatingFactor,To_Char(PeriodStartDate,'YYMMDD'),NULL)\n\tIFF(\n\t    v_CompareFlag > 1 AND v_CurrentExpModRatingFactor <> v_PreviousExpModRatingFactor,\n\t    To_Char(PeriodStartDate, 'YYMMDD'),\n\t    NULL\n\t) AS v_ExperienceModificationEffectiveDate,\n\tExperienceModificationFactorMeritRatingFactor AS v_PreviousExpModRatingFactor,\n\tv_ExperienceModificationEffectiveDate AS o_ExperienceModificationEffectiveDate,\n\tSplitRated\n\tFROM SRT_ExpMod\n),\nRTR_WCPOLS_04_Record AS (\n\tSELECT\n\tPassRecord,\n\tExtractDate,\n\tAuditId,\n\tWCTrackHistoryID,\n\tLinkData,\n\tStateCode,\n\tClaimAdministratorFEIN,\n\tRecordTypeCode,\n\tStateAddDeleteCode,\n\tIndependentDCORiskIDNumberFileNumberAccountNumber,\n\tExperienceModificationFactorMeritRatingFactor,\n\tExperienceModificationStatusCode,\n\tExperienceModificationPlanTypeCode,\n\tOtherIndividualRiskRatingFactor,\n\tInsurerPremiumDeviationFactor,\n\tTypeOfPremiumDeviationCode,\n\to_TotalStandardPremium AS TotalStandardPremium,\n\tEstimatedStateStandardPremiumTotal,\n\tTermType,\n\tProRatedExpenseConstantAmountReasonCode,\n\tProRatedMinimumPremiumAmountReasonCode,\n\tReasonStateWasAddedToThePolicyCode,\n\to_ExperienceModificationEffectiveDate AS ExperienceModificationEffectiveDate,\n\tAnniversaryRatingDate,\n\tAssignedRiskAdjustmentProgramFactor,\n\tPremiumAdjustmentPeriodCode,\n\tTypeOfNonStandardIDCode,\n\tPolicyChangeEffectiveDate,\n\tPolicyChangeEffectiveDate_NonNCCI,\n\tPolicyChangeExpirationDate,\n\tPolicyChangeExpirationDate_NonNCCI,\n\tEC_Written,\n\tPD_Written,\n\tLatest_Flag,\n\tSplitRated\n\tFROM EXP_ExpModCalc\n),\nRTR_WCPOLS_04_Record_WCPOLS_04_Record_NCCI AS (SELECT * FROM RTR_WCPOLS_04_Record WHERE PassRecord='YES' and Latest_Flag='1'),\nRTR_WCPOLS_04_Record_WCPOLS_04_Record AS (SELECT * FROM RTR_WCPOLS_04_Record WHERE ((LTRIM(RTRIM(SplitRated))='1') OR(PassRecord='YES' and Latest_Flag='1'))),\nEXP_ExpModFactor AS (\n\tSELECT\n\tAuditId,\n\tExtractDate,\n\tWCTrackHistoryID,\n\tExperienceModificationFactorMeritRatingFactor\n\tFROM RTR_WCPOLS_04_Record_WCPOLS_04_Record\n),\nLKP_WCPols01Record AS (\n\tSELECT\n\tWCTrackHistoryID,\n\tAuditId\n\tFROM (\n\t\tselect A.WCTrackHistoryID as WCTrackHistoryID,\r\n\t\tA.AuditId as AuditId\r\n\t\tfrom WCPols01Record A with (nolock)\r\n\t\tinner join WorkWCTrackHistory B with (nolock)\r\n\t\ton A.WCTrackHistoryID = B.WCTrackHistoryID\r\n\t\tand A.AuditId = B.Auditid\r\n\t\twhere A.ExperienceRatingCode = '5'\r\n\t\tand B.WIRequiredFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY AuditId,WCTrackHistoryID ORDER BY WCTrackHistoryID) = 1\n),\nFIL_ExpModFactor AS (\n\tSELECT\n\tEXP_ExpModFactor.AuditId, \n\tEXP_ExpModFactor.ExtractDate, \n\tLKP_WCPols01Record.WCTrackHistoryID, \n\tEXP_ExpModFactor.ExperienceModificationFactorMeritRatingFactor\n\tFROM EXP_ExpModFactor\n\tLEFT JOIN LKP_WCPols01Record\n\tON LKP_WCPols01Record.AuditId = EXP_ExpModFactor.AuditId AND LKP_WCPols01Record.WCTrackHistoryID = EXP_ExpModFactor.WCTrackHistoryID\n\tWHERE ExperienceModificationFactorMeritRatingFactor = '1000' AND NOT ISNULL(WCTrackHistoryID)\n),\nEXP_WorkWCProcessUpdateTable AS (\n\tSELECT\n\tAuditId,\n\tExtractDate,\n\tWCTrackHistoryID,\n\t'ExpModFactor-04' AS ProcessName,\n\tExperienceModificationFactorMeritRatingFactor AS AttributeValue\n\tFROM FIL_ExpModFactor\n),\nWorkWCProcessUpdateTable AS (\n\tINSERT INTO WorkWCProcessUpdateTable\n\t(Auditid, ExtractDate, WCTrackHistoryID, ProcessName, AttributeValue)\n\tSELECT \n\tAuditId AS AUDITID, \n\tEXTRACTDATE, \n\tWCTRACKHISTORYID, \n\tPROCESSNAME, \n\tATTRIBUTEVALUE\n\tFROM EXP_WorkWCProcessUpdateTable\n),\nWCPols04Record AS (\n\n\t------------ PRE SQL ----------\n\tDELETE\r\n\t  FROM dbo.WCPols04Record\r\n\t  WHERE 1=1\r\n\t  AND AuditId = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\n\t-------------------------------\n\n\n\tINSERT INTO WCPols04Record\n\t(ExtractDate, AuditId, WCTrackHistoryID, LinkData, StateCode, RecordTypeCode, StateAddDeleteCode, ClaimAdministratorFEIN, IndependentDCORiskIDNumberFileNumberAccountNumber, ExperienceModificationFactorMeritRatingFactor, ExperienceModificationStatusCode, ExperienceModificationPlanTypeCode, OtherIndividualRiskRatingFactor, InsurerPremiumDeviationFactor, TypeOfPremiumDeviationCode, EstimatedStateStandardPremiumTotal, ExpenseConstantAmount, PremiumDiscountAmount, ProRatedExpenseConstantAmountReasonCode, ProRatedMinimumPremiumAmountReasonCode, ReasonStateWasAddedToThePolicyCode, ExperienceModificationEffectiveDate, AnniversaryRatingDate, AssignedRiskAdjustmentProgramFactor, PremiumAdjustmentPeriodCode, TypeOfNonStandardIDCode, PolicyChangeEffectiveDate, PolicyChangeExpirationDate)\n\tSELECT \n\tEXTRACTDATE, \n\tAUDITID, \n\tWCTRACKHISTORYID, \n\tLINKDATA, \n\tSTATECODE, \n\tRECORDTYPECODE, \n\tSTATEADDDELETECODE, \n\tCLAIMADMINISTRATORFEIN, \n\tINDEPENDENTDCORISKIDNUMBERFILENUMBERACCOUNTNUMBER, \n\tEXPERIENCEMODIFICATIONFACTORMERITRATINGFACTOR, \n\tEXPERIENCEMODIFICATIONSTATUSCODE, \n\tEXPERIENCEMODIFICATIONPLANTYPECODE, \n\tOTHERINDIVIDUALRISKRATINGFACTOR, \n\tINSURERPREMIUMDEVIATIONFACTOR, \n\tTYPEOFPREMIUMDEVIATIONCODE, \n\tTotalStandardPremium AS ESTIMATEDSTATESTANDARDPREMIUMTOTAL, \n\tEC_Written AS EXPENSECONSTANTAMOUNT, \n\tPD_Written AS PREMIUMDISCOUNTAMOUNT, \n\tPRORATEDEXPENSECONSTANTAMOUNTREASONCODE, \n\tPRORATEDMINIMUMPREMIUMAMOUNTREASONCODE, \n\tREASONSTATEWASADDEDTOTHEPOLICYCODE, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tANNIVERSARYRATINGDATE, \n\tASSIGNEDRISKADJUSTMENTPROGRAMFACTOR, \n\tPREMIUMADJUSTMENTPERIODCODE, \n\tTYPEOFNONSTANDARDIDCODE, \n\tPolicyChangeEffectiveDate_NonNCCI AS POLICYCHANGEEFFECTIVEDATE, \n\tPolicyChangeExpirationDate_NonNCCI AS POLICYCHANGEEXPIRATIONDATE\n\tFROM RTR_WCPOLS_04_Record_WCPOLS_04_Record\n),\nWCPols04RecordNCCI AS (\n\tINSERT INTO WCPols04RecordNCCI\n\t(ExtractDate, AuditId, WCTrackHistoryID, LinkData, StateCode, RecordTypeCode, StateAddDeleteCode, ClaimAdministratorFEIN, IndependentDCORiskIDNumberFileNumberAccountNumber, ExperienceModificationFactorMeritRatingFactor, ExperienceModificationStatusCode, ExperienceModificationPlanTypeCode, OtherIndividualRiskRatingFactor, InsurerPremiumDeviationFactor, TypeOfPremiumDeviationCode, EstimatedStateStandardPremiumTotal, ExpenseConstantAmount, PremiumDiscountAmount, ProRatedExpenseConstantAmountReasonCode, ProRatedMinimumPremiumAmountReasonCode, ReasonStateWasAddedToThePolicyCode, ExperienceModificationEffectiveDate, AnniversaryRatingDate, AssignedRiskAdjustmentProgramFactor, PremiumAdjustmentPeriodCode, TypeOfNonStandardIDCode, PolicyChangeEffectiveDate, PolicyChangeExpirationDate)\n\tSELECT \n\tEXTRACTDATE, \n\tAUDITID, \n\tWCTRACKHISTORYID, \n\tLINKDATA, \n\tSTATECODE, \n\tRECORDTYPECODE, \n\tSTATEADDDELETECODE, \n\tCLAIMADMINISTRATORFEIN, \n\tINDEPENDENTDCORISKIDNUMBERFILENUMBERACCOUNTNUMBER, \n\tEXPERIENCEMODIFICATIONFACTORMERITRATINGFACTOR, \n\tEXPERIENCEMODIFICATIONSTATUSCODE, \n\tEXPERIENCEMODIFICATIONPLANTYPECODE, \n\tOTHERINDIVIDUALRISKRATINGFACTOR, \n\tINSURERPREMIUMDEVIATIONFACTOR, \n\tTYPEOFPREMIUMDEVIATIONCODE, \n\tESTIMATEDSTATESTANDARDPREMIUMTOTAL, \n\tEC_Written AS EXPENSECONSTANTAMOUNT, \n\tPD_Written AS PREMIUMDISCOUNTAMOUNT, \n\tPRORATEDEXPENSECONSTANTAMOUNTREASONCODE, \n\tPRORATEDMINIMUMPREMIUMAMOUNTREASONCODE, \n\tREASONSTATEWASADDEDTOTHEPOLICYCODE, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tANNIVERSARYRATINGDATE, \n\tASSIGNEDRISKADJUSTMENTPROGRAMFACTOR, \n\tPREMIUMADJUSTMENTPERIODCODE, \n\tTYPEOFNONSTANDARDIDCODE, \n\tPOLICYCHANGEEFFECTIVEDATE, \n\tPOLICYCHANGEEXPIRATIONDATE\n\tFROM RTR_WCPOLS_04_Record_WCPOLS_04_Record_NCCI\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_04": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}