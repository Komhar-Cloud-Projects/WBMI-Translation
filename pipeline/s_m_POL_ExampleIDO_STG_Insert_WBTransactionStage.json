{
    "name": "s_m_POL_ExampleIDO_STG_Insert_WBTransactionStage",
    "properties": {
        "activities": [
            {
                "name": "m_POL_ExampleIDO_STG_Insert_WBTransactionStage",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_WB_Transaction AS (\n\tWITH cte_WBTransaction(Sessionid) as\r\n\t(select sessionid from @{pipeline().parameters.SOURCE_DATABASE_WB}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_EDWIncrementalDataQualitySessions where ModifiedDate between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}' \r\n\tAND Autoshred<> '1' \r\n\t UNION \r\n\t select distinct A.sessionid from @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session A Inner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction B on A.SessionID=B.SessionID where B.State<> 'committed' and A.CreateDateTime>='@{pipeline().parameters.SELECTION_START_TS}')\r\n\tSELECT \r\n\tX.TransactionId, \r\n\tX.WB_TransactionId, \r\n\tX.SessionId, \r\n\tX.ProRataFactor, \r\n\tX.QuoteActionUserClassification, \r\n\tX.QuoteActionTimeStamp, \r\n\tX.QuoteActionUserName, \r\n\tX.QuoteActionStatus, \r\n\tX.VerifiedDate, \r\n\tX.DataFix, \r\n\tX.DataFixDate, \r\n\tX.DataFixType,\r\n\tX.DeclaredEvent,\r\n\tX.HistoryIDOriginal,\r\n\tX.OriginalID, \r\n\tX.OnsetBy\r\n\tFROM  \r\n\tWB_Transaction X\r\n\tinner join\r\n\tcte_WBTransaction Y on X.Sessionid = Y.Sessionid\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_Values AS (\n\tSELECT\n\tTransactionId,\n\tWB_TransactionId,\n\tSessionId,\n\tProRataFactor,\n\tQuoteActionUserClassification,\n\tQuoteActionTimeStamp,\n\tQuoteActionUserName,\n\tQuoteActionStatus,\n\tVerifiedDate,\n\tSYSDATE AS o_ExtractDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemId,\n\tDataFix,\n\tDataFixDate,\n\tDataFixType,\n\tDeclaredEvent AS i_DeclaredEvent,\n\t-- *INF*: DECODE(i_DeclaredEvent, 'T', 1, 'F', 0,Null)\n\tDECODE(\n\t    i_DeclaredEvent,\n\t    'T', 1,\n\t    'F', 0,\n\t    Null\n\t) AS o_DeclaredEvent,\n\tHistoryIDOriginal,\n\tOriginalID,\n\tOnsetBy\n\tFROM SQ_WB_Transaction\n),\nWBTransactionStage AS (\n\tTRUNCATE TABLE @{pipeline().parameters.TARGET_TABLE_OWNER}.WBTransactionStage;\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.WBTransactionStage\n\t(ExtractDate, SourceSystemId, TransactionId, WBTransactionId, SessionId, ProRataFactor, QuoteActionUserClassification, QuoteActionTimeStamp, QuoteActionUserName, QuoteActionStatus, VerifiedDate, DataFix, DataFixDate, DataFixType, DeclaredEvent, HistoryIDOriginal, OriginalID, OnsetBy)\n\tSELECT \n\to_ExtractDate AS EXTRACTDATE, \n\to_SourceSystemId AS SOURCESYSTEMID, \n\tTRANSACTIONID, \n\tWB_TransactionId AS WBTRANSACTIONID, \n\tSESSIONID, \n\tPRORATAFACTOR, \n\tQUOTEACTIONUSERCLASSIFICATION, \n\tQUOTEACTIONTIMESTAMP, \n\tQUOTEACTIONUSERNAME, \n\tQUOTEACTIONSTATUS, \n\tVERIFIEDDATE, \n\tDATAFIX, \n\tDATAFIXDATE, \n\tDATAFIXTYPE, \n\to_DeclaredEvent AS DECLAREDEVENT, \n\tHISTORYIDORIGINAL, \n\tORIGINALID, \n\tONSETBY\n\tFROM EXP_Values\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_DATABASE_WB": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Staging/PolicyStaging/"
        },
        "annotations": []
    }
}