{
    "name": "s_m_POL_DM_LOAD_PolicyCurrentStatusDim",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DM_LOAD_PolicyCurrentStatusDim",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_ReasonAmendedCode_DCT AS (\n\tSELECT\n\tReasonAmendedCodeDimId,\n\tpol_key,\n\tpol_cancellation_date\n\tFROM (\n\t\tSELECT RAC.ReasonAmendedCodeDimId AS ReasonAmendedCodeDimId,\r\n\t\tRAC.pol_key AS pol_key,\r\n\t\tRAC.pol_cancellation_date AS pol_cancellation_date FROM \r\n\t\t(\r\n\t\tselect  \r\n\t\tdistinct d.ReasonAmendedCodeDimId  as ReasonAmendedCodeDimId ,\r\n\t\tPolicyNumber+ISNULL(RIGHT('00'+CONVERT(VARCHAR(3), PolicyVersion),2),'00') as pol_key,\r\n\t\tcase when CancellationDate is null then convert(varchar(8),TransactionEffectiveDate,112) \r\n\t\t     when cancellationdate>TransactionEffectiveDate then convert(varchar(8),TransactionEffectiveDate,112) \r\n\t\t\t else convert(varchar(8),cancellationdate,112)   end pol_cancellation_date\t \r\n\t\tfrom @{pipeline().parameters.STAGE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.STAGE_TABLE_NAME}\r\n\t\t join @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.sup_reason_amended_code r on reasoncode=r.rsn_amended_code\r\n\t\t  join @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ReasonAmendedCodeDim d on r.StandardReasonAmendedCode=d.ReasonAmendedCode \r\n\t\twhere PolicyStatus<>'Quote' and TransactionState='committed' and policystatus='Cancelled' \r\n\t\tand r.source_sys_id='DCT') RAC\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key,pol_cancellation_date ORDER BY ReasonAmendedCodeDimId DESC) = 1\n),\nSQ_V2Policy_LatestStatusPerMonth AS (\n\tDeclare @previousmonth varchar(6)\r\n\tSet @previousmonth= convert(varchar(6),dateadd(mm,@{pipeline().parameters.NO_OF_MONTHS},getdate()),112)\r\n\t\r\n\tSELECT \r\n\tPOL.eff_from_date,\r\n\tPOL.eff_to_date,\r\n\tPOL.source_sys_id,\r\n\tPOL.created_date,\r\n\tPOL.pol_ak_id,\r\n\tPOL.POL_KEY,\r\n\tPOL.pol_eff_date,\r\n\tPOL.pol_exp_date,\r\n\tPOL.pol_cancellation_date,\r\n\tPOL.Pol_compare_date,\r\n\tPOL.CalendarEndOfMonthDate,\r\n\tPOL.Rundate,\r\n\tPOL.pol_cancellation_rsn_code,\r\n\tPOL.pol_status_code  \r\n\tFROM\r\n\t(\r\n\t\t\t\t  SELECT  V2POLICY.pol_key,\r\n\t\t\t\t\t\t  V2POLICY.Pol_compare_date ,\r\n\t                      V2POLICY.created_date,\r\n\t                      V2POLICY.eff_from_date,\r\n\t\t\t\t\t\t  V2POLICY.eff_to_date,\r\n\t                                  V2POLICY.source_sys_id,\r\n\t\t\t\t\t\t  V2POLICY.pol_eff_date,\r\n\t\t\t\t\t\t  V2POLICY.pol_exp_date,\r\n\t\t\t\t\t\t  V2POLICY.pol_cancellation_date,\r\n\t\t\t\t\t\t  V2POLICY.pol_status_code,\r\n\t\t\t\t\t\t  V2POLICY.pol_cancellation_rsn_code,\r\n\t\t\t\t\t\t  V2POLICY.pol_ak_id,\r\n\t\t\t\t\t\t  CAL.CalendarEndOfMonthDate,\r\n\t                     dateadd(ss,-1,dateadd(dd,1,CAL.CalendarEndOfMonthDate))  Rundate,\r\n\t\t\t\t\t\t Rank() over(partition by V2POLICY.pol_key,convert(varchar(6),V2POLICY.Pol_compare_date,112) order by V2POLICY.Pol_compare_date desc,V2POLICY.eff_from_date ) Rank_record\r\n\t\t\t\t\t\t\t---Rank record is to rank the records per policy key and per month\r\n\t\t\t\t\t\t\t\tFROM (SELECT POL1.POL_KEY,\r\n\t\t\t\t\t\t\t\t POL1.Pol_compare_date,\r\n\t\t\t\t\t\t\t\t POL1.created_date,\r\n\t\t\t\t\t\t\t\t  POL1.eff_from_date,\r\n\t\t\t\t\t\t\t\t\tPOL1.eff_to_date,\r\n\t\t\t\t\t\t\t\t  POL1.source_sys_id,\r\n\t\t \t\t\t\t\t\t  POL1.pol_eff_date,\r\n\t\t\t\t\t\t\t\t  POL1.pol_exp_date,\r\n\t\t\t\t\t\t\t\t  POL1.pol_cancellation_date,\r\n\t\t\t\t\t\t\t\t  POL1.pol_status_code,\r\n\t\t                          POL1.pol_cancellation_rsn_code,\r\n\t\t\t\t\t\t\t\t  POL1.pol_ak_id\r\n\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t       from (SELECT POL.POL_KEY,\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase when convert(varchar(6),POL.eff_from_date,112)='180001' then dateadd(dd,-1,POL.Created_date) else POL.eff_from_date end Pol_compare_date,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t POL.created_date,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.eff_from_date,\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.eff_to_date,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.source_sys_id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_eff_date,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_exp_date,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_cancellation_date,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_status_code,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_cancellation_rsn_code,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  POL.pol_ak_id,\r\n\tRank() over(partition by POL.pol_key,convert(varchar(6),case when convert(varchar(6),POL.eff_from_date,112)='180001' then dateadd(dd,-1,POL.Created_date) else POL.eff_from_date end,112) order by  POL.eff_from_date   desc ) Rank_per_Month\r\n\t---Rank record is to rank the records per policy key and per month\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.POLICY POL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   WHERE  POL.source_sys_id='DCT'   \r\n\t\t\t\t\t\t\t\t\t\t\t@{pipeline().parameters.WHERE_CLAUSE_DCT}\r\n\t\t\t\t\t\t\t\t\t\t\t) POL1 WHERE POL1.Rank_per_Month=1\r\n\t\t\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\tUNION\r\n\t--for PMS\r\n\t\t\t\t\t\t\t\t\tSELECT POL.POL_KEY,\r\n\t\t\t\t\t\t\t\t case when convert(varchar(6),POL.eff_from_date,112)='180001' then POL.Created_date else POL.eff_from_date end Pol_compare_date,\r\n\t\t\t\t\t\t\t\t POL.created_date,\r\n\t\t\t\t\t\t\t\t  POL.eff_from_date,\r\n\t\t\t\t\t\t\t\t  POL.eff_to_date,\r\n\t\t\t\t\t\t\t\t  POL.source_sys_id,\r\n\t\t \t\t\t\t\t\t  POL.pol_eff_date,\r\n\t\t\t\t\t\t\t\t  POL.pol_exp_date,\r\n\t\t\t\t\t\t\t\t  POL.pol_cancellation_date,\r\n\t\t\t\t\t\t\t\t  POL.pol_status_code,\r\n\t\t                          POL.pol_cancellation_rsn_code,\r\n\t\t\t\t\t\t\t\t  POL.pol_ak_id\r\n\t\t\t\t\t       from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.POLICY POL where POL.source_sys_id='PMS'  \r\n\t\t\t\t\t\t   @{pipeline().parameters.WHERE_CLAUSE_PMS}\t\t\t\t    \r\n\t                 \t                \t      ) V2POLICY \r\n\t\t\t\t\tINNER JOIN  (SELECT DISTINCT CalendarStartOfMonthDate,CalendarEndOfMonthDate  FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim) CAL\r\n\t\t\t\t\ton \r\n\t\t\t\t\t(\r\n\t\t\t\t\t(dateadd(ss,-1,dateadd(dd,1,CAL.CalendarEndOfMonthDate)) between V2POLICY.Pol_compare_date and V2POLICY.eff_to_date\r\n\t\t\t\t\tand convert(varchar(6),V2POLICY.pol_exp_date,112)>= convert(varchar(6),CAL.CalendarEndOfMonthDate,112))\r\n\t\t\t\t\tor   --- this condition is to pul the policies came to EDW after expiration\r\n\t\t\t\t\t(convert(varchar(6),CAL.CalendarEndOfMonthDate,112)>convert(varchar(6),V2POLICY.pol_exp_date,112)\r\n\t\t\t\t\tand V2POLICY.Pol_compare_date \r\n\t\t\t\t    between CAL.CalendarStartOfMonthDate and dateadd(ss,-1,dateadd(dd,1,CAL.CalendarEndOfMonthDate))\r\n\t\t\t\t\t )\r\n\t\t\t\t\t)\r\n\t\t\t\t\tand convert(varchar(6),CAL.CalendarEndOfMonthDate,112)=@previousmonth\r\n\t)\r\n\tPOL \r\n\tWHERE Rank_record=1\r\n\t---pull the latest policy status records per policy key and per month\n),\nEXP_Collect AS (\n\tSELECT\n\teff_from_date,\n\teff_to_date,\n\tsource_sys_id,\n\tcreated_date,\n\tpol_ak_id,\n\tpol_key,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tPol_compare_date,\n\tCalendarEndOfMonthDate,\n\tRundate,\n\tpol_cancellation_rsn_code,\n\tpol_status_code\n\tFROM SQ_V2Policy_LatestStatusPerMonth\n),\nLKP_Policy_Dim AS (\n\tSELECT\n\tpol_dim_id,\n\tedw_pol_ak_id,\n\teff_from_date,\n\teff_to_date\n\tFROM (\n\t\tSELECT \n\t\t\tpol_dim_id,\n\t\t\tedw_pol_ak_id,\n\t\t\teff_from_date,\n\t\t\teff_to_date\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.policy_dim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY edw_pol_ak_id,eff_from_date,eff_to_date ORDER BY pol_dim_id DESC) = 1\n),\nLKP_ReasonAmendedCodeDim_PMS AS (\n\tSELECT\n\tReasonAmendedCodeDimId,\n\tReasonAmendedCode\n\tFROM (\n\t\tSELECT \n\t\t\tReasonAmendedCodeDimId,\n\t\t\tReasonAmendedCode\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.ReasonAmendedCodeDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ReasonAmendedCode ORDER BY ReasonAmendedCodeDimId DESC) = 1\n),\nEXP_Policystatus AS (\n\tSELECT\n\tEXP_Collect.source_sys_id,\n\tEXP_Collect.pol_key,\n\tEXP_Collect.created_date,\n\tEXP_Collect.eff_from_date,\n\tEXP_Collect.eff_to_date,\n\tEXP_Collect.pol_eff_date,\n\tEXP_Collect.pol_exp_date,\n\tEXP_Collect.pol_cancellation_date,\n\tEXP_Collect.Pol_compare_date AS compare_date,\n\tEXP_Collect.CalendarEndOfMonthDate AS rundate,\n\t-- *INF*: IIF( TO_CHAR(pol_cancellation_date,'YYYYMMDD')<>'21001231' AND\r\n\t-- TO_CHAR(pol_cancellation_date,'YYYYMM')<= TO_CHAR(rundate,'YYYYMM') \r\n\t-- ,'Cancelled',\r\n\t-- IIF(TO_CHAR(pol_exp_date,'YYYYMM')<= TO_CHAR(rundate,'YYYYMM') \r\n\t-- ,'Not Inforce',\r\n\t-- IIF( TO_CHAR(pol_eff_date,'YYYYMM')>TO_CHAR(rundate,'YYYYMM') \r\n\t-- ,'Future Inforce', 'Inforce')\r\n\t-- )\r\n\t-- )\r\n\t-- \r\n\t-- --Case when convert(varchar(6),pol.pol_cancellation_date,112)='210012'  and\r\n\t-- --           convert(varchar(6),pol.pol_exp_date,112)<= convert(varchar(6),CalendarEndOfMonthDate,112) \r\n\t-- --\t\t  then 'Not Inforce' \r\n\t-- --\t      when convert(varchar(6),pol.pol_cancellation_date,112)<>'210012' and convert(varchar-(6),pol.pol_cancellation_date,112)<= convert(varchar(6),CalendarEndOfMonthDate,112) \r\n\t-- --     then 'Cancelled' \r\n\t-- --\twhen convert(varchar(6),pol.pol_eff_date,112)> convert(varchar(6),CalendarEndOfMonthDate,112) \r\n\t-- --\tthen 'Future Inforce' \r\n\t-- --\telse 'Inforce' end Pol_derived_status,\n\tIFF(TO_CHAR(pol_cancellation_date, 'YYYYMMDD'\n\t\t) <> '21001231' \n\t\tAND TO_CHAR(pol_cancellation_date, 'YYYYMM'\n\t\t) <= TO_CHAR(rundate, 'YYYYMM'\n\t\t),\n\t\t'Cancelled',\n\t\tIFF(TO_CHAR(pol_exp_date, 'YYYYMM'\n\t\t\t) <= TO_CHAR(rundate, 'YYYYMM'\n\t\t\t),\n\t\t\t'Not Inforce',\n\t\t\tIFF(TO_CHAR(pol_eff_date, 'YYYYMM'\n\t\t\t\t) > TO_CHAR(rundate, 'YYYYMM'\n\t\t\t\t),\n\t\t\t\t'Future Inforce',\n\t\t\t\t'Inforce'\n\t\t\t)\n\t\t)\n\t) AS v_policystatusdescription,\n\tv_policystatusdescription AS out_policystatusdescription,\n\t-- *INF*: IIF( TO_CHAR(pol_cancellation_date,'YYYYMMDD')<>'21001231' AND\r\n\t-- TO_CHAR(pol_cancellation_date,'YYYYMM')<= TO_CHAR(rundate,'YYYYMM'), 'Cancelled' ,\r\n\t-- \r\n\t-- IIF( TO_CHAR(pol_cancellation_date,'YYYYMMDD')<>'21001231' AND\r\n\t-- TO_CHAR(pol_cancellation_date,'YYYYMM')> TO_CHAR(rundate,'YYYYMM'),'FutureCancellation',\r\n\t-- \r\n\t-- --IIF( TO_CHAR(pol_cancellation_date,'YYYYMMDD')<>'21001231' AND\r\n\t-- --TO_CHAR(pol_cancellation_date,'YYYYMM')<= TO_CHAR(ADD_TO_DATE( rundate, 'D', 1 ),'YYYYMM'), 'Cancelled' ,\r\n\t-- IIF( TO_CHAR(pol_exp_date,'YYYYMM')<=TO_CHAR(ADD_TO_DATE( rundate, 'D', 1 ),'YYYYMM'), 'Not Inforce',\r\n\t-- IIF( TO_CHAR(pol_eff_date,'YYYYMM')>TO_CHAR(ADD_TO_DATE( rundate, 'D', 1 ),'YYYYMM') \r\n\t-- ,'Future Inforce' ,'Inforce')\r\n\t-- )\r\n\t-- )\r\n\t-- )\r\n\t-- \r\n\t-- --case when convert(varchar(6),pol.pol_exp_date,112)<= convert(varchar(6),dateadd(dd,1,CalendarEndOfMonthDate),112) \r\n\t-- --\t then 'Not Inforce' \r\n\t-- --\t when pol.pol_cancellation_date<>'2100-12-31 23:59:59' \r\n\t-- --\t      and convert(varchar(6),pol.pol_cancellation_date,112)<= convert(varchar(6),dateadd(dd,1,CalendarEndOfMonthDate),112) \r\n\t-- --\t then 'Cancelled' \r\n\t-- --\twhen convert(varchar(6),pol.pol_eff_date,112)> convert(varchar(6),dateadd(dd,1,CalendarEndOfMonthDate),112) \r\n\t-- --\tthen 'Future Inforce' \r\n\t-- --\telse 'Inforce' end Pol_Future_derived_status,\n\tIFF(TO_CHAR(pol_cancellation_date, 'YYYYMMDD'\n\t\t) <> '21001231' \n\t\tAND TO_CHAR(pol_cancellation_date, 'YYYYMM'\n\t\t) <= TO_CHAR(rundate, 'YYYYMM'\n\t\t),\n\t\t'Cancelled',\n\t\tIFF(TO_CHAR(pol_cancellation_date, 'YYYYMMDD'\n\t\t\t) <> '21001231' \n\t\t\tAND TO_CHAR(pol_cancellation_date, 'YYYYMM'\n\t\t\t) > TO_CHAR(rundate, 'YYYYMM'\n\t\t\t),\n\t\t\t'FutureCancellation',\n\t\t\tIFF(TO_CHAR(pol_exp_date, 'YYYYMM'\n\t\t\t\t) <= TO_CHAR(DATEADD(DAY,1,rundate), 'YYYYMM'\n\t\t\t\t),\n\t\t\t\t'Not Inforce',\n\t\t\t\tIFF(TO_CHAR(pol_eff_date, 'YYYYMM'\n\t\t\t\t\t) > TO_CHAR(DATEADD(DAY,1,rundate), 'YYYYMM'\n\t\t\t\t\t),\n\t\t\t\t\t'Future Inforce',\n\t\t\t\t\t'Inforce'\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t) AS v_futurepolicystatusdescription,\n\tv_futurepolicystatusdescription AS out_futurepolicystatusdescription,\n\t-- *INF*: IIF(v_policystatusdescription='Cancelled' ,pol_cancellation_date,\r\n\t-- TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\r\n\t-- )\r\n\t-- \r\n\t-- --case when Pol_derived_status='Cancelled' then pol_cancellation_date else '2100-12-31 23:59:59' end pol_cancellation_date,\n\tIFF(v_policystatusdescription = 'Cancelled',\n\t\tpol_cancellation_date,\n\t\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t\t)\n\t) AS v_pol_cancellation_date,\n\tv_pol_cancellation_date AS out_pol_cancellation_date,\n\t-- *INF*: IIF(IN(v_futurepolicystatusdescription,'FutureCancellation','Cancelled') ,pol_cancellation_date,\r\n\t-- TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\r\n\t-- )\r\n\t-- \r\n\t-- --Pol_derived_status,case when Pol_Future_derived_status='Cancelled' then pol_cancellation_date else '2100-12-31 23:59:59' end pol_Future_cancellation_date,\n\tIFF(v_futurepolicystatusdescription IN ('FutureCancellation','Cancelled'),\n\t\tpol_cancellation_date,\n\t\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t\t)\n\t) AS v_future_pol_cancellation_date,\n\tv_future_pol_cancellation_date AS out_future_pol_cancellation_date,\n\tEXP_Collect.pol_ak_id,\n\tsessstarttime AS out_created_date,\n\tLKP_Policy_Dim.pol_dim_id,\n\t-- *INF*: iif(isnull(pol_dim_id),-1,pol_dim_id)\n\tIFF(pol_dim_id IS NULL,\n\t\t- 1,\n\t\tpol_dim_id\n\t) AS out_pol_dim_id,\n\t-- *INF*: IIF(IN(v_futurepolicystatusdescription,'FutureCancellation','Cancelled') ,compare_date,\r\n\t-- TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\r\n\t-- )\r\n\t-- \r\n\t-- --IIF(v_policystatusdescription='Cancelled' ,i_Cancellation_Enter_date,\r\n\t-- --TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\r\n\t-- --)\r\n\t-- \r\n\t-- --case when Pol_derived_status='Cancelled' then Cancellation_Enter_date else '2100-12-31 23:59:59'\n\tIFF(v_futurepolicystatusdescription IN ('FutureCancellation','Cancelled'),\n\t\tcompare_date,\n\t\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t\t)\n\t) AS v_Pol_cancellation_enter_date,\n\tv_Pol_cancellation_enter_date AS out_Pol_cancellation_enter_date,\n\tEXP_Collect.pol_status_code,\n\tEXP_Collect.pol_cancellation_rsn_code,\n\tLKP_ReasonAmendedCodeDim_PMS.ReasonAmendedCodeDimId AS lkp_ReasonAmendedCodeDimId_pms,\n\t-- *INF*: iif(source_sys_id='DCT',\r\n\t-- iif( isnull(\r\n\t-- :LKP.LKP_REASONAMENDEDCODE_DCT(pol_key,TO_CHAR(pol_cancellation_date,'YYYYMMDD'))),-2,\r\n\t-- :LKP.LKP_REASONAMENDEDCODE_DCT(pol_key,TO_CHAR(pol_cancellation_date,'YYYYMMDD'))\r\n\t-- ))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tIFF(source_sys_id = 'DCT',\n\t\tIFF(LKP_REASONAMENDEDCODE_DCT_pol_key_TO_CHAR_pol_cancellation_date_YYYYMMDD.ReasonAmendedCodeDimId IS NULL,\n\t\t\t- 2,\n\t\t\tLKP_REASONAMENDEDCODE_DCT_pol_key_TO_CHAR_pol_cancellation_date_YYYYMMDD.ReasonAmendedCodeDimId\n\t\t)\n\t) AS v_ReasonAmendedCodeDimId_dct,\n\t-- *INF*:  iif(source_sys_id='PMS' ,\r\n\t-- iif(isnull(lkp_ReasonAmendedCodeDimId_pms),-2,\r\n\t-- lkp_ReasonAmendedCodeDimId_pms\r\n\t-- ))\r\n\t-- \r\n\t-- \n\tIFF(source_sys_id = 'PMS',\n\t\tIFF(lkp_ReasonAmendedCodeDimId_pms IS NULL,\n\t\t\t- 2,\n\t\t\tlkp_ReasonAmendedCodeDimId_pms\n\t\t)\n\t) AS v_ReasonAmendedCodeDimId_pms,\n\t-- *INF*: iif(source_sys_id='DCT' and v_policystatusdescription='Cancelled',v_ReasonAmendedCodeDimId_dct,\r\n\t-- iif(source_sys_id='PMS' and v_policystatusdescription='Cancelled',v_ReasonAmendedCodeDimId_pms,-1)\r\n\t-- )\r\n\t-- \r\n\t-- \n\tIFF(source_sys_id = 'DCT' \n\t\tAND v_policystatusdescription = 'Cancelled',\n\t\tv_ReasonAmendedCodeDimId_dct,\n\t\tIFF(source_sys_id = 'PMS' \n\t\t\tAND v_policystatusdescription = 'Cancelled',\n\t\t\tv_ReasonAmendedCodeDimId_pms,\n\t\t\t- 1\n\t\t)\n\t) AS v_ReasonAmendedCodeDimId,\n\tv_ReasonAmendedCodeDimId AS out_ReasonAmendedCodeDimId,\n\t-- *INF*: iif(NOT IN(v_futurepolicystatusdescription,'FutureCancellation','Cancelled') ,-1,\r\n\t-- iif(source_sys_id='DCT' ,v_ReasonAmendedCodeDimId_dct,\r\n\t-- iif(source_sys_id='PMS',v_ReasonAmendedCodeDimId_pms\r\n\t-- )))\r\n\t-- \r\n\t-- \n\tIFF(NOT v_futurepolicystatusdescription IN ('FutureCancellation','Cancelled'),\n\t\t- 1,\n\t\tIFF(source_sys_id = 'DCT',\n\t\t\tv_ReasonAmendedCodeDimId_dct,\n\t\t\tIFF(source_sys_id = 'PMS',\n\t\t\t\tv_ReasonAmendedCodeDimId_pms\n\t\t\t)\n\t\t)\n\t) AS v_FutureReasonAmendedCodeDimId,\n\tv_FutureReasonAmendedCodeDimId AS out_FutureReasonAmendedCodeDimId,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId\n\tFROM EXP_Collect\n\tLEFT JOIN LKP_Policy_Dim\n\tON LKP_Policy_Dim.edw_pol_ak_id = EXP_Collect.pol_ak_id AND LKP_Policy_Dim.eff_from_date <= EXP_Collect.Rundate AND LKP_Policy_Dim.eff_to_date >= EXP_Collect.Rundate\n\tLEFT JOIN LKP_ReasonAmendedCodeDim_PMS\n\tON LKP_ReasonAmendedCodeDim_PMS.ReasonAmendedCode = EXP_Collect.pol_cancellation_rsn_code\n\tLEFT JOIN LKP_REASONAMENDEDCODE_DCT LKP_REASONAMENDEDCODE_DCT_pol_key_TO_CHAR_pol_cancellation_date_YYYYMMDD\n\tON LKP_REASONAMENDEDCODE_DCT_pol_key_TO_CHAR_pol_cancellation_date_YYYYMMDD.pol_key = pol_key\n\tAND LKP_REASONAMENDEDCODE_DCT_pol_key_TO_CHAR_pol_cancellation_date_YYYYMMDD.pol_cancellation_date = TO_CHAR(pol_cancellation_date, 'YYYYMMDD'\n\t\t)\n\n),\nLKP_PolicyCurrentStatusDim AS (\n\tSELECT\n\tPolicyCurrentStatusDimId,\n\tPolicyKey,\n\tRunDate\n\tFROM (\n\t\tSELECT \r\n\t\tPolicyCurrentStatusDim.PolicyCurrentStatusDimId as PolicyCurrentStatusDimId,\r\n\t\t PolicyCurrentStatusDim.PolicyKey as PolicyKey, \r\n\t\tPolicyCurrentStatusDim.RunDate as RunDate FROM PolicyCurrentStatusDim\r\n\t\twhere\r\n\t\tconvert(varchar(6),Rundate,112)=convert(varchar(6),dateadd(mm,@{pipeline().parameters.NO_OF_MONTHS},getdate()),112)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyKey,RunDate ORDER BY PolicyCurrentStatusDimId) = 1\n),\nRTR_INSERT_UPDATE AS (\n\tSELECT\n\tLKP_PolicyCurrentStatusDim.PolicyCurrentStatusDimId AS lkp_PolicyCurrentStatusDimId,\n\tEXP_Policystatus.AuditId,\n\tEXP_Policystatus.out_created_date AS CreatedDate,\n\tEXP_Policystatus.out_created_date AS ModifiedDate,\n\tEXP_Policystatus.out_pol_dim_id AS PolicyDimId,\n\tEXP_Policystatus.out_ReasonAmendedCodeDimId AS ReasonAmendedCodeDimId,\n\tEXP_Policystatus.pol_ak_id AS EDWPolicyAKId,\n\tEXP_Policystatus.pol_key AS PolicyKey,\n\tEXP_Policystatus.rundate AS RunDate,\n\tEXP_Policystatus.out_pol_cancellation_date AS PolicyCancellationDate,\n\tEXP_Policystatus.out_policystatusdescription AS PolicyStatusDescription,\n\tEXP_Policystatus.out_future_pol_cancellation_date AS PolicyFutureCancellationDate,\n\tEXP_Policystatus.out_Pol_cancellation_enter_date AS PolicyCancellationEnteredDate,\n\tEXP_Policystatus.out_futurepolicystatusdescription AS PolicyFutureStatusDescription,\n\tEXP_Policystatus.out_FutureReasonAmendedCodeDimId AS PolicyFutureCancellationReasonAmendedCodeDimId\n\tFROM EXP_Policystatus\n\tLEFT JOIN LKP_PolicyCurrentStatusDim\n\tON LKP_PolicyCurrentStatusDim.PolicyKey = EXP_Policystatus.pol_key AND LKP_PolicyCurrentStatusDim.RunDate = EXP_Policystatus.rundate\n),\nRTR_INSERT_UPDATE_INSERT AS (SELECT * FROM RTR_INSERT_UPDATE WHERE IIF(ISNULL (lkp_PolicyCurrentStatusDimId),  TRUE)),\nRTR_INSERT_UPDATE_UPDATE AS (SELECT * FROM RTR_INSERT_UPDATE WHERE IIF(NOT ISNULL (lkp_PolicyCurrentStatusDimId),  TRUE)),\nUPD_PolicyCurrentStatusDIm AS (\n\tSELECT\n\tlkp_PolicyCurrentStatusDimId AS PolicyCurrentStatusDimId3, \n\tAuditId AS AuditId3, \n\tModifiedDate AS ModifiedDate3, \n\tPolicyDimId AS PolicyDimId3, \n\tReasonAmendedCodeDimId AS ReasonAmendedCodeDimId3, \n\tEDWPolicyAKId AS EDWPolicyAKId3, \n\tPolicyKey AS PolicyKey3, \n\tRunDate AS RunDate3, \n\tPolicyCancellationDate AS PolicyCancellationDate3, \n\tPolicyStatusDescription AS PolicyStatusDescription3, \n\tPolicyFutureCancellationDate AS PolicyFutureCancellationDate3, \n\tPolicyCancellationEnteredDate AS PolicyCancellationEnteredDate3, \n\tPolicyFutureStatusDescription AS PolicyFutureStatusDescription3, \n\tPolicyFutureCancellationReasonAmendedCodeDimId AS PolicyFutureCancellationReasonAmendedCodeDimId3\n\tFROM RTR_INSERT_UPDATE_UPDATE\n),\nPolicyCurrentStatusDimu_UPDATE AS (\n\tMERGE INTO PolicyCurrentStatusDim AS T\n\tUSING UPD_PolicyCurrentStatusDIm AS S\n\tON T.PolicyCurrentStatusDimId = S.PolicyCurrentStatusDimId3\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.AuditId = S.AuditId3, T.ModifiedDate = S.ModifiedDate3, T.PolicyDimId = S.PolicyDimId3, T.ReasonAmendedCodeDimId = S.ReasonAmendedCodeDimId3, T.EDWPolicyAKId = S.EDWPolicyAKId3, T.PolicyKey = S.PolicyKey3, T.RunDate = S.RunDate3, T.PolicyCancellationDate = S.PolicyCancellationDate3, T.PolicyStatusDescription = S.PolicyStatusDescription3, T.PolicyFutureCancellationDate = S.PolicyFutureCancellationDate3, T.PolicyCancellationEnteredDate = S.PolicyCancellationEnteredDate3, T.PolicyFutureStatusDescription = S.PolicyFutureStatusDescription3, T.PolicyFutureCancellationReasonAmendedCodeDimId = S.PolicyFutureCancellationReasonAmendedCodeDimId3\n),\nPolicyCurrentStatusDim_INSERT AS (\n\tINSERT INTO PolicyCurrentStatusDim\n\t(AuditId, CreatedDate, ModifiedDate, PolicyDimId, ReasonAmendedCodeDimId, EDWPolicyAKId, PolicyKey, RunDate, PolicyCancellationDate, PolicyStatusDescription, PolicyFutureCancellationDate, PolicyCancellationEnteredDate, PolicyFutureStatusDescription, PolicyFutureCancellationReasonAmendedCodeDimId)\n\tSELECT \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPOLICYDIMID, \n\tREASONAMENDEDCODEDIMID, \n\tEDWPOLICYAKID, \n\tPOLICYKEY, \n\tRUNDATE, \n\tPOLICYCANCELLATIONDATE, \n\tPOLICYSTATUSDESCRIPTION, \n\tPOLICYFUTURECANCELLATIONDATE, \n\tPOLICYCANCELLATIONENTEREDDATE, \n\tPOLICYFUTURESTATUSDESCRIPTION, \n\tPOLICYFUTURECANCELLATIONREASONAMENDEDCODEDIMID\n\tFROM RTR_INSERT_UPDATE_INSERT\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246511"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905531"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604519"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 02:57:01"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 03:31:13"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_DATA_MART_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Data_Mart"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "-1"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": ""
            },
            "STAGE_TABLE_NAME": {
                "type": "string",
                "defaultValue": "archWorkDCTPolicy"
            },
            "STAGE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_STAGE"
            },
            "WHERE_CLAUSE_DCT": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_PMS": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataMart/"
        },
        "annotations": []
    }
}