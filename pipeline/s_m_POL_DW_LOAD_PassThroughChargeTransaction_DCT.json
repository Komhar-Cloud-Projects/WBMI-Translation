{
    "name": "s_m_POL_DW_LOAD_PassThroughChargeTransaction_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PassThroughChargeTransaction_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSEQ_PassThroughChargeTransactionAKID AS (\n\tCREATE SEQUENCE SEQ_PassThroughChargeTransactionAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nSQ_PassThroughChargeTransaction_SRC AS (\n\tWITH Common AS\r\n\t(\r\n\tSELECT distinct\r\n\tDCTrans.SessionId SessionId,\r\n\tDCTrans.Type TType,\r\n\tDCTrans.EffectiveDate TEffectiveDate,\r\n\tDCTrans.CreatedDate TCreatedDate,\r\n\tDCTrans.ExpirationDate TExpirationDate,\r\n\tDCTrans.TransactionDate TransactionDate,\r\n\tDCPolicy.PolicyId PolicyId,\r\n\tDCPolicy.Id Id,\r\n\tDCPolicy.PolicyNumber PolicyNumber,\r\n\tDCPolicy.EffectiveDate PEffectiveDate,\r\n\tDCPolicy.LineOfBusiness LineOfBusiness,\r\n\tWBPolicy.PolicyVersion PolicyVersion,\r\n\tWBParty.CustomerNum CustomerNum,\r\n\tWBR.Code Code,\r\n\t(SELECT COUNT(DISTINCT Type) FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging \r\n\tWHERE PolicyId=DCPolicy.PolicyId AND SessionId=DCPolicy.SessionId) NumOfLine,\r\n\tDCSession.Purpose\r\n\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging DCTrans\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPolicyStaging DCPolicy\r\n\tON DCPolicy.SessionId=DCTrans.SessionId AND LEN(DCPolicy.PolicyNumber)=7 AND DCPolicy.Status<>'Quote'\r\n\tAND DCTrans.State='committed'\r\n\tAND DCTrans.HistoryID =(SELECT MAX(HistoryID) FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTransactionStaging DCT \r\n\tWHERE DCT.SessionId=DCTrans.SessionId)\r\n\tAND DCTrans.Type @{pipeline().parameters.EXCLUDE_TTYPE}\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBPolicyStaging WBPolicy\r\n\tON WBPolicy.SessionId=DCPolicy.SessionId AND WBPolicy.PolicyId=DCPolicy.PolicyId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPartyAssociationStaging DCPA ON DCPA.SessionId=DCTrans.SessionId \r\n\tAND DCPA.PartyAssociationType='Account'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBPartyStaging WBParty ON WBParty.SessionId=DCTrans.SessionId \r\n\tAND WBParty.PartyId=DCPA.PartyId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBReasonStaging WBR ON WBR.SessionId=DCTrans.SessionId \r\n\tAND WBR.TransactionId=DCTrans.TransactionId\r\n\tINNER JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCSessionStaging DCSession ON DCSession.SessionId=DCTrans.SessionId \r\n\t\r\n\t)\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id Id,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\tDCTS.ObjectName as TaxSurchargeObjectName,\r\n\tDCTS.Id as TaxSurchargeId,\r\n\tDCTS.Type DCTSType,\r\n\tDCTS.Written Written,\r\n\tDCTS.Amount Amount,\r\n\tDCTS.Change Change,\r\n\tCommon.Code Code,\r\n\tWBTS.ChangeAttr ChangeAttr,\r\n\tWBTS.WrittenAttr WrittenAttr,\r\n\tWBTS.EntityType EntityType,\r\n\tWBLA.GeoTaxCityTaxPercent GeoTaxCityTaxPercent,\r\n\tWBLA.GeoTaxCountyTaxPercent GeoTaxCountyTaxPercent,\r\n\t'N/A' as State,\r\n\tDCPST.Written as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tNULL as ObjectId,\r\n\tNULL as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\t'N/A' as CoverageGuid\r\n\t,'Query1' as Query\r\n\tFROM Common\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging DCTS\r\n\tON Common.SessionId=DCTS.SessionId AND Common.PolicyId=DCTS.ObjectId AND DCTS.ObjectName='DC_Policy'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage WBTS\r\n\tON WBTS.TaxSurchargeId=DCTS.TaxSurchargeId AND WBTS.SessionId=DCTS.SessionId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPremiumSubtotalStaging DCPST\r\n\tON DCPST.SessionId=Common.SessionId AND DCPST.ObjectId=Common.PolicyId AND DCPST.ObjectName='DC_Policy'\r\n\tAND DCPST.Type='PurePremiumValues'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId \r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId\r\n\tAND WBLocation.LocationId=DCLocation.LocationId \r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationAssociationStaging DCLA\r\n\tON DCLocation.SessionId=DCLA.SessionId AND DCLocation.LocationId=DCLA.LocationId\r\n\tAND DCLA.LocationAssociationType='Location'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationAccountStage WBLA\r\n\tON WBLA.SessionId=DCLocation.SessionId AND WBLA.LocationId=DCLocation.LocationId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCLine\r\n\tON DCLine.PolicyId=Common.PolicyId AND DCLine.SessionId=Common.SessionId\r\n\tAND NOT EXISTS (\r\n\tSELECT 1 FROM DCLineStaging DCL WHERE DCL.SessionId=DCLine.SessionId AND DCL.LineId<DCLine.LineId)\r\n\t\r\n\tUNION ALL\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id Id,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\tDCTS.ObjectName as TaxSurchargeObjectName,\r\n\tDCTS.Id as TaxSurchargeId,\r\n\tDCTS.Type DCTSType,\r\n\tDCTS.Written Written,\r\n\tDCTS.Amount Amount,\r\n\tDCTS.Change Change,\r\n\tCommon.Code Code,\r\n\tWBTS.ChangeAttr ChangeAttr,\r\n\tWBTS.WrittenAttr WrittenAttr,\r\n\tWBTS.EntityType EntityType,\r\n\tWBLA.GeoTaxCityTaxPercent GeoTaxCityTaxPercent,\r\n\tWBLA.GeoTaxCountyTaxPercent GeoTaxCountyTaxPercent,\r\n\t'N/A' as State,\r\n\tDCPST.Written as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tNULL as ObjectId,\r\n\tNULL as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\t'N/A' as CoverageGuid\r\n\t,'Query2' as Query\r\n\tFROM Common\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCLine\r\n\tON DCLine.PolicyId=Common.PolicyId AND DCLine.SessionId=Common.SessionId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging DCTS\r\n\tON DCLine.SessionId=DCTS.SessionId AND DCLine.LineId=DCTS.ObjectId AND DCTS.ObjectName='DC_Line'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage WBTS\r\n\tON WBTS.TaxSurchargeId=DCTS.TaxSurchargeId AND WBTS.SessionId=DCTS.SessionId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPremiumSubtotalStaging DCPST\r\n\tON DCPST.SessionId=DCLine.SessionId AND DCPST.ObjectId=DCLine.LineId AND DCPST.ObjectName='DC_Line'\r\n\tAND DCPST.Type='PurePremiumValues'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId\r\n\tAND WBLocation.LocationId=DCLocation.LocationId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationAssociationStaging DCLA ON DCLocation.SessionId=DCLA.SessionId\r\n\tAND DCLocation.LocationId=DCLA.LocationId AND DCLA.LocationAssociationType='Location'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationAccountStage WBLA ON WBLA.SessionId=DCLocation.SessionId \r\n\tAND WBLA.LocationId=DCLocation.LocationId\r\n\t\r\n\tUNION ALL\r\n\t\r\n\t------ Below SQL is used to pull Taxes and Surcharges for WC Policies.\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id Id,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\tDCTS.ObjectName as TaxSurchargeObjectName,\r\n\tDCTS.Id as TaxSurchargeId,\r\n\tDCTS.Type DCTSType,\r\n\tDCTS.Written Written,\r\n\tDCTS.Amount Amount,\r\n\tDCTS.Change Change,\r\n\tCommon.Code Code,\r\n\tWBTS.ChangeAttr ChangeAttr,\r\n\tWBTS.WrittenAttr WrittenAttr,\r\n\tWBTS.EntityType EntityType,\r\n\tWBLA.GeoTaxCityTaxPercent GeoTaxCityTaxPercent,\r\n\tWBLA.GeoTaxCountyTaxPercent GeoTaxCountyTaxPercent,\r\n\tDCWCState.State as State,\r\n\tDCPST.Written as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tNULL as ObjectId,\r\n\tNULL as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\tDCCov.Id as CoverageGuid\r\n\t,'Query3' as Query\r\n\tFROM Common\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCLine\r\n\tON DCLine.PolicyId=Common.PolicyId\r\n\tAND DCLine.SessionId=Common.SessionId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCWCStateStaging DCWCState ON DCLine.LineId=DCWCState.LineId AND DCLine.SessionId=DCWCState.SessionId\r\n\tINNER HASH JOIN dbo.DCWCStateTermStaging DCWCStateTerm ON DCWCStateTerm.SessionId = DCWCState.SessionId AND DCWCState.WC_StateId = DCWCStateTerm.WC_StateId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging DCTS\r\n\tON DCWCState.SessionId=DCTS.SessionId AND DCWCState.WC_StateId=DCTS.ObjectId AND DCTS.ObjectName='DC_WC_State'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage WBTS ON WBTS.TaxSurchargeId=DCTS.TaxSurchargeId\r\n\tAND WBTS.SessionId=DCTS.SessionId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPremiumSubtotalStaging DCPST ON DCPST.SessionId=DCWCState.SessionId\r\n\tAND DCPST.ObjectId=DCWCState.WC_StateId AND DCPST.ObjectName='DC_WC_State' AND DCPST.Type='PurePremiumValues'\r\n\tLEFT HASH JOIN dbo.DCCoverageStaging DCCov on DCCov.sessionid = DCTS.SessionId AND DCCov.ObjectId=DCWCStateTerm.WC_StateTermId \r\n\tand DCCov.ObjectName = 'DC_WC_StateTerm' and DCCov.Type = DCTS.Type\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId AND DCLocation.StateProv=DCWCState.State\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationAssociationStaging DCLA ON DCLocation.SessionId=DCLA.SessionId AND DCLocation.LocationId=DCLA.LocationId\r\n\tAND DCLA.LocationAssociationType='Location'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId AND WBLocation.LocationId=DCLocation.LocationId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationAccountStage WBLA ON WBLA.SessionId=DCLocation.SessionId AND WBLA.LocationId=DCLocation.LocationId\r\n\t\r\n\tUNION ALL\r\n\t\r\n\t----- In the below query we are excluding MNFirefighterReliefFundSurcharge type as it is handled in the next SQL query to get the data at location level for Property, SBOPProperty and --BusinessOwners\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id Id,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\tDCTS.ObjectName as TaxSurchargeObjectName,\r\n\tDCTS.Id as TaxSurchargeId,\r\n\tDCTS.Type DCTSType,\r\n\tDCTS.Written Written,\r\n\tDCTS.Amount Amount,\r\n\tDCTS.Change Change,\r\n\tCommon.Code Code,\r\n\tWBTS.ChangeAttr ChangeAttr,\r\n\tWBTS.WrittenAttr WrittenAttr,\r\n\tWBTS.EntityType EntityType,\r\n\tWBLA.GeoTaxCityTaxPercent GeoTaxCityTaxPercent,\r\n\tWBLA.GeoTaxCountyTaxPercent GeoTaxCountyTaxPercent,\r\n\t'N/A' as State,\r\n\tDCPST.Written as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tDCLA.ObjectId as ObjectId,\r\n\tDCLA.ObjectName as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\t'N/A' as CoverageGuid\r\n\t,'Query4' as Query\r\n\tFROM Common\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCLine\r\n\tON DCLine.PolicyId=Common.PolicyId\r\n\tAND DCLine.SessionId=Common.SessionId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationAssociationStaging DCLA\r\n\tON DCLA.SessionId=DCLine.SessionId\r\n\tAND DCLA.ObjectName=CASE DCLine.Type WHEN 'BusinessOwners' THEN 'DC_BP_Location'\r\n\tWHEN 'Crime' THEN 'DC_CR_Location'\r\n\tWHEN 'InlandMarine' THEN 'DC_IM_Location'\r\n\tWHEN 'WorkersCompensation' THEN 'DC_WC_Location'\r\n\tWHEN 'Property' THEN 'DC_CF_Location'\r\n\tWHEN 'SBOPProperty' THEN 'DC_CF_Location'\r\n\tWHEN 'CommercialAuto' THEN 'DC_CA_Location'\r\n\tWHEN 'GeneralLiability' THEN 'DC_GL_Location'\r\n\tWHEN 'SBOPGeneralLiability' THEN 'DC_GL_Location'\r\n\tELSE 'DC_Session' END\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging DCTS ON DCLA.SessionId=DCTS.SessionId AND DCLA.LocationId=DCTS.ObjectId\r\n\tAND DCTS.ObjectName='DC_Location'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage WBTS ON WBTS.TaxSurchargeId=DCTS.TaxSurchargeId AND WBTS.SessionId=DCTS.SessionId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPremiumSubtotalStaging DCPST ON DCPST.SessionId=DCLA.SessionId AND DCPST.ObjectId=DCLA.LocationId\r\n\tAND DCPST.ObjectName='DC_Location' AND DCPST.Type='PurePremiumValues'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId AND DCLocation.LocationId=DCLA.LocationId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId AND WBLocation.LocationId=DCLocation.LocationId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationAccountStage WBLA ON WBLA.SessionId=DCLocation.SessionId AND WBLA.LocationId=DCLocation.LocationId\r\n\tWHERE DCTS.Type <> 'MNFirefighterReliefFundSurcharge'\r\n\t\r\n\tUNION ALL\r\n\t\r\n\t----- Below query we are pulling the data for MNFirefighterReliefFundSurcharge at location level and it is only need from these lines ('BusinessOwners', 'Property','SBOPProperty' )\r\n\t----- otherwise it is causing issue for data in the Aggregator as it is tying to other different lines like GL, IM, CU etc.\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id Id,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\tDCTS.ObjectName as TaxSurchargeObjectName,\r\n\tDCTS.Id as TaxSurchargeId,\r\n\tDCTS.Type DCTSType,\r\n\tDCTS.Written Written,\r\n\tDCTS.Amount Amount,\r\n\tDCTS.Change Change,\r\n\tCommon.Code Code,\r\n\tWBTS.ChangeAttr ChangeAttr,\r\n\tWBTS.WrittenAttr WrittenAttr,\r\n\tWBTS.EntityType EntityType,\r\n\tWBLA.GeoTaxCityTaxPercent GeoTaxCityTaxPercent,\r\n\tWBLA.GeoTaxCountyTaxPercent GeoTaxCountyTaxPercent,\r\n\t'N/A' as State,\r\n\tDCPST.Written as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tDCLA.ObjectId as ObjectId,\r\n\tDCLA.ObjectName as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\t'N/A' as CoverageGuid\r\n\t,'Query5' as Query\r\n\tFROM Common\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLineStaging DCLine ON DCLine.PolicyId=Common.PolicyId AND DCLine.SessionId=Common.SessionId and DCLine.Type in  ('BusinessOwners', 'Property','SBOPProperty')\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationAssociationStaging DCLA\r\n\tON DCLA.SessionId=DCLine.SessionId\r\n\tAND DCLA.ObjectName=CASE DCLine.Type WHEN 'BusinessOwners' THEN 'DC_BP_Location'\r\n\tWHEN 'Crime' THEN 'DC_CR_Location'\r\n\tWHEN 'InlandMarine' THEN 'DC_IM_Location'\r\n\tWHEN 'WorkersCompensation' THEN 'DC_WC_Location'\r\n\tWHEN 'Property' THEN 'DC_CF_Location'\r\n\tWHEN 'SBOPProperty' THEN 'DC_CF_Location'\r\n\tWHEN 'CommercialAuto' THEN 'DC_CA_Location'\r\n\tWHEN 'GeneralLiability' THEN 'DC_GL_Location'\r\n\tWHEN 'SBOPGeneralLiability' THEN 'DC_GL_Location'\r\n\tELSE 'DC_Session' END\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging DCTS ON DCLA.SessionId=DCTS.SessionId AND DCLA.LocationId=DCTS.ObjectId\r\n\tAND DCTS.ObjectName='DC_Location'\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage WBTS ON WBTS.TaxSurchargeId=DCTS.TaxSurchargeId AND WBTS.SessionId=DCTS.SessionId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCPremiumSubtotalStaging DCPST ON DCPST.SessionId=DCLA.SessionId AND DCPST.ObjectId=DCLA.LocationId\r\n\tAND DCPST.ObjectName='DC_Location' AND DCPST.Type='PurePremiumValues'\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId AND DCLocation.LocationId=DCLA.LocationId\r\n\tINNER HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId AND WBLocation.LocationId=DCLocation.LocationId\r\n\tLEFT HASH JOIN @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBLocationAccountStage WBLA ON WBLA.SessionId=DCLocation.SessionId AND WBLA.LocationId=DCLocation.LocationId\r\n\tWHERE DCTS.Type = 'MNFirefighterReliefFundSurcharge'\r\n\t\r\n\t\r\n\tUNION ALL\r\n\t\r\n\t---- Below Query is used to created Dummy Surcharge records in PassThroughChargeTransaction as these need to be reported to UnitStat Bureau\r\n\t----- DCT doesn't generate data in DCTaxSurchargeStaging table when the Surcharge rate is 0.00\r\n\t\r\n\tSELECT Common.SessionId SessionId,\r\n\tDCLine.Type LineType,\r\n\tCommon.Id as PolicyGUId,\r\n\tCommon.PEffectiveDate PEffectiveDate,\r\n\tCommon.LineOfBusiness LineOfBusiness,\r\n\tCommon.TType TType,\r\n\tCommon.TEffectiveDate TEffectiveDate,\r\n\tCommon.TCreatedDate TTransactionDate,\r\n\tCommon.TExpirationDate TExpirationDate,\r\n\tWBLocation.LocationNumber LocationNumber,\r\n\tCommon.CustomerNum CustomerNum,\r\n\tCommon.PolicyVersion PolicyVersion,\r\n\t'DC_WC_State' as TaxSurchargeObjectName,\r\n\tDCCov.Id as TaxSurchargeId,\r\n\tDCCov.Type as  DCTSType,\r\n\t0.00 as Written,\r\n\t0.00 as Amount,\r\n\t0.00 as Change,\r\n\tCommon.Code Code,\r\n\t0.00 as ChangeAttr,\r\n\t0.00 as WrittenAttr,\r\n\t'stateTaxSurcharge' as EntityType,\r\n\t0.00  as GeoTaxCityTaxPercent,\r\n\t0.00  as GeoTaxCountyTaxPercent,\r\n\tDCWCState.State as State,\r\n\t0.00 as DCPSTWritten,\r\n\tDCLocation.LocationXMLId as LocationXMLId,\r\n\tNULL as ObjectId,\r\n\tNULL as ObjectName,\r\n\tCommon.PolicyNumber as PolicyNumber,\r\n\tCommon.NumOfLine,\r\n\tDCLocation.LocationId,\r\n\tCommon.TransactionDate  as DCTranTransactionDate,\r\n\tCommon.Purpose as Purpose,\r\n\tDCCov.Id as CoverageGuid\r\n\t,'Query6' as Query\r\n\tFROM Common\r\n\tINNER JOIN dbo.DCLineStaging DCLine ON DCLine.PolicyId=Common.PolicyId AND DCLine.SessionId=Common.SessionId\r\n\tINNER JOIN dbo.DCWCStateStaging DCWCState ON DCLine.LineId=DCWCState.LineId AND DCLine.SessionId=DCWCState.SessionId and DCWCState.State in ('MN','MT','NY','NJ')\r\n\tINNER JOIN dbo.DCWCStateTermStaging DCWCStateTerm ON DCWCStateTerm.SessionId = DCWCState.SessionId AND DCWCState.WC_StateId = DCWCStateTerm.WC_StateId\r\n\tINNER JOIN dbo.DCCoverageStaging DCCov on DCCov.sessionid = DCWCState.SessionId AND DCCov.ObjectId=DCWCStateTerm.WC_StateTermId and DCCov.ObjectName = 'DC_WC_StateTerm'\r\n\tand DCCov.Type in ('OtherTaxesAndAssessments1','UninsuredEmployersFund','SecurityFundCharge')\r\n\tINNER JOIN dbo.DCLocationStaging DCLocation ON DCLocation.SessionId=Common.SessionId AND DCLocation.StateProv=DCWCState.State\r\n\tINNER JOIN dbo.DCLocationAssociationStaging DCLA ON DCLocation.SessionId=DCLA.SessionId AND DCLocation.LocationId=DCLA.LocationId AND DCLA.LocationAssociationType='Location'\r\n\tINNER JOIN dbo.WBLocationStaging WBLocation ON WBLocation.SessionId=DCLocation.SessionId AND WBLocation.LocationId=DCLocation.LocationId\r\n\tLEFT JOIN dbo.WBLocationAccountStage WBLA ON WBLA.SessionId=DCLocation.SessionId  AND WBLA.LocationId=DCLocation.LocationId\r\n\t\r\n\tORDER BY DCTS.Id,Common.TCreatedDate,DCLocation.LocationId desc, DCLine.Type\n),\nLKP_Territory AS (\n\tSELECT\n\tTerritory,\n\tObjectId,\n\tObjectName\n\tFROM (\n\t\tSELECT Territory AS Territory, ObjectId AS ObjectId, ObjectName AS ObjectName\r\n\t\tFROM (\r\n\t\tSELECT Territory, GL_LocationId AS ObjectId, 'DC_GL_Location' as ObjectName\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCGLLocationStaging\r\n\t\tUNION ALL\r\n\t\tSELECT convert(varchar(128),Territory) as Territory, CA_LocationId AS ObjectId, 'DC_CA_Location' as ObjectName\r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCCALocationStaging) A\r\n\t\tORDER BY ObjectId, ObjectName\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ObjectId,ObjectName ORDER BY Territory) = 1\n),\nLKP_WorkDCTInBalancePolicy AS (\n\tSELECT\n\tAccountingDate,\n\tManualOverrideAccountingDate,\n\tSessionID,\n\tPolicyNumber\n\tFROM (\n\t\tSELECT \n\t\t\tAccountingDate,\n\t\t\tManualOverrideAccountingDate,\n\t\t\tSessionID,\n\t\t\tPolicyNumber\n\t\tFROM WorkDCTInBalancePolicy\n\t\tWHERE HistoryId=(select max(HistoryId) from WorkDCTInBalancePolicy B where B.SessionId=WorkDCTInBalancePolicy.SessionId)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionID,PolicyNumber ORDER BY AccountingDate) = 1\n),\nEXP_PassThrough AS (\n\tSELECT\n\tSQ_PassThroughChargeTransaction_SRC.SessionId,\n\tSQ_PassThroughChargeTransaction_SRC.LineType,\n\tSQ_PassThroughChargeTransaction_SRC.Id,\n\tSQ_PassThroughChargeTransaction_SRC.PolicyEffectiveDate,\n\tSQ_PassThroughChargeTransaction_SRC.LineOfBusiness,\n\tSQ_PassThroughChargeTransaction_SRC.TType,\n\tSQ_PassThroughChargeTransaction_SRC.TEffectiveDate,\n\tSQ_PassThroughChargeTransaction_SRC.TCreatedDate,\n\tSQ_PassThroughChargeTransaction_SRC.TExpirationDate,\n\tSQ_PassThroughChargeTransaction_SRC.LocationNumber,\n\tSQ_PassThroughChargeTransaction_SRC.CustomerNum,\n\tSQ_PassThroughChargeTransaction_SRC.PolicyVersion,\n\tSQ_PassThroughChargeTransaction_SRC.TaxSurchargeObjectName,\n\tSQ_PassThroughChargeTransaction_SRC.TaxSurchargeId,\n\tSQ_PassThroughChargeTransaction_SRC.DCTSType,\n\tSQ_PassThroughChargeTransaction_SRC.Written,\n\tSQ_PassThroughChargeTransaction_SRC.Amount,\n\tSQ_PassThroughChargeTransaction_SRC.Change,\n\tSQ_PassThroughChargeTransaction_SRC.Code,\n\tSQ_PassThroughChargeTransaction_SRC.ChangeAttr,\n\tSQ_PassThroughChargeTransaction_SRC.WrittenAttr,\n\tSQ_PassThroughChargeTransaction_SRC.EntityType,\n\tSQ_PassThroughChargeTransaction_SRC.GeoTaxCityTaxPercent,\n\tSQ_PassThroughChargeTransaction_SRC.GeoTaxCountyTaxPercent,\n\tSQ_PassThroughChargeTransaction_SRC.State,\n\tSQ_PassThroughChargeTransaction_SRC.DCPSTWritten,\n\tLKP_Territory.Territory,\n\tSQ_PassThroughChargeTransaction_SRC.LocationXmlId,\n\tSQ_PassThroughChargeTransaction_SRC.PolicyNumber,\n\tSQ_PassThroughChargeTransaction_SRC.NumOfLine,\n\tSQ_PassThroughChargeTransaction_SRC.LocationId,\n\tSQ_PassThroughChargeTransaction_SRC.DCTranTransactionDate,\n\tSQ_PassThroughChargeTransaction_SRC.Purpose,\n\tLKP_WorkDCTInBalancePolicy.AccountingDate,\n\t1 AS LoadSequence,\n\t'N/A' AS RestateRepair,\n\tSQ_PassThroughChargeTransaction_SRC.Id1 AS CoverageGuid,\n\tSQ_PassThroughChargeTransaction_SRC.Query\n\tFROM SQ_PassThroughChargeTransaction_SRC\n\tLEFT JOIN LKP_Territory\n\tON LKP_Territory.ObjectId = SQ_PassThroughChargeTransaction_SRC.ObjectId AND LKP_Territory.ObjectName = SQ_PassThroughChargeTransaction_SRC.ObjectName\n\tLEFT JOIN LKP_WorkDCTInBalancePolicy\n\tON LKP_WorkDCTInBalancePolicy.SessionID = SQ_PassThroughChargeTransaction_SRC.SessionId AND LKP_WorkDCTInBalancePolicy.PolicyNumber = SQ_PassThroughChargeTransaction_SRC.PolicyNumber\n),\nmplt_PassThroughCharge AS (WITH\n\tLKP_SupPassthroughMap_PreFilter_ByTypeAndLineType AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tin_DCTSType,\n\t\tin_LineType\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.ElementValue as ElementValue, \r\n\t\t\tMAP.AttributeValue as AttributeValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='PreFilter' AND\r\n\t\t\tMAP.ElementKey ='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='LineType' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_SupPassthroughMap_PreFilter_ByTypeAndObject AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tin_DCTSType,\n\t\tin_TaxSurchargeObjectName\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.ElementValue as ElementValue, \r\n\t\t\tMAP.AttributeValue as AttributeValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='PreFilter' AND\r\n\t\t\tMAP.ElementKey ='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='TaxSurchargeObjectName' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_RiskLocation_RiskLocationKey_LocNum_Territory AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey,\n\t\tLocationUnitNumber,\n\t\tRiskTerritory\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey,\n\t\t\t\tLocationUnitNumber,\n\t\t\t\tRiskTerritory\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey,LocationUnitNumber,RiskTerritory ORDER BY RiskLocationAKID) = 1\n\t),\n\tLKP_RiskLocation_RiskLocationKey AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey ORDER BY RiskLocationAKID) = 1\n\t),\n\tLKP_RiskLocation_RiskLocationKey_LocNum AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tRiskLocationKey,\n\t\tLocationUnitNumber\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tRiskLocationAKID,\n\t\t\t\tRiskLocationKey,\n\t\t\t\tLocationUnitNumber\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation\n\t\t\tWHERE CurrentSnapshotFlag = 1 and SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' and \r\n\t\t\texists\r\n\t\t\t ( select 1 from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol inner join  @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT \r\n\t\t\t on WCT.PolicyNumber=pol.pol_num and ISNULL(RIGHT('00'+convert(varchar(3),WCT.PolicyVersion),2),'00')=pol.pol_mod and pol.crrnt_snpsht_flag=1 and PolicyAKID=pol.Pol_AK_ID ) Order By EffectiveDate DESC,CreatedDate DESC,RiskLocationAKID desc--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationKey,LocationUnitNumber ORDER BY RiskLocationAKID) = 1\n\t),\n\tLKP_SupPassthroughMap_PreFilter_ByType AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tin_DCTSType\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.ElementValue as ElementValue, \r\n\t\t\tMAP.AttributeValue as AttributeValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='PreFilter' AND\r\n\t\t\tMAP.ElementKey ='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='N/A' AND\r\n\t\t\tMAP.AttributeValue ='N/A'  AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_archDCTaxSurchargeStaging AS (\n\t\tSELECT\n\t\tSessionId\n\t\tFROM (\n\t\t\tSELECT  distinct a.SessionId AS SessionId \r\n\t\t\tfrom DCTaxSurchargeStaging a\r\n\t\t\twhere a.ObjectName='DC_Location'\r\n\t\t\tand a.Type = 'MNFirefighterReliefFundSurcharge'\r\n\t\t\tand a.SessionId in (SELECT distinct  ab.SessionId AS SessionId from DCTaxSurchargeStaging ab where ab.Type = 'MNFirefighterReliefFundSurcharge' and ab.ObjectName='DC_Line')\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId ORDER BY SessionId) = 1\n\t),\n\tIN_PassThroughChargeMapplet AS (\n\t\t\n\t),\n\tEXP_PassThrough AS (\n\t\tSELECT\n\t\tSessionId,\n\t\tLineType,\n\t\tId,\n\t\tPolicyEffectiveDate,\n\t\tLineOfBusiness,\n\t\tTType,\n\t\tTEffectiveDate,\n\t\tTCreatedDate,\n\t\tTExpirationDate,\n\t\tLocationNumber,\n\t\tCustomerNum,\n\t\tPolicyVersion,\n\t\tTaxSurchargeObjectName,\n\t\tTaxSurchargeId,\n\t\tDCTSType,\n\t\tWritten,\n\t\tAmount,\n\t\tChange,\n\t\tCode,\n\t\tChangeAttr,\n\t\tWrittenAttr,\n\t\tEntityType,\n\t\tGeoTaxCityTaxPercent,\n\t\tGeoTaxCountyTaxPercent,\n\t\tState,\n\t\tDCPSTWritten,\n\t\tTerritory,\n\t\tLocationXmlId,\n\t\tPolicyNumber,\n\t\tNumOfLine,\n\t\tLocationId,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- LineType='CommercialUmbrella','Umbrella',\r\n\t\t-- LineType='SBOPGeneralLiability','GeneralLiabilitySBOP',\r\n\t\t-- LineType='SBOPProperty','PropertySBOP',\r\n\t\t-- LineType='DirectorsAndOfficersNFP','DandONFP',\r\n\t\t-- LineType='EmploymentPracticesLiab','EPLI',\r\n\t\t-- LineType='DirectorsAndOffsCondos','DandOCondo',\r\n\t\t-- INSTR(DCTSType,'SMART')>0,'SMART',\r\n\t\t-- LineType\r\n\t\t-- )\n\t\tDECODE(TRUE,\n\t\t\tLineType = 'CommercialUmbrella', 'Umbrella',\n\t\t\tLineType = 'SBOPGeneralLiability', 'GeneralLiabilitySBOP',\n\t\t\tLineType = 'SBOPProperty', 'PropertySBOP',\n\t\t\tLineType = 'DirectorsAndOfficersNFP', 'DandONFP',\n\t\t\tLineType = 'EmploymentPracticesLiab', 'EPLI',\n\t\t\tLineType = 'DirectorsAndOffsCondos', 'DandOCondo',\n\t\t\tINSTR(DCTSType, 'SMART') > 0, 'SMART',\n\t\t\tLineType) AS v_LineTypeFormatted,\n\t\t-- *INF*: LTRIM(RTRIM(v_LineTypeFormatted))\n\t\tLTRIM(RTRIM(v_LineTypeFormatted)) AS o_LineTypeFormatted,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- EntityType='taxAppliedTo',0,\r\n\t\t-- --filter out fee and surcharge in the location level excluding MNFirefighterReliefFundSurcharge\r\n\t\t-- TaxSurchargeObjectName='DC_Location' AND (INSTR(DCTSType,'CollectionFee')>0 OR INSTR(DCTSType,'Surcharge')>0) AND DCTSType <> 'MNFirefighterReliefFundSurcharge' ,0,\r\n\t\t-- --filter out tax with invalid type\r\n\t\t-- TaxSurchargeObjectName='DC_Location' AND (INSTR(DCTSType,'Total')>0),0,\r\n\t\t-- \r\n\t\t-- TaxSurchargeObjectName='DC_Line' AND DCTSType = 'MNFirefighterReliefFundSurcharge' AND NOT ISNULL(:LKP.LKP_archDCTaxSurchargeStaging(SessionId)),0,\r\n\t\t-- -- Note if MNFirefighterReliefFundSurcharge is DC_Line and DC_line we only want the DC_line data to pass through\r\n\t\t-- \r\n\t\t-- NOT ISNULL(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE(DCTSType)),TO_INTEGER(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE(DCTSType)),\r\n\t\t-- \r\n\t\t-- NOT ISNULL(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE(DCTSType,LineType)),TO_INTEGER(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE(DCTSType,LineType)),\r\n\t\t-- \r\n\t\t-- NOT ISNULL(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT(DCTSType,TaxSurchargeObjectName)),TO_INTEGER(:LKP.LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT(DCTSType,TaxSurchargeObjectName)),\r\n\t\t-- \r\n\t\t-- TaxSurchargeObjectName='DC_WC_State',1,\r\n\t\t-- TaxSurchargeObjectName='DC_Location' AND NumOfLine>=1 AND INSTR(DCTSType,v_LineTypeFormatted)>0,1,\r\n\t\t-- 0\r\n\t\t-- )\n\t\tDECODE(TRUE,\n\t\t\tEntityType = 'taxAppliedTo', 0,\n\t\t\tTaxSurchargeObjectName = 'DC_Location' AND ( INSTR(DCTSType, 'CollectionFee') > 0 OR INSTR(DCTSType, 'Surcharge') > 0 ) AND DCTSType <> 'MNFirefighterReliefFundSurcharge', 0,\n\t\t\tTaxSurchargeObjectName = 'DC_Location' AND ( INSTR(DCTSType, 'Total') > 0 ), 0,\n\t\t\tTaxSurchargeObjectName = 'DC_Line' AND DCTSType = 'MNFirefighterReliefFundSurcharge' AND NOT LKP_ARCHDCTAXSURCHARGESTAGING_SessionId.SessionId IS NULL, 0,\n\t\t\tNOT LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE_DCTSType.RuleResult IS NULL, TO_INTEGER(LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE_DCTSType.RuleResult),\n\t\t\tNOT LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE_DCTSType_LineType.RuleResult IS NULL, TO_INTEGER(LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE_DCTSType_LineType.RuleResult),\n\t\t\tNOT LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT_DCTSType_TaxSurchargeObjectName.RuleResult IS NULL, TO_INTEGER(LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT_DCTSType_TaxSurchargeObjectName.RuleResult),\n\t\t\tTaxSurchargeObjectName = 'DC_WC_State', 1,\n\t\t\tTaxSurchargeObjectName = 'DC_Location' AND NumOfLine >= 1 AND INSTR(DCTSType, v_LineTypeFormatted) > 0, 1,\n\t\t\t0) AS o_FilterFlag,\n\t\tDCTranTransactionDate,\n\t\tPurpose AS i_Purpose,\n\t\t-- *INF*: IIF(ISNULL(i_Purpose) or IS_SPACES(i_Purpose) or LENGTH(i_Purpose)=0,'N/A', LTRIM(RTRIM (i_Purpose))) \n\t\tIFF(i_Purpose IS NULL OR IS_SPACES(i_Purpose) OR LENGTH(i_Purpose) = 0, 'N/A', LTRIM(RTRIM(i_Purpose))) AS v_Purpose,\n\t\t-- *INF*: LTRIM(RTRIM(v_Purpose))\n\t\tLTRIM(RTRIM(v_Purpose)) AS o_Purpose,\n\t\tAccountingDate AS CreatedDate,\n\t\tIterationId,\n\t\t-- *INF*: TRUNC(CreatedDate,'MM')\r\n\t\t-- \r\n\t\t-- --- Using the CreatedDate from the WorkDCTDataRepairPolicy table we are determing the AccountingDate\n\t\tTRUNC(CreatedDate, 'MM') AS AccountingDate,\n\t\tRestateRepair,\n\t\tCoverageGUID\n\t\tFROM IN_PassThroughChargeMapplet\n\t\tLEFT JOIN LKP_ARCHDCTAXSURCHARGESTAGING LKP_ARCHDCTAXSURCHARGESTAGING_SessionId\n\t\tON LKP_ARCHDCTAXSURCHARGESTAGING_SessionId.SessionId = SessionId\n\t\n\t\tLEFT JOIN LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE_DCTSType\n\t\tON LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPE_DCTSType.ElementValue = DCTSType\n\t\n\t\tLEFT JOIN LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE_DCTSType_LineType\n\t\tON LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE_DCTSType_LineType.ElementValue = DCTSType\n\t\tAND LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDLINETYPE_DCTSType_LineType.AttributeValue = LineType\n\t\n\t\tLEFT JOIN LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT_DCTSType_TaxSurchargeObjectName\n\t\tON LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT_DCTSType_TaxSurchargeObjectName.ElementValue = DCTSType\n\t\tAND LKP_SUPPASSTHROUGHMAP_PREFILTER_BYTYPEANDOBJECT_DCTSType_TaxSurchargeObjectName.AttributeValue = TaxSurchargeObjectName\n\t\n\t),\n\tFIL_Passthrough AS (\n\t\tSELECT\n\t\tSessionId, \n\t\tLineType, \n\t\tId, \n\t\tPolicyEffectiveDate, \n\t\tLineOfBusiness, \n\t\tTType, \n\t\tTEffectiveDate, \n\t\tTCreatedDate, \n\t\tTExpirationDate, \n\t\tLocationNumber, \n\t\tCustomerNum, \n\t\tPolicyVersion, \n\t\tTaxSurchargeObjectName, \n\t\tTaxSurchargeId, \n\t\tDCTSType, \n\t\tWritten, \n\t\tAmount, \n\t\tChange, \n\t\tCode, \n\t\tChangeAttr, \n\t\tWrittenAttr, \n\t\tEntityType, \n\t\tGeoTaxCityTaxPercent, \n\t\tGeoTaxCountyTaxPercent, \n\t\tState, \n\t\tDCPSTWritten, \n\t\tTerritory, \n\t\tLocationXmlId, \n\t\tPolicyNumber, \n\t\tLocationId, \n\t\to_LineTypeFormatted AS LineTypeFormatted, \n\t\to_FilterFlag AS FilterFlag, \n\t\tDCTranTransactionDate, \n\t\to_Purpose AS Purpose, \n\t\tIterationId, \n\t\tAccountingDate, \n\t\tRestateRepair, \n\t\tCoverageGUID\n\t\tFROM EXP_PassThrough\n\t\tWHERE FilterFlag=1 \r\n\t---and NOT ISNULL(AccountingDate)\n\t),\n\tEXP_CleanInput AS (\n\t\tSELECT\n\t\tSessionId,\n\t\tLineType AS in_DCLineType,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_DCLineType)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_DCLineType) AS o_DCLineType,\n\t\tId AS in_Id,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Id)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Id) AS o_Id,\n\t\tPolicyEffectiveDate AS in_PolicyEffectiveDate,\n\t\t-- *INF*: :UDF.DEFAULT_DATE_TO_21001231(in_PolicyEffectiveDate)\n\t\t:UDF.DEFAULT_DATE_TO_21001231(in_PolicyEffectiveDate) AS o_PolicyEffectiveDate,\n\t\tTType AS in_Type,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Type)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Type) AS o_Type,\n\t\tTEffectiveDate AS in_EffectiveDate,\n\t\t-- *INF*: :UDF.DEFAULT_DATE_TO_21001231(in_EffectiveDate)\n\t\t:UDF.DEFAULT_DATE_TO_21001231(in_EffectiveDate) AS o_EffectiveDate,\n\t\tTCreatedDate AS in_CreatedDate,\n\t\t-- *INF*: IIF(ISNULL(in_CreatedDate),TO_DATE('2100-12-31 23:59:59.000','YYYY-MM-DD HH24:MI:SS.MS'),in_CreatedDate)\n\t\tIFF(in_CreatedDate IS NULL, TO_DATE('2100-12-31 23:59:59.000', 'YYYY-MM-DD HH24:MI:SS.MS'), in_CreatedDate) AS v_CreatedDate,\n\t\tv_CreatedDate AS o_CreatedDate,\n\t\tTExpirationDate AS in_ExpirationDate,\n\t\t-- *INF*: :UDF.DEFAULT_DATE_TO_21001231(in_ExpirationDate)\n\t\t:UDF.DEFAULT_DATE_TO_21001231(in_ExpirationDate) AS o_ExpirationDate,\n\t\tLocationNumber AS in_LocationNumber,\n\t\t-- *INF*: IIF(ISNULL(in_LocationNumber) or IS_SPACES(in_LocationNumber) or LENGTH(in_LocationNumber)=0,'0000', LPAD(LTRIM(RTRIM (in_LocationNumber)), 4, '0')) \n\t\tIFF(in_LocationNumber IS NULL OR IS_SPACES(in_LocationNumber) OR LENGTH(in_LocationNumber) = 0, '0000', LPAD(LTRIM(RTRIM(in_LocationNumber)), 4, '0')) AS o_LocationNumber,\n\t\tPolicyVersion AS in_PolicyVersion,\n\t\t-- *INF*: IIF(ISNULL(in_PolicyVersion),'00',LPAD(TO_CHAR(in_PolicyVersion),2,'0'))\n\t\tIFF(in_PolicyVersion IS NULL, '00', LPAD(TO_CHAR(in_PolicyVersion), 2, '0')) AS o_PolicyVersion,\n\t\tTaxSurchargeObjectName AS in_TaxSurchargeObjectName,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_TaxSurchargeObjectName)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_TaxSurchargeObjectName) AS o_TaxSurchargeObjectName,\n\t\tTaxSurchargeId AS in_TaxSurchargeId,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_TaxSurchargeId)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_TaxSurchargeId) AS o_TaxSurchargeId,\n\t\tDCTSType AS in_DCTSType,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_DCTSType)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_DCTSType) AS o_DCTSType,\n\t\tAmount AS in_Amount,\n\t\t-- *INF*: IIF(ISNULL(in_Amount), 0, in_Amount)\n\t\tIFF(in_Amount IS NULL, 0, in_Amount) AS o_Amount,\n\t\tChange AS in_Change,\n\t\t-- *INF*: IIF(ISNULL(in_Change), 0, in_Change)\n\t\tIFF(in_Change IS NULL, 0, in_Change) AS o_Change,\n\t\tCode AS in_Code,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Code)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Code) AS o_Code,\n\t\tChangeAttr AS in_ChangeAttr,\n\t\t-- *INF*: IIF(ISNULL(in_ChangeAttr), 0, in_ChangeAttr)\n\t\tIFF(in_ChangeAttr IS NULL, 0, in_ChangeAttr) AS o_ChangeAttr,\n\t\tWrittenAttr AS in_WrittenAttr,\n\t\t-- *INF*: IIF(ISNULL(in_WrittenAttr), 0, in_WrittenAttr)\n\t\tIFF(in_WrittenAttr IS NULL, 0, in_WrittenAttr) AS o_WrittenAttr,\n\t\tEntityType AS in_EntityType,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_EntityType)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_EntityType) AS o_EntityType,\n\t\tGeoTaxCityTaxPercent AS in_GeoTaxCityTaxPercent,\n\t\t-- *INF*: IIF(ISNULL(in_GeoTaxCityTaxPercent), 0, TO_DECIMAL(in_GeoTaxCityTaxPercent))\n\t\tIFF(in_GeoTaxCityTaxPercent IS NULL, 0, TO_DECIMAL(in_GeoTaxCityTaxPercent)) AS o_GeoTaxCityTaxPercent,\n\t\tGeoTaxCountyTaxPercent AS in_GeoTaxCountyTaxPercent,\n\t\t-- *INF*: IIF(ISNULL(in_GeoTaxCountyTaxPercent), 0, TO_DECIMAL(in_GeoTaxCountyTaxPercent))\n\t\tIFF(in_GeoTaxCountyTaxPercent IS NULL, 0, TO_DECIMAL(in_GeoTaxCountyTaxPercent)) AS o_GeoTaxCountyTaxPercent,\n\t\tState AS in_State,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_State)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_State) AS o_State,\n\t\tDCPSTWritten AS in_DCPSTWritten,\n\t\t-- *INF*: IIF(ISNULL(in_DCPSTWritten), 0, in_DCPSTWritten)\n\t\tIFF(in_DCPSTWritten IS NULL, 0, in_DCPSTWritten) AS o_DCPSTWritten,\n\t\tTerritory AS in_Territory,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_Territory)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_Territory) AS o_Territory,\n\t\tLocationXmlId AS in_LocationXmlId,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_LocationXmlId)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_LocationXmlId) AS o_LocationXmlId,\n\t\tPolicyNumber AS in_PolicyNumber,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PolicyNumber)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PolicyNumber) AS o_PolicyNumber,\n\t\tLocationId,\n\t\tLineTypeFormatted,\n\t\tDCTranTransactionDate AS in_DCTranTransactionDate,\n\t\t-- *INF*: IIF(ISNULL(in_DCTranTransactionDate),v_CreatedDate,in_DCTranTransactionDate)\n\t\tIFF(in_DCTranTransactionDate IS NULL, v_CreatedDate, in_DCTranTransactionDate) AS o_TransactionDate,\n\t\tPurpose AS in_Purpose,\n\t\t-- *INF*: IIF(in_Purpose!='Offset',ltrim(rtrim(in_Purpose)),'Deprecated')\n\t\tIFF(in_Purpose != 'Offset', ltrim(rtrim(in_Purpose)), 'Deprecated') AS o_Purpose,\n\t\tAccountingDate,\n\t\tIterationId,\n\t\tRestateRepair,\n\t\tCoverageGUID\n\t\tFROM FIL_Passthrough\n\t),\n\tLKP_SupPassThroughChargeMap_TransAmount_NoState_Entity AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tin_EntityType,\n\t\tElementValue,\n\t\tAttributeValue\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='TransAmount' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='EntityType' AND\r\n\t\t\tMAP.StateAbbrev='N/A' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_DCTTaxCode AS (\n\t\tSELECT\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tRuleResult\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='DCTTaxCode' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='Combine' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StateAbbrev,ElementValue ORDER BY StateAbbrev) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_TaxPercentRate AS (\n\t\tSELECT\n\t\tAttributeValue,\n\t\tRuleResult,\n\t\tElementValue\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='TaxPercentRate' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='TaxPercentRate' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue ORDER BY AttributeValue) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_TransAmount AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tStateAbbrev,\n\t\tElementValue,\n\t\tAttributeValue\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='TransAmount' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='Objectname' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY StateAbbrev,ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_TransAmount_NoState_Object AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tElementValue,\n\t\tAttributeValue\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='TransAmount' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey ='Objectname' AND\r\n\t\t\tMAP.StateAbbrev='N/A' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_FullTaxAmount AS (\n\t\tSELECT\n\t\tRuleResult,\n\t\tElementValue,\n\t\tAttributeValue\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='FullTaxAmount' AND\r\n\t\t\tMAP.ElementKey='DCTSType' AND\r\n\t\t\tMAP.AttributeKey='EntityType' AND\r\n\t\t\tMAP.RuleCondition=0\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY RuleResult) = 1\n\t),\n\tEXP_Check_LkpSupPassThroughMap_Outputs AS (\n\t\tSELECT\n\t\tLKP_SupPassThroughChargeMap_FullTaxAmount.RuleResult AS FullTaxAmount_Result,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(FullTaxAmount_Result)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(FullTaxAmount_Result) AS o_FullTaxAmount_Result,\n\t\tLKP_SupPassThroughChargeMap_DCTTaxCode.RuleResult AS DCTTaxCode_Result,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(DCTTaxCode_Result)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(DCTTaxCode_Result) AS o_DCTTaxCode_Result,\n\t\tLKP_SupPassThroughChargeMap_TransAmount.RuleResult AS TransAmount_Result,\n\t\tLKP_SupPassThroughChargeMap_TransAmount_NoState_Object.RuleResult AS TransAmount_NoState_Object_Result,\n\t\tLKP_SupPassThroughChargeMap_TransAmount_NoState_Entity.RuleResult AS TransAmount_NoState_Entity_Result,\n\t\t-- *INF*: Decode(True,\r\n\t\t-- NOT ISNULL(TransAmount_Result), :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_Result),\r\n\t\t-- NOT ISNULL(TransAmount_NoState_Entity_Result), :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_NoState_Entity_Result),\r\n\t\t-- NOT ISNULL(TransAmount_NoState_Object_Result), :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_NoState_Object_Result),\r\n\t\t-- 'N/A')\n\t\tDecode(True,\n\t\t\tNOT TransAmount_Result IS NULL, :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_Result),\n\t\t\tNOT TransAmount_NoState_Entity_Result IS NULL, :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_NoState_Entity_Result),\n\t\t\tNOT TransAmount_NoState_Object_Result IS NULL, :UDF.DEFAULT_VALUE_FOR_STRINGS(TransAmount_NoState_Object_Result),\n\t\t\t'N/A') AS o_TransAmount_Result,\n\t\tLKP_SupPassThroughChargeMap_TaxPercentRate.AttributeValue AS TaxPercentRate_Type,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(TaxPercentRate_Type)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(TaxPercentRate_Type) AS o_TaxPercentRate_Type,\n\t\tLKP_SupPassThroughChargeMap_TaxPercentRate.RuleResult AS TaxPercentRate_Result,\n\t\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(TaxPercentRate_Result)\n\t\t:UDF.DEFAULT_VALUE_FOR_STRINGS(TaxPercentRate_Result) AS o_TaxPercentRate_Result\n\t\tFROM \n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_DCTTaxCode\n\t\tON LKP_SupPassThroughChargeMap_DCTTaxCode.StateAbbrev = EXP_CleanInput.o_State AND LKP_SupPassThroughChargeMap_DCTTaxCode.ElementValue = EXP_CleanInput.o_DCTSType\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_FullTaxAmount\n\t\tON LKP_SupPassThroughChargeMap_FullTaxAmount.ElementValue = EXP_CleanInput.o_DCTSType AND LKP_SupPassThroughChargeMap_FullTaxAmount.AttributeValue != EXP_CleanInput.o_EntityType\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_TaxPercentRate\n\t\tON LKP_SupPassThroughChargeMap_TaxPercentRate.ElementValue = EXP_CleanInput.o_DCTSType\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_TransAmount\n\t\tON LKP_SupPassThroughChargeMap_TransAmount.StateAbbrev = EXP_CleanInput.o_State AND LKP_SupPassThroughChargeMap_TransAmount.ElementValue = EXP_CleanInput.o_DCTSType AND LKP_SupPassThroughChargeMap_TransAmount.AttributeValue = EXP_CleanInput.o_TaxSurchargeObjectName\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_TransAmount_NoState_Entity\n\t\tON LKP_SupPassThroughChargeMap_TransAmount_NoState_Entity.ElementValue = EXP_CleanInput.o_DCTSType AND LKP_SupPassThroughChargeMap_TransAmount_NoState_Entity.AttributeValue = EXP_CleanInput.o_EntityType\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_TransAmount_NoState_Object\n\t\tON LKP_SupPassThroughChargeMap_TransAmount_NoState_Object.ElementValue = EXP_CleanInput.o_DCTSType AND LKP_SupPassThroughChargeMap_TransAmount_NoState_Object.AttributeValue = EXP_CleanInput.o_TaxSurchargeObjectName\n\t),\n\tAGG_RemoveDuplicates AS (\n\t\tSELECT\n\t\tEXP_CleanInput.SessionId,\n\t\tEXP_CleanInput.o_Id AS Id,\n\t\tEXP_CleanInput.o_DCLineType AS DCLineType,\n\t\tEXP_CleanInput.o_PolicyEffectiveDate AS PolicyEffectiveDate,\n\t\tEXP_CleanInput.o_Type AS Type,\n\t\tEXP_CleanInput.o_EffectiveDate AS EffectiveDate,\n\t\tEXP_CleanInput.o_CreatedDate AS CreatedDate,\n\t\tEXP_CleanInput.o_ExpirationDate AS ExpirationDate,\n\t\tEXP_CleanInput.o_LocationNumber AS LocationNumber,\n\t\tEXP_CleanInput.o_PolicyVersion AS PolicyVersion,\n\t\tEXP_CleanInput.o_TaxSurchargeObjectName AS TaxSurchargeObjectName,\n\t\tEXP_CleanInput.o_TaxSurchargeId AS TaxSurchargeId,\n\t\tEXP_CleanInput.o_DCTSType AS DCTSType,\n\t\tEXP_CleanInput.o_Amount AS Amount,\n\t\tEXP_CleanInput.o_Change AS in_Change,\n\t\tEXP_CleanInput.o_Code AS Code,\n\t\tEXP_CleanInput.o_ChangeAttr AS ChangeAttr,\n\t\tEXP_CleanInput.o_WrittenAttr AS WrittenAttr,\n\t\tEXP_CleanInput.o_EntityType AS EntityType,\n\t\tEXP_CleanInput.o_GeoTaxCityTaxPercent AS in_GeoTaxCityTaxPercent,\n\t\tEXP_CleanInput.o_GeoTaxCountyTaxPercent AS in_GeoTaxCountyTaxPercent,\n\t\tEXP_CleanInput.o_State AS in_State,\n\t\tEXP_CleanInput.o_DCPSTWritten AS DCPSTWritten,\n\t\tEXP_CleanInput.o_Territory AS Territory,\n\t\tEXP_CleanInput.o_LocationXmlId AS LocationXmlId,\n\t\tEXP_CleanInput.o_PolicyNumber AS PolicyNumber,\n\t\tEXP_CleanInput.LocationId,\n\t\tEXP_CleanInput.LineTypeFormatted,\n\t\tEXP_CleanInput.o_TransactionDate AS TranTransactionDate,\n\t\tEXP_CleanInput.o_Purpose AS Purpose,\n\t\tEXP_CleanInput.AccountingDate AS in_AccountingDate,\n\t\tEXP_Check_LkpSupPassThroughMap_Outputs.o_FullTaxAmount_Result AS FullTaxAmount_Result,\n\t\tEXP_Check_LkpSupPassThroughMap_Outputs.o_DCTTaxCode_Result AS DCTTaxCode_Result,\n\t\tEXP_Check_LkpSupPassThroughMap_Outputs.o_TransAmount_Result AS TransAmount_Result,\n\t\tEXP_Check_LkpSupPassThroughMap_Outputs.o_TaxPercentRate_Type AS TaxPercentRate_Type,\n\t\tEXP_Check_LkpSupPassThroughMap_Outputs.o_TaxPercentRate_Result AS TaxPercentRate_Result,\n\t\t-- *INF*: LAST(LAST_DAY(SET_DATE_PART(\r\n\t\t--     SET_DATE_PART(\r\n\t\t--          SET_DATE_PART(\r\n\t\t--                      SET_DATE_PART(\r\n\t\t--                             in_AccountingDate\r\n\t\t--                    , 'HH', 23) \r\n\t\t--            ,'MI',59)\r\n\t\t--     ,'SS',59)\r\n\t\t-- ,'MS', 000))\r\n\t\t-- )\n\t\tLAST(LAST_DAY(SET_DATE_PART(SET_DATE_PART(SET_DATE_PART(SET_DATE_PART(in_AccountingDate, 'HH', 23), 'MI', 59), 'SS', 59), 'MS', 000))) AS out_PassThroughChargeTransactionBookedDate,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- TransAmount_Result !='N/A' AND TransAmount_Result='ChangeAttr', ChangeAttr,\r\n\t\t-- TransAmount_Result !='N/A' AND TransAmount_Result='Change', in_Change,\r\n\t\t-- ChangeAttr\r\n\t\t-- )\r\n\t\t-- \n\t\tDECODE(TRUE,\n\t\t\tTransAmount_Result != 'N/A' AND TransAmount_Result = 'ChangeAttr', ChangeAttr,\n\t\t\tTransAmount_Result != 'N/A' AND TransAmount_Result = 'Change', in_Change,\n\t\t\tChangeAttr) AS out_PassThroughChargeTransactionAmount,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- FullTaxAmount_Result = 'City_X_WrittenAttr', in_GeoTaxCityTaxPercent * WrittenAttr,\r\n\t\t-- FullTaxAmount_Result = 'County_X_WrittenAttr', in_GeoTaxCountyTaxPercent * WrittenAttr,\r\n\t\t-- 0)\r\n\t\t-- \r\n\t\t-- \n\t\tDECODE(TRUE,\n\t\t\tFullTaxAmount_Result = 'City_X_WrittenAttr', in_GeoTaxCityTaxPercent * WrittenAttr,\n\t\t\tFullTaxAmount_Result = 'County_X_WrittenAttr', in_GeoTaxCountyTaxPercent * WrittenAttr,\n\t\t\t0) AS out_FullTaxAmount,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- TaxPercentRate_Type='Rate', TO_DECIMAL(TaxPercentRate_Result,3),\r\n\t\t-- TaxPercentRate_Type='City',in_GeoTaxCityTaxPercent,\r\n\t\t-- TaxPercentRate_Type='County',in_GeoTaxCountyTaxPercent,\r\n\t\t-- 0.000)\r\n\t\t-- \n\t\tDECODE(TRUE,\n\t\t\tTaxPercentRate_Type = 'Rate', TO_DECIMAL(TaxPercentRate_Result, 3),\n\t\t\tTaxPercentRate_Type = 'City', in_GeoTaxCityTaxPercent,\n\t\t\tTaxPercentRate_Type = 'County', in_GeoTaxCountyTaxPercent,\n\t\t\t0.000) AS out_TaxPercentageRate,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- DCLineType='WorkersCompensation' AND TaxSurchargeObjectName= 'DC_WC_State' AND DCTTaxCode_Result != 'N/A', DCTTaxCode_Result,\r\n\t\t-- DCTSType)\n\t\tDECODE(TRUE,\n\t\t\tDCLineType = 'WorkersCompensation' AND TaxSurchargeObjectName = 'DC_WC_State' AND DCTTaxCode_Result != 'N/A', DCTTaxCode_Result,\n\t\t\tDCTSType) AS out_DCTTaxCode,\n\t\t-- *INF*: LTRIM(RTRIM(REPLACESTR(0,DCTSType,'TaxCity','TaxCounty','')))\n\t\tLTRIM(RTRIM(REPLACESTR(0, DCTSType, 'TaxCity', 'TaxCounty', ''))) AS out_DCTaxSurchargeType,\n\t\tEXP_CleanInput.IterationId,\n\t\tEXP_CleanInput.RestateRepair,\n\t\tEXP_CleanInput.CoverageGUID\n\t\tFROM EXP_Check_LkpSupPassThroughMap_Outputs\n\t\t -- Manually join with EXP_CleanInput\n\t\tGROUP BY CreatedDate, TaxSurchargeId, Purpose\n\t),\n\tLKP_TotalAnnualPremiumSubjectToTax AS (\n\t\tSELECT\n\t\tChangeAttr,\n\t\tSessionId,\n\t\tObjectId,\n\t\tObjectName,\n\t\tType,\n\t\tLineType\n\t\tFROM (\n\t\t\tselect a.SessionId as SessionId,\r\n\t\t\ta.ObjectId as ObjectId,\r\n\t\t\ta.ObjectName as ObjectName,\r\n\t\t\ta.type as Type,\r\n\t\t\tLTRIM(RTRIM(REPLACE(a.Type,'KYMunicipal',''))) as LineType,\r\n\t\t\tb.ChangeAttr as ChangeAttr\r\n\t\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DCTaxSurchargeStaging a\r\n\t\t\tjoin @{pipeline().parameters.SOURCE_TABLE_OWNER}.WBTaxSurchargeStage b\r\n\t\t\ton a.SessionId=b.SessionId\r\n\t\t\tand a.TaxSurchargeId=b.TaxSurchargeId\r\n\t\t\tand b.EntityType='taxAppliedTo'\r\n\t\t\tand a.ObjectName='DC_Location'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,ObjectId,ObjectName,Type,LineType ORDER BY ChangeAttr) = 1\n\t),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tAGG_RemoveDuplicates.Id AS in_Id,\n\t\tAGG_RemoveDuplicates.DCLineType AS in_DCLineType,\n\t\tAGG_RemoveDuplicates.PolicyEffectiveDate AS in_PolicyEffectiveDate,\n\t\tAGG_RemoveDuplicates.Type AS in_Type,\n\t\tAGG_RemoveDuplicates.EffectiveDate AS in_EffectiveDate,\n\t\tAGG_RemoveDuplicates.CreatedDate AS in_TransactionDate,\n\t\tAGG_RemoveDuplicates.ExpirationDate AS in_ExpirationDate,\n\t\tAGG_RemoveDuplicates.LocationNumber,\n\t\tAGG_RemoveDuplicates.PolicyVersion AS in_PolicyVersion,\n\t\tAGG_RemoveDuplicates.TaxSurchargeObjectName,\n\t\tAGG_RemoveDuplicates.TaxSurchargeId,\n\t\tAGG_RemoveDuplicates.DCTSType AS in_DCTSType,\n\t\tAGG_RemoveDuplicates.Amount AS in_FullTermPremium,\n\t\tAGG_RemoveDuplicates.Code AS in_ReasonAmendedCode,\n\t\tAGG_RemoveDuplicates.ChangeAttr AS in_ChangeAttr,\n\t\tAGG_RemoveDuplicates.WrittenAttr AS in_WrittenAttr,\n\t\tAGG_RemoveDuplicates.EntityType AS in_EntityType,\n\t\tAGG_RemoveDuplicates.DCPSTWritten AS in_DCPSTWritten,\n\t\tAGG_RemoveDuplicates.Territory,\n\t\tAGG_RemoveDuplicates.LocationXmlId,\n\t\tAGG_RemoveDuplicates.PolicyNumber AS in_PolicyNumber,\n\t\tAGG_RemoveDuplicates.TranTransactionDate AS in_EnteredDate,\n\t\tAGG_RemoveDuplicates.Purpose AS in_Purpose,\n\t\tAGG_RemoveDuplicates.out_PassThroughChargeTransactionBookedDate AS in_PassThroughChargeTransactionBookedDate,\n\t\tAGG_RemoveDuplicates.out_PassThroughChargeTransactionAmount AS in_PassThroughChargeTransactionAmount,\n\t\tAGG_RemoveDuplicates.out_FullTaxAmount AS in_FullTaxAmount,\n\t\tAGG_RemoveDuplicates.out_TaxPercentageRate AS in_TaxPercentageRate,\n\t\tAGG_RemoveDuplicates.out_DCTTaxCode AS DCTTaxCode,\n\t\tLKP_TotalAnnualPremiumSubjectToTax.ChangeAttr AS lkp_ChangeAttr,\n\t\t-- *INF*: in_Id||in_PolicyVersion\r\n\t\t-- \r\n\t\t-- \r\n\t\t-- \r\n\t\t-- --in_CustomerNumber||in_PolicyNumber||in_PolicyVersion\n\t\tin_Id || in_PolicyVersion AS v_PolicyKey_old,\n\t\tin_PolicyNumber||in_PolicyVersion AS v_PolicyKey_new,\n\t\t-- *INF*: --New RisklocationKey based on UID project\r\n\t\t-- --in_LocationNumber ||'~'|| in_Territory||'~'|| in_LocationXmlId\r\n\t\t-- --v_PolicyKey_old||in_LocationNumber || in_Territory || in_LocationXmlId\n\t\t'' AS v_RiskLocationKey,\n\t\t-- *INF*: --in_ClassCode   ||','|| \r\n\t\t-- --in_SublineCode   ||','|| \r\n\t\t-- --in_LineOfBusiness   ||','|| \r\n\t\t-- --TO_CHAR(in_EffectiveDate)  ||','|| \r\n\t\t-- --TO_CHAR(in_ExpirationDate)   ||','|| \r\n\t\t-- --TO_CHAR(in_CommissionPercentage)   ||','||   \r\n\t\t-- --TO_CHAR(in_Exposure)   ||','|| \r\n\t\t-- --in_CoverageForm   ||','|| \r\n\t\t-- --v_RiskLocationKey ||','|| \r\n\t\t-- --in_DCLineType   ||','|| \r\n\t\t-- --TO_CHAR(in_PolicyEffectiveDate)  ||','||\r\n\t\t-- --in_RiskType\n\t\t'' AS v_tmp,\n\t\t-- *INF*: IIF(in_Purpose!='Deprecated',in_PassThroughChargeTransactionAmount,-1*in_PassThroughChargeTransactionAmount)\n\t\tIFF(in_Purpose != 'Deprecated', in_PassThroughChargeTransactionAmount, - 1 * in_PassThroughChargeTransactionAmount) AS v_PassThroughChargeTransactionAmount,\n\t\t-- *INF*: IIF(in_Purpose!='Deprecated',in_FullTermPremium,-1*in_FullTermPremium)\n\t\tIFF(in_Purpose != 'Deprecated', in_FullTermPremium, - 1 * in_FullTermPremium) AS v_FullTermPremium,\n\t\tv_PolicyKey_new AS out_PolicyKey,\n\t\tv_RiskLocationKey AS out_RiskLocationKey,\n\t\tin_PolicyEffectiveDate AS out_PolicyEffectiveDate,\n\t\tin_Type AS out_Type,\n\t\tin_TransactionDate AS out_TransactionDate,\n\t\tin_EnteredDate AS out_EnteredDate,\n\t\tin_EffectiveDate AS out_EffectiveDate,\n\t\tin_ExpirationDate AS out_ExpirationDate,\n\t\t-- *INF*: IIF(ISNULL(in_PassThroughChargeTransactionBookedDate), TO_DATE('1800-01-01', 'YYYY-MM-DD'), in_PassThroughChargeTransactionBookedDate)\r\n\t\t-- \r\n\t\t-- --There is a possibility that no match is found in the lookup LKP_WorkDCTInBalancePolicy. So we have to do regular null check and assign a default date '1800-01-01' to pass the job first and then investigate why and correct the data.\n\t\tIFF(in_PassThroughChargeTransactionBookedDate IS NULL, TO_DATE('1800-01-01', 'YYYY-MM-DD'), in_PassThroughChargeTransactionBookedDate) AS out_PassThroughChargeTransactionBookedDate,\n\t\tv_PassThroughChargeTransactionAmount AS out_PassThroughChargeTransactionAmount,\n\t\tv_FullTermPremium AS out_FullTermPremium,\n\t\tin_FullTaxAmount AS out_FullTaxAmount,\n\t\tin_TaxPercentageRate AS out_TaxPercentageRate,\n\t\tin_ReasonAmendedCode AS out_ReasonAmendedCode,\n\t\tin_DCLineType AS out_InsuranceLine,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- in_DCTSType='KYPremiumSurcharge', in_DCPSTWritten,\r\n\t\t-- in_DCTSType='KYCollectionFee', 0,  --Waiting for feedback from Steven Davis, hard code as 0 for now\r\n\t\t-- IIF(ISNULL(lkp_ChangeAttr),0,lkp_ChangeAttr))\n\t\tDECODE(TRUE,\n\t\t\tin_DCTSType = 'KYPremiumSurcharge', in_DCPSTWritten,\n\t\t\tin_DCTSType = 'KYCollectionFee', 0,\n\t\t\tIFF(lkp_ChangeAttr IS NULL, 0, lkp_ChangeAttr)) AS out_TotalAnnualPremiumSubjectToTax,\n\t\tin_DCTSType AS out_DCTSType,\n\t\tin_EntityType AS out_EntityType,\n\t\tin_Purpose AS out_Purpose,\n\t\tAGG_RemoveDuplicates.IterationId,\n\t\tAGG_RemoveDuplicates.RestateRepair,\n\t\tAGG_RemoveDuplicates.CoverageGUID\n\t\tFROM AGG_RemoveDuplicates\n\t\tLEFT JOIN LKP_TotalAnnualPremiumSubjectToTax\n\t\tON LKP_TotalAnnualPremiumSubjectToTax.SessionId = AGG_RemoveDuplicates.SessionId AND LKP_TotalAnnualPremiumSubjectToTax.ObjectId = AGG_RemoveDuplicates.LocationId AND LKP_TotalAnnualPremiumSubjectToTax.ObjectName = AGG_RemoveDuplicates.TaxSurchargeObjectName AND LKP_TotalAnnualPremiumSubjectToTax.Type = AGG_RemoveDuplicates.out_DCTaxSurchargeType AND LKP_TotalAnnualPremiumSubjectToTax.LineType = AGG_RemoveDuplicates.LineTypeFormatted\n\t),\n\tLKP_policy AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tSupSurchargeExemptID,\n\t\tin_PolicyKey,\n\t\tpol_key\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tpol_ak_id,\n\t\t\t\tSupSurchargeExemptID,\n\t\t\t\tin_PolicyKey,\n\t\t\t\tpol_key\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\n\t\t\tWHERE crrnt_snpsht_flag = 1 AND source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id) = 1\n\t),\n\tEXP_RiskLocationKey AS (\n\t\tSELECT\n\t\tEXP_Values.LocationNumber,\n\t\tEXP_Values.LocationXmlId AS in_LocationXmlId,\n\t\tLKP_policy.pol_ak_id AS i_pol_ak_id,\n\t\t-- *INF*: IIF(ISNULL(i_pol_ak_id), -1, i_pol_ak_id)\n\t\tIFF(i_pol_ak_id IS NULL, - 1, i_pol_ak_id) AS v_pol_ak_id,\n\t\tv_pol_ak_id||'~'||in_LocationXmlId AS o_RisklocationKey,\n\t\tEXP_Values.Territory\n\t\tFROM EXP_Values\n\t\tLEFT JOIN LKP_policy\n\t\tON LKP_policy.pol_key = EXP_Values.out_PolicyKey\n\t),\n\tExp_RiskLocationAKID_population AS (\n\t\tSELECT\n\t\to_RisklocationKey AS i_RiskLocationKey,\n\t\tLocationNumber AS i_LocationNumber,\n\t\tTerritory AS i_Territory,\n\t\t-- *INF*: IIF(ISNULL(i_RatingCoverage_RiskLocationAKID),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY(i_RiskLocationKey,i_LocationNumber,i_Territory),i_RatingCoverage_RiskLocationAKID)\n\t\tIFF(i_RatingCoverage_RiskLocationAKID IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskLocationAKID, i_RatingCoverage_RiskLocationAKID) AS v_RiskLocationAKID_RiskKey_Location_Territory,\n\t\t-- *INF*: IIF(ISNULL(v_RiskLocationAKID_RiskKey_Location_Territory),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM(i_RiskLocationKey,i_LocationNumber),v_RiskLocationAKID_RiskKey_Location_Territory)\n\t\tIFF(v_RiskLocationAKID_RiskKey_Location_Territory IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.RiskLocationAKID, v_RiskLocationAKID_RiskKey_Location_Territory) AS v_RiskLocationAKID_RiskKey_Location,\n\t\t-- *INF*: IIF(ISNULL(v_RiskLocationAKID_RiskKey_Location),:LKP.LKP_RISKLOCATION_RISKLOCATIONKEY(i_RiskLocationKey),v_RiskLocationAKID_RiskKey_Location)\n\t\tIFF(v_RiskLocationAKID_RiskKey_Location IS NULL, LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey.RiskLocationAKID, v_RiskLocationAKID_RiskKey_Location) AS v_RiskLocationAKID_RiskKey,\n\t\t-- *INF*: iif(isnull(v_RiskLocationAKID_RiskKey),-1,v_RiskLocationAKID_RiskKey)\n\t\tIFF(v_RiskLocationAKID_RiskKey IS NULL, - 1, v_RiskLocationAKID_RiskKey) AS o_RiskLocationAKID\n\t\tFROM EXP_RiskLocationKey\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskLocationKey = i_RiskLocationKey\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.LocationUnitNumber = i_LocationNumber\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_TERRITORY_i_RiskLocationKey_i_LocationNumber_i_Territory.RiskTerritory = i_Territory\n\t\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.RiskLocationKey = i_RiskLocationKey\n\t\tAND LKP_RISKLOCATION_RISKLOCATIONKEY_LOCNUM_i_RiskLocationKey_i_LocationNumber.LocationUnitNumber = i_LocationNumber\n\t\n\t\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONKEY LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey\n\t\tON LKP_RISKLOCATION_RISKLOCATIONKEY_i_RiskLocationKey.RiskLocationKey = i_RiskLocationKey\n\t\n\t),\n\tLKP_RiskLocation AS (\n\t\tSELECT\n\t\tRiskLocationAKID,\n\t\tStateProvinceCode\n\t\tFROM (\n\t\t\tSELECT RL.RiskLocationAKID as RiskLocationAKID, RL.StateProvinceCode as StateProvinceCode\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation RL \r\n\t\t\tWHERE RL.SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND RL.CurrentSnapshotFlag=1 AND\r\n\t\t\tRL.PolicyAKId in (\r\n\t\t\tselect pol_ak_id from @{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy pol\r\n\t\t\twhere exists (\r\n\t\t\tselect 1 from @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy DCP\r\n\t\t\twhere DCP.PolicyNumber=pol.pol_num\r\n\t\t\tand ISNULL(RIGHT('00'+convert(varchar(3),DCP.PolicyVersion),2),'00')=pol.pol_mod)\r\n\t\t\tand pol.crrnt_snpsht_flag=1)\r\n\t\t\t---\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RiskLocationAKID ORDER BY RiskLocationAKID) = 1\n\t),\n\tEXP_MD5 AS (\n\t\tSELECT\n\t\tLKP_policy.pol_ak_id AS in_pol_ak_id,\n\t\tLKP_policy.SupSurchargeExemptID AS in_SupSurchargeExemptID,\n\t\tLKP_RiskLocation.RiskLocationAKID AS in_RiskLocationAKID,\n\t\tEXP_Values.DCTTaxCode AS in_DCTTaxCode,\n\t\tEXP_Values.TaxSurchargeId AS in_TaxSurchargeId,\n\t\tEXP_Values.out_PolicyEffectiveDate AS in_PolicyEffectiveDate,\n\t\tEXP_Values.out_InsuranceLine AS in_InsuranceLine,\n\t\tEXP_Values.TaxSurchargeObjectName AS in_TaxSurchargeObjectName,\n\t\tEXP_Values.out_DCTSType AS in_DCTSType,\n\t\t-- *INF*: substr(in_DCTTaxCode,1,2)\r\n\t\t-- \r\n\t\t-- -- change this to DCTTaxCode because we want both the passed in DCTSType values that get assigned to DCTTaxCode and the cases where DCTTaxCode has appended States which should all be in DCTTaxCode\n\t\tsubstr(in_DCTTaxCode, 1, 2) AS o_DCTSTypeStateAbbrev,\n\t\tEXP_Values.out_Type AS Type,\n\t\tEXP_Values.out_TransactionDate AS TransactionDate,\n\t\tEXP_Values.out_EnteredDate AS EnteredDate,\n\t\tEXP_Values.out_EffectiveDate AS EffectiveDate,\n\t\tEXP_Values.out_ExpirationDate AS ExpirationDate,\n\t\tEXP_Values.out_PassThroughChargeTransactionBookedDate AS PassThroughChargeTransactionBookedDate,\n\t\tEXP_Values.out_PassThroughChargeTransactionAmount AS PassThroughChargeTransactionAmount,\n\t\tEXP_Values.out_FullTermPremium AS FullTermPremium,\n\t\tEXP_Values.out_FullTaxAmount AS FullTaxAmount,\n\t\tEXP_Values.out_TaxPercentageRate AS TaxPercentageRate,\n\t\tEXP_Values.out_ReasonAmendedCode AS ReasonAmendedCode,\n\t\tEXP_Values.out_TotalAnnualPremiumSubjectToTax AS TotalAnnualPremiumSubjectToTax,\n\t\t-- *INF*: IIF(ISNULL(in_pol_ak_id),-1,in_pol_ak_id)\n\t\tIFF(in_pol_ak_id IS NULL, - 1, in_pol_ak_id) AS v_pol_ak_id,\n\t\t-- *INF*: IIF(ISNULL(in_SupSurchargeExemptID),-1,in_SupSurchargeExemptID)\n\t\tIFF(in_SupSurchargeExemptID IS NULL, - 1, in_SupSurchargeExemptID) AS v_SupSurchargeExemptID,\n\t\t-- *INF*: IIF(ISNULL(in_RiskLocationAKID) ,\r\n\t\t-- -1,in_RiskLocationAKID)\n\t\tIFF(in_RiskLocationAKID IS NULL, - 1, in_RiskLocationAKID) AS v_RiskLocationAKID,\n\t\t-- *INF*: MD5(in_TaxSurchargeId||\r\n\t\t-- TO_CHAR(TransactionDate))\n\t\tMD5(in_TaxSurchargeId || TO_CHAR(TransactionDate)) AS v_PassThroughChargeTransactionHashKey,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- PassThroughChargeTransactionAmount<0 AND in_PolicyEffectiveDate=EffectiveDate AND Type='Cancel', 'ReturnFull', \r\n\t\t-- PassThroughChargeTransactionAmount<0, 'Return',\r\n\t\t-- 'Add')\n\t\tDECODE(TRUE,\n\t\t\tPassThroughChargeTransactionAmount < 0 AND in_PolicyEffectiveDate = EffectiveDate AND Type = 'Cancel', 'ReturnFull',\n\t\t\tPassThroughChargeTransactionAmount < 0, 'Return',\n\t\t\t'Add') AS v_PremPlusMinusDescription,\n\t\tLKP_RiskLocation.StateProvinceCode,\n\t\t1 AS out_DuplicateSequence,\n\t\tv_PassThroughChargeTransactionHashKey AS out_PassThroughChargeTransactionHashKey,\n\t\tv_RiskLocationAKID AS out_RiskLocationAKID,\n\t\tv_pol_ak_id AS out_PolicyAKID,\n\t\t-- *INF*: MD5(TO_CHAR(v_pol_ak_id) || \r\n\t\t-- TO_CHAR(v_RiskLocationAKID) || \r\n\t\t-- in_InsuranceLine||\r\n\t\t-- TO_CHAR(in_PolicyEffectiveDate))\n\t\tMD5(TO_CHAR(v_pol_ak_id) || TO_CHAR(v_RiskLocationAKID) || in_InsuranceLine || TO_CHAR(in_PolicyEffectiveDate)) AS out_PolicyCoverageHashKey,\n\t\tv_SupSurchargeExemptID AS out_SupSurchargeExemptID,\n\t\tType AS out_prem_trans_code,\n\t\tv_PremPlusMinusDescription AS out_PremPlusMinusDescription,\n\t\tin_DCTTaxCode AS out_DCTTaxCode,\n\t\tEXP_Values.out_EntityType AS EntityType,\n\t\tEXP_Values.out_Purpose AS Purpose,\n\t\tEXP_Values.IterationId,\n\t\t-- *INF*: IIF(RestateRepair='Restate',IterationId + 1,IterationId)\n\t\tIFF(RestateRepair = 'Restate', IterationId + 1, IterationId) AS LoadSequence,\n\t\tEXP_Values.RestateRepair,\n\t\t'N/A' AS DefaultString,\n\t\tEXP_Values.CoverageGUID\n\t\tFROM EXP_Values\n\t\tLEFT JOIN LKP_RiskLocation\n\t\tON LKP_RiskLocation.RiskLocationAKID = Exp_RiskLocationAKID_population.o_RiskLocationAKID\n\t\tLEFT JOIN LKP_policy\n\t\tON LKP_policy.pol_key = EXP_Values.out_PolicyKey\n\t),\n\tLKP_PassThroughChargeTransaction_Restate AS (\n\t\tSELECT\n\t\tPassThroughChargeTransactionAKID,\n\t\tPassThroughChargeTransactionHashKey,\n\t\tDuplicateSequence,\n\t\tOffsetOnsetCode,\n\t\tLoadSequence,\n\t\tNegateRestateCode\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tPassThroughChargeTransactionAKID,\n\t\t\t\tPassThroughChargeTransactionHashKey,\n\t\t\t\tDuplicateSequence,\n\t\t\t\tOffsetOnsetCode,\n\t\t\t\tLoadSequence,\n\t\t\t\tNegateRestateCode\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PassThroughChargeTransaction\n\t\t\tWHERE CurrentSnapshotFlag = 1 AND SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PassThroughChargeTransactionHashKey,DuplicateSequence,OffsetOnsetCode,LoadSequence,NegateRestateCode ORDER BY PassThroughChargeTransactionAKID DESC) = 1\n\t),\n\tLKP_PassThroughChargeTransaction AS (\n\t\tSELECT\n\t\tPassThroughChargeTransactionAKID,\n\t\tPassThroughChargeTransactionHashKey,\n\t\tDuplicateSequence,\n\t\tOffsetOnsetCode\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tPassThroughChargeTransactionAKID,\n\t\t\t\tPassThroughChargeTransactionHashKey,\n\t\t\t\tDuplicateSequence,\n\t\t\t\tOffsetOnsetCode\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PassThroughChargeTransaction\n\t\t\tWHERE CurrentSnapshotFlag = 1 AND SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' \r\n\t\t\tAND NegateRestateCode not in ('PremiumChange') -- To make sure that we load True Offset records created in IDO due to deprecation (PROD-14950), added condition on NegateRestateCode\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PassThroughChargeTransactionHashKey,DuplicateSequence,OffsetOnsetCode ORDER BY PassThroughChargeTransactionAKID) = 1\n\t),\n\tLKP_PolicyCoverageAKID AS (\n\t\tSELECT\n\t\tPolicyCoverageAKID,\n\t\tPolicyCoverageHashKey\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tPolicyCoverageAKID,\n\t\t\t\tPolicyCoverageHashKey\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t\t\tWHERE CurrentSnapshotFlag=1 and SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageHashKey ORDER BY PolicyCoverageAKID) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode AS (\n\t\tSELECT\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tRuleResult,\n\t\tin_NA,\n\t\tStateProvinceCode\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='FilterRule' AND\r\n\t\t\tMAP.ElementKey='StateProvinceCode' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue,AttributeKey ORDER BY StateAbbrev) = 1\n\t),\n\tLKP_PassThroughChargeTransaction_DataRepair AS (\n\t\tSELECT\n\t\tPassThroughChargeTransactionAKID,\n\t\tPassThroughChargeTransactionAmount,\n\t\tPassThroughChargeTransactionHashKey,\n\t\tOffsetOnsetCode\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tPassThroughChargeTransactionAKID,\n\t\t\t\tPassThroughChargeTransactionAmount,\n\t\t\t\tPassThroughChargeTransactionHashKey,\n\t\t\t\tOffsetOnsetCode\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PassThroughChargeTransaction\n\t\t\tWHERE CurrentSnapshotFlag = 1 AND SourceSystemID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}' AND AuditID<0\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PassThroughChargeTransactionHashKey,OffsetOnsetCode ORDER BY PassThroughChargeTransactionAKID) = 1\n\t),\n\tLKP_SupPassThroughChargeType AS (\n\t\tSELECT\n\t\tSupPassThroughChargeTypeID,\n\t\tDCTTaxCode\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tSupPassThroughChargeTypeID,\n\t\t\t\tDCTTaxCode\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupPassThroughChargeType\n\t\t\tWHERE CurrentSnapshotFlag='1' AND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY DCTTaxCode ORDER BY SupPassThroughChargeTypeID) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_FilterRule_StateAbbrev AS (\n\t\tSELECT\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tRuleResult,\n\t\tin_NA,\n\t\tin_DCTSTypeStateAbbrev\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='FilterRule' AND\r\n\t\t\tMAP.ElementKey='DCTSTypeStateAbbrev' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue,AttributeKey ORDER BY StateAbbrev) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode_InsuranceLine AS (\n\t\tSELECT\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tRuleResult,\n\t\tin_InsuranceLine,\n\t\tin_StateProvinceCode\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='FilterRule' AND\r\n\t\t\tMAP.ElementKey='StateProvinceCode' AND\r\n\t\t\tMAP.AttributeKey='InsuranceLine' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY StateAbbrev) = 1\n\t),\n\tLKP_RatingCoverage AS (\n\t\tSELECT\n\t\tRatingCoverageAKID,\n\t\tPolicyAKID,\n\t\tCoverageGUID,\n\t\tEffectiveDate\n\t\tFROM (\n\t\t\tSELECT RC.RatingCoverageAKID as RatingCoverageAKID, \r\n\t\t\tPC.PolicyAKID as PolicyAKID, \r\n\t\t\tRC.CoverageGUID as CoverageGUID,\r\n\t\t\tRC.EffectiveDate as EffectiveDate\r\n\t\t\tFROM RatingCoverage RC \r\n\t\t\tINNER JOIN PolicyCoverage PC on PC.PolicyCoverageAKID = RC.PolicyCoverageAKID and PC.CurrentSnapshotFlag = 1\r\n\t\t\tINNER JOIN V2.policy P on P.pol_ak_id = PC.PolicyAKID and P.crrnt_snpsht_flag =1\r\n\t\t\tINNER JOIN @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkDCTPolicy WCT ON WCT.PolicyNumber = P.pol_num AND ISNULL(RIGHT('00' + convert(VARCHAR(3), WCT.PolicyVersion), 2), '00') = P.pol_mod\r\n\t\t\tWHERE PC.InsuranceLine = 'WorkersCompensation'\r\n\t\t\tORDER BY RC.CoverageGUID,RC.EffectiveDate\r\n\t\t\t--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,CoverageGUID,EffectiveDate ORDER BY RatingCoverageAKID) = 1\n\t),\n\tLKP_sup_premium_transaction_code AS (\n\t\tSELECT\n\t\tsup_prem_trans_code_id,\n\t\tprem_trans_code,\n\t\tPremiumPlusMinusDescription\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tsup_prem_trans_code_id,\n\t\t\t\tprem_trans_code,\n\t\t\t\tPremiumPlusMinusDescription\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_premium_transaction_code\n\t\t\tWHERE crrnt_snpsht_flag='1' AND source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY prem_trans_code,PremiumPlusMinusDescription ORDER BY sup_prem_trans_code_id) = 1\n\t),\n\tLKP_SupPassThroughChargeMap_FilterRule_StateAbbrev_InsuranceLine AS (\n\t\tSELECT\n\t\tStateAbbrev,\n\t\tRecordType,\n\t\tElementKey,\n\t\tElementValue,\n\t\tAttributeKey,\n\t\tAttributeValue,\n\t\tRuleCondition,\n\t\tRuleResult,\n\t\tin_InsuranceLine,\n\t\tin_DCTSTypeStateAbbrev\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tMAP.RecordType as RecordType, \r\n\t\t\tMAP.ElementKey as ElementKey, \r\n\t\t\tMAP.AttributeKey as AttributeKey, \r\n\t\t\tMAP.AttributeValue as AttributeValue, \r\n\t\t\tMAP.RuleCondition as RuleCondition, \r\n\t\t\tMAP.RuleResult as RuleResult, \r\n\t\t\tMAP.StateAbbrev as StateAbbrev, \r\n\t\t\tMAP.ElementValue as ElementValue \r\n\t\t\tFROM \r\n\t\t\tSupPassThroughChargeMap MAP\r\n\t\t\tWHERE\r\n\t\t\tMAP.RecordType='FilterRule' AND\r\n\t\t\tMAP.ElementKey='DCTSTypeStateAbbrev' AND\r\n\t\t\tMAP.AttributeKey='InsuranceLine' AND\r\n\t\t\tMAP.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ElementValue,AttributeValue ORDER BY StateAbbrev) = 1\n\t),\n\tEXP_ApplyFilterRule AS (\n\t\tSELECT\n\t\tLKP_SupPassThroughChargeMap_FilterRule_StateAbbrev_InsuranceLine.RuleResult AS lkp_FilterRule_StateAbbrev_InsuranceLine,\n\t\tLKP_SupPassThroughChargeMap_FilterRule_StateAbbrev.RuleResult AS lkp_FilterRule_StateAbbrev,\n\t\tLKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode.RuleResult AS lkp_FilterRule_StateProvenceCode,\n\t\tLKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode_InsuranceLine.RuleResult AS lkp_FilterRule_StateProvenceCode_InsuranceLine,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- NOT ISNULL(lkp_FilterRule_StateProvenceCode_InsuranceLine), TO_INTEGER(lkp_FilterRule_StateProvenceCode_InsuranceLine),\r\n\t\t-- NOT ISNULL(lkp_FilterRule_StateProvenceCode), TO_INTEGER(lkp_FilterRule_StateProvenceCode),\r\n\t\t-- NOT ISNULL(lkp_FilterRule_StateAbbrev_InsuranceLine),TO_INTEGER(lkp_FilterRule_StateAbbrev_InsuranceLine),\r\n\t\t-- NOT ISNULL(lkp_FilterRule_StateAbbrev), TO_INTEGER(lkp_FilterRule_StateAbbrev),\r\n\t\t-- 0)\r\n\t\t-- \r\n\t\t-- -- hierarchy of rules -- StateProvenceCode (numeric) values first, then parsed StateAbbrev (text) \n\t\tDECODE(TRUE,\n\t\t\tNOT lkp_FilterRule_StateProvenceCode_InsuranceLine IS NULL, TO_INTEGER(lkp_FilterRule_StateProvenceCode_InsuranceLine),\n\t\t\tNOT lkp_FilterRule_StateProvenceCode IS NULL, TO_INTEGER(lkp_FilterRule_StateProvenceCode),\n\t\t\tNOT lkp_FilterRule_StateAbbrev_InsuranceLine IS NULL, TO_INTEGER(lkp_FilterRule_StateAbbrev_InsuranceLine),\n\t\t\tNOT lkp_FilterRule_StateAbbrev IS NULL, TO_INTEGER(lkp_FilterRule_StateAbbrev),\n\t\t\t0) AS v_FilterRule,\n\t\tv_FilterRule AS FilterRule\n\t\tFROM \n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev\n\t\tON LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev.ElementValue = EXP_MD5.o_DCTSTypeStateAbbrev AND LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev.AttributeValue = EXP_MD5.DefaultString AND LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev.AttributeKey = EXP_MD5.DefaultString\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev_InsuranceLine\n\t\tON LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev_InsuranceLine.ElementValue = EXP_MD5.o_DCTSTypeStateAbbrev AND LKP_SupPassThroughChargeMap_FilterRule_StateAbbrev_InsuranceLine.AttributeValue = EXP_MD5.in_InsuranceLine\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode\n\t\tON LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode.ElementValue = EXP_MD5.StateProvinceCode AND LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode.AttributeValue = EXP_MD5.DefaultString AND LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode.AttributeKey = EXP_MD5.DefaultString\n\t\tLEFT JOIN LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode_InsuranceLine\n\t\tON LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode_InsuranceLine.ElementValue = EXP_MD5.StateProvinceCode AND LKP_SupPassThroughChargeMap_FilterRule_StateProvenceCode_InsuranceLine.AttributeValue = EXP_MD5.in_InsuranceLine\n\t),\n\tLKP_RatingCoverage_SupPassThroughMap AS (\n\t\tSELECT\n\t\tModInsuranceLine,\n\t\tin_InsuranceLine,\n\t\tPolicyCoverageAKID,\n\t\tInsuranceLine\n\t\tFROM (\n\t\t\tSELECT Distinct\r\n\t\t\tRC.PolicyCoverageAKID as PolicyCoverageAKID,\r\n\t\t\tMap.ElementValue as InsuranceLine,\r\n\t\t\tMap.RuleResult as ModInsuranceLine\r\n\t\t\tFROM \r\n\t\t\tRatingCoverage RC\r\n\t\t\tinner join SupPassThroughChargeMap Map on RC.CoverageForm=Map.AttributeValue\r\n\t\t\tWhere\r\n\t\t\tMap.RecordType='LgtLobOverride' and Map.ElementKey='InsuranceLine' and Map.AttributeKey='CoverageForm'\r\n\t\t\tand Map.RuleCondition=1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageAKID,InsuranceLine ORDER BY ModInsuranceLine) = 1\n\t),\n\tEXP_EvaluatePassThroughLookupResponse AS (\n\t\tSELECT\n\t\tLKP_PassThroughChargeTransaction.PassThroughChargeTransactionAKID AS i_PassThroughChargeTransactionAKID,\n\t\tLKP_PassThroughChargeTransaction_Restate.PassThroughChargeTransactionAKID AS i_PassThroughChargeTransactionAKID_Restate,\n\t\tLKP_PassThroughChargeTransaction_DataRepair.PassThroughChargeTransactionAKID AS i_PassThroughChargeTransactionAKID_DataRepair,\n\t\tLKP_PassThroughChargeTransaction_DataRepair.PassThroughChargeTransactionAmount AS i_PassThroughChargeTransactionAmount_DataRepair,\n\t\tEXP_MD5.PassThroughChargeTransactionAmount AS i_PassThroughChargeTransactionAmount,\n\t\tEXP_MD5.RestateRepair,\n\t\tEXP_MD5.Purpose,\n\t\t-- *INF*: Decode(True,\r\n\t\t-- RestateRepair='Restate',i_PassThroughChargeTransactionAKID_Restate,\r\n\t\t-- RestateRepair='PremiumChange' and Purpose !='Onset', i_PassThroughChargeTransactionAKID_DataRepair,\r\n\t\t-- i_PassThroughChargeTransactionAKID\r\n\t\t-- )\r\n\t\t-- \r\n\t\t-- -- PremiumChange check needed  because onsets will not return values\n\t\tDecode(True,\n\t\t\tRestateRepair = 'Restate', i_PassThroughChargeTransactionAKID_Restate,\n\t\t\tRestateRepair = 'PremiumChange' AND Purpose != 'Onset', i_PassThroughChargeTransactionAKID_DataRepair,\n\t\t\ti_PassThroughChargeTransactionAKID) AS v_PassThroughChargeTransactionAKID,\n\t\t-- *INF*: Decode(True,\r\n\t\t-- RestateRepair='Restate',i_PassThroughChargeTransactionAmount,\r\n\t\t-- RestateRepair='PremiumChange' and Purpose !='Onset', i_PassThroughChargeTransactionAmount_DataRepair,\r\n\t\t-- i_PassThroughChargeTransactionAmount\r\n\t\t-- )\r\n\t\t-- \r\n\t\t-- -- PremiumChange check needed  because onsets will not return values\n\t\tDecode(True,\n\t\t\tRestateRepair = 'Restate', i_PassThroughChargeTransactionAmount,\n\t\t\tRestateRepair = 'PremiumChange' AND Purpose != 'Onset', i_PassThroughChargeTransactionAmount_DataRepair,\n\t\t\ti_PassThroughChargeTransactionAmount) AS v_PassThroughChargeTransactionAmount,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- RestateRepair='PremiumChange' AND ISNULL(i_PassThroughChargeTransactionAKID_DataRepair),'Y',\r\n\t\t-- RestateRepair='PremiumChange' AND i_PassThroughChargeTransactionAmount_DataRepair<>i_PassThroughChargeTransactionAmount,'Y',\r\n\t\t-- 'N'\r\n\t\t-- )\n\t\tDECODE(TRUE,\n\t\t\tRestateRepair = 'PremiumChange' AND i_PassThroughChargeTransactionAKID_DataRepair IS NULL, 'Y',\n\t\t\tRestateRepair = 'PremiumChange' AND i_PassThroughChargeTransactionAmount_DataRepair <> i_PassThroughChargeTransactionAmount, 'Y',\n\t\t\t'N') AS v_RepairChangeFlag,\n\t\tv_PassThroughChargeTransactionAKID AS o_PassThroughChargeTransactionAKID,\n\t\tv_PassThroughChargeTransactionAmount AS o_PassThroughChargeTransactionAmount,\n\t\tv_RepairChangeFlag AS o_RepairChangeFlag\n\t\tFROM EXP_MD5\n\t\tLEFT JOIN LKP_PassThroughChargeTransaction\n\t\tON LKP_PassThroughChargeTransaction.PassThroughChargeTransactionHashKey = EXP_MD5.out_PassThroughChargeTransactionHashKey AND LKP_PassThroughChargeTransaction.DuplicateSequence = EXP_MD5.out_DuplicateSequence AND LKP_PassThroughChargeTransaction.OffsetOnsetCode = EXP_MD5.Purpose\n\t\tLEFT JOIN LKP_PassThroughChargeTransaction_DataRepair\n\t\tON LKP_PassThroughChargeTransaction_DataRepair.PassThroughChargeTransactionHashKey = EXP_MD5.out_PassThroughChargeTransactionHashKey AND LKP_PassThroughChargeTransaction_DataRepair.OffsetOnsetCode = EXP_MD5.Purpose\n\t\tLEFT JOIN LKP_PassThroughChargeTransaction_Restate\n\t\tON LKP_PassThroughChargeTransaction_Restate.PassThroughChargeTransactionHashKey = EXP_MD5.out_PassThroughChargeTransactionHashKey AND LKP_PassThroughChargeTransaction_Restate.DuplicateSequence = EXP_MD5.out_DuplicateSequence AND LKP_PassThroughChargeTransaction_Restate.OffsetOnsetCode = EXP_MD5.Purpose AND LKP_PassThroughChargeTransaction_Restate.LoadSequence = EXP_MD5.LoadSequence AND LKP_PassThroughChargeTransaction_Restate.NegateRestateCode = EXP_MD5.RestateRepair\n\t),\n\tEXP_Insuranceline_CoverageForm_Check AS (\n\t\tSELECT\n\t\tModInsuranceLine,\n\t\tin_InsuranceLine AS InsuranceLine,\n\t\t-- *INF*: IIF(NOT ISNULL(ModInsuranceLine),ModInsuranceLine,InsuranceLine)\n\t\tIFF(NOT ModInsuranceLine IS NULL, ModInsuranceLine, InsuranceLine) AS o_InsurancelIne\n\t\tFROM LKP_RatingCoverage_SupPassThroughMap\n\t),\n\tLKP_SupLGTLineOfInsurance AS (\n\t\tSELECT\n\t\tSupLGTLineOfInsuranceId,\n\t\tLGTLineOfInsuranceCode\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tSupLGTLineOfInsuranceId,\n\t\t\t\tLGTLineOfInsuranceCode\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.SupLGTLineOfInsurance\n\t\t\tWHERE CurrentSnapshotFlag = 1 AND SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY LGTLineOfInsuranceCode ORDER BY SupLGTLineOfInsuranceId) = 1\n\t),\n\tEXP_Detect_Changes AS (\n\t\tSELECT\n\t\tEXP_MD5.out_DuplicateSequence AS in_DuplicateSequence,\n\t\tEXP_MD5.out_PassThroughChargeTransactionHashKey AS in_PassThroughChargeTransactionHashKey,\n\t\tEXP_MD5.in_TaxSurchargeObjectName,\n\t\tEXP_MD5.in_DCTSType,\n\t\tEXP_MD5.Type AS in_Type,\n\t\tEXP_MD5.EnteredDate AS in_PassThroughChargeTransactionEnteredDate,\n\t\tEXP_MD5.EffectiveDate AS in_PassThroughChargeTransactionEffectiveDate,\n\t\tEXP_MD5.ExpirationDate AS in_PassThroughChargeTransactionExpirationDate,\n\t\tEXP_MD5.PassThroughChargeTransactionBookedDate AS in_PassThroughChargeTransactionBookedDate,\n\t\tEXP_EvaluatePassThroughLookupResponse.o_PassThroughChargeTransactionAmount AS in_PassThroughChargeTransactionAmount,\n\t\tEXP_MD5.FullTermPremium AS in_FullTermPremium,\n\t\tEXP_MD5.FullTaxAmount AS in_FullTaxAmount,\n\t\tEXP_MD5.TaxPercentageRate AS in_TaxPercentageRate,\n\t\tEXP_MD5.ReasonAmendedCode AS in_ReasonAmendedCode,\n\t\tEXP_MD5.TotalAnnualPremiumSubjectToTax AS in_TotalAnnualPremiumSubjectToTax,\n\t\tEXP_MD5.out_RiskLocationAKID AS in_RiskLocationAKID,\n\t\tEXP_MD5.out_PolicyAKID AS in_PolicyAKID,\n\t\tLKP_SupLGTLineOfInsurance.SupLGTLineOfInsuranceId AS in_SupLGTLineOfInsuranceId,\n\t\tLKP_PolicyCoverageAKID.PolicyCoverageAKID AS in_PolicyCoverageAKID,\n\t\tEXP_MD5.out_SupSurchargeExemptID AS in_SupSurchargeExemptID,\n\t\tLKP_sup_premium_transaction_code.sup_prem_trans_code_id AS in_sup_prem_trans_code_id,\n\t\tEXP_MD5.out_DCTTaxCode AS in_DCTTaxCode,\n\t\tLKP_SupPassThroughChargeType.SupPassThroughChargeTypeID AS in_SupPassThroughChargeTypeID,\n\t\tEXP_MD5.StateProvinceCode AS in_StateProvinceCode,\n\t\tEXP_MD5.in_InsuranceLine,\n\t\tEXP_MD5.EntityType AS in_EntityType,\n\t\tEXP_MD5.Purpose,\n\t\tEXP_EvaluatePassThroughLookupResponse.o_PassThroughChargeTransactionAKID AS PassThroughChargeTransactionAKID,\n\t\t-- *INF*: IIF(ISNULL(in_sup_prem_trans_code_id), -1, in_sup_prem_trans_code_id)\n\t\tIFF(in_sup_prem_trans_code_id IS NULL, - 1, in_sup_prem_trans_code_id) AS v_sup_prem_trans_code_id,\n\t\t-- *INF*: IIF(ISNULL(in_SupPassThroughChargeTypeID), -1, in_SupPassThroughChargeTypeID)\n\t\tIFF(in_SupPassThroughChargeTypeID IS NULL, - 1, in_SupPassThroughChargeTypeID) AS v_SupPassThroughChargeTypeID,\n\t\t-- *INF*: IIF(ISNULL(in_SupLGTLineOfInsuranceId),-1,in_SupLGTLineOfInsuranceId)\n\t\tIFF(in_SupLGTLineOfInsuranceId IS NULL, - 1, in_SupLGTLineOfInsuranceId) AS v_SupLGTLineOfInsuranceId,\n\t\tEXP_EvaluatePassThroughLookupResponse.o_RepairChangeFlag AS ChangeFlag,\n\t\tEXP_ApplyFilterRule.FilterRule AS AdditionalFilter,\n\t\t'1' AS out_CurrentSnapshotFlag,\n\t\t-- *INF*: TO_DATE('01/01/1800 00:00:00','MM/DD/YYYY HH24:MI:SS')\n\t\tTO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') AS out_EffectiveDate,\n\t\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\t\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS out_ExpirationDate,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS out_SourceSystemID,\n\t\tSYSDATE AS out_CreateDate,\n\t\tSYSDATE AS out_ModifiedDate,\n\t\t0 AS out_logicalIndicator,\n\t\t'1' AS out_LogicalDeleteFlag,\n\t\tin_DuplicateSequence AS out_DuplicateSequence,\n\t\tin_PassThroughChargeTransactionHashKey AS out_PassThroughChargeTransactionHashKey,\n\t\tin_Type AS out_Type,\n\t\tin_PassThroughChargeTransactionEnteredDate AS out_PassThroughChargeTransactionEnteredDate,\n\t\tin_PassThroughChargeTransactionEffectiveDate AS out_PassThroughChargeTransactionEffectiveDate,\n\t\tin_PassThroughChargeTransactionExpirationDate AS out_PassThroughChargeTransactionExpirationDate,\n\t\tin_PassThroughChargeTransactionBookedDate AS out_PassThroughChargeTransactionBookedDate,\n\t\tin_PassThroughChargeTransactionAmount AS out_PassThroughChargeTransactionAmount,\n\t\tin_FullTermPremium AS out_FullTermPremium,\n\t\tin_FullTaxAmount AS out_FullTaxAmount,\n\t\tin_TaxPercentageRate AS out_TaxPercentageRate,\n\t\t-- *INF*: IIF(ISNULL(in_ReasonAmendedCode),'N/A',in_ReasonAmendedCode)\n\t\tIFF(in_ReasonAmendedCode IS NULL, 'N/A', in_ReasonAmendedCode) AS out_ReasonAmendedCode,\n\t\tv_sup_prem_trans_code_id AS out_sup_prem_trans_code_id,\n\t\t-- *INF*: IIF( ISNULL(in_RiskLocationAKID) or (IN(in_DCTSType,'KYPremiumSurcharge','KYCollectionFee') AND IN(in_TaxSurchargeObjectName,'DC_Policy')),-1, in_RiskLocationAKID)\n\t\tIFF(in_RiskLocationAKID IS NULL OR ( IN(in_DCTSType, 'KYPremiumSurcharge', 'KYCollectionFee') AND IN(in_TaxSurchargeObjectName, 'DC_Policy') ), - 1, in_RiskLocationAKID) AS out_RiskLocationAKID,\n\t\tin_PolicyAKID AS out_PolicyAKID,\n\t\tv_SupLGTLineOfInsuranceId AS out_SupLGTLineOfInsuranceId,\n\t\t-- *INF*: IIF( ISNULL(in_PolicyCoverageAKID) or (IN(in_DCTSType,'KYPremiumSurcharge','KYCollectionFee') AND IN(in_TaxSurchargeObjectName,'DC_Policy')),-1, in_PolicyCoverageAKID)\n\t\tIFF(in_PolicyCoverageAKID IS NULL OR ( IN(in_DCTSType, 'KYPremiumSurcharge', 'KYCollectionFee') AND IN(in_TaxSurchargeObjectName, 'DC_Policy') ), - 1, in_PolicyCoverageAKID) AS out_PolicyCoverageAKID,\n\t\tin_SupSurchargeExemptID AS out_SupSurchargeExemptID,\n\t\tv_SupPassThroughChargeTypeID AS out_SupPassThroughChargeTypeID,\n\t\tin_TotalAnnualPremiumSubjectToTax AS out_TotalAnnualPremiumSubjectToTax,\n\t\tin_TaxSurchargeObjectName AS out_TaxSurchargeObjectName,\n\t\t-- *INF*: LTRIM(RTRIM(in_DCTTaxCode))\n\t\tLTRIM(RTRIM(in_DCTTaxCode)) AS out_DCTTaxCode,\n\t\tPurpose AS out_Purpose,\n\t\tEXP_MD5.LoadSequence,\n\t\tEXP_MD5.RestateRepair,\n\t\tLKP_RatingCoverage.RatingCoverageAKID,\n\t\t-- *INF*: IIF(ISNULL(RatingCoverageAKID),-1,RatingCoverageAKID)\n\t\tIFF(RatingCoverageAKID IS NULL, - 1, RatingCoverageAKID) AS O_RatingCoverageAKID\n\t\tFROM EXP_ApplyFilterRule\n\t\t -- Manually join with EXP_EvaluatePassThroughLookupResponse\n\t\t -- Manually join with EXP_MD5\n\t\tLEFT JOIN LKP_PolicyCoverageAKID\n\t\tON LKP_PolicyCoverageAKID.PolicyCoverageHashKey = EXP_MD5.out_PolicyCoverageHashKey\n\t\tLEFT JOIN LKP_RatingCoverage\n\t\tON LKP_RatingCoverage.PolicyAKID = EXP_MD5.out_PolicyAKID AND LKP_RatingCoverage.CoverageGUID = EXP_MD5.CoverageGUID AND LKP_RatingCoverage.EffectiveDate = EXP_MD5.EnteredDate\n\t\tLEFT JOIN LKP_SupLGTLineOfInsurance\n\t\tON LKP_SupLGTLineOfInsurance.LGTLineOfInsuranceCode = EXP_Insuranceline_CoverageForm_Check.o_InsurancelIne\n\t\tLEFT JOIN LKP_SupPassThroughChargeType\n\t\tON LKP_SupPassThroughChargeType.DCTTaxCode = EXP_MD5.out_DCTTaxCode\n\t\tLEFT JOIN LKP_sup_premium_transaction_code\n\t\tON LKP_sup_premium_transaction_code.prem_trans_code = EXP_MD5.out_prem_trans_code AND LKP_sup_premium_transaction_code.PremiumPlusMinusDescription = EXP_MD5.out_PremPlusMinusDescription\n\t),\n\tFIL_Insert_rows AS (\n\t\tSELECT\n\t\tPassThroughChargeTransactionAKID, \n\t\tAdditionalFilter, \n\t\tout_CurrentSnapshotFlag AS CurrentSnapshotFlag, \n\t\tout_EffectiveDate AS EffectiveDate, \n\t\tout_ExpirationDate AS ExpirationDate, \n\t\tout_SourceSystemID AS SourceSystemID, \n\t\tout_CreateDate AS CreateDate, \n\t\tout_ModifiedDate AS ModifiedDate, \n\t\tout_logicalIndicator AS logicalIndicator, \n\t\tout_LogicalDeleteFlag AS LogicalDeleteFlag, \n\t\tout_DuplicateSequence AS DuplicateSequence, \n\t\tout_PassThroughChargeTransactionHashKey AS PassThroughChargeTransactionHashKey, \n\t\tout_Type AS Type, \n\t\tout_PassThroughChargeTransactionEnteredDate AS PassThroughChargeTransactionEnteredDate, \n\t\tout_PassThroughChargeTransactionEffectiveDate AS PassThroughChargeTransactionEffectiveDate, \n\t\tout_PassThroughChargeTransactionExpirationDate AS PassThroughChargeTransactionExpirationDate, \n\t\tout_PassThroughChargeTransactionBookedDate AS PassThroughChargeTransactionBookedDate, \n\t\tout_PassThroughChargeTransactionAmount AS PassThroughChargeTransactionAmount, \n\t\tout_FullTermPremium AS FullTermPremium, \n\t\tout_FullTaxAmount AS FullTaxAmount, \n\t\tout_TaxPercentageRate AS TaxPercentageRate, \n\t\tout_ReasonAmendedCode AS ReasonAmendedCode, \n\t\tout_sup_prem_trans_code_id AS sup_prem_trans_code_id, \n\t\tout_RiskLocationAKID AS RiskLocationAKID, \n\t\tout_PolicyAKID AS PolicyAKID, \n\t\tout_SupLGTLineOfInsuranceId AS SupLGTLineOfInsuranceId, \n\t\tout_PolicyCoverageAKID AS PolicyCoverageAKID, \n\t\tout_SupSurchargeExemptID AS SupSurchargeExemptID, \n\t\tout_SupPassThroughChargeTypeID AS SupPassThroughChargeTypeID, \n\t\tout_TotalAnnualPremiumSubjectToTax AS TotalAnnualPremiumSubjectToTax, \n\t\tout_TaxSurchargeObjectName AS TaxSurchargeObjectName, \n\t\tout_DCTTaxCode AS DCTTaxCode, \n\t\tout_Purpose AS Purpose, \n\t\tLoadSequence, \n\t\tRestateRepair, \n\t\tChangeFlag, \n\t\tO_RatingCoverageAKID AS RatingCoverageAKID\n\t\tFROM EXP_Detect_Changes\n\t\tWHERE DECODE(True,\r\n\tRestateRepair='PremiumChange' AND ChangeFlag='Y' AND AdditionalFilter=1, TRUE,\r\n\tRestateRepair !='PremiumChange' AND ISNULL(PassThroughChargeTransactionAKID) AND AdditionalFilter=1, TRUE,\r\n\tFALSE)\n\t),\n\tOUT_PassThroughChargeMapplet AS (\n\t\tSELECT\n\t\tPassThroughChargeTransactionAKID, \n\t\tCurrentSnapshotFlag, \n\t\tEffectiveDate, \n\t\tExpirationDate, \n\t\tSourceSystemID, \n\t\tCreateDate, \n\t\tModifiedDate, \n\t\tlogicalIndicator, \n\t\tLogicalDeleteFlag, \n\t\tDuplicateSequence, \n\t\tPassThroughChargeTransactionHashKey, \n\t\tType, \n\t\tPassThroughChargeTransactionEnteredDate, \n\t\tPassThroughChargeTransactionEffectiveDate, \n\t\tPassThroughChargeTransactionExpirationDate, \n\t\tPassThroughChargeTransactionBookedDate, \n\t\tPassThroughChargeTransactionAmount, \n\t\tFullTermPremium, \n\t\tFullTaxAmount, \n\t\tTaxPercentageRate, \n\t\tReasonAmendedCode, \n\t\tsup_prem_trans_code_id, \n\t\tRiskLocationAKID, \n\t\tPolicyAKID, \n\t\tSupLGTLineOfInsuranceId, \n\t\tPolicyCoverageAKID, \n\t\tSupSurchargeExemptID, \n\t\tSupPassThroughChargeTypeID, \n\t\tTotalAnnualPremiumSubjectToTax, \n\t\tTaxSurchargeObjectName, \n\t\tDCTTaxCode, \n\t\tPurpose, \n\t\tLoadSequence, \n\t\tRestateRepair, \n\t\tRatingCoverageAKID\n\t\tFROM FIL_Insert_rows\n\t),\n),\nEXP_Detemine_AK_ID AS (\n\tSELECT\n\tSEQ_PassThroughChargeTransactionAKID.NEXTVAL AS in_NEXTVAL,\n\tPassThroughChargeTransactionAKID AS in_PassThroughChargeTransactionAKID,\n\tCurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tlogicalIndicator,\n\tLogicalDeleteFlag,\n\tDuplicateSequence,\n\tPassThroughChargeTransactionHashKey AS PassTroughChargeTransactionHashKey,\n\t-1 AS StatisticalCoverageAKID,\n\tType,\n\tPassThroughChargeTransactionEnteredDate,\n\tPassThroughChargeTransactionEffectiveDate,\n\tPassThroughChargeTransactionExpirationDate,\n\tPassThroughChargeTransactionBookedDate,\n\tPassThroughChargeTransactionAmount,\n\tFullTermPremium,\n\tFullTaxAmount,\n\tTaxPercentageRate,\n\tReasonAmendedCode,\n\tsup_prem_trans_code_id,\n\tRiskLocationAKID,\n\tPolicyAKID,\n\tSupLGTLineOfInsuranceId,\n\tPolicyCoverageAKID,\n\tSupSurchargeExemptID,\n\tSupPassThroughChargeTypeID,\n\tTotalAnnualPremiumSubjectToTax,\n\t-- *INF*: IIF(ISNULL(in_PassThroughChargeTransactionAKID), in_NEXTVAL, in_PassThroughChargeTransactionAKID)\n\tIFF(in_PassThroughChargeTransactionAKID IS NULL, in_NEXTVAL, in_PassThroughChargeTransactionAKID) AS out_PassThroughChargeTransactionAKID,\n\tDCTTaxCode,\n\tPurpose1 AS Purpose,\n\tLoadSequence,\n\tRestateRepair1 AS NegateRestateCode,\n\tRatingCoverageAKID\n\tFROM mplt_PassThroughCharge\n),\nTGT_PassThroughChargeTransaction_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PassThroughChargeTransaction\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, LogicalDeleteFlag, DuplicateSequence, PassThroughChargeTransactionHashKey, PassThroughChargeTransactionAKID, StatisticalCoverageAKID, PassThroughChargeTransactionCode, PassThroughChargeTransactionEnteredDate, PassThroughChargeTransactionEffectiveDate, PassThroughChargeTransactionExpirationDate, PassThroughChargeTransactionBookedDate, PassThroughChargeTransactionAmount, FullTermPremium, FullTaxAmount, TaxPercentageRate, ReasonAmendedCode, PassThroughChargeTransactionCodeId, RiskLocationAKID, PolicyAKID, SupLGTLineOfInsuranceID, PolicyCoverageAKID, SupSurchargeExemptID, SupPassThroughChargeTypeID, TotalAnnualPremiumSubjectToTax, DCTTaxCode, OffsetOnsetCode, LoadSequence, NegateRestateCode, RatingCoverageAKID)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCreateDate AS CREATEDDATE, \n\tMODIFIEDDATE, \n\tlogicalIndicator AS LOGICALINDICATOR, \n\tLOGICALDELETEFLAG, \n\tDUPLICATESEQUENCE, \n\tPassTroughChargeTransactionHashKey AS PASSTHROUGHCHARGETRANSACTIONHASHKEY, \n\tout_PassThroughChargeTransactionAKID AS PASSTHROUGHCHARGETRANSACTIONAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tType AS PASSTHROUGHCHARGETRANSACTIONCODE, \n\tPASSTHROUGHCHARGETRANSACTIONENTEREDDATE, \n\tPASSTHROUGHCHARGETRANSACTIONEFFECTIVEDATE, \n\tPASSTHROUGHCHARGETRANSACTIONEXPIRATIONDATE, \n\tPASSTHROUGHCHARGETRANSACTIONBOOKEDDATE, \n\tPASSTHROUGHCHARGETRANSACTIONAMOUNT, \n\tFULLTERMPREMIUM, \n\tFULLTAXAMOUNT, \n\tTAXPERCENTAGERATE, \n\tREASONAMENDEDCODE, \n\tsup_prem_trans_code_id AS PASSTHROUGHCHARGETRANSACTIONCODEID, \n\tRISKLOCATIONAKID, \n\tPOLICYAKID, \n\tSupLGTLineOfInsuranceId AS SUPLGTLINEOFINSURANCEID, \n\tPOLICYCOVERAGEAKID, \n\tSUPSURCHARGEEXEMPTID, \n\tSUPPASSTHROUGHCHARGETYPEID, \n\tTOTALANNUALPREMIUMSUBJECTTOTAX, \n\tDCTTAXCODE, \n\tPurpose AS OFFSETONSETCODE, \n\tLOADSEQUENCE, \n\tNEGATERESTATECODE, \n\tRATINGCOVERAGEAKID\n\tFROM EXP_Detemine_AK_ID\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905491"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603272"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:44:58"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 23:03:38"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "DCT"
            },
            "EXCLUDE_TTYPE": {
                "type": "string",
                "defaultValue": "NOT IN ('RescindNonRenew','Reporting','VoidReporting','Information','Rescind','Dividend','RevisedDividend','VoidDividend','NonRenew','RescindCancelPending','CancelPending')"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}