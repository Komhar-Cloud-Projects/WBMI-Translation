{
    "name": "s_m_POL_FEED_Load_WorkWCCoverage",
    "properties": {
        "activities": [
            {
                "name": "m_POL_FEED_Load_WorkWCCoverage",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_DC_Coverage AS (\n\tSelect DT.HistoryID,\r\n\tDS.Purpose,\r\n\tDS.SessionId,\r\n\tPC.ObjectId ParentObjectId,\r\n\tPC.ObjectName ParentObjectName,\r\n\tPC.CoverageId ParentCoverageId,\r\n\tPC.Type ParentCoverageType,\r\n\tCASE WHEN DT.Type='New' and PC.Deleted <> 1 THEN '0' \r\n\tWHEN PC.Deleted = 1 THEN '1' \r\n\tWHEN WC.Indicator = 1 THEN '0' \r\n\tWHEN WC.IndicatorbValue = 1 THEN '0' \r\n\tELSE '1' END AS ParentCoverageDeleteFlag,\r\n\tcase when TAX.Type in ('SecondInjuryFund','SafetyEducationAndTrainingFund','AdministrationFund',\r\n\t'UninsuredEmployersFund','OtherTaxesAndAssessments1','StateAssessment','SecurityFundCharge','EmployerAssessment') \r\n\tthen ISNULL(Tax.Amount,0) \r\n\twhen PC.Premium=0 or PC.Premium is null then ISNULL(CC.Premium,0) else PC.Premium end ParentPremium, \r\n\tcase when TAX.Type in ('SecondInjuryFund','SafetyEducationAndTrainingFund','AdministrationFund',\r\n\t'UninsuredEmployersFund','OtherTaxesAndAssessments1','StateAssessment','SecurityFundCharge','EmployerAssessment') \r\n\tthen ISNULL(Tax.Change,0) \r\n\twhen PC.Change=0 or PC.Change is null then ISNULL(CC.Change,0) else PC.Change end ParentChange, \r\n\tCase when TAX.Type in ('SecondInjuryFund','SafetyEducationAndTrainingFund','AdministrationFund',\r\n\t'UninsuredEmployersFund','OtherTaxesAndAssessments1','StateAssessment','SecurityFundCharge','EmployerAssessment') \r\n\tthen ISNULL(Tax.Written,0) \r\n\twhen PC.Written=0 or PC.Written is null then ISNULL(CC.Written,0) else PC.Written end ParentWritten, \r\n\tCC.ObjectId ChildObjectId,\r\n\tCC.ObjectName ChildObjectName,\r\n\tCC.CoverageId ChildCoverageId,\r\n\tCC.Type ChildCoverageType,\r\n\tCASE WHEN CC.Deleted = 1 THEN '1' WHEN WCC.Indicator = 1 THEN '0' WHEN WCC.IndicatorbValue = 1 THEN '0' ELSE '1' END AS ChildCoverageDeleteFlag,\r\n\tWWC.TermType,\r\n\tWWC.TermRateEffectiveDate,\r\n\tWWC.PeriodStartDate,\r\n\tWWC.PeriodEndDate,\r\n\tcase when TAX.Type in ('SecondInjuryFund','SafetyEducationAndTrainingFund','AdministrationFund',\r\n\t'UninsuredEmployersFund','OtherTaxesAndAssessments1','StateAssessment','SecurityFundCharge','EmployerAssessment') \r\n\tthen ISNULL(Tax.Rate,0) \r\n\twhen CC.Type in ('USL&H','USLandH','USLANDH') then ISNULL(CC.BaseRate,0) else ISNULL(PC.BaseRate,0) END BaseRate,\r\n\tWP.PolicyNumber+WP.PolicyVersionFormatted PolKey,\r\n\tPC.ID as CoverageGUID,\r\n\tISNULL(CC.ID,'N/A') as ChildCoverageGUID,\r\n\tDT.Type as TransactionType\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Policy DP with(nolock)\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\ton DP.SessionId=DL.SessionId\r\n\tand DP.PolicyId=DL.PolicyId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\ton DP.SessionId=DS.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\ton DS.SessionId=DT.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage PC with(nolock)\r\n\ton DP.SessionId=PC.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP with(nolock)\r\n\ton WP.SessionId=DS.SessionId\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage CC with(nolock)\r\n\ton PC.SessionId=CC.SessionId\r\n\tand PC.CoverageId=CC.ObjectId\r\n\tand CC.ObjectName='DC_Coverage'\r\n\tleft Join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Coverage WCC with(nolock)\r\n\ton CC.SessionId=WCC.SessionId\r\n\tand CC.CoverageId=WCC.CoverageId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Coverage WC with(Nolock)\r\n\ton PC.SessionId=WC.SessionId\r\n\tand PC.CoverageId=WC.CoverageId\r\n\tLeft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_WC_CoverageTerm WWC with(nolock)\r\n\ton WC.Sessionid=WWC.Sessionid\r\n\tand WC.WB_Coverageid=WWC.WB_Coverageid\r\n\tleft join (select tx.Type, tx.Written, tx.Amount, tx.Change, tx.Rate, tx.SessionId, st.WC_StateTermId, ws.State TaxState\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_WC_StateTerm st with (nolock)\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_WC_state ws with (nolock)\r\n\ton ws.wc_stateid = st.wc_stateid\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_TaxSurcharge tx with (nolock)\r\n\ton tx.ObjectId = ws.WC_StateId\r\n\tand tx.ObjectName = 'DC_WC_State'\r\n\twhere tx.type in ('SecondInjuryFund','SafetyEducationAndTrainingFund','AdministrationFund',\r\n\t'UninsuredEmployersFund','OtherTaxesAndAssessments1','StateAssessment','SecurityFundCharge','EmployerAssessment')) TAX\r\n\ton TAX.SessionId=DP.SessionId\r\n\tand PC.ObjectId=Tax.WC_StateTermId\r\n\tand PC.ObjectName='DC_WC_StateTerm'\r\n\tand Tax.Type=PC.Type\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand PC.ObjectName<>'DC_Coverage'\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\tand DT.State='Committed'\r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nEXP_SRCDataCollect AS (\n\tSELECT\n\tHistoryID,\n\tPurpose,\n\tSessionId,\n\tParentObjectId,\n\tParentObjectName,\n\tParentCoverageId,\n\tParentCoverageType,\n\tParentPremium,\n\tParentChange,\n\tParentWritten,\n\tChildObjectId,\n\tChildObjectName,\n\tChildCoverageId,\n\tChildCoverageType,\n\tTermType,\n\tTermRateEffectiveDate,\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tBaseRate,\n\tParentCoverageDeleteFlag,\n\tChildCoverageDeleteFlag,\n\tPolKey,\n\tCoverageGUID,\n\tChildCoverageGUID,\n\tTransactionType\n\tFROM SQ_DC_Coverage\n),\nLKP_DC_ClassCode AS (\n\tSELECT\n\tValue,\n\tObjectId,\n\tSessionId\n\tFROM (\n\t\tselect \r\n\t\tDCC.ObjectId as ObjectId,\r\n\t\tDCC.SessionId as SessionId,\r\n\t\tValue as Value \r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_ClassCode DCC\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\t\ton DCC.SessionId=DL.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\t\ton DCC.SessionId=DS.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\t\ton DS.SessionId=DT.SessionId\r\n\t\twhere DCC.ObjectName='DC_WC_Risk'\r\n\t\tand DL.Type='WorkersCompensation'\r\n\t\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\tand DT.State='Committed'\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ObjectId,SessionId ORDER BY Value) = 1\n),\nLKP_DC_StatCode AS (\n\tSELECT\n\tClassCode,\n\tObjectId,\n\tSessionId\n\tFROM (\n\t\tselect \r\n\t\tcase when DSC.Type not in ('ExperienceModification','ExpenseConstant','PremiumDiscount') then DSC.Value else '' end as ClassCode,\r\n\t\tDSC.ObjectId as ObjectId,\r\n\t\tDSC.SessionId as SessionId\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_StatCode DSC\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\t\ton DSC.SessionId=DL.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\t\ton DSC.SessionId=DS.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\t\ton DS.SessionId=DT.SessionId\r\n\t\twhere DSC.ObjectName='DC_Coverage'\r\n\t\tand DL.Type='WorkersCompensation'\r\n\t\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\tand DT.State='Committed'\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ObjectId,SessionId ORDER BY ClassCode) = 1\n),\nLKP_IfAny_Limit AS (\n\tSELECT\n\tCoverageId,\n\tIn_Coverageid\n\tFROM (\n\t\tselect C.CoverageId AS CoverageId\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage C\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Limit Li\r\n\t\ton C.CoverageId=Li.ObjectId\r\n\t\tand Li.ObjectName='DC_Coverage'\r\n\t\tand C.SessionId=Li.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line L\r\n\t\ton C.SessionId=L.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction T\r\n\t\ton C.SessionId=T.SessionId\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session S\r\n\t\ton C.SessionId=S.SessionId\r\n\t\twhere L.Type='WorkersCompensation'\r\n\t\tand C.Type='ManualPremium'\r\n\t\tand Li.Value='If Any'\r\n\t\tand C.Deleted<>1\r\n\t\tand T.State='Committed'\r\n\t\tand S.Purpose='Onset'\r\n\t\tand S.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageId ORDER BY CoverageId) = 1\n),\nExp_ClassCodeDerivation AS (\n\tSELECT\n\tEXP_SRCDataCollect.HistoryID,\n\tEXP_SRCDataCollect.Purpose,\n\tEXP_SRCDataCollect.SessionId,\n\tEXP_SRCDataCollect.ParentObjectId,\n\tEXP_SRCDataCollect.ParentObjectName,\n\tEXP_SRCDataCollect.ParentCoverageId,\n\tEXP_SRCDataCollect.ParentCoverageType,\n\tEXP_SRCDataCollect.ParentPremium,\n\tEXP_SRCDataCollect.ParentChange,\n\tEXP_SRCDataCollect.ParentWritten,\n\tEXP_SRCDataCollect.ChildObjectId,\n\tEXP_SRCDataCollect.ChildObjectName,\n\tEXP_SRCDataCollect.ChildCoverageId,\n\tEXP_SRCDataCollect.ChildCoverageType,\n\tEXP_SRCDataCollect.TermType,\n\tEXP_SRCDataCollect.TermRateEffectiveDate,\n\tEXP_SRCDataCollect.PeriodStartDate,\n\tEXP_SRCDataCollect.PeriodEndDate,\n\tLKP_DC_ClassCode.Value,\n\tLKP_DC_StatCode.ClassCode AS Class1,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ParentObjectName='DC_WC_Risk',Value,\r\n\t-- NOT ISNULL(Class1),Class1,\r\n\t-- Class2)\n\tDECODE(\n\t    TRUE,\n\t    ParentObjectName = 'DC_WC_Risk', Value,\n\t    Class1 IS NOT NULL, Class1,\n\t    Class2\n\t) AS ClassCode,\n\tEXP_SRCDataCollect.BaseRate,\n\tEXP_SRCDataCollect.ParentCoverageDeleteFlag,\n\t-- *INF*: IIF(ISNULL(lkp_IfAny_ObjectId),ParentCoverageDeleteFlag,'0')\n\tIFF(lkp_IfAny_ObjectId IS NULL, ParentCoverageDeleteFlag, '0') AS o_ParentCoverageDeleteFlag,\n\tEXP_SRCDataCollect.ChildCoverageDeleteFlag,\n\tLKP_IfAny_Limit.CoverageId AS lkp_IfAny_ObjectId,\n\tEXP_SRCDataCollect.PolKey,\n\tEXP_SRCDataCollect.CoverageGUID,\n\tEXP_SRCDataCollect.ChildCoverageGUID,\n\tEXP_SRCDataCollect.TransactionType\n\tFROM EXP_SRCDataCollect\n\tLEFT JOIN LKP_DC_ClassCode\n\tON LKP_DC_ClassCode.ObjectId = EXP_SRCDataCollect.ParentObjectId AND LKP_DC_ClassCode.SessionId = EXP_SRCDataCollect.SessionId\n\tLEFT JOIN LKP_DC_StatCode\n\tON LKP_DC_StatCode.ObjectId = EXP_SRCDataCollect.ParentCoverageId AND LKP_DC_StatCode.SessionId = EXP_SRCDataCollect.SessionId\n\tLEFT JOIN LKP_IfAny_Limit\n\tON LKP_IfAny_Limit.CoverageId = EXP_SRCDataCollect.ParentCoverageId\n),\nLKP_LatestSession AS (\n\tSELECT\n\tSessionId,\n\tPurpose,\n\tHistoryID\n\tFROM (\n\t\tSelect distinct DT.HistoryID AS HistoryID,\r\n\t\tDS.Purpose AS Purpose,\r\n\t\tMax(DS.Sessionid) AS Sessionid\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\t\ton DT.Sessionid=DS.Sessionid\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\t\ton DT.Sessionid=DL.Sessionid\r\n\t\twhere DL.Type='WorkersCompensation'\r\n\t\tand DS.Purpose='Onset'\r\n\t\tand DT.State='Committed'\r\n\t\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t\tgroup by DT.HistoryID,DS.Purpose\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SessionId,Purpose,HistoryID ORDER BY SessionId) = 1\n),\nLKP_WorkWCTrackHistory AS (\n\tSELECT\n\tWCTrackHistoryID,\n\tAuditid,\n\tHistoryID,\n\tPurpose\n\tFROM (\n\t\tSELECT \r\n\t\tWorkWCTrackHistory.WCTrackHistoryID as WCTrackHistoryID, \r\n\t\tWorkWCTrackHistory.Auditid as Auditid, \r\n\t\tWorkWCTrackHistory.HistoryID as HistoryID, \r\n\t\tWorkWCTrackHistory.Purpose as Purpose \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.WorkWCTrackHistory\r\n\t\torder by WorkWCTrackHistory.HistoryID,WorkWCTrackHistory.Purpose,WorkWCTrackHistory.Auditid ASC\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY HistoryID,Purpose ORDER BY WCTrackHistoryID) = 1\n),\nEXP_RecordFlagging AS (\n\tSELECT\n\tLKP_WorkWCTrackHistory.WCTrackHistoryID AS lkp_WCTrackHistoryID,\n\tLKP_WorkWCTrackHistory.Auditid AS lkp_Auditid,\n\tCURRENT_TIMESTAMP AS ExtractDate,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS Auditid,\n\t-- *INF*: IIF(lkp_Auditid=@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND (NOT ISNULL(lkp_SessionId)),'1','0')\n\tIFF(lkp_Auditid = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND (lkp_SessionId IS NOT NULL), '1', '0') AS FilterFlag,\n\tExp_ClassCodeDerivation.ParentObjectId,\n\tExp_ClassCodeDerivation.ParentObjectName,\n\tExp_ClassCodeDerivation.ParentCoverageId,\n\tExp_ClassCodeDerivation.ParentCoverageType,\n\tExp_ClassCodeDerivation.ParentPremium,\n\tExp_ClassCodeDerivation.ParentChange,\n\tExp_ClassCodeDerivation.ParentWritten,\n\tExp_ClassCodeDerivation.ChildObjectId,\n\tExp_ClassCodeDerivation.ChildObjectName,\n\tExp_ClassCodeDerivation.ChildCoverageId,\n\tExp_ClassCodeDerivation.ChildCoverageType,\n\tExp_ClassCodeDerivation.TermType,\n\tExp_ClassCodeDerivation.TermRateEffectiveDate,\n\tExp_ClassCodeDerivation.PeriodStartDate,\n\tExp_ClassCodeDerivation.PeriodEndDate,\n\tExp_ClassCodeDerivation.ClassCode,\n\tExp_ClassCodeDerivation.BaseRate,\n\tLKP_LatestSession.SessionId AS lkp_SessionId,\n\tExp_ClassCodeDerivation.o_ParentCoverageDeleteFlag AS ParentCoverageDeleteFlag,\n\tExp_ClassCodeDerivation.ChildCoverageDeleteFlag,\n\t-- *INF*: IIF(ParentCoverageDeleteFlag='1','1',ChildCoverageDeleteFlag)\n\tIFF(ParentCoverageDeleteFlag = '1', '1', ChildCoverageDeleteFlag) AS o_ChildCoverageDeleteFlag,\n\tExp_ClassCodeDerivation.PolKey,\n\tExp_ClassCodeDerivation.CoverageGUID,\n\tExp_ClassCodeDerivation.ChildCoverageGUID,\n\tExp_ClassCodeDerivation.TransactionType\n\tFROM Exp_ClassCodeDerivation\n\tLEFT JOIN LKP_LatestSession\n\tON LKP_LatestSession.SessionId = Exp_ClassCodeDerivation.SessionId AND LKP_LatestSession.Purpose = Exp_ClassCodeDerivation.Purpose AND LKP_LatestSession.HistoryID = Exp_ClassCodeDerivation.HistoryID\n\tLEFT JOIN LKP_WorkWCTrackHistory\n\tON LKP_WorkWCTrackHistory.HistoryID = Exp_ClassCodeDerivation.HistoryID AND LKP_WorkWCTrackHistory.Purpose = Exp_ClassCodeDerivation.Purpose\n),\nFIL_ExcludeSubmittedRecords AS (\n\tSELECT\n\tlkp_WCTrackHistoryID AS WCTrackHistoryID, \n\tExtractDate, \n\tAuditid, \n\tFilterFlag, \n\tParentObjectId, \n\tParentObjectName, \n\tParentCoverageId, \n\tParentCoverageType, \n\tParentPremium, \n\tParentChange, \n\tParentWritten, \n\tChildObjectId, \n\tChildObjectName, \n\tChildCoverageId, \n\tChildCoverageType, \n\tTermType, \n\tTermRateEffectiveDate, \n\tPeriodStartDate, \n\tPeriodEndDate, \n\tClassCode, \n\tBaseRate, \n\tParentCoverageDeleteFlag, \n\to_ChildCoverageDeleteFlag AS ChildCoverageDeleteFlag, \n\tPolKey, \n\tCoverageGUID, \n\tChildCoverageGUID, \n\tTransactionType\n\tFROM EXP_RecordFlagging\n\tWHERE FilterFlag='1'\n),\nSQ_DC_Coverage_Deleted AS (\n\tWITH HistoryID_CTE\r\n\tAS\r\n\t(\r\n\tselect distinct WP.PolicyNumber,WP.PolicyVersionFormatted,pc.Id,MAX(DT.SessionId) OVER(PARTITION BY WP.PolicyNumber,WP.PolicyVersionFormatted,DT.HistoryID) MaxSessionID \r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Policy DP with(nolock)\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\ton DP.SessionId=DL.SessionId\r\n\tand DP.PolicyId=DL.PolicyId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\ton DP.SessionId=DS.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\ton DS.SessionId=DT.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage PC with(nolock)\r\n\ton DP.SessionId=PC.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP with (NOLOCK)\r\n\ton WP.SessionId=DL.SessionId\r\n\tinner join @{pipeline().parameters.DATABASE_EXAMPLEDATA}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.History H with (NOLOCK)\r\n\ton H.HistoryID=DT.HistoryID\r\n\tand H.DeprecatedBy IS NULL\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage CC with(nolock)\r\n\ton PC.SessionId=CC.SessionId\r\n\tand PC.CoverageId=CC.ObjectId\r\n\tand CC.ObjectName='DC_Coverage'\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Coverage WC with(Nolock)\r\n\ton PC.SessionId=WC.SessionId\r\n\tand PC.CoverageId=WC.CoverageId\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand H.DeprecatedBy IS NULL\r\n\tand PC.ObjectName<>'DC_Coverage'\r\n\tand DT.State='Committed'\r\n\tand CASE WHEN DT.Type='New' and PC.Deleted <> 1 THEN '0' \r\n\tWHEN PC.Deleted = 1 THEN '1' \r\n\tWHEN WC.Indicator = 1 THEN '0' \r\n\tWHEN WC.IndicatorbValue = 1 THEN '0' \r\n\tELSE '1' END=1\r\n\tand DS.CreateDateTime between '@{pipeline().parameters.SELECTION_START_TS}' and '@{pipeline().parameters.SELECTION_END_TS}'\r\n\t@{pipeline().parameters.WHERE_CLAUSE_DELETED}\r\n\t)\r\n\t\r\n\tselect distinct DT.HistoryID,\r\n\tWP.PolicyNumber+WP.PolicyVersionFormatted PolicyKey,\r\n\tPC.Type ParentCoverageType,\r\n\tPC.ID as ParentCoverageGUID,\r\n\tCASE WHEN DT.Type='New' and PC.Deleted <> 1 THEN '0' \r\n\tWHEN PC.Deleted = 1 THEN '1' \r\n\tWHEN WC.Indicator = 1 THEN '0' \r\n\tWHEN WC.IndicatorbValue = 1 THEN '0' \r\n\tELSE '1' END AS ParentCoverageDeleteFlag,\r\n\tISNULL(CC.ID,'N/A') as ChildCoverageGUID\r\n\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Policy DP with(nolock)\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Line DL with(nolock)\r\n\ton DP.SessionId=DL.SessionId\r\n\tand DP.PolicyId=DL.PolicyId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Session DS with(nolock)\r\n\ton DP.SessionId=DS.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Transaction DT with(nolock)\r\n\ton DS.SessionId=DT.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage PC with(nolock)\r\n\ton DP.SessionId=PC.SessionId\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Policy WP with (NOLOCK)\r\n\ton WP.SessionId=DL.SessionId\r\n\tinner join HistoryID_CTE CTE\r\n\ton WP.PolicyNumber=CTE.PolicyNumber\r\n\tand WP.PolicyVersionFormatted=CTE.PolicyVersionFormatted\r\n\tand PC.ID=CTE.ID\r\n\tinner join @{pipeline().parameters.DATABASE_EXAMPLEDATA}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.History H with (NOLOCK)\r\n\ton H.HistoryID=DT.HistoryID\r\n\tand H.DeprecatedBy IS NULL\r\n\tleft join @{pipeline().parameters.SOURCE_TABLE_OWNER}.DC_Coverage CC with(nolock)\r\n\ton PC.SessionId=CC.SessionId\r\n\tand PC.CoverageId=CC.ObjectId\r\n\tand CC.ObjectName='DC_Coverage'\r\n\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.WB_Coverage WC with(Nolock)\r\n\ton PC.SessionId=WC.SessionId\r\n\tand PC.CoverageId=WC.CoverageId\r\n\twhere DL.Type='WorkersCompensation'\r\n\tand DS.Purpose='Onset'\r\n\tand H.DeprecatedBy IS NULL\r\n\tand PC.ObjectName<>'DC_Coverage'\r\n\tand DT.State='Committed'\n),\nEXP_Source AS (\n\tSELECT\n\tHistoryID,\n\tPolicyKey,\n\tParentCoverageType,\n\tParentCoverageGUID,\n\tParentCoverageDeleteFlag,\n\tChildCoverageGUID\n\tFROM SQ_DC_Coverage_Deleted\n),\nLKP_TrackHistory AS (\n\tSELECT\n\tHistoryID,\n\tPolicyKey\n\tFROM (\n\t\tSelect distinct HistoryID as HistoryID, PolicyKey as PolicyKey  from WorkWCTrackHistory\r\n\t\twhere AuditID<>@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID}\r\n\t\torder by 2,1--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY HistoryID,PolicyKey ORDER BY HistoryID) = 1\n),\nEXP_Filter AS (\n\tSELECT\n\tEXP_Source.HistoryID,\n\tEXP_Source.PolicyKey,\n\tEXP_Source.ParentCoverageType,\n\tEXP_Source.ParentCoverageGUID,\n\tEXP_Source.ParentCoverageDeleteFlag,\n\tEXP_Source.ChildCoverageGUID,\n\tLKP_TrackHistory.HistoryID AS HistoryID_LKP,\n\tLKP_TrackHistory.PolicyKey AS PolicyKey_LKP,\n\t-- *INF*: IIF(ISNULL(LTRIM(RTRIM(HistoryID_LKP))),'NEW','EXISTS')\n\tIFF(LTRIM(RTRIM(HistoryID_LKP)) IS NULL, 'NEW', 'EXISTS') AS FilterFlag\n\tFROM EXP_Source\n\tLEFT JOIN LKP_TrackHistory\n\tON LKP_TrackHistory.HistoryID = EXP_Source.HistoryID AND LKP_TrackHistory.PolicyKey = EXP_Source.PolicyKey\n),\nFIL_NewTxns AS (\n\tSELECT\n\tHistoryID, \n\tPolicyKey, \n\tParentCoverageType, \n\tParentCoverageGUID, \n\tParentCoverageDeleteFlag, \n\tChildCoverageGUID, \n\tFilterFlag\n\tFROM EXP_Filter\n\tWHERE LTRIM(RTRIM(FilterFlag))='EXISTS'\n),\nSRT_MaxHistID AS (\n\tSELECT\n\tPolicyKey, \n\tHistoryID, \n\tParentCoverageType, \n\tParentCoverageGUID, \n\tParentCoverageDeleteFlag, \n\tChildCoverageGUID, \n\tFilterFlag\n\tFROM FIL_NewTxns\n\tORDER BY PolicyKey ASC, HistoryID DESC\n),\nEXP_ExistingTxns AS (\n\tSELECT\n\tPolicyKey,\n\tHistoryID,\n\tParentCoverageType,\n\t-- *INF*: UPPER(ParentCoverageType)\n\tUPPER(ParentCoverageType) AS o_ParentCoverageType,\n\tParentCoverageGUID,\n\t-- *INF*: UPPER(ParentCoverageGUID)\n\tUPPER(ParentCoverageGUID) AS o_ParentCoverageGUID,\n\tParentCoverageDeleteFlag,\n\tChildCoverageGUID,\n\t-- *INF*: UPPER(ChildCoverageGUID)\n\tUPPER(ChildCoverageGUID) AS o_ChildCoverageGUID,\n\tFilterFlag,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- PolicyKey<>v_PriorPolicyKey,HistoryID,\r\n\t-- PolicyKey=v_PriorPolicyKey and HistoryID=v_MaxHistID,v_MaxHistID,\r\n\t-- 0)\n\tDECODE(\n\t    TRUE,\n\t    PolicyKey <> v_PriorPolicyKey, HistoryID,\n\t    PolicyKey = v_PriorPolicyKey and HistoryID = v_MaxHistID, v_MaxHistID,\n\t    0\n\t) AS v_MaxHistID,\n\tPolicyKey AS v_PriorPolicyKey,\n\tHistoryID AS v_PriorHistoryID,\n\t-- *INF*: IIF(HistoryID=v_MaxHistID,'1','0')\n\tIFF(HistoryID = v_MaxHistID, '1', '0') AS v_MaxHistIDFilterFlag,\n\tv_MaxHistIDFilterFlag AS MaxHistIDFilterFlag\n\tFROM SRT_MaxHistID\n),\nFIL_MaxHistID AS (\n\tSELECT\n\tPolicyKey, \n\tHistoryID, \n\tParentCoverageType, \n\tParentCoverageGUID, \n\tParentCoverageDeleteFlag, \n\tChildCoverageGUID, \n\tMaxHistIDFilterFlag\n\tFROM EXP_ExistingTxns\n\tWHERE MaxHistIDFilterFlag='1'\n),\nJNR_DeletedTxn AS (SELECT\n\tFIL_MaxHistID.PolicyKey, \n\tFIL_MaxHistID.HistoryID, \n\tFIL_MaxHistID.ParentCoverageType AS ParentCoverageType_Deleted, \n\tFIL_MaxHistID.ParentCoverageGUID AS ParentCoverageGUID_Deleted, \n\tFIL_MaxHistID.ParentCoverageDeleteFlag AS ParentCoverageDeleteFlag_Deleted, \n\tFIL_MaxHistID.ChildCoverageGUID AS ChildCoverageGUID_Deleted, \n\tFIL_MaxHistID.MaxHistIDFilterFlag, \n\tFIL_ExcludeSubmittedRecords.WCTrackHistoryID, \n\tFIL_ExcludeSubmittedRecords.ExtractDate, \n\tFIL_ExcludeSubmittedRecords.Auditid, \n\tFIL_ExcludeSubmittedRecords.FilterFlag, \n\tFIL_ExcludeSubmittedRecords.ParentObjectId, \n\tFIL_ExcludeSubmittedRecords.ParentObjectName, \n\tFIL_ExcludeSubmittedRecords.ParentCoverageId, \n\tFIL_ExcludeSubmittedRecords.ParentCoverageType, \n\tFIL_ExcludeSubmittedRecords.ParentPremium, \n\tFIL_ExcludeSubmittedRecords.ParentChange, \n\tFIL_ExcludeSubmittedRecords.ParentWritten, \n\tFIL_ExcludeSubmittedRecords.ChildObjectId, \n\tFIL_ExcludeSubmittedRecords.ChildObjectName, \n\tFIL_ExcludeSubmittedRecords.ChildCoverageId, \n\tFIL_ExcludeSubmittedRecords.ChildCoverageType, \n\tFIL_ExcludeSubmittedRecords.TermType, \n\tFIL_ExcludeSubmittedRecords.TermRateEffectiveDate, \n\tFIL_ExcludeSubmittedRecords.PeriodStartDate, \n\tFIL_ExcludeSubmittedRecords.PeriodEndDate, \n\tFIL_ExcludeSubmittedRecords.ClassCode, \n\tFIL_ExcludeSubmittedRecords.StatCode, \n\tFIL_ExcludeSubmittedRecords.BaseRate, \n\tFIL_ExcludeSubmittedRecords.ParentCoverageDeleteFlag, \n\tFIL_ExcludeSubmittedRecords.ChildCoverageDeleteFlag, \n\tFIL_ExcludeSubmittedRecords.PolKey, \n\tFIL_ExcludeSubmittedRecords.CoverageGUID, \n\tFIL_ExcludeSubmittedRecords.ChildCoverageGUID, \n\tFIL_ExcludeSubmittedRecords.TransactionType\n\tFROM FIL_ExcludeSubmittedRecords\n\tLEFT OUTER JOIN FIL_MaxHistID\n\tON FIL_MaxHistID.PolicyKey = FIL_ExcludeSubmittedRecords.PolKey AND FIL_MaxHistID.ParentCoverageType = FIL_ExcludeSubmittedRecords.ParentCoverageType AND FIL_MaxHistID.ParentCoverageGUID = FIL_ExcludeSubmittedRecords.CoverageGUID AND FIL_MaxHistID.ChildCoverageGUID = FIL_ExcludeSubmittedRecords.ChildCoverageGUID\n),\nEXP_TARGET AS (\n\tSELECT\n\tPolicyKey,\n\tHistoryID,\n\tParentCoverageType_Deleted,\n\tParentCoverageGUID_Deleted,\n\tParentCoverageDeleteFlag_Deleted,\n\tChildCoverageGUID_Deleted,\n\tMaxHistIDFilterFlag,\n\tWCTrackHistoryID,\n\tExtractDate,\n\tAuditid,\n\tFilterFlag,\n\tParentObjectId,\n\tParentObjectName,\n\tParentCoverageId,\n\tParentCoverageType,\n\tParentPremium,\n\tParentChange,\n\tParentWritten,\n\tChildObjectId,\n\tChildObjectName,\n\tChildCoverageId,\n\tChildCoverageType,\n\tTermType,\n\tTermRateEffectiveDate,\n\tPeriodStartDate,\n\tPeriodEndDate,\n\tClassCode,\n\tStatCode,\n\tBaseRate,\n\tParentCoverageDeleteFlag,\n\tChildCoverageDeleteFlag,\n\tPolKey,\n\tCoverageGUID,\n\tChildCoverageGUID,\n\tTransactionType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ParentCoverageDeleteFlag_Deleted='1','1',\r\n\t-- IN(TransactionType,'New','Reissue','Renew','Rewrite') AND ParentCoverageDeleteFlag='1','1',\r\n\t-- '0')\n\tDECODE(\n\t    TRUE,\n\t    ParentCoverageDeleteFlag_Deleted = '1', '1',\n\t    TransactionType IN ('New','Reissue','Renew','Rewrite') AND ParentCoverageDeleteFlag = '1', '1',\n\t    '0'\n\t) AS Filter_Flag\n\tFROM JNR_DeletedTxn\n),\nFIL_Output AS (\n\tSELECT\n\tPolicyKey, \n\tHistoryID, \n\tParentCoverageType_Deleted, \n\tParentCoverageGUID_Deleted, \n\tParentCoverageDeleteFlag_Deleted, \n\tChildCoverageGUID_Deleted, \n\tMaxHistIDFilterFlag, \n\tWCTrackHistoryID, \n\tExtractDate, \n\tAuditid, \n\tFilterFlag, \n\tParentObjectId, \n\tParentObjectName, \n\tParentCoverageId, \n\tParentCoverageType, \n\tParentPremium, \n\tParentChange, \n\tParentWritten, \n\tChildObjectId, \n\tChildObjectName, \n\tChildCoverageId, \n\tChildCoverageType, \n\tTermType, \n\tTermRateEffectiveDate, \n\tPeriodStartDate, \n\tPeriodEndDate, \n\tClassCode, \n\tStatCode, \n\tBaseRate, \n\tParentCoverageDeleteFlag, \n\tChildCoverageDeleteFlag, \n\tPolKey, \n\tCoverageGUID, \n\tChildCoverageGUID, \n\tFilter_Flag\n\tFROM EXP_TARGET\n\tWHERE Filter_Flag='0'\n),\nWorkWCCoverage AS (\n\tTRUNCATE TABLE WorkWCCoverage;\n\tINSERT INTO WorkWCCoverage\n\t(Auditid, ExtractDate, WCTrackHistoryID, ParentObjectId, ParentObjectName, ParentCoverageId, ParentCoverageType, ParentCoverageDeleteFlag, Premium, Change, Written, ChildObjectName, ChildCoverageId, ChildCoverageType, ChildCoverageDeleteFlag, CoverageTermType, CoverageTermRateEffectiveDate, PeriodStartDate, PeriodEndDate, ClassCode, StatCode, BaseRate)\n\tSELECT \n\tAUDITID, \n\tEXTRACTDATE, \n\tWCTRACKHISTORYID, \n\tPARENTOBJECTID, \n\tPARENTOBJECTNAME, \n\tPARENTCOVERAGEID, \n\tPARENTCOVERAGETYPE, \n\tPARENTCOVERAGEDELETEFLAG, \n\tParentPremium AS PREMIUM, \n\tParentChange AS CHANGE, \n\tParentWritten AS WRITTEN, \n\tCHILDOBJECTNAME, \n\tCHILDCOVERAGEID, \n\tCHILDCOVERAGETYPE, \n\tCHILDCOVERAGEDELETEFLAG, \n\tTermType AS COVERAGETERMTYPE, \n\tTermRateEffectiveDate AS COVERAGETERMRATEEFFECTIVEDATE, \n\tPERIODSTARTDATE, \n\tPERIODENDDATE, \n\tCLASSCODE, \n\tSTATCODE, \n\tBASERATE\n\tFROM FIL_Output\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DATABASE_EXAMPLEDATA": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_DELETED": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}