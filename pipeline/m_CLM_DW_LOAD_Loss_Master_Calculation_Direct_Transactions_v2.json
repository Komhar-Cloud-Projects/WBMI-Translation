{
    "name": "m_CLM_DW_LOAD_Loss_Master_Calculation_Direct_Transactions_v2",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_DW_LOAD_Loss_Master_Calculation_Direct_Transac_00",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_claim_transaction_Reserves AS (\n\tSELECT CT.claim_trans_id,\r\n\t       CT.claim_trans_ak_id,\r\n\t       CT.claimant_cov_det_ak_id,\r\n\t       CT.claim_pay_ak_id, \r\n\t       CT.cause_of_loss,\r\n\t       CT.reserve_ctgry,\r\n\t       CT.type_disability,\r\n\t       CT.sar_id,\r\n\t       CT.financial_type_code,\r\n\t       CT.s3p_trans_code,\r\n\t       CT.pms_trans_code,\r\n\t       CT.trans_code,\r\n\t       CT.trans_date,\r\n\t       CT.pms_acct_entered_date,\r\n\t       CT.trans_base_type_code,\r\n\t       CT.trans_ctgry_code,\r\n\t       CT.trans_amt,\r\n\t       CT.trans_hist_amt,\r\n\t       CT.draft_num,\r\n\t       CT.source_sys_id,\r\n\t       CT.trans_offset_onset_ind ,\r\n\t        @{pipeline().parameters.DATESQL} as LastDayOfLastMonth\r\n\tFROM vw_claim_transaction CT with (nolock)\r\n\tWHERE CT.err_flag > = 0  \r\n\tand (CT.pms_trans_code in ('95','97','98','99') or (CT.pms_trans_code='90' and CT.trans_offset_onset_ind='N/A'))\r\n\tand not CT.financial_type_code + CT.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand UPPER(CT.source_sys_id)='EXCEED'\r\n\tand CT.crrnt_snpsht_flag = 1\r\n\tand CT.trans_date <= @{pipeline().parameters.DATESQL}\r\n\t--debug\r\n\t--and CT.claimant_cov_det_ak_id=-10\n),\nEXP_Default_Reserves AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\t-- *INF*: financial_type_code || s3p_trans_code  ||  IIF(trans_ctgry_code = 'N/A','',trans_ctgry_code)\n\tfinancial_type_code || s3p_trans_code || IFF(trans_ctgry_code = 'N/A', '', trans_ctgry_code) AS V_Exceed_Trans_Code,\n\tV_Exceed_Trans_Code AS Exceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\tLastDayOfMonth\n\tFROM SQ_claim_transaction_Reserves\n),\nSQ_claim_transaction_Reserves_91_92 AS (\n\t-- top selection is for 91's that have the close transaction occur past the end of month.\r\n\t-- the other selection is all 92s with rules that will occur later as to whether they are truly 92s.\r\n\t\r\n\tSELECT CT.claim_trans_id,\r\n\t       CT.claim_trans_ak_id,\r\n\t       CT.claimant_cov_det_ak_id,\r\n\t       CT.claim_pay_ak_id, \r\n\t       CT.cause_of_loss,\r\n\t       CT.reserve_ctgry,\r\n\t       CT.type_disability,\r\n\t       CT.sar_id,\r\n\t       CT.financial_type_code,\r\n\t       CT.s3p_trans_code,\r\n\t       CT.pms_trans_code,\r\n\t       CT.trans_code,\r\n\t       CT.trans_date,\r\n\t       CT.pms_acct_entered_date,\r\n\t       CT.trans_base_type_code,\r\n\t       CT.trans_ctgry_code,\r\n\t       CT.trans_amt,\r\n\t       CT.trans_hist_amt,\r\n\t       CT.draft_num,\r\n\t       CT.source_sys_id,\r\n\t       CT.trans_offset_onset_ind,\r\n\t       @{pipeline().parameters.DATESQL} as LastDayOfLastMonth \r\n\tFROM vw_claim_transaction CT with (nolock)\r\n\tWHERE CT.err_flag > = 0  \r\n\tand CT.pms_trans_code in ('91')\r\n\tand not CT.financial_type_code + CT.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand UPPER(CT.source_sys_id)='EXCEED'\r\n\tand CT.crrnt_snpsht_flag = 1\r\n\tand CT.trans_date <= @{pipeline().parameters.DATESQL}\r\n\tand CT.modified_date > @{pipeline().parameters.DATESQL}\r\n\t--debug\r\n\t--and CT.claimant_cov_det_ak_id=1628248\r\n\t\r\n\tunion all\r\n\t\r\n\tSELECT CT.claim_trans_id,\r\n\t       CT.claim_trans_ak_id,\r\n\t       CT.claimant_cov_det_ak_id,\r\n\t       CT.claim_pay_ak_id, \r\n\t       CT.cause_of_loss,\r\n\t       CT.reserve_ctgry,\r\n\t       CT.type_disability,\r\n\t       CT.sar_id,\r\n\t       CT.financial_type_code,\r\n\t       CT.s3p_trans_code,\r\n\t       CT.pms_trans_code,\r\n\t       CT.trans_code,\r\n\t       CT.trans_date,\r\n\t       CT.pms_acct_entered_date,\r\n\t       CT.trans_base_type_code,\r\n\t       CT.trans_ctgry_code,\r\n\t       CT.trans_amt,\r\n\t       CT.trans_hist_amt,\r\n\t       CT.draft_num,\r\n\t       CT.source_sys_id,\r\n\t       CT.trans_offset_onset_ind,\r\n\t       @{pipeline().parameters.DATESQL} as LastDayOfLastMonth \r\n\tFROM vw_claim_transaction CT with (nolock)\r\n\tWHERE CT.err_flag > = 0  \r\n\tand CT.pms_trans_code in ('92')\r\n\tand not CT.financial_type_code + CT.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand UPPER(CT.source_sys_id)='EXCEED'\r\n\tand CT.crrnt_snpsht_flag = 1\r\n\tand CT.trans_date <= @{pipeline().parameters.DATESQL}\r\n\t--debug\r\n\t--and CT.claimant_cov_det_ak_id=1628248\r\n\t\r\n\tunion all\r\n\t\r\n\tSELECT CT.claim_trans_id,\r\n\t       CT.claim_trans_ak_id,\r\n\t       CT.claimant_cov_det_ak_id,\r\n\t       CT.claim_pay_ak_id, \r\n\t       CT.cause_of_loss,\r\n\t       CT.reserve_ctgry,\r\n\t       CT.type_disability,\r\n\t       CT.sar_id,\r\n\t       CT.financial_type_code,\r\n\t       CT.s3p_trans_code,\r\n\t       CT.pms_trans_code,\r\n\t       CT.trans_code,\r\n\t       CT.trans_date,\r\n\t       CT.pms_acct_entered_date,\r\n\t       CT.trans_base_type_code,\r\n\t       CT.trans_ctgry_code,\r\n\t       CT.trans_amt,\r\n\t       CT.trans_hist_amt,\r\n\t       CT.draft_num,\r\n\t       CT.source_sys_id,\r\n\t       CT.trans_offset_onset_ind,\r\n\t       @{pipeline().parameters.DATESQL} as LastDayOfLastMonth \r\n\tFROM vw_claim_transaction CT with (nolock)\r\n\tWHERE CT.err_flag > = 0  \r\n\tand (CT.pms_trans_code='90' and CT.trans_offset_onset_ind='N')\r\n\tand not CT.financial_type_code + CT.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand UPPER(CT.source_sys_id)='EXCEED'\r\n\tand CT.crrnt_snpsht_flag = 1\r\n\tand CT.trans_date <= @{pipeline().parameters.DATESQL}\n),\nEXP_Default_Reserves_91_92 AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\t-- *INF*: financial_type_code || s3p_trans_code  ||  IIF(trans_ctgry_code = 'N/A','',trans_ctgry_code)\n\tfinancial_type_code || s3p_trans_code || IFF(trans_ctgry_code = 'N/A', '', trans_ctgry_code) AS V_Exceed_Trans_Code,\n\tV_Exceed_Trans_Code AS Exceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\tLastDayOfLastMonth\n\tFROM SQ_claim_transaction_Reserves_91_92\n),\nmplt_loss_master_90N_91_92_pms_trans_code_conversions AS (WITH\n\tINPUT_90N_91_92_conversion AS (\n\t\t\n\t),\n\tEXP_Default_Reserves_91_92 AS (\n\t\tSELECT\n\t\tclaimant_cov_det_ak_id,\n\t\tfinancial_type_code,\n\t\tpms_trans_code,\n\t\ttrans_offset_onset_ind,\n\t\tLastDayOfLastMonth,\n\t\t-- *INF*: DECODE(true,\r\n\t\t-- pms_trans_code='90','O',\r\n\t\t-- pms_trans_code='91' and trans_offset_onset_ind='N','O',\r\n\t\t-- trans_offset_onset_ind\r\n\t\t-- )\r\n\t\t-- \r\n\t\t-- -- we need to rig the lookup to look for the matching offset/onset indicator (N,O,N/A).  Since a 90 in this pipeline is an N we need to change it to be an O so we can find the 41/42 offset to verify we have an offset -- otherwise we risk the onset 90 and offset 91 reverting to a 90 and causing double reserves.\r\n\t\t-- -- also a 91N means we will have a 91O and 91N.  if we have no 41/42 then we risk two reserves so appling same logic as 90Ns.\n\t\tDECODE(true,\n\t\tpms_trans_code = '90', 'O',\n\t\tpms_trans_code = '91' AND trans_offset_onset_ind = 'N', 'O',\n\t\ttrans_offset_onset_ind) AS trans_offset_onset_ind_for_lookup\n\t\tFROM INPUT_90N_91_92_conversion\n\t),\n\tLKP_claim_transaction_41_42_66_22_pre_month_end AS (\n\t\tSELECT\n\t\ttrans_date,\n\t\tpms_trans_code,\n\t\tclaimant_cov_det_ak_id_IN,\n\t\tfinancial_type_code_IN,\n\t\ttrans_offset_onset_ind_for_lookup,\n\t\tLastDayOfLastMonth,\n\t\tclaimant_cov_det_ak_id,\n\t\tfinancial_type_code,\n\t\ttrans_offset_onset_ind\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tclaim_transaction.trans_date as trans_date, \r\n\t\t\tclaim_transaction.pms_trans_code as pms_trans_code, \r\n\t\t\tclaim_transaction.claimant_cov_det_ak_id as claimant_cov_det_ak_id, \r\n\t\t\tclaim_transaction.financial_type_code as financial_type_code, \r\n\t\t\tclaim_transaction.trans_offset_onset_ind as trans_offset_onset_ind \r\n\t\t\tFROM \r\n\t\t\tclaim_transaction with (nolock)\r\n\t\t\twhere \r\n\t\t\tpms_trans_code in ('41','42','66','22')\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,financial_type_code,trans_offset_onset_ind,trans_date ORDER BY trans_date DESC) = 1\n\t),\n\tLKP_claim_transaction_41_42_22_post_month_end AS (\n\t\tSELECT\n\t\ttrans_date,\n\t\tpms_trans_code,\n\t\tclaimant_cov_det_ak_id_IN,\n\t\tfinancial_type_code_IN,\n\t\tLastDayOfLastMonth,\n\t\tclaimant_cov_det_ak_id,\n\t\tfinancial_type_code\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tclaim_transaction.trans_date as trans_date, \r\n\t\t\tclaim_transaction.pms_trans_code as pms_trans_code, \r\n\t\t\tclaim_transaction.claimant_cov_det_ak_id as claimant_cov_det_ak_id, \r\n\t\t\tclaim_transaction.financial_type_code as financial_type_code, \r\n\t\t\tclaim_transaction.trans_offset_onset_ind as trans_offset_onset_ind \r\n\t\t\tFROM \r\n\t\t\tclaim_transaction with (nolock)\r\n\t\t\twhere \r\n\t\t\tpms_trans_code in ('41','42','22')\r\n\t\t\tand trans_offset_onset_ind <> 'O'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,financial_type_code,trans_date ORDER BY trans_date) = 1\n\t),\n\tLKP_claim_transaction_66_trans_for_92s AS (\n\t\tSELECT\n\t\ttrans_date,\n\t\tpms_trans_code,\n\t\tclaimant_cov_det_ak_id_IN,\n\t\tfinancial_type_code_IN,\n\t\tclaimant_cov_det_ak_id,\n\t\tfinancial_type_code\n\t\tFROM (\n\t\t\tSELECT \r\n\t\t\tclaim_transaction.trans_date as trans_date, \r\n\t\t\tclaim_transaction.pms_trans_code as pms_trans_code, \r\n\t\t\tclaim_transaction.claimant_cov_det_ak_id as claimant_cov_det_ak_id, \r\n\t\t\tclaim_transaction.financial_type_code as financial_type_code\r\n\t\t\tFROM \r\n\t\t\tclaim_transaction with (nolock)\r\n\t\t\twhere\r\n\t\t\tpms_trans_code = '66'\r\n\t\t\tand trans_offset_onset_ind <> 'O'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,financial_type_code ORDER BY trans_date DESC) = 1\n\t),\n\tEXP_check_transcode_lkp_output AS (\n\t\tSELECT\n\t\tLKP_claim_transaction_41_42_66_22_pre_month_end.trans_date AS lkp_trans_date,\n\t\tLKP_claim_transaction_41_42_66_22_pre_month_end.pms_trans_code AS lkp_pms_trans_code,\n\t\t-- *INF*: IIF(ISNULL(lkp_pms_trans_code),'N/A',lkp_pms_trans_code)\n\t\tIFF(lkp_pms_trans_code IS NULL, 'N/A', lkp_pms_trans_code) AS v_lkp_pms_trans_code,\n\t\tv_lkp_pms_trans_code AS lkp_pms_trans_code_pre_month_end,\n\t\t-- *INF*: DECODE(true,\r\n\t\t-- IN(v_lkp_pms_trans_code,'41','42','22'),'Y',\r\n\t\t-- v_lkp_pms_trans_code='N/A','N/A',\r\n\t\t-- 'N'\r\n\t\t-- )\n\t\tDECODE(true,\n\t\tIN(v_lkp_pms_trans_code, '41', '42', '22'), 'Y',\n\t\tv_lkp_pms_trans_code = 'N/A', 'N/A',\n\t\t'N') AS lkp_pms_trans_code_pre_month_end_is_close_trans,\n\t\tEXP_Default_Reserves_91_92.claimant_cov_det_ak_id,\n\t\tEXP_Default_Reserves_91_92.financial_type_code,\n\t\tEXP_Default_Reserves_91_92.pms_trans_code,\n\t\tEXP_Default_Reserves_91_92.trans_offset_onset_ind,\n\t\tLKP_claim_transaction_66_trans_for_92s.trans_date AS trans_date_pms_code_66,\n\t\t-- *INF*: IIF(isnull(trans_date_pms_code_66),TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),trans_date_pms_code_66)\n\t\tIFF(trans_date_pms_code_66 IS NULL, TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), trans_date_pms_code_66) AS v_trans_date_pms_code_66,\n\t\tLKP_claim_transaction_66_trans_for_92s.pms_trans_code AS pms_trans_code_66,\n\t\t-- *INF*: IIF(ISNULL(pms_trans_code_66),'N/A',pms_trans_code_66)\n\t\tIFF(pms_trans_code_66 IS NULL, 'N/A', pms_trans_code_66) AS v_pms_trans_code_66,\n\t\tLKP_claim_transaction_41_42_22_post_month_end.trans_date AS trans_date_close_post_month_end,\n\t\tLKP_claim_transaction_41_42_22_post_month_end.pms_trans_code AS pms_trans_code_close_post_month_end,\n\t\t-- *INF*: IIF(isnull(pms_trans_code_close_post_month_end),'N/A',pms_trans_code_close_post_month_end)\n\t\tIFF(pms_trans_code_close_post_month_end IS NULL, 'N/A', pms_trans_code_close_post_month_end) AS v_pms_trans_code_close_post_month_end,\n\t\tEXP_Default_Reserves_91_92.LastDayOfLastMonth,\n\t\t-- *INF*: DECODE(true,\r\n\t\t-- pms_trans_code !='92','N/A',\r\n\t\t-- pms_trans_code='92' and v_pms_trans_code_66 !='N/A' and v_trans_date_pms_code_66 <= LastDayOfLastMonth,'92',\r\n\t\t-- pms_trans_code='92' and v_pms_trans_code_66 !='N/A' and v_trans_date_pms_code_66 > LastDayOfLastMonth and v_pms_trans_code_close_post_month_end !='N/A','90',\r\n\t\t-- '91'\r\n\t\t-- )\r\n\t\t-- \r\n\t\t-- --  IF we have a 66 transaction that occurrs before end of month then we will revert to 92 -- because of inconsistancy with offsets onsets the search has to be done seperately\r\n\t\t-- -- IF we have a 66 after end of month and also a 41,42 or 22 close payment after end of month then revert to 90  - could also have been a 92.\r\n\t\t-- -- IF we have none of these scenarios and need to revert then go to a 91\n\t\tDECODE(true,\n\t\tpms_trans_code != '92', 'N/A',\n\t\tpms_trans_code = '92' AND v_pms_trans_code_66 != 'N/A' AND v_trans_date_pms_code_66 <= LastDayOfLastMonth, '92',\n\t\tpms_trans_code = '92' AND v_pms_trans_code_66 != 'N/A' AND v_trans_date_pms_code_66 > LastDayOfLastMonth AND v_pms_trans_code_close_post_month_end != 'N/A', '90',\n\t\t'91') AS v_pms_trans_code_92_check,\n\t\tv_pms_trans_code_92_check AS pms_trans_code_92_check_out,\n\t\t-- *INF*: DECODE(true,\r\n\t\t-- v_pms_trans_code_close_post_month_end='N/A','N/A',\r\n\t\t-- pms_trans_code !='91','N/A',\r\n\t\t-- trans_offset_onset_ind !='N','N/A',\r\n\t\t-- v_pms_trans_code_close_post_month_end != 'N/A','90',\r\n\t\t-- '91'\r\n\t\t-- )\r\n\t\t-- \r\n\t\t-- -- specific check where a 91 N is selected and a close transaction occurs post month end set an indicator to set it back to a 90\r\n\t\t-- -- else it should remain a 91.\n\t\tDECODE(true,\n\t\tv_pms_trans_code_close_post_month_end = 'N/A', 'N/A',\n\t\tpms_trans_code != '91', 'N/A',\n\t\ttrans_offset_onset_ind != 'N', 'N/A',\n\t\tv_pms_trans_code_close_post_month_end != 'N/A', '90',\n\t\t'91') AS v_pms_trans_code_91_N_check,\n\t\tv_pms_trans_code_91_N_check AS pms_trans_code_91_N_out\n\t\tFROM EXP_Default_Reserves_91_92\n\t\tLEFT JOIN LKP_claim_transaction_41_42_22_post_month_end\n\t\tON LKP_claim_transaction_41_42_22_post_month_end.claimant_cov_det_ak_id = EXP_Default_Reserves_91_92.claimant_cov_det_ak_id AND LKP_claim_transaction_41_42_22_post_month_end.financial_type_code = EXP_Default_Reserves_91_92.financial_type_code AND LKP_claim_transaction_41_42_22_post_month_end.trans_date > EXP_Default_Reserves_91_92.LastDayOfLastMonth\n\t\tLEFT JOIN LKP_claim_transaction_41_42_66_22_pre_month_end\n\t\tON LKP_claim_transaction_41_42_66_22_pre_month_end.claimant_cov_det_ak_id = EXP_Default_Reserves_91_92.claimant_cov_det_ak_id AND LKP_claim_transaction_41_42_66_22_pre_month_end.financial_type_code = EXP_Default_Reserves_91_92.financial_type_code AND LKP_claim_transaction_41_42_66_22_pre_month_end.trans_offset_onset_ind = EXP_Default_Reserves_91_92.trans_offset_onset_ind_for_lookup AND LKP_claim_transaction_41_42_66_22_pre_month_end.trans_date <= EXP_Default_Reserves_91_92.LastDayOfLastMonth\n\t\tLEFT JOIN LKP_claim_transaction_66_trans_for_92s\n\t\tON LKP_claim_transaction_66_trans_for_92s.claimant_cov_det_ak_id = EXP_Default_Reserves_91_92.claimant_cov_det_ak_id AND LKP_claim_transaction_66_trans_for_92s.financial_type_code = EXP_Default_Reserves_91_92.financial_type_code\n\t),\n\tEXP_determine_conversion AS (\n\t\tSELECT\n\t\tclaimant_cov_det_ak_id,\n\t\tfinancial_type_code,\n\t\tpms_trans_code,\n\t\ttrans_offset_onset_ind,\n\t\tlkp_pms_trans_code_pre_month_end,\n\t\tlkp_pms_trans_code_pre_month_end_is_close_trans,\n\t\tpms_trans_code_92_check_out AS pms_trans_code_92_out,\n\t\tpms_trans_code_91_N_out,\n\t\t-- *INF*: DECODE( true,\r\n\t\t-- --92 is converted in prior step, if valid take the output\r\n\t\t-- pms_trans_code='92' and \r\n\t\t-- pms_trans_code_92_out !='N/A',\r\n\t\t-- pms_trans_code_92_out,\r\n\t\t-- \r\n\t\t-- -- if a 91onset comes in and there is a 22/41/42 offset and it is != NA from the rules in the prior expression use that output value\r\n\t\t-- pms_trans_code='91' and \r\n\t\t-- trans_offset_onset_ind='N' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end_is_close_trans='Y' and \r\n\t\t-- pms_trans_code_91_N_out !='N/A',\r\n\t\t-- pms_trans_code_91_N_out,\r\n\t\t-- \r\n\t\t-- -- if 91 onset and no offsets then we want to revert to the offsets value as if no onset/offset happened.\r\n\t\t-- pms_trans_code='91' and \r\n\t\t-- trans_offset_onset_ind='N' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end_is_close_trans !='Y',\r\n\t\t-- pms_trans_code,\r\n\t\t-- \r\n\t\t-- -- if 91 and there is a 22/41/42 then keep it as a 91.  This is a non-offset/onset situation\r\n\t\t-- pms_trans_code='91' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end_is_close_trans='Y' , \r\n\t\t-- '91',\r\n\t\t-- \r\n\t\t-- -- if 91 and no 41/42 then at month end this was a 90.  This is a non-offset/onset situation\r\n\t\t-- pms_trans_code='91' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end_is_close_trans != 'Y' , \r\n\t\t-- '90',\r\n\t\t-- \r\n\t\t-- -- if 90 onset,the SQ only reads onset 90s in, and offset 22/41/42 was found then this is ok.\r\n\t\t-- pms_trans_code='90' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end_is_close_trans='Y', \r\n\t\t-- pms_trans_code, \r\n\t\t-- \r\n\t\t-- -- if 90 onset, the SQ only reads onset 90s in, and offset 22/41/42 was not found then this needs to be set to 91 so it gets filtered, else we get double reserves\r\n\t\t-- pms_trans_code='90' and \r\n\t\t-- lkp_pms_trans_code_pre_month_end='N/A',\r\n\t\t-- '91',\r\n\t\t-- \r\n\t\t-- --default if none of these scenarios fit.\r\n\t\t-- pms_trans_code)\r\n\t\t-- \r\n\t\t-- \n\t\tDECODE(true,\n\t\tpms_trans_code = '92' AND pms_trans_code_92_out != 'N/A', pms_trans_code_92_out,\n\t\tpms_trans_code = '91' AND trans_offset_onset_ind = 'N' AND lkp_pms_trans_code_pre_month_end_is_close_trans = 'Y' AND pms_trans_code_91_N_out != 'N/A', pms_trans_code_91_N_out,\n\t\tpms_trans_code = '91' AND trans_offset_onset_ind = 'N' AND lkp_pms_trans_code_pre_month_end_is_close_trans != 'Y', pms_trans_code,\n\t\tpms_trans_code = '91' AND lkp_pms_trans_code_pre_month_end_is_close_trans = 'Y', '91',\n\t\tpms_trans_code = '91' AND lkp_pms_trans_code_pre_month_end_is_close_trans != 'Y', '90',\n\t\tpms_trans_code = '90' AND lkp_pms_trans_code_pre_month_end_is_close_trans = 'Y', pms_trans_code,\n\t\tpms_trans_code = '90' AND lkp_pms_trans_code_pre_month_end = 'N/A', '91',\n\t\tpms_trans_code) AS v_pms_trans_code,\n\t\tv_pms_trans_code AS pms_trans_code_OUT\n\t\tFROM EXP_check_transcode_lkp_output\n\t),\n\tOUTPUT_LM_90N_91_92_conversion AS (\n\t\tSELECT\n\t\tpms_trans_code_OUT\n\t\tFROM EXP_determine_conversion\n\t),\n),\nEXP_conversion_output AS (\n\tSELECT\n\tEXP_Default_Reserves_91_92.claim_trans_id,\n\tEXP_Default_Reserves_91_92.claim_trans_ak_id,\n\tEXP_Default_Reserves_91_92.claimant_cov_det_ak_id,\n\tEXP_Default_Reserves_91_92.claim_pay_ak_id,\n\tEXP_Default_Reserves_91_92.cause_of_loss,\n\tEXP_Default_Reserves_91_92.reserve_ctgry,\n\tEXP_Default_Reserves_91_92.type_disability,\n\tEXP_Default_Reserves_91_92.sar_id,\n\tEXP_Default_Reserves_91_92.financial_type_code,\n\tEXP_Default_Reserves_91_92.s3p_trans_code,\n\tEXP_Default_Reserves_91_92.pms_trans_code,\n\tEXP_Default_Reserves_91_92.trans_code,\n\tEXP_Default_Reserves_91_92.trans_date,\n\tEXP_Default_Reserves_91_92.pms_acct_entered_date,\n\tEXP_Default_Reserves_91_92.trans_base_type_code,\n\tEXP_Default_Reserves_91_92.trans_ctgry_code,\n\tEXP_Default_Reserves_91_92.Exceed_Trans_Code,\n\tEXP_Default_Reserves_91_92.trans_amt,\n\tEXP_Default_Reserves_91_92.trans_hist_amt,\n\tEXP_Default_Reserves_91_92.draft_num,\n\tEXP_Default_Reserves_91_92.source_sys_id,\n\tEXP_Default_Reserves_91_92.trans_offset_onset_ind,\n\tmplt_loss_master_90N_91_92_pms_trans_code_conversions.pms_trans_code_OUT AS mplt_pms_trans_code,\n\tEXP_Default_Reserves_91_92.LastDayOfLastMonth\n\tFROM EXP_Default_Reserves_91_92\n\t -- Manually join with mplt_loss_master_90N_91_92_pms_trans_code_conversions\n),\nUnion AS (\n\tSELECT claim_trans_id, claim_trans_ak_id, claimant_cov_det_ak_id, claim_pay_ak_id, cause_of_loss, reserve_ctgry, type_disability, sar_id, financial_type_code, s3p_trans_code, pms_trans_code, trans_code, trans_date, pms_acct_entered_date, trans_base_type_code, trans_ctgry_code, Exceed_Trans_Code, trans_amt, trans_hist_amt, draft_num, source_sys_id, trans_offset_onset_ind, LastDayOfMonth\n\tFROM EXP_Default_Reserves\n\tUNION\n\tSELECT claim_trans_id, claim_trans_ak_id, claimant_cov_det_ak_id, claim_pay_ak_id, cause_of_loss, reserve_ctgry, type_disability, sar_id, financial_type_code, s3p_trans_code, mplt_pms_trans_code AS pms_trans_code, trans_code, trans_date, pms_acct_entered_date, trans_base_type_code, trans_ctgry_code, Exceed_Trans_Code, trans_amt, trans_hist_amt, draft_num, source_sys_id, trans_offset_onset_ind, LastDayOfLastMonth AS LastDayOfMonth\n\tFROM EXP_conversion_output\n),\nEXP_union_output AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\tExceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\tLastDayOfMonth AS sql_date_out\n\tFROM Union\n),\nEXP_Loss_Master_Offset_Onset_Reserves AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\tExceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\t-- *INF*: ADD_TO_DATE(SYSDATE,'MM',-1)\n\tADD_TO_DATE(SYSDATE, 'MM', - 1) AS V_Last_Month_Date,\n\t-- *INF*: LAST_DAY(V_Last_Month_Date)\n\tLAST_DAY(V_Last_Month_Date) AS V_Last_Month_Last_Day_Date,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'YYYY')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'YYYY') AS V_Account_Date_YYYY,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'MM')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'MM') AS V_Account_Date_MM,\n\t-- *INF*: V_Account_Date_YYYY || LPAD(V_Account_Date_MM,2,'0')\n\tV_Account_Date_YYYY || LPAD(V_Account_Date_MM, 2, '0') AS V_Account_Date,\n\t-- *INF*: SET_DATE_PART(\r\n\t--          SET_DATE_PART(\r\n\t--                      SET_DATE_PART( V_Last_Month_Last_Day_Date, 'HH', 23) \r\n\t--                                           ,'MI',59)\r\n\t--                                ,'SS',59)\r\n\t-- \r\n\t-- \r\n\t-- --- Changing the date to have 00:00:00 in the timestamp part\n\tSET_DATE_PART(SET_DATE_PART(SET_DATE_PART(V_Last_Month_Last_Day_Date, 'HH', 23), 'MI', 59), 'SS', 59) AS v_Loss_Master_Run_Date,\n\t-- *INF*: IIF(trans_offset_onset_ind = 'O', pms_acct_entered_date, ADD_TO_DATE(v_Loss_Master_Run_Date,'dd',1))\r\n\t-- \r\n\t-- --- Above logic is very important for Loss Master generation for EDW. We had to use above so that for EXCEED Offset Transactions we can get the attributes from Dim tables as that day so we are using pms_acct_entered_date. And for other transactions we use loss_master_run_date.\n\tIFF(trans_offset_onset_ind = 'O', pms_acct_entered_date, ADD_TO_DATE(v_Loss_Master_Run_Date, 'dd', 1)) AS Loss_Master_Run_Date\n\tFROM EXP_union_output\n),\nLKP_claim_transaction_first_code AS (\n\tSELECT\n\ttrans_date,\n\ts3p_trans_code,\n\tfinancial_type_code,\n\tclaimant_cov_det_ak_id,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\tIN_claimant_cov_det_ak_id,\n\tIN_financial_type_code,\n\tIN_source_sys_id,\n\tIN_trans_offset_onset_ind\n\tFROM (\n\t\tSELECT \r\n\t\tCT.trans_date as trans_date, \r\n\t\tCT.s3p_trans_code as s3p_trans_code, \r\n\t\tCT.trans_offset_onset_ind as trans_offset_onset_ind, \r\n\t\tCT.claimant_cov_det_ak_id as claimant_cov_det_ak_id, \r\n\t\tCT.financial_type_code as financial_type_code, \r\n\t\tCT.source_sys_id as source_sys_id \r\n\t\tFROM vw_claim_transaction CT\r\n\t\twhere\r\n\t\tCT.trans_offset_onset_ind <> 'O'\r\n\t\torder by CT.trans_date desc --\r\n\t\t\r\n\t\t-- known informatica bug when using order by asc will actually order by desc, so ordering by desc and trying a workaround\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,financial_type_code,source_sys_id ORDER BY trans_date DESC) = 1\n),\nSQL_calculate_reserves AS (-- SQL_calculate_reserves\n\n\t##############################################\n\n\t# TODO: Place holder for Custom transformation\n\n\t##############################################\n),\nmplt_LM_Policy_n_Claim_Attributes_Reserves AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tLKP_Claimant_Coverage_Detail AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id,\n\t\tloc_unit_num,\n\t\tsub_loc_unit_num,\n\t\tins_line,\n\t\trisk_unit_grp,\n\t\trisk_unit_grp_seq_num,\n\t\trisk_unit,\n\t\trisk_unit_seq_num,\n\t\tmajor_peril_code,\n\t\tmajor_peril_seq,\n\t\tpms_loss_disability,\n\t\treserve_ctgry,\n\t\tcause_of_loss,\n\t\tpms_type_exposure,\n\t\tpms_type_bureau_code,\n\t\trisk_type_ind,\n\t\tPolicySourceID,\n\t\tClassCode,\n\t\tSublineCode,\n\t\tRatingCoverageAKId,\n\t\tStatisticalCoverageAKID,\n\t\tPolicyCoverageAKID,\n\t\tRiskLocationAKID,\n\t\tPremiumTransactionAKID,\n\t\tBureauStatisticalCodeAKID,\n\t\tRiskTerritory,\n\t\tStateProvinceCode,\n\t\tZipPostalCode,\n\t\tTaxLocation,\n\t\tExposure,\n\t\tBureauStatisticalcode1_15,\n\t\tBureauSpecialUseCode,\n\t\tPMSAnnualStatementLine,\n\t\tRatingDateIndicator,\n\t\tBureauStatisticalUserLine,\n\t\tAuditReinstatementIndicator,\n\t\tclaimant_cov_det_ak_id,\n\t\teff_from_date,\n\t\teff_to_date\n\t\tFROM (\n\t\t\tSELECT Ab.claim_party_occurrence_ak_id AS Claim_party_occurrence_ak_id,\r\n\t\t\t       Ab.loc_unit_num                 AS Loc_unit_num,\r\n\t\t\t       Ab.sub_loc_unit_num             AS Sub_loc_unit_num,\r\n\t\t\t       Ab.ins_line                     AS Ins_line,\r\n\t\t\t       Ab.risk_unit_grp                AS Risk_unit_grp,\r\n\t\t\t       Ab.risk_unit_grp_seq_num        AS Risk_unit_grp_seq_num,\r\n\t\t\t       Ab.risk_unit                    AS Risk_unit,\r\n\t\t\t       Ab.risk_unit_seq_num            AS Risk_unit_seq_num,\r\n\t\t\t       Ab.major_peril_code             AS Major_peril_code,\r\n\t\t\t       Ab.major_peril_seq              AS Major_peril_seq,\r\n\t\t\t       Ab.pms_loss_disability          AS Pms_loss_disability,\r\n\t\t\t       Ab.reserve_ctgry                AS Reserve_ctgry,\r\n\t\t\t       Ab.cause_of_loss                AS Cause_of_loss,\r\n\t\t\t       Ab.pms_type_exposure            AS Pms_type_exposure,\r\n\t\t\t       Ab.pms_type_bureau_code         AS Pms_type_bureau_code,\r\n\t\t\t       Ab.risk_type_ind                AS Risk_type_ind,\r\n\t\t\t       Ab.PolicySourceID               AS Policysourceid,\r\n\t\t\t       isnull(Sc.ClassCode,'N/A')                    AS Classcode,\r\n\t\t\t       isnull(Sc.SublineCode,'N/A')                  AS Sublinecode,\r\n\t\t\t       Ab.RatingCoverageAKId           AS Ratingcoverageakid,\r\n\t\t\t       Ab.StatisticalCoverageAKID      AS Statisticalcoverageakid,\r\n\t\t\t       isnull(Pc.PolicyCoverageAKID,-1)           AS Policycoverageakid,\r\n\t\t\t       isnull(Rl.RiskLocationAKID,-1)             AS Risklocationakid,\r\n\t\t\t       isnull(Pt.PremiumTransactionAKID,-1)       AS Premiumtransactionakid,\r\n\t\t\t       isnull(Bsc.BureauStatisticalCodeAKID,-1)   AS Bureaustatisticalcodeakid,\r\n\t\t\t       isnull(Rl.RiskTerritory, 'N/A')              AS Riskterritory,\r\n\t\t\t       isnull(Rl.StateProvinceCode , 'N/A')           AS Stateprovincecode,\r\n\t\t\t       isnull(Rl.ZipPostalCode,'N/A')                AS Zippostalcode,\r\n\t\t\t       isnull(Rl.TaxLocation,'N/A')                  AS Taxlocation,\r\n\t\t\t       isnull(Pt.Exposure,0)                     AS Exposure,\r\n\t\t\t       isnull(BureauCode1 + BureauCode2 + BureauCode3 + BureauCode4 + BureauCode5 + \r\n\t\t\t       BureauCode6 + BureauCode7 + BureauCode8 + BureauCode9 + BureauCode10 + \r\n\t\t\t       BureauCode11 + BureauCode12 + BureauCode13 + BureauCode14 + BureauCode15, 'N/A') AS Bureaustatisticalcode1_15,\r\n\t\t\t       isnull(BureauSpecialUseCode, 'N/A')            AS BureauSpecialUseCode,\r\n\t\t\t       isnull(PMSAnnualStatementLine, 'N/A')\t\t   AS PMSAnnualStatementLine,\r\n\t\t\t       isnull(RatingDateIndicator, 'N/A')             AS RatingDateIndicator,\r\n\t\t\t       isnull(BureauStatisticalUserLine, 'N/A')       AS BureauStatisticalUserLine,\r\n\t\t\t       isnull(AuditReinstatementIndicator, 'N/A')     AS AuditReinstatementIndicator,\r\n\t\t\t       Ab.claimant_cov_det_ak_id       AS Claimant_cov_det_ak_id,\r\n\t\t\t       Ab.eff_from_date                AS Eff_from_date,\r\n\t\t\t       Ab.eff_to_date                  AS Eff_to_date\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.CLAIMANT_COVERAGE_DETAIL Ab\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.STATISTICALCOVERAGE Sc\r\n\t\t\ton Ab.StatisticalCoverageAKID = Sc.StatisticalCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.POLICYCOVERAGE Pc\r\n\t\t\ton Sc.PolicyCoverageAKID = Pc.PolicyCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RISKLOCATION Rl\r\n\t\t\ton Pc.RiskLocationAKID = Rl.RiskLocationAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.PREMIUMTRANSACTION Pt\r\n\t\t\ton Sc.StatisticalCoverageAKID = Pt.StatisticalCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.BUREAUSTATISTICALCODE Bsc\r\n\t\t\ton Pt.PremiumTransactionAKID = Bsc.PremiumTransactionAKID\r\n\t\t\tWHERE -- Ab.audit_id > 0 AND -- (Removing the Audit_ID condition as part of Ticket #663312)\r\n\t\t\t\t  Ab.PolicySourceID NOT IN ( 'PDC', 'DUC' )  ---- To pull data from coverages of PMS policies only\r\n\t\t\t       \r\n\t\t\tUNION\r\n\t\t\t\r\n\t\t\tSELECT Ab.claim_party_occurrence_ak_id AS Claim_party_occurrence_ak_id,\r\n\t\t\t       Ab.loc_unit_num                 AS Loc_unit_num,\r\n\t\t\t       Ab.sub_loc_unit_num             AS Sub_loc_unit_num,\r\n\t\t\t       Ab.ins_line                     AS Ins_line,\r\n\t\t\t       Ab.risk_unit_grp                AS Risk_unit_grp,\r\n\t\t\t       Ab.risk_unit_grp_seq_num        AS Risk_unit_grp_seq_num,\r\n\t\t\t       Ab.risk_unit                    AS Risk_unit,\r\n\t\t\t       Ab.risk_unit_seq_num            AS Risk_unit_seq_num,\r\n\t\t\t       Ab.major_peril_code             AS Major_peril_code,\r\n\t\t\t       Ab.major_peril_seq              AS Major_peril_seq,\r\n\t\t\t       Ab.pms_loss_disability          AS Pms_loss_disability,\r\n\t\t\t       Ab.reserve_ctgry                AS Reserve_ctgry,\r\n\t\t\t       Ab.cause_of_loss                AS Cause_of_loss,\r\n\t\t\t       Ab.pms_type_exposure            AS Pms_type_exposure,\r\n\t\t\t       Ab.pms_type_bureau_code         AS Pms_type_bureau_code,\r\n\t\t\t       Ab.risk_type_ind                AS Risk_type_ind,\r\n\t\t\t       Ab.PolicySourceID               AS Policysourceid,\r\n\t\t\t       Rc.Classcode                  AS Classcode,\r\n\t\t\t       Ab.SublineCode                  AS Sublinecode,\r\n\t\t\t       Ab.RatingCoverageAKId           AS Ratingcoverageakid,\r\n\t\t\t       Ab.StatisticalCoverageAKID      AS Statisticalcoverageakid,\r\n\t\t\t       isnull(Pc.PolicyCoverageAKID,-1)           AS Policycoverageakid,\r\n\t\t\t       isnull(Rl.RiskLocationAKID,-1)             AS Risklocationakid,\r\n\t\t\t       isnull(Pt.PremiumTransactionAKID,-1)       AS Premiumtransactionakid,\r\n\t\t\t       -1                              AS Bureaustatisticalcodeakid,\r\n\t\t\t       isnull(Rl.RiskTerritory, 'N/A')                AS Riskterritory,\r\n\t\t\t       isnull(Rl.StateProvinceCode, 'N/A')            AS Stateprovincecode,\r\n\t\t\t       isnull(Rl.ZipPostalCode, 'N/A')                AS Zippostalcode,\r\n\t\t\t       isnull(Rl.TaxLocation,' N/A')                  AS Taxlocation,\r\n\t\t\t       isnull(Rc.Exposure, 0)                     AS Exposure,\r\n\t\t\t       'N/A'                           AS Bureaustatisticalcode1_15,\r\n\t\t\t       'N/A'                           AS BureauSpecialUseCode,\r\n\t\t\t       'N/A'                           AS PMSAnnualStatementLine,\r\n\t\t\t       'N/A'                           AS RatingDateIndicator,\r\n\t\t\t       'N/A'                           AS BureauStatisticalUserLine,\r\n\t\t\t       'N/A'                           AS AuditReinstatementIndicator,\r\n\t\t\t       Ab.claimant_cov_det_ak_id       AS Claimant_cov_det_ak_id,\r\n\t\t\t       Ab.eff_from_date                AS Eff_from_date,\r\n\t\t\t       Ab.eff_to_date                  AS Eff_to_date\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.CLAIMANT_COVERAGE_DETAIL Ab\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage Rc\r\n\t\t\ton Ab.RatingCoverageAKId = Rc.RatingCoverageAKID \r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.POLICYCOVERAGE Pc\r\n\t\t\ton Rc.PolicyCoverageAKID = Pc.PolicyCoverageAKID \r\n\t\t\tand Pc.CurrentSnapshotFlag=1\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RISKLOCATION Rl\r\n\t\t\ton Pc.RiskLocationAKID = Rl.RiskLocationAKID \r\n\t\t\tand Rl.CurrentSnapshotFlag=1\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.PREMIUMTRANSACTION Pt\r\n\t\t\ton Rc.RatingCoverageAKID = Pt.RatingCoverageAKID \r\n\t\t\tand Pt.EffectiveDate=Rc.EffectiveDate\r\n\t\t\tand Pt.CurrentSnapshotFlag=1\r\n\t\t\tWHERE  -- Ab.audit_id > 0 AND -- -- (Removing the Audit_ID condition as part of Ticket #663312)\r\n\t\t\t\t   Ab.PolicySourceID IN ( 'PDC', 'DUC' )  ---- To pull data for coverages of DuckCreek policies only\r\n\t\t\tORDER BY Ab.claimant_cov_det_ak_id--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,eff_from_date,eff_to_date ORDER BY claim_party_occurrence_ak_id DESC) = 1\n\t),\n\tLKP_Claim_Paymeny_Category AS (\n\t\tSELECT\n\t\tcost_containment_saving_amt,\n\t\tclaim_pay_ak_id\n\t\tFROM (\n\t\t\tSELECT claim_payment_category.cost_containment_saving_amt as cost_containment_saving_amt, claim_payment_category.claim_pay_ak_id as claim_pay_ak_id \r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment_category\r\n\t\t\tWHERE claim_pay_ctgry_type = 'CC'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_ak_id ORDER BY cost_containment_saving_amt DESC) = 1\n\t),\n\tLKP_Claim_Party_Occurrence AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id,\n\t\tclaim_occurrence_ak_id,\n\t\tclaim_party_ak_id,\n\t\tclaim_case_ak_id,\n\t\tclaim_occurrence_key,\n\t\tsource_claim_occurrence_status_code,\n\t\tpolicy_key,\n\t\tpolicy_ak_id,\n\t\tExceed_Claim_Number,\n\t\tclaimant_num,\n\t\tclaim_loss_date,\n\t\tclaim_occurrence_num\n\t\tFROM (\n\t\t\tSELECT CPO.claim_occurrence_ak_id             AS claim_occurrence_ak_id,\r\n\t\t\t       CP.claim_party_ak_id                   AS claim_party_ak_id,\r\n\t\t\t       CPO.claim_case_ak_id \t           AS claim_case_ak_id,\r\n\t\t\t       CO.claim_occurrence_key                AS claim_occurrence_key,\r\n\t\t\t       CO.source_claim_occurrence_status_code AS source_claim_occurrence_status_code,\r\n\t\t\t       CO.pol_key                             AS policy_key,\r\n\t\t\t       CO.pol_key_ak_id                    AS policy_ak_id, \r\n\t\t\t       CO.s3p_claim_num                       AS Exceed_Claim_Number,\r\n\t\t\t       CPO.claimant_num                       AS claimant_num,\r\n\t\t\t       CO.claim_loss_date                     AS claim_loss_date,\r\n\t\t\t       CO.claim_occurrence_num\t\t\t\t  AS claim_occurrence_num,\r\n\t\t\t       CPO.claim_party_occurrence_ak_id       AS claim_party_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence CPO,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence CO,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party CP\r\n\t\t\tWHERE  CPO.claim_occurrence_ak_id = CO.claim_occurrence_ak_id\r\n\t\t\t       AND CP.claim_party_ak_id = CPO.claim_party_ak_id\r\n\t\t\t       AND CO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CPO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CP.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CPO.claim_party_role_code IN ( 'CLMT', 'CMT' )\r\n\t\t\t ORDER  BY claimant_num, claim_party_role_code --\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_occurrence_ak_id ORDER BY claim_party_occurrence_ak_id DESC) = 1\n\t),\n\tLKP_Workers_Comp_Claimant_Detail AS (\n\t\tSELECT\n\t\twc_claimant_det_ak_id,\n\t\tclaim_party_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT WCCD.wc_claimant_det_ak_id        AS wc_claimant_det_ak_id,\r\n\t\t\t       WCCD.claim_party_occurrence_ak_id AS claim_party_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.workers_comp_claimant_detail  WCCD\r\n\t\t\tWHERE WCCD.crrnt_snpsht_flag =1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_occurrence_ak_id ORDER BY wc_claimant_det_ak_id DESC) = 1\n\t),\n\tLKP_Claim_Case AS (\n\t\tSELECT\n\t\tclaim_case_ak_id,\n\t\tprim_litigation_handler_ak_id\n\t\tFROM (\n\t\t\tSELECT CC.prim_litigation_handler_ak_id     AS prim_litigation_handler_ak_id,\r\n\t\t\t       CC.suit_status_code                  AS suit_status_code,\r\n\t\t\t       CC.prim_litigation_handler_role_code AS prim_litigation_handler_role_code,\r\n\t\t\t       CC.suit_open_date                    AS suit_open_date,\r\n\t\t\t       CC.suit_close_date                   AS suit_close_date,\r\n\t\t\t       CC.claim_case_ak_id                  AS claim_case_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case CC\r\n\t\t\tWHERE CC.crrnt_snpsht_flag =1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_case_ak_id ORDER BY claim_case_ak_id DESC) = 1\n\t),\n\tClaim_Representative_H AS (\n\t\tSELECT\n\t\tclaim_rep_ak_id,\n\t\tclaim_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT CR.claim_rep_ak_id         AS claim_rep_ak_id,\r\n\t\t\t          CRO.claim_occurrence_ak_id AS claim_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative CR,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative_occurrence CRO\r\n\t\t\tWHERE  CR.claim_rep_ak_id = CRO.claim_rep_ak_id\r\n\t\t\t       AND CR.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.claim_rep_role_code = 'H'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_ak_id ORDER BY claim_rep_ak_id) = 1\n\t),\n\tClaim_Representative_Examiner AS (\n\t\tSELECT\n\t\tclaim_rep_ak_id,\n\t\tclaim_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT CR.claim_rep_ak_id         AS claim_rep_ak_id,\r\n\t\t\t       CRO.claim_occurrence_ak_id AS claim_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative CR,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative_occurrence CRO\r\n\t\t\tWHERE  CR.claim_rep_ak_id = CRO.claim_rep_ak_id\r\n\t\t\t       AND CR.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.claim_rep_role_code = 'E'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_ak_id ORDER BY claim_rep_ak_id DESC) = 1\n\t),\n\tLKP_Policy_Contract_Customer AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tcontract_cust_ak_id,\n\t\tagency_ak_id,\n\t\tpol_key,\n\t\tmco,\n\t\tpol_eff_date,\n\t\tpol_exp_date,\n\t\tpms_pol_lob_code,\n\t\tClassOfBusiness,\n\t\tvariation_code,\n\t\tIN_policy_ak_id\n\t\tFROM (\n\t\t\tSELECT       P.contract_cust_ak_id AS contract_cust_ak_id,\r\n\t\t\t       P.AgencyAKID      AS agency_ak_id,\r\n\t\t\t       P.pol_key             AS pol_key,\r\n\t\t\t       P.mco                    AS mco,\r\n\t\t\t       P.pol_eff_date        AS pol_eff_date,\r\n\t\t\t       P.pol_exp_date        AS pol_exp_date,\r\n\t\t\t       P.pms_pol_lob_code    AS pms_pol_lob_code,\r\n\t\t\t       P.ClassOfBusiness as ClassOfBusiness,\r\n\t\t\t       P.variation_code      AS variation_code,\r\n\t\t\t       P.pol_ak_id           AS pol_ak_id\r\n\t\t\tFROM   \r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.contract_customer CC,\r\n\t\t\t       @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy P, \r\n\t\t\t       @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency A\r\n\t\t\tWHERE  CC.contract_cust_ak_id = P.contract_cust_ak_id\r\n\t\t\t       AND P.AgencyAKId  = A.AgencyAKId\r\n\t\t\t       AND CC.crrnt_snpsht_flag = 1\r\n\t\t\t       AND P.crrnt_snpsht_flag = 1\r\n\t\t\t       AND A.CurrentSnapshotFlag =1\r\n\t\t\t       AND P.pol_ak_id  IN (SELECT DISTINCT pol_key_ak_id FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence)\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id ORDER BY pol_ak_id DESC) = 1\n\t),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tLKP_Policy_Contract_Customer.IN_policy_ak_id AS pol_ak_id,\n\t\tLKP_Policy_Contract_Customer.contract_cust_ak_id,\n\t\tLKP_Policy_Contract_Customer.agency_ak_id,\n\t\tLKP_Policy_Contract_Customer.pol_key,\n\t\tLKP_Policy_Contract_Customer.mco,\n\t\tLKP_Policy_Contract_Customer.pol_eff_date,\n\t\tLKP_Policy_Contract_Customer.pol_exp_date,\n\t\tLKP_Policy_Contract_Customer.pms_pol_lob_code,\n\t\tLKP_Policy_Contract_Customer.ClassOfBusiness,\n\t\tLKP_Policy_Contract_Customer.variation_code,\n\t\tLKP_Claim_Party_Occurrence.claim_party_occurrence_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_party_ak_id,\n\t\tClaim_Representative_H.claim_rep_ak_id AS claim_rep_ak_id_H,\n\t\tClaim_Representative_Examiner.claim_rep_ak_id AS claim_rep_ak_id_E,\n\t\tLKP_Claim_Case.claim_case_ak_id,\n\t\tLKP_Workers_Comp_Claimant_Detail.wc_claimant_det_ak_id,\n\t\tLKP_Claim_Case.prim_litigation_handler_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_key,\n\t\tLKP_Claim_Party_Occurrence.source_claim_occurrence_status_code,\n\t\tLKP_Claim_Party_Occurrence.policy_key,\n\t\tLKP_Claim_Party_Occurrence.Exceed_Claim_Number,\n\t\tLKP_Claim_Party_Occurrence.claimant_num,\n\t\tLKP_Claim_Party_Occurrence.claim_loss_date,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_num,\n\t\tLKP_Claimant_Coverage_Detail.loc_unit_num,\n\t\tLKP_Claimant_Coverage_Detail.sub_loc_unit_num,\n\t\tLKP_Claimant_Coverage_Detail.ins_line,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_grp,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_grp_seq_num,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_seq_num,\n\t\tLKP_Claimant_Coverage_Detail.risk_type_ind,\n\t\tLKP_Claimant_Coverage_Detail.major_peril_code,\n\t\tLKP_Claimant_Coverage_Detail.major_peril_seq,\n\t\tLKP_Claimant_Coverage_Detail.pms_loss_disability,\n\t\tLKP_Claimant_Coverage_Detail.reserve_ctgry,\n\t\tLKP_Claimant_Coverage_Detail.cause_of_loss,\n\t\tLKP_Claimant_Coverage_Detail.pms_type_exposure,\n\t\tLKP_Claimant_Coverage_Detail.pms_type_bureau_code,\n\t\tLKP_Claim_Paymeny_Category.cost_containment_saving_amt,\n\t\tLKP_Claimant_Coverage_Detail.PolicySourceID,\n\t\tLKP_Claimant_Coverage_Detail.ClassCode,\n\t\tLKP_Claimant_Coverage_Detail.SublineCode,\n\t\tLKP_Claimant_Coverage_Detail.RatingCoverageAKId,\n\t\tLKP_Claimant_Coverage_Detail.StatisticalCoverageAKID,\n\t\tLKP_Claimant_Coverage_Detail.PolicyCoverageAKID,\n\t\tLKP_Claimant_Coverage_Detail.RiskLocationAKID,\n\t\tLKP_Claimant_Coverage_Detail.PremiumTransactionAKID,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalCodeAKID,\n\t\tLKP_Claimant_Coverage_Detail.RiskTerritory,\n\t\tLKP_Claimant_Coverage_Detail.StateProvinceCode,\n\t\tLKP_Claimant_Coverage_Detail.ZipPostalCode,\n\t\tLKP_Claimant_Coverage_Detail.TaxLocation,\n\t\tLKP_Claimant_Coverage_Detail.Exposure,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalcode1_15,\n\t\tLKP_Claimant_Coverage_Detail.BureauSpecialUseCode,\n\t\tLKP_Claimant_Coverage_Detail.PMSAnnualStatementLine,\n\t\tLKP_Claimant_Coverage_Detail.RatingDateIndicator,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalUserLine,\n\t\tLKP_Claimant_Coverage_Detail.AuditReinstatementIndicator\n\t\tFROM \n\t\tLEFT JOIN Claim_Representative_Examiner\n\t\tON Claim_Representative_Examiner.claim_occurrence_ak_id = LKP_Claim_Party_Occurrence.claim_occurrence_ak_id\n\t\tLEFT JOIN Claim_Representative_H\n\t\tON Claim_Representative_H.claim_occurrence_ak_id = LKP_Claim_Party_Occurrence.claim_occurrence_ak_id\n\t\tLEFT JOIN LKP_Claim_Case\n\t\tON LKP_Claim_Case.claim_case_ak_id = LKP_Claim_Party_Occurrence.claim_case_ak_id\n\t\tLEFT JOIN LKP_Claim_Party_Occurrence\n\t\tON LKP_Claim_Party_Occurrence.claim_party_occurrence_ak_id = LKP_Claimant_Coverage_Detail.claim_party_occurrence_ak_id\n\t\tLEFT JOIN LKP_Claim_Paymeny_Category\n\t\tON LKP_Claim_Paymeny_Category.claim_pay_ak_id = INPUT.IN_claim_pay_ak_id\n\t\tLEFT JOIN LKP_Claimant_Coverage_Detail\n\t\tON LKP_Claimant_Coverage_Detail.claimant_cov_det_ak_id = INPUT.IN_claimant_cov_det_ak_id AND LKP_Claimant_Coverage_Detail.eff_from_date <= INPUT.IN_Date AND LKP_Claimant_Coverage_Detail.eff_to_date >= INPUT.IN_Date\n\t\tLEFT JOIN LKP_Policy_Contract_Customer\n\t\tON LKP_Policy_Contract_Customer.pol_ak_id = LKP_Claim_Party_Occurrence.policy_ak_id\n\t\tLEFT JOIN LKP_Workers_Comp_Claimant_Detail\n\t\tON LKP_Workers_Comp_Claimant_Detail.claim_party_occurrence_ak_id = LKP_Claimant_Coverage_Detail.claim_party_occurrence_ak_id\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tpol_ak_id, \n\t\tcontract_cust_ak_id, \n\t\tagency_ak_id, \n\t\tpol_key, \n\t\tmco, \n\t\tpol_eff_date, \n\t\tpol_exp_date, \n\t\tpms_pol_lob_code, \n\t\tClassOfBusiness, \n\t\tvariation_code, \n\t\tclaim_party_occurrence_ak_id, \n\t\tclaim_occurrence_ak_id, \n\t\tclaim_party_ak_id, \n\t\tclaim_rep_ak_id_H, \n\t\tclaim_rep_ak_id_E, \n\t\tclaim_case_ak_id, \n\t\twc_claimant_det_ak_id, \n\t\tclaim_occurrence_key, \n\t\tsource_claim_occurrence_status_code, \n\t\tpolicy_key, \n\t\tExceed_Claim_Number, \n\t\tclaimant_num, \n\t\tclaim_loss_date, \n\t\tclaim_occurrence_num, \n\t\tloc_unit_num, \n\t\tsub_loc_unit_num, \n\t\tins_line, \n\t\trisk_unit_grp, \n\t\trisk_unit_grp_seq_num, \n\t\trisk_unit, \n\t\trisk_unit_seq_num, \n\t\trisk_type_ind, \n\t\tmajor_peril_code, \n\t\tmajor_peril_seq, \n\t\tpms_loss_disability, \n\t\treserve_ctgry, \n\t\tcause_of_loss, \n\t\tpms_type_exposure, \n\t\tpms_type_bureau_code, \n\t\tcost_containment_saving_amt, \n\t\tPolicySourceID, \n\t\tClassCode, \n\t\tSublineCode, \n\t\tRatingCoverageAKId, \n\t\tStatisticalCoverageAKID, \n\t\tPolicyCoverageAKID, \n\t\tRiskLocationAKID, \n\t\tPremiumTransactionAKID, \n\t\tBureauStatisticalCodeAKID, \n\t\tRiskTerritory, \n\t\tStateProvinceCode, \n\t\tZipPostalCode, \n\t\tTaxLocation, \n\t\tExposure, \n\t\tBureauStatisticalcode1_15, \n\t\tBureauSpecialUseCode, \n\t\tPMSAnnualStatementLine, \n\t\tRatingDateIndicator, \n\t\tBureauStatisticalUserLine, \n\t\tAuditReinstatementIndicator\n\t\tFROM EXP_Values\n\t),\n),\nEXP_Determine_Loss_Master_Output_Rows_Reserves AS (\n\tSELECT\n\tEXP_Loss_Master_Offset_Onset_Reserves.claim_trans_id,\n\tEXP_Loss_Master_Offset_Onset_Reserves.claim_trans_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_party_occurrence_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_party_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_occurrence_ak_id,\n\tEXP_Loss_Master_Offset_Onset_Reserves.claimant_cov_det_ak_id,\n\tEXP_Loss_Master_Offset_Onset_Reserves.claim_pay_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pol_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.contract_cust_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.agency_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pol_eff_date,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pol_exp_date,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pms_pol_lob_code,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.variation_code,\n\t-- *INF*: IIF(IN(pms_pol_lob_code,'ACA','AFA','APA','ATA','ACJ','AFJ','APJ'),'6',variation_code)\n\tIFF(IN(pms_pol_lob_code, 'ACA', 'AFA', 'APA', 'ATA', 'ACJ', 'AFJ', 'APJ'), '6', variation_code) AS LM_Variation_Code,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_rep_ak_id_H,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_rep_ak_id_E,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_case_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.wc_claimant_det_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_occurrence_key,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.source_claim_occurrence_status_code,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.policy_key AS Policy_key,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.Exceed_Claim_Number AS s3p_Claim_Num,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claimant_num,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.claim_loss_date AS Claim_loss_date,\n\t-- *INF*: SUBSTR(Policy_key,1,3)\n\tSUBSTR(Policy_key, 1, 3) AS V_Policy_Symbol,\n\tV_Policy_Symbol AS Policy_Symbol,\n\t-- *INF*: SUBSTR(Policy_key,4,7)\n\tSUBSTR(Policy_key, 4, 7) AS V_Policy_Number,\n\tV_Policy_Number AS Policy_Number,\n\t-- *INF*: SUBSTR(Policy_key,11,2)\n\tSUBSTR(Policy_key, 11, 2) AS V_Policy_Module,\n\tV_Policy_Module AS Policy_Module,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.loc_unit_num,\n\t-- *INF*: IIF(loc_unit_num = 'N/A','0000',loc_unit_num)\r\n\t-- \r\n\t-- \r\n\t-- --Adding new rules for Personal Lines policy as the coverage EDW is incorrect.\r\n\t-- ----IIF(loc_unit_num = 'N/A','0000',loc_unit_num)\r\n\t-- \r\n\t-- -----IIF(loc_unit_num = 'N/A','0000',\r\n\t--     --   IIF(SUBSTR(Policy_key,1,1)='H' and SUBSTR(Policy_key,4,1) = '5','0000',loc_unit_num)\r\n\t--        ---)\n\tIFF(loc_unit_num = 'N/A', '0000', loc_unit_num) AS v_loc_unit_num,\n\tv_loc_unit_num AS loc_unit_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.sub_loc_unit_num,\n\t-- *INF*: IIF(sub_loc_unit_num='N/A','000',sub_loc_unit_num)\n\tIFF(sub_loc_unit_num = 'N/A', '000', sub_loc_unit_num) AS v_sub_loc_unit_num,\n\tv_sub_loc_unit_num AS sub_loc_unit_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.ins_line,\n\t-- *INF*: IIF(ins_line = 'N/A','NA',ins_line)\n\tIFF(ins_line = 'N/A', 'NA', ins_line) AS ins_line_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.risk_unit_grp,\n\t-- *INF*: IIF(risk_unit_grp = 'N/A','000',risk_unit_grp)\n\tIFF(risk_unit_grp = 'N/A', '000', risk_unit_grp) AS risk_unit_grp_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.risk_unit_grp_seq_num,\n\t-- *INF*: IIF(LENGTH(RTRIM(risk_unit_grp_seq_num))<3,LPAD(RTRIM(risk_unit_grp_seq_num),3,'0'),risk_unit_grp_seq_num)\n\tIFF(LENGTH(RTRIM(risk_unit_grp_seq_num)) < 3, LPAD(RTRIM(risk_unit_grp_seq_num), 3, '0'), risk_unit_grp_seq_num) AS v_risk_unit_grp_seq_num,\n\t-- *INF*: IIF(SUBSTR(v_risk_unit_grp_seq_num,1,2)='N/','NA',SUBSTR(v_risk_unit_grp_seq_num,1,2))\n\tIFF(SUBSTR(v_risk_unit_grp_seq_num, 1, 2) = 'N/', 'NA', SUBSTR(v_risk_unit_grp_seq_num, 1, 2)) AS risk_unit_grp_seq_num_First_2pos,\n\t-- *INF*: IIF(SUBSTR(v_risk_unit_grp_seq_num,3,1)='A','N',SUBSTR(v_risk_unit_grp_seq_num,3,1))\n\tIFF(SUBSTR(v_risk_unit_grp_seq_num, 3, 1) = 'A', 'N', SUBSTR(v_risk_unit_grp_seq_num, 3, 1)) AS risk_unit_grp_seq_num_last_pos,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.risk_unit,\n\t-- *INF*: RTRIM(risk_unit)\n\tRTRIM(risk_unit) AS risk_unit_out,\n\t-- *INF*: SUBSTR(risk_unit,1,3)\r\n\t-- \r\n\t-- \r\n\t-- ---IIF(source_sys_id = 'PMS',SUBSTR(risk_unit,1,3),\r\n\t-- ---IIF(SUBSTR(Policy_key,1,1)='H' and SUBSTR(Policy_key,4,1) = '5',loc_unit_num,SUBSTR(risk_unit,1,3)))\r\n\t-- \r\n\t-- ---SUBSTR(risk_unit,1,3)\n\tSUBSTR(risk_unit, 1, 3) AS risk_unit_First_3pos,\n\t-- *INF*: IIF(LENGTH(RTRIM(LTRIM(SUBSTR(risk_unit,4,3))))<3,\r\n\t-- RPAD(RTRIM(LTRIM(SUBSTR(risk_unit,4,3))),3,'0'), RTRIM(LTRIM(SUBSTR(risk_unit,4,3)))\r\n\t-- )\n\tIFF(LENGTH(RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3)))) < 3, RPAD(RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3))), 3, '0'), RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3)))) AS risk_unit_last_3pos,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.risk_unit_seq_num,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.risk_type_ind,\n\t-- *INF*: IIF(risk_unit_seq_num ='0' and risk_type_ind = 'N/A','00',\r\n\t-- IIF(LENGTH(risk_unit_seq_num)=1 and risk_unit_seq_num <> '0' and risk_type_ind = 'N/A', risk_unit_seq_num || '0',risk_unit_seq_num || risk_type_ind ))\n\tIFF(risk_unit_seq_num = '0' AND risk_type_ind = 'N/A', '00', IFF(LENGTH(risk_unit_seq_num) = 1 AND risk_unit_seq_num <> '0' AND risk_type_ind = 'N/A', risk_unit_seq_num || '0', risk_unit_seq_num || risk_type_ind)) AS risk_unit_seq_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.major_peril_code,\n\t-- *INF*: IIF(major_peril_code='N/A','000',major_peril_code)\n\tIFF(major_peril_code = 'N/A', '000', major_peril_code) AS major_peril_code_Out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.major_peril_seq,\n\t-- *INF*: IIF(major_peril_seq='N/A','00',major_peril_seq)\n\tIFF(major_peril_seq = 'N/A', '00', major_peril_seq) AS major_peril_seq_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pms_loss_disability,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.reserve_ctgry,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.cause_of_loss,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pms_type_exposure,\n\t-- *INF*: IIF(pms_type_exposure = 'N/A','000',pms_type_exposure)\n\tIFF(pms_type_exposure = 'N/A', '000', pms_type_exposure) AS pms_type_exposure_out,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.pms_type_bureau_code,\n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.cost_containment_saving_amt,\n\tEXP_Loss_Master_Offset_Onset_Reserves.sar_id,\n\tEXP_Loss_Master_Offset_Onset_Reserves.financial_type_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.s3p_trans_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.pms_trans_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_date,\n\tEXP_Loss_Master_Offset_Onset_Reserves.pms_acct_entered_date,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_base_type_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_ctgry_code,\n\tEXP_Loss_Master_Offset_Onset_Reserves.Exceed_Trans_Code,\n\t-- *INF*: TO_CHAR(trans_date,'YYYYMMDD')\n\tTO_CHAR(trans_date, 'YYYYMMDD') AS V_Trans_Date_char,\n\t-- *INF*: TO_CHAR(pms_acct_entered_date,'YYYYMMDD')\r\n\t-- \r\n\t-- \n\tTO_CHAR(pms_acct_entered_date, 'YYYYMMDD') AS V_pms_acct_entered_date_char,\n\t-- *INF*: SUBSTR(V_Trans_Date_char,1,6)\r\n\t-- \r\n\t-- ----IIF(SUBSTR(V_Trans_Date_char,1,6) <= SUBSTR(V_pms_acct_entered_date_char,1,6), \r\n\t-- ----                                SUBSTR(V_pms_acct_entered_date_char,1,6), SUBSTR(V_Trans_Date_char,1,6))\r\n\t-- \r\n\t-- \r\n\t-- \n\tSUBSTR(V_Trans_Date_char, 1, 6) AS V_Trans_PMS_Account_Date,\n\tV_Trans_PMS_Account_Date AS Transaction_Account_Date,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_amt,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_hist_amt AS IN_trans_hist_amt,\n\t-- *INF*: IIF(IN (pms_trans_code,'97','98','99','26','27','81','83','82','84','89','75','76') \r\n\t-- AND source_sys_id <> 'PMS', -1 * IN_trans_hist_amt, IN_trans_hist_amt)\r\n\t-- \r\n\t-- --- Added 76 trans_code\r\n\t-- \n\tIFF(IN(pms_trans_code, '97', '98', '99', '26', '27', '81', '83', '82', '84', '89', '75', '76') AND source_sys_id <> 'PMS', - 1 * IN_trans_hist_amt, IN_trans_hist_amt) AS v_trans_hist_amt,\n\tv_trans_hist_amt AS trans_hist_amt,\n\tEXP_Loss_Master_Offset_Onset_Reserves.source_sys_id,\n\t-- *INF*: ADD_TO_DATE(SYSDATE,'MM',@{pipeline().parameters.NO_OF_MONTHS})\n\tADD_TO_DATE(SYSDATE, 'MM', @{pipeline().parameters.NO_OF_MONTHS}) AS V_Last_Month_Date,\n\t-- *INF*: LAST_DAY(V_Last_Month_Date)\n\tLAST_DAY(V_Last_Month_Date) AS V_Last_Month_Last_Day_Date,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'YYYY')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'YYYY') AS V_Account_Date_YYYY,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'MM')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'MM') AS V_Account_Date_MM,\n\t-- *INF*: V_Account_Date_YYYY || LPAD(V_Account_Date_MM,2,'0')\n\tV_Account_Date_YYYY || LPAD(V_Account_Date_MM, 2, '0') AS V_Account_Date,\n\t-- *INF*: V_Account_Date\r\n\t-- ---@{pipeline().parameters.ACCOUNT_DATE}\r\n\t-- ---- Date of the previous month, as we are processing previous months data.\n\tV_Account_Date AS V_Account_Date_To_Check,\n\tV_Account_Date AS PMS_Account_Date_To_Check,\n\t-- *INF*: IIF\r\n\t-- (\r\n\t--     (NOT IN(pms_trans_code,'43','65','66','91') \r\n\t--            AND (V_Trans_PMS_Account_Date = V_Account_Date_To_Check OR SUBSTR(V_pms_acct_entered_date_char,1,6) = V_Account_Date_To_Check )\r\n\t--      )\r\n\t--    OR \r\n\t--     (IN(pms_trans_code,'90','92','95','97','98','99')  \r\n\t--     --AND SUBSTR(source_claim_occurrence_status_code,1,1) = 'O' \r\n\t--     --AND SUBSTR(source_claim_occurrence_status_code,1,3) <> 'OFF'\r\n\t--     ),\r\n\t-- 'VALID','INVALID'\r\n\t-- )\r\n\t-- \r\n\t-- ----3/28/2011  OR V_pms_acct_entered_date_char = V_Account_Date_To_Check  : To include the Offset records of exceed claims into calc table.\r\n\t-- \r\n\t-- ---- 3/14/2011  Added the condition to check on pms_acct_entered_date for EXCEED Offset_Onset Data\n\tIFF(( NOT IN(pms_trans_code, '43', '65', '66', '91') AND ( V_Trans_PMS_Account_Date = V_Account_Date_To_Check OR SUBSTR(V_pms_acct_entered_date_char, 1, 6) = V_Account_Date_To_Check ) ) OR ( IN(pms_trans_code, '90', '92', '95', '97', '98', '99') ), 'VALID', 'INVALID') AS V_Valid_Claim_Transaction,\n\t-- *INF*: IIF(NOT ISNULL(claim_trans_id), \r\n\t--            IIF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID','INVALID'),\r\n\t--              IIF(V_Valid_Claim_Transaction = 'VALID' ,'VALID','INVALID')\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- ---4/11/2011- Below logic  was changed to the above so that different logic for Claim_Transaction_Records and Claim_Reinsurance_transaction records as there is not s3p_trans_code for Reinsurance_Transactions.\r\n\t-- \r\n\t-- ---IIF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID','INVALID')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- -------------------------------------------------\r\n\t-- --DECODE(TRUE, \r\n\t-- ---IIF(NOT ISNULL(claim_trans_id),\r\n\t-- ---V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID',\r\n\t-- ---V_Valid_Claim_Transaction = 'VALID','VALID',\r\n\t-- --'INVALID')\r\n\t-- --)\r\n\t-- \n\tIFF(NOT claim_trans_id IS NULL, IFF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code, 'E66', 'E65', 'B65', 'B66', 'R65', 'R66', 'S65', 'S66'), 'VALID', 'INVALID'), IFF(V_Valid_Claim_Transaction = 'VALID', 'VALID', 'INVALID')) AS Valid_Claim_Transaction,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99') AND pms_trans_code <> '95',trans_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND pms_trans_code <> '95', trans_amt, 0.0) AS V_LM_Amount_OutStanding,\n\t-- *INF*: IIF(IN(pms_trans_code,'97','98','99') AND source_sys_id <> 'PMS', -1 * V_LM_Amount_OutStanding,V_LM_Amount_OutStanding)\r\n\t-- \r\n\t-- \r\n\t-- --- When Exceed data backfeeds to PMS, B90,B91 become as 99 and sign on the amount field changes to -ve sign aling with value. \r\n\t-- --- Changed the sign of the amount field only for EXCEED EDW Data\r\n\t-- ---- 11/12/2010 Added other transaction code 97, 98\n\tIFF(IN(pms_trans_code, '97', '98', '99') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_OutStanding, V_LM_Amount_OutStanding) AS LM_Amount_OutStanding,\n\t-- *INF*: IIF(NOT IN(pms_trans_code,'90','92','95','97','98','99') AND NOT IN(pms_trans_code,'71','72','73','74','75','76','77','78',   '79'),trans_amt,0.0)\n\tIFF(NOT IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND NOT IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79'), trans_amt, 0.0) AS V_LM_Amount_Paid_Losses,\n\t-- *INF*: IIF(IN(pms_trans_code,'26','27','37','81','83','82','84','88','89') AND source_sys_id <>'PMS', \r\n\t-- -1 * V_LM_Amount_Paid_Losses, V_LM_Amount_Paid_Losses)\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- ---- B22,B23,B24 convert to 82,83,84 into PMS during backfeed and amount field is multiplied by a -ve sign.\r\n\t-- ---- 26,27 trans_code in PMS relate to Recovery so the amount field is multiplied by a -ve sign\n\tIFF(IN(pms_trans_code, '26', '27', '37', '81', '83', '82', '84', '88', '89') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_Paid_Losses, V_LM_Amount_Paid_Losses) AS LM_Amount_Paid_Losses,\n\t-- *INF*: IIF(NOT IN(pms_trans_code,'90','92','95','97','98','99') AND IN(pms_trans_code,'71','72','73','74','75','76','77','78','79'),trans_amt,0.0)\n\tIFF(NOT IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79'), trans_amt, 0.0) AS V_LM_Amount_Paid_Expenses,\n\t-- *INF*: IIF(IN(pms_trans_code ,'75','76') AND source_sys_id <>  'PMS',\r\n\t-- -1 * V_LM_Amount_Paid_Expenses, V_LM_Amount_Paid_Expenses)\r\n\t-- \r\n\t-- ---- R21EX,R22EX,R23EX,R24EX,R29EX converts into 75 when it backfeeds along with amount field being multiplied with -ve sign.\r\n\t-- ---12/10/2010  Added 76 to above as R29EX converts to 76 \n\tIFF(IN(pms_trans_code, '75', '76') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_Paid_Expenses, V_LM_Amount_Paid_Expenses) AS LM_Amount_Paid_Expenses,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99') AND pms_trans_code = '95',trans_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND pms_trans_code = '95', trans_amt, 0.0) AS V_LM_Unpaid_Loss_Adj_Exp,\n\tV_LM_Unpaid_Loss_Adj_Exp AS LM_Unpaid_Loss_Adj_Exp,\n\t-- *INF*: SET_DATE_PART(\r\n\t--          SET_DATE_PART(\r\n\t--                      SET_DATE_PART( V_Last_Month_Last_Day_Date, 'HH', 23) \r\n\t--                                           ,'MI',59)\r\n\t--                                ,'SS',59)\r\n\t-- \r\n\t-- \r\n\t-- --- Changing the date to have 00:00:00 in the timestamp part\r\n\t-- \n\tSET_DATE_PART(SET_DATE_PART(SET_DATE_PART(V_Last_Month_Last_Day_Date, 'HH', 23), 'MI', 59), 'SS', 59) AS Loss_Master_Run_Date,\n\tEXP_Loss_Master_Offset_Onset_Reserves.trans_offset_onset_ind,\n\tSQL_calculate_reserves.outstandingReserve AS IN_LM_override_amt,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','97','98','99')=1,IN_LM_override_amt ,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '97', '98', '99') = 1, IN_LM_override_amt, 0.0) AS LM_Amount_Outstanding_Override,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99','71','72','73','74','75','76','77','78', '79')=0,IN_LM_override_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99', '71', '72', '73', '74', '75', '76', '77', '78', '79') = 0, IN_LM_override_amt, 0.0) AS LM_Amount_Paid_Losses_Override,\n\t-- *INF*: IIF( IN(pms_trans_code,'71','72','73','74','75','76','77','78','79')=1,IN_LM_override_amt,0.0)\n\tIFF(IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79') = 1, IN_LM_override_amt, 0.0) AS LM_Amount_Paid_Expenses_Override,\n\t-- *INF*: IIF(pms_trans_code = '95',IN_LM_override_amt,0.0)\n\tIFF(pms_trans_code = '95', IN_LM_override_amt, 0.0) AS LM_Unpaid_Loss_Adj_Exp_Override\n\tFROM EXP_Loss_Master_Offset_Onset_Reserves\n\t -- Manually join with SQL_calculate_reserves\n\t -- Manually join with mplt_LM_Policy_n_Claim_Attributes_Reserves\n),\nFIL_Claim_Transaction_Rows_Reserves AS (\n\tSELECT\n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_trans_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_trans_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_party_occurrence_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_occurrence_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_party_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claimant_cov_det_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_pay_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pol_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.contract_cust_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.agency_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pol_eff_date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pol_exp_date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_rep_ak_id_H, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_rep_ak_id_E, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.wc_claimant_det_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_case_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claim_occurrence_key, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.source_claim_occurrence_status_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Policy_key, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.s3p_Claim_Num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.claimant_num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Claim_loss_date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.LM_Variation_Code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Policy_Symbol, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Policy_Number, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Policy_Module, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.loc_unit_num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.loc_unit_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.sub_loc_unit_num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.sub_loc_unit_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.ins_line, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.ins_line_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_grp, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_grp_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_grp_seq_num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_grp_seq_num_First_2pos, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_grp_seq_num_last_pos, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_out AS risk_unit, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_seq_num, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.risk_unit_seq_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.major_peril_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.major_peril_code_Out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.major_peril_seq, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.major_peril_seq_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_loss_disability, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.reserve_ctgry, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.cause_of_loss, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_type_exposure, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_type_exposure_out, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_type_bureau_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.sar_id, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.financial_type_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.s3p_trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.pms_acct_entered_date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_base_type_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_ctgry_code, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_amt, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_hist_amt, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Transaction_Account_Date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Valid_Claim_Transaction, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.LM_Amount_Outstanding_Override AS LM_Amount_OutStanding, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.LM_Amount_Paid_Losses_Override AS LM_Amount_Paid_Losses, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.LM_Amount_Paid_Expenses_Override AS LM_Amount_Paid_Expenses, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.LM_Unpaid_Loss_Adj_Exp_Override AS LM_Unpaid_Loss_Adj_Exp, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.Loss_Master_Run_Date, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.PMS_Account_Date_To_Check, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.cost_containment_saving_amt, \n\tEXP_Determine_Loss_Master_Output_Rows_Reserves.trans_offset_onset_ind, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.StatisticalCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.RatingCoverageAKId AS RatingCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.PolicySourceID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.ClassCode, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.SublineCode, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.PolicyCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.RiskLocationAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.PremiumTransactionAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.BureauStatisticalCodeAKID, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.RiskTerritory, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.StateProvinceCode, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.ZipPostalCode, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.TaxLocation, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.Exposure, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.BureauStatisticalcode1_15, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.BureauSpecialUseCode, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.PMSAnnualStatementLine, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.RatingDateIndicator, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.BureauStatisticalUserLine, \n\tmplt_LM_Policy_n_Claim_Attributes_Reserves.AuditReinstatementIndicator\n\tFROM EXP_Determine_Loss_Master_Output_Rows_Reserves\n\t -- Manually join with mplt_LM_Policy_n_Claim_Attributes_Reserves\n\tWHERE IIF(Valid_Claim_Transaction = 'VALID',TRUE,FALSE)\n),\nLKP_gtamTM08_stage_Reserves AS (\n\tSELECT\n\tcoverage_code,\n\tmajor_peril\n\tFROM (\n\t\tSELECT gtam_tm08_stage.coverage_code as coverage_code, \r\n\t\tRTRIM(gtam_tm08_stage.major_peril) as major_peril \r\n\t\tFROM gtam_tm08_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY major_peril ORDER BY coverage_code DESC) = 1\n),\nmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tloss_id,\n\t\tins_line,\n\t\t-- *INF*: RTRIM(ins_line)\n\t\tRTRIM(ins_line) AS ins_line_out,\n\t\tloc_unit_num,\n\t\t-- *INF*: RTRIM(loc_unit_num)\n\t\tRTRIM(loc_unit_num) AS loc_unit_num1,\n\t\tsub_loc_unit_num,\n\t\t-- *INF*: RTRIM(sub_loc_unit_num)\n\t\tRTRIM(sub_loc_unit_num) AS sub_loc_unit_num1,\n\t\trisk_unit_grp,\n\t\t-- *INF*: RTRIM(risk_unit_grp)\n\t\tRTRIM(risk_unit_grp) AS risk_unit_grp1,\n\t\trisk_unit_grp_seq_num_First_2pos,\n\t\t-- *INF*: RTRIM(risk_unit_grp_seq_num_First_2pos)\n\t\tRTRIM(risk_unit_grp_seq_num_First_2pos) AS risk_unit_grp_seq_num_First_2pos1,\n\t\trisk_unit_grp_seq_num_last_pos,\n\t\t-- *INF*: RTRIM(risk_unit_grp_seq_num_last_pos)\n\t\tRTRIM(risk_unit_grp_seq_num_last_pos) AS risk_unit_grp_seq_num_last_pos1,\n\t\trisk_unit_complete,\n\t\t-- *INF*: RTRIM(risk_unit_complete)\n\t\tRTRIM(risk_unit_complete) AS risk_unit_complete1,\n\t\trisk_unit_seq_num,\n\t\t-- *INF*: RTRIM(risk_unit_seq_num)\n\t\tRTRIM(risk_unit_seq_num) AS risk_unit_seq_num1,\n\t\tpms_type_exposure,\n\t\t-- *INF*: RTRIM(pms_type_exposure)\n\t\tRTRIM(pms_type_exposure) AS pms_type_exposure1,\n\t\tmajor_peril_code,\n\t\t-- *INF*: RTRIM(major_peril_code)\n\t\tRTRIM(major_peril_code) AS major_peril_code1,\n\t\tmajor_peril_seq,\n\t\t-- *INF*: RTRIM(major_peril_seq)\n\t\tRTRIM(major_peril_seq) AS major_peril_seq1,\n\t\tClaim_loss_date\n\t\tFROM INPUT\n\t),\n\tLKP_Coverage_Temp_Policy_Transaction AS (\n\t\tSELECT\n\t\tcov_ak_id,\n\t\ttemp_pol_trans_ak_id,\n\t\tpol_ak_id,\n\t\tsar_id,\n\t\tins_line,\n\t\tloc_unit_num,\n\t\tsub_loc_unit_num,\n\t\trisk_unit_grp,\n\t\trisk_unit_grp_seq_num_First_2pos,\n\t\trisk_unit_grp_seq_num_lastpos,\n\t\trisk_unit,\n\t\trisk_unit_seq_num,\n\t\tmajor_peril_code,\n\t\tmajor_peril_seq_num,\n\t\tpms_type_exposure,\n\t\tcov_eff_date,\n\t\ttype_bureau_code,\n\t\trisk_state_prov_code,\n\t\trisk_zip_code,\n\t\tterr_code,\n\t\ttax_loc,\n\t\tclass_code,\n\t\texposure,\n\t\tsub_line_code,\n\t\tsource_sar_asl,\n\t\tsource_sar_prdct_line,\n\t\tsource_sar_sp_use_code,\n\t\tsource_statistical_code,\n\t\tsection_code,\n\t\trsn_amended_code,\n\t\tpart_code,\n\t\trating_date_ind\n\t\tFROM (\n\t\t\tSELECT  C.cov_ak_id                     AS cov_ak_id,  \r\n\t\t\tTPT.temp_pol_trans_ak_id   AS temp_pol_trans_ak_id,  \r\n\t\t\tCASE  C.pms_type_exposure WHEN 'N/A' THEN '000' ELSE RTRIM(C.pms_type_exposure)   END AS pms_type_exposure,  \r\n\t\t\tC.type_bureau_code              AS type_bureau_code,  \r\n\t\t\tTPT.risk_state_prov_code        AS risk_state_prov_code,  \r\n\t\t\tTPT.risk_zip_code               AS risk_zip_code,  \r\n\t\t\tTPT.terr_code                   AS terr_code,  \r\n\t\t\tTPT.tax_loc                     AS tax_loc,  \r\n\t\t\tTPT.class_code                  AS class_code,  \r\n\t\t\tTPT.exposure                      AS exposure,  \r\n\t\t\tTPT.sub_line_code               AS sub_line_code,  \r\n\t\t\tTPT.source_sar_asl              AS source_sar_asl,  \r\n\t\t\tTPT.source_sar_prdct_line       AS source_sar_prdct_line,  \r\n\t\t\tTPT.source_sar_sp_use_code\t AS source_sar_sp_use_code,  \r\n\t\t\tTPT.source_statistical_code     AS source_statistical_code,  \r\n\t\t\tTPT.section_code                AS section_code,  \r\n\t\t\tTPT.rsn_amended_code            AS rsn_amended_code,  \r\n\t\t\tTPT.part_code                   AS part_code,  \r\n\t\t\tRTRIM(TPT.rating_date_ind)        AS rating_date_ind,  \r\n\t\t\tC.pol_ak_id                     AS pol_ak_id,  \r\n\t\t\tTPT.sar_id                      AS sar_id,  \r\n\t\t\tCASE C.ins_line WHEN 'N/A' THEN 'NA' ELSE RTRIM(C.ins_line) END AS ins_line,  \r\n\t\t\tCASE  C.loc_unit_num  WHEN 'N/A' THEN '0000' ELSE RTRIM(C.loc_unit_num)  END AS loc_unit_num,  \r\n\t\t\tCASE  C.sub_loc_unit_num  WHEN 'N/A' THEN '000' ELSE RTRIM(C.sub_loc_unit_num)   END AS sub_loc_unit_num,  \r\n\t\t\tCASE  C.risk_unit_grp   WHEN 'N/A' THEN '000' ELSE RTRIM(C.risk_unit_grp)    END AS risk_unit_grp,  \r\n\t\t\tCASE  SUBSTRING(C.risk_unit_grp_seq_num,1,2)   WHEN 'N/' THEN 'NA' ELSE SUBSTRING(C.risk_unit_grp_seq_num,1,2) END AS risk_unit_grp_seq_num_First_2pos,  \r\n\t\t\tCASE  SUBSTRING(C.risk_unit_grp_seq_num,3,1)   WHEN 'A' THEN 'N' ELSE SUBSTRING(C.risk_unit_grp_seq_num,3,1) END AS risk_unit_grp_seq_num_lastpos,  \r\n\t\t\tRTRIM(C.risk_unit)               AS risk_unit,  \r\n\t\t\tCASE   C.risk_unit_seq_num   WHEN 'N/A' THEN '00' ELSE  RTRIM(C.risk_unit_seq_num)    END AS risk_unit_seq_num,  \r\n\t\t\tRTRIM(C.major_peril_code)              AS major_peril_code,  \r\n\t\t\tRTRIM(C.major_peril_seq_num)           AS major_peril_seq_num,  \r\n\t\t\tC.cov_eff_date                  AS cov_eff_date \r\n\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.coverage C \r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.temp_policy_transaction TPT ON C.cov_ak_id = TPT.cov_ak_id AND C.crrnt_snpsht_flag = 1 AND TPT.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claim_Occurrence CO ON CO.pol_key_ak_id = C.pol_ak_id and CO.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claim_Party_Occurrence CPO ON CPO.Claim_Occurrence_ak_id = CO.Claim_Occurrence_ak_id and CPO.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claimant_Coverage_Detail CCD ON CCD.Claim_Party_Occurrence_ak_id = CPO.Claim_Party_Occurrence_ak_id and CCD.crrnt_snpsht_flag = 1\r\n\t\t\tAND RTRIM(C.risk_unit) = CCD.Risk_unit AND RTRIM(C.major_peril_code)  = CCD.major_peril_code\r\n\t\t\tORDER BY TPT.temp_pol_trans_ak_id   --\r\n\t\t\t\r\n\t\t\t--- Order By clause is important in this Lookup Override because how the data is retrieved is important\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,sar_id,ins_line,loc_unit_num,sub_loc_unit_num,risk_unit_grp,risk_unit_grp_seq_num_First_2pos,risk_unit_grp_seq_num_lastpos,risk_unit,risk_unit_seq_num,major_peril_code,major_peril_seq_num,cov_eff_date ORDER BY cov_ak_id DESC) = 1\n\t),\n\tEXP_Lkp_Values AS (\n\t\tSELECT\n\t\tLKP_Coverage_Temp_Policy_Transaction.temp_pol_trans_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.cov_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.pol_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sar_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.ins_line,\n\t\tLKP_Coverage_Temp_Policy_Transaction.loc_unit_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sub_loc_unit_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_First_2pos,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_lastpos,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_seq_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.major_peril_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.major_peril_seq_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.pms_type_exposure,\n\t\tLKP_Coverage_Temp_Policy_Transaction.cov_eff_date,\n\t\tLKP_Coverage_Temp_Policy_Transaction.type_bureau_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_state_prov_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_zip_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.terr_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.tax_loc,\n\t\tLKP_Coverage_Temp_Policy_Transaction.class_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.exposure,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sub_line_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_asl,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_prdct_line,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_sp_use_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_statistical_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.section_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.rsn_amended_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.part_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.rating_date_ind,\n\t\tEXP_Values.Claim_loss_date\n\t\tFROM EXP_Values\n\t\tLEFT JOIN LKP_Coverage_Temp_Policy_Transaction\n\t\tON LKP_Coverage_Temp_Policy_Transaction.pol_ak_id = EXP_Values.pol_ak_id AND LKP_Coverage_Temp_Policy_Transaction.sar_id = EXP_Values.loss_id AND LKP_Coverage_Temp_Policy_Transaction.ins_line = EXP_Values.ins_line_out AND LKP_Coverage_Temp_Policy_Transaction.loc_unit_num = EXP_Values.loc_unit_num1 AND LKP_Coverage_Temp_Policy_Transaction.sub_loc_unit_num = EXP_Values.sub_loc_unit_num1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp = EXP_Values.risk_unit_grp1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_First_2pos = EXP_Values.risk_unit_grp_seq_num_First_2pos1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_lastpos = EXP_Values.risk_unit_grp_seq_num_last_pos1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit = EXP_Values.risk_unit_complete1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_seq_num = EXP_Values.risk_unit_seq_num1 AND LKP_Coverage_Temp_Policy_Transaction.major_peril_code = EXP_Values.major_peril_code1 AND LKP_Coverage_Temp_Policy_Transaction.major_peril_seq_num = EXP_Values.major_peril_seq1 AND LKP_Coverage_Temp_Policy_Transaction.cov_eff_date <= EXP_Values.Claim_loss_date\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tcov_ak_id AS cov_ak_id_Out, \n\t\tpol_ak_id AS pol_ak_id_Out, \n\t\ttemp_pol_trans_ak_id, \n\t\tsar_id AS loss_id_Out, \n\t\tins_line AS ins_line_Out, \n\t\tloc_unit_num AS loc_unit_num_Out, \n\t\tsub_loc_unit_num AS sub_loc_unit_num_Out, \n\t\trisk_unit_grp AS risk_unit_grp_Out, \n\t\trisk_unit_grp_seq_num_First_2pos AS risk_unit_grp_seq_num_First_2pos_Out, \n\t\trisk_unit_grp_seq_num_lastpos AS risk_unit_grp_seq_num_last_pos_Out, \n\t\trisk_unit AS risk_unit_complete_Out, \n\t\trisk_unit_seq_num AS risk_unit_seq_num_Out, \n\t\tmajor_peril_code AS major_peril_code_Out, \n\t\tmajor_peril_seq_num AS major_peril_seq_Out, \n\t\tpms_type_exposure AS pms_type_exposure_Out, \n\t\tcov_eff_date AS cov_eff_date_Out, \n\t\ttype_bureau_code AS type_bureau_code_Out, \n\t\trisk_state_prov_code AS risk_state_prov_code_Out, \n\t\trisk_zip_code AS risk_zip_code_Out, \n\t\tterr_code AS terr_code_Out, \n\t\ttax_loc AS tax_loc_Out, \n\t\tclass_code AS class_code_Out, \n\t\texposure AS exposure_Out, \n\t\tsub_line_code AS sub_line_code_Out, \n\t\tsource_sar_asl AS source_sar_asl_Out, \n\t\tsource_sar_prdct_line AS source_sar_prdct_line_Out, \n\t\tsource_sar_sp_use_code, \n\t\tsource_statistical_code AS source_statistical_code_Out, \n\t\tsource_statistical_line AS source_statistical_line_Out, \n\t\tsection_code AS section_code_Out, \n\t\trsn_amended_code AS rsn_amended_code_Out, \n\t\tpart_code AS part_code_Out, \n\t\trating_date_ind, \n\t\tClaim_loss_date AS Claim_loss_date_Out\n\t\tFROM EXP_Lkp_Values\n\t),\n),\nEXP_Derive_Values_Reserves AS (\n\tSELECT\n\tFIL_Claim_Transaction_Rows_Reserves.pol_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claimant_cov_det_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_trans_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_trans_id,\n\tFIL_Claim_Transaction_Rows_Reserves.contract_cust_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.agency_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_rep_ak_id_H,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_rep_ak_id_E,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_pay_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_case_ak_id,\n\t-- *INF*: IIF(ISNULL(claim_case_ak_id), -1 , claim_case_ak_id)\n\tIFF(claim_case_ak_id IS NULL, - 1, claim_case_ak_id) AS claim_case_ak_id_out,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_party_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_party_occurrence_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_occurrence_ak_id,\n\tFIL_Claim_Transaction_Rows_Reserves.wc_claimant_det_ak_id,\n\t-- *INF*: IIF(ISNULL(wc_claimant_det_ak_id),-1,wc_claimant_det_ak_id)\n\tIFF(wc_claimant_det_ak_id IS NULL, - 1, wc_claimant_det_ak_id) AS wc_claimant_det_ak_id_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.claim_occurrence_key,\n\tFIL_Claim_Transaction_Rows_Reserves.Policy_key,\n\tFIL_Claim_Transaction_Rows_Reserves.Claim_loss_date,\n\t-- *INF*: TO_CHAR(Claim_loss_date,'YYYYMMDD')\n\tTO_CHAR(Claim_loss_date, 'YYYYMMDD') AS Claim_loss_date_char,\n\tFIL_Claim_Transaction_Rows_Reserves.Policy_Symbol,\n\tFIL_Claim_Transaction_Rows_Reserves.Policy_Number,\n\tFIL_Claim_Transaction_Rows_Reserves.Policy_Module,\n\tFIL_Claim_Transaction_Rows_Reserves.loc_unit_num,\n\tFIL_Claim_Transaction_Rows_Reserves.loc_unit_num_out,\n\tFIL_Claim_Transaction_Rows_Reserves.sub_loc_unit_num,\n\tFIL_Claim_Transaction_Rows_Reserves.sub_loc_unit_num_out,\n\tFIL_Claim_Transaction_Rows_Reserves.ins_line,\n\tFIL_Claim_Transaction_Rows_Reserves.ins_line_out,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_grp,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_grp_out,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_grp_seq_num,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_grp_seq_num_First_2pos,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_grp_seq_num_last_pos,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_seq_num,\n\tFIL_Claim_Transaction_Rows_Reserves.risk_unit_seq_num_out,\n\tFIL_Claim_Transaction_Rows_Reserves.major_peril_code,\n\tFIL_Claim_Transaction_Rows_Reserves.major_peril_code_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.major_peril_seq,\n\tFIL_Claim_Transaction_Rows_Reserves.major_peril_seq_out,\n\tFIL_Claim_Transaction_Rows_Reserves.pms_loss_disability,\n\tFIL_Claim_Transaction_Rows_Reserves.reserve_ctgry,\n\tFIL_Claim_Transaction_Rows_Reserves.cause_of_loss,\n\tFIL_Claim_Transaction_Rows_Reserves.pms_type_bureau_code,\n\tFIL_Claim_Transaction_Rows_Reserves.sar_id,\n\tFIL_Claim_Transaction_Rows_Reserves.financial_type_code,\n\tFIL_Claim_Transaction_Rows_Reserves.pms_trans_code,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_code,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_date,\n\tFIL_Claim_Transaction_Rows_Reserves.pms_acct_entered_date,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_base_type_code,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_ctgry_code,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_amt,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_hist_amt,\n\tFIL_Claim_Transaction_Rows_Reserves.LM_Amount_OutStanding,\n\tFIL_Claim_Transaction_Rows_Reserves.LM_Amount_Paid_Losses,\n\tFIL_Claim_Transaction_Rows_Reserves.LM_Amount_Paid_Expenses,\n\tFIL_Claim_Transaction_Rows_Reserves.LM_Unpaid_Loss_Adj_Exp,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.temp_pol_trans_ak_id,\n\t-- *INF*: IIF(ISNULL(temp_pol_trans_ak_id),-1,temp_pol_trans_ak_id)\n\tIFF(temp_pol_trans_ak_id IS NULL, - 1, temp_pol_trans_ak_id) AS temp_pol_trans_ak_id_Out,\n\t-- *INF*: 'VALID'\r\n\t-- \r\n\t-- --  We dont want to filter out the Claim_Transaction Records if matching Temp_Policy_Transaction record is not found.\r\n\t-- \r\n\t-- ---IIF(NOT ISNULL(temp_pol_trans_ak_id),'VALID','NOTVALID')\n\t'VALID' AS V_Valid_sar_transaction,\n\t-- *INF*: IIF(V_Valid_sar_transaction = 'VALID',\r\n\t--             IIF(LM_Amount_OutStanding = 0.0 AND LM_Unpaid_Loss_Adj_Exp = 0.0 \r\n\t--                                AND LM_Amount_Paid_Losses=0.0 AND LM_Amount_Paid_Expenses=0.0, 'FILTER','NOFILTER')\r\n\t--     ,'FILTER')\n\tIFF(V_Valid_sar_transaction = 'VALID', IFF(LM_Amount_OutStanding = 0.0 AND LM_Unpaid_Loss_Adj_Exp = 0.0 AND LM_Amount_Paid_Losses = 0.0 AND LM_Amount_Paid_Expenses = 0.0, 'FILTER', 'NOFILTER'), 'FILTER') AS V_Transaction_Filter,\n\tV_Transaction_Filter AS Transaction_Filter,\n\tFIL_Claim_Transaction_Rows_Reserves.source_claim_occurrence_status_code,\n\tFIL_Claim_Transaction_Rows_Reserves.pol_eff_date,\n\tFIL_Claim_Transaction_Rows_Reserves.pol_exp_date,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.cov_ak_id_Out AS cov_ak_id,\n\t-- *INF*: IIF(ISNULL(cov_ak_id),-1,cov_ak_id)\n\tIFF(cov_ak_id IS NULL, - 1, cov_ak_id) AS cov_ak_id_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.pol_ak_id_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.cov_eff_date_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.type_bureau_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.risk_state_prov_code_Out AS risk_state_prov_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),StateProvinceCode,risk_state_prov_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), StateProvinceCode, risk_state_prov_code) AS risk_state_prov_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.risk_zip_code_Out AS risk_zip_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),ZipPostalCode,risk_zip_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), ZipPostalCode, risk_zip_code) AS risk_zip_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.terr_code_Out AS terr_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),RiskTerritory,terr_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), RiskTerritory, terr_code) AS terr_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.tax_loc_Out AS tax_loc,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),TaxLocation,tax_loc)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), TaxLocation, tax_loc) AS tax_loc_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.class_code_Out AS class_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),ClassCode,class_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), ClassCode, class_code) AS class_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.exposure_Out AS IN_exposure,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),Exposure,IN_exposure)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), Exposure, IN_exposure) AS exposure_out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.sub_line_code_Out AS sub_line_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),SublineCode,sub_line_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), SublineCode, sub_line_code) AS sub_line_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.source_sar_asl_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.source_sar_prdct_line_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.source_sar_sp_use_code,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.source_statistical_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.source_statistical_line_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.section_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.rsn_amended_code_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.Transaction_Account_Date,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.part_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves.rating_date_ind,\n\t-- *INF*: GET_DATE_PART(trans_date,'MONTH')\n\tGET_DATE_PART(trans_date, 'MONTH') AS Trans_Date_Month,\n\t-- *INF*: GET_DATE_PART(trans_date,'DD')\n\tGET_DATE_PART(trans_date, 'DD') AS Trans_Date_Day,\n\t-- *INF*: GET_DATE_PART(trans_date,'YYYY')\n\tGET_DATE_PART(trans_date, 'YYYY') AS Trans_Date_Year,\n\t-- *INF*: DECODE(TRUE,IN( type_bureau_code_Out,'AL','LP','AI','LI','RL'), '100',\r\n\t-- IN( type_bureau_code_Out,'GS','GM','RG'),'400',\r\n\t-- IN( type_bureau_code_Out,'WC','WP'),'500',\r\n\t-- IN( type_bureau_code_Out,'GL','GI','GN','RQ'),'600',\r\n\t-- IN( type_bureau_code_Out,'FF','FM','BF','BP','FT','FP'),'711',\r\n\t-- IN( type_bureau_code_Out,'BD'),'722',\r\n\t-- IN( type_bureau_code_Out,'BI','BT','RB'),'800')\n\tDECODE(TRUE,\n\tIN(type_bureau_code_Out, 'AL', 'LP', 'AI', 'LI', 'RL'), '100',\n\tIN(type_bureau_code_Out, 'GS', 'GM', 'RG'), '400',\n\tIN(type_bureau_code_Out, 'WC', 'WP'), '500',\n\tIN(type_bureau_code_Out, 'GL', 'GI', 'GN', 'RQ'), '600',\n\tIN(type_bureau_code_Out, 'FF', 'FM', 'BF', 'BP', 'FT', 'FP'), '711',\n\tIN(type_bureau_code_Out, 'BD'), '722',\n\tIN(type_bureau_code_Out, 'BI', 'BT', 'RB'), '800') AS V_Statistical_Line,\n\t-- *INF*: IIF(ISNULL(V_Statistical_Line),'N/A',V_Statistical_Line)\n\tIFF(V_Statistical_Line IS NULL, 'N/A', V_Statistical_Line) AS Statistical_Line,\n\tFIL_Claim_Transaction_Rows_Reserves.cost_containment_saving_amt,\n\tLKP_gtamTM08_stage_Reserves.coverage_code,\n\t-- *INF*: IIF(ISNULL(coverage_code),'N/A',coverage_code)\n\tIFF(coverage_code IS NULL, 'N/A', coverage_code) AS coverage_code_out,\n\t-1 AS Default_Id,\n\t'N/A' AS Default_NA,\n\tFIL_Claim_Transaction_Rows_Reserves.PMS_Account_Date_To_Check,\n\t-- *INF*: IIF(rating_date_ind = 'C', cov_eff_date_Out , pol_eff_date)\n\tIFF(rating_date_ind = 'C', cov_eff_date_Out, pol_eff_date) AS v_incptn_date,\n\tv_incptn_date AS incptn_date,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- IN(risk_state_prov_code,'60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80') AND pms_trans_code = '25',1,\r\n\t-- IN(pms_trans_code, '22','42'),1,\r\n\t-- Transaction_Account_Date = PMS_Account_Date_To_Check AND IN(pms_trans_code, '90','92','23'),1,\r\n\t-- Transaction_Account_Date = PMS_Account_Date_To_Check AND pms_trans_code='41',-1,\r\n\t-- 0)\r\n\t-- \n\tDECODE(TRUE,\n\tIN(risk_state_prov_code, '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80') AND pms_trans_code = '25', 1,\n\tIN(pms_trans_code, '22', '42'), 1,\n\tTransaction_Account_Date = PMS_Account_Date_To_Check AND IN(pms_trans_code, '90', '92', '23'), 1,\n\tTransaction_Account_Date = PMS_Account_Date_To_Check AND pms_trans_code = '41', - 1,\n\t0) AS v_new_claim_count,\n\tv_new_claim_count AS new_claim_count,\n\ttrans_hist_amt AS orig_reserve,\n\t-- *INF*: 'N/A' \r\n\t-- \r\n\t-- ---- This field is populated only for Part -8 records\n\t'N/A' AS auto_reins_facility,\n\t-- *INF*: SUBSTR(source_sar_prdct_line_Out,1,2)\n\tSUBSTR(source_sar_prdct_line_Out, 1, 2) AS statistical_brkdwn_line,\n\tFIL_Claim_Transaction_Rows_Reserves.Loss_Master_Run_Date,\n\tFIL_Claim_Transaction_Rows_Reserves.LM_Variation_Code,\n\tFIL_Claim_Transaction_Rows_Reserves.trans_offset_onset_ind,\n\tFIL_Claim_Transaction_Rows_Reserves.StatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\t-- *INF*: IIF(ISNULL(i_StatisticalCoverageAKID), -1, i_StatisticalCoverageAKID)\n\tIFF(i_StatisticalCoverageAKID IS NULL, - 1, i_StatisticalCoverageAKID) AS o_StatisticalCoverageAKID,\n\tFIL_Claim_Transaction_Rows_Reserves.RatingCoverageAKID AS i_RatingCoverageAKID,\n\t-- *INF*: IIF(ISNULL(i_RatingCoverageAKID), -1, i_RatingCoverageAKID)\n\tIFF(i_RatingCoverageAKID IS NULL, - 1, i_RatingCoverageAKID) AS o_RatingCoverageAKID,\n\tFIL_Claim_Transaction_Rows_Reserves.PolicySourceID,\n\tFIL_Claim_Transaction_Rows_Reserves.ClassCode,\n\tFIL_Claim_Transaction_Rows_Reserves.SublineCode,\n\tFIL_Claim_Transaction_Rows_Reserves.PolicyCoverageAKID,\n\t-- *INF*: IIF(ISNULL(PolicyCoverageAKID),-1,PolicyCoverageAKID)\n\tIFF(PolicyCoverageAKID IS NULL, - 1, PolicyCoverageAKID) AS PolicyCoverageAKID_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.RiskLocationAKID,\n\t-- *INF*: IIF(ISNULL(RiskLocationAKID),-1,RiskLocationAKID)\n\tIFF(RiskLocationAKID IS NULL, - 1, RiskLocationAKID) AS RiskLocationAKID_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.PremiumTransactionAKID,\n\t-- *INF*: IIF(ISNULL(PremiumTransactionAKID),-1,PremiumTransactionAKID)\n\tIFF(PremiumTransactionAKID IS NULL, - 1, PremiumTransactionAKID) AS PremiumTransactionAKID_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.BureauStatisticalCodeAKID,\n\t-- *INF*: IIF(ISNULL(BureauStatisticalCodeAKID),-1,BureauStatisticalCodeAKID)\n\tIFF(BureauStatisticalCodeAKID IS NULL, - 1, BureauStatisticalCodeAKID) AS BureauStatisticalCodeAKID_Out,\n\tFIL_Claim_Transaction_Rows_Reserves.RiskTerritory,\n\tFIL_Claim_Transaction_Rows_Reserves.StateProvinceCode,\n\tFIL_Claim_Transaction_Rows_Reserves.ZipPostalCode,\n\tFIL_Claim_Transaction_Rows_Reserves.TaxLocation,\n\tFIL_Claim_Transaction_Rows_Reserves.Exposure,\n\tFIL_Claim_Transaction_Rows_Reserves.BureauStatisticalcode1_15,\n\tFIL_Claim_Transaction_Rows_Reserves.BureauSpecialUseCode,\n\tFIL_Claim_Transaction_Rows_Reserves.PMSAnnualStatementLine,\n\tFIL_Claim_Transaction_Rows_Reserves.RatingDateIndicator,\n\tFIL_Claim_Transaction_Rows_Reserves.BureauStatisticalUserLine,\n\tFIL_Claim_Transaction_Rows_Reserves.AuditReinstatementIndicator\n\tFROM FIL_Claim_Transaction_Rows_Reserves\n\t -- Manually join with mplt_Coverage_Temp_Policy_Transaction_Attributes_Reserves\n\tLEFT JOIN LKP_gtamTM08_stage_Reserves\n\tON LKP_gtamTM08_stage_Reserves.major_peril = FIL_Claim_Transaction_Rows_Reserves.major_peril_code_Out\n),\nEXP_Transform_Statistical_Codes_Reserves AS (\n\tSELECT\n\tsource_statistical_code_Out AS statistical_code,\n\tmajor_peril_code AS major_peril,\n\ttype_bureau_code_Out AS Type_Bureau,\n\tclass_code_Out AS sar_class_code,\n\t-- *INF*: statistical_code\r\n\t-- \r\n\t-- --DECODE(TRUE, Type_Bureau = 'BE', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'BF', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RP' AND major_peril = '145', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '114', '  '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '119', '     '  || statistical_code,\r\n\t-- --statistical_code)\r\n\t-- \r\n\t-- ---- Had to introduce space at the begining of the field because of LTRIM(RTRIM)) to statistical codes in Temp_Policy_transaction Table.\n\tstatistical_code AS v_statistical_code,\n\t'D' AS v_stat_plan_id,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,1,1))=0,' ',SUBSTR(v_statistical_code,1,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 1, 1)) = 0, ' ', SUBSTR(v_statistical_code, 1, 1)) AS v_pos_1,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,2,1))=0,' ',SUBSTR(v_statistical_code,2,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 2, 1)) = 0, ' ', SUBSTR(v_statistical_code, 2, 1)) AS v_pos_2,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,3,1))=0,' ',SUBSTR(v_statistical_code,3,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 3, 1)) = 0, ' ', SUBSTR(v_statistical_code, 3, 1)) AS v_pos_3,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,4,1))=0,' ',SUBSTR(v_statistical_code,4,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 4, 1)) = 0, ' ', SUBSTR(v_statistical_code, 4, 1)) AS v_pos_4,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,5,1))=0,' ',SUBSTR(v_statistical_code,5,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 5, 1)) = 0, ' ', SUBSTR(v_statistical_code, 5, 1)) AS v_pos_5,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,6,1))=0,' ',SUBSTR(v_statistical_code,6,1))\r\n\t-- \r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 6, 1)) = 0, ' ', SUBSTR(v_statistical_code, 6, 1)) AS v_pos_6,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,7,1))=0,' ',SUBSTR(v_statistical_code,7,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 7, 1)) = 0, ' ', SUBSTR(v_statistical_code, 7, 1)) AS v_pos_7,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,8,1))=0,' ',SUBSTR(v_statistical_code,8,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 8, 1)) = 0, ' ', SUBSTR(v_statistical_code, 8, 1)) AS v_pos_8,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,9,1))=0,' ',SUBSTR(v_statistical_code,9,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 9, 1)) = 0, ' ', SUBSTR(v_statistical_code, 9, 1)) AS v_pos_9,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,10,1))=0,' ',SUBSTR(v_statistical_code,10,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 10, 1)) = 0, ' ', SUBSTR(v_statistical_code, 10, 1)) AS v_pos_10,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,11,1))=0,' ',SUBSTR(v_statistical_code,11,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 11, 1)) = 0, ' ', SUBSTR(v_statistical_code, 11, 1)) AS v_pos_11,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,12,1))=0,' ',SUBSTR(v_statistical_code,12,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 12, 1)) = 0, ' ', SUBSTR(v_statistical_code, 12, 1)) AS v_pos_12,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,13,1))=0,' ',SUBSTR(v_statistical_code,13,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 13, 1)) = 0, ' ', SUBSTR(v_statistical_code, 13, 1)) AS v_pos_13,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,14,1))=0,' ',SUBSTR(v_statistical_code,14,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 14, 1)) = 0, ' ', SUBSTR(v_statistical_code, 14, 1)) AS v_pos_14,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,15,1))=0,' ',SUBSTR(v_statistical_code,15,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 15, 1)) = 0, ' ', SUBSTR(v_statistical_code, 15, 1)) AS v_pos_15,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,16,1))=0,' ',SUBSTR(v_statistical_code,16,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 16, 1)) = 0, ' ', SUBSTR(v_statistical_code, 16, 1)) AS v_pos_16,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,17,1))=0,' ',SUBSTR(v_statistical_code,17,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 17, 1)) = 0, ' ', SUBSTR(v_statistical_code, 17, 1)) AS v_pos_17,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,18,1))=0,' ',SUBSTR(v_statistical_code,18,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 18, 1)) = 0, ' ', SUBSTR(v_statistical_code, 18, 1)) AS v_pos_18,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,19,1))=0,' ',SUBSTR(v_statistical_code,19,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 19, 1)) = 0, ' ', SUBSTR(v_statistical_code, 19, 1)) AS v_pos_19,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,20,1))=0,' ',SUBSTR(v_statistical_code,20,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 20, 1)) = 0, ' ', SUBSTR(v_statistical_code, 20, 1)) AS v_pos_20,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- \r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 21, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 21, 1)) AS v_pos_21,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 22, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 22, 1)) AS v_pos_22,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 23, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 23, 1)) AS v_pos_23,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 24, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 24, 1)) AS v_pos_24,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','{',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\r\n\t-- \r\n\t-- --- IN COBOL \"{\" represents a  +ve sign and \"}\" is -ve sign, since this is base rate for Type_Bureau RP is a sign field so COBOL creates \"{\". Replicating the COBOL logic.\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '{'\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '{',\n\tLENGTH(SUBSTR(v_statistical_code, 25, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 25, 1)) AS v_pos_25,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,26,1))=0,' ',SUBSTR(v_statistical_code,26,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 26, 1)) = 0, ' ', SUBSTR(v_statistical_code, 26, 1)) AS v_pos_26,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,27,1))=0,' ',SUBSTR(v_statistical_code,27,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 27, 1)) = 0, ' ', SUBSTR(v_statistical_code, 27, 1)) AS v_pos_27,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,28,1))=0,' ',SUBSTR(v_statistical_code,28,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 28, 1)) = 0, ' ', SUBSTR(v_statistical_code, 28, 1)) AS v_pos_28,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,29,1))=0,' ',SUBSTR(v_statistical_code,29,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 29, 1)) = 0, ' ', SUBSTR(v_statistical_code, 29, 1)) AS v_pos_29,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,30,1))=0,' ',SUBSTR(v_statistical_code,30,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 30, 1)) = 0, ' ', SUBSTR(v_statistical_code, 30, 1)) AS v_pos_30,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,31,1))=0,' ',SUBSTR(v_statistical_code,31,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 31, 1)) = 0, ' ', SUBSTR(v_statistical_code, 31, 1)) AS v_pos_31,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,32,1))=0,' ',SUBSTR(v_statistical_code,32,1))\r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 32, 1)) = 0, ' ', SUBSTR(v_statistical_code, 32, 1)) AS v_pos_32,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,33,1))=0,' ',SUBSTR(v_statistical_code,33,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 33, 1)) = 0, ' ', SUBSTR(v_statistical_code, 33, 1)) AS v_pos_33,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,34,1))=0,' ',SUBSTR(v_statistical_code,34,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 34, 1)) = 0, ' ', SUBSTR(v_statistical_code, 34, 1)) AS v_pos_34,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,35,1))=0,' ',SUBSTR(v_statistical_code,35,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 35, 1)) = 0, ' ', SUBSTR(v_statistical_code, 35, 1)) AS v_pos_35,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,36,1))=0,' ',SUBSTR(v_statistical_code,36,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 36, 1)) = 0, ' ', SUBSTR(v_statistical_code, 36, 1)) AS v_pos_36,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,37,1))=0,' ',SUBSTR(v_statistical_code,37,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 37, 1)) = 0, ' ', SUBSTR(v_statistical_code, 37, 1)) AS v_pos_37,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,38,1))=0,' ',SUBSTR(v_statistical_code,38,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 38, 1)) = 0, ' ', SUBSTR(v_statistical_code, 38, 1)) AS v_pos_38,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS Generic,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Code_AC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_AI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23  || v_pos_24  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23 || v_pos_24 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10  || v_pos_11|| v_pos_20 || v_pos_21  || \r\n\t-- '             ' ||  v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19  )\r\n\t-- \r\n\t--  -----It has a Filler of 13 spaces\r\n\t-- --- I have checked this code this is fine\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_20 || v_pos_21 || '             ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_AN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 ||\r\n\t-- '      ' || v_pos_14 || v_pos_23  || v_pos_24  || '  '  ||  v_pos_26  || v_pos_27  || v_pos_28  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || '      ' || v_pos_14 || v_pos_23 || v_pos_24 || '  ' || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || \r\n\t--   v_pos_12 || v_pos_13 )\r\n\t-- \r\n\t-- --- Verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_A2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_11 || v_pos_12 )\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_11 || v_pos_12 ) AS v_Stat_Codes_A3,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 ||\r\n\t-- '           '  ||  v_pos_22 || v_pos_29 || '  ' || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || '           ' || v_pos_22 || v_pos_29 || '  ' || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_BB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17  || v_pos_20  || v_pos_27  || v_pos_28  || v_pos_29 || '    ' ||v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26 )\r\n\t-- \r\n\t-- \r\n\t-- -- Verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_20 || v_pos_27 || v_pos_28 || v_pos_29 || '    ' || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 ) AS v_Stat_Codes_BC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_BD,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 ||  v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- \r\n\t--  ---  Verified Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_BE,\n\t-- *INF*: ('  '  || v_pos_4  || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- \r\n\t-- --8/22/2011 - Added 2 spaces in the beginning. In COBOL, statitistical code field is initialised to spaces at the start of reformatting. If there is no code to move certain fields then the spaces stay as it is except other fileds are layed out over spaces.\r\n\t-- --- Verified the logic\r\n\t-- \n\t( '  ' || v_pos_4 || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_BF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_BP,\n\t-- *INF*: (v_pos_1 || v_pos_2 )\r\n\t-- \r\n\t-- --- Verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_BI,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -- verified the logic\n\tv_pos_1 AS v_Stat_Codes_BL,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || '  ' || v_pos_18  ||  v_pos_19 || v_pos_1 ||  ' ' ||  v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 \r\n\t-- || '    ' ||  v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28 || '   ' )\r\n\t-- \r\n\t-- --- Verfied the logic\n\t( SUBSTR(sar_class_code, 1, 3) || '  ' || v_pos_18 || v_pos_19 || v_pos_1 || ' ' || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || '    ' || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || '   ' ) AS v_Stat_Codes_BM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '      '  ||  v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19)\r\n\t-- \r\n\t--  ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '      ' || v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_BT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || '      '  || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || '      ' || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_B2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17)\r\n\t-- \r\n\t-- ----- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 ) AS v_Stat_Codes_CC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || \r\n\t--  v_pos_17 || v_pos_18  || ' ' ||  v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_17 || v_pos_18 || ' ' || v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_CF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- Generic \r\n\t-- -- No Change from Input copybook to Output\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_CR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' '  || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' ' || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 ) AS v_Stat_Codes_CI,\n\t-- *INF*: (v_pos_1 || v_pos_4  || v_pos_6 || v_pos_7 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_4 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CL,\n\t-- *INF*: ('  ' || v_pos_1 || v_pos_2 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '  ' || v_pos_1 || v_pos_2 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CP,\n\t-- *INF*: (v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_CN,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -----\n\tv_pos_1 AS v_Stat_Codes_EI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || '                   ' ||v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_EQ,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 ) AS v_Stat_Codes_FC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 \r\n\t-- || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- ---- 18 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_FM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FO,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_FP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 ||\r\n\t-- '       ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || '       ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_FT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- -- 17 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 ) AS v_Stat_Codes_GI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4  || v_pos_5  || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4 || v_pos_5 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_GL,\n\t-- *INF*: (v_pos_1 || '           '  ||   v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- \n\t( v_pos_1 || '           ' || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_GP,\n\t-- *INF*: (v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 23 spaces\r\n\t-- \r\n\t-- \r\n\t-- \n\t( v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_GS,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18  ||  v_pos_19  \r\n\t-- || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ')\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 16 Spaces at the end\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18 || v_pos_19 || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ' ) AS v_Stat_Codes_HO,\n\t-- *INF*: ('        ' || v_pos_11 || v_pos_12 || '               '  || v_pos_4  || v_pos_5  || v_pos_6  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '        ' || v_pos_11 || v_pos_12 || '               ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17 ) AS v_Stat_Codes_IM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  || v_pos_24  || v_pos_25  || v_pos_26 || v_pos_28  || v_pos_29  || v_pos_30 || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_JR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_ME,\n\t-- *INF*: (v_pos_1 || ' '  || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' ||  v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) \r\n\t-- \r\n\t-- --- need logic for stat-plan -id\r\n\t-- ---- 16 Spaces at the end\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) AS v_Stat_Codes_MH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || '                  '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || '                  ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_MI,\n\t-- *INF*: (v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4  || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24 )\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4 || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_ML,\n\t-- *INF*: -- No Stats code in the Output Copybook just the policy_type logic\n\t'' AS v_Stat_Codes_MP,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' )\r\n\t-- \r\n\t-- --- Need to look at complete logic\r\n\t-- \n\t( SUBSTR(sar_class_code, 1, 3) || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' ) AS v_Stat_Codes_M2,\n\t-- *INF*: ( '                 ' || v_stat_plan_id)\r\n\t-- \r\n\t-- ----verified the logic\n\t( '                 ' || v_stat_plan_id ) AS v_Stat_Codes_NE,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19)\r\n\t-- \r\n\t-- --- Verified the Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19 ) AS v_Stat_Codes_PC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19  || v_pos_20  ||  v_pos_21)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t--  \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 ) AS v_Stat_Codes_PH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 ||  v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 ) AS v_Stat_Codes_PM,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_RG,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 ) AS v_Stat_Codes_RM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || \r\n\t-- v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21 || v_pos_22 ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29 || v_pos_30 || v_pos_31|| v_pos_33 || v_pos_34  ||  v_pos_35  || v_pos_32)\r\n\t-- \r\n\t-- ----\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_32 ) AS v_Stat_Codes_RP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_RQ,\n\t-- *INF*: (v_pos_1 || ' ' || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 ) AS v_Stat_Codes_SM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9 ) AS v_Stat_Codes_TH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 \r\n\t-- || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19\r\n\t-- ||  v_pos_22  ||  v_pos_23  || v_pos_24 || '       ' || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || '       ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 \r\n\t--  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30 || ' ' || v_pos_32  ||  v_pos_33\r\n\t-- || v_pos_34  ||  v_pos_35  || v_pos_36 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || ' ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VP,\n\t-- *INF*: ('   ' || v_pos_4  || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12  || ' ' || v_pos_14 || v_pos_15 || '              ' \r\n\t-- || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_35)\r\n\t-- \r\n\t-- --- verified the logic\n\t( '   ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || ' ' || v_pos_14 || v_pos_15 || '              ' || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_VN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  \r\n\t-- || ' ' || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || '    ' || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || ' ' || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || '    ' || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Codes_VC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_WC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_WP,\n\t-- *INF*: ('   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id)\r\n\t-- \r\n\t-- --8/19/2011 Added v_stat_plan_id\r\n\t-- --- need to bring stat plan_id\r\n\t--  --- verified the logic but need stat plan id\r\n\t-- \n\t( '   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id ) AS v_Stat_Codes_WL,\n\t-- *INF*: DECODE(Type_Bureau, 'AC', v_Stat_Code_AC, 'AI', v_Stat_Codes_AI, 'AL', v_Stat_Codes_AL, 'AN', v_Stat_Codes_AN, 'AP', v_Stat_Codes_AP, 'A2', v_Stat_Codes_A2, 'A3', v_Stat_Codes_A3, 'BB', v_Stat_Codes_BB, 'BC', v_Stat_Codes_BC, 'BD', v_Stat_Codes_BD, 'BE', v_Stat_Codes_BE, 'BF', v_Stat_Codes_BF, 'BP', v_Stat_Codes_BP, 'BI', v_Stat_Codes_BI, 'BL', v_Stat_Codes_BL, 'BM', v_Stat_Codes_BM, 'BT', v_Stat_Codes_BT, 'B2', v_Stat_Codes_B2, 'CC', v_Stat_Codes_CC, 'CF', v_Stat_Codes_CF, 'CI', v_Stat_Codes_CI, 'CL', v_Stat_Codes_CL, 'CN', v_Stat_Codes_CN, 'CP', v_Stat_Codes_CP, 'EI', v_Stat_Codes_EI, 'EQ', v_Stat_Codes_EQ, 'FC', v_Stat_Codes_FC, 'FF', v_Stat_Codes_FF, 'FM', v_Stat_Codes_FM, 'FO', v_Stat_Codes_FO, 'FP', v_Stat_Codes_FP, 'FT', v_Stat_Codes_FT, 'GI', v_Stat_Codes_GI, 'GL', v_Stat_Codes_GL, 'GP', v_Stat_Codes_GP, 'GS', v_Stat_Codes_GS, 'HO', v_Stat_Codes_HO, 'IM', v_Stat_Codes_IM, 'JR', v_Stat_Codes_JR, 'ME', v_Stat_Codes_ME, 'MH', v_Stat_Codes_MH, 'MI', v_Stat_Codes_MI, 'ML',\r\n\t-- v_Stat_Codes_ML, 'MP', v_Stat_Codes_MP, 'M2', v_Stat_Codes_M2, 'NE', v_Stat_Codes_NE, 'PC', v_Stat_Codes_PC, 'PH', v_Stat_Codes_PH, 'PM', v_Stat_Codes_PM, 'RB', v_Stat_Codes_RB, 'RG', v_Stat_Codes_RG, 'RI', v_Stat_Codes_RI, 'RL', v_Stat_Codes_RL, 'RM', v_Stat_Codes_RM, 'RN', v_Stat_Codes_RN, 'RP', v_Stat_Codes_RP, 'RQ', v_Stat_Codes_RQ, 'SM', v_Stat_Codes_SM, 'TH', v_Stat_Codes_TH, 'VL', v_Stat_Codes_VL, 'VP', v_Stat_Codes_VP, 'VN', v_Stat_Codes_VN, 'VC', v_Stat_Codes_VC, 'WC', v_Stat_Codes_WC, 'WL', v_Stat_Codes_WL,\r\n\t-- 'CR', v_Stat_Code_CR, 'PF', v_Stat_Code_PF,'PI', v_Stat_Code_PI, 'PL', v_Stat_Code_PL,\r\n\t-- 'WP', v_Stat_Code_WP,v_statistical_code) \n\tDECODE(Type_Bureau,\n\t'AC', v_Stat_Code_AC,\n\t'AI', v_Stat_Codes_AI,\n\t'AL', v_Stat_Codes_AL,\n\t'AN', v_Stat_Codes_AN,\n\t'AP', v_Stat_Codes_AP,\n\t'A2', v_Stat_Codes_A2,\n\t'A3', v_Stat_Codes_A3,\n\t'BB', v_Stat_Codes_BB,\n\t'BC', v_Stat_Codes_BC,\n\t'BD', v_Stat_Codes_BD,\n\t'BE', v_Stat_Codes_BE,\n\t'BF', v_Stat_Codes_BF,\n\t'BP', v_Stat_Codes_BP,\n\t'BI', v_Stat_Codes_BI,\n\t'BL', v_Stat_Codes_BL,\n\t'BM', v_Stat_Codes_BM,\n\t'BT', v_Stat_Codes_BT,\n\t'B2', v_Stat_Codes_B2,\n\t'CC', v_Stat_Codes_CC,\n\t'CF', v_Stat_Codes_CF,\n\t'CI', v_Stat_Codes_CI,\n\t'CL', v_Stat_Codes_CL,\n\t'CN', v_Stat_Codes_CN,\n\t'CP', v_Stat_Codes_CP,\n\t'EI', v_Stat_Codes_EI,\n\t'EQ', v_Stat_Codes_EQ,\n\t'FC', v_Stat_Codes_FC,\n\t'FF', v_Stat_Codes_FF,\n\t'FM', v_Stat_Codes_FM,\n\t'FO', v_Stat_Codes_FO,\n\t'FP', v_Stat_Codes_FP,\n\t'FT', v_Stat_Codes_FT,\n\t'GI', v_Stat_Codes_GI,\n\t'GL', v_Stat_Codes_GL,\n\t'GP', v_Stat_Codes_GP,\n\t'GS', v_Stat_Codes_GS,\n\t'HO', v_Stat_Codes_HO,\n\t'IM', v_Stat_Codes_IM,\n\t'JR', v_Stat_Codes_JR,\n\t'ME', v_Stat_Codes_ME,\n\t'MH', v_Stat_Codes_MH,\n\t'MI', v_Stat_Codes_MI,\n\t'ML', v_Stat_Codes_ML,\n\t'MP', v_Stat_Codes_MP,\n\t'M2', v_Stat_Codes_M2,\n\t'NE', v_Stat_Codes_NE,\n\t'PC', v_Stat_Codes_PC,\n\t'PH', v_Stat_Codes_PH,\n\t'PM', v_Stat_Codes_PM,\n\t'RB', v_Stat_Codes_RB,\n\t'RG', v_Stat_Codes_RG,\n\t'RI', v_Stat_Codes_RI,\n\t'RL', v_Stat_Codes_RL,\n\t'RM', v_Stat_Codes_RM,\n\t'RN', v_Stat_Codes_RN,\n\t'RP', v_Stat_Codes_RP,\n\t'RQ', v_Stat_Codes_RQ,\n\t'SM', v_Stat_Codes_SM,\n\t'TH', v_Stat_Codes_TH,\n\t'VL', v_Stat_Codes_VL,\n\t'VP', v_Stat_Codes_VP,\n\t'VN', v_Stat_Codes_VN,\n\t'VC', v_Stat_Codes_VC,\n\t'WC', v_Stat_Codes_WC,\n\t'WL', v_Stat_Codes_WL,\n\t'CR', v_Stat_Code_CR,\n\t'PF', v_Stat_Code_PF,\n\t'PI', v_Stat_Code_PI,\n\t'PL', v_Stat_Code_PL,\n\t'WP', v_Stat_Code_WP,\n\tv_statistical_code) AS V_Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,1,25)\n\tSUBSTR(V_Formatted_Stat_Codes, 1, 25) AS Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,26,9)\n\tSUBSTR(V_Formatted_Stat_Codes, 26, 9) AS Formatted_Stat_Codes_26_34,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,35,4)\n\tSUBSTR(V_Formatted_Stat_Codes, 35, 4) AS Formatted_Stat_Codes_34_38,\n\t-- *INF*: DECODE(Type_Bureau,'AI', (v_pos_11 || v_pos_12),\r\n\t-- 'AL', (v_pos_15  ||  v_pos_16),\r\n\t-- 'AN',(v_pos_12 || v_pos_13),\r\n\t-- 'AP',(v_pos_12 || v_pos_13),\r\n\t-- 'A2',(v_pos_8 || v_pos_9),\r\n\t-- 'A3',(v_pos_8 || v_pos_9),\r\n\t-- 'BB',(v_pos_20 || v_pos_21),\r\n\t-- 'BC',(v_pos_18 || v_pos_19),\r\n\t-- 'BE', ( v_pos_4  || v_pos_5),\r\n\t-- 'BF', (v_pos_1  ||  v_pos_2),\r\n\t-- 'BP', (' '  ||  v_pos_2),\r\n\t-- 'BI', (v_pos_3 ||  v_pos_4),\r\n\t-- 'BL', (v_pos_3  ||  v_pos_4),\r\n\t-- 'BM',(v_pos_20 || v_pos_21),\r\n\t-- 'BT', (v_pos_11  ||  v_pos_12),\r\n\t-- 'B2',(v_pos_14  ||  v_pos_15),\r\n\t-- 'CF', (v_pos_8  || v_pos_9),\r\n\t-- 'CI',(v_pos_3  ||  v_pos_4),\r\n\t-- 'CN', (v_pos_1  ||  v_pos_2),\r\n\t-- 'CP', (v_pos_3  ||  v_pos_4),\r\n\t-- 'EI', (v_pos_2  ||  v_pos_3),\r\n\t-- 'EQ', (v_pos_8  || v_pos_9),\r\n\t-- 'FF', (v_pos_8  || v_pos_9),\r\n\t-- 'FI', (v_pos_1  ||  v_pos_2),\r\n\t-- 'FM', (v_pos_6  ||  v_pos_7),\r\n\t-- 'FO', (v_pos_8  || v_pos_9),\r\n\t-- 'FP', (v_pos_2  ||  v_pos_3),\r\n\t-- 'FT', (v_pos_4  ||  v_pos_5),\r\n\t-- 'GI', (v_pos_10  ||  v_pos_11),\r\n\t-- 'GL',(v_pos_20 || v_pos_21),\r\n\t-- 'GM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'GP', (v_pos_8  || v_pos_9),\r\n\t-- 'GS',(v_pos_3  ||  v_pos_4),\r\n\t-- 'II', (v_pos_1  ||  v_pos_2),\r\n\t-- 'IM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'MI',(v_pos_10  ||  v_pos_11),\r\n\t-- 'ML', (v_pos_16  ||  v_pos_17),\r\n\t-- 'MP', (v_pos_1  ||  v_pos_2),\r\n\t-- 'M2', (v_pos_15  ||  v_pos_16),'  ')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(Type_Bureau,\n\t'AI', ( v_pos_11 || v_pos_12 ),\n\t'AL', ( v_pos_15 || v_pos_16 ),\n\t'AN', ( v_pos_12 || v_pos_13 ),\n\t'AP', ( v_pos_12 || v_pos_13 ),\n\t'A2', ( v_pos_8 || v_pos_9 ),\n\t'A3', ( v_pos_8 || v_pos_9 ),\n\t'BB', ( v_pos_20 || v_pos_21 ),\n\t'BC', ( v_pos_18 || v_pos_19 ),\n\t'BE', ( v_pos_4 || v_pos_5 ),\n\t'BF', ( v_pos_1 || v_pos_2 ),\n\t'BP', ( ' ' || v_pos_2 ),\n\t'BI', ( v_pos_3 || v_pos_4 ),\n\t'BL', ( v_pos_3 || v_pos_4 ),\n\t'BM', ( v_pos_20 || v_pos_21 ),\n\t'BT', ( v_pos_11 || v_pos_12 ),\n\t'B2', ( v_pos_14 || v_pos_15 ),\n\t'CF', ( v_pos_8 || v_pos_9 ),\n\t'CI', ( v_pos_3 || v_pos_4 ),\n\t'CN', ( v_pos_1 || v_pos_2 ),\n\t'CP', ( v_pos_3 || v_pos_4 ),\n\t'EI', ( v_pos_2 || v_pos_3 ),\n\t'EQ', ( v_pos_8 || v_pos_9 ),\n\t'FF', ( v_pos_8 || v_pos_9 ),\n\t'FI', ( v_pos_1 || v_pos_2 ),\n\t'FM', ( v_pos_6 || v_pos_7 ),\n\t'FO', ( v_pos_8 || v_pos_9 ),\n\t'FP', ( v_pos_2 || v_pos_3 ),\n\t'FT', ( v_pos_4 || v_pos_5 ),\n\t'GI', ( v_pos_10 || v_pos_11 ),\n\t'GL', ( v_pos_20 || v_pos_21 ),\n\t'GM', ( v_pos_1 || v_pos_2 ),\n\t'GP', ( v_pos_8 || v_pos_9 ),\n\t'GS', ( v_pos_3 || v_pos_4 ),\n\t'II', ( v_pos_1 || v_pos_2 ),\n\t'IM', ( v_pos_1 || v_pos_2 ),\n\t'MI', ( v_pos_10 || v_pos_11 ),\n\t'ML', ( v_pos_16 || v_pos_17 ),\n\t'MP', ( v_pos_1 || v_pos_2 ),\n\t'M2', ( v_pos_15 || v_pos_16 ),\n\t'  ') AS V_Policy_Type,\n\tV_Policy_Type AS Policy_Type,\n\t-- *INF*: SUBSTR(sar_class_code,1,3)\n\tSUBSTR(sar_class_code, 1, 3) AS v_sar_class_3,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN (Type_Bureau,'BP','FP','BF','FT'),V_Policy_Type)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'FP', 'BF', 'FT'), V_Policy_Type) AS v_type_policy_45,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- Type_Bureau='BP',v_pos_2,\r\n\t-- Type_Bureau='BF',v_pos_2,\r\n\t-- Type_Bureau='FP',' ',\r\n\t-- Type_Bureau='FT',' '  )\n\tDECODE(TRUE,\n\tType_Bureau = 'BP', v_pos_2,\n\tType_Bureau = 'BF', v_pos_2,\n\tType_Bureau = 'FP', ' ',\n\tType_Bureau = 'FT', ' ') AS v_type_of_bond_6,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  IN(Type_Bureau,'BP','BF','FP','FT'),v_sar_class_3  || v_type_policy_45 || v_type_of_bond_6,\r\n\t-- sar_class_code)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'BF', 'FP', 'FT'), v_sar_class_3 || v_type_policy_45 || v_type_of_bond_6,\n\tsar_class_code) AS v_hold_sar_class_code,\n\tv_hold_sar_class_code AS sar_class_code_out\n\tFROM EXP_Derive_Values_Reserves\n),\nFIL_Temp_Policy_Transaction_Reserves AS (\n\tSELECT\n\tEXP_Derive_Values_Reserves.claim_trans_id, \n\tEXP_Derive_Values_Reserves.claim_trans_ak_id, \n\tEXP_Derive_Values_Reserves.claim_occurrence_ak_id AS Claim_Occurrence_ak_id, \n\tEXP_Derive_Values_Reserves.pol_ak_id, \n\tEXP_Derive_Values_Reserves.claim_party_occurrence_ak_id, \n\tEXP_Derive_Values_Reserves.claimant_cov_det_ak_id, \n\tEXP_Derive_Values_Reserves.wc_claimant_det_ak_id_Out AS wc_claimant_det_ak_id, \n\tEXP_Derive_Values_Reserves.contract_cust_ak_id, \n\tEXP_Derive_Values_Reserves.claim_party_ak_id, \n\tEXP_Derive_Values_Reserves.cov_ak_id_Out, \n\tEXP_Derive_Values_Reserves.agency_ak_id, \n\tEXP_Derive_Values_Reserves.temp_pol_trans_ak_id_Out AS temp_pol_trans_ak_id, \n\tEXP_Derive_Values_Reserves.claim_rep_ak_id_H, \n\tEXP_Derive_Values_Reserves.claim_rep_ak_id_E, \n\tEXP_Derive_Values_Reserves.claim_pay_ak_id, \n\tEXP_Derive_Values_Reserves.trans_amt, \n\tEXP_Derive_Values_Reserves.trans_hist_amt, \n\tEXP_Derive_Values_Reserves.LM_Amount_OutStanding, \n\tEXP_Derive_Values_Reserves.LM_Amount_Paid_Losses, \n\tEXP_Derive_Values_Reserves.LM_Amount_Paid_Expenses, \n\tEXP_Derive_Values_Reserves.LM_Unpaid_Loss_Adj_Exp, \n\tEXP_Derive_Values_Reserves.Transaction_Filter, \n\tEXP_Transform_Statistical_Codes_Reserves.Type_Bureau, \n\tEXP_Transform_Statistical_Codes_Reserves.Formatted_Stat_Codes AS Formatted_Stat_Codes_1_25, \n\tEXP_Transform_Statistical_Codes_Reserves.Formatted_Stat_Codes_26_34, \n\tEXP_Transform_Statistical_Codes_Reserves.Formatted_Stat_Codes_34_38, \n\tEXP_Transform_Statistical_Codes_Reserves.Policy_Type, \n\tEXP_Transform_Statistical_Codes_Reserves.sar_class_code_out AS class_code_Out, \n\tEXP_Derive_Values_Reserves.exposure_out AS exposure, \n\tEXP_Derive_Values_Reserves.LM_Variation_Code, \n\tEXP_Derive_Values_Reserves.risk_state_prov_code_Out, \n\tEXP_Derive_Values_Reserves.risk_zip_code_Out, \n\tEXP_Derive_Values_Reserves.terr_code_Out, \n\tEXP_Derive_Values_Reserves.tax_loc_Out, \n\tEXP_Derive_Values_Reserves.sub_line_code_Out, \n\tEXP_Derive_Values_Reserves.source_sar_asl_Out, \n\tEXP_Derive_Values_Reserves.source_sar_prdct_line_Out, \n\tEXP_Derive_Values_Reserves.source_sar_sp_use_code, \n\tEXP_Derive_Values_Reserves.Statistical_Line, \n\tEXP_Derive_Values_Reserves.Default_Id, \n\tEXP_Derive_Values_Reserves.claim_case_ak_id_out AS claim_case_ak_id, \n\tEXP_Derive_Values_Reserves.coverage_code_out, \n\tEXP_Derive_Values_Reserves.incptn_date, \n\tEXP_Derive_Values_Reserves.new_claim_count, \n\tEXP_Derive_Values_Reserves.orig_reserve, \n\tEXP_Derive_Values_Reserves.auto_reins_facility, \n\tEXP_Derive_Values_Reserves.statistical_brkdwn_line, \n\tEXP_Derive_Values_Reserves.Default_NA, \n\tEXP_Derive_Values_Reserves.Loss_Master_Run_Date, \n\tEXP_Derive_Values_Reserves.pms_trans_code, \n\tEXP_Derive_Values_Reserves.trans_date, \n\tEXP_Derive_Values_Reserves.pms_acct_entered_date, \n\tEXP_Derive_Values_Reserves.trans_offset_onset_ind, \n\tEXP_Derive_Values_Reserves.o_StatisticalCoverageAKID AS StatisticalCoverageAKID, \n\tEXP_Derive_Values_Reserves.o_RatingCoverageAKID AS RatingCoverageAKID, \n\tEXP_Derive_Values_Reserves.financial_type_code, \n\tEXP_Derive_Values_Reserves.trans_code, \n\tEXP_Derive_Values_Reserves.PolicyCoverageAKID_Out AS PolicyCoverageAKID, \n\tEXP_Derive_Values_Reserves.RiskLocationAKID_Out AS RiskLocationAKID, \n\tEXP_Derive_Values_Reserves.PremiumTransactionAKID_Out AS PremiumTransactionAKID, \n\tEXP_Derive_Values_Reserves.BureauStatisticalCodeAKID_Out AS BureauStatisticalCodeAKID\n\tFROM EXP_Derive_Values_Reserves\n\t -- Manually join with EXP_Transform_Statistical_Codes_Reserves\n\tWHERE IIF(Transaction_Filter = 'NOFILTER',TRUE,FALSE)\n),\nRTR_Insert_Reserves AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tClaim_Occurrence_ak_id,\n\tpol_ak_id,\n\tclaim_party_occurrence_ak_id,\n\tclaimant_cov_det_ak_id,\n\twc_claimant_det_ak_id,\n\tcontract_cust_ak_id,\n\tclaim_party_ak_id,\n\tcov_ak_id_Out,\n\tagency_ak_id,\n\ttemp_pol_trans_ak_id,\n\tclaim_rep_ak_id_H,\n\tclaim_rep_ak_id_E,\n\tclaim_pay_ak_id,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tLM_Amount_OutStanding,\n\tLM_Amount_Paid_Losses,\n\tLM_Amount_Paid_Expenses,\n\tLM_Unpaid_Loss_Adj_Exp,\n\tTransaction_Filter,\n\tType_Bureau,\n\tFormatted_Stat_Codes_1_25,\n\tFormatted_Stat_Codes_26_34,\n\tFormatted_Stat_Codes_34_38,\n\tPolicy_Type,\n\tclass_code_Out,\n\texposure,\n\tLM_Variation_Code,\n\trisk_state_prov_code_Out,\n\trisk_zip_code_Out,\n\tterr_code_Out,\n\ttax_loc_Out,\n\tsub_line_code_Out,\n\tsource_sar_asl_Out,\n\tsource_sar_prdct_line_Out,\n\tsource_sar_sp_use_code,\n\tStatistical_Line,\n\tDefault_Id,\n\tclaim_case_ak_id,\n\tcoverage_code_out,\n\tincptn_date,\n\tnew_claim_count,\n\torig_reserve,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tDefault_NA,\n\tLoss_Master_Run_Date,\n\tpms_trans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_offset_onset_ind,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tfinancial_type_code,\n\ttrans_code,\n\tPolicyCoverageAKID,\n\tRiskLocationAKID,\n\tPremiumTransactionAKID,\n\tBureauStatisticalCodeAKID\n\tFROM FIL_Temp_Policy_Transaction_Reserves\n),\nRTR_Insert_Reserves_INSERT AS (SELECT * FROM RTR_Insert_Reserves WHERE Transaction_Filter = 'NOFILTER'),\nRTR_Insert_Reserves_Missing_Coverage AS (SELECT * FROM RTR_Insert_Reserves WHERE Transaction_Filter = 'NOFILTER'  AND ISNULL(cov_ak_id_Out)),\nSEQ_Loss_Master_Calculation_AK_ID AS (\n\tCREATE SEQUENCE SEQ_Loss_Master_Calculation_AK_ID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Determine_AK_ID_Reserves AS (\n\tSELECT\n\t'1' AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:01','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:01', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\tSEQ_Loss_Master_Calculation_AK_ID.NEXTVAL AS loss_master_calculation_ak_id,\n\tclaim_trans_id AS claim_trans_pk_id,\n\tclaim_trans_ak_id,\n\tDefault_Id AS claim_reins_trans_pk_id,\n\tDefault_Id AS claim_reins_trans_ak_id,\n\tagency_ak_id AS i_agency_ak_id,\n\t-- *INF*: IIF(ISNULL(i_agency_ak_id), -1, i_agency_ak_id)\n\tIFF(i_agency_ak_id IS NULL, - 1, i_agency_ak_id) AS o_agency_ak_id,\n\tcontract_cust_ak_id AS i_contract_cust_ak_id,\n\t-- *INF*: IIF(ISNULL(i_contract_cust_ak_id),-1, i_contract_cust_ak_id)\n\tIFF(i_contract_cust_ak_id IS NULL, - 1, i_contract_cust_ak_id) AS o_contract_cust_ak_id,\n\tpol_ak_id AS i_pol_ak_id,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id), -1,i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, - 1, i_pol_ak_id) AS o_pol_ak_id,\n\tClaim_Occurrence_ak_id AS i_claim_occurrence_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_occurrence_ak_id), -1, i_claim_occurrence_ak_id)\n\tIFF(i_claim_occurrence_ak_id IS NULL, - 1, i_claim_occurrence_ak_id) AS o_claim_occurrence_ak_id,\n\tclaim_rep_ak_id_H AS i_claim_primary_rep_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_primary_rep_ak_id), -1, i_claim_primary_rep_ak_id)\n\tIFF(i_claim_primary_rep_ak_id IS NULL, - 1, i_claim_primary_rep_ak_id) AS o_claim_primary_rep_ak_id,\n\tclaim_rep_ak_id_E AS i_claim_examiner_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_examiner_ak_id), -1, i_claim_examiner_ak_id)\n\tIFF(i_claim_examiner_ak_id IS NULL, - 1, i_claim_examiner_ak_id) AS o_claim_examiner_ak_id,\n\tclaim_party_occurrence_ak_id AS i_claim_party_occurrence_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_party_occurrence_ak_id), -1, i_claim_party_occurrence_ak_id)\n\tIFF(i_claim_party_occurrence_ak_id IS NULL, - 1, i_claim_party_occurrence_ak_id) AS o_claim_party_occurrence_ak_id,\n\tclaim_party_ak_id AS i_claim_party_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_party_ak_id), -1, i_claim_party_ak_id)\n\tIFF(i_claim_party_ak_id IS NULL, - 1, i_claim_party_ak_id) AS o_claim_party_ak_id,\n\tclaim_case_ak_id,\n\tclaimant_cov_det_ak_id,\n\twc_claimant_det_ak_id,\n\tclaim_pay_ak_id,\n\tcov_ak_id_Out AS cov_ak_id,\n\ttemp_pol_trans_ak_id,\n\tDefault_Id AS reins_cov_ak_id,\n\t'D' AS trans_kind_code,\n\tLM_Variation_Code AS i_variation_code,\n\t-- *INF*: IIF(ISNULL(i_variation_code) OR IS_SPACES(i_variation_code) OR LENGTH(i_variation_code)=0, 'N/A', i_variation_code)\n\tIFF(i_variation_code IS NULL OR IS_SPACES(i_variation_code) OR LENGTH(i_variation_code) = 0, 'N/A', i_variation_code) AS o_variation_code,\n\tPolicy_Type AS pol_type,\n\t-- *INF*: IIF(ISNULL(pol_type),'N/A',pol_type)\n\tIFF(pol_type IS NULL, 'N/A', pol_type) AS pol_type_out,\n\tincptn_date AS i_incptn_date,\n\t-- *INF*: IIF(ISNULL(i_incptn_date), TO_DATE('1800-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), i_incptn_date)\n\tIFF(i_incptn_date IS NULL, TO_DATE('1800-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), i_incptn_date) AS o_incptn_date,\n\tLoss_Master_Run_Date AS loss_master_run_date,\n\tnew_claim_count,\n\ttrans_amt AS trans_amt1,\n\ttrans_hist_amt AS trans_hist_amt1,\n\tLM_Amount_OutStanding AS outstanding_amt,\n\tLM_Amount_Paid_Losses AS paid_loss_amt,\n\tLM_Amount_Paid_Expenses AS paid_exp_amt,\n\tLM_Unpaid_Loss_Adj_Exp AS eom_unpaid_loss_adjust_exp,\n\torig_reserve,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tFormatted_Stat_Codes_1_25 AS statistical_code1,\n\t-- *INF*: IIF(ISNULL(statistical_code1),'N/A',statistical_code1)\n\tIFF(statistical_code1 IS NULL, 'N/A', statistical_code1) AS statistical_code1_Out,\n\tFormatted_Stat_Codes_26_34 AS statistical_code2,\n\t-- *INF*: IIF(ISNULL(statistical_code2),'N/A',statistical_code2)\n\tIFF(statistical_code2 IS NULL, 'N/A', statistical_code2) AS statistical_code2_Out,\n\tFormatted_Stat_Codes_34_38 AS statistical_code3,\n\t-- *INF*: IIF(ISNULL(statistical_code3),'N/A',statistical_code3)\n\tIFF(statistical_code3 IS NULL, 'N/A', statistical_code3) AS statistical_code3_Out,\n\tStatistical_Line AS statistical_line,\n\tcoverage_code_out AS loss_master_cov_code,\n\trisk_state_prov_code_Out AS risk_state_prov_code,\n\trisk_zip_code_Out AS risk_zip_code,\n\tterr_code_Out AS terr_code,\n\ttax_loc_Out AS tax_loc,\n\tclass_code_Out AS class_code,\n\texposure,\n\tsub_line_code_Out AS sub_line_code,\n\tsource_sar_asl_Out AS source_sar_asl,\n\tsource_sar_prdct_line_Out AS source_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tpms_trans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_offset_onset_ind,\n\tStatisticalCoverageAKID,\n\t-1 AS o_Default,\n\tRatingCoverageAKID,\n\tfinancial_type_code,\n\ttrans_code,\n\tPolicyCoverageAKID AS PolicyCoverageAKID1,\n\tRiskLocationAKID AS RiskLocationAKID1,\n\tPremiumTransactionAKID AS PremiumTransactionAKID1,\n\tBureauStatisticalCodeAKID AS BureauStatisticalCodeAKID1\n\tFROM RTR_Insert_Reserves_INSERT\n),\nloss_master_calculation_Reserves AS (\n\tINSERT INTO loss_master_calculation\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, loss_master_calculation_ak_id, claim_trans_pk_id, claim_trans_ak_id, claim_reins_trans_pk_id, claim_reins_trans_ak_id, agency_ak_id, contract_cust_ak_id, pol_ak_id, claim_occurrence_ak_id, claim_primary_rep_ak_id, claim_examiner_ak_id, claim_party_occurrence_ak_id, claim_party_ak_id, claim_case_ak_id, claimant_cov_det_ak_id, wc_claimant_det_ak_id, claim_pay_ak_id, cov_ak_id, temp_pol_trans_ak_id, reins_cov_ak_id, trans_kind_code, variation_code, pol_type, incptn_date, loss_master_run_date, new_claim_count, outstanding_amt, paid_loss_amt, paid_exp_amt, eom_unpaid_loss_adjust_exp, orig_reserve, auto_reins_facility, statistical_brkdwn_line, statistical_code1, statistical_code2, statistical_code3, statistical_line, loss_master_cov_code, risk_state_prov_code, risk_zip_code, terr_code, tax_loc, class_code, exposure, sub_line_code, source_sar_asl, source_sar_prdct_line, source_sar_sp_use_code, pms_trans_code, trans_date, pms_acct_entered_date, trans_offset_onset_ind, claim_trans_amt, claim_trans_hist_amt, RiskLocationAKID, PolicyCoverageAKID, StatisticalCoverageAKID, PremiumTransactionAKID, BureauStatisticalCodeAKID, RatingCoverageAKId, FinancialTypeCode, TransactionCode)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tLOSS_MASTER_CALCULATION_AK_ID, \n\tCLAIM_TRANS_PK_ID, \n\tCLAIM_TRANS_AK_ID, \n\tCLAIM_REINS_TRANS_PK_ID, \n\tCLAIM_REINS_TRANS_AK_ID, \n\to_agency_ak_id AS AGENCY_AK_ID, \n\to_contract_cust_ak_id AS CONTRACT_CUST_AK_ID, \n\to_pol_ak_id AS POL_AK_ID, \n\to_claim_occurrence_ak_id AS CLAIM_OCCURRENCE_AK_ID, \n\to_claim_primary_rep_ak_id AS CLAIM_PRIMARY_REP_AK_ID, \n\to_claim_examiner_ak_id AS CLAIM_EXAMINER_AK_ID, \n\to_claim_party_occurrence_ak_id AS CLAIM_PARTY_OCCURRENCE_AK_ID, \n\to_claim_party_ak_id AS CLAIM_PARTY_AK_ID, \n\tCLAIM_CASE_AK_ID, \n\tCLAIMANT_COV_DET_AK_ID, \n\tWC_CLAIMANT_DET_AK_ID, \n\tCLAIM_PAY_AK_ID, \n\tCOV_AK_ID, \n\tTEMP_POL_TRANS_AK_ID, \n\tREINS_COV_AK_ID, \n\tTRANS_KIND_CODE, \n\to_variation_code AS VARIATION_CODE, \n\tpol_type_out AS POL_TYPE, \n\to_incptn_date AS INCPTN_DATE, \n\tLOSS_MASTER_RUN_DATE, \n\tNEW_CLAIM_COUNT, \n\tOUTSTANDING_AMT, \n\tPAID_LOSS_AMT, \n\tPAID_EXP_AMT, \n\tEOM_UNPAID_LOSS_ADJUST_EXP, \n\tORIG_RESERVE, \n\tAUTO_REINS_FACILITY, \n\tSTATISTICAL_BRKDWN_LINE, \n\tstatistical_code1_Out AS STATISTICAL_CODE1, \n\tstatistical_code2_Out AS STATISTICAL_CODE2, \n\tstatistical_code3_Out AS STATISTICAL_CODE3, \n\tSTATISTICAL_LINE, \n\tLOSS_MASTER_COV_CODE, \n\tRISK_STATE_PROV_CODE, \n\tRISK_ZIP_CODE, \n\tTERR_CODE, \n\tTAX_LOC, \n\tCLASS_CODE, \n\tEXPOSURE, \n\tSUB_LINE_CODE, \n\tSOURCE_SAR_ASL, \n\tSOURCE_SAR_PRDCT_LINE, \n\tSOURCE_SAR_SP_USE_CODE, \n\tPMS_TRANS_CODE, \n\tTRANS_DATE, \n\tPMS_ACCT_ENTERED_DATE, \n\tTRANS_OFFSET_ONSET_IND, \n\ttrans_amt1 AS CLAIM_TRANS_AMT, \n\ttrans_hist_amt1 AS CLAIM_TRANS_HIST_AMT, \n\tRiskLocationAKID1 AS RISKLOCATIONAKID, \n\tPolicyCoverageAKID1 AS POLICYCOVERAGEAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tPremiumTransactionAKID1 AS PREMIUMTRANSACTIONAKID, \n\tBureauStatisticalCodeAKID1 AS BUREAUSTATISTICALCODEAKID, \n\tRatingCoverageAKID AS RATINGCOVERAGEAKID, \n\tfinancial_type_code AS FINANCIALTYPECODE, \n\ttrans_code AS TRANSACTIONCODE\n\tFROM EXP_Determine_AK_ID_Reserves\n),\nSQ_claim_transaction AS (\n\tSELECT CT.claim_trans_id,\r\n\t       CT.claim_trans_ak_id,\r\n\t       CT.claimant_cov_det_ak_id,\r\n\t       CT.claim_pay_ak_id, \r\n\t       CT.cause_of_loss,\r\n\t       CT.reserve_ctgry,\r\n\t       CT.type_disability,\r\n\t       CT.sar_id,\r\n\t       CT.financial_type_code,\r\n\t       CT.s3p_trans_code,\r\n\t       CT.pms_trans_code,\r\n\t       CT.trans_code,\r\n\t       CT.trans_date,\r\n\t       CT.pms_acct_entered_date,\r\n\t       CT.trans_base_type_code,\r\n\t       CT.trans_ctgry_code,\r\n\t       CT.trans_amt,\r\n\t       CT.trans_hist_amt,\r\n\t       CT.draft_num,\r\n\t       CT.source_sys_id,\r\n\t       CT.trans_offset_onset_ind \r\n\tFROM vw_claim_transaction CT with (nolock)\r\n\tWHERE CT.err_flag > = 0\r\n\tand NOT (CT.pms_trans_code in ('90','91','92','95','97','98','99') and UPPER(CT.source_sys_id)='EXCEED')\r\n\tand not CT.financial_type_code + CT.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand source_sys_id='EXCEED'\r\n\tand CT.trans_date <= @{pipeline().parameters.DATESQL}\r\n\t--debug\r\n\t--and CT.claimant_cov_det_ak_id=-10\r\n\t\r\n\tUNION ALL\r\n\t\r\n\tSELECT \r\n\t\tCT2.claim_trans_id,\r\n\t       CT2.claim_trans_ak_id,\r\n\t       CT2.claimant_cov_det_ak_id,\r\n\t       CT2.claim_pay_ak_id, \r\n\t       CT2.cause_of_loss,\r\n\t       CT2.reserve_ctgry,\r\n\t       CT2.type_disability,\r\n\t       CT2.sar_id,\r\n\t       CT2.financial_type_code,\r\n\t       CT2.s3p_trans_code,\r\n\t       CT2.pms_trans_code,\r\n\t       CT2.trans_code,\r\n\t       CT2.trans_date,\r\n\t       CT2.pms_acct_entered_date,\r\n\t       CT2.trans_base_type_code,\r\n\t       CT2.trans_ctgry_code,\r\n\t       CT2.trans_amt,\r\n\t       CT2.trans_hist_amt,\r\n\t       CT2.draft_num,\r\n\t       CT2.source_sys_id,\r\n\t       CT2.trans_offset_onset_ind \r\n\tFROM vw_claim_transaction CT2 with (nolock)\r\n\tWHERE CT2.err_flag > = 0\r\n\tand  UPPER(CT2.source_sys_id)='PMS'\r\n\tand not CT2.financial_type_code + CT2.s3p_trans_code in ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\tand CT2.trans_date <= @{pipeline().parameters.DATESQL}\r\n\t-- debug - force a 0 record lookup for testing\r\n\t--and CT2.claimant_cov_det_ak_id=-10\r\n\t\r\n\t-- exclude items selected in the Exceed reserve mapping ('90','92','95','97','98','99')\r\n\t-- exclude items that would be filtered under any all conditions ('E66','E65','B65','B66','R65','R66','S65','S66')\r\n\t-- for PMS, only pulling for last two months (but we are currently pulling much older...do not implement this rule until clarified\n),\nEXP_Default AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\t-- *INF*: financial_type_code || s3p_trans_code  ||  IIF(trans_ctgry_code = 'N/A','',trans_ctgry_code)\n\tfinancial_type_code || s3p_trans_code || IFF(trans_ctgry_code = 'N/A', '', trans_ctgry_code) AS V_Exceed_Trans_Code,\n\tV_Exceed_Trans_Code AS Exceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind\n\tFROM SQ_claim_transaction\n),\nEXP_Loss_Master_Offset_Onset AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tclaimant_cov_det_ak_id,\n\tclaim_pay_ak_id,\n\tcause_of_loss,\n\treserve_ctgry,\n\ttype_disability,\n\tsar_id,\n\tfinancial_type_code,\n\ts3p_trans_code,\n\tpms_trans_code,\n\ttrans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_base_type_code,\n\ttrans_ctgry_code,\n\tExceed_Trans_Code,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tdraft_num,\n\tsource_sys_id,\n\ttrans_offset_onset_ind,\n\t-- *INF*: ADD_TO_DATE(SYSDATE,'MM',-1)\n\tADD_TO_DATE(SYSDATE, 'MM', - 1) AS V_Last_Month_Date,\n\t-- *INF*: LAST_DAY(V_Last_Month_Date)\n\tLAST_DAY(V_Last_Month_Date) AS V_Last_Month_Last_Day_Date,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'YYYY')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'YYYY') AS V_Account_Date_YYYY,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'MM')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'MM') AS V_Account_Date_MM,\n\t-- *INF*: V_Account_Date_YYYY || LPAD(V_Account_Date_MM,2,'0')\n\tV_Account_Date_YYYY || LPAD(V_Account_Date_MM, 2, '0') AS V_Account_Date,\n\t-- *INF*: SET_DATE_PART(\r\n\t--          SET_DATE_PART(\r\n\t--                      SET_DATE_PART( V_Last_Month_Last_Day_Date, 'HH', 23) \r\n\t--                                           ,'MI',59)\r\n\t--                                ,'SS',59)\r\n\t-- \r\n\t-- \r\n\t-- --- Changing the date to have 00:00:00 in the timestamp part\n\tSET_DATE_PART(SET_DATE_PART(SET_DATE_PART(V_Last_Month_Last_Day_Date, 'HH', 23), 'MI', 59), 'SS', 59) AS v_Loss_Master_Run_Date,\n\t-- *INF*: IIF(trans_offset_onset_ind = 'O', pms_acct_entered_date, ADD_TO_DATE(v_Loss_Master_Run_Date,'dd',1))\r\n\t-- \r\n\t-- --- Above logic is very important for Loss Master generation for EDW. We had to use above so that for EXCEED Offset Transactions we can get the attributes from Dim tables as that day so we are using pms_acct_entered_date. And for other transactions we use loss_master_run_date.\n\tIFF(trans_offset_onset_ind = 'O', pms_acct_entered_date, ADD_TO_DATE(v_Loss_Master_Run_Date, 'dd', 1)) AS Loss_Master_Run_Date\n\tFROM EXP_Default\n),\nmplt_LM_Policy_n_Claim_Attributes AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tLKP_Claimant_Coverage_Detail AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id,\n\t\tloc_unit_num,\n\t\tsub_loc_unit_num,\n\t\tins_line,\n\t\trisk_unit_grp,\n\t\trisk_unit_grp_seq_num,\n\t\trisk_unit,\n\t\trisk_unit_seq_num,\n\t\tmajor_peril_code,\n\t\tmajor_peril_seq,\n\t\tpms_loss_disability,\n\t\treserve_ctgry,\n\t\tcause_of_loss,\n\t\tpms_type_exposure,\n\t\tpms_type_bureau_code,\n\t\trisk_type_ind,\n\t\tPolicySourceID,\n\t\tClassCode,\n\t\tSublineCode,\n\t\tRatingCoverageAKId,\n\t\tStatisticalCoverageAKID,\n\t\tPolicyCoverageAKID,\n\t\tRiskLocationAKID,\n\t\tPremiumTransactionAKID,\n\t\tBureauStatisticalCodeAKID,\n\t\tRiskTerritory,\n\t\tStateProvinceCode,\n\t\tZipPostalCode,\n\t\tTaxLocation,\n\t\tExposure,\n\t\tBureauStatisticalcode1_15,\n\t\tBureauSpecialUseCode,\n\t\tPMSAnnualStatementLine,\n\t\tRatingDateIndicator,\n\t\tBureauStatisticalUserLine,\n\t\tAuditReinstatementIndicator,\n\t\tclaimant_cov_det_ak_id,\n\t\teff_from_date,\n\t\teff_to_date\n\t\tFROM (\n\t\t\tSELECT Ab.claim_party_occurrence_ak_id AS Claim_party_occurrence_ak_id,\r\n\t\t\t       Ab.loc_unit_num                 AS Loc_unit_num,\r\n\t\t\t       Ab.sub_loc_unit_num             AS Sub_loc_unit_num,\r\n\t\t\t       Ab.ins_line                     AS Ins_line,\r\n\t\t\t       Ab.risk_unit_grp                AS Risk_unit_grp,\r\n\t\t\t       Ab.risk_unit_grp_seq_num        AS Risk_unit_grp_seq_num,\r\n\t\t\t       Ab.risk_unit                    AS Risk_unit,\r\n\t\t\t       Ab.risk_unit_seq_num            AS Risk_unit_seq_num,\r\n\t\t\t       Ab.major_peril_code             AS Major_peril_code,\r\n\t\t\t       Ab.major_peril_seq              AS Major_peril_seq,\r\n\t\t\t       Ab.pms_loss_disability          AS Pms_loss_disability,\r\n\t\t\t       Ab.reserve_ctgry                AS Reserve_ctgry,\r\n\t\t\t       Ab.cause_of_loss                AS Cause_of_loss,\r\n\t\t\t       Ab.pms_type_exposure            AS Pms_type_exposure,\r\n\t\t\t       Ab.pms_type_bureau_code         AS Pms_type_bureau_code,\r\n\t\t\t       Ab.risk_type_ind                AS Risk_type_ind,\r\n\t\t\t       Ab.PolicySourceID               AS Policysourceid,\r\n\t\t\t       isnull(Sc.ClassCode,'N/A')                    AS Classcode,\r\n\t\t\t       isnull(Sc.SublineCode,'N/A')                  AS Sublinecode,\r\n\t\t\t       Ab.RatingCoverageAKId           AS Ratingcoverageakid,\r\n\t\t\t       Ab.StatisticalCoverageAKID      AS Statisticalcoverageakid,\r\n\t\t\t       isnull(Pc.PolicyCoverageAKID,-1)           AS Policycoverageakid,\r\n\t\t\t       isnull(Rl.RiskLocationAKID,-1)             AS Risklocationakid,\r\n\t\t\t       isnull(Pt.PremiumTransactionAKID,-1)       AS Premiumtransactionakid,\r\n\t\t\t       isnull(Bsc.BureauStatisticalCodeAKID,-1)   AS Bureaustatisticalcodeakid,\r\n\t\t\t       isnull(Rl.RiskTerritory, 'N/A')              AS Riskterritory,\r\n\t\t\t       isnull(Rl.StateProvinceCode , 'N/A')           AS Stateprovincecode,\r\n\t\t\t       isnull(Rl.ZipPostalCode,'N/A')                AS Zippostalcode,\r\n\t\t\t       isnull(Rl.TaxLocation,'N/A')                  AS Taxlocation,\r\n\t\t\t       isnull(Pt.Exposure,0)                     AS Exposure,\r\n\t\t\t       isnull(BureauCode1 + BureauCode2 + BureauCode3 + BureauCode4 + BureauCode5 + \r\n\t\t\t       BureauCode6 + BureauCode7 + BureauCode8 + BureauCode9 + BureauCode10 + \r\n\t\t\t       BureauCode11 + BureauCode12 + BureauCode13 + BureauCode14 + BureauCode15, 'N/A') AS Bureaustatisticalcode1_15,\r\n\t\t\t       isnull(BureauSpecialUseCode, 'N/A')            AS BureauSpecialUseCode,\r\n\t\t\t       isnull(PMSAnnualStatementLine, 'N/A')\t\t   AS PMSAnnualStatementLine,\r\n\t\t\t       isnull(RatingDateIndicator, 'N/A')             AS RatingDateIndicator,\r\n\t\t\t       isnull(BureauStatisticalUserLine, 'N/A')       AS BureauStatisticalUserLine,\r\n\t\t\t       isnull(AuditReinstatementIndicator, 'N/A')     AS AuditReinstatementIndicator,\r\n\t\t\t       Ab.claimant_cov_det_ak_id       AS Claimant_cov_det_ak_id,\r\n\t\t\t       Ab.eff_from_date                AS Eff_from_date,\r\n\t\t\t       Ab.eff_to_date                  AS Eff_to_date\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.CLAIMANT_COVERAGE_DETAIL Ab\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.STATISTICALCOVERAGE Sc\r\n\t\t\ton Ab.StatisticalCoverageAKID = Sc.StatisticalCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.POLICYCOVERAGE Pc\r\n\t\t\ton Sc.PolicyCoverageAKID = Pc.PolicyCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RISKLOCATION Rl\r\n\t\t\ton Pc.RiskLocationAKID = Rl.RiskLocationAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.PREMIUMTRANSACTION Pt\r\n\t\t\ton Sc.StatisticalCoverageAKID = Pt.StatisticalCoverageAKID\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.BUREAUSTATISTICALCODE Bsc\r\n\t\t\ton Pt.PremiumTransactionAKID = Bsc.PremiumTransactionAKID\r\n\t\t\tWHERE -- Ab.audit_id > 0 AND -- (Removing the Audit_ID condition as part of Ticket #663312)\r\n\t\t\t\t  Ab.PolicySourceID NOT IN ( 'PDC', 'DUC' )  ---- To pull data from coverages of PMS policies only\r\n\t\t\t       \r\n\t\t\tUNION\r\n\t\t\t\r\n\t\t\tSELECT Ab.claim_party_occurrence_ak_id AS Claim_party_occurrence_ak_id,\r\n\t\t\t       Ab.loc_unit_num                 AS Loc_unit_num,\r\n\t\t\t       Ab.sub_loc_unit_num             AS Sub_loc_unit_num,\r\n\t\t\t       Ab.ins_line                     AS Ins_line,\r\n\t\t\t       Ab.risk_unit_grp                AS Risk_unit_grp,\r\n\t\t\t       Ab.risk_unit_grp_seq_num        AS Risk_unit_grp_seq_num,\r\n\t\t\t       Ab.risk_unit                    AS Risk_unit,\r\n\t\t\t       Ab.risk_unit_seq_num            AS Risk_unit_seq_num,\r\n\t\t\t       Ab.major_peril_code             AS Major_peril_code,\r\n\t\t\t       Ab.major_peril_seq              AS Major_peril_seq,\r\n\t\t\t       Ab.pms_loss_disability          AS Pms_loss_disability,\r\n\t\t\t       Ab.reserve_ctgry                AS Reserve_ctgry,\r\n\t\t\t       Ab.cause_of_loss                AS Cause_of_loss,\r\n\t\t\t       Ab.pms_type_exposure            AS Pms_type_exposure,\r\n\t\t\t       Ab.pms_type_bureau_code         AS Pms_type_bureau_code,\r\n\t\t\t       Ab.risk_type_ind                AS Risk_type_ind,\r\n\t\t\t       Ab.PolicySourceID               AS Policysourceid,\r\n\t\t\t       Rc.Classcode                  AS Classcode,\r\n\t\t\t       Ab.SublineCode                  AS Sublinecode,\r\n\t\t\t       Ab.RatingCoverageAKId           AS Ratingcoverageakid,\r\n\t\t\t       Ab.StatisticalCoverageAKID      AS Statisticalcoverageakid,\r\n\t\t\t       isnull(Pc.PolicyCoverageAKID,-1)           AS Policycoverageakid,\r\n\t\t\t       isnull(Rl.RiskLocationAKID,-1)             AS Risklocationakid,\r\n\t\t\t       isnull(Pt.PremiumTransactionAKID,-1)       AS Premiumtransactionakid,\r\n\t\t\t       -1                              AS Bureaustatisticalcodeakid,\r\n\t\t\t       isnull(Rl.RiskTerritory, 'N/A')                AS Riskterritory,\r\n\t\t\t       isnull(Rl.StateProvinceCode, 'N/A')            AS Stateprovincecode,\r\n\t\t\t       isnull(Rl.ZipPostalCode, 'N/A')                AS Zippostalcode,\r\n\t\t\t       isnull(Rl.TaxLocation,' N/A')                  AS Taxlocation,\r\n\t\t\t       isnull(Rc.Exposure, 0)                     AS Exposure,\r\n\t\t\t       'N/A'                           AS Bureaustatisticalcode1_15,\r\n\t\t\t       'N/A'                           AS BureauSpecialUseCode,\r\n\t\t\t       'N/A'                           AS PMSAnnualStatementLine,\r\n\t\t\t       'N/A'                           AS RatingDateIndicator,\r\n\t\t\t       'N/A'                           AS BureauStatisticalUserLine,\r\n\t\t\t       'N/A'                           AS AuditReinstatementIndicator,\r\n\t\t\t       Ab.claimant_cov_det_ak_id       AS Claimant_cov_det_ak_id,\r\n\t\t\t       Ab.eff_from_date                AS Eff_from_date,\r\n\t\t\t       Ab.eff_to_date                  AS Eff_to_date\r\n\t\t\tFROM  @{pipeline().parameters.TARGET_TABLE_OWNER}.CLAIMANT_COVERAGE_DETAIL Ab\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RatingCoverage Rc\r\n\t\t\ton Ab.RatingCoverageAKId = Rc.RatingCoverageAKID \r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.POLICYCOVERAGE Pc\r\n\t\t\ton Rc.PolicyCoverageAKID = Pc.PolicyCoverageAKID \r\n\t\t\tand Pc.CurrentSnapshotFlag=1\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.RISKLOCATION Rl\r\n\t\t\ton Pc.RiskLocationAKID = Rl.RiskLocationAKID \r\n\t\t\tand Rl.CurrentSnapshotFlag=1\r\n\t\t\tleft join @{pipeline().parameters.TARGET_TABLE_OWNER}.PREMIUMTRANSACTION Pt\r\n\t\t\ton Rc.RatingCoverageAKID = Pt.RatingCoverageAKID \r\n\t\t\tand Pt.EffectiveDate=Rc.EffectiveDate\r\n\t\t\tand Pt.CurrentSnapshotFlag=1\r\n\t\t\tWHERE  -- Ab.audit_id > 0 AND -- -- (Removing the Audit_ID condition as part of Ticket #663312)\r\n\t\t\t\t   Ab.PolicySourceID IN ( 'PDC', 'DUC' )  ---- To pull data for coverages of DuckCreek policies only\r\n\t\t\tORDER BY Ab.claimant_cov_det_ak_id--\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claimant_cov_det_ak_id,eff_from_date,eff_to_date ORDER BY claim_party_occurrence_ak_id DESC) = 1\n\t),\n\tLKP_Claim_Paymeny_Category AS (\n\t\tSELECT\n\t\tcost_containment_saving_amt,\n\t\tclaim_pay_ak_id\n\t\tFROM (\n\t\t\tSELECT claim_payment_category.cost_containment_saving_amt as cost_containment_saving_amt, claim_payment_category.claim_pay_ak_id as claim_pay_ak_id \r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment_category\r\n\t\t\tWHERE claim_pay_ctgry_type = 'CC'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_ak_id ORDER BY cost_containment_saving_amt DESC) = 1\n\t),\n\tLKP_Claim_Party_Occurrence AS (\n\t\tSELECT\n\t\tclaim_party_occurrence_ak_id,\n\t\tclaim_occurrence_ak_id,\n\t\tclaim_party_ak_id,\n\t\tclaim_case_ak_id,\n\t\tclaim_occurrence_key,\n\t\tsource_claim_occurrence_status_code,\n\t\tpolicy_key,\n\t\tpolicy_ak_id,\n\t\tExceed_Claim_Number,\n\t\tclaimant_num,\n\t\tclaim_loss_date,\n\t\tclaim_occurrence_num\n\t\tFROM (\n\t\t\tSELECT CPO.claim_occurrence_ak_id             AS claim_occurrence_ak_id,\r\n\t\t\t       CP.claim_party_ak_id                   AS claim_party_ak_id,\r\n\t\t\t       CPO.claim_case_ak_id \t           AS claim_case_ak_id,\r\n\t\t\t       CO.claim_occurrence_key                AS claim_occurrence_key,\r\n\t\t\t       CO.source_claim_occurrence_status_code AS source_claim_occurrence_status_code,\r\n\t\t\t       CO.pol_key                             AS policy_key,\r\n\t\t\t       CO.pol_key_ak_id                    AS policy_ak_id, \r\n\t\t\t       CO.s3p_claim_num                       AS Exceed_Claim_Number,\r\n\t\t\t       CPO.claimant_num                       AS claimant_num,\r\n\t\t\t       CO.claim_loss_date                     AS claim_loss_date,\r\n\t\t\t       CO.claim_occurrence_num\t\t\t\t  AS claim_occurrence_num,\r\n\t\t\t       CPO.claim_party_occurrence_ak_id       AS claim_party_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party_occurrence CPO,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence CO,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party CP\r\n\t\t\tWHERE  CPO.claim_occurrence_ak_id = CO.claim_occurrence_ak_id\r\n\t\t\t       AND CP.claim_party_ak_id = CPO.claim_party_ak_id\r\n\t\t\t       AND CO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CPO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CP.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CPO.claim_party_role_code IN ( 'CLMT', 'CMT' )\r\n\t\t\t ORDER  BY claimant_num, claim_party_role_code --\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_occurrence_ak_id ORDER BY claim_party_occurrence_ak_id DESC) = 1\n\t),\n\tLKP_Workers_Comp_Claimant_Detail AS (\n\t\tSELECT\n\t\twc_claimant_det_ak_id,\n\t\tclaim_party_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT WCCD.wc_claimant_det_ak_id        AS wc_claimant_det_ak_id,\r\n\t\t\t       WCCD.claim_party_occurrence_ak_id AS claim_party_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.workers_comp_claimant_detail  WCCD\r\n\t\t\tWHERE WCCD.crrnt_snpsht_flag =1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_occurrence_ak_id ORDER BY wc_claimant_det_ak_id DESC) = 1\n\t),\n\tLKP_Claim_Case AS (\n\t\tSELECT\n\t\tclaim_case_ak_id,\n\t\tprim_litigation_handler_ak_id\n\t\tFROM (\n\t\t\tSELECT CC.prim_litigation_handler_ak_id     AS prim_litigation_handler_ak_id,\r\n\t\t\t       CC.suit_status_code                  AS suit_status_code,\r\n\t\t\t       CC.prim_litigation_handler_role_code AS prim_litigation_handler_role_code,\r\n\t\t\t       CC.suit_open_date                    AS suit_open_date,\r\n\t\t\t       CC.suit_close_date                   AS suit_close_date,\r\n\t\t\t       CC.claim_case_ak_id                  AS claim_case_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_case CC\r\n\t\t\tWHERE CC.crrnt_snpsht_flag =1\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_case_ak_id ORDER BY claim_case_ak_id DESC) = 1\n\t),\n\tClaim_Representative_H AS (\n\t\tSELECT\n\t\tclaim_rep_ak_id,\n\t\tclaim_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT CR.claim_rep_ak_id         AS claim_rep_ak_id,\r\n\t\t\t          CRO.claim_occurrence_ak_id AS claim_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative CR,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative_occurrence CRO\r\n\t\t\tWHERE  CR.claim_rep_ak_id = CRO.claim_rep_ak_id\r\n\t\t\t       AND CR.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.claim_rep_role_code = 'H'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_ak_id ORDER BY claim_rep_ak_id) = 1\n\t),\n\tClaim_Representative_Examiner AS (\n\t\tSELECT\n\t\tclaim_rep_ak_id,\n\t\tclaim_occurrence_ak_id\n\t\tFROM (\n\t\t\tSELECT CR.claim_rep_ak_id         AS claim_rep_ak_id,\r\n\t\t\t       CRO.claim_occurrence_ak_id AS claim_occurrence_ak_id\r\n\t\t\tFROM   @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative CR,\r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_representative_occurrence CRO\r\n\t\t\tWHERE  CR.claim_rep_ak_id = CRO.claim_rep_ak_id\r\n\t\t\t       AND CR.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.crrnt_snpsht_flag = 1\r\n\t\t\t       AND CRO.claim_rep_role_code = 'E'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_ak_id ORDER BY claim_rep_ak_id DESC) = 1\n\t),\n\tLKP_Policy_Contract_Customer AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tcontract_cust_ak_id,\n\t\tagency_ak_id,\n\t\tpol_key,\n\t\tmco,\n\t\tpol_eff_date,\n\t\tpol_exp_date,\n\t\tpms_pol_lob_code,\n\t\tClassOfBusiness,\n\t\tvariation_code,\n\t\tIN_policy_ak_id\n\t\tFROM (\n\t\t\tSELECT       P.contract_cust_ak_id AS contract_cust_ak_id,\r\n\t\t\t       P.AgencyAKID      AS agency_ak_id,\r\n\t\t\t       P.pol_key             AS pol_key,\r\n\t\t\t       P.mco                    AS mco,\r\n\t\t\t       P.pol_eff_date        AS pol_eff_date,\r\n\t\t\t       P.pol_exp_date        AS pol_exp_date,\r\n\t\t\t       P.pms_pol_lob_code    AS pms_pol_lob_code,\r\n\t\t\t       P.ClassOfBusiness as ClassOfBusiness,\r\n\t\t\t       P.variation_code      AS variation_code,\r\n\t\t\t       P.pol_ak_id           AS pol_ak_id\r\n\t\t\tFROM   \r\n\t\t\t       @{pipeline().parameters.TARGET_TABLE_OWNER}.contract_customer CC,\r\n\t\t\t       @{pipeline().parameters.SOURCE_TABLE_OWNER}.policy P, \r\n\t\t\t       @{pipeline().parameters.SOURCE_TABLE_OWNER}.agency A\r\n\t\t\tWHERE  CC.contract_cust_ak_id = P.contract_cust_ak_id\r\n\t\t\t       AND P.AgencyAKId  = A.AgencyAKId\r\n\t\t\t       AND CC.crrnt_snpsht_flag = 1\r\n\t\t\t       AND P.crrnt_snpsht_flag = 1\r\n\t\t\t       AND A.CurrentSnapshotFlag =1\r\n\t\t\t       AND P.pol_ak_id  IN (SELECT DISTINCT pol_key_ak_id FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_occurrence)\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id ORDER BY pol_ak_id DESC) = 1\n\t),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tLKP_Policy_Contract_Customer.IN_policy_ak_id AS pol_ak_id,\n\t\tLKP_Policy_Contract_Customer.contract_cust_ak_id,\n\t\tLKP_Policy_Contract_Customer.agency_ak_id,\n\t\tLKP_Policy_Contract_Customer.pol_key,\n\t\tLKP_Policy_Contract_Customer.mco,\n\t\tLKP_Policy_Contract_Customer.pol_eff_date,\n\t\tLKP_Policy_Contract_Customer.pol_exp_date,\n\t\tLKP_Policy_Contract_Customer.pms_pol_lob_code,\n\t\tLKP_Policy_Contract_Customer.ClassOfBusiness,\n\t\tLKP_Policy_Contract_Customer.variation_code,\n\t\tLKP_Claim_Party_Occurrence.claim_party_occurrence_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_party_ak_id,\n\t\tClaim_Representative_H.claim_rep_ak_id AS claim_rep_ak_id_H,\n\t\tClaim_Representative_Examiner.claim_rep_ak_id AS claim_rep_ak_id_E,\n\t\tLKP_Claim_Case.claim_case_ak_id,\n\t\tLKP_Workers_Comp_Claimant_Detail.wc_claimant_det_ak_id,\n\t\tLKP_Claim_Case.prim_litigation_handler_ak_id,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_key,\n\t\tLKP_Claim_Party_Occurrence.source_claim_occurrence_status_code,\n\t\tLKP_Claim_Party_Occurrence.policy_key,\n\t\tLKP_Claim_Party_Occurrence.Exceed_Claim_Number,\n\t\tLKP_Claim_Party_Occurrence.claimant_num,\n\t\tLKP_Claim_Party_Occurrence.claim_loss_date,\n\t\tLKP_Claim_Party_Occurrence.claim_occurrence_num,\n\t\tLKP_Claimant_Coverage_Detail.loc_unit_num,\n\t\tLKP_Claimant_Coverage_Detail.sub_loc_unit_num,\n\t\tLKP_Claimant_Coverage_Detail.ins_line,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_grp,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_grp_seq_num,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit,\n\t\tLKP_Claimant_Coverage_Detail.risk_unit_seq_num,\n\t\tLKP_Claimant_Coverage_Detail.risk_type_ind,\n\t\tLKP_Claimant_Coverage_Detail.major_peril_code,\n\t\tLKP_Claimant_Coverage_Detail.major_peril_seq,\n\t\tLKP_Claimant_Coverage_Detail.pms_loss_disability,\n\t\tLKP_Claimant_Coverage_Detail.reserve_ctgry,\n\t\tLKP_Claimant_Coverage_Detail.cause_of_loss,\n\t\tLKP_Claimant_Coverage_Detail.pms_type_exposure,\n\t\tLKP_Claimant_Coverage_Detail.pms_type_bureau_code,\n\t\tLKP_Claim_Paymeny_Category.cost_containment_saving_amt,\n\t\tLKP_Claimant_Coverage_Detail.PolicySourceID,\n\t\tLKP_Claimant_Coverage_Detail.ClassCode,\n\t\tLKP_Claimant_Coverage_Detail.SublineCode,\n\t\tLKP_Claimant_Coverage_Detail.RatingCoverageAKId,\n\t\tLKP_Claimant_Coverage_Detail.StatisticalCoverageAKID,\n\t\tLKP_Claimant_Coverage_Detail.PolicyCoverageAKID,\n\t\tLKP_Claimant_Coverage_Detail.RiskLocationAKID,\n\t\tLKP_Claimant_Coverage_Detail.PremiumTransactionAKID,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalCodeAKID,\n\t\tLKP_Claimant_Coverage_Detail.RiskTerritory,\n\t\tLKP_Claimant_Coverage_Detail.StateProvinceCode,\n\t\tLKP_Claimant_Coverage_Detail.ZipPostalCode,\n\t\tLKP_Claimant_Coverage_Detail.TaxLocation,\n\t\tLKP_Claimant_Coverage_Detail.Exposure,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalcode1_15,\n\t\tLKP_Claimant_Coverage_Detail.BureauSpecialUseCode,\n\t\tLKP_Claimant_Coverage_Detail.PMSAnnualStatementLine,\n\t\tLKP_Claimant_Coverage_Detail.RatingDateIndicator,\n\t\tLKP_Claimant_Coverage_Detail.BureauStatisticalUserLine,\n\t\tLKP_Claimant_Coverage_Detail.AuditReinstatementIndicator\n\t\tFROM \n\t\tLEFT JOIN Claim_Representative_Examiner\n\t\tON Claim_Representative_Examiner.claim_occurrence_ak_id = LKP_Claim_Party_Occurrence.claim_occurrence_ak_id\n\t\tLEFT JOIN Claim_Representative_H\n\t\tON Claim_Representative_H.claim_occurrence_ak_id = LKP_Claim_Party_Occurrence.claim_occurrence_ak_id\n\t\tLEFT JOIN LKP_Claim_Case\n\t\tON LKP_Claim_Case.claim_case_ak_id = LKP_Claim_Party_Occurrence.claim_case_ak_id\n\t\tLEFT JOIN LKP_Claim_Party_Occurrence\n\t\tON LKP_Claim_Party_Occurrence.claim_party_occurrence_ak_id = LKP_Claimant_Coverage_Detail.claim_party_occurrence_ak_id\n\t\tLEFT JOIN LKP_Claim_Paymeny_Category\n\t\tON LKP_Claim_Paymeny_Category.claim_pay_ak_id = INPUT.IN_claim_pay_ak_id\n\t\tLEFT JOIN LKP_Claimant_Coverage_Detail\n\t\tON LKP_Claimant_Coverage_Detail.claimant_cov_det_ak_id = INPUT.IN_claimant_cov_det_ak_id AND LKP_Claimant_Coverage_Detail.eff_from_date <= INPUT.IN_Date AND LKP_Claimant_Coverage_Detail.eff_to_date >= INPUT.IN_Date\n\t\tLEFT JOIN LKP_Policy_Contract_Customer\n\t\tON LKP_Policy_Contract_Customer.pol_ak_id = LKP_Claim_Party_Occurrence.policy_ak_id\n\t\tLEFT JOIN LKP_Workers_Comp_Claimant_Detail\n\t\tON LKP_Workers_Comp_Claimant_Detail.claim_party_occurrence_ak_id = LKP_Claimant_Coverage_Detail.claim_party_occurrence_ak_id\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tpol_ak_id, \n\t\tcontract_cust_ak_id, \n\t\tagency_ak_id, \n\t\tpol_key, \n\t\tmco, \n\t\tpol_eff_date, \n\t\tpol_exp_date, \n\t\tpms_pol_lob_code, \n\t\tClassOfBusiness, \n\t\tvariation_code, \n\t\tclaim_party_occurrence_ak_id, \n\t\tclaim_occurrence_ak_id, \n\t\tclaim_party_ak_id, \n\t\tclaim_rep_ak_id_H, \n\t\tclaim_rep_ak_id_E, \n\t\tclaim_case_ak_id, \n\t\twc_claimant_det_ak_id, \n\t\tclaim_occurrence_key, \n\t\tsource_claim_occurrence_status_code, \n\t\tpolicy_key, \n\t\tExceed_Claim_Number, \n\t\tclaimant_num, \n\t\tclaim_loss_date, \n\t\tclaim_occurrence_num, \n\t\tloc_unit_num, \n\t\tsub_loc_unit_num, \n\t\tins_line, \n\t\trisk_unit_grp, \n\t\trisk_unit_grp_seq_num, \n\t\trisk_unit, \n\t\trisk_unit_seq_num, \n\t\trisk_type_ind, \n\t\tmajor_peril_code, \n\t\tmajor_peril_seq, \n\t\tpms_loss_disability, \n\t\treserve_ctgry, \n\t\tcause_of_loss, \n\t\tpms_type_exposure, \n\t\tpms_type_bureau_code, \n\t\tcost_containment_saving_amt, \n\t\tPolicySourceID, \n\t\tClassCode, \n\t\tSublineCode, \n\t\tRatingCoverageAKId, \n\t\tStatisticalCoverageAKID, \n\t\tPolicyCoverageAKID, \n\t\tRiskLocationAKID, \n\t\tPremiumTransactionAKID, \n\t\tBureauStatisticalCodeAKID, \n\t\tRiskTerritory, \n\t\tStateProvinceCode, \n\t\tZipPostalCode, \n\t\tTaxLocation, \n\t\tExposure, \n\t\tBureauStatisticalcode1_15, \n\t\tBureauSpecialUseCode, \n\t\tPMSAnnualStatementLine, \n\t\tRatingDateIndicator, \n\t\tBureauStatisticalUserLine, \n\t\tAuditReinstatementIndicator\n\t\tFROM EXP_Values\n\t),\n),\nEXP_Determine_Loss_Master_Output_Rows AS (\n\tSELECT\n\tEXP_Loss_Master_Offset_Onset.claim_trans_id,\n\tEXP_Loss_Master_Offset_Onset.claim_trans_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_party_occurrence_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_party_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_occurrence_ak_id,\n\tEXP_Loss_Master_Offset_Onset.claimant_cov_det_ak_id,\n\tEXP_Loss_Master_Offset_Onset.claim_pay_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.pol_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.contract_cust_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.agency_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.pol_eff_date,\n\tmplt_LM_Policy_n_Claim_Attributes.pol_exp_date,\n\tmplt_LM_Policy_n_Claim_Attributes.pms_pol_lob_code,\n\tmplt_LM_Policy_n_Claim_Attributes.variation_code,\n\t-- *INF*: IIF(IN(pms_pol_lob_code,'ACA','AFA','APA','ATA','ACJ','AFJ','APJ'),'6',variation_code)\n\tIFF(IN(pms_pol_lob_code, 'ACA', 'AFA', 'APA', 'ATA', 'ACJ', 'AFJ', 'APJ'), '6', variation_code) AS LM_Variation_Code,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_rep_ak_id_H,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_rep_ak_id_E,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_case_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.wc_claimant_det_ak_id,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_occurrence_key,\n\tmplt_LM_Policy_n_Claim_Attributes.source_claim_occurrence_status_code,\n\tmplt_LM_Policy_n_Claim_Attributes.policy_key AS Policy_key,\n\tmplt_LM_Policy_n_Claim_Attributes.Exceed_Claim_Number AS s3p_Claim_Num,\n\tmplt_LM_Policy_n_Claim_Attributes.claimant_num,\n\tmplt_LM_Policy_n_Claim_Attributes.claim_loss_date AS Claim_loss_date,\n\t-- *INF*: SUBSTR(Policy_key,1,3)\n\tSUBSTR(Policy_key, 1, 3) AS V_Policy_Symbol,\n\tV_Policy_Symbol AS Policy_Symbol,\n\t-- *INF*: SUBSTR(Policy_key,4,7)\n\tSUBSTR(Policy_key, 4, 7) AS V_Policy_Number,\n\tV_Policy_Number AS Policy_Number,\n\t-- *INF*: SUBSTR(Policy_key,11,2)\n\tSUBSTR(Policy_key, 11, 2) AS V_Policy_Module,\n\tV_Policy_Module AS Policy_Module,\n\tmplt_LM_Policy_n_Claim_Attributes.loc_unit_num,\n\t-- *INF*: IIF(loc_unit_num = 'N/A','0000',loc_unit_num)\r\n\t-- \r\n\t-- \r\n\t-- --Adding new rules for Personal Lines policy as the coverage EDW is incorrect.\r\n\t-- ----IIF(loc_unit_num = 'N/A','0000',loc_unit_num)\r\n\t-- \r\n\t-- -----IIF(loc_unit_num = 'N/A','0000',\r\n\t--     --   IIF(SUBSTR(Policy_key,1,1)='H' and SUBSTR(Policy_key,4,1) = '5','0000',loc_unit_num)\r\n\t--        ---)\n\tIFF(loc_unit_num = 'N/A', '0000', loc_unit_num) AS v_loc_unit_num,\n\tv_loc_unit_num AS loc_unit_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes.sub_loc_unit_num,\n\t-- *INF*: IIF(sub_loc_unit_num='N/A','000',sub_loc_unit_num)\n\tIFF(sub_loc_unit_num = 'N/A', '000', sub_loc_unit_num) AS v_sub_loc_unit_num,\n\tv_sub_loc_unit_num AS sub_loc_unit_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes.ins_line,\n\t-- *INF*: IIF(ins_line = 'N/A','NA',ins_line)\n\tIFF(ins_line = 'N/A', 'NA', ins_line) AS ins_line_out,\n\tmplt_LM_Policy_n_Claim_Attributes.risk_unit_grp,\n\t-- *INF*: IIF(risk_unit_grp = 'N/A','000',risk_unit_grp)\n\tIFF(risk_unit_grp = 'N/A', '000', risk_unit_grp) AS risk_unit_grp_out,\n\tmplt_LM_Policy_n_Claim_Attributes.risk_unit_grp_seq_num,\n\t-- *INF*: IIF(LENGTH(RTRIM(risk_unit_grp_seq_num))<3,LPAD(RTRIM(risk_unit_grp_seq_num),3,'0'),risk_unit_grp_seq_num)\n\tIFF(LENGTH(RTRIM(risk_unit_grp_seq_num)) < 3, LPAD(RTRIM(risk_unit_grp_seq_num), 3, '0'), risk_unit_grp_seq_num) AS v_risk_unit_grp_seq_num,\n\t-- *INF*: IIF(SUBSTR(v_risk_unit_grp_seq_num,1,2)='N/','NA',SUBSTR(v_risk_unit_grp_seq_num,1,2))\n\tIFF(SUBSTR(v_risk_unit_grp_seq_num, 1, 2) = 'N/', 'NA', SUBSTR(v_risk_unit_grp_seq_num, 1, 2)) AS risk_unit_grp_seq_num_First_2pos,\n\t-- *INF*: IIF(SUBSTR(v_risk_unit_grp_seq_num,3,1)='A','N',SUBSTR(v_risk_unit_grp_seq_num,3,1))\n\tIFF(SUBSTR(v_risk_unit_grp_seq_num, 3, 1) = 'A', 'N', SUBSTR(v_risk_unit_grp_seq_num, 3, 1)) AS risk_unit_grp_seq_num_last_pos,\n\tmplt_LM_Policy_n_Claim_Attributes.risk_unit,\n\t-- *INF*: RTRIM(risk_unit)\n\tRTRIM(risk_unit) AS risk_unit_out,\n\t-- *INF*: SUBSTR(risk_unit,1,3)\r\n\t-- \r\n\t-- \r\n\t-- ---IIF(source_sys_id = 'PMS',SUBSTR(risk_unit,1,3),\r\n\t-- ---IIF(SUBSTR(Policy_key,1,1)='H' and SUBSTR(Policy_key,4,1) = '5',loc_unit_num,SUBSTR(risk_unit,1,3)))\r\n\t-- \r\n\t-- ---SUBSTR(risk_unit,1,3)\n\tSUBSTR(risk_unit, 1, 3) AS risk_unit_First_3pos,\n\t-- *INF*: IIF(LENGTH(RTRIM(LTRIM(SUBSTR(risk_unit,4,3))))<3,\r\n\t-- RPAD(RTRIM(LTRIM(SUBSTR(risk_unit,4,3))),3,'0'), RTRIM(LTRIM(SUBSTR(risk_unit,4,3)))\r\n\t-- )\n\tIFF(LENGTH(RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3)))) < 3, RPAD(RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3))), 3, '0'), RTRIM(LTRIM(SUBSTR(risk_unit, 4, 3)))) AS risk_unit_last_3pos,\n\tmplt_LM_Policy_n_Claim_Attributes.risk_unit_seq_num,\n\tmplt_LM_Policy_n_Claim_Attributes.risk_type_ind,\n\t-- *INF*: IIF(risk_unit_seq_num ='0' and risk_type_ind = 'N/A','00',\r\n\t-- IIF(LENGTH(risk_unit_seq_num)=1 and risk_unit_seq_num <> '0' and risk_type_ind = 'N/A', risk_unit_seq_num || '0',risk_unit_seq_num || risk_type_ind ))\n\tIFF(risk_unit_seq_num = '0' AND risk_type_ind = 'N/A', '00', IFF(LENGTH(risk_unit_seq_num) = 1 AND risk_unit_seq_num <> '0' AND risk_type_ind = 'N/A', risk_unit_seq_num || '0', risk_unit_seq_num || risk_type_ind)) AS risk_unit_seq_num_out,\n\tmplt_LM_Policy_n_Claim_Attributes.major_peril_code,\n\t-- *INF*: IIF(major_peril_code='N/A','000',major_peril_code)\n\tIFF(major_peril_code = 'N/A', '000', major_peril_code) AS major_peril_code_Out,\n\tmplt_LM_Policy_n_Claim_Attributes.major_peril_seq,\n\t-- *INF*: IIF(major_peril_seq='N/A','00',major_peril_seq)\n\tIFF(major_peril_seq = 'N/A', '00', major_peril_seq) AS major_peril_seq_out,\n\tmplt_LM_Policy_n_Claim_Attributes.pms_loss_disability,\n\tmplt_LM_Policy_n_Claim_Attributes.reserve_ctgry,\n\tmplt_LM_Policy_n_Claim_Attributes.cause_of_loss,\n\tmplt_LM_Policy_n_Claim_Attributes.pms_type_exposure,\n\t-- *INF*: IIF(pms_type_exposure = 'N/A','000',pms_type_exposure)\n\tIFF(pms_type_exposure = 'N/A', '000', pms_type_exposure) AS pms_type_exposure_out,\n\tmplt_LM_Policy_n_Claim_Attributes.pms_type_bureau_code,\n\tmplt_LM_Policy_n_Claim_Attributes.cost_containment_saving_amt,\n\tEXP_Loss_Master_Offset_Onset.sar_id,\n\tEXP_Loss_Master_Offset_Onset.financial_type_code,\n\tEXP_Loss_Master_Offset_Onset.s3p_trans_code,\n\tEXP_Loss_Master_Offset_Onset.pms_trans_code,\n\tEXP_Loss_Master_Offset_Onset.trans_code,\n\tEXP_Loss_Master_Offset_Onset.trans_date,\n\tEXP_Loss_Master_Offset_Onset.pms_acct_entered_date,\n\tEXP_Loss_Master_Offset_Onset.trans_base_type_code,\n\tEXP_Loss_Master_Offset_Onset.trans_ctgry_code,\n\tEXP_Loss_Master_Offset_Onset.Exceed_Trans_Code,\n\t-- *INF*: TO_CHAR(trans_date,'YYYYMMDD')\n\tTO_CHAR(trans_date, 'YYYYMMDD') AS V_Trans_Date_char,\n\t-- *INF*: TO_CHAR(pms_acct_entered_date,'YYYYMMDD')\r\n\t-- \r\n\t-- \n\tTO_CHAR(pms_acct_entered_date, 'YYYYMMDD') AS V_pms_acct_entered_date_char,\n\t-- *INF*: SUBSTR(V_Trans_Date_char,1,6)\r\n\t-- \r\n\t-- ----IIF(SUBSTR(V_Trans_Date_char,1,6) <= SUBSTR(V_pms_acct_entered_date_char,1,6), \r\n\t-- ----                                SUBSTR(V_pms_acct_entered_date_char,1,6), SUBSTR(V_Trans_Date_char,1,6))\r\n\t-- \r\n\t-- \r\n\t-- \n\tSUBSTR(V_Trans_Date_char, 1, 6) AS V_Trans_PMS_Account_Date,\n\tV_Trans_PMS_Account_Date AS Transaction_Account_Date,\n\tEXP_Loss_Master_Offset_Onset.trans_amt,\n\tEXP_Loss_Master_Offset_Onset.trans_hist_amt AS IN_trans_hist_amt,\n\t-- *INF*: IIF(IN (pms_trans_code,'97','98','99','26','27','81','83','82','84','89','75','76') \r\n\t-- AND source_sys_id <> 'PMS', -1 * IN_trans_hist_amt, IN_trans_hist_amt)\r\n\t-- \r\n\t-- --- Added 76 trans_code\r\n\t-- \n\tIFF(IN(pms_trans_code, '97', '98', '99', '26', '27', '81', '83', '82', '84', '89', '75', '76') AND source_sys_id <> 'PMS', - 1 * IN_trans_hist_amt, IN_trans_hist_amt) AS v_trans_hist_amt,\n\tv_trans_hist_amt AS trans_hist_amt,\n\tEXP_Loss_Master_Offset_Onset.source_sys_id,\n\t-- *INF*: ADD_TO_DATE(SYSDATE,'MM',@{pipeline().parameters.NO_OF_MONTHS})\n\tADD_TO_DATE(SYSDATE, 'MM', @{pipeline().parameters.NO_OF_MONTHS}) AS V_Last_Month_Date,\n\t-- *INF*: LAST_DAY(V_Last_Month_Date)\n\tLAST_DAY(V_Last_Month_Date) AS V_Last_Month_Last_Day_Date,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'YYYY')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'YYYY') AS V_Account_Date_YYYY,\n\t-- *INF*: GET_DATE_PART(V_Last_Month_Last_Day_Date,'MM')\n\tGET_DATE_PART(V_Last_Month_Last_Day_Date, 'MM') AS V_Account_Date_MM,\n\t-- *INF*: V_Account_Date_YYYY || LPAD(V_Account_Date_MM,2,'0')\n\tV_Account_Date_YYYY || LPAD(V_Account_Date_MM, 2, '0') AS V_Account_Date,\n\t-- *INF*: V_Account_Date\r\n\t-- ---@{pipeline().parameters.ACCOUNT_DATE}\r\n\t-- ---- Date of the previous month, as we are processing previous months data.\n\tV_Account_Date AS V_Account_Date_To_Check,\n\tV_Account_Date AS PMS_Account_Date_To_Check,\n\t-- *INF*: IIF\r\n\t-- (\r\n\t--     (NOT IN(pms_trans_code,'43','65','66','91') \r\n\t--            AND (V_Trans_PMS_Account_Date = V_Account_Date_To_Check OR SUBSTR(V_pms_acct_entered_date_char,1,6) = V_Account_Date_To_Check )\r\n\t--      )\r\n\t--    OR \r\n\t--     (IN(pms_trans_code,'90','92','95','97','98','99')  \r\n\t--     --AND SUBSTR(source_claim_occurrence_status_code,1,1) = 'O' \r\n\t--     --AND SUBSTR(source_claim_occurrence_status_code,1,3) <> 'OFF'\r\n\t--     ),\r\n\t-- 'VALID','INVALID'\r\n\t-- )\r\n\t-- \r\n\t-- ----3/28/2011  OR V_pms_acct_entered_date_char = V_Account_Date_To_Check  : To include the Offset records of exceed claims into calc table.\r\n\t-- \r\n\t-- ---- 3/14/2011  Added the condition to check on pms_acct_entered_date for EXCEED Offset_Onset Data\n\tIFF(( NOT IN(pms_trans_code, '43', '65', '66', '91') AND ( V_Trans_PMS_Account_Date = V_Account_Date_To_Check OR SUBSTR(V_pms_acct_entered_date_char, 1, 6) = V_Account_Date_To_Check ) ) OR ( IN(pms_trans_code, '90', '92', '95', '97', '98', '99') ), 'VALID', 'INVALID') AS V_Valid_Claim_Transaction,\n\t-- *INF*: IIF(NOT ISNULL(claim_trans_id), \r\n\t--            IIF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID','INVALID'),\r\n\t--              IIF(V_Valid_Claim_Transaction = 'VALID' ,'VALID','INVALID')\r\n\t-- )\r\n\t-- \r\n\t-- \r\n\t-- ---4/11/2011- Below logic  was changed to the above so that different logic for Claim_Transaction_Records and Claim_Reinsurance_transaction records as there is not s3p_trans_code for Reinsurance_Transactions.\r\n\t-- \r\n\t-- ---IIF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID','INVALID')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- -------------------------------------------------\r\n\t-- --DECODE(TRUE, \r\n\t-- ---IIF(NOT ISNULL(claim_trans_id),\r\n\t-- ---V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code,'E66','E65','B65','B66','R65','R66','S65','S66'),'VALID',\r\n\t-- ---V_Valid_Claim_Transaction = 'VALID','VALID',\r\n\t-- --'INVALID')\r\n\t-- --)\r\n\t-- \n\tIFF(NOT claim_trans_id IS NULL, IFF(V_Valid_Claim_Transaction = 'VALID' AND NOT IN(Exceed_Trans_Code, 'E66', 'E65', 'B65', 'B66', 'R65', 'R66', 'S65', 'S66'), 'VALID', 'INVALID'), IFF(V_Valid_Claim_Transaction = 'VALID', 'VALID', 'INVALID')) AS Valid_Claim_Transaction,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99') AND pms_trans_code <> '95',trans_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND pms_trans_code <> '95', trans_amt, 0.0) AS V_LM_Amount_OutStanding,\n\t-- *INF*: IIF(IN(pms_trans_code,'97','98','99') AND source_sys_id <> 'PMS', -1 * V_LM_Amount_OutStanding,V_LM_Amount_OutStanding)\r\n\t-- \r\n\t-- \r\n\t-- --- When Exceed data backfeeds to PMS, B90,B91 become as 99 and sign on the amount field changes to -ve sign aling with value. \r\n\t-- --- Changed the sign of the amount field only for EXCEED EDW Data\r\n\t-- ---- 11/12/2010 Added other transaction code 97, 98\n\tIFF(IN(pms_trans_code, '97', '98', '99') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_OutStanding, V_LM_Amount_OutStanding) AS LM_Amount_OutStanding,\n\t-- *INF*: IIF(NOT IN(pms_trans_code,'90','92','95','97','98','99') AND NOT IN(pms_trans_code,'71','72','73','74','75','76','77','78',   '79'),trans_amt,0.0)\n\tIFF(NOT IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND NOT IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79'), trans_amt, 0.0) AS V_LM_Amount_Paid_Losses,\n\t-- *INF*: IIF(IN(pms_trans_code,'26','27','37','81','83','82','84','88','89') AND source_sys_id <>'PMS', \r\n\t-- -1 * V_LM_Amount_Paid_Losses, V_LM_Amount_Paid_Losses)\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- ---- B22,B23,B24 convert to 82,83,84 into PMS during backfeed and amount field is multiplied by a -ve sign.\r\n\t-- ---- 26,27 trans_code in PMS relate to Recovery so the amount field is multiplied by a -ve sign\n\tIFF(IN(pms_trans_code, '26', '27', '37', '81', '83', '82', '84', '88', '89') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_Paid_Losses, V_LM_Amount_Paid_Losses) AS LM_Amount_Paid_Losses,\n\t-- *INF*: IIF(NOT IN(pms_trans_code,'90','92','95','97','98','99') AND IN(pms_trans_code,'71','72','73','74','75','76','77','78','79'),trans_amt,0.0)\n\tIFF(NOT IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79'), trans_amt, 0.0) AS V_LM_Amount_Paid_Expenses,\n\t-- *INF*: IIF(IN(pms_trans_code ,'75','76') AND source_sys_id <>  'PMS',\r\n\t-- -1 * V_LM_Amount_Paid_Expenses, V_LM_Amount_Paid_Expenses)\r\n\t-- \r\n\t-- ---- R21EX,R22EX,R23EX,R24EX,R29EX converts into 75 when it backfeeds along with amount field being multiplied with -ve sign.\r\n\t-- ---12/10/2010  Added 76 to above as R29EX converts to 76 \n\tIFF(IN(pms_trans_code, '75', '76') AND source_sys_id <> 'PMS', - 1 * V_LM_Amount_Paid_Expenses, V_LM_Amount_Paid_Expenses) AS LM_Amount_Paid_Expenses,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99') AND pms_trans_code = '95',trans_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99') AND pms_trans_code = '95', trans_amt, 0.0) AS V_LM_Unpaid_Loss_Adj_Exp,\n\tV_LM_Unpaid_Loss_Adj_Exp AS LM_Unpaid_Loss_Adj_Exp,\n\t-- *INF*: SET_DATE_PART(\r\n\t--          SET_DATE_PART(\r\n\t--                      SET_DATE_PART( V_Last_Month_Last_Day_Date, 'HH', 23) \r\n\t--                                           ,'MI',59)\r\n\t--                                ,'SS',59)\r\n\t-- \r\n\t-- \r\n\t-- --- Changing the date to have 00:00:00 in the timestamp part\r\n\t-- \n\tSET_DATE_PART(SET_DATE_PART(SET_DATE_PART(V_Last_Month_Last_Day_Date, 'HH', 23), 'MI', 59), 'SS', 59) AS Loss_Master_Run_Date,\n\tEXP_Loss_Master_Offset_Onset.trans_offset_onset_ind,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','97','98','99')=1,IN_LM_override_amt ,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '97', '98', '99') = 1, IN_LM_override_amt, 0.0) AS LM_Amount_Outstanding_Override,\n\t-- *INF*: IIF(IN(pms_trans_code,'90','92','95','97','98','99','71','72','73','74','75','76','77','78', '79')=0,IN_LM_override_amt,0.0)\n\tIFF(IN(pms_trans_code, '90', '92', '95', '97', '98', '99', '71', '72', '73', '74', '75', '76', '77', '78', '79') = 0, IN_LM_override_amt, 0.0) AS LM_Amount_Paid_Losses_Override,\n\t-- *INF*: IIF( IN(pms_trans_code,'71','72','73','74','75','76','77','78','79')=1,IN_LM_override_amt,0.0)\n\tIFF(IN(pms_trans_code, '71', '72', '73', '74', '75', '76', '77', '78', '79') = 1, IN_LM_override_amt, 0.0) AS LM_Amount_Paid_Expenses_Override,\n\t-- *INF*: IIF(pms_trans_code = '95',IN_LM_override_amt,0.0)\n\tIFF(pms_trans_code = '95', IN_LM_override_amt, 0.0) AS LM_Unpaid_Loss_Adj_Exp_Override\n\tFROM EXP_Loss_Master_Offset_Onset\n\t -- Manually join with mplt_LM_Policy_n_Claim_Attributes\n),\nFIL_Claim_Transaction_Rows AS (\n\tSELECT\n\tEXP_Determine_Loss_Master_Output_Rows.claim_trans_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_trans_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_party_occurrence_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_occurrence_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_party_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claimant_cov_det_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_pay_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.pol_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.contract_cust_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.agency_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.pol_eff_date, \n\tEXP_Determine_Loss_Master_Output_Rows.pol_exp_date, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_rep_ak_id_H, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_rep_ak_id_E, \n\tEXP_Determine_Loss_Master_Output_Rows.wc_claimant_det_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_case_ak_id, \n\tEXP_Determine_Loss_Master_Output_Rows.claim_occurrence_key, \n\tEXP_Determine_Loss_Master_Output_Rows.source_claim_occurrence_status_code, \n\tEXP_Determine_Loss_Master_Output_Rows.Policy_key, \n\tEXP_Determine_Loss_Master_Output_Rows.s3p_Claim_Num, \n\tEXP_Determine_Loss_Master_Output_Rows.claimant_num, \n\tEXP_Determine_Loss_Master_Output_Rows.Claim_loss_date, \n\tEXP_Determine_Loss_Master_Output_Rows.LM_Variation_Code, \n\tEXP_Determine_Loss_Master_Output_Rows.Policy_Symbol, \n\tEXP_Determine_Loss_Master_Output_Rows.Policy_Number, \n\tEXP_Determine_Loss_Master_Output_Rows.Policy_Module, \n\tEXP_Determine_Loss_Master_Output_Rows.loc_unit_num, \n\tEXP_Determine_Loss_Master_Output_Rows.loc_unit_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows.sub_loc_unit_num, \n\tEXP_Determine_Loss_Master_Output_Rows.sub_loc_unit_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows.ins_line, \n\tEXP_Determine_Loss_Master_Output_Rows.ins_line_out, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_grp, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_grp_out, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_grp_seq_num, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_grp_seq_num_First_2pos, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_grp_seq_num_last_pos, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_out AS risk_unit, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_seq_num, \n\tEXP_Determine_Loss_Master_Output_Rows.risk_unit_seq_num_out, \n\tEXP_Determine_Loss_Master_Output_Rows.major_peril_code, \n\tEXP_Determine_Loss_Master_Output_Rows.major_peril_code_Out, \n\tEXP_Determine_Loss_Master_Output_Rows.major_peril_seq, \n\tEXP_Determine_Loss_Master_Output_Rows.major_peril_seq_out, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_loss_disability, \n\tEXP_Determine_Loss_Master_Output_Rows.reserve_ctgry, \n\tEXP_Determine_Loss_Master_Output_Rows.cause_of_loss, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_type_exposure, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_type_exposure_out, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_type_bureau_code, \n\tEXP_Determine_Loss_Master_Output_Rows.sar_id, \n\tEXP_Determine_Loss_Master_Output_Rows.financial_type_code, \n\tEXP_Determine_Loss_Master_Output_Rows.s3p_trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_code, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_date, \n\tEXP_Determine_Loss_Master_Output_Rows.pms_acct_entered_date, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_base_type_code, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_ctgry_code, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_amt, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_hist_amt, \n\tEXP_Determine_Loss_Master_Output_Rows.Transaction_Account_Date, \n\tEXP_Determine_Loss_Master_Output_Rows.Valid_Claim_Transaction, \n\tEXP_Determine_Loss_Master_Output_Rows.LM_Amount_OutStanding, \n\tEXP_Determine_Loss_Master_Output_Rows.LM_Amount_Paid_Losses, \n\tEXP_Determine_Loss_Master_Output_Rows.LM_Amount_Paid_Expenses, \n\tEXP_Determine_Loss_Master_Output_Rows.LM_Unpaid_Loss_Adj_Exp, \n\tEXP_Determine_Loss_Master_Output_Rows.Loss_Master_Run_Date, \n\tEXP_Determine_Loss_Master_Output_Rows.PMS_Account_Date_To_Check, \n\tEXP_Determine_Loss_Master_Output_Rows.cost_containment_saving_amt, \n\tEXP_Determine_Loss_Master_Output_Rows.trans_offset_onset_ind, \n\tmplt_LM_Policy_n_Claim_Attributes.PolicySourceID, \n\tmplt_LM_Policy_n_Claim_Attributes.ClassCode, \n\tmplt_LM_Policy_n_Claim_Attributes.SublineCode, \n\tmplt_LM_Policy_n_Claim_Attributes.RatingCoverageAKId AS RatingCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.StatisticalCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.PolicyCoverageAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.RiskLocationAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.PremiumTransactionAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.BureauStatisticalCodeAKID, \n\tmplt_LM_Policy_n_Claim_Attributes.RiskTerritory, \n\tmplt_LM_Policy_n_Claim_Attributes.StateProvinceCode, \n\tmplt_LM_Policy_n_Claim_Attributes.ZipPostalCode, \n\tmplt_LM_Policy_n_Claim_Attributes.TaxLocation, \n\tmplt_LM_Policy_n_Claim_Attributes.Exposure, \n\tmplt_LM_Policy_n_Claim_Attributes.BureauStatisticalcode1_15, \n\tmplt_LM_Policy_n_Claim_Attributes.BureauSpecialUseCode, \n\tmplt_LM_Policy_n_Claim_Attributes.PMSAnnualStatementLine, \n\tmplt_LM_Policy_n_Claim_Attributes.RatingDateIndicator, \n\tmplt_LM_Policy_n_Claim_Attributes.BureauStatisticalUserLine, \n\tmplt_LM_Policy_n_Claim_Attributes.AuditReinstatementIndicator\n\tFROM EXP_Determine_Loss_Master_Output_Rows\n\t -- Manually join with mplt_LM_Policy_n_Claim_Attributes\n\tWHERE IIF(Valid_Claim_Transaction = 'VALID',TRUE,FALSE)\n),\nLKP_gtamTM08_stage AS (\n\tSELECT\n\tcoverage_code,\n\tmajor_peril\n\tFROM (\n\t\tSELECT gtam_tm08_stage.coverage_code as coverage_code, \r\n\t\tRTRIM(gtam_tm08_stage.major_peril) as major_peril \r\n\t\tFROM gtam_tm08_stage\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY major_peril ORDER BY coverage_code DESC) = 1\n),\nmplt_Coverage_Temp_Policy_Transaction_Attributes AS (WITH\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_Values AS (\n\t\tSELECT\n\t\tpol_ak_id,\n\t\tloss_id,\n\t\tins_line,\n\t\t-- *INF*: RTRIM(ins_line)\n\t\tRTRIM(ins_line) AS ins_line_out,\n\t\tloc_unit_num,\n\t\t-- *INF*: RTRIM(loc_unit_num)\n\t\tRTRIM(loc_unit_num) AS loc_unit_num1,\n\t\tsub_loc_unit_num,\n\t\t-- *INF*: RTRIM(sub_loc_unit_num)\n\t\tRTRIM(sub_loc_unit_num) AS sub_loc_unit_num1,\n\t\trisk_unit_grp,\n\t\t-- *INF*: RTRIM(risk_unit_grp)\n\t\tRTRIM(risk_unit_grp) AS risk_unit_grp1,\n\t\trisk_unit_grp_seq_num_First_2pos,\n\t\t-- *INF*: RTRIM(risk_unit_grp_seq_num_First_2pos)\n\t\tRTRIM(risk_unit_grp_seq_num_First_2pos) AS risk_unit_grp_seq_num_First_2pos1,\n\t\trisk_unit_grp_seq_num_last_pos,\n\t\t-- *INF*: RTRIM(risk_unit_grp_seq_num_last_pos)\n\t\tRTRIM(risk_unit_grp_seq_num_last_pos) AS risk_unit_grp_seq_num_last_pos1,\n\t\trisk_unit_complete,\n\t\t-- *INF*: RTRIM(risk_unit_complete)\n\t\tRTRIM(risk_unit_complete) AS risk_unit_complete1,\n\t\trisk_unit_seq_num,\n\t\t-- *INF*: RTRIM(risk_unit_seq_num)\n\t\tRTRIM(risk_unit_seq_num) AS risk_unit_seq_num1,\n\t\tpms_type_exposure,\n\t\t-- *INF*: RTRIM(pms_type_exposure)\n\t\tRTRIM(pms_type_exposure) AS pms_type_exposure1,\n\t\tmajor_peril_code,\n\t\t-- *INF*: RTRIM(major_peril_code)\n\t\tRTRIM(major_peril_code) AS major_peril_code1,\n\t\tmajor_peril_seq,\n\t\t-- *INF*: RTRIM(major_peril_seq)\n\t\tRTRIM(major_peril_seq) AS major_peril_seq1,\n\t\tClaim_loss_date\n\t\tFROM INPUT\n\t),\n\tLKP_Coverage_Temp_Policy_Transaction AS (\n\t\tSELECT\n\t\tcov_ak_id,\n\t\ttemp_pol_trans_ak_id,\n\t\tpol_ak_id,\n\t\tsar_id,\n\t\tins_line,\n\t\tloc_unit_num,\n\t\tsub_loc_unit_num,\n\t\trisk_unit_grp,\n\t\trisk_unit_grp_seq_num_First_2pos,\n\t\trisk_unit_grp_seq_num_lastpos,\n\t\trisk_unit,\n\t\trisk_unit_seq_num,\n\t\tmajor_peril_code,\n\t\tmajor_peril_seq_num,\n\t\tpms_type_exposure,\n\t\tcov_eff_date,\n\t\ttype_bureau_code,\n\t\trisk_state_prov_code,\n\t\trisk_zip_code,\n\t\tterr_code,\n\t\ttax_loc,\n\t\tclass_code,\n\t\texposure,\n\t\tsub_line_code,\n\t\tsource_sar_asl,\n\t\tsource_sar_prdct_line,\n\t\tsource_sar_sp_use_code,\n\t\tsource_statistical_code,\n\t\tsection_code,\n\t\trsn_amended_code,\n\t\tpart_code,\n\t\trating_date_ind\n\t\tFROM (\n\t\t\tSELECT  C.cov_ak_id                     AS cov_ak_id,  \r\n\t\t\tTPT.temp_pol_trans_ak_id   AS temp_pol_trans_ak_id,  \r\n\t\t\tCASE  C.pms_type_exposure WHEN 'N/A' THEN '000' ELSE RTRIM(C.pms_type_exposure)   END AS pms_type_exposure,  \r\n\t\t\tC.type_bureau_code              AS type_bureau_code,  \r\n\t\t\tTPT.risk_state_prov_code        AS risk_state_prov_code,  \r\n\t\t\tTPT.risk_zip_code               AS risk_zip_code,  \r\n\t\t\tTPT.terr_code                   AS terr_code,  \r\n\t\t\tTPT.tax_loc                     AS tax_loc,  \r\n\t\t\tTPT.class_code                  AS class_code,  \r\n\t\t\tTPT.exposure                      AS exposure,  \r\n\t\t\tTPT.sub_line_code               AS sub_line_code,  \r\n\t\t\tTPT.source_sar_asl              AS source_sar_asl,  \r\n\t\t\tTPT.source_sar_prdct_line       AS source_sar_prdct_line,  \r\n\t\t\tTPT.source_sar_sp_use_code\t AS source_sar_sp_use_code,  \r\n\t\t\tTPT.source_statistical_code     AS source_statistical_code,  \r\n\t\t\tTPT.section_code                AS section_code,  \r\n\t\t\tTPT.rsn_amended_code            AS rsn_amended_code,  \r\n\t\t\tTPT.part_code                   AS part_code,  \r\n\t\t\tRTRIM(TPT.rating_date_ind)        AS rating_date_ind,  \r\n\t\t\tC.pol_ak_id                     AS pol_ak_id,  \r\n\t\t\tTPT.sar_id                      AS sar_id,  \r\n\t\t\tCASE C.ins_line WHEN 'N/A' THEN 'NA' ELSE RTRIM(C.ins_line) END AS ins_line,  \r\n\t\t\tCASE  C.loc_unit_num  WHEN 'N/A' THEN '0000' ELSE RTRIM(C.loc_unit_num)  END AS loc_unit_num,  \r\n\t\t\tCASE  C.sub_loc_unit_num  WHEN 'N/A' THEN '000' ELSE RTRIM(C.sub_loc_unit_num)   END AS sub_loc_unit_num,  \r\n\t\t\tCASE  C.risk_unit_grp   WHEN 'N/A' THEN '000' ELSE RTRIM(C.risk_unit_grp)    END AS risk_unit_grp,  \r\n\t\t\tCASE  SUBSTRING(C.risk_unit_grp_seq_num,1,2)   WHEN 'N/' THEN 'NA' ELSE SUBSTRING(C.risk_unit_grp_seq_num,1,2) END AS risk_unit_grp_seq_num_First_2pos,  \r\n\t\t\tCASE  SUBSTRING(C.risk_unit_grp_seq_num,3,1)   WHEN 'A' THEN 'N' ELSE SUBSTRING(C.risk_unit_grp_seq_num,3,1) END AS risk_unit_grp_seq_num_lastpos,  \r\n\t\t\tRTRIM(C.risk_unit)               AS risk_unit,  \r\n\t\t\tCASE   C.risk_unit_seq_num   WHEN 'N/A' THEN '00' ELSE  RTRIM(C.risk_unit_seq_num)    END AS risk_unit_seq_num,  \r\n\t\t\tRTRIM(C.major_peril_code)              AS major_peril_code,  \r\n\t\t\tRTRIM(C.major_peril_seq_num)           AS major_peril_seq_num,  \r\n\t\t\tC.cov_eff_date                  AS cov_eff_date \r\n\t\t\tFROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.coverage C \r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.temp_policy_transaction TPT ON C.cov_ak_id = TPT.cov_ak_id AND C.crrnt_snpsht_flag = 1 AND TPT.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claim_Occurrence CO ON CO.pol_key_ak_id = C.pol_ak_id and CO.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claim_Party_Occurrence CPO ON CPO.Claim_Occurrence_ak_id = CO.Claim_Occurrence_ak_id and CPO.crrnt_snpsht_flag = 1\r\n\t\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.Claimant_Coverage_Detail CCD ON CCD.Claim_Party_Occurrence_ak_id = CPO.Claim_Party_Occurrence_ak_id and CCD.crrnt_snpsht_flag = 1\r\n\t\t\tAND RTRIM(C.risk_unit) = CCD.Risk_unit AND RTRIM(C.major_peril_code)  = CCD.major_peril_code\r\n\t\t\tORDER BY TPT.temp_pol_trans_ak_id   --\r\n\t\t\t\r\n\t\t\t--- Order By clause is important in this Lookup Override because how the data is retrieved is important\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id,sar_id,ins_line,loc_unit_num,sub_loc_unit_num,risk_unit_grp,risk_unit_grp_seq_num_First_2pos,risk_unit_grp_seq_num_lastpos,risk_unit,risk_unit_seq_num,major_peril_code,major_peril_seq_num,cov_eff_date ORDER BY cov_ak_id DESC) = 1\n\t),\n\tEXP_Lkp_Values AS (\n\t\tSELECT\n\t\tLKP_Coverage_Temp_Policy_Transaction.temp_pol_trans_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.cov_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.pol_ak_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sar_id,\n\t\tLKP_Coverage_Temp_Policy_Transaction.ins_line,\n\t\tLKP_Coverage_Temp_Policy_Transaction.loc_unit_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sub_loc_unit_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_First_2pos,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_lastpos,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_unit_seq_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.major_peril_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.major_peril_seq_num,\n\t\tLKP_Coverage_Temp_Policy_Transaction.pms_type_exposure,\n\t\tLKP_Coverage_Temp_Policy_Transaction.cov_eff_date,\n\t\tLKP_Coverage_Temp_Policy_Transaction.type_bureau_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_state_prov_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.risk_zip_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.terr_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.tax_loc,\n\t\tLKP_Coverage_Temp_Policy_Transaction.class_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.exposure,\n\t\tLKP_Coverage_Temp_Policy_Transaction.sub_line_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_asl,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_prdct_line,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_sar_sp_use_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.source_statistical_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.section_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.rsn_amended_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.part_code,\n\t\tLKP_Coverage_Temp_Policy_Transaction.rating_date_ind,\n\t\tEXP_Values.Claim_loss_date\n\t\tFROM EXP_Values\n\t\tLEFT JOIN LKP_Coverage_Temp_Policy_Transaction\n\t\tON LKP_Coverage_Temp_Policy_Transaction.pol_ak_id = EXP_Values.pol_ak_id AND LKP_Coverage_Temp_Policy_Transaction.sar_id = EXP_Values.loss_id AND LKP_Coverage_Temp_Policy_Transaction.ins_line = EXP_Values.ins_line_out AND LKP_Coverage_Temp_Policy_Transaction.loc_unit_num = EXP_Values.loc_unit_num1 AND LKP_Coverage_Temp_Policy_Transaction.sub_loc_unit_num = EXP_Values.sub_loc_unit_num1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp = EXP_Values.risk_unit_grp1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_First_2pos = EXP_Values.risk_unit_grp_seq_num_First_2pos1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_grp_seq_num_lastpos = EXP_Values.risk_unit_grp_seq_num_last_pos1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit = EXP_Values.risk_unit_complete1 AND LKP_Coverage_Temp_Policy_Transaction.risk_unit_seq_num = EXP_Values.risk_unit_seq_num1 AND LKP_Coverage_Temp_Policy_Transaction.major_peril_code = EXP_Values.major_peril_code1 AND LKP_Coverage_Temp_Policy_Transaction.major_peril_seq_num = EXP_Values.major_peril_seq1 AND LKP_Coverage_Temp_Policy_Transaction.cov_eff_date <= EXP_Values.Claim_loss_date\n\t),\n\tOUTPUT AS (\n\t\tSELECT\n\t\tcov_ak_id AS cov_ak_id_Out, \n\t\tpol_ak_id AS pol_ak_id_Out, \n\t\ttemp_pol_trans_ak_id, \n\t\tsar_id AS loss_id_Out, \n\t\tins_line AS ins_line_Out, \n\t\tloc_unit_num AS loc_unit_num_Out, \n\t\tsub_loc_unit_num AS sub_loc_unit_num_Out, \n\t\trisk_unit_grp AS risk_unit_grp_Out, \n\t\trisk_unit_grp_seq_num_First_2pos AS risk_unit_grp_seq_num_First_2pos_Out, \n\t\trisk_unit_grp_seq_num_lastpos AS risk_unit_grp_seq_num_last_pos_Out, \n\t\trisk_unit AS risk_unit_complete_Out, \n\t\trisk_unit_seq_num AS risk_unit_seq_num_Out, \n\t\tmajor_peril_code AS major_peril_code_Out, \n\t\tmajor_peril_seq_num AS major_peril_seq_Out, \n\t\tpms_type_exposure AS pms_type_exposure_Out, \n\t\tcov_eff_date AS cov_eff_date_Out, \n\t\ttype_bureau_code AS type_bureau_code_Out, \n\t\trisk_state_prov_code AS risk_state_prov_code_Out, \n\t\trisk_zip_code AS risk_zip_code_Out, \n\t\tterr_code AS terr_code_Out, \n\t\ttax_loc AS tax_loc_Out, \n\t\tclass_code AS class_code_Out, \n\t\texposure AS exposure_Out, \n\t\tsub_line_code AS sub_line_code_Out, \n\t\tsource_sar_asl AS source_sar_asl_Out, \n\t\tsource_sar_prdct_line AS source_sar_prdct_line_Out, \n\t\tsource_sar_sp_use_code, \n\t\tsource_statistical_code AS source_statistical_code_Out, \n\t\tsource_statistical_line AS source_statistical_line_Out, \n\t\tsection_code AS section_code_Out, \n\t\trsn_amended_code AS rsn_amended_code_Out, \n\t\tpart_code AS part_code_Out, \n\t\trating_date_ind, \n\t\tClaim_loss_date AS Claim_loss_date_Out\n\t\tFROM EXP_Lkp_Values\n\t),\n),\nEXP_Derive_Values AS (\n\tSELECT\n\tFIL_Claim_Transaction_Rows.pol_ak_id,\n\tFIL_Claim_Transaction_Rows.claimant_cov_det_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_trans_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_trans_id,\n\tFIL_Claim_Transaction_Rows.contract_cust_ak_id,\n\tFIL_Claim_Transaction_Rows.agency_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_rep_ak_id_H,\n\tFIL_Claim_Transaction_Rows.claim_rep_ak_id_E,\n\tFIL_Claim_Transaction_Rows.claim_pay_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_case_ak_id,\n\t-- *INF*: IIF(ISNULL(claim_case_ak_id), -1 , claim_case_ak_id)\n\tIFF(claim_case_ak_id IS NULL, - 1, claim_case_ak_id) AS claim_case_ak_id_out,\n\tFIL_Claim_Transaction_Rows.claim_party_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_party_occurrence_ak_id,\n\tFIL_Claim_Transaction_Rows.claim_occurrence_ak_id,\n\tFIL_Claim_Transaction_Rows.wc_claimant_det_ak_id,\n\t-- *INF*: IIF(ISNULL(wc_claimant_det_ak_id),-1,wc_claimant_det_ak_id)\n\tIFF(wc_claimant_det_ak_id IS NULL, - 1, wc_claimant_det_ak_id) AS wc_claimant_det_ak_id_Out,\n\tFIL_Claim_Transaction_Rows.claim_occurrence_key,\n\tFIL_Claim_Transaction_Rows.Policy_key,\n\tFIL_Claim_Transaction_Rows.Claim_loss_date,\n\t-- *INF*: TO_CHAR(Claim_loss_date,'YYYYMMDD')\n\tTO_CHAR(Claim_loss_date, 'YYYYMMDD') AS Claim_loss_date_char,\n\tFIL_Claim_Transaction_Rows.Policy_Symbol,\n\tFIL_Claim_Transaction_Rows.Policy_Number,\n\tFIL_Claim_Transaction_Rows.Policy_Module,\n\tFIL_Claim_Transaction_Rows.loc_unit_num,\n\tFIL_Claim_Transaction_Rows.loc_unit_num_out,\n\tFIL_Claim_Transaction_Rows.sub_loc_unit_num,\n\tFIL_Claim_Transaction_Rows.sub_loc_unit_num_out,\n\tFIL_Claim_Transaction_Rows.ins_line,\n\tFIL_Claim_Transaction_Rows.ins_line_out,\n\tFIL_Claim_Transaction_Rows.risk_unit_grp,\n\tFIL_Claim_Transaction_Rows.risk_unit_grp_out,\n\tFIL_Claim_Transaction_Rows.risk_unit_grp_seq_num,\n\tFIL_Claim_Transaction_Rows.risk_unit_grp_seq_num_First_2pos,\n\tFIL_Claim_Transaction_Rows.risk_unit_grp_seq_num_last_pos,\n\tFIL_Claim_Transaction_Rows.risk_unit,\n\tFIL_Claim_Transaction_Rows.risk_unit_seq_num,\n\tFIL_Claim_Transaction_Rows.risk_unit_seq_num_out,\n\tFIL_Claim_Transaction_Rows.major_peril_code,\n\tFIL_Claim_Transaction_Rows.major_peril_code_Out,\n\tFIL_Claim_Transaction_Rows.major_peril_seq,\n\tFIL_Claim_Transaction_Rows.major_peril_seq_out,\n\tFIL_Claim_Transaction_Rows.pms_loss_disability,\n\tFIL_Claim_Transaction_Rows.reserve_ctgry,\n\tFIL_Claim_Transaction_Rows.cause_of_loss,\n\tFIL_Claim_Transaction_Rows.pms_type_bureau_code,\n\tFIL_Claim_Transaction_Rows.sar_id,\n\tFIL_Claim_Transaction_Rows.financial_type_code,\n\tFIL_Claim_Transaction_Rows.pms_trans_code,\n\tFIL_Claim_Transaction_Rows.trans_code,\n\tFIL_Claim_Transaction_Rows.trans_date,\n\tFIL_Claim_Transaction_Rows.pms_acct_entered_date,\n\tFIL_Claim_Transaction_Rows.trans_base_type_code,\n\tFIL_Claim_Transaction_Rows.trans_ctgry_code,\n\tFIL_Claim_Transaction_Rows.trans_amt,\n\tFIL_Claim_Transaction_Rows.trans_hist_amt,\n\tFIL_Claim_Transaction_Rows.LM_Amount_OutStanding,\n\tFIL_Claim_Transaction_Rows.LM_Amount_Paid_Losses,\n\tFIL_Claim_Transaction_Rows.LM_Amount_Paid_Expenses,\n\tFIL_Claim_Transaction_Rows.LM_Unpaid_Loss_Adj_Exp,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.temp_pol_trans_ak_id,\n\t-- *INF*: IIF(ISNULL(temp_pol_trans_ak_id),-1,temp_pol_trans_ak_id)\n\tIFF(temp_pol_trans_ak_id IS NULL, - 1, temp_pol_trans_ak_id) AS temp_pol_trans_ak_id_Out,\n\t-- *INF*: 'VALID'\r\n\t-- \r\n\t-- --  We dont want to filter out the Claim_Transaction Records if matching Temp_Policy_Transaction record is not found.\r\n\t-- \r\n\t-- ---IIF(NOT ISNULL(temp_pol_trans_ak_id),'VALID','NOTVALID')\n\t'VALID' AS V_Valid_sar_transaction,\n\t-- *INF*: IIF(V_Valid_sar_transaction = 'VALID',\r\n\t--             IIF(LM_Amount_OutStanding = 0.0 AND LM_Unpaid_Loss_Adj_Exp = 0.0 \r\n\t--                                AND LM_Amount_Paid_Losses=0.0 AND LM_Amount_Paid_Expenses=0.0, 'FILTER','NOFILTER')\r\n\t--     ,'FILTER')\n\tIFF(V_Valid_sar_transaction = 'VALID', IFF(LM_Amount_OutStanding = 0.0 AND LM_Unpaid_Loss_Adj_Exp = 0.0 AND LM_Amount_Paid_Losses = 0.0 AND LM_Amount_Paid_Expenses = 0.0, 'FILTER', 'NOFILTER'), 'FILTER') AS V_Transaction_Filter,\n\tV_Transaction_Filter AS Transaction_Filter,\n\tFIL_Claim_Transaction_Rows.source_claim_occurrence_status_code,\n\tFIL_Claim_Transaction_Rows.pol_eff_date,\n\tFIL_Claim_Transaction_Rows.pol_exp_date,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.cov_ak_id_Out AS cov_ak_id,\n\t-- *INF*: IIF(ISNULL(cov_ak_id),-1,cov_ak_id)\n\tIFF(cov_ak_id IS NULL, - 1, cov_ak_id) AS cov_ak_id_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.pol_ak_id_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.cov_eff_date_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.type_bureau_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.risk_state_prov_code_Out AS risk_state_prov_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),StateProvinceCode,risk_state_prov_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), StateProvinceCode, risk_state_prov_code) AS risk_state_prov_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.risk_zip_code_Out AS risk_zip_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),ZipPostalCode,risk_zip_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), ZipPostalCode, risk_zip_code) AS risk_zip_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.terr_code_Out AS terr_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),RiskTerritory,terr_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), RiskTerritory, terr_code) AS terr_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.tax_loc_Out AS tax_loc,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),TaxLocation,tax_loc)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), TaxLocation, tax_loc) AS tax_loc_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.class_code_Out AS class_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),ClassCode,class_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), ClassCode, class_code) AS class_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.exposure_Out AS IN_exposure,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),Exposure,IN_exposure)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), Exposure, IN_exposure) AS exposure_out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.sub_line_code_Out AS sub_line_code,\n\t-- *INF*: IIF(IN(PolicySourceID,'PDC', 'DUC'),SublineCode,sub_line_code)\r\n\t-- \r\n\t-- ---- For DuckCreek Policies, we are getting the information from RiskLocation.\n\tIFF(IN(PolicySourceID, 'PDC', 'DUC'), SublineCode, sub_line_code) AS sub_line_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.source_sar_asl_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.source_sar_prdct_line_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.source_sar_sp_use_code,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.source_statistical_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.source_statistical_line_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.section_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.rsn_amended_code_Out,\n\tFIL_Claim_Transaction_Rows.Transaction_Account_Date,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.part_code_Out,\n\tmplt_Coverage_Temp_Policy_Transaction_Attributes.rating_date_ind,\n\t-- *INF*: GET_DATE_PART(trans_date,'MONTH')\n\tGET_DATE_PART(trans_date, 'MONTH') AS Trans_Date_Month,\n\t-- *INF*: GET_DATE_PART(trans_date,'DD')\n\tGET_DATE_PART(trans_date, 'DD') AS Trans_Date_Day,\n\t-- *INF*: GET_DATE_PART(trans_date,'YYYY')\n\tGET_DATE_PART(trans_date, 'YYYY') AS Trans_Date_Year,\n\t-- *INF*: DECODE(TRUE,IN( type_bureau_code_Out,'AL','LP','AI','LI','RL'), '100',\r\n\t-- IN( type_bureau_code_Out,'GS','GM','RG'),'400',\r\n\t-- IN( type_bureau_code_Out,'WC','WP'),'500',\r\n\t-- IN( type_bureau_code_Out,'GL','GI','GN','RQ'),'600',\r\n\t-- IN( type_bureau_code_Out,'FF','FM','BF','BP','FT','FP'),'711',\r\n\t-- IN( type_bureau_code_Out,'BD'),'722',\r\n\t-- IN( type_bureau_code_Out,'BI','BT','RB'),'800')\n\tDECODE(TRUE,\n\tIN(type_bureau_code_Out, 'AL', 'LP', 'AI', 'LI', 'RL'), '100',\n\tIN(type_bureau_code_Out, 'GS', 'GM', 'RG'), '400',\n\tIN(type_bureau_code_Out, 'WC', 'WP'), '500',\n\tIN(type_bureau_code_Out, 'GL', 'GI', 'GN', 'RQ'), '600',\n\tIN(type_bureau_code_Out, 'FF', 'FM', 'BF', 'BP', 'FT', 'FP'), '711',\n\tIN(type_bureau_code_Out, 'BD'), '722',\n\tIN(type_bureau_code_Out, 'BI', 'BT', 'RB'), '800') AS V_Statistical_Line,\n\t-- *INF*: IIF(ISNULL(V_Statistical_Line),'N/A',V_Statistical_Line)\n\tIFF(V_Statistical_Line IS NULL, 'N/A', V_Statistical_Line) AS Statistical_Line,\n\tFIL_Claim_Transaction_Rows.cost_containment_saving_amt,\n\tLKP_gtamTM08_stage.coverage_code,\n\t-- *INF*: IIF(ISNULL(coverage_code),'N/A',coverage_code)\n\tIFF(coverage_code IS NULL, 'N/A', coverage_code) AS coverage_code_out,\n\t-1 AS Default_Id,\n\t'N/A' AS Default_NA,\n\tFIL_Claim_Transaction_Rows.PMS_Account_Date_To_Check,\n\t-- *INF*: IIF(rating_date_ind = 'C', cov_eff_date_Out , pol_eff_date)\n\tIFF(rating_date_ind = 'C', cov_eff_date_Out, pol_eff_date) AS v_incptn_date,\n\tv_incptn_date AS incptn_date,\n\t-- *INF*: DECODE(TRUE, \r\n\t-- IN(risk_state_prov_code,'60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80') AND pms_trans_code = '25',1,\r\n\t-- IN(pms_trans_code, '22','42'),1,\r\n\t-- Transaction_Account_Date = PMS_Account_Date_To_Check AND IN(pms_trans_code, '90','92','23'),1,\r\n\t-- Transaction_Account_Date = PMS_Account_Date_To_Check AND pms_trans_code='41',-1,\r\n\t-- 0)\r\n\t-- \n\tDECODE(TRUE,\n\tIN(risk_state_prov_code, '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80') AND pms_trans_code = '25', 1,\n\tIN(pms_trans_code, '22', '42'), 1,\n\tTransaction_Account_Date = PMS_Account_Date_To_Check AND IN(pms_trans_code, '90', '92', '23'), 1,\n\tTransaction_Account_Date = PMS_Account_Date_To_Check AND pms_trans_code = '41', - 1,\n\t0) AS v_new_claim_count,\n\tv_new_claim_count AS new_claim_count,\n\ttrans_hist_amt AS orig_reserve,\n\t-- *INF*: 'N/A' \r\n\t-- \r\n\t-- ---- This field is populated only for Part -8 records\n\t'N/A' AS auto_reins_facility,\n\t-- *INF*: SUBSTR(source_sar_prdct_line_Out,1,2)\n\tSUBSTR(source_sar_prdct_line_Out, 1, 2) AS statistical_brkdwn_line,\n\tFIL_Claim_Transaction_Rows.Loss_Master_Run_Date,\n\tFIL_Claim_Transaction_Rows.LM_Variation_Code,\n\tFIL_Claim_Transaction_Rows.trans_offset_onset_ind,\n\tFIL_Claim_Transaction_Rows.StatisticalCoverageAKID AS i_StatisticalCoverageAKID,\n\t-- *INF*: IIF(ISNULL(i_StatisticalCoverageAKID), -1, i_StatisticalCoverageAKID)\n\tIFF(i_StatisticalCoverageAKID IS NULL, - 1, i_StatisticalCoverageAKID) AS o_StatisticalCoverageAKID,\n\tFIL_Claim_Transaction_Rows.RatingCoverageAKID AS i_RatingCoverageAKID,\n\t-- *INF*: IIF(ISNULL(i_RatingCoverageAKID), -1, i_RatingCoverageAKID)\n\tIFF(i_RatingCoverageAKID IS NULL, - 1, i_RatingCoverageAKID) AS o_RatingCoverageAKID,\n\tFIL_Claim_Transaction_Rows.PolicySourceID,\n\tFIL_Claim_Transaction_Rows.ClassCode,\n\tFIL_Claim_Transaction_Rows.SublineCode,\n\tFIL_Claim_Transaction_Rows.RatingCoverageAKID,\n\tFIL_Claim_Transaction_Rows.StatisticalCoverageAKID,\n\tFIL_Claim_Transaction_Rows.PolicyCoverageAKID,\n\t-- *INF*: IIF(ISNULL(PolicyCoverageAKID),-1,PolicyCoverageAKID)\n\tIFF(PolicyCoverageAKID IS NULL, - 1, PolicyCoverageAKID) AS PolicyCoverageAKID_Out,\n\tFIL_Claim_Transaction_Rows.RiskLocationAKID,\n\t-- *INF*: IIF(ISNULL(RiskLocationAKID),-1,RiskLocationAKID)\n\tIFF(RiskLocationAKID IS NULL, - 1, RiskLocationAKID) AS RiskLocationAKID_Out,\n\tFIL_Claim_Transaction_Rows.PremiumTransactionAKID,\n\t-- *INF*: IIF(ISNULL(PremiumTransactionAKID),-1,PremiumTransactionAKID)\n\tIFF(PremiumTransactionAKID IS NULL, - 1, PremiumTransactionAKID) AS PremiumTransactionAKID_Out,\n\tFIL_Claim_Transaction_Rows.BureauStatisticalCodeAKID,\n\t-- *INF*: IIF(ISNULL(BureauStatisticalCodeAKID),-1,BureauStatisticalCodeAKID)\n\tIFF(BureauStatisticalCodeAKID IS NULL, - 1, BureauStatisticalCodeAKID) AS BureauStatisticalCodeAKID_Out,\n\tFIL_Claim_Transaction_Rows.RiskTerritory,\n\tFIL_Claim_Transaction_Rows.StateProvinceCode,\n\tFIL_Claim_Transaction_Rows.ZipPostalCode,\n\tFIL_Claim_Transaction_Rows.TaxLocation,\n\tFIL_Claim_Transaction_Rows.Exposure,\n\tFIL_Claim_Transaction_Rows.BureauStatisticalcode1_15,\n\tFIL_Claim_Transaction_Rows.BureauSpecialUseCode,\n\tFIL_Claim_Transaction_Rows.PMSAnnualStatementLine,\n\tFIL_Claim_Transaction_Rows.RatingDateIndicator,\n\tFIL_Claim_Transaction_Rows.BureauStatisticalUserLine,\n\tFIL_Claim_Transaction_Rows.AuditReinstatementIndicator\n\tFROM FIL_Claim_Transaction_Rows\n\t -- Manually join with mplt_Coverage_Temp_Policy_Transaction_Attributes\n\tLEFT JOIN LKP_gtamTM08_stage\n\tON LKP_gtamTM08_stage.major_peril = FIL_Claim_Transaction_Rows.major_peril_code_Out\n),\nEXP_Transform_Statistical_Codes1 AS (\n\tSELECT\n\tsource_statistical_code_Out AS statistical_code,\n\tmajor_peril_code AS major_peril,\n\ttype_bureau_code_Out AS Type_Bureau,\n\tclass_code_Out AS sar_class_code,\n\t-- *INF*: statistical_code\r\n\t-- \r\n\t-- --DECODE(TRUE, Type_Bureau = 'BE', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'BF', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RP' AND major_peril = '145', ' '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '114', '  '  || statistical_code,\r\n\t-- --Type_Bureau = 'RL' AND major_peril = '119', '     '  || statistical_code,\r\n\t-- --statistical_code)\r\n\t-- \r\n\t-- ---- Had to introduce space at the begining of the field because of LTRIM(RTRIM)) to statistical codes in Temp_Policy_transaction Table.\n\tstatistical_code AS v_statistical_code,\n\t'D' AS v_stat_plan_id,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,1,1))=0,' ',SUBSTR(v_statistical_code,1,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 1, 1)) = 0, ' ', SUBSTR(v_statistical_code, 1, 1)) AS v_pos_1,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,2,1))=0,' ',SUBSTR(v_statistical_code,2,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 2, 1)) = 0, ' ', SUBSTR(v_statistical_code, 2, 1)) AS v_pos_2,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,3,1))=0,' ',SUBSTR(v_statistical_code,3,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 3, 1)) = 0, ' ', SUBSTR(v_statistical_code, 3, 1)) AS v_pos_3,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,4,1))=0,' ',SUBSTR(v_statistical_code,4,1))\r\n\t-- \r\n\t-- ----Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 4, 1)) = 0, ' ', SUBSTR(v_statistical_code, 4, 1)) AS v_pos_4,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,5,1))=0,' ',SUBSTR(v_statistical_code,5,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 5, 1)) = 0, ' ', SUBSTR(v_statistical_code, 5, 1)) AS v_pos_5,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,6,1))=0,' ',SUBSTR(v_statistical_code,6,1))\r\n\t-- \r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 6, 1)) = 0, ' ', SUBSTR(v_statistical_code, 6, 1)) AS v_pos_6,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,7,1))=0,' ',SUBSTR(v_statistical_code,7,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 7, 1)) = 0, ' ', SUBSTR(v_statistical_code, 7, 1)) AS v_pos_7,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,8,1))=0,' ',SUBSTR(v_statistical_code,8,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 8, 1)) = 0, ' ', SUBSTR(v_statistical_code, 8, 1)) AS v_pos_8,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,9,1))=0,' ',SUBSTR(v_statistical_code,9,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 9, 1)) = 0, ' ', SUBSTR(v_statistical_code, 9, 1)) AS v_pos_9,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,10,1))=0,' ',SUBSTR(v_statistical_code,10,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 10, 1)) = 0, ' ', SUBSTR(v_statistical_code, 10, 1)) AS v_pos_10,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,11,1))=0,' ',SUBSTR(v_statistical_code,11,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 11, 1)) = 0, ' ', SUBSTR(v_statistical_code, 11, 1)) AS v_pos_11,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,12,1))=0,' ',SUBSTR(v_statistical_code,12,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 12, 1)) = 0, ' ', SUBSTR(v_statistical_code, 12, 1)) AS v_pos_12,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,13,1))=0,' ',SUBSTR(v_statistical_code,13,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 13, 1)) = 0, ' ', SUBSTR(v_statistical_code, 13, 1)) AS v_pos_13,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,14,1))=0,' ',SUBSTR(v_statistical_code,14,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 14, 1)) = 0, ' ', SUBSTR(v_statistical_code, 14, 1)) AS v_pos_14,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,15,1))=0,' ',SUBSTR(v_statistical_code,15,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 15, 1)) = 0, ' ', SUBSTR(v_statistical_code, 15, 1)) AS v_pos_15,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,16,1))=0,' ',SUBSTR(v_statistical_code,16,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 16, 1)) = 0, ' ', SUBSTR(v_statistical_code, 16, 1)) AS v_pos_16,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,17,1))=0,' ',SUBSTR(v_statistical_code,17,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 17, 1)) = 0, ' ', SUBSTR(v_statistical_code, 17, 1)) AS v_pos_17,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,18,1))=0,' ',SUBSTR(v_statistical_code,18,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 18, 1)) = 0, ' ', SUBSTR(v_statistical_code, 18, 1)) AS v_pos_18,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,19,1))=0,' ',SUBSTR(v_statistical_code,19,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 19, 1)) = 0, ' ', SUBSTR(v_statistical_code, 19, 1)) AS v_pos_19,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,20,1))=0,' ',SUBSTR(v_statistical_code,20,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 20, 1)) = 0, ' ', SUBSTR(v_statistical_code, 20, 1)) AS v_pos_20,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,21,1))=0,' ',SUBSTR(v_statistical_code,21,1))\r\n\t-- \r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 21, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 21, 1)) AS v_pos_21,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,22,1))=0,' ',SUBSTR(v_statistical_code,22,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 22, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 22, 1)) AS v_pos_22,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,23,1))=0,' ',SUBSTR(v_statistical_code,23,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 23, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 23, 1)) AS v_pos_23,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','0',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,24,1))=0,' ',SUBSTR(v_statistical_code,24,1))\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '0'\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '0',\n\tLENGTH(SUBSTR(v_statistical_code, 24, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 24, 1)) AS v_pos_24,\n\t-- *INF*: DECODE(TRUE,Type_Bureau='RP','{',\r\n\t-- LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\r\n\t-- \r\n\t-- --- IN COBOL \"{\" represents a  +ve sign and \"}\" is -ve sign, since this is base rate for Type_Bureau RP is a sign field so COBOL creates \"{\". Replicating the COBOL logic.\r\n\t-- \r\n\t-- --- Statistical Code field is initialised at the begining of the WMM01A0 module to all spaces but since it is a sign field for Type Bureau of RP, these are defaulted to '{'\r\n\t-- \r\n\t-- --IIF(LENGTH(SUBSTR(v_statistical_code,25,1))=0,' ',SUBSTR(v_statistical_code,25,1))\n\tDECODE(TRUE,\n\tType_Bureau = 'RP', '{',\n\tLENGTH(SUBSTR(v_statistical_code, 25, 1)) = 0, ' ',\n\tSUBSTR(v_statistical_code, 25, 1)) AS v_pos_25,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,26,1))=0,' ',SUBSTR(v_statistical_code,26,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 26, 1)) = 0, ' ', SUBSTR(v_statistical_code, 26, 1)) AS v_pos_26,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,27,1))=0,' ',SUBSTR(v_statistical_code,27,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 27, 1)) = 0, ' ', SUBSTR(v_statistical_code, 27, 1)) AS v_pos_27,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,28,1))=0,' ',SUBSTR(v_statistical_code,28,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 28, 1)) = 0, ' ', SUBSTR(v_statistical_code, 28, 1)) AS v_pos_28,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,29,1))=0,' ',SUBSTR(v_statistical_code,29,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 29, 1)) = 0, ' ', SUBSTR(v_statistical_code, 29, 1)) AS v_pos_29,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,30,1))=0,' ',SUBSTR(v_statistical_code,30,1))\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 30, 1)) = 0, ' ', SUBSTR(v_statistical_code, 30, 1)) AS v_pos_30,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,31,1))=0,' ',SUBSTR(v_statistical_code,31,1))\r\n\t-- \r\n\t-- ----8/18/2011 Uma Bollu - Introducing Blank Space intentionally as PIF_4514_Stage has spaces but when we add this data into EDW we do a LTRIM, RTRIM so this Target Lookup finds a match but this Statistical Code calculation we need spaces because of the logic which re-arranges the fields and this is very important for Bureau Reporting etc.\n\tIFF(LENGTH(SUBSTR(v_statistical_code, 31, 1)) = 0, ' ', SUBSTR(v_statistical_code, 31, 1)) AS v_pos_31,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,32,1))=0,' ',SUBSTR(v_statistical_code,32,1))\r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 32, 1)) = 0, ' ', SUBSTR(v_statistical_code, 32, 1)) AS v_pos_32,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,33,1))=0,' ',SUBSTR(v_statistical_code,33,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 33, 1)) = 0, ' ', SUBSTR(v_statistical_code, 33, 1)) AS v_pos_33,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,34,1))=0,' ',SUBSTR(v_statistical_code,34,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 34, 1)) = 0, ' ', SUBSTR(v_statistical_code, 34, 1)) AS v_pos_34,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,35,1))=0,' ',SUBSTR(v_statistical_code,35,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 35, 1)) = 0, ' ', SUBSTR(v_statistical_code, 35, 1)) AS v_pos_35,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,36,1))=0,' ',SUBSTR(v_statistical_code,36,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 36, 1)) = 0, ' ', SUBSTR(v_statistical_code, 36, 1)) AS v_pos_36,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,37,1))=0,' ',SUBSTR(v_statistical_code,37,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 37, 1)) = 0, ' ', SUBSTR(v_statistical_code, 37, 1)) AS v_pos_37,\n\t-- *INF*: IIF(LENGTH(SUBSTR(v_statistical_code,38,1))=0,' ',SUBSTR(v_statistical_code,38,1))\r\n\t-- \r\n\t-- \n\tIFF(LENGTH(SUBSTR(v_statistical_code, 38, 1)) = 0, ' ', SUBSTR(v_statistical_code, 38, 1)) AS v_pos_38,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS Generic,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Code_AC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_AI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23  || v_pos_24  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_26 || '       ' || v_pos_25 || v_pos_23 || v_pos_24 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10  || v_pos_11|| v_pos_20 || v_pos_21  || \r\n\t-- '             ' ||  v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19  )\r\n\t-- \r\n\t--  -----It has a Filler of 13 spaces\r\n\t-- --- I have checked this code this is fine\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_20 || v_pos_21 || '             ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_AN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 ||\r\n\t-- '      ' || v_pos_14 || v_pos_23  || v_pos_24  || '  '  ||  v_pos_26  || v_pos_27  || v_pos_28  || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || '      ' || v_pos_14 || v_pos_23 || v_pos_24 || '  ' || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 ) AS v_Stat_Codes_AP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || \r\n\t--   v_pos_12 || v_pos_13 )\r\n\t-- \r\n\t-- --- Verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_11 || v_pos_10 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_A2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_11 || v_pos_12 )\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_11 || v_pos_12 ) AS v_Stat_Codes_A3,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 ||\r\n\t-- '           '  ||  v_pos_22 || v_pos_29 || '  ' || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || '           ' || v_pos_22 || v_pos_29 || '  ' || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_BB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17  || v_pos_20  || v_pos_27  || v_pos_28  || v_pos_29 || '    ' ||v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26 )\r\n\t-- \r\n\t-- \r\n\t-- -- Verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_20 || v_pos_27 || v_pos_28 || v_pos_29 || '    ' || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 ) AS v_Stat_Codes_BC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- --- Verified logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_BD,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 ||  v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- \r\n\t--  ---  Verified Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || '                    ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_BE,\n\t-- *INF*: ('  '  || v_pos_4  || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- \r\n\t-- --8/22/2011 - Added 2 spaces in the beginning. In COBOL, statitistical code field is initialised to spaces at the start of reformatting. If there is no code to move certain fields then the spaces stay as it is except other fileds are layed out over spaces.\r\n\t-- --- Verified the logic\r\n\t-- \n\t( '  ' || v_pos_4 || v_pos_5 || ' ' || v_pos_14 || '  ' || v_pos_15 || v_pos_16 || '   ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || '     ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_BF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_BP,\n\t-- *INF*: (v_pos_1 || v_pos_2 )\r\n\t-- \r\n\t-- --- Verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_BI,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -- verified the logic\n\tv_pos_1 AS v_Stat_Codes_BL,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || '  ' || v_pos_18  ||  v_pos_19 || v_pos_1 ||  ' ' ||  v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 \r\n\t-- || '    ' ||  v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28 || '   ' )\r\n\t-- \r\n\t-- --- Verfied the logic\n\t( SUBSTR(sar_class_code, 1, 3) || '  ' || v_pos_18 || v_pos_19 || v_pos_1 || ' ' || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || '    ' || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || '   ' ) AS v_Stat_Codes_BM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '      '  ||  v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19)\r\n\t-- \r\n\t--  ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '      ' || v_pos_8 || v_pos_9 || '           ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 ) AS v_Stat_Codes_BT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || '      '  || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || '      ' || v_pos_9 || v_pos_10 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_B2,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17)\r\n\t-- \r\n\t-- ----- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 ) AS v_Stat_Codes_CC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || \r\n\t--  v_pos_17 || v_pos_18  || ' ' ||  v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_17 || v_pos_18 || ' ' || v_pos_20 || '              ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_CF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- Generic \r\n\t-- -- No Change from Input copybook to Output\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_CR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' '  || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_6 || v_pos_7 || ' ' || v_pos_9 || '  ' || v_pos_12 || ' ' || v_pos_14 || v_pos_15 ) AS v_Stat_Codes_CI,\n\t-- *INF*: (v_pos_1 || v_pos_4  || v_pos_6 || v_pos_7 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_4 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CL,\n\t-- *INF*: ('  ' || v_pos_1 || v_pos_2 || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '  ' || v_pos_1 || v_pos_2 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_CP,\n\t-- *INF*: (v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_CN,\n\t-- *INF*: v_pos_1\r\n\t-- \r\n\t-- -----\n\tv_pos_1 AS v_Stat_Codes_EI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || '                   ' ||v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_EQ,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 ) AS v_Stat_Codes_FC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 \r\n\t-- || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 )\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- ---- 18 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '                  ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_FM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 19 spaces\r\n\t-- \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || '                   ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 ) AS v_Stat_Codes_FO,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_FP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 ||\r\n\t-- '       ' || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22 || '   ')\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || ' ' || v_pos_3 || '  ' || v_pos_6 || v_pos_7 || '   ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || '       ' || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || '   ' ) AS v_Stat_Codes_FT,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- -- 17 Spaces\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_12 || v_pos_13 || '                ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 ) AS v_Stat_Codes_GI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4  || v_pos_5  || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_6 || v_pos_7 || v_pos_4 || v_pos_5 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || '      ' || v_pos_13 || v_pos_29 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 ) AS v_Stat_Codes_GL,\n\t-- *INF*: (v_pos_1 || '           '  ||   v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- \n\t( v_pos_1 || '           ' || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_GP,\n\t-- *INF*: (v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13)\r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 23 spaces\r\n\t-- \r\n\t-- \r\n\t-- \n\t( v_pos_1 || '                       ' || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_11 || v_pos_12 || v_pos_13 ) AS v_Stat_Codes_GS,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18  ||  v_pos_19  \r\n\t-- || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ')\r\n\t-- \r\n\t-- \r\n\t-- ---- verified the logic\r\n\t-- --- 16 Spaces at the end\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_18 || v_pos_19 || ' ' || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || '                ' ) AS v_Stat_Codes_HO,\n\t-- *INF*: ('        ' || v_pos_11 || v_pos_12 || '               '  || v_pos_4  || v_pos_5  || v_pos_6  || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( '        ' || v_pos_11 || v_pos_12 || '               ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_14 || v_pos_15 || v_pos_17 ) AS v_Stat_Codes_IM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  || v_pos_24  || v_pos_25  || v_pos_26 || v_pos_28  || v_pos_29  || v_pos_30 || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_JR,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  )\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_ME,\n\t-- *INF*: (v_pos_1 || ' '  || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' ||  v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18  || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) \r\n\t-- \r\n\t-- --- need logic for stat-plan -id\r\n\t-- ---- 16 Spaces at the end\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_10 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || '  ' || v_pos_18 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || '                ' ) AS v_Stat_Codes_MH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || '                  '  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || '                  ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 ) AS v_Stat_Codes_MI,\n\t-- *INF*: (v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4  || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24 )\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_6 || v_pos_7 || v_pos_3 || v_pos_4 || v_pos_2 || '      ' || v_pos_1 || '        ' || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_ML,\n\t-- *INF*: -- No Stats code in the Output Copybook just the policy_type logic\n\t'' AS v_Stat_Codes_MP,\n\t-- *INF*: (SUBSTR(sar_class_code,1,3) || v_pos_17 || v_pos_18 ||  v_pos_19  || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' )\r\n\t-- \r\n\t-- --- Need to look at complete logic\r\n\t-- \n\t( SUBSTR(sar_class_code, 1, 3) || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_1 || v_pos_2 || v_pos_3 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || '   ' || '       ' || '      ' ) AS v_Stat_Codes_M2,\n\t-- *INF*: ( '                 ' || v_stat_plan_id)\r\n\t-- \r\n\t-- ----verified the logic\n\t( '                 ' || v_stat_plan_id ) AS v_Stat_Codes_NE,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  ||  v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19)\r\n\t-- \r\n\t-- --- Verified the Logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_19 ) AS v_Stat_Codes_PC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19  || v_pos_20  ||  v_pos_21)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t--  \n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || ' ' || v_pos_19 || v_pos_20 || v_pos_21 ) AS v_Stat_Codes_PH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PF,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_PL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 ||  v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 ) AS v_Stat_Codes_PM,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\r\n\t-- \n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RB,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 ) AS v_Stat_Codes_RG,\n\t-- *INF*: (v_pos_1 || v_pos_2)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 ) AS v_Stat_Codes_RI,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_8 || v_pos_9 || v_pos_10 ) AS v_Stat_Codes_RM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || \r\n\t-- v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21 || v_pos_22 ||  v_pos_23  || v_pos_24)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || ' ' || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 ) AS v_Stat_Codes_RN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29 || v_pos_30 || v_pos_31|| v_pos_33 || v_pos_34  ||  v_pos_35  || v_pos_32)\r\n\t-- \r\n\t-- ----\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_32 ) AS v_Stat_Codes_RP,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 ) AS v_Stat_Codes_RQ,\n\t-- *INF*: (v_pos_1 || ' ' || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || ' ' || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 ) AS v_Stat_Codes_SM,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_6 || v_pos_8 || v_pos_11 || v_pos_9 ) AS v_Stat_Codes_TH,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 \r\n\t-- || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19\r\n\t-- ||  v_pos_22  ||  v_pos_23  || v_pos_24 || '       ' || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36)\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || '       ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VL,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19 \r\n\t--  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30 || ' ' || v_pos_32  ||  v_pos_33\r\n\t-- || v_pos_34  ||  v_pos_35  || v_pos_36 )\r\n\t-- \r\n\t-- --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || ' ' || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 ) AS v_Stat_Codes_VP,\n\t-- *INF*: ('   ' || v_pos_4  || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12  || ' ' || v_pos_14 || v_pos_15 || '              ' \r\n\t-- || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34 || v_pos_35)\r\n\t-- \r\n\t-- --- verified the logic\n\t( '   ' || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || ' ' || v_pos_14 || v_pos_15 || '              ' || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 ) AS v_Stat_Codes_VN,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  \r\n\t-- || ' ' || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || '    ' || v_pos_36 || v_pos_37  || v_pos_38)\r\n\t-- \r\n\t-- ---- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || ' ' || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || '    ' || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Codes_VC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31)\r\n\t-- \r\n\t--  --- verified the logic\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 ) AS v_Stat_Codes_WC,\n\t-- *INF*: (v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4  || v_pos_5  || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18  ||  v_pos_19  || v_pos_20  ||  v_pos_21  ||  v_pos_22  ||  v_pos_23  || v_pos_24  || v_pos_25  || v_pos_26  || v_pos_27  || v_pos_28  || v_pos_29  || v_pos_30  || v_pos_31 || v_pos_32  ||  v_pos_33  || v_pos_34  ||  v_pos_35  || v_pos_36 || v_pos_37  || v_pos_38)\n\t( v_pos_1 || v_pos_2 || v_pos_3 || v_pos_4 || v_pos_5 || v_pos_6 || v_pos_7 || v_pos_8 || v_pos_9 || v_pos_10 || v_pos_11 || v_pos_12 || v_pos_13 || v_pos_14 || v_pos_15 || v_pos_16 || v_pos_17 || v_pos_18 || v_pos_19 || v_pos_20 || v_pos_21 || v_pos_22 || v_pos_23 || v_pos_24 || v_pos_25 || v_pos_26 || v_pos_27 || v_pos_28 || v_pos_29 || v_pos_30 || v_pos_31 || v_pos_32 || v_pos_33 || v_pos_34 || v_pos_35 || v_pos_36 || v_pos_37 || v_pos_38 ) AS v_Stat_Code_WP,\n\t-- *INF*: ('   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id)\r\n\t-- \r\n\t-- --8/19/2011 Added v_stat_plan_id\r\n\t-- --- need to bring stat plan_id\r\n\t--  --- verified the logic but need stat plan id\r\n\t-- \n\t( '   ' || v_pos_1 || v_pos_2 || '            ' || v_stat_plan_id ) AS v_Stat_Codes_WL,\n\t-- *INF*: DECODE(Type_Bureau, 'AC', v_Stat_Code_AC, 'AI', v_Stat_Codes_AI, 'AL', v_Stat_Codes_AL, 'AN', v_Stat_Codes_AN, 'AP', v_Stat_Codes_AP, 'A2', v_Stat_Codes_A2, 'A3', v_Stat_Codes_A3, 'BB', v_Stat_Codes_BB, 'BC', v_Stat_Codes_BC, 'BD', v_Stat_Codes_BD, 'BE', v_Stat_Codes_BE, 'BF', v_Stat_Codes_BF, 'BP', v_Stat_Codes_BP, 'BI', v_Stat_Codes_BI, 'BL', v_Stat_Codes_BL, 'BM', v_Stat_Codes_BM, 'BT', v_Stat_Codes_BT, 'B2', v_Stat_Codes_B2, 'CC', v_Stat_Codes_CC, 'CF', v_Stat_Codes_CF, 'CI', v_Stat_Codes_CI, 'CL', v_Stat_Codes_CL, 'CN', v_Stat_Codes_CN, 'CP', v_Stat_Codes_CP, 'EI', v_Stat_Codes_EI, 'EQ', v_Stat_Codes_EQ, 'FC', v_Stat_Codes_FC, 'FF', v_Stat_Codes_FF, 'FM', v_Stat_Codes_FM, 'FO', v_Stat_Codes_FO, 'FP', v_Stat_Codes_FP, 'FT', v_Stat_Codes_FT, 'GI', v_Stat_Codes_GI, 'GL', v_Stat_Codes_GL, 'GP', v_Stat_Codes_GP, 'GS', v_Stat_Codes_GS, 'HO', v_Stat_Codes_HO, 'IM', v_Stat_Codes_IM, 'JR', v_Stat_Codes_JR, 'ME', v_Stat_Codes_ME, 'MH', v_Stat_Codes_MH, 'MI', v_Stat_Codes_MI, 'ML',\r\n\t-- v_Stat_Codes_ML, 'MP', v_Stat_Codes_MP, 'M2', v_Stat_Codes_M2, 'NE', v_Stat_Codes_NE, 'PC', v_Stat_Codes_PC, 'PH', v_Stat_Codes_PH, 'PM', v_Stat_Codes_PM, 'RB', v_Stat_Codes_RB, 'RG', v_Stat_Codes_RG, 'RI', v_Stat_Codes_RI, 'RL', v_Stat_Codes_RL, 'RM', v_Stat_Codes_RM, 'RN', v_Stat_Codes_RN, 'RP', v_Stat_Codes_RP, 'RQ', v_Stat_Codes_RQ, 'SM', v_Stat_Codes_SM, 'TH', v_Stat_Codes_TH, 'VL', v_Stat_Codes_VL, 'VP', v_Stat_Codes_VP, 'VN', v_Stat_Codes_VN, 'VC', v_Stat_Codes_VC, 'WC', v_Stat_Codes_WC, 'WL', v_Stat_Codes_WL,\r\n\t-- 'CR', v_Stat_Code_CR, 'PF', v_Stat_Code_PF,'PI', v_Stat_Code_PI, 'PL', v_Stat_Code_PL,\r\n\t-- 'WP', v_Stat_Code_WP,v_statistical_code) \n\tDECODE(Type_Bureau,\n\t'AC', v_Stat_Code_AC,\n\t'AI', v_Stat_Codes_AI,\n\t'AL', v_Stat_Codes_AL,\n\t'AN', v_Stat_Codes_AN,\n\t'AP', v_Stat_Codes_AP,\n\t'A2', v_Stat_Codes_A2,\n\t'A3', v_Stat_Codes_A3,\n\t'BB', v_Stat_Codes_BB,\n\t'BC', v_Stat_Codes_BC,\n\t'BD', v_Stat_Codes_BD,\n\t'BE', v_Stat_Codes_BE,\n\t'BF', v_Stat_Codes_BF,\n\t'BP', v_Stat_Codes_BP,\n\t'BI', v_Stat_Codes_BI,\n\t'BL', v_Stat_Codes_BL,\n\t'BM', v_Stat_Codes_BM,\n\t'BT', v_Stat_Codes_BT,\n\t'B2', v_Stat_Codes_B2,\n\t'CC', v_Stat_Codes_CC,\n\t'CF', v_Stat_Codes_CF,\n\t'CI', v_Stat_Codes_CI,\n\t'CL', v_Stat_Codes_CL,\n\t'CN', v_Stat_Codes_CN,\n\t'CP', v_Stat_Codes_CP,\n\t'EI', v_Stat_Codes_EI,\n\t'EQ', v_Stat_Codes_EQ,\n\t'FC', v_Stat_Codes_FC,\n\t'FF', v_Stat_Codes_FF,\n\t'FM', v_Stat_Codes_FM,\n\t'FO', v_Stat_Codes_FO,\n\t'FP', v_Stat_Codes_FP,\n\t'FT', v_Stat_Codes_FT,\n\t'GI', v_Stat_Codes_GI,\n\t'GL', v_Stat_Codes_GL,\n\t'GP', v_Stat_Codes_GP,\n\t'GS', v_Stat_Codes_GS,\n\t'HO', v_Stat_Codes_HO,\n\t'IM', v_Stat_Codes_IM,\n\t'JR', v_Stat_Codes_JR,\n\t'ME', v_Stat_Codes_ME,\n\t'MH', v_Stat_Codes_MH,\n\t'MI', v_Stat_Codes_MI,\n\t'ML', v_Stat_Codes_ML,\n\t'MP', v_Stat_Codes_MP,\n\t'M2', v_Stat_Codes_M2,\n\t'NE', v_Stat_Codes_NE,\n\t'PC', v_Stat_Codes_PC,\n\t'PH', v_Stat_Codes_PH,\n\t'PM', v_Stat_Codes_PM,\n\t'RB', v_Stat_Codes_RB,\n\t'RG', v_Stat_Codes_RG,\n\t'RI', v_Stat_Codes_RI,\n\t'RL', v_Stat_Codes_RL,\n\t'RM', v_Stat_Codes_RM,\n\t'RN', v_Stat_Codes_RN,\n\t'RP', v_Stat_Codes_RP,\n\t'RQ', v_Stat_Codes_RQ,\n\t'SM', v_Stat_Codes_SM,\n\t'TH', v_Stat_Codes_TH,\n\t'VL', v_Stat_Codes_VL,\n\t'VP', v_Stat_Codes_VP,\n\t'VN', v_Stat_Codes_VN,\n\t'VC', v_Stat_Codes_VC,\n\t'WC', v_Stat_Codes_WC,\n\t'WL', v_Stat_Codes_WL,\n\t'CR', v_Stat_Code_CR,\n\t'PF', v_Stat_Code_PF,\n\t'PI', v_Stat_Code_PI,\n\t'PL', v_Stat_Code_PL,\n\t'WP', v_Stat_Code_WP,\n\tv_statistical_code) AS V_Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,1,25)\n\tSUBSTR(V_Formatted_Stat_Codes, 1, 25) AS Formatted_Stat_Codes,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,26,9)\n\tSUBSTR(V_Formatted_Stat_Codes, 26, 9) AS Formatted_Stat_Codes_26_34,\n\t-- *INF*: SUBSTR(V_Formatted_Stat_Codes,35,4)\n\tSUBSTR(V_Formatted_Stat_Codes, 35, 4) AS Formatted_Stat_Codes_34_38,\n\t-- *INF*: DECODE(Type_Bureau,'AI', (v_pos_11 || v_pos_12),\r\n\t-- 'AL', (v_pos_15  ||  v_pos_16),\r\n\t-- 'AN',(v_pos_12 || v_pos_13),\r\n\t-- 'AP',(v_pos_12 || v_pos_13),\r\n\t-- 'A2',(v_pos_8 || v_pos_9),\r\n\t-- 'A3',(v_pos_8 || v_pos_9),\r\n\t-- 'BB',(v_pos_20 || v_pos_21),\r\n\t-- 'BC',(v_pos_18 || v_pos_19),\r\n\t-- 'BE', ( v_pos_4  || v_pos_5),\r\n\t-- 'BF', (v_pos_1  ||  v_pos_2),\r\n\t-- 'BP', (' '  ||  v_pos_2),\r\n\t-- 'BI', (v_pos_3 ||  v_pos_4),\r\n\t-- 'BL', (v_pos_3  ||  v_pos_4),\r\n\t-- 'BM',(v_pos_20 || v_pos_21),\r\n\t-- 'BT', (v_pos_11  ||  v_pos_12),\r\n\t-- 'B2',(v_pos_14  ||  v_pos_15),\r\n\t-- 'CF', (v_pos_8  || v_pos_9),\r\n\t-- 'CI',(v_pos_3  ||  v_pos_4),\r\n\t-- 'CN', (v_pos_1  ||  v_pos_2),\r\n\t-- 'CP', (v_pos_3  ||  v_pos_4),\r\n\t-- 'EI', (v_pos_2  ||  v_pos_3),\r\n\t-- 'EQ', (v_pos_8  || v_pos_9),\r\n\t-- 'FF', (v_pos_8  || v_pos_9),\r\n\t-- 'FI', (v_pos_1  ||  v_pos_2),\r\n\t-- 'FM', (v_pos_6  ||  v_pos_7),\r\n\t-- 'FO', (v_pos_8  || v_pos_9),\r\n\t-- 'FP', (v_pos_2  ||  v_pos_3),\r\n\t-- 'FT', (v_pos_4  ||  v_pos_5),\r\n\t-- 'GI', (v_pos_10  ||  v_pos_11),\r\n\t-- 'GL',(v_pos_20 || v_pos_21),\r\n\t-- 'GM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'GP', (v_pos_8  || v_pos_9),\r\n\t-- 'GS',(v_pos_3  ||  v_pos_4),\r\n\t-- 'II', (v_pos_1  ||  v_pos_2),\r\n\t-- 'IM', (v_pos_1  ||  v_pos_2),\r\n\t-- 'MI',(v_pos_10  ||  v_pos_11),\r\n\t-- 'ML', (v_pos_16  ||  v_pos_17),\r\n\t-- 'MP', (v_pos_1  ||  v_pos_2),\r\n\t-- 'M2', (v_pos_15  ||  v_pos_16),'  ')\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \n\tDECODE(Type_Bureau,\n\t'AI', ( v_pos_11 || v_pos_12 ),\n\t'AL', ( v_pos_15 || v_pos_16 ),\n\t'AN', ( v_pos_12 || v_pos_13 ),\n\t'AP', ( v_pos_12 || v_pos_13 ),\n\t'A2', ( v_pos_8 || v_pos_9 ),\n\t'A3', ( v_pos_8 || v_pos_9 ),\n\t'BB', ( v_pos_20 || v_pos_21 ),\n\t'BC', ( v_pos_18 || v_pos_19 ),\n\t'BE', ( v_pos_4 || v_pos_5 ),\n\t'BF', ( v_pos_1 || v_pos_2 ),\n\t'BP', ( ' ' || v_pos_2 ),\n\t'BI', ( v_pos_3 || v_pos_4 ),\n\t'BL', ( v_pos_3 || v_pos_4 ),\n\t'BM', ( v_pos_20 || v_pos_21 ),\n\t'BT', ( v_pos_11 || v_pos_12 ),\n\t'B2', ( v_pos_14 || v_pos_15 ),\n\t'CF', ( v_pos_8 || v_pos_9 ),\n\t'CI', ( v_pos_3 || v_pos_4 ),\n\t'CN', ( v_pos_1 || v_pos_2 ),\n\t'CP', ( v_pos_3 || v_pos_4 ),\n\t'EI', ( v_pos_2 || v_pos_3 ),\n\t'EQ', ( v_pos_8 || v_pos_9 ),\n\t'FF', ( v_pos_8 || v_pos_9 ),\n\t'FI', ( v_pos_1 || v_pos_2 ),\n\t'FM', ( v_pos_6 || v_pos_7 ),\n\t'FO', ( v_pos_8 || v_pos_9 ),\n\t'FP', ( v_pos_2 || v_pos_3 ),\n\t'FT', ( v_pos_4 || v_pos_5 ),\n\t'GI', ( v_pos_10 || v_pos_11 ),\n\t'GL', ( v_pos_20 || v_pos_21 ),\n\t'GM', ( v_pos_1 || v_pos_2 ),\n\t'GP', ( v_pos_8 || v_pos_9 ),\n\t'GS', ( v_pos_3 || v_pos_4 ),\n\t'II', ( v_pos_1 || v_pos_2 ),\n\t'IM', ( v_pos_1 || v_pos_2 ),\n\t'MI', ( v_pos_10 || v_pos_11 ),\n\t'ML', ( v_pos_16 || v_pos_17 ),\n\t'MP', ( v_pos_1 || v_pos_2 ),\n\t'M2', ( v_pos_15 || v_pos_16 ),\n\t'  ') AS V_Policy_Type,\n\tV_Policy_Type AS Policy_Type,\n\t-- *INF*: SUBSTR(sar_class_code,1,3)\n\tSUBSTR(sar_class_code, 1, 3) AS v_sar_class_3,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- IN (Type_Bureau,'BP','FP','BF','FT'),V_Policy_Type)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'FP', 'BF', 'FT'), V_Policy_Type) AS v_type_policy_45,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- Type_Bureau='BP',v_pos_2,\r\n\t-- Type_Bureau='BF',v_pos_2,\r\n\t-- Type_Bureau='FP',' ',\r\n\t-- Type_Bureau='FT',' '  )\n\tDECODE(TRUE,\n\tType_Bureau = 'BP', v_pos_2,\n\tType_Bureau = 'BF', v_pos_2,\n\tType_Bureau = 'FP', ' ',\n\tType_Bureau = 'FT', ' ') AS v_type_of_bond_6,\n\t-- *INF*: DECODE(TRUE,\r\n\t--  IN(Type_Bureau,'BP','BF','FP','FT'),v_sar_class_3  || v_type_policy_45 || v_type_of_bond_6,\r\n\t-- sar_class_code)\n\tDECODE(TRUE,\n\tIN(Type_Bureau, 'BP', 'BF', 'FP', 'FT'), v_sar_class_3 || v_type_policy_45 || v_type_of_bond_6,\n\tsar_class_code) AS v_hold_sar_class_code,\n\tv_hold_sar_class_code AS sar_class_code_out\n\tFROM EXP_Derive_Values\n),\nFIL_Temp_Policy_Transaction AS (\n\tSELECT\n\tEXP_Derive_Values.claim_trans_id, \n\tEXP_Derive_Values.claim_trans_ak_id, \n\tEXP_Derive_Values.claim_occurrence_ak_id AS Claim_Occurrence_ak_id, \n\tEXP_Derive_Values.pol_ak_id, \n\tEXP_Derive_Values.claim_party_occurrence_ak_id, \n\tEXP_Derive_Values.claimant_cov_det_ak_id, \n\tEXP_Derive_Values.wc_claimant_det_ak_id_Out AS wc_claimant_det_ak_id, \n\tEXP_Derive_Values.contract_cust_ak_id, \n\tEXP_Derive_Values.claim_party_ak_id, \n\tEXP_Derive_Values.cov_ak_id_Out, \n\tEXP_Derive_Values.agency_ak_id, \n\tEXP_Derive_Values.temp_pol_trans_ak_id_Out AS temp_pol_trans_ak_id, \n\tEXP_Derive_Values.claim_rep_ak_id_H, \n\tEXP_Derive_Values.claim_rep_ak_id_E, \n\tEXP_Derive_Values.claim_pay_ak_id, \n\tEXP_Derive_Values.trans_amt, \n\tEXP_Derive_Values.trans_hist_amt, \n\tEXP_Derive_Values.LM_Amount_OutStanding, \n\tEXP_Derive_Values.LM_Amount_Paid_Losses, \n\tEXP_Derive_Values.LM_Amount_Paid_Expenses, \n\tEXP_Derive_Values.LM_Unpaid_Loss_Adj_Exp, \n\tEXP_Derive_Values.Transaction_Filter, \n\tEXP_Transform_Statistical_Codes1.Type_Bureau, \n\tEXP_Transform_Statistical_Codes1.Formatted_Stat_Codes AS Formatted_Stat_Codes_1_25, \n\tEXP_Transform_Statistical_Codes1.Formatted_Stat_Codes_26_34, \n\tEXP_Transform_Statistical_Codes1.Formatted_Stat_Codes_34_38, \n\tEXP_Transform_Statistical_Codes1.Policy_Type, \n\tEXP_Transform_Statistical_Codes1.sar_class_code_out AS class_code_Out, \n\tEXP_Derive_Values.exposure_out AS exposure, \n\tEXP_Derive_Values.LM_Variation_Code, \n\tEXP_Derive_Values.risk_state_prov_code_Out, \n\tEXP_Derive_Values.risk_zip_code_Out, \n\tEXP_Derive_Values.terr_code_Out, \n\tEXP_Derive_Values.tax_loc_Out, \n\tEXP_Derive_Values.sub_line_code_Out, \n\tEXP_Derive_Values.source_sar_asl_Out, \n\tEXP_Derive_Values.source_sar_prdct_line_Out, \n\tEXP_Derive_Values.source_sar_sp_use_code, \n\tEXP_Derive_Values.Statistical_Line, \n\tEXP_Derive_Values.Default_Id, \n\tEXP_Derive_Values.claim_case_ak_id_out AS claim_case_ak_id, \n\tEXP_Derive_Values.coverage_code_out, \n\tEXP_Derive_Values.incptn_date, \n\tEXP_Derive_Values.new_claim_count, \n\tEXP_Derive_Values.orig_reserve, \n\tEXP_Derive_Values.auto_reins_facility, \n\tEXP_Derive_Values.statistical_brkdwn_line, \n\tEXP_Derive_Values.Default_NA, \n\tEXP_Derive_Values.Loss_Master_Run_Date, \n\tEXP_Derive_Values.pms_trans_code, \n\tEXP_Derive_Values.trans_date, \n\tEXP_Derive_Values.pms_acct_entered_date, \n\tEXP_Derive_Values.trans_offset_onset_ind, \n\tEXP_Derive_Values.o_StatisticalCoverageAKID AS StatisticalCoverageAKID, \n\tEXP_Derive_Values.o_RatingCoverageAKID AS RatingCoverageAKID, \n\tEXP_Derive_Values.financial_type_code, \n\tEXP_Derive_Values.trans_code, \n\tEXP_Derive_Values.PolicyCoverageAKID_Out AS PolicyCoverageAKID, \n\tEXP_Derive_Values.RiskLocationAKID_Out AS RiskLocationAKID, \n\tEXP_Derive_Values.PremiumTransactionAKID_Out AS PremiumTransactionAKID, \n\tEXP_Derive_Values.BureauStatisticalCodeAKID_Out AS BureauStatisticalCodeAKID\n\tFROM EXP_Derive_Values\n\t -- Manually join with EXP_Transform_Statistical_Codes1\n\tWHERE IIF(Transaction_Filter = 'NOFILTER',TRUE,FALSE)\n),\nRTR_Insert AS (\n\tSELECT\n\tclaim_trans_id,\n\tclaim_trans_ak_id,\n\tClaim_Occurrence_ak_id,\n\tpol_ak_id,\n\tclaim_party_occurrence_ak_id,\n\tclaimant_cov_det_ak_id,\n\twc_claimant_det_ak_id,\n\tcontract_cust_ak_id,\n\tclaim_party_ak_id,\n\tcov_ak_id_Out,\n\tagency_ak_id,\n\ttemp_pol_trans_ak_id,\n\tclaim_rep_ak_id_H,\n\tclaim_rep_ak_id_E,\n\tclaim_pay_ak_id,\n\ttrans_amt,\n\ttrans_hist_amt,\n\tLM_Amount_OutStanding,\n\tLM_Amount_Paid_Losses,\n\tLM_Amount_Paid_Expenses,\n\tLM_Unpaid_Loss_Adj_Exp,\n\tTransaction_Filter,\n\tType_Bureau,\n\tFormatted_Stat_Codes_1_25,\n\tFormatted_Stat_Codes_26_34,\n\tFormatted_Stat_Codes_34_38,\n\tPolicy_Type,\n\tclass_code_Out,\n\texposure,\n\tLM_Variation_Code,\n\trisk_state_prov_code_Out,\n\trisk_zip_code_Out,\n\tterr_code_Out,\n\ttax_loc_Out,\n\tsub_line_code_Out,\n\tsource_sar_asl_Out,\n\tsource_sar_prdct_line_Out,\n\tsource_sar_sp_use_code,\n\tStatistical_Line,\n\tDefault_Id,\n\tclaim_case_ak_id,\n\tcoverage_code_out,\n\tincptn_date,\n\tnew_claim_count,\n\torig_reserve,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tDefault_NA,\n\tLoss_Master_Run_Date,\n\tpms_trans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_offset_onset_ind,\n\tStatisticalCoverageAKID,\n\tRatingCoverageAKID,\n\tfinancial_type_code,\n\ttrans_code,\n\tPolicyCoverageAKID,\n\tRiskLocationAKID,\n\tPremiumTransactionAKID,\n\tBureauStatisticalCodeAKID\n\tFROM FIL_Temp_Policy_Transaction\n),\nRTR_Insert_INSERT AS (SELECT * FROM RTR_Insert WHERE Transaction_Filter = 'NOFILTER'),\nRTR_Insert_Missing_Coverage AS (SELECT * FROM RTR_Insert WHERE Transaction_Filter = 'NOFILTER'  AND ISNULL(cov_ak_id_Out)),\nEXP_Determine_AK_ID AS (\n\tSELECT\n\t'1' AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:01','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:01', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date,\n\tSEQ_Loss_Master_Calculation_AK_ID.NEXTVAL AS loss_master_calculation_ak_id,\n\tclaim_trans_id AS claim_trans_pk_id,\n\tclaim_trans_ak_id,\n\tDefault_Id AS claim_reins_trans_pk_id,\n\tDefault_Id AS claim_reins_trans_ak_id,\n\tagency_ak_id AS i_agency_ak_id,\n\t-- *INF*: IIF(ISNULL(i_agency_ak_id), -1, i_agency_ak_id)\n\tIFF(i_agency_ak_id IS NULL, - 1, i_agency_ak_id) AS o_agency_ak_id,\n\tcontract_cust_ak_id AS i_contract_cust_ak_id,\n\t-- *INF*: IIF(ISNULL(i_contract_cust_ak_id), -1, i_contract_cust_ak_id)\n\tIFF(i_contract_cust_ak_id IS NULL, - 1, i_contract_cust_ak_id) AS o_contract_cust_ak_id,\n\tpol_ak_id AS i_pol_ak_id,\n\t-- *INF*: IIF(ISNULL(i_pol_ak_id), -1, i_pol_ak_id)\n\tIFF(i_pol_ak_id IS NULL, - 1, i_pol_ak_id) AS o_pol_ak_id,\n\tClaim_Occurrence_ak_id AS i_claim_occurrence_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_occurrence_ak_id), -1, i_claim_occurrence_ak_id)\n\tIFF(i_claim_occurrence_ak_id IS NULL, - 1, i_claim_occurrence_ak_id) AS o_claim_occurrence_ak_id,\n\tclaim_rep_ak_id_H AS i_claim_primary_rep_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_primary_rep_ak_id), -1, i_claim_primary_rep_ak_id)\n\tIFF(i_claim_primary_rep_ak_id IS NULL, - 1, i_claim_primary_rep_ak_id) AS o_claim_primary_rep_ak_id,\n\tclaim_rep_ak_id_E AS i_claim_examiner_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_examiner_ak_id), -1, i_claim_examiner_ak_id)\n\tIFF(i_claim_examiner_ak_id IS NULL, - 1, i_claim_examiner_ak_id) AS o_claim_examiner_ak_id,\n\tclaim_party_occurrence_ak_id AS i_claim_party_occurrence_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_party_occurrence_ak_id), -1, i_claim_party_occurrence_ak_id)\n\tIFF(i_claim_party_occurrence_ak_id IS NULL, - 1, i_claim_party_occurrence_ak_id) AS o_claim_party_occurrence_ak_id,\n\tclaim_party_ak_id AS i_claim_party_ak_id,\n\t-- *INF*: IIF(ISNULL(i_claim_party_ak_id), -1, i_claim_party_ak_id)\n\tIFF(i_claim_party_ak_id IS NULL, - 1, i_claim_party_ak_id) AS o_claim_party_ak_id,\n\tclaim_case_ak_id,\n\tclaimant_cov_det_ak_id,\n\twc_claimant_det_ak_id,\n\tclaim_pay_ak_id,\n\tcov_ak_id_Out AS cov_ak_id,\n\ttemp_pol_trans_ak_id,\n\tDefault_Id AS reins_cov_ak_id,\n\t'D' AS trans_kind_code,\n\tLM_Variation_Code AS i_variation_code,\n\t-- *INF*: IIF(ISNULL(i_variation_code) OR IS_SPACES(i_variation_code) OR LENGTH(i_variation_code)=0, 'N/A', i_variation_code)\n\tIFF(i_variation_code IS NULL OR IS_SPACES(i_variation_code) OR LENGTH(i_variation_code) = 0, 'N/A', i_variation_code) AS o_variation_code,\n\tPolicy_Type AS pol_type,\n\t-- *INF*: IIF(ISNULL(pol_type),'N/A',pol_type)\n\tIFF(pol_type IS NULL, 'N/A', pol_type) AS pol_type_out,\n\tincptn_date AS i_incptn_date,\n\t-- *INF*: IIF(ISNULL(i_incptn_date), TO_DATE('1800-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), i_incptn_date)\n\tIFF(i_incptn_date IS NULL, TO_DATE('1800-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), i_incptn_date) AS o_incptn_date,\n\tLoss_Master_Run_Date AS loss_master_run_date,\n\tnew_claim_count,\n\ttrans_amt AS trans_amt1,\n\ttrans_hist_amt AS trans_hist_amt1,\n\tLM_Amount_OutStanding AS outstanding_amt,\n\tLM_Amount_Paid_Losses AS paid_loss_amt,\n\tLM_Amount_Paid_Expenses AS paid_exp_amt,\n\tLM_Unpaid_Loss_Adj_Exp AS eom_unpaid_loss_adjust_exp,\n\torig_reserve,\n\tauto_reins_facility,\n\tstatistical_brkdwn_line,\n\tFormatted_Stat_Codes_1_25 AS statistical_code1,\n\t-- *INF*: IIF(ISNULL(statistical_code1),'N/A',statistical_code1)\n\tIFF(statistical_code1 IS NULL, 'N/A', statistical_code1) AS statistical_code1_Out,\n\tFormatted_Stat_Codes_26_34 AS statistical_code2,\n\t-- *INF*: IIF(ISNULL(statistical_code2),'N/A',statistical_code2)\n\tIFF(statistical_code2 IS NULL, 'N/A', statistical_code2) AS statistical_code2_Out,\n\tFormatted_Stat_Codes_34_38 AS statistical_code3,\n\t-- *INF*: IIF(ISNULL(statistical_code3),'N/A',statistical_code3)\n\tIFF(statistical_code3 IS NULL, 'N/A', statistical_code3) AS statistical_code3_Out,\n\tStatistical_Line AS statistical_line,\n\tcoverage_code_out AS loss_master_cov_code,\n\trisk_state_prov_code_Out AS risk_state_prov_code,\n\trisk_zip_code_Out AS risk_zip_code,\n\tterr_code_Out AS terr_code,\n\ttax_loc_Out AS tax_loc,\n\tclass_code_Out AS class_code,\n\texposure,\n\tsub_line_code_Out AS sub_line_code,\n\tsource_sar_asl_Out AS source_sar_asl,\n\tsource_sar_prdct_line_Out AS source_sar_prdct_line,\n\tsource_sar_sp_use_code,\n\tpms_trans_code,\n\ttrans_date,\n\tpms_acct_entered_date,\n\ttrans_offset_onset_ind,\n\tStatisticalCoverageAKID,\n\t-1 AS o_Default,\n\tRatingCoverageAKID,\n\tfinancial_type_code,\n\ttrans_code,\n\tPolicyCoverageAKID AS PolicyCoverageAKID1,\n\tRiskLocationAKID AS RiskLocationAKID1,\n\tPremiumTransactionAKID AS PremiumTransactionAKID1,\n\tBureauStatisticalCodeAKID AS BureauStatisticalCodeAKID1\n\tFROM RTR_Insert_INSERT\n),\nloss_master_calculation AS (\n\tINSERT INTO loss_master_calculation\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, loss_master_calculation_ak_id, claim_trans_pk_id, claim_trans_ak_id, claim_reins_trans_pk_id, claim_reins_trans_ak_id, agency_ak_id, contract_cust_ak_id, pol_ak_id, claim_occurrence_ak_id, claim_primary_rep_ak_id, claim_examiner_ak_id, claim_party_occurrence_ak_id, claim_party_ak_id, claim_case_ak_id, claimant_cov_det_ak_id, wc_claimant_det_ak_id, claim_pay_ak_id, cov_ak_id, temp_pol_trans_ak_id, reins_cov_ak_id, trans_kind_code, variation_code, pol_type, incptn_date, loss_master_run_date, new_claim_count, outstanding_amt, paid_loss_amt, paid_exp_amt, eom_unpaid_loss_adjust_exp, orig_reserve, auto_reins_facility, statistical_brkdwn_line, statistical_code1, statistical_code2, statistical_code3, statistical_line, loss_master_cov_code, risk_state_prov_code, risk_zip_code, terr_code, tax_loc, class_code, exposure, sub_line_code, source_sar_asl, source_sar_prdct_line, source_sar_sp_use_code, pms_trans_code, trans_date, pms_acct_entered_date, trans_offset_onset_ind, claim_trans_amt, claim_trans_hist_amt, RiskLocationAKID, PolicyCoverageAKID, StatisticalCoverageAKID, PremiumTransactionAKID, BureauStatisticalCodeAKID, RatingCoverageAKId, FinancialTypeCode, TransactionCode)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tLOSS_MASTER_CALCULATION_AK_ID, \n\tCLAIM_TRANS_PK_ID, \n\tCLAIM_TRANS_AK_ID, \n\tCLAIM_REINS_TRANS_PK_ID, \n\tCLAIM_REINS_TRANS_AK_ID, \n\to_agency_ak_id AS AGENCY_AK_ID, \n\to_contract_cust_ak_id AS CONTRACT_CUST_AK_ID, \n\to_pol_ak_id AS POL_AK_ID, \n\to_claim_occurrence_ak_id AS CLAIM_OCCURRENCE_AK_ID, \n\to_claim_primary_rep_ak_id AS CLAIM_PRIMARY_REP_AK_ID, \n\to_claim_examiner_ak_id AS CLAIM_EXAMINER_AK_ID, \n\to_claim_party_occurrence_ak_id AS CLAIM_PARTY_OCCURRENCE_AK_ID, \n\to_claim_party_ak_id AS CLAIM_PARTY_AK_ID, \n\tCLAIM_CASE_AK_ID, \n\tCLAIMANT_COV_DET_AK_ID, \n\tWC_CLAIMANT_DET_AK_ID, \n\tCLAIM_PAY_AK_ID, \n\tCOV_AK_ID, \n\tTEMP_POL_TRANS_AK_ID, \n\tREINS_COV_AK_ID, \n\tTRANS_KIND_CODE, \n\to_variation_code AS VARIATION_CODE, \n\tpol_type_out AS POL_TYPE, \n\to_incptn_date AS INCPTN_DATE, \n\tLOSS_MASTER_RUN_DATE, \n\tNEW_CLAIM_COUNT, \n\tOUTSTANDING_AMT, \n\tPAID_LOSS_AMT, \n\tPAID_EXP_AMT, \n\tEOM_UNPAID_LOSS_ADJUST_EXP, \n\tORIG_RESERVE, \n\tAUTO_REINS_FACILITY, \n\tSTATISTICAL_BRKDWN_LINE, \n\tstatistical_code1_Out AS STATISTICAL_CODE1, \n\tstatistical_code2_Out AS STATISTICAL_CODE2, \n\tstatistical_code3_Out AS STATISTICAL_CODE3, \n\tSTATISTICAL_LINE, \n\tLOSS_MASTER_COV_CODE, \n\tRISK_STATE_PROV_CODE, \n\tRISK_ZIP_CODE, \n\tTERR_CODE, \n\tTAX_LOC, \n\tCLASS_CODE, \n\tEXPOSURE, \n\tSUB_LINE_CODE, \n\tSOURCE_SAR_ASL, \n\tSOURCE_SAR_PRDCT_LINE, \n\tSOURCE_SAR_SP_USE_CODE, \n\tPMS_TRANS_CODE, \n\tTRANS_DATE, \n\tPMS_ACCT_ENTERED_DATE, \n\tTRANS_OFFSET_ONSET_IND, \n\ttrans_amt1 AS CLAIM_TRANS_AMT, \n\ttrans_hist_amt1 AS CLAIM_TRANS_HIST_AMT, \n\tRiskLocationAKID1 AS RISKLOCATIONAKID, \n\tPolicyCoverageAKID1 AS POLICYCOVERAGEAKID, \n\tSTATISTICALCOVERAGEAKID, \n\tPremiumTransactionAKID1 AS PREMIUMTRANSACTIONAKID, \n\tBureauStatisticalCodeAKID1 AS BUREAUSTATISTICALCODEAKID, \n\tRatingCoverageAKID AS RATINGCOVERAGEAKID, \n\tfinancial_type_code AS FINANCIALTYPECODE, \n\ttrans_code AS TRANSACTIONCODE\n\tFROM EXP_Determine_AK_ID\n),"
                        }
                    ]
                }
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244800"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893123"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7542567"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 06:07:41"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/01/2023 11:42:32"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "V2"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "DBCONNECTION_STAGE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_STAGE_Claim"
            },
            "DATESQL": {
                "type": "string",
                "defaultValue": "(SELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+1+$$NO_OF_MONTHS,0)) as LastDayOfLastMonth )"
            },
            "NO_OF_MONTHS": {
                "type": "string",
                "defaultValue": "-1"
            },
            "ACCOUNT_DATE": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Claims DataWarehouse/"
        },
        "annotations": []
    }
}