{
    "name": "s_m_POL_CUS_DW_LOAD_sup_association_program_code",
    "properties": {
        "activities": [
            {
                "name": "m_POL_CUS_DW_LOAD_sup_association_program_code",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_gtam_wbclb_stage AS (\n\tSELECT     \r\n\t\tb.sup_assoc_prog_type_id  as gtam_wbclb_stage_id , \r\n\t\ta.prog_code,\r\n\t\ta.prog_description,\r\n\t\tb.assoc_prog_type_descript as prog_type\r\n\tFROM         \r\n\t\t@{pipeline().parameters.SOURCE_TABLE_OWNER}.gtam_wbclb_stage a\r\n\tLEFT OUTER JOIN  \r\n\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_type b\r\n\tON\r\n\t\ta.prog_code = b.assoc_prog_type_code\r\n\tORDER BY \r\n\t\ta.prog_code\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t--- Here we are performing left outer join between \r\n\t--gtam_wbclb_stage &  rpt_edm.dbo.sup_assoc_program_type \r\n\t-- tables  on prog_code = assoc_program_type_code\n),\nEXP_values AS (\n\tSELECT\n\tgtam_wbclb_stage_id AS in_sup_assoc_program_type_id,\n\t-- *INF*: iif(isnull(in_sup_assoc_program_type_id),1,0)\r\n\t-- \r\n\t-- \r\n\t-- -- these are missing values which must be output to a flat file and sent to Jody by email.\r\n\t-- -- this will be inplemented in later iterations\n\tIFF(in_sup_assoc_program_type_id IS NULL, 1, 0) AS sup_assoc_program_type_id,\n\tprog_code AS in_prog_code,\n\t-- *INF*: iif(isnull(in_prog_code) or IS_SPACES(in_prog_code) or LENGTH(in_prog_code)=0,'N/A',LTRIM(RTRIM(in_prog_code)))\n\tIFF(in_prog_code IS NULL OR IS_SPACES(in_prog_code) OR LENGTH(in_prog_code) = 0, 'N/A', LTRIM(RTRIM(in_prog_code))) AS assoc_prog_code,\n\tprog_description AS in_prog_description,\n\t-- *INF*: iif(isnull(in_prog_description) or IS_SPACES(in_prog_description) or LENGTH(in_prog_description)=0,'N/A',LTRIM(RTRIM(in_prog_description)))\n\tIFF(in_prog_description IS NULL OR IS_SPACES(in_prog_description) OR LENGTH(in_prog_description) = 0, 'N/A', LTRIM(RTRIM(in_prog_description))) AS assoc_prog_code_descript,\n\tprog_type AS in_assoc_program_type,\n\t-- *INF*: iif(isnull(in_assoc_program_type) or IS_SPACES(in_assoc_program_type) or LENGTH(in_assoc_program_type)=0,'N/A',LTRIM(RTRIM(in_assoc_program_type)))\n\tIFF(in_assoc_program_type IS NULL OR IS_SPACES(in_assoc_program_type) OR LENGTH(in_assoc_program_type) = 0, 'N/A', LTRIM(RTRIM(in_assoc_program_type))) AS assoc_prog_type\n\tFROM SQ_gtam_wbclb_stage\n),\nLKP_sup_association_program_code AS (\n\tSELECT\n\tsup_assoc_prog_code_id,\n\tassoc_prog_code_descript,\n\tassoc_prog_type,\n\tassoc_prog_code\n\tFROM (\n\t\tSELECT \r\n\t\tsup_association_program_code.sup_assoc_prog_code_id as sup_assoc_prog_code_id, sup_association_program_code.assoc_prog_code_descript as assoc_prog_code_descript, sup_association_program_code.assoc_prog_type as assoc_prog_type,\r\n\t\tLTRIM(RTRIM(sup_association_program_code.assoc_prog_code)) as assoc_prog_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_code\r\n\t\tWHERE\r\n\t\tsup_association_program_code.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY assoc_prog_code ORDER BY sup_assoc_prog_code_id DESC) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_sup_association_program_code.sup_assoc_prog_code_id AS lkp_sup_assoc_program_code_id,\n\tLKP_sup_association_program_code.assoc_prog_code_descript AS lkp_prog_description,\n\tLKP_sup_association_program_code.assoc_prog_type AS lkp_assoc_program_type,\n\tEXP_values.assoc_prog_code,\n\tEXP_values.assoc_prog_code_descript,\n\tEXP_values.assoc_prog_type,\n\t-- *INF*: iif(isnull(lkp_sup_assoc_program_code_id),'NEW',IIF(\r\n\t-- LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(assoc_prog_code_descript)) OR\r\n\t-- LTRIM(RTRIM(lkp_assoc_program_type)) != LTRIM(RTRIM(assoc_prog_type)),'UPDATE','NOCHANGE'))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --iif(isnull(lkp_sup_assoc_program_code_id),'NEW',IIF(\r\n\t-- --LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(prog_description)) ,'UPDATE','NOCHANGE'))\n\tIFF(lkp_sup_assoc_program_code_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(assoc_prog_code_descript)) OR LTRIM(RTRIM(lkp_assoc_program_type)) != LTRIM(RTRIM(assoc_prog_type)), 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM EXP_values\n\tLEFT JOIN LKP_sup_association_program_code\n\tON LKP_sup_association_program_code.assoc_prog_code = EXP_values.assoc_prog_code\n),\nFIL_insert AS (\n\tSELECT\n\tassoc_prog_code, \n\tassoc_prog_code_descript, \n\tassoc_prog_type, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date\n\tFROM EXP_Detect_Changes\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nTGT_sup_association_program_code_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_code\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, assoc_prog_code, assoc_prog_code_descript, assoc_prog_type)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tASSOC_PROG_CODE, \n\tASSOC_PROG_CODE_DESCRIPT, \n\tASSOC_PROG_TYPE\n\tFROM FIL_insert\n),\nSQ_gtam_wbprg_stage AS (\n\tSELECT\n\t\tgtam_wbprg_stage_id,\n\t\tprog_id,\n\t\texp_date,\n\t\tprog_name,\n\t\textract_date,\n\t\tas_of_date,\n\t\trcrd_count,\n\t\tsource_sys_id\n\tFROM gtam_wbprg_stage\n),\nEXP_wbprg_values AS (\n\tSELECT\n\tgtam_wbprg_stage_id,\n\tprog_id,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(prog_id)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(prog_id) AS prog_code,\n\tprog_name,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(prog_name)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(prog_name) AS prog_code_description\n\tFROM SQ_gtam_wbprg_stage\n),\nLKP_sup_association_program_code1 AS (\n\tSELECT\n\tsup_assoc_prog_code_id,\n\tassoc_prog_code_descript,\n\tassoc_prog_type,\n\tassoc_prog_code\n\tFROM (\n\t\tSELECT \r\n\t\tsup_association_program_code.sup_assoc_prog_code_id as sup_assoc_prog_code_id, sup_association_program_code.assoc_prog_code_descript as assoc_prog_code_descript, sup_association_program_code.assoc_prog_type as assoc_prog_type,\r\n\t\tLTRIM(RTRIM(sup_association_program_code.assoc_prog_code)) as assoc_prog_code \r\n\t\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_code\r\n\t\tWHERE\r\n\t\tsup_association_program_code.crrnt_snpsht_flag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY assoc_prog_code ORDER BY sup_assoc_prog_code_id DESC) = 1\n),\nEXP_Detect_Changes1 AS (\n\tSELECT\n\tLKP_sup_association_program_code1.sup_assoc_prog_code_id AS lkp_sup_assoc_program_code_id,\n\tLKP_sup_association_program_code1.assoc_prog_code_descript AS lkp_prog_description,\n\tLKP_sup_association_program_code1.assoc_prog_type AS lkp_assoc_program_type,\n\tEXP_wbprg_values.prog_code AS assoc_prog_code,\n\tEXP_wbprg_values.prog_code_description AS assoc_prog_code_descript,\n\t'Program' AS v_assoc_prog_type,\n\tv_assoc_prog_type AS assoc_prog_type_out,\n\t-- *INF*: iif(isnull(lkp_sup_assoc_program_code_id),'NEW',IIF(\r\n\t-- LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(assoc_prog_code_descript)) OR\r\n\t-- LTRIM(RTRIM(lkp_assoc_program_type)) !=v_assoc_prog_type,'UPDATE','NOCHANGE'))\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --iif(isnull(lkp_sup_assoc_program_code_id),'NEW',IIF(\r\n\t-- --LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(prog_description)) ,'UPDATE','NOCHANGE'))\n\tIFF(lkp_sup_assoc_program_code_id IS NULL, 'NEW', IFF(LTRIM(RTRIM(lkp_prog_description)) != LTRIM(RTRIM(assoc_prog_code_descript)) OR LTRIM(RTRIM(lkp_assoc_program_type)) != v_assoc_prog_type, 'UPDATE', 'NOCHANGE')) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS crrnt_snpsht_flag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW', to_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), sysdate) AS eff_from_date,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,\n\tSYSDATE AS created_date,\n\tSYSDATE AS modified_date\n\tFROM EXP_wbprg_values\n\tLEFT JOIN LKP_sup_association_program_code1\n\tON LKP_sup_association_program_code1.assoc_prog_code = EXP_wbprg_values.prog_code\n),\nFIL_insert1 AS (\n\tSELECT\n\tassoc_prog_code, \n\tassoc_prog_code_descript, \n\tassoc_prog_type_out AS assoc_prog_type, \n\tchanged_flag, \n\tcrrnt_snpsht_flag, \n\taudit_id, \n\teff_from_date, \n\teff_to_date, \n\tsource_sys_id, \n\tcreated_date, \n\tmodified_date\n\tFROM EXP_Detect_Changes1\n\tWHERE changed_flag='NEW' OR changed_flag='UPDATE'\n),\nTGT_sup_association_program_code_INSERT1 AS (\n\tINSERT INTO sup_association_program_code\n\t(crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, assoc_prog_code, assoc_prog_code_descript, assoc_prog_type)\n\tSELECT \n\tCRRNT_SNPSHT_FLAG, \n\tAUDIT_ID, \n\tEFF_FROM_DATE, \n\tEFF_TO_DATE, \n\tSOURCE_SYS_ID, \n\tCREATED_DATE, \n\tMODIFIED_DATE, \n\tASSOC_PROG_CODE, \n\tASSOC_PROG_CODE_DESCRIPT, \n\tASSOC_PROG_TYPE\n\tFROM FIL_insert1\n),\nSQ_sup_association_program_code AS (\n\tSELECT \r\n\t\t\ta.sup_assoc_prog_code_id, \r\n\t\t\ta.eff_from_date, \r\n\t\t\ta.eff_to_date, \r\n\t\t\ta.assoc_prog_code \r\n\tFROM\r\n\t\t\t @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_code a\r\n\tWHERE \r\n\t\t\ta.assoc_prog_code  IN \r\n\t\t\t(SELECT assoc_prog_code FROM sup_association_program_code \r\n\t\t\tWHERE crrnt_snpsht_flag = 1 GROUP BY assoc_prog_code  HAVING count(*) > 1)\r\n\tORDER BY \r\n\t\t\ta.assoc_prog_code , a.eff_from_date  DESC\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tsup_assoc_prog_code_id,\n\teff_from_date,\n\teff_to_date AS orig_eff_to_date,\n\tassoc_prog_code,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- assoc_prog_code = v_prev_prog_code,\r\n\t-- ADD_TO_DATE(v_prev_eff_from_date,'SS',-1),orig_eff_to_date)\n\tDECODE(TRUE,\n\t\tassoc_prog_code = v_prev_prog_code, ADD_TO_DATE(v_prev_eff_from_date, 'SS', - 1),\n\t\torig_eff_to_date) AS v_eff_to_date,\n\tv_eff_to_date AS eff_to_date,\n\tassoc_prog_code AS v_prev_prog_code,\n\teff_from_date AS v_prev_eff_from_date,\n\t0 AS crrnt_snpsht_flag,\n\tSYSDATE AS modified_dt\n\tFROM SQ_sup_association_program_code\n),\nFIL_FirstRowInAKGrouptRowInAKGroup AS (\n\tSELECT\n\tsup_assoc_prog_code_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_dt\n\tFROM EXP_Lag_eff_from_date\n\tWHERE orig_eff_to_date != eff_to_date\n),\nUPD_sup_assoc_program_code_id AS (\n\tSELECT\n\tsup_assoc_prog_code_id, \n\torig_eff_to_date, \n\teff_to_date, \n\tcrrnt_snpsht_flag, \n\tmodified_dt\n\tFROM FIL_FirstRowInAKGrouptRowInAKGroup\n),\nTGT_sup_association_program_code_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_association_program_code AS T\n\tUSING UPD_sup_assoc_program_code_id AS S\n\tON T.sup_assoc_prog_code_id = S.sup_assoc_prog_code_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.eff_to_date = S.eff_to_date, T.modified_date = S.modified_dt\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905515"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604173"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:20:53"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:53:42"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "dbo"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}