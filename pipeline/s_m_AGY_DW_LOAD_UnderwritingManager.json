{
    "name": "s_m_AGY_DW_LOAD_UnderwritingManager",
    "properties": {
        "activities": [
            {
                "name": "m_AGY_DW_LOAD_UnderwritingManager",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_AssociateStage AS (\n\tSELECT\n\t\tModifiedDate,\n\t\tWestBendAssociateID,\n\t\tAssociateRole,\n\t\tRoleSpecificUserCode,\n\t\tDisplayName,\n\t\tLastName,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tSuffix,\n\t\tEmailAddress,\n\t\tSourceSystemID,\n\t\tUserId\n\tFROM AssociateStage\n\tWHERE AssociateStage.AssociateRole = 'UNDERWRITER MANAGER'\n),\nLKP_ExistingUWManager AS (\n\tSELECT\n\tin_WestBendAssociateID,\n\tHashKey,\n\tUnderwritingManagerAKID,\n\tWestBendAssociateID\n\tFROM (\n\t\tSELECT \n\t\t\tin_WestBendAssociateID,\n\t\t\tHashKey,\n\t\t\tUnderwritingManagerAKID,\n\t\t\tWestBendAssociateID\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.UnderwritingManager\n\t\tWHERE CurrentSnapshotFlag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY WestBendAssociateID ORDER BY in_WestBendAssociateID) = 1\n),\nEXP_Detect_Changes AS (\n\tSELECT\n\tLKP_ExistingUWManager.HashKey AS lkp_HashKey,\n\tLKP_ExistingUWManager.UnderwritingManagerAKID AS lkp_UnderwritingManagerAKID,\n\tSQ_AssociateStage.WestBendAssociateID,\n\tSQ_AssociateStage.RoleSpecificUserCode AS UnderwriterManagerCode,\n\tSQ_AssociateStage.DisplayName,\n\tSQ_AssociateStage.LastName,\n\tSQ_AssociateStage.FirstName,\n\tSQ_AssociateStage.MiddleName,\n\tSQ_AssociateStage.Suffix,\n\tSQ_AssociateStage.EmailAddress,\n\tSQ_AssociateStage.SourceSystemID,\n\tSQ_AssociateStage.UserId,\n\t-- *INF*: IIF(IsNull(UserId), 'N/A', UserId)\n\tIFF(UserId IS NULL,\n\t\t'N/A',\n\t\tUserId\n\t) AS o_UserId,\n\t-- *INF*: MD5(UnderwriterManagerCode || DisplayName || LastName || FirstName || MiddleName || Suffix || EmailAddress || UserId)\n\tMD5(UnderwriterManagerCode || DisplayName || LastName || FirstName || MiddleName || Suffix || EmailAddress || UserId\n\t) AS v_NewHashKey,\n\tv_NewHashKey AS o_NewHashKey,\n\t-- *INF*: IIF(ISNULL(lkp_UnderwritingManagerAKID), 'NEW', \r\n\t-- IIF((lkp_HashKey <> v_NewHashKey), 'UPDATE', 'NOCHANGE'))\n\tIFF(lkp_UnderwritingManagerAKID IS NULL,\n\t\t'NEW',\n\t\tIFF(( lkp_HashKey <> v_NewHashKey \n\t\t\t),\n\t\t\t'UPDATE',\n\t\t\t'NOCHANGE'\n\t\t)\n\t) AS v_changed_flag,\n\tv_changed_flag AS changed_flag,\n\t1 AS CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t-- *INF*: iif(v_changed_flag='NEW',\r\n\t-- \tto_date('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),sysdate)\n\tIFF(v_changed_flag = 'NEW',\n\t\tto_date('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'\n\t\t),\n\t\tsysdate\n\t) AS EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS'\n\t) AS ExpirationDate,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_AssociateStage\n\tLEFT JOIN LKP_ExistingUWManager\n\tON LKP_ExistingUWManager.WestBendAssociateID = SQ_AssociateStage.WestBendAssociateID\n),\nFIL_insert AS (\n\tSELECT\n\tlkp_UnderwritingManagerAKID, \n\tchanged_flag, \n\tCurrentSnapshotFlag, \n\tAuditID, \n\tEffectiveDate, \n\tExpirationDate, \n\tSourceSystemID, \n\tCreatedDate, \n\tModifiedDate, \n\to_NewHashKey AS HashKey, \n\tWestBendAssociateID, \n\tUnderwriterManagerCode, \n\tDisplayName, \n\tLastName, \n\tFirstName, \n\tMiddleName, \n\tSuffix, \n\tEmailAddress, \n\to_UserId AS UserId\n\tFROM EXP_Detect_Changes\n\tWHERE changed_flag='NEW'or changed_flag='UPDATE'\n),\nSEQ_UnderwritingManager_AKID AS (\n\tCREATE SEQUENCE SEQ_UnderwritingManager_AKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_Assign_AKID AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreatedDate,\n\tModifiedDate,\n\tlkp_UnderwritingManagerAKID,\n\tSEQ_UnderwritingManager_AKID.NEXTVAL,\n\tHashKey,\n\t-- *INF*: iif(isnull(lkp_UnderwritingManagerAKID),NEXTVAL,lkp_UnderwritingManagerAKID)\n\tIFF(lkp_UnderwritingManagerAKID IS NULL,\n\t\tNEXTVAL,\n\t\tlkp_UnderwritingManagerAKID\n\t) AS UnderwritingManagerAKID,\n\tWestBendAssociateID,\n\tUnderwriterManagerCode,\n\tDisplayName,\n\tLastName,\n\tFirstName,\n\tMiddleName,\n\tSuffix,\n\tEmailAddress,\n\tUserId\n\tFROM FIL_insert\n),\nUnderwritingManager_Inserts AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.UnderwritingManager\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, HashKey, UnderwritingManagerAKID, WestBendAssociateID, UnderwriterManagerCode, DisplayName, LastName, FirstName, MiddleName, Suffix, EmailAddress, UserId)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tHASHKEY, \n\tUNDERWRITINGMANAGERAKID, \n\tWESTBENDASSOCIATEID, \n\tUNDERWRITERMANAGERCODE, \n\tDISPLAYNAME, \n\tLASTNAME, \n\tFIRSTNAME, \n\tMIDDLENAME, \n\tSUFFIX, \n\tEMAILADDRESS, \n\tUSERID\n\tFROM EXP_Assign_AKID\n),\nSQ_UnderwritingManager AS (\n\tSELECT \r\n\t\ta.UnderwritingManagerID, \r\n\t\ta.EffectiveDate,\r\n\t\ta.ExpirationDate, \r\n\t\ta.UnderwritingManagerAKID\r\n\tFROM \r\n\t\t@{pipeline().parameters.TARGET_TABLE_OWNER}.UnderwritingManager a\r\n\tWHERE  a.UnderwritingManagerAKID  IN\r\n\t\t( SELECT UnderwritingManagerAKID  FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.UnderwritingManager\r\n\t\tWHERE CurrentSnapshotFlag = 1 GROUP BY UnderwritingManagerAKID HAVING count(*) > 1) \r\n\tORDER BY a.UnderwritingManagerAKID ,a.EffectiveDate DESC\r\n\t\r\n\t\r\n\t\r\n\t--IN Subquery exists to pick AK ID column values that have multiple rows with a 12/31/2100 eff_to_date.\r\n\t--When this condition occurs this is an indication that we must expire one or more of these rows.\r\n\t--WHERE clause is always made up of current snapshot flag \r\n\t--GROUP BY clause is always on AK\r\n\t--HAVING clause stays the same\n),\nEXP_Lag_eff_from_date AS (\n\tSELECT\n\tUnderwritingManagerID,\n\tEffectiveDate AS EffectiveFromDate,\n\tExpirationDate AS OriginalEffectiveToDate,\n\tUnderwritingManagerAKID,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- UnderwritingManagerAKID = v_prev_AKID , ADD_TO_DATE(v_prev_EffectiveFromDate,'SS',-1),\r\n\t-- OriginalEffectiveToDate)\n\tDECODE(TRUE,\n\t\tUnderwritingManagerAKID = v_prev_AKID, DATEADD(SECOND,- 1,v_prev_EffectiveFromDate),\n\t\tOriginalEffectiveToDate\n\t) AS v_EffectiveToDate,\n\tv_EffectiveToDate AS o_EffectiveToDate,\n\tUnderwritingManagerAKID AS v_prev_AKID,\n\tEffectiveFromDate AS v_prev_EffectiveFromDate,\n\t0 AS CurrentSnapshotFlag,\n\tSYSDATE AS ModifiedDate\n\tFROM SQ_UnderwritingManager\n),\nFIL_FirstRowInAKGroup AS (\n\tSELECT\n\tUnderwritingManagerID, \n\tOriginalEffectiveToDate, \n\to_EffectiveToDate AS NewEffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM EXP_Lag_eff_from_date\n\tWHERE OriginalEffectiveToDate != NewEffectiveToDate\n),\nUPD_OldRecord AS (\n\tSELECT\n\tUnderwritingManagerID, \n\tNewEffectiveToDate AS EffectiveToDate, \n\tCurrentSnapshotFlag, \n\tModifiedDate\n\tFROM FIL_FirstRowInAKGroup\n),\nUnderwritingManager_Updates AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.UnderwritingManager AS T\n\tUSING UPD_OldRecord AS S\n\tON T.UnderwritingManagerID = S.UnderwritingManagerID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.EffectiveToDate, T.ModifiedDate = S.ModifiedDate\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246490"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905469"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7603192"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/29/2023 22:19:20"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 22:18:59"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCESYSTEMID": {
                "type": "string",
                "defaultValue": "AgencyODS"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            }
        },
        "folder": {
            "name": "Agency DataWarehouse/"
        },
        "annotations": []
    }
}