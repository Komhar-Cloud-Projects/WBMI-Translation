{
    "name": "s_m_POL_DW_BALANCE_PremiumTransaction_PassThroughCharges",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_BALANCE_PremiumTransaction_PassThroughCharges",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_EDW_Tables_PassThroughCharges AS (\n\tSELECT \r\n\t       COUNT(*)                      AS CoverageDetailID,\r\n\t       RTRIM(STATCOV.MajorPerilCode) AS MajorPerilCode,\r\n\t       PassThru.PassThroughChargeTransactionEnteredDate AS PremiumTransactionEnteredDate ,\r\n\t       SUM(PassThroughChargeTransactionAmount) AS PremiumTransactionAmount,\r\n\t       RTRIM(POL.pol_key)                   AS pol_key\r\n\tFROM   @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage STATCOV,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PassThroughChargeTransaction PassThru\r\n\tWHERE  LOC.PolicyAKID = POL.pol_ak_id\r\n\t       AND LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t       AND POLCOV.PolicyCoverageAKID = STATCOV.PolicyCoverageAKID\r\n\t       AND STATCOV.StatisticalCoverageAKID = PassThru.StatisticalCoverageAKID \r\n\t       AND POL.crrnt_snpsht_flag = 1\r\n\t       AND LOC.CurrentSnapshotFlag = 1\r\n\t       AND STATCOV.CurrentSnapshotFlag = 1\r\n\t       AND POLCOV.CurrentSnapshotFlag = 1\r\n\t       AND PassThru.CurrentSnapshotFlag = 1\r\n\t\tAND STATCOV.MajorPerilCode IN ( '078', '088', '089', '183','255', '499', '256', '257','258', '259', '898', '899' )\r\n\tGROUP  BY RTRIM(POL.pol_key),PassThru.PassThroughChargeTransactionEnteredDate,STATCOV.MajorPerilCode\r\n\tORDER BY RTRIM(POL.pol_key)\r\n\t\r\n\t---- '078', '088', '089', '183','255', '499', '256', '257','258', '259', '898', '899'  are major perils which are Pass Through Charges (Taxes and Surcharges).\n),\nEXP_Default_PassthroughCharges AS (\n\tSELECT\n\tStatisticalCoverageID,\n\tMajorPerilCode,\n\tPremiumTransactionAmount AS TotalPremiumTransactionAmount,\n\tpol_key,\n\tPremiumTransactionEnteredDate\n\tFROM SQ_EDW_Tables_PassThroughCharges\n),\nSQ_Stage_Tables_PassThroughCharges AS (\n\tSELECT COUNT(*)                                    AS RowCnt_Arch,\r\n\t\t sar_major_peril AS sar_major_peril,\r\n\t       SUM(sar_premium)                            AS TotalPremiumAmtArch,\r\n\t       UPPER(RTRIM(pif_symbol))  + pif_policy_number + pif_module AS PolicyKey,\r\n\t       CAST(sar_entrd_date AS DATETIME)            AS extract_date\r\n\tFROM   @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_4514}\r\n\tWHERE  logical_flag IN ( '0', '1','2','3' )\r\n\t       AND sar_major_peril IN ( '078', '088', '089', '183','255', '499', '256', '257','258', '259', '898', '899' )\r\n\t       AND @{pipeline().parameters.WHERE_CLAUSE}\r\n\tGROUP BY UPPER(RTRIM(pif_symbol)) + pif_policy_number + pif_module,CAST(sar_entrd_date AS DATETIME), sar_major_peril\r\n\tORDER BY UPPER(RTRIM(pif_symbol)) + pif_policy_number + pif_module\n),\nEXP_Stage_Default_PassThru AS (\n\tSELECT\n\tpif_4514_stage_id AS Arch_Row_Count,\n\tsar_major_peril,\n\tsar_premium AS TotalPremiumAmount,\n\tsar_cession_number AS PolicyKey,\n\textract_date AS TransactionEnteredDate\n\tFROM SQ_Stage_Tables_PassThroughCharges\n),\nJNR_Stage_EDW_Data_PassThroughCharges AS (SELECT\n\tEXP_Default_PassthroughCharges.StatisticalCoverageID, \n\tEXP_Default_PassthroughCharges.MajorPerilCode, \n\tEXP_Default_PassthroughCharges.TotalPremiumTransactionAmount, \n\tEXP_Default_PassthroughCharges.pol_key, \n\tEXP_Default_PassthroughCharges.PremiumTransactionEnteredDate, \n\tEXP_Stage_Default_PassThru.Arch_Row_Count, \n\tEXP_Stage_Default_PassThru.sar_major_peril AS Arch_sar_major_peril, \n\tEXP_Stage_Default_PassThru.TotalPremiumAmount AS Arch_TotalPremiumAmount, \n\tEXP_Stage_Default_PassThru.PolicyKey AS Arch_PolicyKey, \n\tEXP_Stage_Default_PassThru.TransactionEnteredDate AS Arch_TransactionEnteredDate\n\tFROM EXP_Default_PassthroughCharges\n\tRIGHT OUTER JOIN EXP_Stage_Default_PassThru\n\tON EXP_Stage_Default_PassThru.PolicyKey = EXP_Default_PassthroughCharges.pol_key AND EXP_Stage_Default_PassThru.TransactionEnteredDate = EXP_Default_PassthroughCharges.PremiumTransactionEnteredDate AND EXP_Stage_Default_PassThru.sar_major_peril = EXP_Default_PassthroughCharges.MajorPerilCode\n),\nEXP_Evaluate_PassThroughCharges AS (\n\tSELECT\n\tStatisticalCoverageID,\n\tMajorPerilCode,\n\tTotalPremiumTransactionAmount,\n\tpol_key,\n\tPremiumTransactionEnteredDate,\n\tArch_Row_Count,\n\tArch_sar_major_peril,\n\tArch_TotalPremiumAmount,\n\tArch_PolicyKey,\n\tArch_TransactionEnteredDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TotalPremiumTransactionAmount <> Arch_TotalPremiumAmount , 'AmountDoesNotMatch',\r\n\t-- StatisticalCoverageID <> Arch_Row_Count , 'RowCountDoesNotMatch',\r\n\t-- ISNULL(pol_key),'MissingEDWPolicy',\r\n\t-- StatisticalCoverageID = Arch_Row_Count  AND TotalPremiumTransactionAmount = Arch_TotalPremiumAmount,'MatchFound')\n\tDECODE(TRUE,\n\tTotalPremiumTransactionAmount <> Arch_TotalPremiumAmount, 'AmountDoesNotMatch',\n\tStatisticalCoverageID <> Arch_Row_Count, 'RowCountDoesNotMatch',\n\tpol_key IS NULL, 'MissingEDWPolicy',\n\tStatisticalCoverageID = Arch_Row_Count AND TotalPremiumTransactionAmount = Arch_TotalPremiumAmount, 'MatchFound') AS V_Difference_Flag,\n\tV_Difference_Flag AS Flag,\n\t'PassThroughChargesTransaction' AS EDWPolicyTransactionType,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM JNR_Stage_EDW_Data_PassThroughCharges\n),\nFIL_Data_PassThroughCharges AS (\n\tSELECT\n\tpol_key, \n\tMajorPerilCode, \n\tPremiumTransactionEnteredDate, \n\tStatisticalCoverageID, \n\tTotalPremiumTransactionAmount, \n\tArch_PolicyKey, \n\tArch_sar_major_peril, \n\tArch_TransactionEnteredDate, \n\tArch_Row_Count, \n\tArch_TotalPremiumAmount, \n\tFlag, \n\tEDWPolicyTransactionType, \n\tAuditId, \n\tCreatedDate, \n\tModifiedDate\n\tFROM EXP_Evaluate_PassThroughCharges\n\tWHERE IIF(IN(Flag,'AmountDoesNotMatch', 'RowCountDoesNotMatch','MissingEDWPolicy'),TRUE,FALSE)\n),\nWorkBalanceStageToEDWPolicyTransaction_PassthroughChargesTransaction AS (\n\tINSERT INTO WorkBalanceStageToEDWPolicyTransaction\n\t(StagePolicyKey, StageMajorPerilCode, StagePremiumTransactionEnteredDate, StageRowCount, StageTotalPremiumAmount, EDWPolicykey, EDWMajorPerilCode, EDWPremiumTransactionEnteredDate, EDWRowCount, EDWTotalPremiumAmount, EDWPolicyTransactionType, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tArch_PolicyKey AS STAGEPOLICYKEY, \n\tArch_sar_major_peril AS STAGEMAJORPERILCODE, \n\tArch_TransactionEnteredDate AS STAGEPREMIUMTRANSACTIONENTEREDDATE, \n\tArch_Row_Count AS STAGEROWCOUNT, \n\tArch_TotalPremiumAmount AS STAGETOTALPREMIUMAMOUNT, \n\tpol_key AS EDWPOLICYKEY, \n\tMajorPerilCode AS EDWMAJORPERILCODE, \n\tPremiumTransactionEnteredDate AS EDWPREMIUMTRANSACTIONENTEREDDATE, \n\tStatisticalCoverageID AS EDWROWCOUNT, \n\tTotalPremiumTransactionAmount AS EDWTOTALPREMIUMAMOUNT, \n\tEDWPOLICYTRANSACTIONTYPE, \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE\n\tFROM FIL_Data_PassThroughCharges\n),\nSQ_EDW_Tables_PremiumTransaction AS (\n\tSELECT \r\n\t       COUNT(*)                      AS CoverageDetailID,\r\n\t       RTRIM(STATCOV.MajorPerilCode) AS MajorPerilCode,\r\n\t       PT.PremiumTransactionEnteredDate AS PremiumTransactionEnteredDate ,\r\n\t       SUM(PremiumTransactionAmount) AS PremiumTransactionAmount,\r\n\t       RTRIM(POL.pol_key)                   AS pol_key\r\n\tFROM   @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.StatisticalCoverage STATCOV,\r\n\t       @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.premiumtransaction PT\r\n\tWHERE  LOC.PolicyAKID = POL.pol_ak_id\r\n\t       AND LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t       AND POLCOV.PolicyCoverageAKID = STATCOV.PolicyCoverageAKID\r\n\t       AND STATCOV.StatisticalCoverageAKID = PT.StatisticalCoverageAKID\r\n\t       AND POL.crrnt_snpsht_flag = 1\r\n\t       AND LOC.CurrentSnapshotFlag = 1\r\n\t       AND STATCOV.CurrentSnapshotFlag = 1\r\n\t       AND POLCOV.CurrentSnapshotFlag = 1\r\n\t       AND PT.CurrentSnapshotFlag = 1\r\n\t\tAND STATCOV.MajorPerilCode NOT IN ( '078', '088', '089', '183','255', '499', '256', '257','258', '259', '898', '899' )\r\n\t      AND Pol.pol_key in (select policykey from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList)\r\n\tGROUP  BY RTRIM(POL.pol_key),PT.PremiumTransactionEnteredDate,STATCOV.MajorPerilCode\r\n\tORDER BY RTRIM(POL.pol_key)\n),\nEXP_Default AS (\n\tSELECT\n\tCoverageDetailID AS EDW_Row_Count,\n\tMajorPerilCode,\n\tPremiumTransactionAmount AS TotalPremiumTransactionAmount,\n\tpol_key,\n\tPremiumTransactionEnteredDate\n\tFROM SQ_EDW_Tables_PremiumTransaction\n),\nSQ_Stage_Tables_PremiumTransaction AS (\n\tSELECT COUNT(*)                                    AS RowCnt_Arch,\r\n\t\t sar_major_peril AS sar_major_peril,\r\n\t       SUM(sar_premium)                            AS TotalPremiumAmtArch,\r\n\t       UPPER(RTRIM(pif_symbol))  + pif_policy_number + pif_module AS PolicyKey,\r\n\t       CAST(sar_entrd_date AS DATETIME)            AS extract_date\r\n\tFROM   @{pipeline().parameters.SOURCE_DATABASE_NAME}.@{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_4514}\r\n\tWHERE  logical_flag IN ( '0', '1','2','3' )\r\n\t       AND sar_major_peril NOT IN ( '078', '088', '089', '183','255', '499', '256', '257','258', '259', '898', '899' )\r\n\t       AND @{pipeline().parameters.WHERE_CLAUSE}\r\n\tGROUP BY UPPER(RTRIM(pif_symbol)) + pif_policy_number + pif_module,CAST(sar_entrd_date AS DATETIME), sar_major_peril\r\n\tORDER BY UPPER(RTRIM(pif_symbol)) + pif_policy_number + pif_module\n),\nEXP_Stage_Default AS (\n\tSELECT\n\tpif_4514_stage_id AS Arch_Row_Count,\n\tsar_major_peril,\n\tsar_premium AS TotalPremiumAmount,\n\tsar_cession_number AS PolicyKey,\n\textract_date AS TransactionEnteredDate\n\tFROM SQ_Stage_Tables_PremiumTransaction\n),\nJNR_Stage_EDW_Data AS (SELECT\n\tEXP_Default.EDW_Row_Count, \n\tEXP_Default.MajorPerilCode, \n\tEXP_Default.TotalPremiumTransactionAmount, \n\tEXP_Default.pol_key, \n\tEXP_Default.PremiumTransactionEnteredDate, \n\tEXP_Stage_Default.Arch_Row_Count, \n\tEXP_Stage_Default.sar_major_peril AS Arch_sar_major_peril, \n\tEXP_Stage_Default.TotalPremiumAmount AS Arch_TotalPremiumAmount, \n\tEXP_Stage_Default.PolicyKey AS Arch_PolicyKey, \n\tEXP_Stage_Default.TransactionEnteredDate AS Arch_TransactionEnteredDate\n\tFROM EXP_Default\n\tRIGHT OUTER JOIN EXP_Stage_Default\n\tON EXP_Stage_Default.PolicyKey = EXP_Default.pol_key AND EXP_Stage_Default.TransactionEnteredDate = EXP_Default.PremiumTransactionEnteredDate AND EXP_Stage_Default.sar_major_peril = EXP_Default.MajorPerilCode\n),\nEXP_Evaluate AS (\n\tSELECT\n\tEDW_Row_Count,\n\tMajorPerilCode,\n\tTotalPremiumTransactionAmount,\n\tpol_key,\n\tPremiumTransactionEnteredDate,\n\tArch_Row_Count,\n\tArch_sar_major_peril,\n\tArch_TotalPremiumAmount,\n\tArch_PolicyKey,\n\tArch_TransactionEnteredDate,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- TotalPremiumTransactionAmount <> Arch_TotalPremiumAmount , 'AmountDoesNotMatch',\r\n\t-- EDW_Row_Count <> Arch_Row_Count , 'RowCountDoesNotMatch',\r\n\t-- ISNULL(pol_key),'MissingEDWPolicy',\r\n\t-- EDW_Row_Count = Arch_Row_Count  AND TotalPremiumTransactionAmount = Arch_TotalPremiumAmount,'MatchFound')\n\tDECODE(TRUE,\n\tTotalPremiumTransactionAmount <> Arch_TotalPremiumAmount, 'AmountDoesNotMatch',\n\tEDW_Row_Count <> Arch_Row_Count, 'RowCountDoesNotMatch',\n\tpol_key IS NULL, 'MissingEDWPolicy',\n\tEDW_Row_Count = Arch_Row_Count AND TotalPremiumTransactionAmount = Arch_TotalPremiumAmount, 'MatchFound') AS V_Difference_Flag,\n\tV_Difference_Flag AS Flag,\n\t'PremiumTransaction' AS EDWPolicyTransactionType,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate\n\tFROM JNR_Stage_EDW_Data\n),\nFIL_Data AS (\n\tSELECT\n\tpol_key, \n\tMajorPerilCode, \n\tPremiumTransactionEnteredDate, \n\tEDW_Row_Count, \n\tTotalPremiumTransactionAmount, \n\tArch_PolicyKey, \n\tArch_sar_major_peril, \n\tArch_TransactionEnteredDate, \n\tArch_Row_Count, \n\tArch_TotalPremiumAmount, \n\tFlag, \n\tEDWPolicyTransactionType, \n\tAuditId, \n\tCreatedDate, \n\tModifiedDate\n\tFROM EXP_Evaluate\n\tWHERE IIF(IN(Flag,'AmountDoesNotMatch', 'RowCountDoesNotMatch','MissingEDWPolicy'),TRUE,FALSE)\n),\nWorkBalanceStageToEDWPolicyTransaction_PremiumTransaction AS (\n\tINSERT INTO WorkBalanceStageToEDWPolicyTransaction\n\t(StagePolicyKey, StageMajorPerilCode, StagePremiumTransactionEnteredDate, StageRowCount, StageTotalPremiumAmount, EDWPolicykey, EDWMajorPerilCode, EDWPremiumTransactionEnteredDate, EDWRowCount, EDWTotalPremiumAmount, EDWPolicyTransactionType, AuditId, CreatedDate, ModifiedDate)\n\tSELECT \n\tArch_PolicyKey AS STAGEPOLICYKEY, \n\tArch_sar_major_peril AS STAGEMAJORPERILCODE, \n\tArch_TransactionEnteredDate AS STAGEPREMIUMTRANSACTIONENTEREDDATE, \n\tArch_Row_Count AS STAGEROWCOUNT, \n\tArch_TotalPremiumAmount AS STAGETOTALPREMIUMAMOUNT, \n\tpol_key AS EDWPOLICYKEY, \n\tMajorPerilCode AS EDWMAJORPERILCODE, \n\tPremiumTransactionEnteredDate AS EDWPREMIUMTRANSACTIONENTEREDDATE, \n\tEDW_Row_Count AS EDWROWCOUNT, \n\tTotalPremiumTransactionAmount AS EDWTOTALPREMIUMAMOUNT, \n\tEDWPOLICYTRANSACTIONTYPE, \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE\n\tFROM FIL_Data\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_NAME_4514": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}