{
    "name": "s_m_CLM_BALANCE_STAGE_EDW_Claim_EXCEED",
    "properties": {
        "activities": [
            {
                "name": "m_CLM_BALANCE_STAGE_EDW_Claim_EXCEED",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_EDW_TABLES_Balance_Transaction AS (\n\tSELECT claim_occurrence.claim_occurrence_key AS EDW_CO_key,\r\n\t       Count(*)                              AS EDW_COUNT_of_Transactions,\r\n\t       Sum(trans_amt)                        AS EDW_SUM_Trans_Amt\r\n\tFROM   @{pipeline().parameters.DB_NAME_EDW}.dbo.claim_transaction AS claim_transaction\r\n\t       INNER JOIN @{pipeline().parameters.DB_NAME_EDW}.dbo.claimant_coverage_detail AS claimant_coverage_detail\r\n\t         ON claim_transaction.claimant_cov_det_ak_id = claimant_coverage_detail.claimant_cov_det_ak_id\r\n\t       INNER JOIN @{pipeline().parameters.DB_NAME_EDW}.dbo.claim_party_occurrence AS claim_party_occurrence\r\n\t         ON claimant_coverage_detail.claim_party_occurrence_ak_id = claim_party_occurrence.claim_party_occurrence_ak_id\r\n\t       INNER JOIN @{pipeline().parameters.DB_NAME_EDW}.dbo.claim_occurrence AS claim_occurrence\r\n\t         ON claim_party_occurrence.claim_occurrence_ak_id = claim_occurrence.claim_occurrence_ak_id\r\n\tWHERE  claim_transaction.crrnt_snpsht_flag = 1\r\n\t       AND claimant_coverage_detail.crrnt_snpsht_flag = 1\r\n\t       AND claim_party_occurrence.crrnt_snpsht_flag = 1\r\n\t       AND claim_occurrence.crrnt_snpsht_flag = 1\r\n\t       AND claim_transaction.trans_offset_onset_ind IN ('N','N/A')\r\n\t       AND claim_transaction.source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\tGROUP  BY claim_occurrence_key \r\n\tORDER BY  claim_occurrence_key\r\n\t\r\n\t-- For balancing, we need to take Only Onset Transaction rows into consideration.\n),\nSQ_claim_transaction_full_extract_stage AS (\n\tSELECT \tCTX_CLAIM_NBR    AS CTX_CLAIM_NBR,\r\n\t\t\tCOUNT(*)         AS CTX_OBJECT_SEQ_NBR,\r\n\t\t\tSUM(CTX_TRS_AMT) AS CTX_TRS_AMT\r\n\tFROM   WC_STAGE.DBO.CLAIM_TRANSACTION_FULL_EXTRACT_STAGE\r\n\tGROUP  BY CTX_CLAIM_NBR\r\n\tORDER  BY CTX_CLAIM_NBR\n),\nJNR_EDW_STAGE AS (SELECT\n\tSQ_EDW_TABLES_Balance_Transaction.EDW_claim_occurrence_key, \n\tSQ_EDW_TABLES_Balance_Transaction.EDW_COUNT_of_Transactions, \n\tSQ_EDW_TABLES_Balance_Transaction.EDW_SUM_Trans_Amt, \n\tSQ_claim_transaction_full_extract_stage.STG_COUNT_of_Transactions, \n\tSQ_claim_transaction_full_extract_stage.STG_claim_occurrence_key, \n\tSQ_claim_transaction_full_extract_stage.STG_SUM_Trans_Amt\n\tFROM SQ_EDW_TABLES_Balance_Transaction\n\tRIGHT OUTER JOIN SQ_claim_transaction_full_extract_stage\n\tON SQ_claim_transaction_full_extract_stage.STG_claim_occurrence_key = SQ_EDW_TABLES_Balance_Transaction.EDW_claim_occurrence_key\n),\nEXP_Evaluate AS (\n\tSELECT\n\tEDW_claim_occurrence_key,\n\tEDW_COUNT_of_Transactions,\n\tEDW_SUM_Trans_Amt,\n\tSTG_COUNT_of_Transactions,\n\tSTG_claim_occurrence_key,\n\tSTG_SUM_Trans_Amt,\n\t-- *INF*: IIF(STG_SUM_Trans_Amt = EDW_SUM_Trans_Amt,'Y','N')\n\tIFF(STG_SUM_Trans_Amt = EDW_SUM_Trans_Amt, 'Y', 'N') AS v_Balance_Amount,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ROUND(abs(EDW_SUM_Trans_Amt - STG_SUM_Trans_Amt),2) > 0.01 , -3,\r\n\t-- ROUND(abs(EDW_SUM_Trans_Amt - STG_SUM_Trans_Amt),2) <= 0.01  \r\n\t-- AND EDW_COUNT_of_Transactions  != STG_COUNT_of_Transactions, -4,\r\n\t-- 0)\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --DECODE(TRUE,\r\n\t-- --EDW_SUM_Trans_Amt <> STG_SUM_Trans_Amt , -3,\r\n\t-- --EDW_SUM_Trans_Amt  = STG_SUM_Trans_Amt \r\n\t-- --  AND EDW_COUNT_of_Transactions  != STG_COUNT_of_Transactions, -4,\r\n\t-- --0)\r\n\t-- \r\n\t-- --IIF(v_Balance_Amount = 'Y', 1, -2)\r\n\t-- \r\n\t--  ---- (-1,-2) is used to identify the PMS claims that are not balancing either by amount or no. of transactions.\r\n\t--  ---- (-3,-4) is used to identify EXCEED claims that are not balancing either by amount or no. of transactions.\n\tDECODE(\n\t    TRUE,\n\t    ROUND(abs(EDW_SUM_Trans_Amt - STG_SUM_Trans_Amt), 2) > 0.01, - 3,\n\t    ROUND(abs(EDW_SUM_Trans_Amt - STG_SUM_Trans_Amt), 2) <= 0.01 AND EDW_COUNT_of_Transactions != STG_COUNT_of_Transactions, - 4,\n\t    0\n\t) AS err_flag_change,\n\terr_flag_change AS out_err_flag_bal_txn\n\tFROM JNR_EDW_STAGE\n),\nLKP_Claim_Occurrence_id AS (\n\tSELECT\n\tclaim_occurrence_id,\n\terr_flag_bal_txn,\n\tclaim_occurrence_key\n\tFROM (\n\t\tSELECT \r\n\t\ta.claim_occurrence_id as claim_occurrence_id, \r\n\t\ta.err_flag_bal_txn as err_flag_bal_txn,\r\n\t\ta.claim_occurrence_key as claim_occurrence_key \r\n\t\tFROM \r\n\t\tdbo.claim_occurrence a\r\n\t\tWHERE \r\n\t\tsource_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\tand \r\n\t\tcrrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY claim_occurrence_key ORDER BY claim_occurrence_id DESC) = 1\n),\nEXP_UpdateFlag AS (\n\tSELECT\n\tLKP_Claim_Occurrence_id.claim_occurrence_id AS lkp_claim_occurrence_id,\n\tLKP_Claim_Occurrence_id.err_flag_bal_txn AS lkp_err_flag_bal_txn,\n\tEXP_Evaluate.out_err_flag_bal_txn,\n\t-- *INF*: IIF(out_err_flag_bal_txn = lkp_err_flag_bal_txn, 'NOUPDATE', 'UPDATE')\n\tIFF(out_err_flag_bal_txn = lkp_err_flag_bal_txn, 'NOUPDATE', 'UPDATE') AS v_update_flag,\n\tv_update_flag AS update_flag\n\tFROM EXP_Evaluate\n\tLEFT JOIN LKP_Claim_Occurrence_id\n\tON LKP_Claim_Occurrence_id.claim_occurrence_key = EXP_Evaluate.EDW_claim_occurrence_key\n),\nFIL_Err_Flag AS (\n\tSELECT\n\tlkp_claim_occurrence_id AS claim_occurrence_id, \n\tout_err_flag_bal_txn, \n\tupdate_flag\n\tFROM EXP_UpdateFlag\n\tWHERE update_flag =  'UPDATE'\n),\nUPD_Claim_Occurrence_Err_Flag_bal_txn AS (\n\tSELECT\n\tclaim_occurrence_id, \n\tout_err_flag_bal_txn\n\tFROM FIL_Err_Flag\n),\nclaim_occurrence_update_err_flag_bal_txn AS (\n\tMERGE INTO claim_occurrence AS T\n\tUSING UPD_Claim_Occurrence_Err_Flag_bal_txn AS S\n\tON T.claim_occurrence_id = S.claim_occurrence_id\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.err_flag_bal_txn = S.out_err_flag_bal_txn\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "DB_NAME_EDW": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "RPT_EDM and EDW/Claims DataWarehouse/"
        },
        "annotations": []
    }
}