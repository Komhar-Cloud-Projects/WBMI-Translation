{
    "name": "s_m_POL_DW_LOAD_PolicyCoverage",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_PolicyCoverage",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_Policy_PolicyAKID AS (\n\tSELECT\n\tpol_ak_id,\n\tpol_key\n\tFROM (\n\t\tSELECT policy.pol_ak_id as pol_ak_id, ltrim(rtrim(policy.pol_key)) as pol_key FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.policy\r\n\t\tWHERE crrnt_snpsht_flag =1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_key ORDER BY pol_ak_id DESC) = 1\n),\nLKP_RiskLocation_RiskLocationAKID AS (\n\tSELECT\n\tRiskLocationAKID,\n\tRiskLocationID,\n\tCurrentSnapshotFlag,\n\tPolicyAKID,\n\tLocationUnitNumber,\n\tRiskTerritory,\n\tStateProvinceCode,\n\tZipPostalCode,\n\tTaxLocation\n\tFROM (\n\t\tSELECT RiskLocationAKID   AS RiskLocationAKID,\r\n\t\t       PolicyAKID         AS PolicyAKID,\r\n\t\tLOC.RiskLocationID as RiskLocationID,\r\n\t\tLOC.CurrentSnapshotFlag AS CurrentSnapshotFlag,\r\n\t\t       LTRIM(RTRIM(LocationUnitNumber)) AS LocationUnitNumber,\r\n\t\t       LTRIM(RTRIM(RiskTerritory))      AS RiskTerritory,\r\n\t\t       LTRIM(RTRIM(StateProvinceCode))  AS StateProvinceCode,\r\n\t\t       LTRIM(RTRIM(ZipPostalCode))      AS ZipPostalCode,\r\n\t\t       LTRIM(RTRIM(TaxLocation))        AS TaxLocation\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC\r\n\t\tINNER JOIN  @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL\r\n\t\tON\tLOC.PolicyAKID = POL.pol_ak_id\r\n\t\tWHERE POL.crrnt_snpsht_flag = 1 AND LOC.CurrentSnapshotFlag =1\r\n\t\t       AND POL.SOURCE_SYS_ID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t       AND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \r\n\t\t\t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKID,LocationUnitNumber,RiskTerritory,StateProvinceCode,ZipPostalCode,TaxLocation ORDER BY RiskLocationAKID DESC) = 1\n),\nSQ_pif_4514_stage AS (\n\tSELECT DISTINCT RTRIM(A.pif_symbol) as pif_symbol,\r\n\t       A.pif_policy_number,\r\n\t       A.pif_module,\r\n\t       ltrim(rtrim(sar_insurance_line)) as sar_insurance_line,\r\n\t(CASE LEN(ltrim(rtrim(sar_location_x))) \r\n\tWHEN '0' THEN ltrim(rtrim(sar_unit))\r\n\tELSE ltrim(rtrim(sar_location_x)) \r\n\tEND) as sar_location_x,\r\n\t/*\r\n\t       ltrim(rtrim(sar_cov_eff_year)) as sar_cov_eff_year,\r\n\t       ltrim(rtrim(sar_cov_eff_month)) as sar_cov_eff_month,\r\n\t       ltrim(rtrim(sar_cov_eff_day)) as sar_cov_eff_day,\r\n\t*/\r\n\t       ltrim(rtrim(sar_state)) as sar_state,\r\n\t       ltrim(rtrim(sar_loc_prov_territory)) as sar_loc_prov_territory,\r\n\tCASE WHEN LEN(LTRIM(RTRIM(sar_county_first_two)) + LTRIM(RTRIM(sar_county_last_one)) + LTRIM(RTRIM(sar_city))) < 6 THEN '000000' ELSE \r\n\tLTRIM(RTRIM(sar_county_first_two)) + LTRIM(RTRIM(sar_county_last_one)) + LTRIM(RTRIM(sar_city)) END as sar_city,\r\n\t       ltrim(rtrim(sar_type_bureau)) as sar_type_bureau,\r\n\t       ltrim(rtrim(sar_zip_postal_code)) as sar_zip_postal_code,\r\n\t       0 as logical_flag,\r\n\t       C.pif_line_business as pif_line_business,\r\n\t      C.pif_audit_code as pif_audit_code,\r\n\t      C.pif_risk_grade_guide as pif_risk_grade_guide,\r\n\t      D.comments_area as PriorCarrierName\r\n\tFROM  @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_4514}  A\r\n\t@{pipeline().parameters.JOIN_CONDITION}\r\n\t(SELECT DISTINCT Policykey FROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.work_policytransactionstatus \r\n\tWHERE AuditID = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AND\r\n\tPolicyStatus <> 'NOCHANGE')  B\r\n\tON  A.policykey = B.policykey\r\n\tleft join ( select pif_symbol,\r\n\t                  pif_policy_number,\r\n\t                  pif_module,\r\n\t                  pif_audit_code,\r\n\t                  pif_risk_grade_guide,\r\n\t\t            pif_line_business,\r\n\t                  row_number() over (partition by \r\n\t                  pif_symbol,\r\n\t                  pif_policy_number,\r\n\t                  pif_module order by pif_02_stage_id desc) rn\r\n\t                 from @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_02} ) C\r\n\ton A.pif_symbol=C.pif_symbol and A.pif_policy_number=C.pif_policy_number and A.pif_module=C.pif_module and C.rn=1\r\n\tleft join (Select pif_symbol,\r\n\t                  pif_policy_number,\r\n\t                  pif_module,  \r\n\t                  comments_area,\r\n\t                  row_number() over (partition by \r\n\t                  pif_symbol,\r\n\t                  pif_policy_number,\r\n\t                  pif_module order by pif_03_stage_id desc) rn\r\n\t \r\n\t from @{pipeline().parameters.SOURCE_TABLE_OWNER}.pif_03_stage where comments_reason_suspended='ZP') D\r\n\t on A.pif_symbol=D.pif_symbol and A.pif_policy_number=D.pif_policy_number and A.pif_module=D.pif_module and D.rn=1\r\n\tWHERE A.logical_flag IN ('0','1','2','3') \r\n\t@{pipeline().parameters.WHERE_CLAUSE}\n),\nLKP_Pif43LXZWCStage_RatingPlan AS (\n\tSELECT\n\tPmdl4w1RatingProgramType,\n\tPifSymbol,\n\tPifPolicyNumber,\n\tPifModule\n\tFROM (\n\t\tSELECT DISTINCT A.Pmdl4w1RatingProgramType as Pmdl4w1RatingProgramType, \r\n\t\tA.PifSymbol as PifSymbol, \r\n\t\tA.PifPolicyNumber as PifPolicyNumber, \r\n\t\tA.PifModule as PifModule \r\n\t\tFROM @{pipeline().parameters.SOURCE_TABLE_NAME}.Pif43LXZWCStage A\r\n\t\twhere A.Pmdl4w1SplitRateSeq in ( \r\n\t\tselect MAX(Pmdl4w1SplitRateSeq) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXZWCStage B\r\n\t\twhere A.PifSymbol = B.PifSymbol\r\n\t\tand A.PifPolicyNumber = B.PifPolicyNumber\r\n\t\tand A.PifModule = B.PifModule\r\n\t\t)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PifSymbol,PifPolicyNumber,PifModule ORDER BY Pmdl4w1RatingProgramType) = 1\n),\nLKP_pif_4514_ClassCode_WC AS (\n\tSELECT\n\tsar_class_1_4,\n\tpif_symbol,\n\tpif_policy_number,\n\tpif_module,\n\tsar_insurance_line,\n\tsar_location_x,\n\tsar_state,\n\tsar_loc_prov_territory,\n\tsar_city,\n\tsar_type_bureau,\n\tsar_zip_postal_code\n\tFROM (\n\t\tselect distinct A.sar_class_1_4 as sar_class_1_4,\r\n\t\trtrim(A.pif_symbol) as pif_symbol,\r\n\t\tA.pif_policy_number as pif_policy_number,\r\n\t\tA.pif_module as pif_module,\r\n\t\tltrim(rtrim(sar_insurance_line)) as sar_insurance_line,\r\n\t\t(case len(ltrim(rtrim(sar_location_x))) when '0' then ltrim(rtrim(sar_unit)) else ltrim(rtrim(sar_location_x)) end) as sar_location_x,\r\n\t\tltrim(rtrim(sar_state)) as sar_state,\r\n\t\tltrim(rtrim(sar_loc_prov_territory)) as sar_loc_prov_territory,\r\n\t\tcase when len(ltrim(rtrim(sar_county_first_two)) + ltrim(rtrim(sar_county_last_one)) + ltrim(rtrim(sar_city))) < 6 then '000000' \r\n\t\t     else ltrim(rtrim(sar_county_first_two)) + ltrim(rtrim(sar_county_last_one)) + ltrim(rtrim(sar_city)) end as sar_city,\r\n\t\tltrim(rtrim(sar_type_bureau)) as sar_type_bureau,\r\n\t\tltrim(rtrim(sar_zip_postal_code)) as sar_zip_postal_code\r\n\t\tfrom  @{pipeline().parameters.SOURCE_TABLE_OWNER}.@{pipeline().parameters.SOURCE_TABLE_NAME_4514}  A\r\n\t\t@{pipeline().parameters.JOIN_CONDITION}\r\n\t\t(select distinct Policykey from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.work_policytransactionstatus \r\n\t\twhere AuditID = @{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} and PolicyStatus <> 'NOCHANGE')  B\r\n\t\tON  A.policykey = B.policykey\r\n\t\twhere A.logical_flag in ('0','1','2','3') \r\n\t\tand A.sar_class_1_4 in ('9657','9663','9664','9667','9668','9669','9670','9671','9672','9673','9674','9675','9676','9677',\r\n\t\t'9678','9679','9758','9759','9760','9761','9762','9763','9764','9770','9771','9772','9773','9780','9781','9784','9785',\r\n\t\t'9786','9787','9788','9789','9790','9791','9792','9793','9794','9795','9796','9797','9798','9799','9801','9870','9871',\r\n\t\t'9872','9878','9881','9882','9888','9895','9900','9901','9902','9903','9904','9905','9906','9907','9908','9909','9910',\r\n\t\t'9911','9912','9913','9914','9915','9916','9917','9918','9919','9920','9924','9925','9926','9927','9928','9929','9930',\r\n\t\t'9931','9932','9933','9934','9935','9936','9937','9938','9939','9940','9941','9942','9943','9944','9945','9946','9947',\r\n\t\t'9948','9949','9950','9951','9952','9953','9954','9955','9970','9971','9972','9973','9974','9975','9981','9982','9983','9986','9987','9991','9992')\r\n\t\tand A.sar_major_peril='032'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pif_symbol,pif_policy_number,pif_module,sar_insurance_line,sar_location_x,sar_state,sar_loc_prov_territory,sar_city,sar_type_bureau,sar_zip_postal_code ORDER BY sar_class_1_4) = 1\n),\nEXP_Default AS (\n\tSELECT\n\tSQ_pif_4514_stage.pif_symbol,\n\tSQ_pif_4514_stage.pif_policy_number,\n\tSQ_pif_4514_stage.pif_module,\n\t-- *INF*: (pif_symbol  || pif_policy_number || pif_module)\n\t( pif_symbol || pif_policy_number || pif_module ) AS v_Pol_key,\n\t-- *INF*: :LKP.LKP_POLICY_POLICYAKID(v_Pol_key)\n\tLKP_POLICY_POLICYAKID_v_Pol_key.pol_ak_id AS v_LKP_PolicyAKID,\n\tv_LKP_PolicyAKID AS PolicyAKID,\n\tv_Pol_key AS Pol_Key,\n\tSQ_pif_4514_stage.sar_insurance_line,\n\tSQ_pif_4514_stage.sar_location_x AS i_LocationUnitNumber,\n\t-- *INF*: LTRIM(RTRIM(i_LocationUnitNumber))\n\tLTRIM(RTRIM(i_LocationUnitNumber)) AS v_LocationUnitNumber,\n\tSQ_pif_4514_stage.sar_state,\n\t-- *INF*: IIF(LTRIM(RTRIM(sar_state))='00', '0',LTRIM(RTRIM(sar_state)))\n\tIFF(LTRIM(RTRIM(sar_state)) = '00', '0', LTRIM(RTRIM(sar_state))) AS v_StateProvinceCode,\n\tSQ_pif_4514_stage.sar_loc_prov_territory,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_loc_prov_territory) AS v_RiskTerritory,\n\tSQ_pif_4514_stage.sar_city,\n\t-- *INF*: iif(reg_match(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city) ,'(\\d{6})')\r\n\t-- ,:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city)\r\n\t-- ,'000000')\n\tIFF(reg_match(:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city), '(\\d{6})'), :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_city), '000000') AS v_TaxLocation,\n\tSQ_pif_4514_stage.sar_type_bureau,\n\tSQ_pif_4514_stage.sar_zip_postal_code,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(sar_zip_postal_code)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(sar_zip_postal_code) AS v_ZipPostalCode,\n\tSQ_pif_4514_stage.logical_flag AS LogicalIndicator,\n\tSQ_pif_4514_stage.pif_line_business,\n\tSQ_pif_4514_stage.pif_audit_code,\n\tSQ_pif_4514_stage.pif_risk_grade_guide,\n\t-- *INF*: :LKP.LKP_RISKLOCATION_RISKLOCATIONAKID(v_LKP_PolicyAKID,v_LocationUnitNumber,v_RiskTerritory,v_StateProvinceCode,v_ZipPostalCode,v_TaxLocation)\r\n\t-- \n\tLKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.RiskLocationAKID AS LKP_RiskLocationAKID,\n\tSQ_pif_4514_stage.PriorCarrierName AS i_PriorCarrierName,\n\t-- *INF*: LTRIM(RTRIM(i_PriorCarrierName))\n\tLTRIM(RTRIM(i_PriorCarrierName)) AS o_PriorCarrierName,\n\tLKP_pif_4514_ClassCode_WC.sar_class_1_4 AS i_sar_class_1_4,\n\tLKP_Pif43LXZWCStage_RatingPlan.Pmdl4w1RatingProgramType AS i_Pmdl4w1RatingProgramType,\n\t-- *INF*: UPPER(i_Pmdl4w1RatingProgramType)\n\tUPPER(i_Pmdl4w1RatingProgramType) AS v_Pmdl4w1RatingProgramType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- v_Pmdl4w1RatingProgramType='G' AND  NOT ISNULL(i_sar_class_1_4),\r\n\t-- 'Small Deductible',\r\n\t-- v_Pmdl4w1RatingProgramType='R',\r\n\t-- 'Large Risk Alternative Rating Option(LRARO)',\r\n\t-- 'Guaranteed Cost')\n\tDECODE(TRUE,\n\tv_Pmdl4w1RatingProgramType = 'G' AND NOT i_sar_class_1_4 IS NULL, 'Small Deductible',\n\tv_Pmdl4w1RatingProgramType = 'R', 'Large Risk Alternative Rating Option(LRARO)',\n\t'Guaranteed Cost') AS o_RatingPlanDescription\n\tFROM SQ_pif_4514_stage\n\tLEFT JOIN LKP_Pif43LXZWCStage_RatingPlan\n\tON LKP_Pif43LXZWCStage_RatingPlan.PifSymbol = SQ_pif_4514_stage.pif_symbol AND LKP_Pif43LXZWCStage_RatingPlan.PifPolicyNumber = SQ_pif_4514_stage.pif_policy_number AND LKP_Pif43LXZWCStage_RatingPlan.PifModule = SQ_pif_4514_stage.pif_module\n\tLEFT JOIN LKP_pif_4514_ClassCode_WC\n\tON LKP_pif_4514_ClassCode_WC.pif_symbol = SQ_pif_4514_stage.pif_symbol AND LKP_pif_4514_ClassCode_WC.pif_policy_number = SQ_pif_4514_stage.pif_policy_number AND LKP_pif_4514_ClassCode_WC.pif_module = SQ_pif_4514_stage.pif_module AND LKP_pif_4514_ClassCode_WC.sar_insurance_line = SQ_pif_4514_stage.sar_insurance_line AND LKP_pif_4514_ClassCode_WC.sar_location_x = SQ_pif_4514_stage.sar_location_x AND LKP_pif_4514_ClassCode_WC.sar_state = SQ_pif_4514_stage.sar_state AND LKP_pif_4514_ClassCode_WC.sar_loc_prov_territory = SQ_pif_4514_stage.sar_loc_prov_territory AND LKP_pif_4514_ClassCode_WC.sar_city = SQ_pif_4514_stage.sar_city AND LKP_pif_4514_ClassCode_WC.sar_type_bureau = SQ_pif_4514_stage.sar_type_bureau AND LKP_pif_4514_ClassCode_WC.sar_zip_postal_code = SQ_pif_4514_stage.sar_zip_postal_code\n\tLEFT JOIN LKP_POLICY_POLICYAKID LKP_POLICY_POLICYAKID_v_Pol_key\n\tON LKP_POLICY_POLICYAKID_v_Pol_key.pol_key = v_Pol_key\n\n\tLEFT JOIN LKP_RISKLOCATION_RISKLOCATIONAKID LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation\n\tON LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.PolicyAKID = v_LKP_PolicyAKID\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.LocationUnitNumber = v_LocationUnitNumber\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.RiskTerritory = v_RiskTerritory\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.StateProvinceCode = v_StateProvinceCode\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.ZipPostalCode = v_ZipPostalCode\n\tAND LKP_RISKLOCATION_RISKLOCATIONAKID_v_LKP_PolicyAKID_v_LocationUnitNumber_v_RiskTerritory_v_StateProvinceCode_v_ZipPostalCode_v_TaxLocation.TaxLocation = v_TaxLocation\n\n),\nEXP_GetAKIDs AS (\n\tSELECT\n\tPolicyAKID,\n\tPol_Key AS PolKey,\n\tsar_insurance_line AS in_sar_insurance_line,\n\tsar_type_bureau AS in_sar_type_bureau,\n\tpif_audit_code AS in_pif_audit_code,\n\tpif_risk_grade_guide AS in_pif_risk_grade_guide,\n\tLKP_RiskLocationAKID AS RiskLocationAKID,\n\tLogicalIndicator,\n\tpif_line_business,\n\t-- *INF*: iif(isnull(PolicyAKID)\r\n\t-- ,error('Policy_AK_ID can not be blank'))\n\tIFF(PolicyAKID IS NULL, error('Policy_AK_ID can not be blank')) AS v_ErrorPolicy,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_insurance_line)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_insurance_line) AS v_InsuranceLine,\n\t-- *INF*: --TO_CHAR(in_sar_cov_eff_year)\n\t'' AS v_sar_cov_eff_year,\n\t-- *INF*: --LPAD(TO_CHAR(in_sar_cov_eff_month),2,'0')\n\t'' AS v_sar_cov_eff_month,\n\t-- *INF*: --LPAD(TO_CHAR(in_sar_cov_eff_day),2,'0')\n\t'' AS v_sar_cov_eff_day,\n\t-- *INF*: --LPAD(TO_CHAR(in_sar_cov_eff_month),2,'0') || '/' || LPAD(TO_CHAR(in_sar_cov_eff_day),2,'0')\t||\t'/'\t||\r\n\t-- --TO_CHAR(in_sar_cov_eff_year)\n\t'' AS v_sar_cov_eff_date,\n\t-- *INF*: --TO_DATE(v_sar_cov_eff_month  || '/'  || v_sar_cov_eff_day  || '/'  || v_sar_cov_eff_year, 'MM/DD/YYYY')\n\t'' AS v_PolicyCoverageEffectiveDate,\n\t-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_type_bureau)\n\t:UDF.DEFAULT_VALUE_FOR_STRINGS(in_sar_type_bureau) AS v_TypeBureauCode,\n\t-- *INF*: iif(isnull(RiskLocationAKID)\r\n\t-- ,error('RiskLocationAKID can not be blank'))\n\tIFF(RiskLocationAKID IS NULL, error('RiskLocationAKID can not be blank')) AS v_ErrorRiskLocation,\n\tPolKey || RiskLocationAKID AS v_PolicyCoverageKey,\n\t-- *INF*: MD5(to_char(PolicyAKID) || to_char(RiskLocationAKID) || v_InsuranceLine || v_TypeBureauCode)\n\tMD5(to_char(PolicyAKID) || to_char(RiskLocationAKID) || v_InsuranceLine || v_TypeBureauCode) AS v_PolicyCoverageHashKey,\n\tv_PolicyCoverageHashKey AS out_PolicyCoverageHashKey,\n\tv_PolicyCoverageKey AS out_PolicyCoverageKey,\n\tv_InsuranceLine AS out_InsuranceLine,\n\tv_TypeBureauCode AS out_TypeBureauCode,\n\t-- *INF*: TO_DATE('01/01/1800 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\r\n\t-- --v_PolicyCoverageEffectiveDate\n\tTO_DATE('01/01/1800 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS out_PolicyCoverageEffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS out_PolicyCoverageExpirationDate,\n\t-- *INF*: IIF(IN(LTRIM(RTRIM(in_pif_audit_code)),'Y','A','M'),'1','0')\n\tIFF(IN(LTRIM(RTRIM(in_pif_audit_code)), 'Y', 'A', 'M'), '1', '0') AS out_AuditableIndicator,\n\t-- *INF*: IIF(ISNULL(in_pif_risk_grade_guide) OR IS_SPACES(in_pif_risk_grade_guide) OR LENGTH(in_pif_risk_grade_guide)=0, 'N/A', LTRIM(RTRIM(in_pif_risk_grade_guide)))\n\tIFF(in_pif_risk_grade_guide IS NULL OR IS_SPACES(in_pif_risk_grade_guide) OR LENGTH(in_pif_risk_grade_guide) = 0, 'N/A', LTRIM(RTRIM(in_pif_risk_grade_guide))) AS out_RiskGradeCode,\n\to_PriorCarrierName AS PriorCarrierName,\n\t'N/A' AS PriorPolicyKey,\n\t'N/A' AS PriorInsuranceLine,\n\to_RatingPlanDescription AS RatingPlanDescription\n\tFROM EXP_Default\n),\nLKP_Pif43LXZWCStage AS (\n\tSELECT\n\tPmdl4w1InterstRiskIdNo2,\n\tPmdl4w1InterstRiskFiller,\n\tPolKey\n\tFROM (\n\t\tselect\r\n\t\tlx.PifSymbol+lx.PifPolicyNumber+lx.PifModule as PolKey,\r\n\t\tlx.Pmdl4w1InterstRiskIdNo2 as Pmdl4w1InterstRiskIdNo2,\r\n\t\tlx.Pmdl4w1InterstRiskFiller as Pmdl4w1InterstRiskFiller\r\n\t\tfrom @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXZWCStage lx\r\n\t\twhere LTRIM(lx.Pmdl4w1InterstRiskIdNo2)<>''\r\n\t\tand lx.Pmdl4w1SegmentPartCode = 'x'\r\n\t\tand lx.Pmdl4w1SplitRateSeq in ( \r\n\t\tselect MAX(Pmdl4w1SplitRateSeq) from @{pipeline().parameters.SOURCE_TABLE_OWNER}.Pif43LXZWCStage a\r\n\t\twhere lx.PifSymbol = a.PifSymbol\r\n\t\tand lx.PifPolicyNumber = a.PifPolicyNumber\r\n\t\tand lx.PifModule = a.PifModule\r\n\t\tand LTRIM(a.Pmdl4w1InterstRiskIdNo2) <> ''\r\n\t\tand lx.Pmdl4w1SegmentPartCode = 'x')\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolKey ORDER BY Pmdl4w1InterstRiskIdNo2) = 1\n),\nLKP_PolicyCoverage AS (\n\tSELECT\n\tPolicyCoverageAKID,\n\tCurrentSnapshotFlag,\n\tPolicyCoverageID,\n\tRatingPlanAKId,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tPolicyCoverageHashKey\n\tFROM (\n\t\tSELECT PolicyCoverageID    AS PolicyCoverageID,\r\n\t\tPOLCOV.PolicyCoverageAKID AS PolicyCoverageAKID,\r\n\t\tPOLCOV.CurrentSnapshotFlag AS CurrentSnapshotFlag,\r\n\t\t       \t      PolicyCoverageHashKey AS PolicyCoverageHashKey,\r\n\t\t                   RatingPlanAKId as RatingPlanAKId,\r\n\t\t       \t      AuditableIndicator as AuditableIndicator, \r\n\t\t       \t      RiskGradeCode as RiskGradeCode, \r\n\t\t\tPOLCOV.InterstateRiskId as InterstateRiskId,\r\n\t\t\t\t\tPolicyLimitAKId AS PolicyLimitAKId,\r\n\t\t\t\t\tPriorCoverageId AS PriorCoverageId\r\n\t\tFROM\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.RiskLocation LOC \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V2}.Policy POL\r\n\t\t         ON LOC.PolicyAKID = POL.pol_ak_id \r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage POLCOV\r\n\t\tON LOC.RiskLocationAKID = POLCOV.RiskLocationAKID\r\n\t\tWHERE  POL.crrnt_snpsht_flag = 1\r\n\t\t       AND LOC.CurrentSnapshotFlag = 1\r\n\t\t       AND POL.SOURCE_SYS_ID = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t       AND  EXISTS  (SELECT DISTINCT PolicyKey FROM  \t\t\t\t\t\t\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.WorkPolicyKeyList\r\n\t\t\t\t\t\t\t\t\tWHERE POL.pol_key = PolicyKey AND @{pipeline().parameters.WHERE_CLAUSE_EDW})\r\n\t\tORDER BY PolicyCoverageHashKey,POLCOV.CurrentSnapshotFlag\r\n\t\t--\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyCoverageHashKey ORDER BY PolicyCoverageAKID DESC) = 1\n),\nLKP_PolicyLimit AS (\n\tSELECT\n\tPolicyLimitAKId,\n\tPolicyAKId,\n\tInsuranceLine\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyLimitAKId,\n\t\t\tPolicyAKId,\n\t\t\tInsuranceLine\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyLimit\n\t\tWHERE CurrentSnapshotFlag=1 AND SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PolicyAKId,InsuranceLine ORDER BY PolicyLimitAKId) = 1\n),\nLKP_PriorCoverage AS (\n\tSELECT\n\tPriorCoverageId,\n\tPriorCarrierName,\n\tPriorPolicyKey,\n\tPriorInsuranceLine\n\tFROM (\n\t\tselect priorCoverageID as priorCoverageID ,\r\n\t\tPriorCarrierName as PriorCarrierName,\r\n\t\tPriorPolicyKey as PriorPolicyKey,\r\n\t\tPriorInsuranceLine as PriorInsuranceLine\r\n\t\tfrom @{pipeline().parameters.TARGET_TABLE_OWNER}.PriorCoverage where sourceSystemId='PMS'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PriorCarrierName,PriorPolicyKey,PriorInsuranceLine ORDER BY PriorCoverageId) = 1\n),\nLKP_RatingPlan AS (\n\tSELECT\n\tRatingPlanAKId,\n\tRatingPlanDescription\n\tFROM (\n\t\tSELECT \n\t\t\tRatingPlanAKId,\n\t\t\tRatingPlanDescription\n\t\tFROM RatingPlan\n\t\tWHERE CurrentSnapshotFlag=1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RatingPlanDescription ORDER BY RatingPlanAKId) = 1\n),\nLKP_SupInsuranceLine_SupInsLineId AS (\n\tSELECT\n\tsup_ins_line_id,\n\tins_line_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_ins_line_id,\n\t\t\tins_line_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_insurance_line\n\t\tWHERE source_sys_id = '@{pipeline().parameters.MERGED_SOURCE_SYSTEM_ID}' AND crrnt_snpsht_flag = 1\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY ins_line_code ORDER BY sup_ins_line_id) = 1\n),\nLKP_SupTypeBureauCode_SupTypeBureauCodeId AS (\n\tSELECT\n\tsup_type_bureau_code_id,\n\ttype_bureau_code\n\tFROM (\n\t\tSELECT \n\t\t\tsup_type_bureau_code_id,\n\t\t\ttype_bureau_code\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.sup_type_bureau_code\n\t\tWHERE crrnt_snpsht_flag=1 AND source_sys_id = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY type_bureau_code ORDER BY sup_type_bureau_code_id) = 1\n),\nEXP_GetDefaultValue AS (\n\tSELECT\n\tLKP_PolicyCoverage.CurrentSnapshotFlag AS LKP_CurrentSnapshotFlag,\n\t-- *INF*: Decode(LKP_CurrentSnapshotFlag,'T','1','F','0',LKP_CurrentSnapshotFlag)\n\tDecode(LKP_CurrentSnapshotFlag,\n\t'T', '1',\n\t'F', '0',\n\tLKP_CurrentSnapshotFlag) AS v_LKP_CurrentSnapshotFlag,\n\tLKP_PolicyCoverage.PolicyCoverageAKID AS LKP_PolicyCoverageAKID,\n\tLKP_PolicyCoverage.PolicyCoverageID AS in_PolicyCoverageID,\n\tLKP_PolicyCoverage.RatingPlanAKId AS in_RatingPlanAKId,\n\tLKP_PolicyCoverage.AuditableIndicator AS in_AuditableIndicator,\n\tLKP_PolicyCoverage.RiskGradeCode AS in_RiskGradeCode,\n\tLKP_PolicyCoverage.InterstateRiskId AS in_InterstateRiskId,\n\tLKP_PolicyCoverage.PolicyLimitAKId AS in_PolicyLimitAKId,\n\tLKP_PolicyCoverage.PriorCoverageId AS in_PriorCoverageId,\n\tLKP_Pif43LXZWCStage.Pmdl4w1InterstRiskIdNo2 AS in_Pmdl4w1InterstRiskIdNo2,\n\tLKP_Pif43LXZWCStage.Pmdl4w1InterstRiskFiller AS in_Pmdl4w1InterstRiskFiller,\n\tEXP_GetAKIDs.LogicalIndicator,\n\tEXP_GetAKIDs.pif_line_business AS in_pif_line_business,\n\tEXP_GetAKIDs.out_PolicyCoverageHashKey AS PolicyCoverageHashKey,\n\tEXP_GetAKIDs.PolicyAKID,\n\tEXP_GetAKIDs.RiskLocationAKID,\n\tEXP_GetAKIDs.out_PolicyCoverageKey AS PolicyCoverageKey,\n\tEXP_GetAKIDs.out_InsuranceLine AS InsuranceLine,\n\tEXP_GetAKIDs.out_TypeBureauCode AS TypeBureauCode,\n\tEXP_GetAKIDs.out_PolicyCoverageEffectiveDate AS PolicyCoverageEffectiveDate,\n\tEXP_GetAKIDs.out_PolicyCoverageExpirationDate AS PolicyCoverageExpirationDate,\n\tEXP_GetAKIDs.out_AuditableIndicator AS AuditableIndicator,\n\tEXP_GetAKIDs.out_RiskGradeCode AS RiskGradeCode,\n\tLKP_SupInsuranceLine_SupInsLineId.sup_ins_line_id AS in_sup_ins_line_id,\n\tLKP_SupTypeBureauCode_SupTypeBureauCodeId.sup_type_bureau_code_id AS in_sup_type_bureau_code_id,\n\tLKP_PolicyLimit.PolicyLimitAKId AS lkp_PolicyLimitAKId,\n\tLKP_PriorCoverage.PriorCoverageId AS lkp_PriorCoverageId,\n\tLKP_RatingPlan.RatingPlanAKId AS lkp_RatingPlanAKId,\n\t-- *INF*: IIF(ISNULL(lkp_RatingPlanAKId),-1, lkp_RatingPlanAKId)\n\tIFF(lkp_RatingPlanAKId IS NULL, - 1, lkp_RatingPlanAKId) AS v_RatingPlanAKId,\n\t-- *INF*: DECODE(in_AuditableIndicator,\r\n\t-- 'T',\r\n\t-- '1',\r\n\t-- 'F',\r\n\t-- '0',\r\n\t-- NULL)\n\tDECODE(in_AuditableIndicator,\n\t'T', '1',\n\t'F', '0',\n\tNULL) AS v_LKP_AuditableIndicator,\n\t-- *INF*: IIF(\r\n\t-- ISNULL(in_Pmdl4w1InterstRiskIdNo2) OR ISNULL(in_Pmdl4w1InterstRiskFiller) OR NOT IN(in_pif_line_business,'WC','WCP'),'N/A',\r\n\t-- in_Pmdl4w1InterstRiskIdNo2 || in_Pmdl4w1InterstRiskFiller\r\n\t-- )\n\tIFF(in_Pmdl4w1InterstRiskIdNo2 IS NULL OR in_Pmdl4w1InterstRiskFiller IS NULL OR NOT IN(in_pif_line_business, 'WC', 'WCP'), 'N/A', in_Pmdl4w1InterstRiskIdNo2 || in_Pmdl4w1InterstRiskFiller) AS v_InterstateRiskId,\n\t-- *INF*: IIF(ISNULL(in_sup_ins_line_id), -1, in_sup_ins_line_id)\n\tIFF(in_sup_ins_line_id IS NULL, - 1, in_sup_ins_line_id) AS out_sup_ins_line_id,\n\t-- *INF*: IIF(ISNULL(in_sup_type_bureau_code_id), -1, in_sup_type_bureau_code_id)\n\tIFF(in_sup_type_bureau_code_id IS NULL, - 1, in_sup_type_bureau_code_id) AS out_sup_type_bureau_code_id,\n\tin_PolicyCoverageID AS LKP_PolicyCoverageID,\n\tv_RatingPlanAKId AS o_RatingPlanAKId,\n\tv_InterstateRiskId AS o_InterstateRiskId,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- ISNULL(in_PolicyCoverageID),\r\n\t-- 'NEW',v_LKP_CurrentSnapshotFlag='0' or in_RatingPlanAKId != v_RatingPlanAKId OR v_LKP_AuditableIndicator != AuditableIndicator OR in_RiskGradeCode != RiskGradeCode OR in_InterstateRiskId != v_InterstateRiskId OR in_PolicyLimitAKId != lkp_PolicyLimitAKId OR in_PriorCoverageId != lkp_PriorCoverageId,\r\n\t-- 'UPDATE',\r\n\t-- 'NOCHANGE')\n\tDECODE(TRUE,\n\tin_PolicyCoverageID IS NULL, 'NEW',\n\tv_LKP_CurrentSnapshotFlag = '0' OR in_RatingPlanAKId != v_RatingPlanAKId OR v_LKP_AuditableIndicator != AuditableIndicator OR in_RiskGradeCode != RiskGradeCode OR in_InterstateRiskId != v_InterstateRiskId OR in_PolicyLimitAKId != lkp_PolicyLimitAKId OR in_PriorCoverageId != lkp_PriorCoverageId, 'UPDATE',\n\t'NOCHANGE') AS o_ChangeFlag,\n\tlkp_PolicyLimitAKId AS o_PolicyLimitAKId,\n\tlkp_PriorCoverageId AS o_PriorCoverageId\n\tFROM EXP_GetAKIDs\n\tLEFT JOIN LKP_Pif43LXZWCStage\n\tON LKP_Pif43LXZWCStage.PolKey = EXP_GetAKIDs.PolKey\n\tLEFT JOIN LKP_PolicyCoverage\n\tON LKP_PolicyCoverage.PolicyCoverageHashKey = EXP_GetAKIDs.out_PolicyCoverageHashKey\n\tLEFT JOIN LKP_PolicyLimit\n\tON LKP_PolicyLimit.PolicyAKId = EXP_GetAKIDs.PolicyAKID AND LKP_PolicyLimit.InsuranceLine = EXP_GetAKIDs.out_InsuranceLine\n\tLEFT JOIN LKP_PriorCoverage\n\tON LKP_PriorCoverage.PriorCarrierName = EXP_GetAKIDs.PriorCarrierName AND LKP_PriorCoverage.PriorPolicyKey = EXP_GetAKIDs.PriorPolicyKey AND LKP_PriorCoverage.PriorInsuranceLine = EXP_GetAKIDs.PriorInsuranceLine\n\tLEFT JOIN LKP_RatingPlan\n\tON LKP_RatingPlan.RatingPlanDescription = EXP_GetAKIDs.RatingPlanDescription\n\tLEFT JOIN LKP_SupInsuranceLine_SupInsLineId\n\tON LKP_SupInsuranceLine_SupInsLineId.ins_line_code = EXP_GetAKIDs.out_InsuranceLine\n\tLEFT JOIN LKP_SupTypeBureauCode_SupTypeBureauCodeId\n\tON LKP_SupTypeBureauCode_SupTypeBureauCodeId.type_bureau_code = EXP_GetAKIDs.out_TypeBureauCode\n),\nEXP_GetMetaValues AS (\n\tSELECT\n\tLKP_PolicyCoverageAKID,\n\tLogicalIndicator,\n\tPolicyCoverageHashKey,\n\tPolicyAKID,\n\tRiskLocationAKID,\n\tPolicyCoverageKey,\n\tInsuranceLine,\n\tTypeBureauCode,\n\tPolicyCoverageEffectiveDate,\n\tPolicyCoverageExpirationDate,\n\tout_sup_ins_line_id AS sup_ins_line_id,\n\tout_sup_type_bureau_code_id AS sup_type_bureau_code_id,\n\to_RatingPlanAKId AS RatingPlanAKId,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tLKP_PolicyCoverageID,\n\to_InterstateRiskId AS InterstateRiskId,\n\to_ChangeFlag AS ChangeFlag,\n\t1 AS out_CurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS out_AuditID,\n\t-- *INF*: TO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('01/01/1800 00:00:00', 'MM/DD/YYYY HH24:MI:SS') AS out_EffectiveDate,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS out_ExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS out_SourceSystemID,\n\tSYSDATE AS out_CreateDate,\n\tSYSDATE AS out_ModifiedDate,\n\to_PolicyLimitAKId,\n\to_PriorCoverageId,\n\t0 AS o_CustomerCareCommissionRate\n\tFROM EXP_GetDefaultValue\n),\nRTR_PolicyCoverage AS (\n\tSELECT\n\tLKP_PolicyCoverageAKID,\n\tLKP_PolicyCoverageID,\n\tChangeFlag,\n\tout_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\tout_AuditID AS AuditID,\n\tout_EffectiveDate AS EffectiveDate,\n\tout_ExpirationDate AS ExpirationDate,\n\tout_SourceSystemID AS SourceSystemID,\n\tout_CreateDate AS CreateDate,\n\tout_ModifiedDate AS ModifiedDate,\n\tLogicalIndicator,\n\tPolicyCoverageHashKey,\n\tPolicyAKID,\n\tRiskLocationAKID,\n\tPolicyCoverageKey,\n\tInsuranceLine,\n\tTypeBureauCode,\n\tPolicyCoverageEffectiveDate,\n\tPolicyCoverageExpirationDate,\n\tsup_ins_line_id,\n\tsup_type_bureau_code_id,\n\tRatingPlanAKId,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\to_PolicyLimitAKId AS PolicyLimitAKId,\n\to_PriorCoverageId AS PriorCoverageId,\n\to_CustomerCareCommissionRate AS CustomerCareCommissionRate\n\tFROM EXP_GetMetaValues\n),\nRTR_PolicyCoverage_NEW AS (SELECT * FROM RTR_PolicyCoverage WHERE ChangeFlag='NEW'),\nRTR_PolicyCoverage_UPDATE AS (SELECT * FROM RTR_PolicyCoverage WHERE ChangeFlag='UPDATE'),\nSEQ_PolicyCoverageAKID AS (\n\tCREATE SEQUENCE SEQ_PolicyCoverageAKID\n\tSTART = 0\n\tINCREMENT = 1;\n),\nEXP_TGT_DataCollect AS (\n\tSELECT\n\tLKP_PolicyCoverageAKID,\n\tCurrentSnapshotFlag,\n\tAuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\tSourceSystemID,\n\tCreateDate,\n\tModifiedDate,\n\tLogicalIndicator,\n\tPolicyCoverageHashKey,\n\t-- *INF*: IIF(ISNULL(LKP_PolicyCoverageAKID),NEXTVAL,LKP_PolicyCoverageAKID)\n\tIFF(LKP_PolicyCoverageAKID IS NULL, NEXTVAL, LKP_PolicyCoverageAKID) AS PolicyCoverageAKID,\n\tPolicyAKID,\n\tRiskLocationAKID,\n\tPolicyCoverageKey,\n\tInsuranceLine,\n\tTypeBureauCode,\n\tPolicyCoverageEffectiveDate,\n\tPolicyCoverageExpirationDate,\n\tsup_ins_line_id,\n\tsup_type_bureau_code_id,\n\tRatingPlanAKId,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\tCustomerCareCommissionRate,\n\tSEQ_PolicyCoverageAKID.NEXTVAL\n\tFROM RTR_PolicyCoverage_NEW\n),\nTGT_PolicyCoverage_New_Insert AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemID, CreatedDate, ModifiedDate, LogicalIndicator, PolicyCoverageHashKey, PolicyCoverageAKID, PolicyAKID, RiskLocationAKID, PolicyCoverageKey, InsuranceLine, TypeBureauCode, PolicyCoverageEffectiveDate, PolicyCoverageExpirationDate, SupInsuranceLineId, SupTypeBureauCodeId, RatingPlanAKId, AuditableIndicator, RiskGradeCode, InterstateRiskId, PolicyLimitAKId, PriorCoverageId, CustomerCareCommissionRate)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCreateDate AS CREATEDDATE, \n\tMODIFIEDDATE, \n\tLOGICALINDICATOR, \n\tPOLICYCOVERAGEHASHKEY, \n\tPOLICYCOVERAGEAKID, \n\tPOLICYAKID, \n\tRISKLOCATIONAKID, \n\tPOLICYCOVERAGEKEY, \n\tINSURANCELINE, \n\tTYPEBUREAUCODE, \n\tPOLICYCOVERAGEEFFECTIVEDATE, \n\tPOLICYCOVERAGEEXPIRATIONDATE, \n\tsup_ins_line_id AS SUPINSURANCELINEID, \n\tsup_type_bureau_code_id AS SUPTYPEBUREAUCODEID, \n\tRATINGPLANAKID, \n\tAUDITABLEINDICATOR, \n\tRISKGRADECODE, \n\tINTERSTATERISKID, \n\tPOLICYLIMITAKID, \n\tPRIORCOVERAGEID, \n\tCUSTOMERCARECOMMISSIONRATE\n\tFROM EXP_TGT_DataCollect\n),\nEXP_Update_DataCollect AS (\n\tSELECT\n\tLKP_PolicyCoverageID,\n\tModifiedDate,\n\tRatingPlanAKId,\n\tAuditableIndicator,\n\tRiskGradeCode,\n\tInterstateRiskId,\n\tPolicyLimitAKId,\n\tPriorCoverageId,\n\t'1' AS CurrentSnapshotFlag,\n\t-- *INF*: TO_DATE('12/31/2100 23:59:59' , 'MM/DD/YYYY HH24:MI:SS')\n\tTO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS ExpirationDate\n\tFROM RTR_PolicyCoverage_UPDATE\n),\nUPD_Existing AS (\n\tSELECT\n\tLKP_PolicyCoverageID, \n\tModifiedDate, \n\tRatingPlanAKId, \n\tAuditableIndicator, \n\tRiskGradeCode, \n\tInterstateRiskId, \n\tPolicyLimitAKId, \n\tPriorCoverageId, \n\tCurrentSnapshotFlag, \n\tExpirationDate\n\tFROM EXP_Update_DataCollect\n),\nTGT_PolicyCoverage_Update AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCoverage AS T\n\tUSING UPD_Existing AS S\n\tON T.PolicyCoverageID = S.LKP_PolicyCoverageID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.CurrentSnapshotFlag = S.CurrentSnapshotFlag, T.ExpirationDate = S.ExpirationDate, T.ModifiedDate = S.ModifiedDate, T.RatingPlanAKId = S.RatingPlanAKId, T.AuditableIndicator = S.AuditableIndicator, T.RiskGradeCode = S.RiskGradeCode, T.InterstateRiskId = S.InterstateRiskId, T.PolicyLimitAKId = S.PolicyLimitAKId, T.PriorCoverageId = S.PriorCoverageId\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "246483"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "905516"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7604217"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "08/30/2023 01:21:59"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/31/2023 01:54:57"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Stage_Policy"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Policy"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Stage"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "JOIN_CONDITION": {
                "type": "string",
                "defaultValue": "INNER JOIN"
            },
            "TARGET_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "V2"
            },
            "SOURCE_TABLE_NAME_4514": {
                "type": "string",
                "defaultValue": "pif_4514_stage"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "PMS"
            },
            "WHERE_CLAUSE": {
                "type": "string",
                "defaultValue": "AND 1=1"
            },
            "WHERE_CLAUSE_EDW": {
                "type": "string",
                "defaultValue": "1=1"
            },
            "MERGED_SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "EXCEED AND PMS"
            },
            "SOURCE_TABLE_NAME_02": {
                "type": "string",
                "defaultValue": "pif_02_stage"
            },
            "SOURCE_TABLE_NAME": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataWarehouse/"
        },
        "annotations": []
    }
}