{
    "name": "s_m_FEED_Load_WCSTAT_WorkWCSTATPremium_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_FEED_Load_WCSTAT_WorkWCSTATPremium_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nLKP_PremiumTransaction_pol_ak_id AS (\n\tSELECT\n\tpol_ak_id\n\tFROM (\n\t\tSELECT DISTINCT  P.pol_ak_id AS pol_ak_id\r\n\t\t   from @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction PT\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage RC\r\n\t\ton RC.RatingCoverageAKID=PT.RatingCoverageAKId\r\n\t\tand RC.EffectiveDate=PT.EffectiveDate and PT.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage PC\r\n\t\ton PC.PolicyCoverageAKID=RC.PolicyCoverageAKID\r\n\t\tand PC.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation RL\r\n\t\ton PC.RiskLocationAKID=RL.RiskLocationAKID\r\n\t\tand RL.CurrentSnapshotFlag=1\r\n\t\t\r\n\t\tinner join @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy P\r\n\t\ton P.pol_ak_id=RL.PolicyAKID \r\n\t\tand P.crrnt_snpsht_flag=1 \r\n\t\t\r\n\t\twhere RC.SourceSystemID='DCT' and PC.TypeBureauCode in ('WC','WP','WorkersCompensation')  and PT.PremiumType='D'\r\n\t\tand PT.ReasonAmendedCode NOT IN ('CWO','Claw Back')\r\n\t\tand DATEDIFF(MM,P.pol_eff_date, DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}, 0) )  > 18\r\n\t\tand PT.PremiumTransactionBookedDate>=DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}, 0)\r\n\t\tand PT.PremiumTransactionBookedDate<DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}+1, 0)\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_ak_id ORDER BY pol_ak_id) = 1\n),\nSQ_Premium_DCT AS (\n\tDECLARE @startdate as datetime, \r\n\t        @enddate as datetime\r\n\t\r\n\tSET @startdate = DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) +@{pipeline().parameters.NUM_OF_MONTHS}+1-18, 0) \r\n\tSET @enddate =  DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) + @{pipeline().parameters.NUM_OF_MONTHS}+1, 0)\r\n\t\r\n\t--DCT\r\n\tselect \r\n\t'DCT' SourceSystem\r\n\t,PremiumTransaction.PremiumTransactionID\r\n\t,PremiumTransaction.PremiumTransactionBookedDate\r\n\t,'01-01-1800 00:00:00' as StateRatingEffectiveDate\r\n\t,case when RPDT.RatingPlanCode='2' then '1' else '0' end as WCRetrospectiveRatingIndicator\r\n\t,PremiumTransaction.ExperienceModificationFactor\r\n\t,PremiumTransaction.ExperienceModificationEffectiveDate\r\n\t,PremiumTransaction.PremiumTransactionAmount\r\n\t,CASE WHEN (RatingCoverage.CoverageType = 'ManualPremium')  OR (RatingCoverage.ClassCode in ('0771', '7445', '7453', '9046','9108')) THEN PremiumTransaction.BaseRate ELSE 0 END as BaseRate\r\n\t,PolicyCoverage.TypeBureauCode\r\n\t,'' AS pol_sym\r\n\t,policy.pol_num\r\n\t,policy.pol_mod\r\n\t,policy.pol_key\r\n\t,RatingCoverage.CoverageType\r\n\t,PremiumTransaction.PremiumTransactionCode\r\n\t,RatingCoverage.CoverageGUID\r\n\t,RatingCoverage.RatingCoverageAKID\r\n\t, CoverageDetailWorkersCompensation.TermStartDate\r\n\t, CoverageDetailWorkersCompensation.TermEndDate\r\n\t, CoverageDetailWorkersCompensation.ARDIndicatorFlag\r\n\t , CoverageDetailWorkersCompensation.ExperienceRatedFlag\r\n\t , CoverageDetailWorkersCompensation.TermType\r\n\t,RiskLocation.StateProvinceCode\r\n\t,policy.pol_eff_date\r\n\t,policy.pol_exp_date\r\n\t,policy.pol_cancellation_date\r\n\t,policy.pol_cancellation_ind\r\n\t,PolicyCoverage.InterstateRiskId\r\n\t,policy.pol_id\r\n\t,contract_customer.fed_tax_id\r\n\t,policy.pol_term\r\n\t,policy.pol_ak_id\r\n\t--,PolicyCoverage.AuditableIndicator\r\n\t,InsuranceSegment.InsuranceSegmentAbbreviation\r\n\t,contract_customer.cust_role\r\n\t,contract_customer.name\r\n\t,contract_customer_address.addr_line_1\r\n\t,contract_customer_address.city_name\r\n\t,contract_customer_address.state_prov_code\r\n\t,contract_customer_address.zip_postal_code\r\n\t,RatingCoverage.ClassCode\r\n\t--,RatingCoverage.Exposure\r\n\t,PremiumTransaction.WrittenExposure\r\n\t,PremiumTransaction.DeductibleAmount\r\n\t,PolicyCoverage.InsuranceLine\r\n\t--,SUM(PremiumTransaction.PremiumTransactionamount) OVER (PARTITION BY policy.pol_key) as PolicyPremiumTotal\r\n\t--,SUM(CASE WHEN RatingCoverage.CoverageType = 'ManualPremium' THEN 1 ELSE 0 END)  OVER (PARTITION BY policy.pol_key,RiskLocation.StateProvinceCode) as ManualPremiumInd\r\n\t--,SUM(CASE WHEN RatingCoverage.CoverageType = 'ManualPremium' THEN PremiumTransaction.PremiumTransactionamount ELSE 0 END) OVER (PARTITION BY policy.pol_key,RiskLocation.StateProvinceCode) as PolicyStateManualPremiumTotal\r\n\t,99999999 as BalMinPremiumTotal\r\n\t,PremiumTransaction.ReasonAmendedCode\r\n\t,StrategicProfitCenter.StrategicProfitCenterAbbreviation\r\n\t,policy.pol_status_code\r\n\t,PremiumTransaction.PremiumTransactionEnteredDate\r\n\t,PremiumTransaction.OffsetOnsetCode\r\n\t,PremiumTransaction.PremiumTransactionEffectiveDate\r\n\t,CASE WHEN PremiumTransaction.DeductibleAmount <> 0 THEN MAX(CoverageDetailWorkersCompensation.DeductibleType) OVER (PARTITION BY policy.pol_key, RiskLocation.StateProvinceCode) ELSE '00' END AS DeductibleType\r\n\t,CASE WHEN PremiumTransaction.DeductibleAmount <> 0 THEN MAX(CoverageDetailWorkersCompensation.DeductibleBasis) OVER (PARTITION BY policy.pol_key, RiskLocation.StateProvinceCode) ELSE '00' END AS DeductibleBasis\r\n\tfrom     @{pipeline().parameters.SOURCE_TABLE_OWNER}.PremiumTransaction\r\n\t \r\n\t inner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingCoverage\r\n\ton RatingCoverage.RatingCoverageAKID=PremiumTransaction.RatingCoverageAKId\r\n\tand RatingCoverage.EffectiveDate=PremiumTransaction.EffectiveDate and PremiumTransaction.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.PolicyCoverage\r\n\ton PolicyCoverage.PolicyCoverageAKID=RatingCoverage.PolicyCoverageAKID\r\n\tand PolicyCoverage.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.RiskLocation\r\n\ton PolicyCoverage.RiskLocationAKID=RiskLocation.RiskLocationAKID\r\n\tand RiskLocation.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join  @{pipeline().parameters.SOURCE_TABLE_OWNER_V2}.policy\r\n\ton policy.pol_ak_id=RiskLocation.PolicyAKID\r\n\tand policy.crrnt_snpsht_flag=1 \r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.StrategicProfitCenter\r\n\ton policy.StrategicProfitCenterAKId=StrategicProfitCenter.StrategicProfitCenterAKId\r\n\tand StrategicProfitCenter.CurrentSnapshotFlag=1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer\r\n\tON contract_customer.contract_cust_ak_id = policy.contract_cust_ak_id and contract_customer.crrnt_snpsht_flag = 1\r\n\t\r\n\tinner join        @{pipeline().parameters.SOURCE_TABLE_OWNER}.contract_customer_address\r\n\tON contract_customer_address.contract_cust_ak_id = contract_customer.contract_cust_ak_id and contract_customer_address.crrnt_snpsht_flag = 1\r\n\t\r\n\tleft join         @{pipeline().parameters.SOURCE_TABLE_OWNER}.InsuranceSegment\r\n\tON InsuranceSegment.InsuranceSegmentAKId = policy.InsuranceSegmentAKId and InsuranceSegment.CurrentSnapshotFlag = 1\r\n\t\r\n\tleft join         @{pipeline().parameters.SOURCE_TABLE_OWNER}.RatingPlan RPDT\r\n\tON PolicyCoverage.RatingPlanAKId=RPDT.RatingPlanAKId and RPDT.CurrentSnapshotFlag=1\r\n\t\r\n\tLEFT JOIN   @{pipeline().parameters.SOURCE_TABLE_OWNER}.CoverageDetailWorkersCompensation \r\n\tON  CoverageDetailWorkersCompensation.PremiumTransactionID=PremiumTransaction.PremiumTransactionID\r\n\t\r\n\twhere  RatingCoverage.SourceSystemID='DCT' and PolicyCoverage.TypeBureauCode in ('WC','WP','WorkersCompensation')   \r\n\tand PremiumTransaction.PremiumType='D' \r\n\tand PremiumTransaction.ReasonAmendedCode NOT IN ('CWO','Claw Back')\r\n\tand policy.pol_eff_date<@startdate\r\n\tand PremiumTransaction.PremiumTransactionBookedDate<@enddate\r\n\t@{pipeline().parameters.PREMIUM_WHERE_CLAUSE_DCT}\n),\nEXP_identify_records_Wc_stat AS (\n\tSELECT\n\tSourceSystem,\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPremiumMasterPremium,\n\tBaseRate,\n\tTypeBureauCode,\n\tpol_sym,\n\tpol_num,\n\tpol_mod,\n\tStateProvinceCode,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tpol_cancellation_ind,\n\tInterstateRiskId,\n\tpol_id,\n\tfed_tax_id,\n\tpol_term,\n\tpol_ak_id,\n\tInsuranceSegmentAbbreviation,\n\tcust_role,\n\tname,\n\taddr_line_1,\n\tcity_name,\n\tstate_prov_code,\n\tzip_postal_code,\n\tClassCode,\n\tWrittenExposure AS Exposure,\n\tDeductibleAmount,\n\tInsuranceLine,\n\t-- *INF*: :LKP.LKP_PREMIUMTRANSACTION_POL_AK_ID(pol_ak_id)\n\tLKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id.pol_ak_id AS lkp_pol_ak_id,\n\t-- *INF*: SET_DATE_PART(ADD_TO_DATE(TRUNC(SYSDATE),'MM',@{pipeline().parameters.NUM_OF_MONTHS}),'DD',1)\n\tDATEADD(DAY,1-DATE_PART(DAY,DATEADD(MONTH,@{pipeline().parameters.NUM_OF_MONTHS},TRUNC(CURRENT_TIMESTAMP))),DATEADD(MONTH,@{pipeline().parameters.NUM_OF_MONTHS},TRUNC(CURRENT_TIMESTAMP))) AS v_ProcessRunDate,\n\t-- *INF*: SET_DATE_PART(pol_eff_date,'DD',1)\n\tDATEADD(DAY,1-DATE_PART(DAY,pol_eff_date),pol_eff_date) AS v_BeginingOfMonthForPolicyEffectiveDate,\n\t-- *INF*: LAST_DAY(pol_eff_date)\n\tLAST_DAY(pol_eff_date) AS v_EndOfMonthForPolicyEffectiveDate,\n\t-- *INF*: DATE_DIFF(v_ProcessRunDate,v_BeginingOfMonthForPolicyEffectiveDate,'MM')\n\tDATEDIFF(MONTH,v_ProcessRunDate,v_BeginingOfMonthForPolicyEffectiveDate) AS v_AgeOfPolicy,\n\t-- *INF*: IIF(v_AgeOfPolicy =18 OR NOT ISNULL(lkp_pol_ak_id),'VALID','INVALID')\r\n\t-- \r\n\t-- --IIF(v_AgeOfPolicy =18 OR (v_AgeOfPolicy > 18 and PremiumMasterRunDate>= v_ProcessRunDate),'VALID','INVALID')\n\tIFF(v_AgeOfPolicy = 18 OR lkp_pol_ak_id IS NOT NULL, 'VALID', 'INVALID') AS o_ValidRecordForWCSTat,\n\t-- *INF*: IIF(DATE_DIFF(v_ProcessRunDate,PremiumMasterRunDate,'MM')=0,1,0)\n\tIFF(DATEDIFF(MONTH,v_ProcessRunDate,PremiumMasterRunDate) = 0, 1, 0) AS o_RunMonthAuditTransFlag,\n\tv_AgeOfPolicy AS o_AgeOfPolicy,\n\tBalMinPremiumTotal,\n\tReasonAmendedCode,\n\tStrategicProfitCenterAbbreviation,\n\tpol_status_code,\n\tPremiumTransactionEnteredDate,\n\tOffsetOnsetCode,\n\tpol_key,\n\tCoverageType,\n\tPremiumTransactionCode,\n\tCoverageGUID,\n\tRatingCoverageAKID,\n\tPeriod_start_date,\n\tPeriod_end_date,\n\tAnyARDIndicator,\n\tExperienceRated,\n\tTermType,\n\t-- *INF*: IIF(NOT ISNULL(Period_start_date),Period_start_date,pol_eff_date)\r\n\t-- \r\n\t-- \r\n\t-- \r\n\t-- --DECODE(True,NOT ISNULL(Period_start_date), Period_start_date, pol_eff_date)\n\tIFF(Period_start_date IS NOT NULL, Period_start_date, pol_eff_date) AS RateEffectiveDate,\n\tPremiumTransactionEffectiveDate,\n\tDeductibleType,\n\tDeductibleBasis\n\tFROM SQ_Premium_DCT\n\tLEFT JOIN LKP_PREMIUMTRANSACTION_POL_AK_ID LKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id\n\tON LKP_PREMIUMTRANSACTION_POL_AK_ID_pol_ak_id.pol_ak_id = pol_ak_id\n\n),\nFIL_FIlterrecordsthatarenotvalid AS (\n\tSELECT\n\tSourceSystem, \n\tPremiumMasterCalculationID, \n\tPremiumMasterRunDate, \n\tStateRatingEffectiveDate, \n\tWCRetrospectiveRatingIndicator, \n\tExperienceModificationFactor, \n\tExperienceModificationEffectiveDate, \n\tPremiumMasterPremium, \n\tBaseRate, \n\tTypeBureauCode, \n\tpol_sym, \n\tpol_num, \n\tpol_mod, \n\tStateProvinceCode, \n\tpol_eff_date, \n\tpol_exp_date, \n\tpol_cancellation_date, \n\tpol_cancellation_ind, \n\tInterstateRiskId, \n\tpol_id, \n\tfed_tax_id, \n\tpol_term, \n\tpol_ak_id, \n\tInsuranceSegmentAbbreviation, \n\tcust_role, \n\tname, \n\taddr_line_1, \n\tcity_name, \n\tstate_prov_code, \n\tzip_postal_code, \n\tClassCode, \n\tExposure, \n\tDeductibleAmount, \n\tInsuranceLine, \n\to_ValidRecordForWCSTat, \n\to_RunMonthAuditTransFlag, \n\to_AgeOfPolicy, \n\tBalMinPremiumTotal, \n\tRateEffectiveDate, \n\tReasonAmendedCode, \n\tStrategicProfitCenterAbbreviation, \n\tpol_status_code, \n\tPremiumTransactionEnteredDate, \n\tOffsetOnsetCode, \n\tpol_key, \n\tCoverageType, \n\tPremiumTransactionCode, \n\tCoverageGUID, \n\tRatingCoverageAKID, \n\tPeriod_start_date, \n\tPeriod_end_date, \n\tAnyARDIndicator, \n\tExperienceRated, \n\tTermType, \n\tPremiumTransactionEffectiveDate, \n\tDeductibleType, \n\tDeductibleBasis\n\tFROM EXP_identify_records_Wc_stat\n\tWHERE IIF(o_ValidRecordForWCSTat='VALID',TRUE,FALSE)\n),\nEXP_Target_Load AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tSourceSystem,\n\tPremiumMasterCalculationID,\n\tPremiumMasterRunDate,\n\tStateRatingEffectiveDate,\n\tWCRetrospectiveRatingIndicator,\n\tExperienceModificationFactor,\n\tExperienceModificationEffectiveDate,\n\tPremiumMasterPremium,\n\tBaseRate,\n\tTypeBureauCode,\n\tpol_sym,\n\tpol_num,\n\tpol_mod,\n\tStateProvinceCode,\n\tpol_eff_date,\n\tpol_exp_date,\n\tpol_cancellation_date,\n\tpol_cancellation_ind,\n\tInterstateRiskId,\n\tpol_id,\n\tfed_tax_id,\n\tpol_term,\n\tpol_ak_id,\n\tInsuranceSegmentAbbreviation,\n\tcust_role,\n\tname,\n\taddr_line_1,\n\tcity_name,\n\tstate_prov_code,\n\tzip_postal_code,\n\tClassCode,\n\tExposure,\n\tDeductibleAmount,\n\tInsuranceLine,\n\to_ValidRecordForWCSTat,\n\tBalMinPremiumTotal,\n\tRateEffectiveDate,\n\t-- *INF*: iif(ISNULL(RateEffectiveDate),pol_eff_date,RateEffectiveDate)\n\tIFF(RateEffectiveDate IS NULL, pol_eff_date, RateEffectiveDate) AS o_RateEffectiveDate,\n\tReasonAmendedCode,\n\tStrategicProfitCenterAbbreviation,\n\tpol_status_code,\n\tPremiumTransactionEnteredDate,\n\tOffsetOnsetCode,\n\tpol_key,\n\tCoverageType,\n\tPremiumTransactionCode,\n\tCoverageGUID,\n\tRatingCoverageAKID,\n\to_RunMonthAuditTransFlag,\n\to_AgeOfPolicy,\n\tTermType,\n\t-- *INF*: IIF(ISNULL(TermType),'N/A',TermType)\n\tIFF(TermType IS NULL, 'N/A', TermType) AS o_TermType,\n\tPeriod_start_date,\n\t-- *INF*: iif(ISNULL(Period_start_date),pol_eff_date,Period_start_date)\n\tIFF(Period_start_date IS NULL, pol_eff_date, Period_start_date) AS o_Period_start_date,\n\tPeriod_end_date,\n\t-- *INF*: iif(ISNULL(Period_end_date),pol_exp_date,Period_end_date)\n\tIFF(Period_end_date IS NULL, pol_exp_date, Period_end_date) AS o_Period_end_date,\n\tAnyARDIndicator,\n\t-- *INF*: iif(ISNULL(AnyARDIndicator),'0',AnyARDIndicator)\n\tIFF(AnyARDIndicator IS NULL, '0', AnyARDIndicator) AS o_AnyARDIndicator,\n\tExperienceRated,\n\t-- *INF*: IIF(ISNULL(ExperienceRated),'0',ExperienceRated)\n\tIFF(ExperienceRated IS NULL, '0', ExperienceRated) AS o_ExperienceRated,\n\tPremiumTransactionEffectiveDate,\n\tDeductibleType,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DeductibleAmount != '0' AND StateProvinceCode = '14', '01',\r\n\t-- StateProvinceCode = '09' AND DeductibleAmount != '0' AND (DeductibleType = '00' OR ISNULL(DeductibleType)) , '03',\r\n\t-- ISNULL(DeductibleType), '00',\r\n\t-- DeductibleType)\r\n\t-- \r\n\t-- --IIF(ISNULL(DeductibleType), '00', DeductibleType)\n\tDECODE(\n\t    TRUE,\n\t    DeductibleAmount != '0' AND StateProvinceCode = '14', '01',\n\t    StateProvinceCode = '09' AND DeductibleAmount != '0' AND (DeductibleType = '00' OR DeductibleType IS NULL), '03',\n\t    DeductibleType IS NULL, '00',\n\t    DeductibleType\n\t) AS o_LossesSubjectToDeductibleCode,\n\tDeductibleBasis,\n\t-- *INF*: DECODE(TRUE,\r\n\t-- DeductibleAmount != '0' AND StateProvinceCode = '14', '01',\r\n\t-- StateProvinceCode = '09' AND DeductibleAmount != '0' AND (DeductibleBasis = '00' OR ISNULL(DeductibleBasis)), '01',\r\n\t-- ISNULL(DeductibleBasis), '00',\r\n\t-- DeductibleBasis)\r\n\t-- \r\n\t-- --IIF(ISNULL(DeductibleBasis), '00', DeductibleBasis)\n\tDECODE(\n\t    TRUE,\n\t    DeductibleAmount != '0' AND StateProvinceCode = '14', '01',\n\t    StateProvinceCode = '09' AND DeductibleAmount != '0' AND (DeductibleBasis = '00' OR DeductibleBasis IS NULL), '01',\n\t    DeductibleBasis IS NULL, '00',\n\t    DeductibleBasis\n\t) AS o_BasisOfDeductibleCalculationCode\n\tFROM FIL_FIlterrecordsthatarenotvalid\n),\nWorkWCSTATPremium AS (\n\n\t------------ PRE SQL ----------\n\t@{pipeline().parameters.DELETE_PRESQL}\n\t-------------------------------\n\n\n\tINSERT INTO WorkWCSTATPremium\n\t(AuditId, CreatedDate, ModifiedDate, SourceSystemId, PremiumMasterCalculationID, PremiumMasterRunDate, StateRatingEffectiveDate, WCRetrospectiveRatingIndicator, ExperienceModificationFactor, ExperienceModificationEffectiveDate, PremiumMasterPremium, BaseRate, TypeBureauCode, PolicySymbol, PolicyNumber, PolicyModulus, StateProvinceCode, PolicyEffectiveDate, PolicyExpiryDate, PolicyCancellationDate, PolicyCancellationIndicator, InterstateRiskId, FederalTaxId, PolicyTerm, PolicyAKId, InsuranceSegmentAbbreviation, CustomerRole, Name, AddressLine1, CityName, StateProvCodeContractCustomerAddress, ZipPostalCode, ClassCode, Exposure, DeductibleAmount, InsuranceLine, BalanceMinimumPremiumTotal, RateEffectiveDate, ReasonAmendedCode, StrategicProfitCenterAbbreviation, PolicyStatusCode, PremiumTransactionEnteredDate, OffsetOnsetCode, PolicyKey, CoverageType, PremiumTransactionCode, CoverageGUID, RatingCoverageAKID, RunMonthAuditTransactionFlag, AgeOfPolicy, TermType, PeriodStartDate, PeriodEndDate, AnyARDIndicator, ExperienceRated, PremiumTransactionEffectiveDate, LossesSubjectToDeductibleCode, BasisOfDeductibleCalculationCode)\n\tSELECT \n\tAUDITID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tSourceSystem AS SOURCESYSTEMID, \n\tPREMIUMMASTERCALCULATIONID, \n\tPREMIUMMASTERRUNDATE, \n\tSTATERATINGEFFECTIVEDATE, \n\tWCRETROSPECTIVERATINGINDICATOR, \n\tEXPERIENCEMODIFICATIONFACTOR, \n\tEXPERIENCEMODIFICATIONEFFECTIVEDATE, \n\tPREMIUMMASTERPREMIUM, \n\tBASERATE, \n\tTYPEBUREAUCODE, \n\tpol_sym AS POLICYSYMBOL, \n\tpol_num AS POLICYNUMBER, \n\tpol_mod AS POLICYMODULUS, \n\tSTATEPROVINCECODE, \n\tpol_eff_date AS POLICYEFFECTIVEDATE, \n\tpol_exp_date AS POLICYEXPIRYDATE, \n\tpol_cancellation_date AS POLICYCANCELLATIONDATE, \n\tpol_cancellation_ind AS POLICYCANCELLATIONINDICATOR, \n\tINTERSTATERISKID, \n\tfed_tax_id AS FEDERALTAXID, \n\tpol_term AS POLICYTERM, \n\tpol_ak_id AS POLICYAKID, \n\tINSURANCESEGMENTABBREVIATION, \n\tcust_role AS CUSTOMERROLE, \n\tname AS NAME, \n\taddr_line_1 AS ADDRESSLINE1, \n\tcity_name AS CITYNAME, \n\tstate_prov_code AS STATEPROVCODECONTRACTCUSTOMERADDRESS, \n\tzip_postal_code AS ZIPPOSTALCODE, \n\tCLASSCODE, \n\tEXPOSURE, \n\tDEDUCTIBLEAMOUNT, \n\tINSURANCELINE, \n\tBalMinPremiumTotal AS BALANCEMINIMUMPREMIUMTOTAL, \n\to_RateEffectiveDate AS RATEEFFECTIVEDATE, \n\tREASONAMENDEDCODE, \n\tSTRATEGICPROFITCENTERABBREVIATION, \n\tpol_status_code AS POLICYSTATUSCODE, \n\tPREMIUMTRANSACTIONENTEREDDATE, \n\tOFFSETONSETCODE, \n\tpol_key AS POLICYKEY, \n\tCOVERAGETYPE, \n\tPREMIUMTRANSACTIONCODE, \n\tCOVERAGEGUID, \n\tRATINGCOVERAGEAKID, \n\to_RunMonthAuditTransFlag AS RUNMONTHAUDITTRANSACTIONFLAG, \n\to_AgeOfPolicy AS AGEOFPOLICY, \n\to_TermType AS TERMTYPE, \n\to_Period_start_date AS PERIODSTARTDATE, \n\to_Period_end_date AS PERIODENDDATE, \n\to_AnyARDIndicator AS ANYARDINDICATOR, \n\to_ExperienceRated AS EXPERIENCERATED, \n\tPREMIUMTRANSACTIONEFFECTIVEDATE, \n\to_LossesSubjectToDeductibleCode AS LOSSESSUBJECTTODEDUCTIBLECODE, \n\to_BasisOfDeductibleCalculationCode AS BASISOFDEDUCTIBLECALCULATIONCODE\n\tFROM EXP_Target_Load\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_TABLE_OWNER_V2": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "NUM_OF_MONTHS": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "PREMIUM_WHERE_CLAUSE_DCT": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "DELETE_PRESQL": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "DataFeed -Informatica/PolicyDataServices/"
        },
        "annotations": []
    }
}