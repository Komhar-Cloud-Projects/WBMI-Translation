{
    "name": "s_m_POL_DW_LOAD_CoverageLimit_DCT",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DW_LOAD_CoverageLimit_DCT",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_DCLimitStaging AS (\n\tWITH PCoverage as (\r\n\tselect A.SessionId, A.ObjectId AS ObjectId, A.ObjectName AS ObjectName, A.coverageID as PCoverageid,A.CoverageId, A.Id AS CoverageGUID, A.Type as CoverageType, \r\n\tCASE WHEN A.ObjectName = 'DC_Line' THEN L.Type \r\n\tELSE \r\n\tCASE substring(A.ObjectName,4,3) \r\n\twhen 'CF_' then 'Property'\r\n\twhen 'GL_' then 'GeneralLiability'\r\n\twhen 'WC_' then 'WorkersCompensation'\r\n\twhen 'BP_' then 'BusinessOwners'\r\n\twhen 'CR_' then 'Crime'\r\n\twhen 'IM_' then 'InlandMarine'\r\n\twhen 'EXL' then 'ExcessLiability'\r\n\twhen 'CU_' then 'CommercialUmbrella'\r\n\twhen 'CA_' then 'CommercialAuto'\r\n\twhen 'CDO' then 'DirectorsAndOffsCondos'\r\n\twhen 'EPL' then 'EmploymentPracticesLiab'\r\n\twhen 'HIO' then 'HoleInOne'\r\n\twhen 'EC_' then 'EventCancellation'\r\n\tELSE 'N/A' \r\n\tEND END AS InsuranceLine \r\n\tfrom DCCoverageStaging A\r\n\tleft join DCLineStaging L on L.sessionid = A.sessionid and A.objectid = L.lineID\r\n\twhere A.ObjectName <> 'DC_Coverage'\r\n\t\r\n\tunion all\r\n\t\r\n\tselect B.SessionId, B.ObjectId AS ObjectId, B.ObjectName AS ObjectName,B.coverageID as PCoverageid, A.CoverageId, A.Id AS CoverageGUID,A.Type as CoverageType, \r\n\tCASE WHEN B.ObjectName = 'DC_Line' THEN L.Type\r\n\tELSE\r\n\tcase substring(B.ObjectName,4,3) \r\n\twhen 'CF_' then 'Property'\r\n\twhen 'GL_' then 'GeneralLiability'\r\n\twhen 'WC_' then 'WorkersCompensation'\r\n\twhen 'BP_' then 'BusinessOwners'\r\n\twhen 'CR_' then 'Crime'\r\n\twhen 'IM_' then 'InlandMarine'\r\n\twhen 'EXL' then 'ExcessLiability'\r\n\twhen 'CU_' then 'CommercialUmbrella'\r\n\twhen 'CA_' then 'CommercialAuto'\r\n\twhen 'CDO' then 'DirectorsAndOffsCondos'\r\n\twhen 'EPL' then 'EmploymentPracticesLiab'\r\n\twhen 'HIO' then 'HoleInOne'\r\n\twhen 'EC_' then 'EventCancellation'\r\n\telse 'N/A' \r\n\tEND END AS  InsuranceLine\r\n\tfrom DCCoverageStaging A\r\n\tinner join DCCoverageStaging B on A.SessionId=B.SessionId  and A.ObjectId=B.CoverageId and A.ObjectName='DC_Coverage'\r\n\tleft join DCLineStaging L on L.sessionid = B.sessionid and B.objectid = L.lineID\r\n\twhere B.ObjectName <> 'DC_Coverage'\r\n\t)\r\n\t\r\n\t---- Below query is used to pull the limit values from DCLimit tables if limits are tied to child coverage rather than parent, this is to cover odd scenarios in data\r\n\t\r\n\tselect C.CoverageGuid, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue, C.InsuranceLine as Insuranceline,\r\n\tnull as UnderlyingCompanyName, null as UnderlyingPolicyNumber, null as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLimitStaging DLT\r\n\tinner join PCoverage C on DLT.SessionId=C.SessionId and DLT.ObjectId=C.PCoverageId and  DLT.ObjectName='DC_Coverage'\r\n\twhere DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tUNION    ---- By using UNION we are elimination duplicates coming from above and below queries\r\n\t\r\n\t---- Below query is used to pull the limit values from DCLimit tables if limits are tied to child coverage rather than parent, this is to cover odd scenarios in data\r\n\t\r\n\tselect C.CoverageGuid, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue, C.InsuranceLine as Insuranceline,\r\n\tnull as UnderlyingCompanyName, null as UnderlyingPolicyNumber, null as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLimitStaging DLT\r\n\tinner join PCoverage C on DLT.SessionId=C.SessionId and DLT.ObjectId=C.CoverageId and  DLT.ObjectName='DC_Coverage'\r\n\twhere DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tEL.Description as UnderlyingCompanyName, EL.PolicyNumber as UnderlyingPolicyNumber, 'EmployersLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton L.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaEmployersLiabilityStaging EL\r\n\ton c.SessionId=EL.SessionId and L.LineId=EL.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton EL.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=EL.CU_UmbrellaEmployersLiabilityId\r\n\tand DLT.ObjectName='DC_CU_UmbrellaEmployersLiability'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tGL.Description as UnderlyingCompanyName, GL.PolicyNumber as UnderlyingPolicyNumber, \r\n\tcase when DLT.Type in ('OccurrenceLimit','PersonalAdvertisingInjury','AggregateLimit','ProductsAggregateLimit') \r\n\tthen 'GeneralLiability'\r\n\twhen DLT.Type in ('ProfessionalOccurrenceLimit','ProfessionalAggregateLimit')\r\n\tthen 'CPPProfessionalLiability'\r\n\twhen DLT.Type in ('AggregateNotApplicableForIowa','EachCommonCauseNotApplicableForIowa')\r\n\tthen 'LiquorLiability'\r\n\twhen DLT.Type in ('EBLAggregateLimit','EBLEachEmployeeLimit') \r\n\tthen 'CPPEmployeeBenefitsLiability'  \r\n\tend as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaGeneralLiabilityStaging GL\r\n\ton C.SessionId=GL.SessionId and L.LineId=GL.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton GL.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=GL.CU_UmbrellaGeneralLiabilityId\r\n\tand DLT.ObjectName='DC_CU_UmbrellaGeneralLiability'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tGL.Description as UnderlyingCompanyName, GL.PolicyNumber as UnderlyingPolicyNumber, 'GLOhioStopGapEmployersLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaGeneralLiabilityStaging GL\r\n\ton C.SessionId=GL.SessionId and L.LineId=GL.LineId\r\n\tjoin WBCUUmbrellaGeneralLiabilityStaging WGL\r\n\ton GL.SessionId=WGL.SessionId\r\n\tand GL.CU_UmbrellaGeneralLiabilityId = WGL.CU_UmbrellaGeneralLiabilityId\r\n\tjoin DCLimitStaging DLT\r\n\ton GL.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=WGL.WB_CU_UmbrellaGeneralLiabilityId\r\n\tand DLT.ObjectName='WB_CU_UmbrellaGeneralLiability'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\tand DLT.Type in ( 'OHStopGapBodilyInjuryByAccidentEachAccident', 'OHStopGapBodilyInjuryByDiseaseEachEmployee', 'OHStopGapBodilyInjuryByDiseaseAggregate')\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, LTRIM(RTRIM(DLT.Type))+'- EACH OCCURRENCE' as LimitType, left(DLT.Value,charindex('/',DLT.Value)-1) +'000000' as LimitValue,  L.Type as InsuranceLine,\r\n\tBO.Description as UnderlyingCompanyName, BO.PolicyNumber as UnderlyingPolicyNumber, 'BusinessownersLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaBusinessOwnersStaging BO\r\n\ton BO.SessionId=L.SessionId and BO.LineId=L.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton BO.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=BO.CU_UmbrellaBusinessOwnersId\r\n\tand DLT.ObjectName='DC_CU_UmbrellaBusinessOwners'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null and DLT.Type = 'BusinessOwnersLiabilityLimit'\r\n\t\r\n\t\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, LTRIM(RTRIM(DLT.Type))+'- AGGREGATE' as LimitType, right(DLT.Value,len(DLT.Value)-charindex('/',DLT.Value)) +'000000' as LimitValue,  L.Type as InsuranceLine,\r\n\tBO.Description as UnderlyingCompanyName, BO.PolicyNumber as UnderlyingPolicyNumber, 'BusinessownersLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaBusinessOwnersStaging BO\r\n\ton BO.SessionId=L.SessionId and BO.LineId=L.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton BO.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=BO.CU_UmbrellaBusinessOwnersId\r\n\tand DLT.ObjectName='DC_CU_UmbrellaBusinessOwners'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null and DLT.Type = 'BusinessOwnersLiabilityLimit'\r\n\t\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tBO.Description as UnderlyingCompanyName, BO.PolicyNumber as UnderlyingPolicyNumber, 'BOPEmployeeBenefitsLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaBusinessOwnersStaging BO\r\n\ton BO.SessionId=L.SessionId and BO.LineId=L.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton BO.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=BO.CU_UmbrellaBusinessOwnersId\r\n\tand DLT.ObjectName='DC_CU_UmbrellaBusinessOwners'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null and DLT.Type in ('EBLAggregateLimit','EBLEachEmployeeLimit')\r\n\t\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tCA.Description as UnderlyingCompanyName, CA.PolicyNumber as UnderlyingPolicyNumber, \r\n\tCASE WHEN DLT.Type in ('EBLAggregateLimit','EBLEachEmployeeLimit') \r\n\tthen 'CommercialAutoEmployeeBenefitsLiability' \r\n\twhen  DLT.Type in ( \r\n\t'OHStopGapBodilyInjuryByAccidentEachAccident',\r\n\t'OHStopGapBodilyInjuryByDiseaseEachEmployee',\r\n\t'OHStopGapBodilyInjuryByDiseaseAggregate') then  'AutoOhioStopGapEmployersLiability'\r\n\tELSE 'CommercialAutoLiability' END as UnderlyingInsuranceLine, \r\n\tnull as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin DCCUUmbrellaCommercialAutoStaging CA\r\n\ton CA.SessionId=L.SessionId and CA.LineId=L.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton CA.SessionId=DLT.SessionId\r\n\tand DLT.ObjectId=CA.CU_UmbrellaCommercialAutoId\r\n\tand DLT.ObjectName in ('DC_CU_UmbrellaCommercialAuto','WB_CU_UmbrellaCommercialAuto')\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue, L.Type as InsuranceLine,\r\n\tSMT.Description as UnderlyingCompanyName, SMT.PolicyNumber as UnderlyingPolicyNumber, \r\n\tcase when DLT.Type in ('Liability','GeneralAggregate','ProductsCompletedAggregate','PersonalAndAdvertisingInjury')\r\n\tthen 'SMARTbusinessLiability' \r\n\twhen DLT.Type in ('ProfessionalLiability','ProfessionalLiabilityAggregateLimit')\r\n\tthen 'SMARTProfessionalLiability'\r\n\twhen DLT.Type in ('EBLAggregateLimit','EBLEachEmployeeLimit') \r\n\tthen 'SMARTEmployeeBenefitsLiability' \r\n\tend as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin WBCUUmbrellaSMARTbusinessStage SMT\r\n\ton L.SessionId=SMT.SessionId and L.LineId=SMT.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton DLT.SessionId=SMT.SessionId\r\n\tand DLT.ObjectId=SMT.WBCUUmbrellaSMARTbusinessId\r\n\tand DLT.ObjectName='WB_CU_UmbrellaSMARTbusiness'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\tunion all\r\n\t\r\n\tselect C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue, L.Type as InsuranceLine,\r\n\tSBOP.Description as UnderlyingCompanyName, SBOP.PolicyNumber as UnderlyingPolicyNumber, \r\n\tcase when DLT.Type in ('BodilyInjuryByAccidentEachAccident', 'BodilyInjuryByDiseaseEachEmployee', 'BodilyInjuryByDiseaseAggregate') \r\n\tthen 'SBOPOhioStopGapEmployersLiability'\r\n\twhen DLT.Type in ('ProfessionalLiabilityEachOccurrenceClaimLimit', 'ProfessionalLiabilityAggregate')\r\n\tthen 'SBOPProfessionalLiability'\r\n\twhen DLT.Type in ('PolicyAggregateLimit', 'PolicyPerOccurenceLimit', 'ProductsAggregateLimit', 'AggregateLimit')\r\n\tthen  'SBOPGeneralLiability' \r\n\twhen DLT.Type in ('EBLAggregateLimit','EBLEachEmployeeLimit') \r\n\tthen 'SBOPEmployeeBenefitsLiability' end as UnderlyingInsuranceLine, \r\n\tnull as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin WBCUUmbrellaSBOPStage SBOP\r\n\ton L.SessionId=SBOP.SessionId and L.LineId=SBOP.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton DLT.SessionId=SBOP.SessionId\r\n\tand DLT.ObjectId=SBOP.WBCUUmbrellaSBOPId\r\n\tand DLT.ObjectName='WB_CU_UmbrellaSBOP'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\t\r\n\t--CPP/SBOP Blanket\r\n\tUnion all\r\n\t\r\n\tselect c.CoverageGUID,c.CoverageId,cast(frm.value AS varchar(100))+dlt.Type as LimitType, dlt.Value,isnull(L.Type, C.InsuranceLine) as Insuranceline,\r\n\tnull as UnderlyingCompanyName, null as UnderlyingPolicyNumber, null as UnderlyingInsuranceLine, convert(varchar(200), rg.Number)  as BlanketGroupNumber\r\n\tfrom DCLimitStaging DLT\r\n\tinner join DCCFRatingGroupStaging rg\r\n\ton DLT.ObjectId = rg.CF_RatingGroupId\r\n\tand DLT.ObjectName = 'DC_CF_RatingGroup'\r\n\tinner join DCFormStaging frm\r\n\ton frm.ObjectId = rg.CF_RatingGroupId\r\n\tand frm.ObjectName = 'DC_CF_RatingGroup'\r\n\tinner join DCCFRiskStaging r\r\n\ton rg.CF_RiskId = r.CF_RiskId\r\n\tinner join DCCFBuildingStage b\r\n\ton b.CFBuildingId = r.CF_BuildingId\r\n\tinner join DCLineStaging l\r\n\ton l.LineId = b.LineId\r\n\tinner join PCoverage c\r\n\ton c.ObjectId = l.LineId\r\n\tand c.ObjectName = 'DC_Line'\r\n\twhere c.CoverageType = 'RatingGroup'\r\n\tand dlt.Type = 'StandardCalculated'\r\n\t\r\n\t--BusinessOwners Blanket\r\n\tUnion all\r\n\t\r\n\tselect c.CoverageGUID,c.CoverageId,bg.Type+dlt.Type as LimitType, dlt.Value,isnull(L.Type, C.InsuranceLine) as Insuranceline,\r\n\tnull as UnderlyingCompanyName, null as UnderlyingPolicyNumber, null as UnderlyingInsuranceLine, convert(varchar(200), frm.Value) as BlanketGroupNumber\r\n\tfrom DCLimitStaging dlt\r\n\tinner join DCBPBlanketGroupStage bg\r\n\ton dlt.objectid = bg.BP_BlanketGroupId\r\n\tand dlt.ObjectName = 'DC_BP_BlanketGroup'\r\n\tinner join DCBPRiskStage r\r\n\ton bg.BP_RiskId = r.BPRiskId\r\n\tinner join DCLineStaging l\r\n\ton l.LineId = r.LineId\r\n\tinner join DCFormStaging frm\r\n\ton frm.ObjectName='DC_BP_BlanketGroup'\r\n\tand frm.ObjectId=bg.BP_BlanketGroupId\r\n\tinner join PCoverage c\r\n\ton c.ObjectId = l.LineId\r\n\tand c.ObjectName = 'DC_Line'\r\n\twhere c.coverageType = 'Blanket'\r\n\tand dlt.Type = 'Standard'\r\n\t\r\n\t\r\n\t--Smart Ohio StopGap\r\n\t\r\n\tUnion All\r\n\t\r\n\t select  \r\n\t  C.CoverageGUID, C.CoverageId, DLT.Type as LimitType, DLT.Value as LimitValue,  L.Type as InsuranceLine,\r\n\tsmt.Description as UnderlyingCompanyName, smt.PolicyNumber as UnderlyingPolicyNumber, 'SMARTOhioStopGapEmployersLiability' as UnderlyingInsuranceLine, null as BlanketGroupNumber\r\n\tfrom DCLineStaging L\r\n\tjoin WBCUPremiumDetailStage PD\r\n\ton PD.LineId = L.LineId\r\n\tjoin PCoverage C\r\n\ton PD.SessionId=C.SessionId and C.ObjectId=PD.WBCUPremiumDetailId and C.ObjectName='WB_CU_PremiumDetail'\r\n\tjoin WBCUUmbrellaSMARTbusinessStage SMT\r\n\ton L.SessionId=SMT.SessionId and L.LineId=SMT.LineId\r\n\tjoin DCLimitStaging DLT\r\n\ton DLT.SessionId=SMT.SessionId\r\n\tand DLT.ObjectId=SMT.WBCUUmbrellaSMARTbusinessId\r\n\tand DLT.ObjectName='WB_CU_UmbrellaSMARTbusiness'\r\n\twhere L.Type='CommercialUmbrella' and DLT.Type is not null and DLT.Value is not null\r\n\tand DLT.Type in ( \r\n\t'OHStopGapBodilyInjuryByAccidentEachAccident',\r\n\t'OHStopGapBodilyInjuryByDiseaseEachEmployee',\r\n\t'OHStopGapBodilyInjuryByDiseaseAggregate')\n),\nEXP_DataCollectSRC AS (\n\tSELECT\n\tCoverageGuid AS CoverageGuId,\n\tCoverageId,\n\tLimitType,\n\tLimitValue,\n\t-- *INF*: IIF(IN(LimitValue,'Actual Loss Sustained')=1, 'ActualLossSustained',LimitValue)\n\tIFF(LimitValue IN ('Actual Loss Sustained') = 1, 'ActualLossSustained', LimitValue) AS o_LimitValue,\n\tInsuranceLine,\n\tUnderlyingCompanyName,\n\tUnderlyingPolicyKey,\n\tUnderlyingInsuranceLine,\n\tBlanketGroupNumber,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS o_AuditId\n\tFROM SQ_DCLimitStaging\n),\nSQ_EDW AS (\n\tSELECT rc.CoverageType, rc.CoverageGUID, wpt.PremiumTransactionAKId, wpt.PremiumTransactionStageId, pt.PremiumTransactionID \r\n\tFROM\r\n\tWorkPremiumTransaction wpt\r\n\tINNER JOIN PremiumTransaction pt ON   wpt.PremiumTransactionAKId=pt.PremiumTransactionAKID \r\n\tAND pt.PremiumTransactionID NOT IN\r\n\t (select WPTOL.PremiumTransactionID from dbo.WorkPremiumTransactionOffsetLineage WPTOL with (nolock) WHERE WPTOL.UpdateAttributeFlag = 1)\r\n\tINNER JOIN RatingCoverage rc ON  pt.RatingCoverageAKId=rc.RatingCoverageAKID AND pt.EffectiveDate=rc.EffectiveDate\n),\nJNR_Get_CvgType AS (SELECT\n\tEXP_DataCollectSRC.CoverageGuId, \n\tEXP_DataCollectSRC.CoverageId, \n\tEXP_DataCollectSRC.LimitType, \n\tEXP_DataCollectSRC.o_LimitValue AS LimitValue, \n\tEXP_DataCollectSRC.InsuranceLine, \n\tEXP_DataCollectSRC.UnderlyingCompanyName, \n\tEXP_DataCollectSRC.UnderlyingPolicyKey, \n\tEXP_DataCollectSRC.UnderlyingInsuranceLine, \n\tEXP_DataCollectSRC.BlanketGroupNumber, \n\tEXP_DataCollectSRC.o_AuditId, \n\tSQ_EDW.CoverageType, \n\tSQ_EDW.CoverageGUID AS CoverageGUID_RatingCoverage, \n\tSQ_EDW.PremiumTransactionAKId, \n\tSQ_EDW.PremiumTransactionStageId, \n\tSQ_EDW.PremiumTransactionID\n\tFROM EXP_DataCollectSRC\n\tINNER JOIN SQ_EDW\n\tON SQ_EDW.CoverageGUID = EXP_DataCollectSRC.CoverageGuId AND SQ_EDW.PremiumTransactionStageId = EXP_DataCollectSRC.CoverageId\n),\nmplt_Load_Limits_IL_Layer_DCT AS (WITH\n\tSEQ_CoverageLimitID AS (\n\t\tCREATE SEQUENCE SEQ_CoverageLimitID\n\t\tSTART = 0\n\t\tINCREMENT = 1;\n\t),\n\tINPUT AS (\n\t\t\n\t),\n\tEXP_CoverageType_Extract AS (\n\t\tSELECT\n\t\tCoverageType AS i_CoverageType,\n\t\tLimitType,\n\t\tLimitValue,\n\t\tInsuranceLine,\n\t\tUnderlyingCompanyName,\n\t\tUnderlyingPolicyKey,\n\t\tUnderlyingInsuranceLine,\n\t\tBlanketGroupNumber,\n\t\tPremiumTransactionAKID AS PremiumTransactionAKId,\n\t\tPremiumTransactionID,\n\t\t-- *INF*: IIF( NOT ISNULL(UnderlyingInsuranceLine), 'UnderlyingUmbrella', i_CoverageType)\n\t\tIFF(UnderlyingInsuranceLine IS NOT NULL, 'UnderlyingUmbrella', i_CoverageType) AS o_CoverageType_LKP,\n\t\t-- *INF*: IIF( NOT ISNULL(UnderlyingInsuranceLine), UnderlyingInsuranceLine, InsuranceLine)\n\t\tIFF(UnderlyingInsuranceLine IS NOT NULL, UnderlyingInsuranceLine, InsuranceLine) AS o_InsuranceLine_LKP,\n\t\tAuditId\n\t\tFROM INPUT\n\t),\n\tLKP_Valid_Limits AS (\n\t\tSELECT\n\t\tStandardLimitType,\n\t\tLimitLevel,\n\t\tInsuranceLine,\n\t\tCoverageType,\n\t\tLimitType\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tStandardLimitType,\n\t\t\t\tLimitLevel,\n\t\t\t\tInsuranceLine,\n\t\t\t\tCoverageType,\n\t\t\t\tLimitType\n\t\t\tFROM SupLimitType\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY InsuranceLine,CoverageType,LimitType ORDER BY StandardLimitType) = 1\n\t),\n\tFIL_UnnecessaryLimits AS (\n\t\tSELECT\n\t\tLKP_Valid_Limits.StandardLimitType, \n\t\tLKP_Valid_Limits.LimitLevel, \n\t\tEXP_CoverageType_Extract.PremiumTransactionAKId, \n\t\tEXP_CoverageType_Extract.i_CoverageType AS CoverageType, \n\t\tEXP_CoverageType_Extract.LimitType, \n\t\tEXP_CoverageType_Extract.LimitValue, \n\t\tEXP_CoverageType_Extract.InsuranceLine, \n\t\tEXP_CoverageType_Extract.UnderlyingCompanyName, \n\t\tEXP_CoverageType_Extract.UnderlyingPolicyKey, \n\t\tEXP_CoverageType_Extract.UnderlyingInsuranceLine, \n\t\tEXP_CoverageType_Extract.BlanketGroupNumber, \n\t\tEXP_CoverageType_Extract.PremiumTransactionID, \n\t\tEXP_CoverageType_Extract.AuditId\n\t\tFROM EXP_CoverageType_Extract\n\t\tLEFT JOIN LKP_Valid_Limits\n\t\tON LKP_Valid_Limits.InsuranceLine = EXP_CoverageType_Extract.o_InsuranceLine_LKP AND LKP_Valid_Limits.CoverageType = EXP_CoverageType_Extract.o_CoverageType_LKP AND LKP_Valid_Limits.LimitType = EXP_CoverageType_Extract.LimitType\n\t\tWHERE Not ISNULL(LimitLevel)\n\t),\n\tEXP_Default_Values AS (\n\t\tSELECT\n\t\tStandardLimitType AS i_StandardLimitType,\n\t\tPremiumTransactionAKId AS i_PremiumTransactionAKId,\n\t\tCoverageType AS i_CoverageType,\n\t\tLimitType AS i_LimitType,\n\t\tLimitValue AS i_LimitValue,\n\t\tInsuranceLine AS i_InsuranceLine,\n\t\tUnderlyingCompanyName,\n\t\tUnderlyingPolicyKey,\n\t\tUnderlyingInsuranceLine,\n\t\tBlanketGroupNumber AS i_BlanketGroupNumber,\n\t\tPremiumTransactionID,\n\t\tAuditId,\n\t\t-- *INF*: IIF(ISNULL(i_BlanketGroupNumber),'',LTRIM(RTRIM(i_BlanketGroupNumber)) || ' ')\n\t\tIFF(i_BlanketGroupNumber IS NULL, '', LTRIM(RTRIM(i_BlanketGroupNumber)) || ' ') AS v_BlanketNumber,\n\t\t-- *INF*: LTRIM(RTRIM(i_CoverageType))\n\t\tLTRIM(RTRIM(i_CoverageType)) AS v_CoverageType,\n\t\t-- *INF*: LTRIM(RTRIM(i_LimitType))\n\t\tLTRIM(RTRIM(i_LimitType)) AS v_LimitType,\n\t\t-- *INF*: IIF(ISNULL(i_StandardLimitType), v_LimitType, i_StandardLimitType)\n\t\tIFF(i_StandardLimitType IS NULL, v_LimitType, i_StandardLimitType) AS v_CoverageLimitType,\n\t\t-- *INF*: REPLACESTR(0,LTRIM(RTRIM(i_LimitValue)), '$',CHR(44),'')\n\t\tREGEXP_REPLACE(LTRIM(RTRIM(i_LimitValue)),'$',CHR(44),'','i') AS v_CoverageLimitValue,\n\t\t-- *INF*: LTRIM(RTRIM(i_InsuranceLine))\n\t\tLTRIM(RTRIM(i_InsuranceLine)) AS v_InsuranceLine,\n\t\tv_InsuranceLine AS o_InsuranceLine,\n\t\tv_BlanketNumber || v_CoverageLimitType AS o_CoverageLimitType,\n\t\t-- *INF*: IIF(v_InsuranceLine='WorkersCompensation' AND IN(v_CoverageLimitType,'EachAccident','EachEmployeeDisease','Policy'),v_CoverageLimitValue || '000',v_CoverageLimitValue)\n\t\tIFF(\n\t\t    v_InsuranceLine = 'WorkersCompensation'\n\t\t    and v_CoverageLimitType IN ('EachAccident','EachEmployeeDisease','Policy'),\n\t\t    v_CoverageLimitValue || '000',\n\t\t    v_CoverageLimitValue\n\t\t) AS o_CoverageLimitValue,\n\t\tv_CoverageType AS o_CoverageType,\n\t\t-- *INF*: DECODE(TRUE,\r\n\t\t-- ISNULL(UnderlyingInsuranceLine),\r\n\t\t-- 0,\r\n\t\t-- NOT ISNULL(v_CoverageLimitType) AND  NOT ISNULL(v_CoverageLimitValue),\r\n\t\t-- 1,\r\n\t\t-- 2)\n\t\tDECODE(\n\t\t    TRUE,\n\t\t    UnderlyingInsuranceLine IS NULL, 0,\n\t\t    v_CoverageLimitType IS NULL AND v_CoverageLimitValue IS NOT NOT NULL, 1,\n\t\t    2\n\t\t) AS o_UnderlyingFlag\n\t\tFROM FIL_UnnecessaryLimits\n\t),\n\tRTR_EquipmentBreakdown AS (\n\t\tSELECT\n\t\tUnderlyingCompanyName,\n\t\tUnderlyingPolicyKey,\n\t\tUnderlyingInsuranceLine,\n\t\tPremiumTransactionID,\n\t\to_InsuranceLine AS InsuranceLine,\n\t\ti_PremiumTransactionAKId AS PremiumTransactionAKId,\n\t\to_CoverageLimitType AS CoverageLimitType,\n\t\to_CoverageLimitValue AS CoverageLimitValue,\n\t\to_CoverageType AS CoverageType,\n\t\to_UnderlyingFlag AS UnderlyingFlag,\n\t\tAuditId\n\t\tFROM EXP_Default_Values\n\t),\n\tRTR_EquipmentBreakdown_EquipmentBreakdown AS (SELECT * FROM RTR_EquipmentBreakdown WHERE IN(CoverageType,'EquipmentBreakdown','EquipBreakdown') AND UnderlyingFlag=0),\n\tRTR_EquipmentBreakdown_NonEquipmentBreakdown AS (SELECT * FROM RTR_EquipmentBreakdown WHERE NOT IN(CoverageType,'EquipmentBreakdown','EquipBreakdown') AND UnderlyingFlag=0),\n\tRTR_EquipmentBreakdown_Underlying AS (SELECT * FROM RTR_EquipmentBreakdown WHERE UnderlyingFlag=1),\n\tAGG_Underlying AS (\n\t\tSELECT\n\t\tPremiumTransactionID,\n\t\tCoverageLimitType,\n\t\tCoverageLimitValue,\n\t\tUnderlyingCompanyName,\n\t\tUnderlyingPolicyKey AS UnderLyingPolicyKey,\n\t\tUnderlyingInsuranceLine,\n\t\tAuditId\n\t\tFROM RTR_EquipmentBreakdown_Underlying\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionID, CoverageLimitType, UnderlyingCompanyName, UnderLyingPolicyKey, UnderlyingInsuranceLine ORDER BY NULL) = 1\n\t),\n\tAGG_EquipmentBreakdown AS (\n\t\tSELECT\n\t\tPremiumTransactionAKId,\n\t\tCoverageLimitType,\n\t\tCoverageLimitValue AS i_CoverageLimitValue,\n\t\t-- *INF*: TO_CHAR(SUM(TO_DECIMAL(i_CoverageLimitValue)))\n\t\tTO_CHAR(SUM(CAST(i_CoverageLimitValue AS FLOAT))) AS o_CoverageLimitValue,\n\t\tAuditId\n\t\tFROM RTR_EquipmentBreakdown_EquipmentBreakdown\n\t\tGROUP BY PremiumTransactionAKId, CoverageLimitType\n\t),\n\tEXP_Underlying AS (\n\t\tSELECT\n\t\tPremiumTransactionID AS i_PremiumTransactionID,\n\t\tCoverageLimitType AS i_CoverageLimitType,\n\t\tCoverageLimitValue AS i_CoverageLimitValue,\n\t\tUnderlyingCompanyName AS i_UnderlyingCompanyName,\n\t\tUnderLyingPolicyKey AS i_UnderLyingPolicyKey,\n\t\tUnderlyingInsuranceLine AS i_UnderlyingInsuranceLine,\n\t\t'1' AS o_CurrentSnapshotFlag,\n\t\tAuditId AS AuditID,\n\t\t-- *INF*: TO_DATE('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')\n\t\tTO_TIMESTAMP('1800-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS o_EffectiveDate,\n\t\t-- *INF*: TO_DATE('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')\n\t\tTO_TIMESTAMP('2100-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') AS o_ExpirationDate,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemId,\n\t\tCURRENT_TIMESTAMP AS o_CreatedDate,\n\t\tCURRENT_TIMESTAMP AS o_ModifiedDate,\n\t\ti_PremiumTransactionID AS o_PremiumTransactionId,\n\t\t-- *INF*: IIF(ISNULL(i_UnderlyingCompanyName),'N/A',i_UnderlyingCompanyName)\n\t\tIFF(i_UnderlyingCompanyName IS NULL, 'N/A', i_UnderlyingCompanyName) AS o_UnderlyingInsuranceCompanyName,\n\t\t-- *INF*: IIF(ISNULL(i_UnderLyingPolicyKey),'N/A',i_UnderLyingPolicyKey)\n\t\tIFF(i_UnderLyingPolicyKey IS NULL, 'N/A', i_UnderLyingPolicyKey) AS o_UnderlyingPolicyKey,\n\t\t-- *INF*: IIF(ISNULL(i_UnderlyingInsuranceLine),'N/A',i_UnderlyingInsuranceLine)\n\t\tIFF(i_UnderlyingInsuranceLine IS NULL, 'N/A', i_UnderlyingInsuranceLine) AS o_UnderlyingPolicyType,\n\t\ti_CoverageLimitValue AS o_UnderlyingPolicyLimit,\n\t\ti_CoverageLimitType AS o_UnderlyingPolicyLimitType\n\t\tFROM AGG_Underlying\n\t),\n\tUnion_EquipmentBreakdown AS (\n\t\tSELECT CoverageLimitType, PremiumTransactionAKId, o_CoverageLimitValue AS CoverageLimitValue, AuditId\n\t\tFROM AGG_EquipmentBreakdown\n\t\tUNION\n\t\tSELECT CoverageLimitType, PremiumTransactionAKId, CoverageLimitValue, AuditId\n\t\tFROM RTR_EquipmentBreakdown_NonEquipmentBreakdown\n\t),\n\tLKP_CoverageDetailUnderlyingPolicy AS (\n\t\tSELECT\n\t\tCoverageDetailUnderlyingPolicyId,\n\t\tPremiumTransactionId,\n\t\tUnderlyingInsuranceCompanyName,\n\t\tUnderlyingPolicyKey,\n\t\tUnderlyingPolicyType,\n\t\tUnderlyingPolicyLimitType\n\t\tFROM (\n\t\t\tSELECT CoverageDetailUnderlyingPolicyId AS CoverageDetailUnderlyingPolicyId,\r\n\t\t\t\tCoverageDetailUnderlyingPolicy.PremiumTransactionId AS PremiumTransactionId,\r\n\t\t\t\tUnderlyingInsuranceCompanyName AS UnderlyingInsuranceCompanyName,\r\n\t\t\t\tUnderlyingPolicyKey AS UnderlyingPolicyKey,\r\n\t\t\t\tUnderlyingPolicyType AS UnderlyingPolicyType,\r\n\t\t\t\tUnderlyingPolicyLimitType AS UnderlyingPolicyLimitType\r\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDetailUnderlyingPolicy\r\n\t\t\tJOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransaction PT ON PT.PremiumTransactionId = CoverageDetailUnderlyingPolicy.PremiumTransactionId\r\n\t\t\t@{pipeline().parameters.PTFILTERFORCDUP}\r\n\t\t\tWHERE CoverageDetailUnderlyingPolicy.SourceSystemId = '@{pipeline().parameters.SOURCE_SYSTEM_ID}'\r\n\t\t\tORDER BY CoverageDetailUnderlyingPolicy.PremiumTransactionId,\r\n\t\t\t\tUnderlyingInsuranceCompanyName,\r\n\t\t\t\tUnderlyingPolicyKey,\r\n\t\t\t\tUnderlyingPolicyType,\r\n\t\t\t\tUnderlyingPolicyLimitType\r\n\t\t\t\t---\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionId,UnderlyingInsuranceCompanyName,UnderlyingPolicyKey,UnderlyingPolicyType,UnderlyingPolicyLimitType ORDER BY CoverageDetailUnderlyingPolicyId) = 1\n\t),\n\tAGG_Type_Value AS (\n\t\tSELECT\n\t\tCoverageLimitType,\n\t\tCoverageLimitValue,\n\t\tAuditId\n\t\tFROM Union_EquipmentBreakdown\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageLimitType, CoverageLimitValue ORDER BY NULL) = 1\n\t),\n\tSRT_by_Type_Value_CoverageLimitBridge AS (\n\t\tSELECT\n\t\tPremiumTransactionAKId, \n\t\tCoverageLimitType, \n\t\tCoverageLimitValue\n\t\tFROM Union_EquipmentBreakdown\n\t\tORDER BY CoverageLimitType ASC, CoverageLimitValue ASC\n\t),\n\tRTR_Underlying_Insert AS (\n\t\tSELECT\n\t\tLKP_CoverageDetailUnderlyingPolicy.CoverageDetailUnderlyingPolicyId,\n\t\tEXP_Underlying.o_CurrentSnapshotFlag AS CurrentSnapshotFlag,\n\t\tEXP_Underlying.AuditID,\n\t\tEXP_Underlying.o_EffectiveDate AS EffectiveDate,\n\t\tEXP_Underlying.o_ExpirationDate AS ExpirationDate,\n\t\tEXP_Underlying.o_SourceSystemId AS SourceSystemId,\n\t\tEXP_Underlying.o_CreatedDate AS CreatedDate,\n\t\tEXP_Underlying.o_ModifiedDate AS ModifiedDate,\n\t\tEXP_Underlying.o_PremiumTransactionId AS PremiumTransactionId,\n\t\tEXP_Underlying.o_UnderlyingInsuranceCompanyName AS UnderlyingInsuranceCompanyName,\n\t\tEXP_Underlying.o_UnderlyingPolicyKey AS UnderlyingPolicyKey,\n\t\tEXP_Underlying.o_UnderlyingPolicyType AS UnderlyingPolicyType,\n\t\tEXP_Underlying.o_UnderlyingPolicyLimit AS UnderlyingPolicyLimit,\n\t\tEXP_Underlying.o_UnderlyingPolicyLimitType AS UnderlyingPolicyLimitType\n\t\tFROM EXP_Underlying\n\t\tLEFT JOIN LKP_CoverageDetailUnderlyingPolicy\n\t\tON LKP_CoverageDetailUnderlyingPolicy.PremiumTransactionId = EXP_Underlying.o_PremiumTransactionId AND LKP_CoverageDetailUnderlyingPolicy.UnderlyingInsuranceCompanyName = EXP_Underlying.o_UnderlyingInsuranceCompanyName AND LKP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyKey = EXP_Underlying.o_UnderlyingPolicyKey AND LKP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyType = EXP_Underlying.o_UnderlyingPolicyType AND LKP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyLimitType = EXP_Underlying.o_UnderlyingPolicyLimitType\n\t),\n\tRTR_Underlying_Insert_Insert AS (SELECT * FROM RTR_Underlying_Insert WHERE ISNULL(CoverageDetailUnderlyingPolicyId)),\n\tLKP_CoverageLimit_CoverageLimitID AS (\n\t\tSELECT\n\t\tCoverageLimitId,\n\t\tCoverageLimitType,\n\t\tCoverageLimitValue\n\t\tFROM (\n\t\t\tSELECT \n\t\t\t\tCoverageLimitId,\n\t\t\t\tCoverageLimitType,\n\t\t\t\tCoverageLimitValue\n\t\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageLimit\n\t\t\tWHERE SourceSystemID='@{pipeline().parameters.SOURCE_SYSTEM_ID}'\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY CoverageLimitType,CoverageLimitValue ORDER BY CoverageLimitId DESC) = 1\n\t),\n\tOUTPUT_CoverageDetailUnderlyingPolicy_Insert AS (\n\t\tSELECT\n\t\tCurrentSnapshotFlag, \n\t\tAuditID, \n\t\tEffectiveDate, \n\t\tExpirationDate, \n\t\tSourceSystemId, \n\t\tCreatedDate, \n\t\tModifiedDate, \n\t\tPremiumTransactionId, \n\t\tUnderlyingInsuranceCompanyName, \n\t\tUnderlyingPolicyKey, \n\t\tUnderlyingPolicyType, \n\t\tUnderlyingPolicyLimit, \n\t\tUnderlyingPolicyLimitType\n\t\tFROM RTR_Underlying_Insert_Insert\n\t),\n\tEXP_Set_CoverageLimitID AS (\n\t\tSELECT\n\t\tLKP_CoverageLimit_CoverageLimitID.CoverageLimitId AS lkp_CoverageLimitId,\n\t\tSEQ_CoverageLimitID.NEXTVAL AS i_NEXTVAL,\n\t\tAGG_Type_Value.CoverageLimitType,\n\t\tAGG_Type_Value.CoverageLimitValue,\n\t\t-- *INF*: IIF(ISNULL(lkp_CoverageLimitId),i_NEXTVAL,lkp_CoverageLimitId)\n\t\tIFF(lkp_CoverageLimitId IS NULL, i_NEXTVAL, lkp_CoverageLimitId) AS CoverageLimitId,\n\t\tAGG_Type_Value.AuditId\n\t\tFROM AGG_Type_Value\n\t\tLEFT JOIN LKP_CoverageLimit_CoverageLimitID\n\t\tON LKP_CoverageLimit_CoverageLimitID.CoverageLimitType = AGG_Type_Value.CoverageLimitType AND LKP_CoverageLimit_CoverageLimitID.CoverageLimitValue = AGG_Type_Value.CoverageLimitValue\n\t),\n\tFIL_Insert_CoverageLimit AS (\n\t\tSELECT\n\t\tlkp_CoverageLimitId, \n\t\tCoverageLimitId, \n\t\tCoverageLimitType, \n\t\tCoverageLimitValue, \n\t\tAuditId\n\t\tFROM EXP_Set_CoverageLimitID\n\t\tWHERE ISNULL(lkp_CoverageLimitId)\n\t),\n\tSRT_by_Type_Value_CoverageLimit AS (\n\t\tSELECT\n\t\tCoverageLimitType, \n\t\tCoverageLimitValue, \n\t\tCoverageLimitId, \n\t\tAuditId\n\t\tFROM EXP_Set_CoverageLimitID\n\t\tORDER BY CoverageLimitType ASC, CoverageLimitValue ASC\n\t),\n\tJNR_CoverageLimit_CoverageLimitBridge AS (SELECT\n\t\tSRT_by_Type_Value_CoverageLimit.CoverageLimitType AS CoverageLimitType_CoverageLimit, \n\t\tSRT_by_Type_Value_CoverageLimit.CoverageLimitValue AS i_CoverageLimitValue_CoverageLimit, \n\t\tSRT_by_Type_Value_CoverageLimit.CoverageLimitId, \n\t\tSRT_by_Type_Value_CoverageLimit.AuditId, \n\t\tSRT_by_Type_Value_CoverageLimitBridge.PremiumTransactionAKId, \n\t\tSRT_by_Type_Value_CoverageLimitBridge.CoverageLimitType AS i_CoverageIdCoverageLimitType_Bridge, \n\t\tSRT_by_Type_Value_CoverageLimitBridge.CoverageLimitValue AS i_CoverageIdCoverageLimitValue_Bridge\n\t\tFROM SRT_by_Type_Value_CoverageLimit\n\t\tINNER JOIN SRT_by_Type_Value_CoverageLimitBridge\n\t\tON SRT_by_Type_Value_CoverageLimitBridge.CoverageLimitType = SRT_by_Type_Value_CoverageLimit.CoverageLimitType AND SRT_by_Type_Value_CoverageLimitBridge.CoverageLimitValue = SRT_by_Type_Value_CoverageLimit.CoverageLimitValue\n\t),\n\tEXP_Set_MetaData_CoverageLimit AS (\n\t\tSELECT\n\t\tCoverageLimitId,\n\t\tCoverageLimitType,\n\t\tCoverageLimitValue,\n\t\tAuditId AS AuditID,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\t\tSYSDATE AS o_CreatedDate\n\t\tFROM FIL_Insert_CoverageLimit\n\t),\n\tLKP_CoverageLimitBridge AS (\n\t\tSELECT\n\t\tCoverageLimitBridgeId,\n\t\tPremiumTransactionAKId,\n\t\tCoverageLimitId\n\t\tFROM (\n\t\t\tSELECT CLB.CoverageLimitBridgeId as CoverageLimitBridgeId, \r\n\t\t\tCLB.PremiumTransactionAKId as PremiumTransactionAKId, \r\n\t\t\tCLB.CoverageLimitId as CoverageLimitId \r\n\t\t\tFROM dbo.CoverageLimitBridge CLB\r\n\t\t\tINNER JOIN dbo.WorkPremiumTransaction WPT ON WPT.PremiumTransactionAKId = CLB.PremiumTransactionAKId\n\t\t)\n\t\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,CoverageLimitId ORDER BY CoverageLimitBridgeId DESC) = 1\n\t),\n\tOUTPUT_CoverageLimit_Insert AS (\n\t\tSELECT\n\t\tCoverageLimitId, \n\t\tAuditID, \n\t\to_SourceSystemID AS SourceSystemID, \n\t\to_CreatedDate AS CreatedDate, \n\t\tCoverageLimitType, \n\t\tCoverageLimitValue\n\t\tFROM EXP_Set_MetaData_CoverageLimit\n\t),\n\tFIL_Insert_CoverageLimitBridge AS (\n\t\tSELECT\n\t\tLKP_CoverageLimitBridge.CoverageLimitBridgeId AS i_CoverageLimitBridgeId, \n\t\tJNR_CoverageLimit_CoverageLimitBridge.PremiumTransactionAKId, \n\t\tJNR_CoverageLimit_CoverageLimitBridge.CoverageLimitId, \n\t\tJNR_CoverageLimit_CoverageLimitBridge.AuditId\n\t\tFROM JNR_CoverageLimit_CoverageLimitBridge\n\t\tLEFT JOIN LKP_CoverageLimitBridge\n\t\tON LKP_CoverageLimitBridge.PremiumTransactionAKId = JNR_CoverageLimit_CoverageLimitBridge.PremiumTransactionAKId AND LKP_CoverageLimitBridge.CoverageLimitId = JNR_CoverageLimit_CoverageLimitBridge.CoverageLimitId\n\t\tWHERE ISNULL(i_CoverageLimitBridgeId) AND PremiumTransactionAKId<>-1\n\t),\n\tAGG_Group_Count AS (\n\t\tSELECT\n\t\tPremiumTransactionAKId,\n\t\tCoverageLimitId,\n\t\t-- *INF*: COUNT(1)\n\t\tCOUNT(1) AS o_CoverageLimitCount,\n\t\tAuditId\n\t\tFROM FIL_Insert_CoverageLimitBridge\n\t\tGROUP BY PremiumTransactionAKId, CoverageLimitId\n\t),\n\tEXP_Set_MetaData_CoverageLimitBridge AS (\n\t\tSELECT\n\t\tPremiumTransactionAKId,\n\t\tCoverageLimitId,\n\t\to_CoverageLimitCount AS CoverageLimitCount,\n\t\tAuditId AS AuditID,\n\t\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS o_SourceSystemID,\n\t\tSYSDATE AS o_CreatedDate,\n\t\t'N/A' AS o_CoverageLimitControl\n\t\tFROM AGG_Group_Count\n\t),\n\tOUTPUT_CoverageLimitBridge_Insert AS (\n\t\tSELECT\n\t\tAuditID, \n\t\to_SourceSystemID AS SourceSystemID, \n\t\to_CreatedDate AS CreatedDate, \n\t\tPremiumTransactionAKId, \n\t\tCoverageLimitId, \n\t\tCoverageLimitCount AS CoverageLimitIDCount, \n\t\to_CoverageLimitControl AS CoverageLimitControl\n\t\tFROM EXP_Set_MetaData_CoverageLimitBridge\n\t),\n),\nUPD_Insert_CoverageLimit AS (\n\tSELECT\n\tCoverageLimitId1 AS CoverageLimitId, \n\tAuditID3 AS AuditID, \n\tSourceSystemID2 AS SourceSystemID, \n\tCreatedDate2 AS CreatedDate, \n\tCoverageLimitType, \n\tCoverageLimitValue\n\tFROM mplt_Load_Limits_IL_Layer_DCT\n),\nCoverageLimit AS (\n\tSET IDENTITY_INSERT @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageLimit  ON\r\n\tINSERT @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageLimit(CoverageLimitId ,AuditID,SourceSystemID,CreatedDate,CoverageLimitType,CoverageLimitValue) \n\tSELECT S.CoverageLimitId,S.AuditID,S.SourceSystemID, S.CreatedDate,S.CoverageLimitType, S.CoverageLimitValue\n\tFROM UPD_Insert_CoverageLimit S\n),\nCoverageDetailUnderlyingPolicy AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageDetailUnderlyingPolicy\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, PremiumTransactionId, UnderlyingInsuranceCompanyName, UnderlyingPolicyKey, UnderlyingPolicyType, UnderlyingPolicyLimit, UnderlyingPolicyLimitType)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAuditID1 AS AUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\tPremiumTransactionId1 AS PREMIUMTRANSACTIONID, \n\tUNDERLYINGINSURANCECOMPANYNAME, \n\tUnderlyingPolicyKey1 AS UNDERLYINGPOLICYKEY, \n\tUNDERLYINGPOLICYTYPE, \n\tUNDERLYINGPOLICYLIMIT, \n\tUNDERLYINGPOLICYLIMITTYPE\n\tFROM mplt_Load_Limits_IL_Layer_DCT\n),\nCoverageLimitBridge AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.CoverageLimitBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageLimitId, CoverageLimitIDCount, CoverageLimitControl)\n\tSELECT \n\tAuditID2 AS AUDITID, \n\tSourceSystemID1 AS SOURCESYSTEMID, \n\tCreatedDate1 AS CREATEDDATE, \n\tPremiumTransactionAKId1 AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGELIMITID, \n\tCOVERAGELIMITIDCOUNT, \n\tCOVERAGELIMITCONTROL\n\tFROM mplt_Load_Limits_IL_Layer_DCT\n),\nSQ_CoverageDetailUnderlyingPolicy_Offsets AS (\n\tSELECT cdup.CurrentSnapshotFlag, \r\n\tcdup.EffectiveDate, \r\n\tcdup.ExpirationDate, \r\n\tcdup.UnderlyingInsuranceCompanyName, \r\n\tcdup.UnderlyingPolicyKey, \r\n\tcdup.UnderlyingPolicyType, \r\n\tcdup.UnderlyingPolicyLimit, \r\n\tcdup.UnderlyingPolicyLimitType,\r\n\t wptol.PremiumTransactionID \r\n\tFROM\r\n\t CoverageDetailUnderlyingPolicy cdup\r\n\tinner join  WorkPremiumTransactionOffsetLineage  wptol on\r\n\t cdup.PremiumTransactionID=wptol.PreviousPremiumTransactionID\r\n\t and wptol.updateattributeflag=1\r\n\tinner join PremiumTransaction PT on\r\n\t wptol.PremiumTransactionID = PT.PremiumTransactionID \r\n\t and PT.OffsetOnsetCode = 'Offset'\n),\nEXP_CoverageDetailUnderlyingPolicy AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tUnderlyingInsuranceCompanyName,\n\tUnderlyingPolicyKey,\n\tUnderlyingPolicyType,\n\tUnderlyingPolicyLimit,\n\tUnderlyingPolicyLimitType,\n\twrk_PremiumTransactionID\n\tFROM SQ_CoverageDetailUnderlyingPolicy_Offsets\n),\nLKP_CoverageDetailUnderLyingPolicy_Offset AS (\n\tSELECT\n\tCoverageDetailUnderlyingPolicyId,\n\tPremiumTransactionId,\n\tUnderlyingInsuranceCompanyName,\n\tUnderlyingPolicyKey,\n\tUnderlyingPolicyType,\n\tUnderlyingPolicyLimitType\n\tFROM (\n\t\tSELECT CDUP.CoverageDetailUnderlyingPolicyId as CoverageDetailUnderlyingPolicyId, \r\n\t\tCDUP.PremiumTransactionId as PremiumTransactionId, \r\n\t\tCDUP.UnderlyingInsuranceCompanyName as UnderlyingInsuranceCompanyName, \r\n\t\tCDUP.UnderlyingPolicyKey as UnderlyingPolicyKey, \r\n\t\tCDUP.UnderlyingPolicyType as UnderlyingPolicyType, \r\n\t\tCDUP.UnderlyingPolicyLimitType as UnderlyingPolicyLimitType \r\n\t\tFROM CoverageDetailUnderlyingPolicy CDUP\r\n\t\tINNER JOIN\r\n\t\t(SELECT DISTINCT PreviousPremiumTransactionID as PremiumTransactionId FROM  dbo. WorkPremiumTransactionOffsetLineage \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionId FROM  dbo. WorkPremiumTransactionOffsetLineage wpt) A\r\n\t\tON CDUP.PremiumTransactionId = A.PremiumTransactionId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionId,UnderlyingInsuranceCompanyName,UnderlyingPolicyKey,UnderlyingPolicyType,UnderlyingPolicyLimitType ORDER BY CoverageDetailUnderlyingPolicyId) = 1\n),\nFIL_Offsets_Insert_CoverageDetailUnderLyingPolicy AS (\n\tSELECT\n\tLKP_CoverageDetailUnderLyingPolicy_Offset.CoverageDetailUnderlyingPolicyId, \n\tEXP_CoverageDetailUnderlyingPolicy.CurrentSnapshotFlag, \n\tEXP_CoverageDetailUnderlyingPolicy.AuditID, \n\tEXP_CoverageDetailUnderlyingPolicy.EffectiveDate, \n\tEXP_CoverageDetailUnderlyingPolicy.ExpirationDate, \n\tEXP_CoverageDetailUnderlyingPolicy.SourceSystemId, \n\tEXP_CoverageDetailUnderlyingPolicy.CreatedDate, \n\tEXP_CoverageDetailUnderlyingPolicy.ModifiedDate, \n\tEXP_CoverageDetailUnderlyingPolicy.UnderlyingInsuranceCompanyName, \n\tEXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyKey, \n\tEXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyType, \n\tEXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyLimit, \n\tEXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyLimitType, \n\tEXP_CoverageDetailUnderlyingPolicy.wrk_PremiumTransactionID\n\tFROM EXP_CoverageDetailUnderlyingPolicy\n\tLEFT JOIN LKP_CoverageDetailUnderLyingPolicy_Offset\n\tON LKP_CoverageDetailUnderLyingPolicy_Offset.PremiumTransactionId = EXP_CoverageDetailUnderlyingPolicy.wrk_PremiumTransactionID AND LKP_CoverageDetailUnderLyingPolicy_Offset.UnderlyingInsuranceCompanyName = EXP_CoverageDetailUnderlyingPolicy.UnderlyingInsuranceCompanyName AND LKP_CoverageDetailUnderLyingPolicy_Offset.UnderlyingPolicyKey = EXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyKey AND LKP_CoverageDetailUnderLyingPolicy_Offset.UnderlyingPolicyType = EXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyType AND LKP_CoverageDetailUnderLyingPolicy_Offset.UnderlyingPolicyLimitType = EXP_CoverageDetailUnderlyingPolicy.UnderlyingPolicyLimitType\n\tWHERE ISNULL(CoverageDetailUnderlyingPolicyId)\n),\nTGT_CoverageDetailUnderlyingPolicy_Offsets_Insert AS (\n\tINSERT INTO CoverageDetailUnderlyingPolicy\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, PremiumTransactionId, UnderlyingInsuranceCompanyName, UnderlyingPolicyKey, UnderlyingPolicyType, UnderlyingPolicyLimit, UnderlyingPolicyLimitType)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\twrk_PremiumTransactionID AS PREMIUMTRANSACTIONID, \n\tUNDERLYINGINSURANCECOMPANYNAME, \n\tUNDERLYINGPOLICYKEY, \n\tUNDERLYINGPOLICYTYPE, \n\tUNDERLYINGPOLICYLIMIT, \n\tUNDERLYINGPOLICYLIMITTYPE\n\tFROM FIL_Offsets_Insert_CoverageDetailUnderLyingPolicy\n),\nSQ_CoverageDetailUnderlyingPolicy_Deprecated AS (\n\tSELECT cdup.CurrentSnapshotFlag, \r\n\tcdup.EffectiveDate, \r\n\tcdup.ExpirationDate, \r\n\tcdup.UnderlyingInsuranceCompanyName, \r\n\tcdup.UnderlyingPolicyKey, \r\n\tcdup.UnderlyingPolicyType, \r\n\tcdup.UnderlyingPolicyLimit, \r\n\tcdup.UnderlyingPolicyLimitType,\r\n\t wptol.PremiumTransactionID \r\n\tFROM\r\n\t CoverageDetailUnderlyingPolicy cdup\r\n\tinner join  WorkPremiumTransactionOffsetLineage  wptol on\r\n\t cdup.PremiumTransactionID=wptol.PreviousPremiumTransactionID\r\n\t and wptol.updateattributeflag=1\r\n\tinner join PremiumTransaction PT on\r\n\t wptol.PremiumTransactionID = PT.PremiumTransactionID \r\n\t and PT.OffsetOnsetCode = 'Deprecated'\n),\nEXP_CoverageDetailUnderlyingPolicy_Deprecated AS (\n\tSELECT\n\tCurrentSnapshotFlag,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tEffectiveDate,\n\tExpirationDate,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemId,\n\tSYSDATE AS CreatedDate,\n\tSYSDATE AS ModifiedDate,\n\tUnderlyingInsuranceCompanyName,\n\tUnderlyingPolicyKey,\n\tUnderlyingPolicyType,\n\tUnderlyingPolicyLimit,\n\tUnderlyingPolicyLimitType,\n\twrk_PremiumTransactionID\n\tFROM SQ_CoverageDetailUnderlyingPolicy_Deprecated\n),\nLKP_CoverageDetailUnderLyingPolicy_Deprecated AS (\n\tSELECT\n\tCoverageDetailUnderlyingPolicyId,\n\tPremiumTransactionId,\n\tUnderlyingInsuranceCompanyName,\n\tUnderlyingPolicyKey,\n\tUnderlyingPolicyType,\n\tUnderlyingPolicyLimitType\n\tFROM (\n\t\tSELECT CDUP.CoverageDetailUnderlyingPolicyId as CoverageDetailUnderlyingPolicyId, \r\n\t\tCDUP.PremiumTransactionId as PremiumTransactionId, \r\n\t\tCDUP.UnderlyingInsuranceCompanyName as UnderlyingInsuranceCompanyName, \r\n\t\tCDUP.UnderlyingPolicyKey as UnderlyingPolicyKey, \r\n\t\tCDUP.UnderlyingPolicyType as UnderlyingPolicyType, \r\n\t\tCDUP.UnderlyingPolicyLimitType as UnderlyingPolicyLimitType \r\n\t\tFROM CoverageDetailUnderlyingPolicy CDUP\r\n\t\tINNER JOIN\r\n\t\t(SELECT DISTINCT PreviousPremiumTransactionID as PremiumTransactionId FROM  dbo. WorkPremiumTransactionOffsetLineage \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionId FROM  dbo. WorkPremiumTransactionOffsetLineage wpt) A\r\n\t\tON CDUP.PremiumTransactionId = A.PremiumTransactionId\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionId,UnderlyingInsuranceCompanyName,UnderlyingPolicyKey,UnderlyingPolicyType,UnderlyingPolicyLimitType ORDER BY CoverageDetailUnderlyingPolicyId) = 1\n),\nFIL_Deprecated_Insert_CoverageDetailUnderLyingPolicy AS (\n\tSELECT\n\tLKP_CoverageDetailUnderLyingPolicy_Deprecated.CoverageDetailUnderlyingPolicyId, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.CurrentSnapshotFlag, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.AuditID, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.EffectiveDate, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.ExpirationDate, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.SourceSystemId, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.CreatedDate, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.ModifiedDate, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingInsuranceCompanyName, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyKey, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyType, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyLimit, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyLimitType, \n\tEXP_CoverageDetailUnderlyingPolicy_Deprecated.wrk_PremiumTransactionID\n\tFROM EXP_CoverageDetailUnderlyingPolicy_Deprecated\n\tLEFT JOIN LKP_CoverageDetailUnderLyingPolicy_Deprecated\n\tON LKP_CoverageDetailUnderLyingPolicy_Deprecated.PremiumTransactionId = EXP_CoverageDetailUnderlyingPolicy_Deprecated.wrk_PremiumTransactionID AND LKP_CoverageDetailUnderLyingPolicy_Deprecated.UnderlyingInsuranceCompanyName = EXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingInsuranceCompanyName AND LKP_CoverageDetailUnderLyingPolicy_Deprecated.UnderlyingPolicyKey = EXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyKey AND LKP_CoverageDetailUnderLyingPolicy_Deprecated.UnderlyingPolicyType = EXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyType AND LKP_CoverageDetailUnderLyingPolicy_Deprecated.UnderlyingPolicyLimitType = EXP_CoverageDetailUnderlyingPolicy_Deprecated.UnderlyingPolicyLimitType\n\tWHERE ISNULL(CoverageDetailUnderlyingPolicyId)\n),\nTGT_CoverageDetailUnderlyingPolicy_Deprecated_Insert AS (\n\tINSERT INTO CoverageDetailUnderlyingPolicy\n\t(CurrentSnapshotFlag, AuditID, EffectiveDate, ExpirationDate, SourceSystemId, CreatedDate, ModifiedDate, PremiumTransactionId, UnderlyingInsuranceCompanyName, UnderlyingPolicyKey, UnderlyingPolicyType, UnderlyingPolicyLimit, UnderlyingPolicyLimitType)\n\tSELECT \n\tCURRENTSNAPSHOTFLAG, \n\tAUDITID, \n\tEFFECTIVEDATE, \n\tEXPIRATIONDATE, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tMODIFIEDDATE, \n\twrk_PremiumTransactionID AS PREMIUMTRANSACTIONID, \n\tUNDERLYINGINSURANCECOMPANYNAME, \n\tUNDERLYINGPOLICYKEY, \n\tUNDERLYINGPOLICYTYPE, \n\tUNDERLYINGPOLICYLIMIT, \n\tUNDERLYINGPOLICYLIMITTYPE\n\tFROM FIL_Deprecated_Insert_CoverageDetailUnderLyingPolicy\n),\nSQ_CoverageLimitBridge_Insert_Offsets AS (\n\tSELECT CLB.CoverageLimitId, CLB.CoverageLimitIDCount, CLB.CoverageLimitControl, WPTOL.PremiumTransactionAKID \r\n\tFROM\r\n\t WorkPremiumTransactionOffsetLineage WPTOL\r\n\t inner join CoverageLimitBridge CLB on\r\n\t WPTOL.PreviousPremiumTransactionAKID = CLB.PremiumTransactionAKId\r\n\t inner join PremiumTransaction PT on\r\n\t WPTOL.PremiumTransactionID = PT.PremiumTransactionID and PT.OffsetOnsetCode = 'Offset'\r\n\t where\r\n\t WPTOL.UpdateAttributeFlag = 1\n),\nEXP_CoverageLimitBridge_PassThrough_Insert_Offsets AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tCoverageLimitId,\n\tCoverageLimitIDCount,\n\tCoverageLimitControl,\n\tPremiumTransactionAKID AS Offset_PremiumTransactionAKID\n\tFROM SQ_CoverageLimitBridge_Insert_Offsets\n),\nLKP_CoverageLimitBridge_Offset AS (\n\tSELECT\n\tCoverageLimitBridgeId,\n\tPremiumTransactionAKId,\n\tCoverageLimitId\n\tFROM (\n\t\tSELECT CLB.CoverageLimitBridgeId as CoverageLimitBridgeId, \r\n\t\tCLB.PremiumTransactionAKId as PremiumTransactionAKId, \r\n\t\tCLB.CoverageLimitId as CoverageLimitId \r\n\t\tFROM CoverageLimitBridge CLB\r\n\t\tINNER JOIN \r\n\t\t(SELECT DISTINCT PreviousPremiumTransactionAKID as PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage  \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage  ) A\r\n\t\tON CLB.PremiumTransactionAKId = A.PremiumTransactionAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,CoverageLimitId ORDER BY CoverageLimitBridgeId) = 1\n),\nFIL_Offset_Insert_CoverageLimitBridge AS (\n\tSELECT\n\tLKP_CoverageLimitBridge_Offset.CoverageLimitBridgeId, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.AuditID, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.SourceSystemID, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.CreatedDate, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.CoverageLimitId, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.CoverageLimitIDCount, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.CoverageLimitControl, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Offsets.Offset_PremiumTransactionAKID\n\tFROM EXP_CoverageLimitBridge_PassThrough_Insert_Offsets\n\tLEFT JOIN LKP_CoverageLimitBridge_Offset\n\tON LKP_CoverageLimitBridge_Offset.PremiumTransactionAKId = EXP_CoverageLimitBridge_PassThrough_Insert_Offsets.Offset_PremiumTransactionAKID AND LKP_CoverageLimitBridge_Offset.CoverageLimitId = EXP_CoverageLimitBridge_PassThrough_Insert_Offsets.CoverageLimitId\n\tWHERE ISNULL(CoverageLimitBridgeId)\n),\nTGT_CoverageLimitBridge_Insert_Offsets AS (\n\tINSERT INTO CoverageLimitBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageLimitId, CoverageLimitIDCount, CoverageLimitControl)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tOffset_PremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGELIMITID, \n\tCOVERAGELIMITIDCOUNT, \n\tCOVERAGELIMITCONTROL\n\tFROM FIL_Offset_Insert_CoverageLimitBridge\n),\nSQ_CoverageLimitBridge_Insert_Deprecated AS (\n\tSELECT CLB.CoverageLimitId, CLB.CoverageLimitIDCount, CLB.CoverageLimitControl, WPTOL.PremiumTransactionAKID \r\n\tFROM\r\n\t WorkPremiumTransactionOffsetLineage WPTOL\r\n\t inner join CoverageLimitBridge CLB on\r\n\t WPTOL.PreviousPremiumTransactionAKID = CLB.PremiumTransactionAKId\r\n\t inner join PremiumTransaction PT on\r\n\t WPTOL.PremiumTransactionID = PT.PremiumTransactionID and PT.OffsetOnsetCode = 'Deprecated'\r\n\t where\r\n\t WPTOL.UpdateAttributeFlag = 1\n),\nEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated AS (\n\tSELECT\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\t@{pipeline().parameters.SOURCE_SYSTEM_ID} AS SourceSystemID,\n\tSYSDATE AS CreatedDate,\n\tCoverageLimitId,\n\tCoverageLimitIDCount,\n\tCoverageLimitControl,\n\tPremiumTransactionAKID AS Offset_PremiumTransactionAKID\n\tFROM SQ_CoverageLimitBridge_Insert_Deprecated\n),\nLKP_CoverageLimitBridge_Deprecated AS (\n\tSELECT\n\tCoverageLimitBridgeId,\n\tPremiumTransactionAKId,\n\tCoverageLimitId\n\tFROM (\n\t\tSELECT CLB.CoverageLimitBridgeId as CoverageLimitBridgeId, \r\n\t\tCLB.PremiumTransactionAKId as PremiumTransactionAKId, \r\n\t\tCLB.CoverageLimitId as CoverageLimitId \r\n\t\tFROM CoverageLimitBridge CLB\r\n\t\tINNER JOIN \r\n\t\t(SELECT DISTINCT PreviousPremiumTransactionAKID as PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage  \r\n\t\tUNION \r\n\t\tSELECT DISTINCT PremiumTransactionAKID FROM  dbo. WorkPremiumTransactionOffsetLineage  ) A\r\n\t\ton CLB.PremiumTransactionAKId = A.PremiumTransactionAKID\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY PremiumTransactionAKId,CoverageLimitId ORDER BY CoverageLimitBridgeId) = 1\n),\nFIL_Deprecated_Insert_CoverageLimitBridge AS (\n\tSELECT\n\tLKP_CoverageLimitBridge_Deprecated.CoverageLimitBridgeId, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.AuditID, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.SourceSystemID, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.CreatedDate, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.CoverageLimitId, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.CoverageLimitIDCount, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.CoverageLimitControl, \n\tEXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.Offset_PremiumTransactionAKID\n\tFROM EXP_CoverageLimitBridge_PassThrough_Insert_Deprecated\n\tLEFT JOIN LKP_CoverageLimitBridge_Deprecated\n\tON LKP_CoverageLimitBridge_Deprecated.PremiumTransactionAKId = EXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.Offset_PremiumTransactionAKID AND LKP_CoverageLimitBridge_Deprecated.CoverageLimitId = EXP_CoverageLimitBridge_PassThrough_Insert_Deprecated.CoverageLimitId\n\tWHERE ISNULL(CoverageLimitBridgeId)\n),\nTGT_CoverageLimitBridge_Insert_Deprecated AS (\n\tINSERT INTO CoverageLimitBridge\n\t(AuditID, SourceSystemID, CreatedDate, PremiumTransactionAKId, CoverageLimitId, CoverageLimitIDCount, CoverageLimitControl)\n\tSELECT \n\tAUDITID, \n\tSOURCESYSTEMID, \n\tCREATEDDATE, \n\tOffset_PremiumTransactionAKID AS PREMIUMTRANSACTIONAKID, \n\tCOVERAGELIMITID, \n\tCOVERAGELIMITIDCOUNT, \n\tCOVERAGELIMITCONTROL\n\tFROM FIL_Deprecated_Insert_CoverageLimitBridge\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "SOURCE_SYSTEM_ID": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "PTFILTERFORCDUP": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "PolicyDataWarehouse/"
        },
        "annotations": []
    }
}