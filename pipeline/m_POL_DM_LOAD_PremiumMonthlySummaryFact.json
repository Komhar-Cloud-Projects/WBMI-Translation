{
    "name": "m_POL_DM_LOAD_PremiumMonthlySummaryFact",
    "properties": {
        "activities": [
            {
                "name": "m_POL_DM_LOAD_PremiumMonthlySummaryFact",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "linkedServiceName": {
                    "referenceName": "ls_SNOWFLAKE_WBMI",
                    "type": "LinkedServiceReference"
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "Query",
                            "text": "WITH\nSQ_EarnedPremiumTransactionMonthlyFact AS (\n\tSELECT \r\n\tEPTF.AgencyDimID,\r\n\tEPTF.PolicyDimID,\r\n\tEPTF.ContractCustomerDimID,\r\n\tEPTF.PremiumTransactionRunDateID,\r\n\tSUM(MonthlyChangeinDirectEarnedPremium) AS MonthlyChangeinDirectEarnedPremium,\r\n\tSUM(MonthlyChangeinCededEarnedPremium) AS MonthlyChangeinCededEarnedPremium,\r\n\tSUM(MonthlyChangeInDirectUnearnedPremium) AS MonthlyChangeInDirectUnearnedPremium,\r\n\tSUM(MonthlyChangeInCededUnearnedPremium) AS MonthlyChangeInCededUnearnedPremium,\r\n\tEPTF.InsuranceReferenceDimId,\r\n\ta.SalesDivisionDimId,\r\n\tCASE WHEN PCSD.PolicyStatusDescription='Inforce'\r\n\tTHEN 'Y' ELSE 'N' END AS TransactionInforceFlag\r\n\t\r\n\tFROM\r\n\t @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.EarnedPremiumTransactionMonthlyFact EPTF\r\n\t INNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.policy_dim PD\r\n\t on EPTF.PolicyDimID=PD.pol_dim_id\r\n\t INNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CLDRUN\r\n\t ON EPTF.PremiumTransactionRunDateID=CLDRUN.clndr_id\r\n\t INNER JOIN  @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER_V3}.AgencyDim a on a.AgencyDimId=EPTF.AgencyDimId\r\n\t LEFT JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCurrentStatusDim PCSD\r\n\t ON PCSD.EDWPolicyAKId=PD.edw_pol_ak_id\r\n\t AND PCSD.RunDate=CLDRUN.clndr_date\r\n\t WHERE CLDRUN.clndr_date>=@{pipeline().parameters.RUNDATE} @{pipeline().parameters.WHERE_CLAUSE_EP}\r\n\t GROUP BY \r\n\tEPTF.PremiumTransactionRunDateID,\r\n\tEPTF.AgencyDimID,\r\n\tEPTF.PolicyDimID,\r\n\tEPTF.ContractCustomerDimID,\r\n\tEPTF.InsuranceReferenceDimId,\r\n\ta.SalesDivisionDimId,\r\n\tCASE WHEN PCSD.PolicyStatusDescription='Inforce'\r\n\tTHEN 'Y' ELSE 'N' END\n),\nEXP_GetVal_EP AS (\n\tSELECT\n\tAgencyDimID AS i_AgencyDimID,\n\tPolicyDimID AS i_PolicyDimID,\n\tContractCustomerDimID AS i_ContractCustomerDimID,\n\tPremiumTransactionRunDateID AS i_PremiumTransactionRunDateID,\n\tMonthlyChangeinDirectEarnedPremium AS i_MonthlyChangeinDirectEarnedPremium,\n\tMonthlyChangeinCededEarnedPremium AS i_MonthlyChangeinCededEarnedPremium,\n\tMonthlyChangeInDirectUnearnedPremium AS i_MonthlyChangeInDirectUnearnedPremium,\n\tMonthlyChangeInCededUnearnedPremium AS i_MonthlyChangeInCededUnearnedPremium,\n\tInsuranceReferenceDimId AS i_InsuranceReferenceDimId,\n\tSalesDivisionDimId AS i_SalesDivisionDimId,\n\tTransactionInforceFlag AS i_TransactionInforceFlag,\n\ti_PremiumTransactionRunDateID AS o_PremiumTransactionRunDateID,\n\ti_AgencyDimID AS o_AgencyDimID,\n\ti_PolicyDimID AS o_PolicyDimID,\n\ti_ContractCustomerDimID AS o_ContractCustomerDimID,\n\ti_InsuranceReferenceDimId AS o_InsuranceReferenceDimId,\n\ti_SalesDivisionDimId AS o_SalesDivisionDimId,\n\ti_MonthlyChangeinDirectEarnedPremium AS o_MonthlyChangeinDirectEarnedPremium,\n\ti_MonthlyChangeinCededEarnedPremium AS o_MonthlyChangeinCededEarnedPremium,\n\ti_MonthlyChangeInDirectUnearnedPremium AS o_MonthlyDirectUnearnedPremium,\n\ti_MonthlyChangeInCededUnearnedPremium AS o_MonthlyCededUnearnedPremium,\n\t0 AS o_PremiumMasterAgencyCededWrittenCommission,\n\t0 AS o_PremiumMasterAgencyDirectWrittenCommission,\n\t0 AS o_PremiumMasterAuditPremium,\n\t0 AS o_PremiumMasterCededWrittenPremium,\n\t0 AS o_PremiumMasterCollectionWriteOffPremium,\n\t0 AS o_PremiumMasterDirectWrittenPremium,\n\t0 AS o_PremiumMasterReturnedPremium,\n\ti_TransactionInforceFlag AS o_TransactionInforceFlag\n\tFROM SQ_EarnedPremiumTransactionMonthlyFact\n),\nSQ_PremiumMasterFact AS (\n\tSELECT \r\n\tPMF.AgencyDimID,\r\n\tPMF.PolicyDimID,\r\n\tPMF.ContractCustomerDimID,\r\n\tPMF.PremiumMasterRunDateID,\r\n\tSUM(PMF.PremiumMasterDirectWrittenPremium) AS PremiumMasterDirectWrittenPremium,\r\n\tSUM(PMF.PremiumMasterCededWrittenPremium) AS PremiumMasterCededWrittenPremium,\r\n\tSUM(PMF.PremiumMasterAgencyDirectWrittenCommission) AS PremiumMasterAgencyDirectWrittenCommission,\r\n\tSUM(PMF.PremiumMasterAgencyCededWrittenCommission) AS PremiumMasterAgencyCededWrittenCommission,\r\n\tPMF.InsuranceReferenceDimId,\r\n\tPMF.SalesDivisionDimId,\r\n\tSUM(PMF.PremiumMasterAuditPremium) AS PremiumMasterAuditPremium,\r\n\tSUM(PMF.PremiumMasterReturnedPremium) AS PremiumMasterReturnedPremium,\r\n\tSUM(PMF.PremiumMasterCollectionWriteOffPremium) AS PremiumMasterCollectionWriteOffPremium,\r\n\tCASE WHEN PCSD.PolicyStatusDescription='Inforce'\r\n\tTHEN 'Y' ELSE 'N' END AS TransactionInforceFlag\r\n\t\r\n\tFROM\r\n\t@{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumMasterFact PMF\r\n\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.policy_dim PD\r\n\ton PMF.PolicyDimID=PD.pol_dim_id\r\n\tINNER JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CLDRUN\r\n\tON PMF.PremiumMasterRunDateID=CLDRUN.clndr_id\r\n\tLEFT JOIN @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCurrentStatusDim PCSD\r\n\tON PCSD.EDWPolicyAKId=PD.edw_pol_ak_id\r\n\t AND PCSD.RunDate=CLDRUN.clndr_date\r\n\tWHERE CLDRUN.clndr_date>=@{pipeline().parameters.RUNDATE} \r\n\tand not exists (select 1 from @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumTransactionTypeDim PTTD \r\n\t                      where PMF.PremiumTransactionTypeDimID = PTTD.PremiumTransactionTypeDimID \r\n\t                      and PTTD.PremiumTypeCode = 'C' AND PTTD.ReasonAmendedCode in ('CWO','COL'))\r\n\t@{pipeline().parameters.WHERE_CLAUSE_PMF}\r\n\tGROUP BY \r\n\tPMF.PremiumMasterRunDateID,\r\n\tPMF.AgencyDimID,\r\n\tPMF.PolicyDimID,\r\n\tPMF.ContractCustomerDimID,\r\n\tPMF.InsuranceReferenceDimId,\r\n\tPMF.SalesDivisionDimId,\r\n\tCASE WHEN PCSD.PolicyStatusDescription='Inforce'\r\n\tTHEN 'Y' ELSE 'N' END\n),\nEXP_GetVal_PM AS (\n\tSELECT\n\tAgencyDimID AS i_AgencyDimID,\n\tPolicyDimID AS i_PolicyDimID,\n\tContractCustomerDimID AS i_ContractCustomerDimID,\n\tPremiumMasterRunDateID AS i_PremiumMasterRunDateID,\n\tPremiumMasterDirectWrittenPremium AS i_PremiumMasterDirectWrittenPremium,\n\tPremiumMasterCededWrittenPremium AS i_PremiumMasterCededWrittenPremium,\n\tPremiumMasterAgencyDirectWrittenCommission AS i_PremiumMasterAgencyDirectWrittenCommission,\n\tPremiumMasterAgencyCededWrittenCommission AS i_PremiumMasterAgencyCededWrittenCommission,\n\tInsuranceReferenceDimId AS i_InsuranceReferenceDimId,\n\tSalesDivisionDimId AS i_SalesDivisionDimId,\n\tPremiumMasterAuditPremium AS i_PremiumMasterAuditPremium,\n\tPremiumMasterReturnedPremium AS i_PremiumMasterReturnedPremium,\n\tPremiumMasterCollectionWriteOffPremium AS i_PremiumMasterCollectionWriteOffPremium,\n\tTransactionInforceFlag AS i_TransactionInforceFlag,\n\ti_PremiumMasterRunDateID AS o_PremiumMasterRunDateID,\n\ti_AgencyDimID AS o_AgencyDimID,\n\ti_PolicyDimID AS o_PolicyDimID,\n\ti_ContractCustomerDimID AS o_ContractCustomerDimID,\n\ti_InsuranceReferenceDimId AS o_InsuranceReferenceDimId,\n\ti_SalesDivisionDimId AS o_SalesDivisionDimId,\n\t0 AS o_MonthlyChangeinDirectEarnedPremium,\n\t0 AS o_MonthlyChangeinCededEarnedPremium,\n\t0 AS o_MonthlyDirectUnearnedPremium,\n\t0 AS o_MonthlyCededUnearnedPremium,\n\ti_PremiumMasterAgencyCededWrittenCommission AS o_PremiumMasterAgencyCededWrittenCommission,\n\ti_PremiumMasterAgencyDirectWrittenCommission AS o_PremiumMasterAgencyDirectWrittenCommission,\n\ti_PremiumMasterAuditPremium AS o_PremiumMasterAuditPremium,\n\ti_PremiumMasterCededWrittenPremium AS o_PremiumMasterCededWrittenPremium,\n\ti_PremiumMasterCollectionWriteOffPremium AS o_PremiumMasterCollectionWriteOffPremium,\n\ti_PremiumMasterDirectWrittenPremium AS o_PremiumMasterDirectWrittenPremium,\n\ti_PremiumMasterReturnedPremium AS o_PremiumMasterReturnedPremium,\n\ti_TransactionInforceFlag AS o_TransactionInforceFlag\n\tFROM SQ_PremiumMasterFact\n),\nUnion_EP_PM AS (\n\tSELECT o_PremiumTransactionRunDateID AS SnapshotDateID, o_AgencyDimID AS AgencyDimID, o_PolicyDimID AS PolicyDimId, o_ContractCustomerDimID AS ContractCustomerDimID, o_InsuranceReferenceDimId AS InsuranceReferenceDimId, o_SalesDivisionDimId AS SalesDivisionDimID, o_MonthlyChangeinDirectEarnedPremium AS MonthlyChangeinDirectEarnedPremium, o_MonthlyChangeinCededEarnedPremium AS MonthlyChangeinCededEarnedPremium, o_MonthlyDirectUnearnedPremium AS MonthlyChangeInDirectUnearnedPremium, o_MonthlyCededUnearnedPremium AS MonthlyChangeInCededUnearnedPremium, o_PremiumMasterAgencyCededWrittenCommission AS PremiumMasterAgencyCededWrittenCommission, o_PremiumMasterAgencyDirectWrittenCommission AS PremiumMasterAgencyDirectWrittenCommission, o_PremiumMasterAuditPremium AS PremiumMasterAuditPremium, o_PremiumMasterCededWrittenPremium AS PremiumMasterCededWrittenPremium, o_PremiumMasterCollectionWriteOffPremium AS PremiumMasterCollectionWriteOffPremium, o_PremiumMasterDirectWrittenPremium AS PremiumMasterDirectWrittenPremium, o_PremiumMasterReturnedPremium AS PremiumMasterReturnedPremium, o_TransactionInforceFlag AS TransactionInforceFlag\n\tFROM EXP_GetVal_EP\n\tUNION\n\tSELECT o_PremiumMasterRunDateID AS SnapshotDateID, o_AgencyDimID AS AgencyDimID, o_PolicyDimID AS PolicyDimId, o_ContractCustomerDimID AS ContractCustomerDimID, o_InsuranceReferenceDimId AS InsuranceReferenceDimId, o_SalesDivisionDimId AS SalesDivisionDimID, o_MonthlyChangeinDirectEarnedPremium AS MonthlyChangeinDirectEarnedPremium, o_MonthlyChangeinCededEarnedPremium AS MonthlyChangeinCededEarnedPremium, o_MonthlyDirectUnearnedPremium AS MonthlyChangeInDirectUnearnedPremium, o_MonthlyCededUnearnedPremium AS MonthlyChangeInCededUnearnedPremium, o_PremiumMasterAgencyCededWrittenCommission AS PremiumMasterAgencyCededWrittenCommission, o_PremiumMasterAgencyDirectWrittenCommission AS PremiumMasterAgencyDirectWrittenCommission, o_PremiumMasterAuditPremium AS PremiumMasterAuditPremium, o_PremiumMasterCededWrittenPremium AS PremiumMasterCededWrittenPremium, o_PremiumMasterCollectionWriteOffPremium AS PremiumMasterCollectionWriteOffPremium, o_PremiumMasterDirectWrittenPremium AS PremiumMasterDirectWrittenPremium, o_PremiumMasterReturnedPremium AS PremiumMasterReturnedPremium, o_TransactionInforceFlag AS TransactionInforceFlag\n\tFROM EXP_GetVal_PM\n),\nSRT_Records AS (\n\tSELECT\n\tSnapshotDateID, \n\tAgencyDimID, \n\tPolicyDimId, \n\tContractCustomerDimID, \n\tInsuranceReferenceDimId, \n\tSalesDivisionDimID, \n\tMonthlyChangeinDirectEarnedPremium, \n\tMonthlyChangeinCededEarnedPremium, \n\tMonthlyChangeInDirectUnearnedPremium, \n\tMonthlyChangeInCededUnearnedPremium, \n\tPremiumMasterAgencyCededWrittenCommission, \n\tPremiumMasterAgencyDirectWrittenCommission, \n\tPremiumMasterAuditPremium, \n\tPremiumMasterCededWrittenPremium, \n\tPremiumMasterCollectionWriteOffPremium, \n\tPremiumMasterDirectWrittenPremium, \n\tPremiumMasterReturnedPremium, \n\tTransactionInforceFlag\n\tFROM Union_EP_PM\n\tORDER BY SnapshotDateID ASC, AgencyDimID ASC, PolicyDimId ASC, ContractCustomerDimID ASC, InsuranceReferenceDimId ASC, SalesDivisionDimID ASC\n),\nAGG_EP_PM AS (\n\tSELECT\n\tSnapshotDateID, \n\tAgencyDimID, \n\tPolicyDimId, \n\tContractCustomerDimID, \n\tInsuranceReferenceDimId, \n\tSalesDivisionDimID, \n\tMonthlyChangeinDirectEarnedPremium, \n\tROUND(SUM(MonthlyChangeinDirectEarnedPremium), 4) AS MonthlyChangeinDirectEarnedPremium_out, \n\tMonthlyChangeinCededEarnedPremium, \n\tROUND(SUM(MonthlyChangeinCededEarnedPremium), 4) AS MonthlyChangeinCededEarnedPremium_out, \n\tMonthlyChangeInDirectUnearnedPremium, \n\tROUND(SUM(MonthlyChangeInDirectUnearnedPremium), 4) AS MonthlyChangeInDirectUnearnedPremium_out, \n\tMonthlyChangeInCededUnearnedPremium, \n\tROUND(SUM(MonthlyChangeInCededUnearnedPremium), 4) AS MonthlyChangeInCededUnearnedPremium_out, \n\tPremiumMasterAgencyCededWrittenCommission, \n\tROUND(SUM(PremiumMasterAgencyCededWrittenCommission), 4) AS PremiumMasterAgencyCededWrittenCommission_out, \n\tPremiumMasterAgencyDirectWrittenCommission, \n\tROUND(SUM(PremiumMasterAgencyDirectWrittenCommission), 4) AS PremiumMasterAgencyDirectWrittenCommission_out, \n\tPremiumMasterAuditPremium, \n\tROUND(SUM(PremiumMasterAuditPremium), 4) AS PremiumMasterAuditPremium_out, \n\tPremiumMasterCededWrittenPremium, \n\tROUND(SUM(PremiumMasterCededWrittenPremium), 4) AS PremiumMasterCededWrittenPremium_out, \n\tPremiumMasterCollectionWriteOffPremium, \n\tROUND(SUM(PremiumMasterCollectionWriteOffPremium), 4) AS PremiumMasterCollectionWriteOffPremium_out, \n\tPremiumMasterDirectWrittenPremium, \n\tROUND(SUM(PremiumMasterDirectWrittenPremium), 4) AS PremiumMasterDirectWrittenPremium_out, \n\tPremiumMasterReturnedPremium, \n\tROUND(SUM(PremiumMasterReturnedPremium), 4) AS PremiumMasterReturnedPremium_out, \n\tTransactionInforceFlag\n\tFROM SRT_Records\n\tGROUP BY SnapshotDateID, AgencyDimID, PolicyDimId, ContractCustomerDimID, InsuranceReferenceDimId, SalesDivisionDimID\n),\nLKP_InsuranceReferenceDim AS (\n\tSELECT\n\tProductCode,\n\tInsuranceReferenceLineOfBusinessCode,\n\tStrategicProfitCenterCode,\n\tInsuranceReferenceDimId\n\tFROM (\n\t\tSELECT \n\t\t\tProductCode,\n\t\t\tInsuranceReferenceLineOfBusinessCode,\n\t\t\tStrategicProfitCenterCode,\n\t\t\tInsuranceReferenceDimId\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.InsuranceReferenceDim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY InsuranceReferenceDimId ORDER BY ProductCode) = 1\n),\nLKP_Policy_Dim AS (\n\tSELECT\n\tpol_key,\n\tProgramCode,\n\tAssociationCode,\n\tpol_exp_date,\n\tpol_issue_code,\n\tpol_mod,\n\tpol_eff_date,\n\tpol_enter_date,\n\tedw_pol_ak_id,\n\tpol_dim_id\n\tFROM (\n\t\tSELECT \n\t\t\tpol_key,\n\t\t\tProgramCode,\n\t\t\tAssociationCode,\n\t\t\tpol_exp_date,\n\t\t\tpol_issue_code,\n\t\t\tpol_mod,\n\t\t\tpol_eff_date,\n\t\t\tpol_enter_date,\n\t\t\tedw_pol_ak_id,\n\t\t\tpol_dim_id\n\t\tFROM @{pipeline().parameters.TARGET_DATABASE_NAME}.@{pipeline().parameters.TARGET_TABLE_OWNER}.policy_dim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY pol_dim_id ORDER BY pol_key) = 1\n),\nLKP_calendar_dim AS (\n\tSELECT\n\tCalendarDate,\n\tclndr_id\n\tFROM (\n\t\tSELECT \n\t\t\tCalendarDate,\n\t\t\tclndr_id\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY clndr_id ORDER BY CalendarDate) = 1\n),\nLKP_PolicyCurrentStatusDim AS (\n\tSELECT\n\tPolicyCancellationDate,\n\tPolicyStatusDescription,\n\tRunDate,\n\tEDWPolicyAKId\n\tFROM (\n\t\tSELECT \n\t\t\tPolicyCancellationDate,\n\t\t\tPolicyStatusDescription,\n\t\t\tRunDate,\n\t\t\tEDWPolicyAKId\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PolicyCurrentStatusDim\n\t\tWHERE RunDate>=@{pipeline().parameters.RUNDATE}\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY RunDate,EDWPolicyAKId ORDER BY PolicyCancellationDate) = 1\n),\nEXP_Target AS (\n\tSELECT\n\tLKP_Policy_Dim.pol_key AS lkp_pol_key,\n\tLKP_Policy_Dim.ProgramCode AS lkp_ProgramCode,\n\tLKP_InsuranceReferenceDim.ProductCode AS lkp_ProductCode,\n\tLKP_InsuranceReferenceDim.InsuranceReferenceLineOfBusinessCode AS lkp_InsuranceReferenceLineOfBusinessCode,\n\tLKP_InsuranceReferenceDim.StrategicProfitCenterCode AS lkp_StrategicProfitCenterCode,\n\tLKP_Policy_Dim.AssociationCode AS lkp_assoc_code,\n\tLKP_Policy_Dim.pol_exp_date AS lkp_pol_exp_date,\n\tLKP_PolicyCurrentStatusDim.PolicyCancellationDate AS lkp_PolicyCancellationDate,\n\tLKP_PolicyCurrentStatusDim.PolicyStatusDescription AS lkp_PolicyStatusDescription,\n\tLKP_Policy_Dim.pol_issue_code AS lkp_pol_issue_code,\n\tLKP_Policy_Dim.pol_mod AS lkp_pol_mod,\n\tLKP_Policy_Dim.pol_eff_date AS lkp_pol_eff_date,\n\tLKP_Policy_Dim.pol_enter_date AS lkp_pol_enter_date,\n\tLKP_calendar_dim.CalendarDate AS lkp_CalendarDate,\n\t@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AuditID,\n\tAGG_EP_PM.SnapshotDateID,\n\tAGG_EP_PM.AgencyDimID,\n\tAGG_EP_PM.PolicyDimId,\n\tAGG_EP_PM.ContractCustomerDimID,\n\tAGG_EP_PM.InsuranceReferenceDimId,\n\tAGG_EP_PM.SalesDivisionDimID,\n\tAGG_EP_PM.MonthlyChangeinDirectEarnedPremium_out AS MonthlyChangeinDirectEarnedPremium,\n\tAGG_EP_PM.MonthlyChangeinCededEarnedPremium_out AS MonthlyChangeinCededEarnedPremium,\n\tAGG_EP_PM.MonthlyChangeInDirectUnearnedPremium_out AS MonthlyChangeInDirectUnearnedPremium,\n\tAGG_EP_PM.MonthlyChangeInCededUnearnedPremium_out AS MonthlyChangeInCededUnearnedPremium,\n\tAGG_EP_PM.PremiumMasterAgencyCededWrittenCommission_out AS PremiumMasterAgencyCededWrittenCommission,\n\tAGG_EP_PM.PremiumMasterAgencyDirectWrittenCommission_out AS PremiumMasterAgencyDirectWrittenCommission,\n\tAGG_EP_PM.PremiumMasterAuditPremium_out AS PremiumMasterAuditPremium,\n\tAGG_EP_PM.PremiumMasterCededWrittenPremium_out AS PremiumMasterCededWrittenPremium,\n\tAGG_EP_PM.PremiumMasterCollectionWriteOffPremium_out AS PremiumMasterCollectionWriteOffPremium,\n\tAGG_EP_PM.PremiumMasterDirectWrittenPremium_out AS PremiumMasterDirectWrittenPremium,\n\tAGG_EP_PM.PremiumMasterReturnedPremium_out AS PremiumMasterReturnedPremium,\n\tAGG_EP_PM.TransactionInforceFlag,\n\t-- *INF*: LTRIM(RTRIM(lkp_pol_key))\n\tLTRIM(RTRIM(lkp_pol_key)) AS v_pol_key,\n\t-- *INF*: LTRIM(RTRIM(lkp_ProgramCode))\n\tLTRIM(RTRIM(lkp_ProgramCode)) AS v_ProgramCode,\n\t-- *INF*: LTRIM(RTRIM(lkp_ProductCode))\n\tLTRIM(RTRIM(lkp_ProductCode)) AS v_ProductCode,\n\t-- *INF*: LTRIM(RTRIM(lkp_InsuranceReferenceLineOfBusinessCode))\n\tLTRIM(RTRIM(lkp_InsuranceReferenceLineOfBusinessCode)) AS v_InsuranceReferenceLineOfBusinessCode,\n\t-- *INF*: LTRIM(RTRIM(lkp_assoc_code))\n\tLTRIM(RTRIM(lkp_assoc_code)) AS v_assoc_code,\n\tv_pol_key AS v_DistinctPolicyKeyCounter,\n\tv_pol_key||'/'||v_ProductCode AS v_DistinctPolicyProductCounter,\n\tv_pol_key||'/'||v_InsuranceReferenceLineOfBusinessCode AS v_DistinctPolicyLineOfBusinessCounter,\n\tv_pol_key||'/'||v_ProgramCode AS v_DistinctPolicyProgramCounter,\n\tv_pol_key||'/'||v_assoc_code AS v_DistinctPolicyAssociationCounter,\n\tlkp_CalendarDate AS v_RunDate,\n\t-- *INF*: IIF(TransactionInforceFlag='Y',v_DistinctPolicyKeyCounter,NULL)\n\tIFF(TransactionInforceFlag = 'Y', v_DistinctPolicyKeyCounter, NULL) AS o_InforceDistinctPolicyCounter,\n\t-- *INF*: IIF(lkp_pol_exp_date>ADD_TO_DATE(v_RunDate,'MM',-1) AND lkp_pol_exp_date<=v_RunDate,v_DistinctPolicyKeyCounter,NULL)\n\tIFF(lkp_pol_exp_date > ADD_TO_DATE(v_RunDate, 'MM', - 1) AND lkp_pol_exp_date <= v_RunDate, v_DistinctPolicyKeyCounter, NULL) AS o_ExpiredPolicyOfferingCounter,\n\t-- *INF*: IIF(lkp_PolicyStatusDescription='Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate,'MM')=GET_DATE_PART(v_RunDate,'MM'),v_DistinctPolicyKeyCounter,NULL)\n\tIFF(lkp_PolicyStatusDescription = 'Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate, 'MM') = GET_DATE_PART(v_RunDate, 'MM'), v_DistinctPolicyKeyCounter, NULL) AS o_CancelledPolicyCounter,\n\t-- *INF*: IIF(TransactionInforceFlag='Y' AND lkp_pol_issue_code='N' ,v_DistinctPolicyKeyCounter,NULL)\n\tIFF(TransactionInforceFlag = 'Y' AND lkp_pol_issue_code = 'N', v_DistinctPolicyKeyCounter, NULL) AS o_NewInforceDistinctPolicyCounter,\n\t-- *INF*: IIF(\r\n\t-- ((TRUNC(lkp_pol_eff_date,'MM')<=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')=TRUNC(v_RunDate,'MM')) OR (TRUNC(lkp_pol_eff_date,'MM')=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')<=TRUNC(v_RunDate,'MM'))) AND lkp_pol_issue_code='N',v_DistinctPolicyKeyCounter,NULL\r\n\t-- )\n\tIFF(( ( TRUNC(lkp_pol_eff_date, 'MM') <= TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') = TRUNC(v_RunDate, 'MM') ) OR ( TRUNC(lkp_pol_eff_date, 'MM') = TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') <= TRUNC(v_RunDate, 'MM') ) ) AND lkp_pol_issue_code = 'N', v_DistinctPolicyKeyCounter, NULL) AS o_NewPolicyCounterUsingBusinessLogic,\n\t-- *INF*: IIF((lkp_pol_issue_code='N') AND (lkp_PolicyStatusDescription='Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate,'MM')=GET_DATE_PART(v_RunDate,'MM')),v_DistinctPolicyKeyCounter,NULL)\n\tIFF(( lkp_pol_issue_code = 'N' ) AND ( lkp_PolicyStatusDescription = 'Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate, 'MM') = GET_DATE_PART(v_RunDate, 'MM') ), v_DistinctPolicyKeyCounter, NULL) AS o_NewOffsetCounterUsingBusinessLogic,\n\t-- *INF*: IIF(\r\n\t-- ((TRUNC(lkp_pol_eff_date,'MM')<=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')=TRUNC(v_RunDate,'MM')) OR (TRUNC(lkp_pol_eff_date,'MM')=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')<=TRUNC(v_RunDate,'MM'))) AND IN(lkp_pol_issue_code,'N' ,'R'),v_DistinctPolicyKeyCounter,NULL\r\n\t-- )\n\tIFF(( ( TRUNC(lkp_pol_eff_date, 'MM') <= TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') = TRUNC(v_RunDate, 'MM') ) OR ( TRUNC(lkp_pol_eff_date, 'MM') = TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') <= TRUNC(v_RunDate, 'MM') ) ) AND IN(lkp_pol_issue_code, 'N', 'R'), v_DistinctPolicyKeyCounter, NULL) AS o_IssuedPolicyCounter,\n\t-- *INF*: IIF(IN(lkp_pol_issue_code,'N','R') AND (lkp_PolicyStatusDescription='Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate,'MM')=GET_DATE_PART(v_RunDate,'MM')),v_DistinctPolicyKeyCounter,NULL)\n\tIFF(IN(lkp_pol_issue_code, 'N', 'R') AND ( lkp_PolicyStatusDescription = 'Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate, 'MM') = GET_DATE_PART(v_RunDate, 'MM') ), v_DistinctPolicyKeyCounter, NULL) AS o_IssuedOffsetCounterUsingBusinessLogic,\n\t-- *INF*: IIF(\r\n\t-- ((TRUNC(lkp_pol_eff_date,'MM')<=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')=TRUNC(v_RunDate,'MM')) OR (TRUNC(lkp_pol_eff_date,'MM')=TRUNC(v_RunDate,'MM') AND TRUNC(lkp_pol_enter_date,'MM')<=TRUNC(v_RunDate,'MM'))) AND lkp_pol_issue_code='R' ,v_DistinctPolicyKeyCounter,NULL\r\n\t-- )\n\tIFF(( ( TRUNC(lkp_pol_eff_date, 'MM') <= TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') = TRUNC(v_RunDate, 'MM') ) OR ( TRUNC(lkp_pol_eff_date, 'MM') = TRUNC(v_RunDate, 'MM') AND TRUNC(lkp_pol_enter_date, 'MM') <= TRUNC(v_RunDate, 'MM') ) ) AND lkp_pol_issue_code = 'R', v_DistinctPolicyKeyCounter, NULL) AS o_RenewedPolicyCounter,\n\t-- *INF*: IIF(lkp_pol_issue_code='N',PremiumMasterDirectWrittenPremium,NULL)\n\tIFF(lkp_pol_issue_code = 'N', PremiumMasterDirectWrittenPremium, NULL) AS o_NewBusinessDirectWrittenPremiumUsingBusinesLogic,\n\t-- *INF*: IIF(lkp_pol_issue_code='N',PremiumMasterDirectWrittenPremium+PremiumMasterCollectionWriteOffPremium,NULL)\n\tIFF(lkp_pol_issue_code = 'N', PremiumMasterDirectWrittenPremium + PremiumMasterCollectionWriteOffPremium, NULL) AS o_NewBusinessProductionPremiumUsingBusinesLogic,\n\t-- *INF*: IIF(lkp_pol_issue_code='R',PremiumMasterDirectWrittenPremium,NULL)\n\tIFF(lkp_pol_issue_code = 'R', PremiumMasterDirectWrittenPremium, NULL) AS o_RenewedDirectWrittenPremium,\n\t-- *INF*: IIF(lkp_PolicyStatusDescription='Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate,'MM')=GET_DATE_PART(v_RunDate,'MM'),PremiumMasterDirectWrittenPremium,NULL)\n\tIFF(lkp_PolicyStatusDescription = 'Cancelled' AND GET_DATE_PART(lkp_PolicyCancellationDate, 'MM') = GET_DATE_PART(v_RunDate, 'MM'), PremiumMasterDirectWrittenPremium, NULL) AS o_CancelledDirectWrittenPremium,\n\t-- *INF*: IIF(lkp_pol_exp_date>ADD_TO_DATE(v_RunDate,'MM',-1) AND lkp_pol_exp_date<=v_RunDate,PremiumMasterDirectWrittenPremium,NULL)\n\tIFF(lkp_pol_exp_date > ADD_TO_DATE(v_RunDate, 'MM', - 1) AND lkp_pol_exp_date <= v_RunDate, PremiumMasterDirectWrittenPremium, NULL) AS o_ExpiredDirectWrittenPremium\n\tFROM AGG_EP_PM\n\tLEFT JOIN LKP_InsuranceReferenceDim\n\tON LKP_InsuranceReferenceDim.InsuranceReferenceDimId = AGG_EP_PM.InsuranceReferenceDimId\n\tLEFT JOIN LKP_PolicyCurrentStatusDim\n\tON LKP_PolicyCurrentStatusDim.RunDate = LKP_calendar_dim.CalendarDate AND LKP_PolicyCurrentStatusDim.EDWPolicyAKId = LKP_Policy_Dim.edw_pol_ak_id\n\tLEFT JOIN LKP_Policy_Dim\n\tON LKP_Policy_Dim.pol_dim_id = AGG_EP_PM.PolicyDimId\n\tLEFT JOIN LKP_calendar_dim\n\tON LKP_calendar_dim.clndr_id = AGG_EP_PM.SnapshotDateID\n),\nLKP_PremiumMonthlySummaryFact AS (\n\tSELECT\n\tPremiumMonthlySummaryFactID,\n\tSnapshotDateID,\n\tAgencyDimID,\n\tPolicyDimId,\n\tContractCustomerDimID,\n\tInsuranceReferenceDimId,\n\tSalesDivisionDimID\n\tFROM (\n\t\tSELECT \r\n\t\tPremiumMonthlySummaryFactID AS PremiumMonthlySummaryFactID,\r\n\t\tSnapshotDateID AS SnapshotDateID,\r\n\t\tAgencyDimID AS AgencyDimID,\r\n\t\tPolicyDimId AS PolicyDimId,\r\n\t\tContractCustomerDimID AS ContractCustomerDimID,\r\n\t\tInsuranceReferenceDimId AS InsuranceReferenceDimId,\r\n\t\tSalesDivisionDimID AS SalesDivisionDimID\r\n\t\tFROM @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumMonthlySummaryFact PMSF\r\n\t\tINNER JOIN @{pipeline().parameters.TARGET_TABLE_OWNER}.calendar_dim CLDRUN\r\n\t\tON PMSF.SnapshotDateID=CLDRUN.clndr_id\r\n\t\tAND CLDRUN.clndr_date>=@{pipeline().parameters.RUNDATE}\r\n\t\t@{pipeline().parameters.WHERE_CLAUSE_LKP}\n\t)\n\tQUALIFY ROW_NUMBER() OVER (PARTITION BY SnapshotDateID,AgencyDimID,PolicyDimId,ContractCustomerDimID,InsuranceReferenceDimId,SalesDivisionDimID ORDER BY PremiumMonthlySummaryFactID) = 1\n),\nRTR_INSERT_UPDATE AS (\n\tSELECT\n\tLKP_PremiumMonthlySummaryFact.PremiumMonthlySummaryFactID,\n\tEXP_Target.AuditID,\n\tEXP_Target.SnapshotDateID,\n\tEXP_Target.AgencyDimID,\n\tEXP_Target.PolicyDimId,\n\tEXP_Target.ContractCustomerDimID,\n\tEXP_Target.InsuranceReferenceDimId,\n\tEXP_Target.SalesDivisionDimID,\n\tEXP_Target.MonthlyChangeinDirectEarnedPremium,\n\tEXP_Target.MonthlyChangeinCededEarnedPremium,\n\tEXP_Target.MonthlyChangeInDirectUnearnedPremium,\n\tEXP_Target.MonthlyChangeInCededUnearnedPremium,\n\tEXP_Target.PremiumMasterAgencyCededWrittenCommission,\n\tEXP_Target.PremiumMasterAgencyDirectWrittenCommission,\n\tEXP_Target.PremiumMasterAuditPremium,\n\tEXP_Target.PremiumMasterCededWrittenPremium,\n\tEXP_Target.PremiumMasterCollectionWriteOffPremium,\n\tEXP_Target.PremiumMasterDirectWrittenPremium,\n\tEXP_Target.PremiumMasterReturnedPremium,\n\tEXP_Target.TransactionInforceFlag,\n\tEXP_Target.o_InforceDistinctPolicyCounter AS InforceDistinctPolicyCounter,\n\tEXP_Target.o_ExpiredPolicyOfferingCounter AS ExpiredPolicyOfferingCounter,\n\tEXP_Target.o_CancelledPolicyCounter AS CancelledPolicyCounter,\n\tEXP_Target.o_NewInforceDistinctPolicyCounter AS NewInforceDistinctPolicyCounter,\n\tEXP_Target.o_NewPolicyCounterUsingBusinessLogic AS NewPolicyCounterUsingBusinessLogic,\n\tEXP_Target.o_NewOffsetCounterUsingBusinessLogic AS NewOffsetCounterUsingBusinessLogic,\n\tEXP_Target.o_IssuedPolicyCounter AS IssuedPolicyCounter,\n\tEXP_Target.o_IssuedOffsetCounterUsingBusinessLogic AS IssuedOffsetCounterUsingBusinessLogic,\n\tEXP_Target.o_RenewedPolicyCounter AS RenewedPolicyCounter,\n\tEXP_Target.o_NewBusinessDirectWrittenPremiumUsingBusinesLogic AS NewBusinessDirectWrittenPremiumUsingBusinesLogic,\n\tEXP_Target.o_NewBusinessProductionPremiumUsingBusinesLogic AS NewBusinessProductionPremiumUsingBusinesLogic,\n\tEXP_Target.o_RenewedDirectWrittenPremium AS RenewedDirectWrittenPremium,\n\tEXP_Target.o_CancelledDirectWrittenPremium AS CancelledDirectWrittenPremium,\n\tEXP_Target.o_ExpiredDirectWrittenPremium AS ExpiredDirectWrittenPremium\n\tFROM EXP_Target\n\tLEFT JOIN LKP_PremiumMonthlySummaryFact\n\tON LKP_PremiumMonthlySummaryFact.SnapshotDateID = EXP_Target.SnapshotDateID AND LKP_PremiumMonthlySummaryFact.AgencyDimID = EXP_Target.AgencyDimID AND LKP_PremiumMonthlySummaryFact.PolicyDimId = EXP_Target.PolicyDimId AND LKP_PremiumMonthlySummaryFact.ContractCustomerDimID = EXP_Target.ContractCustomerDimID AND LKP_PremiumMonthlySummaryFact.InsuranceReferenceDimId = EXP_Target.InsuranceReferenceDimId AND LKP_PremiumMonthlySummaryFact.SalesDivisionDimID = EXP_Target.SalesDivisionDimID\n),\nRTR_INSERT_UPDATE_INSERT AS (SELECT * FROM RTR_INSERT_UPDATE WHERE ISNULL(PremiumMonthlySummaryFactID)),\nRTR_INSERT_UPDATE_DEFAULT1 AS (SELECT * FROM RTR_INSERT_UPDATE WHERE NOT ( (ISNULL(PremiumMonthlySummaryFactID)) )),\nPremiumMonthlySummaryFact_INSERT AS (\n\tINSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumMonthlySummaryFact\n\t(AuditId, SnapshotDateId, InsuranceReferenceDimId, PolicyDimId, ContractCustomerDimId, SalesDivisionDimId, AgencyDimId, TransactionInforceFlag, MonthlyChangeInDirectEarnedPremium, PremiumMasterDirectWrittenPremium, MonthlyChangeinCededEarnedPremium, MonthlyChangeInDirectUnearnedPremium, MonthlyChangeInCededUnearnedPremium, PremiumMasterAuditPremium, PremiumMasterCededWrittenPremium, PremiumMasterCollectionWriteOffPremium, InforceDistinctPolicyCounter, ExpiredPolicyOfferingCounter, CancelledPolicyCounter, NewInforceDistinctPolicyCounter, NewPolicyCounterUsingBusinessLogic, NewOffsetCounterUsingBusinessLogic, IssuedPolicyCounter, IssuedOffsetCounterUsingBusinessLogic, RenewedPolicyCounter, NewBusinessDirectWrittenPremiumUsingBusinesLogic, NewBusinessProductionPremiumUsingBusinesLogic, RenewedDirectWrittenPremium, CancelledDirectWrittenPremium, ExpiredDirectWrittenPremium)\n\tSELECT \n\tAuditID AS AUDITID, \n\tSnapshotDateID AS SNAPSHOTDATEID, \n\tINSURANCEREFERENCEDIMID, \n\tPOLICYDIMID, \n\tContractCustomerDimID AS CONTRACTCUSTOMERDIMID, \n\tSalesDivisionDimID AS SALESDIVISIONDIMID, \n\tAgencyDimID AS AGENCYDIMID, \n\tTRANSACTIONINFORCEFLAG, \n\tMonthlyChangeinDirectEarnedPremium AS MONTHLYCHANGEINDIRECTEARNEDPREMIUM, \n\tPREMIUMMASTERDIRECTWRITTENPREMIUM, \n\tMONTHLYCHANGEINCEDEDEARNEDPREMIUM, \n\tMONTHLYCHANGEINDIRECTUNEARNEDPREMIUM, \n\tMONTHLYCHANGEINCEDEDUNEARNEDPREMIUM, \n\tPREMIUMMASTERAUDITPREMIUM, \n\tPREMIUMMASTERCEDEDWRITTENPREMIUM, \n\tPREMIUMMASTERCOLLECTIONWRITEOFFPREMIUM, \n\tINFORCEDISTINCTPOLICYCOUNTER, \n\tEXPIREDPOLICYOFFERINGCOUNTER, \n\tCANCELLEDPOLICYCOUNTER, \n\tNEWINFORCEDISTINCTPOLICYCOUNTER, \n\tNEWPOLICYCOUNTERUSINGBUSINESSLOGIC, \n\tNEWOFFSETCOUNTERUSINGBUSINESSLOGIC, \n\tISSUEDPOLICYCOUNTER, \n\tISSUEDOFFSETCOUNTERUSINGBUSINESSLOGIC, \n\tRENEWEDPOLICYCOUNTER, \n\tNEWBUSINESSDIRECTWRITTENPREMIUMUSINGBUSINESLOGIC, \n\tNEWBUSINESSPRODUCTIONPREMIUMUSINGBUSINESLOGIC, \n\tRENEWEDDIRECTWRITTENPREMIUM, \n\tCANCELLEDDIRECTWRITTENPREMIUM, \n\tEXPIREDDIRECTWRITTENPREMIUM\n\tFROM RTR_INSERT_UPDATE_INSERT\n),\nUPD_Target AS (\n\tSELECT\n\tPremiumMonthlySummaryFactID, \n\tAuditID, \n\tMonthlyChangeinDirectEarnedPremium, \n\tMonthlyChangeinCededEarnedPremium, \n\tMonthlyChangeInDirectUnearnedPremium, \n\tMonthlyChangeInCededUnearnedPremium, \n\tPremiumMasterAgencyCededWrittenCommission, \n\tPremiumMasterAgencyDirectWrittenCommission, \n\tPremiumMasterAuditPremium, \n\tPremiumMasterCededWrittenPremium, \n\tPremiumMasterCollectionWriteOffPremium, \n\tPremiumMasterDirectWrittenPremium, \n\tPremiumMasterReturnedPremium, \n\tTransactionInforceFlag, \n\tInforceDistinctPolicyCounter, \n\tExpiredPolicyOfferingCounter, \n\tCancelledPolicyCounter, \n\tNewInforceDistinctPolicyCounter, \n\tNewPolicyCounterUsingBusinessLogic, \n\tNewOffsetCounterUsingBusinessLogic, \n\tIssuedPolicyCounter, \n\tIssuedOffsetCounterUsingBusinessLogic, \n\tRenewedPolicyCounter, \n\tNewBusinessDirectWrittenPremiumUsingBusinesLogic, \n\tNewBusinessProductionPremiumUsingBusinesLogic, \n\tRenewedDirectWrittenPremium, \n\tCancelledDirectWrittenPremium, \n\tExpiredDirectWrittenPremium\n\tFROM RTR_INSERT_UPDATE_DEFAULT1\n),\nPremiumMonthlySummaryFact_UPDATE AS (\n\tMERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.PremiumMonthlySummaryFact AS T\n\tUSING UPD_Target AS S\n\tON T.PremiumMonthlySummaryFactId = S.PremiumMonthlySummaryFactID\n\tWHEN MATCHED BY TARGET THEN\n\tUPDATE SET T.TransactionInforceFlag = S.TransactionInforceFlag, T.MonthlyChangeInDirectEarnedPremium = S.MonthlyChangeinDirectEarnedPremium, T.PremiumMasterDirectWrittenPremium = S.PremiumMasterDirectWrittenPremium, T.MonthlyChangeinCededEarnedPremium = S.MonthlyChangeinCededEarnedPremium, T.MonthlyChangeInDirectUnearnedPremium = S.MonthlyChangeInDirectUnearnedPremium, T.MonthlyChangeInCededUnearnedPremium = S.MonthlyChangeInCededUnearnedPremium, T.PremiumMasterAuditPremium = S.PremiumMasterAuditPremium, T.PremiumMasterCededWrittenPremium = S.PremiumMasterCededWrittenPremium, T.PremiumMasterCollectionWriteOffPremium = S.PremiumMasterCollectionWriteOffPremium, T.InforceDistinctPolicyCounter = S.InforceDistinctPolicyCounter, T.ExpiredPolicyOfferingCounter = S.ExpiredPolicyOfferingCounter, T.CancelledPolicyCounter = S.CancelledPolicyCounter, T.NewInforceDistinctPolicyCounter = S.NewInforceDistinctPolicyCounter, T.NewPolicyCounterUsingBusinessLogic = S.NewPolicyCounterUsingBusinessLogic, T.NewOffsetCounterUsingBusinessLogic = S.NewOffsetCounterUsingBusinessLogic, T.IssuedPolicyCounter = S.IssuedPolicyCounter, T.IssuedOffsetCounterUsingBusinessLogic = S.IssuedOffsetCounterUsingBusinessLogic, T.RenewedPolicyCounter = S.RenewedPolicyCounter, T.NewBusinessDirectWrittenPremiumUsingBusinesLogic = S.NewBusinessDirectWrittenPremiumUsingBusinesLogic, T.NewBusinessProductionPremiumUsingBusinesLogic = S.NewBusinessProductionPremiumUsingBusinesLogic, T.RenewedDirectWrittenPremium = S.RenewedDirectWrittenPremium, T.CancelledDirectWrittenPremium = S.CancelledDirectWrittenPremium, T.ExpiredDirectWrittenPremium = S.ExpiredDirectWrittenPremium\n),"
                        }
                    ]
                },
                "state": "Inactive",
                "onInactiveMarkAs": "Succeeded"
            }
        ],
        "parameters": {
            "WBMI_AUDIT_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "244880"
            },
            "WBMI_BATCH_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "893609"
            },
            "WBMI_SESSION_CONTROL_RUN_ID": {
                "type": "string",
                "defaultValue": "7545037"
            },
            "SELECTION_START_TS": {
                "type": "string",
                "defaultValue": "07/01/2023 12:24:12"
            },
            "SELECTION_END_TS": {
                "type": "string",
                "defaultValue": "08/02/2023 12:45:36"
            },
            "DBCONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DBCONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Data_Mart_Claim"
            },
            "SOURCE_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "TARGET_TABLE_OWNER": {
                "type": "string",
                "defaultValue": "DBO"
            },
            "DB_CONNECTION_SOURCE": {
                "type": "string",
                "defaultValue": "SQLServer_RPT_EDM_Claim"
            },
            "DB_CONNECTION_TARGET": {
                "type": "string",
                "defaultValue": "SQLServer_WC_Data_Mart_Claim"
            },
            "SOURCE_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "RPT_EDM"
            },
            "TARGET_DATABASE_NAME": {
                "type": "string",
                "defaultValue": "WC_Data_Mart"
            },
            "RUNDATE": {
                "type": "string",
                "defaultValue": "dateadd(dd,-1,DATEADD(MM,DATEDIFF(mm,0,getdate()),0))"
            },
            "TARGET_TABLE_OWNER_V3": {
                "type": "string",
                "defaultValue": "V3"
            },
            "WHERE_CLAUSE_EP": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_PMF": {
                "type": "string",
                "defaultValue": "Default Value"
            },
            "WHERE_CLAUSE_LKP": {
                "type": "string",
                "defaultValue": "Default Value"
            }
        },
        "folder": {
            "name": "Policy DataMart/"
        },
        "annotations": []
    }
}