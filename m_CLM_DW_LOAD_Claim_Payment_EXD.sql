WITH
LKP_CLM_COMMENTS_STAGE AS (
	SELECT
	TCC_COMMENT_TXT,
	FOLDER_KEY,
	COMMENT_ITEM_NBR
	FROM (
		SELECT 
		CLM_COMMENTS_STAGE.TCC_COMMENT_TXT as TCC_COMMENT_TXT, 
		RTRIM(CLM_COMMENTS_STAGE.FOLDER_KEY) as FOLDER_KEY, 
		CLM_COMMENTS_STAGE.COMMENT_ITEM_NBR as COMMENT_ITEM_NBR 
		FROM 
		@{pipeline().parameters.SOURCE_TABLE_OWNER}.CLM_COMMENTS_STAGE CLM_COMMENTS_STAGE
		WHERE FOLDER_KEY IN (SELECT DISTINCT DFT_CLAIM_NBR FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.CLAIM_DRAFT_STAGE)
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY FOLDER_KEY,COMMENT_ITEM_NBR ORDER BY TCC_COMMENT_TXT DESC) = 1
),
LKP_CLIENT_TAB_STAGE AS (
	SELECT
	CLM_METHOD_RPTD,
	CLM_CLAIM_NBR
	FROM (
		SELECT CLAIM_TAB_STAGE.CLM_METHOD_RPTD as CLM_METHOD_RPTD, 
		RTRIM(CLAIM_TAB_STAGE.CLM_CLAIM_NBR) as CLM_CLAIM_NBR 
		FROM 
		@{pipeline().parameters.SOURCE_TABLE_OWNER}.CLAIM_TAB_STAGE CLAIM_TAB_STAGE
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CLM_CLAIM_NBR ORDER BY CLM_METHOD_RPTD) = 1
),
LKP_CLAIM_PARTY_FULL_NAME AS (
	SELECT
	claim_party_full_name,
	claim_party_key
	FROM (
		SELECT 
		claim_party.claim_party_full_name as claim_party_full_name, 
		LTRIM(RTRIM(claim_party.claim_party_key)) as claim_party_key 
		FROM 
		@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_party claim_party
		WHERE crrnt_snpsht_flag =1 and source_sys_id ='@{pipeline().parameters.SOURCE_SYSTEM_ID}'
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY claim_party_key ORDER BY claim_party_full_name) = 1
),
LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_other_Payee AS (
	SELECT
	CDC_PAYEE_NM_ID,
	CDC_DRAFT_NBR,
	CDC_SEQ_NBR
	FROM (
		SELECT RTRIM(ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_PAYEE_NM_ID) AS CDC_PAYEE_NM_ID,
			RTRIM(ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_DRAFT_NBR) AS CDC_DRAFT_NBR,
			ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_SEQ_NBR AS CDC_SEQ_NBR
		FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.ARCH_CLAIM_DRAFT_CLIENT_STAGE
		WHERE ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_NAME_TYPE_IND = 'A'
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CDC_DRAFT_NBR,CDC_SEQ_NBR ORDER BY CDC_PAYEE_NM_ID DESC) = 1
),
LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID AS (
	SELECT
	cdc_pye_nm_cmt_id,
	cdc_draft_nbr,
	cdc_seq_nbr
	FROM (
		SELECT RTRIM(cdc_draft_nbr) AS cdc_draft_nbr,
			cdc_seq_nbr AS cdc_seq_nbr,
			COALESCE(cdc_pye_nm_cmt_id, -1) AS cdc_pye_nm_cmt_id
		FROM dbo.arch_claim_draft_client_stage
		WHERE cdc_name_type_ind = 'A'
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY cdc_draft_nbr,cdc_seq_nbr ORDER BY cdc_pye_nm_cmt_id) = 1
),
LKP_sup_payment_system AS (
	SELECT
	sup_payment_system_id,
	payment_system
	FROM (
		SELECT 
			sup_payment_system_id,
			payment_system
		FROM sup_payment_system
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY payment_system ORDER BY sup_payment_system_id) = 1
),
LKP_sup_payment_method AS (
	SELECT
	sup_payment_method_id,
	payment_method
	FROM (
		SELECT 
			sup_payment_method_id,
			payment_method
		FROM sup_payment_method
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY payment_method ORDER BY sup_payment_method_id) = 1
),
SQ_CLAIM_DRAFT_STAGE AS (
	SELECT RTRIM(CLAIM_DRAFT_STAGE.DFT_DRAFT_NBR),
		RTRIM(CLAIM_DRAFT_STAGE.DFT_BANK_NBR),
		RTRIM(CLAIM_DRAFT_STAGE.DFT_MAIL_TO_NM_ID),
		CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ADR_1,
		CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ADR_2,
		CLAIM_DRAFT_STAGE.DFT_TRS_AMT,
		CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ZIP_CD,
		CLAIM_DRAFT_STAGE.DFT_CK_DRAFT_IND,
		CLAIM_DRAFT_STAGE.DFT_DFT_CK_TYP_CD,
		CLAIM_DRAFT_STAGE.DFT_ENTRY_OPR_ID,
		CLAIM_DRAFT_STAGE.DFT_CREATE_TS,
		CLAIM_DRAFT_STAGE.DFT_MICRP_ECD_NBR,
		CLAIM_DRAFT_STAGE.DFT_MMO_PHR_CMT_ID,
		CLAIM_DRAFT_STAGE.DFT_CITY_NM,
		CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ST_CD,
		RTRIM(CLAIM_DRAFT_STAGE.DFT_CLAIM_NBR),
		CLAIM_DRAFT_STAGE.DFT_DBS_STATUS_CD,
		CLAIM_DRAFT_STAGE.DFT_DBS_DT,
		CLAIM_DRAFT_STAGE.DFT_DSB_LOC_CD,
		CLAIM_DRAFT_STAGE.DFT_PYE_PHR_CMT_ID,
		CLAIM_DRAFT_STAGE.DFT_PAY_TO_NM_CMT_ID,
		CLAIM_DRAFT_STAGE.DFT_MAIL_TO_NM_CMT_ID, 
		CLAIM_DRAFT_STAGE.PAYMENT_SYSTEM 
	FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.CLAIM_DRAFT_STAGE CLAIM_DRAFT_STAGE
),
EXP_Clean_Up_Input AS (
	SELECT
	DFT_MICRP_ECD_NBR AS in_DFT_MICRP_ECD_NBR,
	DFT_DRAFT_NBR AS in_DFT_DRAFT_NBR,
	-- *INF*: UPPER(:UDF.DEFAULT_VALUE_TO_BLANKS(in_DFT_MICRP_ECD_NBR))
	UPPER(:UDF.DEFAULT_VALUE_TO_BLANKS(in_DFT_MICRP_ECD_NBR)) AS o_DFT_MICRP_ECD_NBR,
	-- *INF*: IIF(ISNULL(in_DFT_DRAFT_NBR) OR IS_SPACES(in_DFT_DRAFT_NBR), 'N/A',LTRIM(RTRIM(in_DFT_DRAFT_NBR)))
	IFF(in_DFT_DRAFT_NBR IS NULL OR IS_SPACES(in_DFT_DRAFT_NBR), 'N/A', LTRIM(RTRIM(in_DFT_DRAFT_NBR))) AS o_DFT_DRAFT_NBR
	FROM SQ_CLAIM_DRAFT_STAGE
),
LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE AS (
	SELECT
	CDC_PYE_NM_CMT_ID,
	CDC_PAYEE_NM_ID,
	CDC_REPORT_TO_IRS,
	CDC_DRAFT_NBR
	FROM (
		SELECT CDCS.CDC_PYE_NM_CMT_ID AS CDC_PYE_NM_CMT_ID,
			RTRIM(CDCS.CDC_PAYEE_NM_ID) AS CDC_PAYEE_NM_ID,
			CDCS.CDC_REPORT_TO_IRS AS CDC_REPORT_TO_IRS,
			RTRIM(CDCS.CDC_DRAFT_NBR) AS CDC_DRAFT_NBR
		FROM @{pipeline().parameters.SOURCE_TABLE_OWNER}.ARCH_CLAIM_DRAFT_CLIENT_STAGE CDCS
		WHERE CDCS.CDC_NAME_TYPE_IND = 'P'
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CDC_DRAFT_NBR ORDER BY CDC_PYE_NM_CMT_ID DESC) = 1
),
LKP_ArchInsurPayPaymentStage_MatchingCheckNumber AS (
	SELECT
	CheckNumber
	FROM (
		select UPPER(a.CheckNumber) as CheckNumber
		from dbo.ArchInsurPayPaymentStage a
		join dbo.claim_draft_stage d on a.CheckNumber = d.dft_micrp_ecd_nbr
			and UPPER(d.payment_system) = 'MANUAL DRAFT'
		--
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CheckNumber ORDER BY CheckNumber) = 1
),
LKP_CLAIM_PAYMENT AS (
	SELECT
	claim_pay_id,
	sup_payment_method_id,
	claim_pay_num
	FROM (
		SELECT claim_payment.claim_pay_id AS claim_pay_id,
			claim_payment.sup_payment_method_id AS sup_payment_method_id,
			RTRIM(claim_payment.claim_pay_num) AS claim_pay_num
		FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment claim_payment
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_num ORDER BY claim_pay_id) = 1
),
LKP_CLM_OFFSET_HONOR_STAGE AS (
	SELECT
	in_DFT_DRAFT_NBR,
	COH_DRAFT_NBR,
	COH_NEW_CLAIM_NBR,
	COH_NEW_DRAFT_NBR,
	COH_CREATE_TS,
	COH_UPD_TS,
	COH_DELETE_IND
	FROM (
		SELECT 
		CLM_OFFSET_HONOR_STAGE.COH_NEW_CLAIM_NBR as COH_NEW_CLAIM_NBR, 
		CLM_OFFSET_HONOR_STAGE.COH_NEW_DRAFT_NBR as COH_NEW_DRAFT_NBR, 
		CLM_OFFSET_HONOR_STAGE.COH_CREATE_TS as COH_CREATE_TS, 
		CLM_OFFSET_HONOR_STAGE.COH_UPD_TS as COH_UPD_TS, 
		CLM_OFFSET_HONOR_STAGE.COH_DELETE_IND as COH_DELETE_IND, 
		RTRIM(CLM_OFFSET_HONOR_STAGE.COH_DRAFT_NBR) as COH_DRAFT_NBR 
		FROM 
		@{pipeline().parameters.SOURCE_TABLE_OWNER}.CLM_OFFSET_HONOR_STAGE CLM_OFFSET_HONOR_STAGE
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY COH_DRAFT_NBR ORDER BY in_DFT_DRAFT_NBR) = 1
),
LKP_OPER_ROLE_CODE AS (
	SELECT
	CAJ_USER_ID,
	in_CAJ_USER_ID,
	CAJ_ADJUSTER_TYPE
	FROM (
		SELECT ADJUSTER_TAB_STAGE.CAJ_ADJUSTER_TYPE as CAJ_ADJUSTER_TYPE, 
		RTRIM(ADJUSTER_TAB_STAGE.CAJ_USER_ID) as CAJ_USER_ID 
		FROM 
		@{pipeline().parameters.SOURCE_TABLE_OWNER}.ADJUSTER_TAB_STAGE ADJUSTER_TAB_STAGE, 
		@{pipeline().parameters.SOURCE_TABLE_OWNER}.CLIENT_TAB_STAGE
		WHERE
		ADJUSTER_TAB_STAGE.CAJ_EMP_CLIENT_ID = CLIENT_TAB_STAGE.CLIENT_ID AND
		CLIENT_TAB_STAGE.HISTORY_VLD_NBR = 0.00
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY CAJ_USER_ID ORDER BY CAJ_USER_ID) = 1
),
EXP_VALUES AS (
	SELECT
	SQ_CLAIM_DRAFT_STAGE.DFT_DRAFT_NBR AS IN_DFT_DRAFT_NBR,
	SQ_CLAIM_DRAFT_STAGE.DFT_PYE_PHR_CMT_ID,
	SQ_CLAIM_DRAFT_STAGE.DFT_MICRP_ECD_NBR AS IN_DFT_MICRP_ECD_NBR,
	SQ_CLAIM_DRAFT_STAGE.DFT_TRS_AMT AS IN_DFT_TRS_AMT,
	SQ_CLAIM_DRAFT_STAGE.DFT_CREATE_TS AS IN_DFT_CREATE_TS,
	LKP_CLM_OFFSET_HONOR_STAGE.COH_DELETE_IND AS IN_COH_DELETE_IND,
	LKP_CLM_OFFSET_HONOR_STAGE.COH_NEW_CLAIM_NBR AS IN_COH_NEW_CLAIM_NBR,
	LKP_CLM_OFFSET_HONOR_STAGE.COH_NEW_DRAFT_NBR AS IN_COH_NEW_DRAFT_NBR,
	SQ_CLAIM_DRAFT_STAGE.DFT_MMO_PHR_CMT_ID,
	SQ_CLAIM_DRAFT_STAGE.DFT_BANK_NBR AS IN_DFT_BANK_NBR,
	SQ_CLAIM_DRAFT_STAGE.DFT_CK_DRAFT_IND AS IN_DFT_CK_DRAFT_IND,
	SQ_CLAIM_DRAFT_STAGE.DFT_DFT_CK_TYP_CD AS IN_DFT_DFT_CK_TYP_CD,
	SQ_CLAIM_DRAFT_STAGE.DFT_DBS_DT AS IN_DFT_DBS_DT,
	SQ_CLAIM_DRAFT_STAGE.DFT_CLAIM_NBR AS IN_DFT_CLAIM_NBR,
	SQ_CLAIM_DRAFT_STAGE.DFT_DBS_STATUS_CD AS IN_DFT_DBS_STATUS_CD,
	LKP_CLM_OFFSET_HONOR_STAGE.COH_CREATE_TS AS IN_COH_CREATE_TS,
	LKP_CLM_OFFSET_HONOR_STAGE.COH_UPD_TS AS IN_COH_UPD_TS,
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_REPORT_TO_IRS,
	-- *INF*: IIF(ISNULL(RTRIM(CDC_REPORT_TO_IRS)),'N/A',RTRIM(CDC_REPORT_TO_IRS))
	IFF(RTRIM(CDC_REPORT_TO_IRS) IS NULL, 'N/A', RTRIM(CDC_REPORT_TO_IRS)) AS out_CDC_REPORT_TO_IRS,
	-- *INF*: :LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, DFT_PAY_TO_NM_CMT_ID)
	LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_PAY_TO_NM_CMT_ID.TCC_COMMENT_TXT AS VAR_Payee_Phrase_Description,
	-- *INF*: :LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR,DFT_MMO_PHR_CMT_ID )
	-- 
	-- 
	-- 
	-- 
	-- 
	LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MMO_PHR_CMT_ID.TCC_COMMENT_TXT AS VAR_Memo_Pharse_Description,
	-- *INF*: IIF(ISNULL(IN_DFT_DBS_DT), TO_DATE('1/1/1800','MM/DD/YYYY'),IN_DFT_DBS_DT)
	IFF(IN_DFT_DBS_DT IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), IN_DFT_DBS_DT) AS OUT_DFT_DBS_DT,
	EXP_Clean_Up_Input.o_DFT_DRAFT_NBR AS DFT_DRAFT_NBR,
	-- *INF*: IIF(ISNULL(VAR_Payee_Phrase_Description) OR RTRIM(VAR_Payee_Phrase_Description) = '',
	-- 	'N/A',
	-- 	LTRIM(RTRIM(VAR_Payee_Phrase_Description)))
	IFF(VAR_Payee_Phrase_Description IS NULL OR RTRIM(VAR_Payee_Phrase_Description) = '', 'N/A', LTRIM(RTRIM(VAR_Payee_Phrase_Description))) AS OUT_Payee_Phrase_Description,
	-- *INF*: IIF(ISNULL(VAR_Memo_Pharse_Description),'N/A',LTRIM(RTRIM(VAR_Memo_Pharse_Description)))
	IFF(VAR_Memo_Pharse_Description IS NULL, 'N/A', LTRIM(RTRIM(VAR_Memo_Pharse_Description))) AS OUT_Memo_Pharse_Description,
	-- *INF*: IIF(ISNULL(:LKP.LKP_CLIENT_TAB_STAGE(IN_DFT_DRAFT_NBR) )OR IS_SPACES(:LKP.LKP_CLIENT_TAB_STAGE(IN_DFT_DRAFT_NBR)), 'N/A',LTRIM(RTRIM(:LKP.LKP_CLIENT_TAB_STAGE(IN_DFT_DRAFT_NBR))))
	IFF(LKP_CLIENT_TAB_STAGE_IN_DFT_DRAFT_NBR.CLM_METHOD_RPTD IS NULL OR IS_SPACES(LKP_CLIENT_TAB_STAGE_IN_DFT_DRAFT_NBR.CLM_METHOD_RPTD), 'N/A', LTRIM(RTRIM(LKP_CLIENT_TAB_STAGE_IN_DFT_DRAFT_NBR.CLM_METHOD_RPTD))) AS OUT_CLM_METHOD_RPTD,
	-- *INF*: IIF(ISNULL(IN_DFT_MICRP_ECD_NBR) OR IS_SPACES(IN_DFT_MICRP_ECD_NBR),'N/A',LTRIM(RTRIM(IN_DFT_MICRP_ECD_NBR)))
	IFF(IN_DFT_MICRP_ECD_NBR IS NULL OR IS_SPACES(IN_DFT_MICRP_ECD_NBR), 'N/A', LTRIM(RTRIM(IN_DFT_MICRP_ECD_NBR))) AS OUT_DFT_MICRP_ECD_NBR,
	-- *INF*: IIF(ISNULL(IN_DFT_TRS_AMT),  0, IN_DFT_TRS_AMT)
	IFF(IN_DFT_TRS_AMT IS NULL, 0, IN_DFT_TRS_AMT) AS OUT_DFT_TRS_AMT,
	-- *INF*: IIF(ISNULL(IN_DFT_CREATE_TS),TO_DATE('1/1/1800','MM/DD/YYYY') , IN_DFT_CREATE_TS)
	IFF(IN_DFT_CREATE_TS IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), IN_DFT_CREATE_TS) AS OUT_DFT_CREATE_TS,
	-- *INF*: IIF(ISNULL(IN_COH_NEW_DRAFT_NBR)  OR IS_SPACES(IN_COH_NEW_DRAFT_NBR), 'N/A', LTRIM(RTRIM(IN_COH_NEW_DRAFT_NBR)))
	IFF(IN_COH_NEW_DRAFT_NBR IS NULL OR IS_SPACES(IN_COH_NEW_DRAFT_NBR), 'N/A', LTRIM(RTRIM(IN_COH_NEW_DRAFT_NBR))) AS OUT_COH_NEW_DRAFT_NBR,
	-- *INF*: IIF(ISNULL(IN_COH_DELETE_IND) OR IS_SPACES(IN_COH_DELETE_IND),'N/A',LTRIM(RTRIM(IN_COH_DELETE_IND)))
	IFF(IN_COH_DELETE_IND IS NULL OR IS_SPACES(IN_COH_DELETE_IND), 'N/A', LTRIM(RTRIM(IN_COH_DELETE_IND))) AS OUT_COH_DELETE_IND,
	-- *INF*: IIF(ISNULL(IN_COH_NEW_CLAIM_NBR) OR IS_SPACES(IN_COH_NEW_CLAIM_NBR),'N/A', LTRIM(RTRIM(IN_COH_NEW_CLAIM_NBR)))
	IFF(IN_COH_NEW_CLAIM_NBR IS NULL OR IS_SPACES(IN_COH_NEW_CLAIM_NBR), 'N/A', LTRIM(RTRIM(IN_COH_NEW_CLAIM_NBR))) AS OUT_COH_NEW_CLAIM_NBR,
	-- *INF*: IIF(ISNULL(IN_DFT_BANK_NBR) OR IS_SPACES(IN_DFT_BANK_NBR),'04',LTRIM(RTRIM(IN_DFT_BANK_NBR)))
	-- 
	-- --12/3/2010 : backfeed program puts 04 in this field. It is the bank number which is equal to M&I bank. Per Kristen  Mueller - "My book says it can be entered or updated on the PUCT screen.  I had to talk to Carol about something else and this is all she knows also.  It appears we could change it if we changed banks but never have yet."
	IFF(IN_DFT_BANK_NBR IS NULL OR IS_SPACES(IN_DFT_BANK_NBR), '04', LTRIM(RTRIM(IN_DFT_BANK_NBR))) AS OUT_DFT_BANK_NBR,
	-- *INF*: IIF(ISNULL(IN_DFT_CK_DRAFT_IND) OR IS_SPACES(IN_DFT_CK_DRAFT_IND), 'N/A', LTRIM(RTRIM(IN_DFT_CK_DRAFT_IND)))
	IFF(IN_DFT_CK_DRAFT_IND IS NULL OR IS_SPACES(IN_DFT_CK_DRAFT_IND), 'N/A', LTRIM(RTRIM(IN_DFT_CK_DRAFT_IND))) AS OUT_DFT_CK_DRAFT_IND,
	-- *INF*: IIF(ISNULL(IN_DFT_DFT_CK_TYP_CD) OR IS_SPACES(IN_DFT_DFT_CK_TYP_CD),'N/A',LTRIM(RTRIM(IN_DFT_DFT_CK_TYP_CD)))
	IFF(IN_DFT_DFT_CK_TYP_CD IS NULL OR IS_SPACES(IN_DFT_DFT_CK_TYP_CD), 'N/A', LTRIM(RTRIM(IN_DFT_DFT_CK_TYP_CD))) AS OUT_DFT_DFT_CK_TYP_CD,
	-- *INF*: IIF(ISNULL(IN_DFT_DBS_STATUS_CD) OR IS_SPACES(IN_DFT_DBS_STATUS_CD),'N/A',LTRIM(RTRIM(IN_DFT_DBS_STATUS_CD)))
	IFF(IN_DFT_DBS_STATUS_CD IS NULL OR IS_SPACES(IN_DFT_DBS_STATUS_CD), 'N/A', LTRIM(RTRIM(IN_DFT_DBS_STATUS_CD))) AS OUT_DFT_DBS_STATUS_CD,
	'N/A' AS OUT_REPORTED_TO_IRS_IND,
	-- *INF*: IIF(ISNULL(IN_COH_CREATE_TS),TO_DATE('1/1/1800','MM/DD/YYYY') , IN_COH_CREATE_TS)
	IFF(IN_COH_CREATE_TS IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), IN_COH_CREATE_TS) AS OUT_COH_CREATE_TS,
	-- *INF*: IIF(ISNULL(IN_COH_UPD_TS),TO_DATE('1/1/1800','MM/DD/YYYY') , IN_COH_UPD_TS)
	IFF(IN_COH_UPD_TS IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), IN_COH_UPD_TS) AS OUT_COH_UPD_TS,
	-- *INF*: TO_DATE('1/1/1800','MM/DD/YYYY')
	TO_DATE('1/1/1800', 'MM/DD/YYYY') AS OUT_PAY_CASHED_DATE,
	SQ_CLAIM_DRAFT_STAGE.DFT_ENTRY_OPR_ID,
	-- *INF*: IIF(ISNULL(DFT_ENTRY_OPR_ID) OR IS_SPACES(DFT_ENTRY_OPR_ID),'N/A',LTRIM(RTRIM(DFT_ENTRY_OPR_ID)))
	-- 
	IFF(DFT_ENTRY_OPR_ID IS NULL OR IS_SPACES(DFT_ENTRY_OPR_ID), 'N/A', LTRIM(RTRIM(DFT_ENTRY_OPR_ID))) AS OUT_DFT_ENTRY_OPR_ID,
	LKP_OPER_ROLE_CODE.CAJ_ADJUSTER_TYPE,
	SQ_CLAIM_DRAFT_STAGE.DFT_DSB_LOC_CD,
	-- *INF*: IIF(ISNULL(DFT_DSB_LOC_CD) OR IS_SPACES(DFT_DSB_LOC_CD),'N/A',LTRIM(RTRIM(DFT_DSB_LOC_CD)))
	-- 
	IFF(DFT_DSB_LOC_CD IS NULL OR IS_SPACES(DFT_DSB_LOC_CD), 'N/A', LTRIM(RTRIM(DFT_DSB_LOC_CD))) AS OUT_DFT_DSB_LOC_CD,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ADR_1,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ADR_2,
	-- *INF*: IIF(ISNULL(RTRIM(DFT_MAIL_TO_ADR_1) || RTRIM(DFT_MAIL_TO_ADR_2)),'N/A',RTRIM(DFT_MAIL_TO_ADR_1) || RTRIM(DFT_MAIL_TO_ADR_2))
	IFF(RTRIM(DFT_MAIL_TO_ADR_1) || RTRIM(DFT_MAIL_TO_ADR_2) IS NULL, 'N/A', RTRIM(DFT_MAIL_TO_ADR_1) || RTRIM(DFT_MAIL_TO_ADR_2)) AS MAIL_TO_ADR,
	SQ_CLAIM_DRAFT_STAGE.DFT_CITY_NM,
	-- *INF*: IIF(ISNULL(DFT_CITY_NM) OR IS_SPACES(DFT_CITY_NM),'N/A',LTRIM(RTRIM(DFT_CITY_NM)))
	IFF(DFT_CITY_NM IS NULL OR IS_SPACES(DFT_CITY_NM), 'N/A', LTRIM(RTRIM(DFT_CITY_NM))) AS OUT_CITY_NM,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ST_CD,
	-- *INF*: IIF(ISNULL(DFT_MAIL_TO_ST_CD) OR IS_SPACES(DFT_MAIL_TO_ST_CD),'N/A',LTRIM(RTRIM(DFT_MAIL_TO_ST_CD)))
	-- 
	IFF(DFT_MAIL_TO_ST_CD IS NULL OR IS_SPACES(DFT_MAIL_TO_ST_CD), 'N/A', LTRIM(RTRIM(DFT_MAIL_TO_ST_CD))) AS OUT_MAIL_TO_ST_CD,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_ZIP_CD,
	-- *INF*: IIF(
	-- ISNULL(DFT_MAIL_TO_ZIP_CD) OR IS_SPACES(DFT_MAIL_TO_ZIP_CD),'N/A',
	-- RTRIM(DFT_MAIL_TO_ZIP_CD)
	-- )
	IFF(DFT_MAIL_TO_ZIP_CD IS NULL OR IS_SPACES(DFT_MAIL_TO_ZIP_CD), 'N/A', RTRIM(DFT_MAIL_TO_ZIP_CD)) AS OUT_MAIL_TO_ZIP_CD,
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_PYE_NM_CMT_ID AS IN_CDC_PAYEE_NM_CMT_ID_primary_payee,
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_PAYEE_NM_ID AS IN_CDC_PAYEE_NM_ID_primary_payee,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_NM_ID AS IN_DFT_MAIL_TO_NM_ID,
	-- *INF*: :LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, DFT_MAIL_TO_NM_CMT_ID)
	LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MAIL_TO_NM_CMT_ID.TCC_COMMENT_TXT AS v_mail_to_name,
	-- *INF*: IIF(ISNULL(v_mail_to_name) OR RTRIM(v_mail_to_name) = '',
	-- 	'N/A',
	-- 	v_mail_to_name)
	IFF(v_mail_to_name IS NULL OR RTRIM(v_mail_to_name) = '', 'N/A', v_mail_to_name) AS mail_to_name,
	-- *INF*: :LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, IN_CDC_PAYEE_NM_CMT_ID_primary_payee)
	LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_IN_CDC_PAYEE_NM_CMT_ID_primary_payee.TCC_COMMENT_TXT AS v_original_prim_payee_name,
	-- *INF*: IIF(ISNULL(v_original_prim_payee_name) OR RTRIM(v_original_prim_payee_name) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(IN_CDC_PAYEE_NM_ID_primary_payee),
	-- 	v_original_prim_payee_name)
	IFF(v_original_prim_payee_name IS NULL OR RTRIM(v_original_prim_payee_name) = '', LKP_CLAIM_PARTY_FULL_NAME_IN_CDC_PAYEE_NM_ID_primary_payee.claim_party_full_name, v_original_prim_payee_name) AS v_prim_payee_name,
	-- *INF*: IIF(ISNULL(v_prim_payee_name) OR RTRIM(v_prim_payee_name) = '',
	-- 		'N/A',
	-- 	v_prim_payee_name)
	IFF(v_prim_payee_name IS NULL OR RTRIM(v_prim_payee_name) = '', 'N/A', v_prim_payee_name) AS prim_payee_name,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 2)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_2.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_1,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_1 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_1)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_1 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_1.TCC_COMMENT_TXT) AS v_original_additional_payee_name_1,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_1) OR RTRIM(v_original_additional_payee_name_1) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 2)),
	-- 	v_original_additional_payee_name_1)
	IFF(v_original_additional_payee_name_1 IS NULL OR RTRIM(v_original_additional_payee_name_1) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2.claim_party_full_name, v_original_additional_payee_name_1) AS v_add_payee_name_1,
	-- *INF*: IIF(ISNULL(v_add_payee_name_1) OR RTRIM(v_add_payee_name_1) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_1)
	IFF(v_add_payee_name_1 IS NULL OR RTRIM(v_add_payee_name_1) = '', 'N/A', v_add_payee_name_1) AS add_payee_name_1,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 3)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_3.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_2,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_2 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_2)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_2 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_2.TCC_COMMENT_TXT) AS v_original_additional_payee_name_2,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_2) OR RTRIM(v_original_additional_payee_name_2) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 3)),
	-- 	v_original_additional_payee_name_2)
	IFF(v_original_additional_payee_name_2 IS NULL OR RTRIM(v_original_additional_payee_name_2) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3.claim_party_full_name, v_original_additional_payee_name_2) AS v_add_payee_name_2,
	-- *INF*: IIF(ISNULL(v_add_payee_name_2) OR RTRIM(v_add_payee_name_2) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_2)
	IFF(v_add_payee_name_2 IS NULL OR RTRIM(v_add_payee_name_2) = '', 'N/A', v_add_payee_name_2) AS add_payee_name_2,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 4)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_4.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_3,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_3 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_3)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_3 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_3.TCC_COMMENT_TXT) AS v_original_additional_payee_name_3,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_3) OR RTRIM(v_original_additional_payee_name_3) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 4)),
	-- 	v_original_additional_payee_name_3)
	IFF(v_original_additional_payee_name_3 IS NULL OR RTRIM(v_original_additional_payee_name_3) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4.claim_party_full_name, v_original_additional_payee_name_3) AS v_add_payee_name_3,
	-- *INF*: IIF(ISNULL(v_add_payee_name_3) OR RTRIM(v_add_payee_name_3) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_3)
	IFF(v_add_payee_name_3 IS NULL OR RTRIM(v_add_payee_name_3) = '', 'N/A', v_add_payee_name_3) AS add_payee_name_3,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 5)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_5.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_4,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_4 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_4)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_4 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_4.TCC_COMMENT_TXT) AS v_original_additional_payee_name_4,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_4) OR RTRIM(v_original_additional_payee_name_4) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 5)),
	-- 	v_original_additional_payee_name_4)
	IFF(v_original_additional_payee_name_4 IS NULL OR RTRIM(v_original_additional_payee_name_4) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5.claim_party_full_name, v_original_additional_payee_name_4) AS v_add_payee_name_4,
	-- *INF*: IIF(ISNULL(v_add_payee_name_4) OR RTRIM(v_add_payee_name_4) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_4)
	IFF(v_add_payee_name_4 IS NULL OR RTRIM(v_add_payee_name_4) = '', 'N/A', v_add_payee_name_4) AS add_payee_name_4,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 6)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_6.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_5,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_5 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_5)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_5 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_5.TCC_COMMENT_TXT) AS v_original_additional_payee_name_5,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_5) OR RTRIM(v_original_additional_payee_name_5) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 6)),
	-- 	v_original_additional_payee_name_5)
	IFF(v_original_additional_payee_name_5 IS NULL OR RTRIM(v_original_additional_payee_name_5) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6.claim_party_full_name, v_original_additional_payee_name_5) AS v_add_payee_name_5,
	-- *INF*: IIF(ISNULL(v_add_payee_name_5) OR RTRIM(v_add_payee_name_5) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_5)
	IFF(v_add_payee_name_5 IS NULL OR RTRIM(v_add_payee_name_5) = '', 'N/A', v_add_payee_name_5) AS add_payee_name_5,
	-- *INF*: :LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID(IN_DFT_DRAFT_NBR, 7)
	LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_7.cdc_pye_nm_cmt_id AS v_CDC_PYE_NM_CMT_ID_add_payee_6,
	-- *INF*: IIF(v_CDC_PYE_NM_CMT_ID_add_payee_6 < 0,
	-- 	NULL,
	-- 	:LKP.LKP_CLM_COMMENTS_STAGE(IN_DFT_CLAIM_NBR, v_CDC_PYE_NM_CMT_ID_add_payee_6)
	-- 	)
	IFF(v_CDC_PYE_NM_CMT_ID_add_payee_6 < 0, NULL, LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_6.TCC_COMMENT_TXT) AS v_original_additional_payee_name_6,
	-- *INF*: IIF(ISNULL(v_original_additional_payee_name_6) OR RTRIM(v_original_additional_payee_name_6) = '',
	-- 		:LKP.LKP_CLAIM_PARTY_FULL_NAME(:LKP.LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE(IN_DFT_DRAFT_NBR, 7)),
	-- 	v_original_additional_payee_name_6)
	IFF(v_original_additional_payee_name_6 IS NULL OR RTRIM(v_original_additional_payee_name_6) = '', LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7.claim_party_full_name, v_original_additional_payee_name_6) AS v_add_payee_name_6,
	-- *INF*: IIF(ISNULL(v_add_payee_name_6) OR RTRIM(v_add_payee_name_6) = '',
	-- 		'N/A',
	-- 	v_add_payee_name_6)
	IFF(v_add_payee_name_6 IS NULL OR RTRIM(v_add_payee_name_6) = '', 'N/A', v_add_payee_name_6) AS add_payee_name_6,
	SQ_CLAIM_DRAFT_STAGE.DFT_PAY_TO_NM_CMT_ID,
	SQ_CLAIM_DRAFT_STAGE.DFT_MAIL_TO_NM_CMT_ID,
	SQ_CLAIM_DRAFT_STAGE.PAYMENT_SYSTEM,
	LKP_ArchInsurPayPaymentStage_MatchingCheckNumber.CheckNumber AS in_MatchingInsurPayCheckNumber,
	LKP_CLAIM_PAYMENT.claim_pay_id,
	LKP_CLAIM_PAYMENT.sup_payment_method_id AS lkp_sup_payment_method_id,
	-- *INF*: :LKP.LKP_SUP_PAYMENT_SYSTEM(PAYMENT_SYSTEM)
	LKP_SUP_PAYMENT_SYSTEM_PAYMENT_SYSTEM.sup_payment_system_id AS v_sup_payment_system_id,
	-- *INF*: IIF(ISNULL(v_sup_payment_system_id), -1, v_sup_payment_system_id)
	IFF(v_sup_payment_system_id IS NULL, - 1, v_sup_payment_system_id) AS o_sup_payment_system_id,
	-- *INF*: DECODE(PAYMENT_SYSTEM,
	-- 	'Manual Draft',
	-- 		DECODE(TRUE,
	-- 			LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) < 3 OR RTRIM(IN_DFT_MICRP_ECD_NBR) = 'N/A',
	-- 				'Check',
	-- 			UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR,1,3)) = 'EFT',
	-- 				'EFT',
	-- 			:UDF.DEFAULT_VALUE_TO_BLANKS(in_MatchingInsurPayCheckNumber) <> '',
	-- 				'InsurPay',
	-- 			'Check'),
	-- 	'PayPilot',
	-- 		DECODE(TRUE,
	-- 			LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) < 3,
	-- 				'Check',
	-- 			UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR,1,3)) = 'EFT',
	-- 				'EFT',
	-- 			'Check'),
	-- 	'InsurPay',
	-- 	-- Note: If there is already a valid sup_payment_method_id (i.e. a value <> -1) for this InsurPay payment, the string provided in this variable will not be used to override it. This is because we prefer the payment method derived in the InsurPayPayment pipeline to the one derived from the DFT_MICRO_ECD_NBR in the CLAIM_DRAFT pipeline.
	-- 		IIF(LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) >= 2,
	-- 			DECODE(UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR, 1, 2)),
	-- 				'CK', 
	-- 					'Check',
	-- 				'EF',
	-- 					'EFT',
	-- 				'VP',
	-- 					'Virtual Payment',
	-- 				'DC', 
	-- 					'Debit Card',
	-- 				'PC',
	-- 					'Digital Prepaid',
	-- 				'CT',
	-- 					'CAT Card',
	-- 				'PP',
	-- 					'PayPal',
	-- 				'VN',
	-- 					'Venmo',
	-- 				'TE',
	-- 					'Electronic',
	-- 				'N/A'
	-- 			),
	-- 		'N/A'
	-- 		),
	-- 	'N/A')
	DECODE(PAYMENT_SYSTEM,
	'Manual Draft', DECODE(TRUE,
	LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) < 3 OR RTRIM(IN_DFT_MICRP_ECD_NBR) = 'N/A', 'Check',
	UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR, 1, 3)) = 'EFT', 'EFT',
	:UDF.DEFAULT_VALUE_TO_BLANKS(in_MatchingInsurPayCheckNumber) <> '', 'InsurPay',
	'Check'),
	'PayPilot', DECODE(TRUE,
	LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) < 3, 'Check',
	UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR, 1, 3)) = 'EFT', 'EFT',
	'Check'),
	'InsurPay', IFF(LENGTH(RTRIM(IN_DFT_MICRP_ECD_NBR)) >= 2, DECODE(UPPER(SUBSTR(IN_DFT_MICRP_ECD_NBR, 1, 2)),
	'CK', 'Check',
	'EF', 'EFT',
	'VP', 'Virtual Payment',
	'DC', 'Debit Card',
	'PC', 'Digital Prepaid',
	'CT', 'CAT Card',
	'PP', 'PayPal',
	'VN', 'Venmo',
	'TE', 'Electronic',
	'N/A'), 'N/A'),
	'N/A') AS v_payment_method,
	-- *INF*: IIF(PAYMENT_SYSTEM = 'InsurPay' AND (NOT ISNULL(lkp_sup_payment_method_id)) AND lkp_sup_payment_method_id != -1,
	-- 		lkp_sup_payment_method_id,
	-- 	:LKP.LKP_SUP_PAYMENT_METHOD(v_payment_method)
	-- 	)
	IFF(PAYMENT_SYSTEM = 'InsurPay' AND ( NOT lkp_sup_payment_method_id IS NULL ) AND lkp_sup_payment_method_id != - 1, lkp_sup_payment_method_id, LKP_SUP_PAYMENT_METHOD_v_payment_method.sup_payment_method_id) AS v_sup_payment_method_id,
	-- *INF*: IIF(ISNULL(v_sup_payment_method_id), -1, v_sup_payment_method_id)
	IFF(v_sup_payment_method_id IS NULL, - 1, v_sup_payment_method_id) AS o_sup_payment_method_id
	FROM EXP_Clean_Up_Input
	 -- Manually join with SQ_CLAIM_DRAFT_STAGE
	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE.CDC_DRAFT_NBR = SQ_CLAIM_DRAFT_STAGE.DFT_DRAFT_NBR
	LEFT JOIN LKP_ArchInsurPayPaymentStage_MatchingCheckNumber
	ON LKP_ArchInsurPayPaymentStage_MatchingCheckNumber.CheckNumber = EXP_Clean_Up_Input.o_DFT_MICRP_ECD_NBR
	LEFT JOIN LKP_CLAIM_PAYMENT
	ON LKP_CLAIM_PAYMENT.claim_pay_num = EXP_Clean_Up_Input.o_DFT_DRAFT_NBR
	LEFT JOIN LKP_CLM_OFFSET_HONOR_STAGE
	ON LKP_CLM_OFFSET_HONOR_STAGE.COH_DRAFT_NBR = SQ_CLAIM_DRAFT_STAGE.DFT_DRAFT_NBR
	LEFT JOIN LKP_OPER_ROLE_CODE
	ON LKP_OPER_ROLE_CODE.CAJ_USER_ID = SQ_CLAIM_DRAFT_STAGE.DFT_ENTRY_OPR_ID
	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_PAY_TO_NM_CMT_ID
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_PAY_TO_NM_CMT_ID.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_PAY_TO_NM_CMT_ID.COMMENT_ITEM_NBR = DFT_PAY_TO_NM_CMT_ID

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MMO_PHR_CMT_ID
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MMO_PHR_CMT_ID.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MMO_PHR_CMT_ID.COMMENT_ITEM_NBR = DFT_MMO_PHR_CMT_ID

	LEFT JOIN LKP_CLIENT_TAB_STAGE LKP_CLIENT_TAB_STAGE_IN_DFT_DRAFT_NBR
	ON LKP_CLIENT_TAB_STAGE_IN_DFT_DRAFT_NBR.CLM_CLAIM_NBR = IN_DFT_DRAFT_NBR

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MAIL_TO_NM_CMT_ID
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MAIL_TO_NM_CMT_ID.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_DFT_MAIL_TO_NM_CMT_ID.COMMENT_ITEM_NBR = DFT_MAIL_TO_NM_CMT_ID

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_IN_CDC_PAYEE_NM_CMT_ID_primary_payee
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_IN_CDC_PAYEE_NM_CMT_ID_primary_payee.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_IN_CDC_PAYEE_NM_CMT_ID_primary_payee.COMMENT_ITEM_NBR = IN_CDC_PAYEE_NM_CMT_ID_primary_payee

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_IN_CDC_PAYEE_NM_ID_primary_payee
	ON LKP_CLAIM_PARTY_FULL_NAME_IN_CDC_PAYEE_NM_ID_primary_payee.claim_party_key = IN_CDC_PAYEE_NM_ID_primary_payee

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_2
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_2.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_2.cdc_seq_nbr = 2

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_1
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_1.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_1.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_1

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2.CDC_SEQ_NBR = 2

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_2.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_3
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_3.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_3.cdc_seq_nbr = 3

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_2
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_2.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_2.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_2

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3.CDC_SEQ_NBR = 3

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_3.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_4
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_4.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_4.cdc_seq_nbr = 4

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_3
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_3.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_3.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_3

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4.CDC_SEQ_NBR = 4

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_4.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_5
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_5.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_5.cdc_seq_nbr = 5

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_4
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_4.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_4.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_4

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5.CDC_SEQ_NBR = 5

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_5.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_6
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_6.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_6.cdc_seq_nbr = 6

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_5
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_5.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_5.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_5

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6.CDC_SEQ_NBR = 6

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_6.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_7
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_7.cdc_draft_nbr = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_NM_CMT_ID_IN_DFT_DRAFT_NBR_7.cdc_seq_nbr = 7

	LEFT JOIN LKP_CLM_COMMENTS_STAGE LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_6
	ON LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_6.FOLDER_KEY = IN_DFT_CLAIM_NBR
	AND LKP_CLM_COMMENTS_STAGE_IN_DFT_CLAIM_NBR_v_CDC_PYE_NM_CMT_ID_add_payee_6.COMMENT_ITEM_NBR = v_CDC_PYE_NM_CMT_ID_add_payee_6

	LEFT JOIN LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7
	ON LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7.CDC_DRAFT_NBR = IN_DFT_DRAFT_NBR
	AND LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7.CDC_SEQ_NBR = 7

	LEFT JOIN LKP_CLAIM_PARTY_FULL_NAME LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7
	ON LKP_CLAIM_PARTY_FULL_NAME_LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7.claim_party_key = LKP_ARCH_CLAIM_DRAFT_CLIENT_STAGE_OTHER_PAYEE_IN_DFT_DRAFT_NBR_7.CDC_PAYEE_NM_ID

	LEFT JOIN LKP_SUP_PAYMENT_SYSTEM LKP_SUP_PAYMENT_SYSTEM_PAYMENT_SYSTEM
	ON LKP_SUP_PAYMENT_SYSTEM_PAYMENT_SYSTEM.payment_system = PAYMENT_SYSTEM

	LEFT JOIN LKP_SUP_PAYMENT_METHOD LKP_SUP_PAYMENT_METHOD_v_payment_method
	ON LKP_SUP_PAYMENT_METHOD_v_payment_method.payment_method = v_payment_method

),
SEQ_Claim_Payments_AK AS (
	CREATE SEQUENCE SEQ_Claim_Payments_AK
	START = 0
	INCREMENT = 1;
),
EXP_Determine_AK AS (
	SELECT
	SEQ_Claim_Payments_AK.NEXTVAL,
	OUT_DFT_MICRP_ECD_NBR AS DFT_MICRP_ECD_NBR,
	OUT_DFT_TRS_AMT AS DFT_TRS_AMT,
	OUT_DFT_CREATE_TS AS DFT_CREATE_TS,
	OUT_COH_NEW_CLAIM_NBR AS COH_NEW_CLAIM_NBR,
	OUT_COH_NEW_DRAFT_NBR AS COH_NEW_DRAFT_NBR,
	OUT_COH_DELETE_IND,
	OUT_DFT_BANK_NBR AS DFT_BANK_NBR,
	OUT_DFT_CK_DRAFT_IND AS DFT_CK_DRAFT_IND,
	OUT_DFT_DFT_CK_TYP_CD AS DFT_DFT_CK_TYP_CD,
	OUT_DFT_DBS_DT AS DFT_DBS_DT,
	OUT_DFT_DBS_STATUS_CD AS DFT_DBS_STATUS_CD,
	OUT_COH_CREATE_TS AS COH_CREATE_TS,
	OUT_COH_UPD_TS AS COH_UPD_TS,
	out_CDC_REPORT_TO_IRS,
	DFT_DRAFT_NBR AS OUT_DFT_DRAFT_NBR,
	OUT_DFT_ENTRY_OPR_ID,
	CAJ_ADJUSTER_TYPE,
	OUT_DFT_DSB_LOC_CD,
	OUT_Payee_Phrase_Description AS OUT_PAYEE_PHARSE_COMMENT,
	OUT_Memo_Pharse_Description AS OUT_MEMO_PHARSE_COMMENT,
	MAIL_TO_ADR,
	OUT_CITY_NM,
	OUT_MAIL_TO_ST_CD,
	OUT_MAIL_TO_ZIP_CD,
	1 AS crrnt_snpsht_flag,
	@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,
	-- *INF*: TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS')
	TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS') AS eff_from_date,
	-- *INF*: TO_DATE('12/31/2100 23:59:59','MM/DD/YYYY HH24:MI:SS')
	TO_DATE('12/31/2100 23:59:59', 'MM/DD/YYYY HH24:MI:SS') AS eff_to_date,
	@{pipeline().parameters.SOURCE_SYSTEM_ID} AS source_sys_id,
	sysdate AS created_dt,
	'N/A' AS NA,
	mail_to_name,
	-1 AS default_int,
	-- *INF*: TO_DATE('01/01/1800','MM/DD/YYYY')
	TO_DATE('01/01/1800', 'MM/DD/YYYY') AS default_date,
	prim_payee_name,
	add_payee_name_1,
	add_payee_name_2,
	add_payee_name_3,
	add_payee_name_4,
	add_payee_name_5,
	add_payee_name_6,
	o_sup_payment_system_id AS sup_payment_system_id,
	o_sup_payment_method_id AS sup_payment_method_id,
	claim_pay_id,
	0 AS default_int_0
	FROM EXP_VALUES
),
RTRTRANS AS (
	SELECT
	claim_pay_id AS exists_claim_pay_id,
	NEXTVAL,
	OUT_DFT_DRAFT_NBR,
	DFT_MICRP_ECD_NBR,
	DFT_BANK_NBR,
	OUT_COH_DELETE_IND,
	DFT_TRS_AMT,
	DFT_CREATE_TS,
	DFT_CK_DRAFT_IND,
	DFT_DFT_CK_TYP_CD,
	OUT_DFT_ENTRY_OPR_ID,
	CAJ_ADJUSTER_TYPE,
	DFT_DBS_DT,
	DFT_DBS_STATUS_CD,
	OUT_DFT_DSB_LOC_CD,
	out_CDC_REPORT_TO_IRS,
	COH_CREATE_TS,
	COH_UPD_TS,
	COH_NEW_CLAIM_NBR,
	COH_NEW_DRAFT_NBR,
	OUT_PAYEE_PHARSE_COMMENT,
	OUT_MEMO_PHARSE_COMMENT,
	MAIL_TO_ADR,
	OUT_CITY_NM,
	OUT_MAIL_TO_ST_CD,
	OUT_MAIL_TO_ZIP_CD,
	crrnt_snpsht_flag,
	audit_id,
	eff_from_date,
	eff_to_date,
	source_sys_id,
	created_dt,
	NA,
	mail_to_name,
	default_int,
	default_date,
	prim_payee_name,
	add_payee_name_1,
	add_payee_name_2,
	add_payee_name_3,
	add_payee_name_4,
	add_payee_name_5,
	add_payee_name_6,
	sup_payment_system_id,
	sup_payment_method_id,
	default_int_0
	FROM EXP_Determine_AK
),
RTRTRANS_INSERT AS (SELECT * FROM RTRTRANS WHERE ISNULL(exists_claim_pay_id)),
RTRTRANS_DEFAULT1 AS (SELECT * FROM RTRTRANS WHERE NOT ( (ISNULL(exists_claim_pay_id)) )),
UPD_U AS (
	SELECT
	exists_claim_pay_id AS exists_claim_pay_id2, 
	OUT_DFT_DRAFT_NBR, 
	DFT_MICRP_ECD_NBR, 
	DFT_BANK_NBR AS DFT_BANK_NBR1, 
	OUT_COH_DELETE_IND, 
	DFT_TRS_AMT AS DFT_TRS_AMT1, 
	DFT_CREATE_TS AS DFT_CREATE_TS1, 
	DFT_CK_DRAFT_IND AS DFT_CK_DRAFT_IND1, 
	DFT_DFT_CK_TYP_CD AS DFT_DFT_CK_TYP_CD1, 
	OUT_DFT_ENTRY_OPR_ID AS OUT_DFT_ENTRY_OPR_ID1, 
	CAJ_ADJUSTER_TYPE AS CAJ_ADJUSTER_TYPE1, 
	DFT_DBS_DT AS DFT_DBS_DT1, 
	DFT_DBS_STATUS_CD AS DFT_DBS_STATUS_CD1, 
	OUT_DFT_DSB_LOC_CD AS OUT_DFT_DSB_LOC_CD1, 
	out_CDC_REPORT_TO_IRS, 
	COH_CREATE_TS AS COH_CREATE_TS1, 
	COH_UPD_TS AS COH_UPD_TS1, 
	COH_NEW_CLAIM_NBR AS COH_NEW_CLAIM_NBR1, 
	COH_NEW_DRAFT_NBR AS COH_NEW_DRAFT_NBR1, 
	OUT_PAYEE_PHARSE_COMMENT AS OUT_PAYEE_PHARSE_COMMENT1, 
	OUT_MEMO_PHARSE_COMMENT AS OUT_MEMO_PHARSE_COMMENT1, 
	MAIL_TO_ADR AS MAIL_TO_ADR1, 
	OUT_CITY_NM AS OUT_CITY_NM1, 
	OUT_MAIL_TO_ST_CD AS OUT_MAIL_TO_ST_CD1, 
	OUT_MAIL_TO_ZIP_CD AS OUT_MAIL_TO_ZIP_CD1, 
	crrnt_snpsht_flag, 
	audit_id AS audit_id1, 
	eff_from_date AS eff_from_date1, 
	eff_to_date AS eff_to_date1, 
	source_sys_id AS source_sys_id1, 
	created_dt AS created_dt1, 
	NA AS NA1, 
	mail_to_name, 
	prim_payee_name AS prim_payee_name2, 
	add_payee_name_1 AS add_payee_name1, 
	add_payee_name_ AS add_payee_name2, 
	add_payee_name_3 AS add_payee_name3, 
	add_payee_name_4 AS add_payee_name4, 
	add_payee_name_5 AS add_payee_name5, 
	add_payee_name_6 AS add_payee_name6, 
	sup_payment_system_id AS sup_payment_system_id2, 
	sup_payment_method_id AS sup_payment_method_id2
	FROM RTRTRANS_DEFAULT1
),
claim_payment_update AS (
	MERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment AS T
	USING UPD_U AS S
	ON T.claim_pay_id = S.exists_claim_pay_id2
	WHEN MATCHED BY TARGET THEN
	UPDATE SET T.claim_pay_num = S.OUT_DFT_DRAFT_NBR, T.micro_ecd_draft_num = S.DFT_MICRP_ECD_NBR, T.bank_acct_num = S.DFT_BANK_NBR1, T.pay_delete_ind = S.OUT_COH_DELETE_IND, T.total_pay_amt = S.DFT_TRS_AMT1, T.pay_issued_date = S.DFT_DBS_DT1, T.pay_to_code = S.NA1, T.payee_note = S.NA1, T.pay_ind = S.DFT_CK_DRAFT_IND1, T.pay_type_code = S.DFT_DFT_CK_TYP_CD1, T.pay_entry_oper_id = S.OUT_DFT_ENTRY_OPR_ID1, T.pay_entry_oper_role_code = S.CAJ_ADJUSTER_TYPE1, T.pay_disbursement_date = S.DFT_CREATE_TS1, T.pay_disbursement_status = S.DFT_DBS_STATUS_CD1, T.pay_disbursement_loc_code = S.OUT_DFT_DSB_LOC_CD1, T.reported_to_irs_ind = S.out_CDC_REPORT_TO_IRS, T.pay_voided_date = S.COH_CREATE_TS1, T.pay_reposted_date = S.COH_UPD_TS1, T.new_claim_num = S.COH_NEW_CLAIM_NBR1, T.new_draft_num = S.COH_NEW_DRAFT_NBR1, T.payee_phrase_code = S.NA1, T.pay_to_the_order_of_name = S.OUT_PAYEE_PHARSE_COMMENT1, T.memo_phrase_code = S.NA1, T.memo_phrase_comment = S.OUT_MEMO_PHARSE_COMMENT1, T.mail_to_code = S.NA1, T.mail_to_name = S.mail_to_name, T.mail_to_addr = S.MAIL_TO_ADR1, T.mail_to_city = S.OUT_CITY_NM1, T.mail_to_state = S.OUT_MAIL_TO_ST_CD1, T.mail_to_zip = S.OUT_MAIL_TO_ZIP_CD1, T.crrnt_snpsht_flag = S.crrnt_snpsht_flag, T.audit_id = S.audit_id1, T.eff_from_date = S.eff_from_date1, T.eff_to_date = S.eff_to_date1, T.source_sys_id = S.source_sys_id1, T.modified_date = S.created_dt1, T.prim_payee_name = S.prim_payee_name2, T.add_payee_name1 = S.add_payee_name1, T.add_payee_name2 = S.add_payee_name2, T.add_payee_name3 = S.add_payee_name3, T.add_payee_name4 = S.add_payee_name4, T.add_payee_name5 = S.add_payee_name5, T.add_payee_name6 = S.add_payee_name6, T.sup_payment_system_id = S.sup_payment_system_id2, T.sup_payment_method_id = S.sup_payment_method_id2
),
UPD_I AS (
	SELECT
	NEXTVAL AS claim_pay_ak_Id, 
	OUT_DFT_DRAFT_NBR, 
	DFT_MICRP_ECD_NBR, 
	DFT_BANK_NBR AS DFT_BANK_NBR1, 
	OUT_COH_DELETE_IND, 
	DFT_TRS_AMT AS DFT_TRS_AMT1, 
	DFT_CREATE_TS AS DFT_CREATE_TS1, 
	DFT_CK_DRAFT_IND AS DFT_CK_DRAFT_IND1, 
	DFT_DFT_CK_TYP_CD AS DFT_DFT_CK_TYP_CD1, 
	OUT_DFT_ENTRY_OPR_ID AS OUT_DFT_ENTRY_OPR_ID1, 
	CAJ_ADJUSTER_TYPE AS CAJ_ADJUSTER_TYPE1, 
	DFT_DBS_DT AS DFT_DBS_DT1, 
	DFT_DBS_STATUS_CD AS DFT_DBS_STATUS_CD1, 
	OUT_DFT_DSB_LOC_CD AS OUT_DFT_DSB_LOC_CD1, 
	out_CDC_REPORT_TO_IRS, 
	COH_CREATE_TS AS COH_CREATE_TS1, 
	COH_UPD_TS AS COH_UPD_TS1, 
	COH_NEW_CLAIM_NBR AS COH_NEW_CLAIM_NBR1, 
	COH_NEW_DRAFT_NBR AS COH_NEW_DRAFT_NBR1, 
	OUT_PAYEE_PHARSE_COMMENT AS OUT_PAYEE_PHARSE_COMMENT1, 
	OUT_MEMO_PHARSE_COMMENT AS OUT_MEMO_PHARSE_COMMENT1, 
	MAIL_TO_ADR AS MAIL_TO_ADR1, 
	OUT_CITY_NM AS OUT_CITY_NM1, 
	OUT_MAIL_TO_ST_CD AS OUT_MAIL_TO_ST_CD1, 
	OUT_MAIL_TO_ZIP_CD AS OUT_MAIL_TO_ZIP_CD1, 
	crrnt_snpsht_flag, 
	audit_id AS audit_id1, 
	eff_from_date AS eff_from_date1, 
	eff_to_date AS eff_to_date1, 
	source_sys_id AS source_sys_id1, 
	created_dt AS created_dt1, 
	NA AS NA1, 
	mail_to_name, 
	default_int, 
	default_date, 
	prim_payee_name AS prim_payee_name1, 
	add_payee_name_ AS add_payee_name1, 
	add_payee_name_2 AS add_payee_name2, 
	add_payee_name_3 AS add_payee_name3, 
	add_payee_name_4 AS add_payee_name4, 
	add_payee_name_5 AS add_payee_name5, 
	add_payee_name_6 AS add_payee_name6, 
	sup_payment_system_id AS sup_payment_system_id1, 
	sup_payment_method_id AS sup_payment_method_id1, 
	default_int_0 AS default_int_01
	FROM RTRTRANS_INSERT
),
claim_payment_insert AS (
	INSERT INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment
	(claim_pay_ak_id, pms_claimant_cov_det_ak_id, claim_pay_num, micro_ecd_draft_num, bank_acct_num, pay_delete_ind, total_pay_amt, pay_issued_date, pay_cashed_date, pay_to_code, payee_note, pay_ind, pay_type_code, pay_entry_oper_id, pay_entry_oper_role_code, pay_disbursement_date, pay_disbursement_status, pay_disbursement_loc_code, reported_to_irs_ind, pay_voided_date, pay_reposted_date, new_claim_num, new_draft_num, payee_phrase_code, pay_to_the_order_of_name, memo_phrase_code, memo_phrase_comment, mail_to_code, mail_to_name, mail_to_addr, mail_to_city, mail_to_state, mail_to_zip, crrnt_snpsht_flag, audit_id, eff_from_date, eff_to_date, source_sys_id, created_date, modified_date, prim_payee_name, add_payee_name1, add_payee_name2, add_payee_name3, add_payee_name4, add_payee_name5, add_payee_name6, sup_payment_system_id, sup_payment_method_id, approval_status, approval_by_user_id, approval_date, denial_reason, special_processing, payee_category, sup_claim_payment_workflow_id, attached_document_count)
	SELECT 
	claim_pay_ak_Id AS CLAIM_PAY_AK_ID, 
	default_int AS PMS_CLAIMANT_COV_DET_AK_ID, 
	OUT_DFT_DRAFT_NBR AS CLAIM_PAY_NUM, 
	DFT_MICRP_ECD_NBR AS MICRO_ECD_DRAFT_NUM, 
	DFT_BANK_NBR1 AS BANK_ACCT_NUM, 
	OUT_COH_DELETE_IND AS PAY_DELETE_IND, 
	DFT_TRS_AMT1 AS TOTAL_PAY_AMT, 
	DFT_DBS_DT1 AS PAY_ISSUED_DATE, 
	default_date AS PAY_CASHED_DATE, 
	NA1 AS PAY_TO_CODE, 
	NA1 AS PAYEE_NOTE, 
	DFT_CK_DRAFT_IND1 AS PAY_IND, 
	DFT_DFT_CK_TYP_CD1 AS PAY_TYPE_CODE, 
	OUT_DFT_ENTRY_OPR_ID1 AS PAY_ENTRY_OPER_ID, 
	CAJ_ADJUSTER_TYPE1 AS PAY_ENTRY_OPER_ROLE_CODE, 
	DFT_CREATE_TS1 AS PAY_DISBURSEMENT_DATE, 
	DFT_DBS_STATUS_CD1 AS PAY_DISBURSEMENT_STATUS, 
	OUT_DFT_DSB_LOC_CD1 AS PAY_DISBURSEMENT_LOC_CODE, 
	out_CDC_REPORT_TO_IRS AS REPORTED_TO_IRS_IND, 
	COH_CREATE_TS1 AS PAY_VOIDED_DATE, 
	COH_UPD_TS1 AS PAY_REPOSTED_DATE, 
	COH_NEW_CLAIM_NBR1 AS NEW_CLAIM_NUM, 
	COH_NEW_DRAFT_NBR1 AS NEW_DRAFT_NUM, 
	NA1 AS PAYEE_PHRASE_CODE, 
	OUT_PAYEE_PHARSE_COMMENT1 AS PAY_TO_THE_ORDER_OF_NAME, 
	NA1 AS MEMO_PHRASE_CODE, 
	OUT_MEMO_PHARSE_COMMENT1 AS MEMO_PHRASE_COMMENT, 
	NA1 AS MAIL_TO_CODE, 
	MAIL_TO_NAME, 
	MAIL_TO_ADR1 AS MAIL_TO_ADDR, 
	OUT_CITY_NM1 AS MAIL_TO_CITY, 
	OUT_MAIL_TO_ST_CD1 AS MAIL_TO_STATE, 
	OUT_MAIL_TO_ZIP_CD1 AS MAIL_TO_ZIP, 
	CRRNT_SNPSHT_FLAG, 
	audit_id1 AS AUDIT_ID, 
	eff_from_date1 AS EFF_FROM_DATE, 
	eff_to_date1 AS EFF_TO_DATE, 
	source_sys_id1 AS SOURCE_SYS_ID, 
	created_dt1 AS CREATED_DATE, 
	created_dt1 AS MODIFIED_DATE, 
	prim_payee_name1 AS PRIM_PAYEE_NAME, 
	ADD_PAYEE_NAME1, 
	ADD_PAYEE_NAME2, 
	ADD_PAYEE_NAME3, 
	ADD_PAYEE_NAME4, 
	ADD_PAYEE_NAME5, 
	ADD_PAYEE_NAME6, 
	sup_payment_system_id1 AS SUP_PAYMENT_SYSTEM_ID, 
	sup_payment_method_id1 AS SUP_PAYMENT_METHOD_ID, 
	NA1 AS APPROVAL_STATUS, 
	NA1 AS APPROVAL_BY_USER_ID, 
	default_date AS APPROVAL_DATE, 
	NA1 AS DENIAL_REASON, 
	NA1 AS SPECIAL_PROCESSING, 
	NA1 AS PAYEE_CATEGORY, 
	default_int AS SUP_CLAIM_PAYMENT_WORKFLOW_ID, 
	default_int_01 AS ATTACHED_DOCUMENT_COUNT
	FROM UPD_I
),
SQ_chk_stage AS (
	SELECT 
	RTRIM(chk_stage.TranCd), 
	CONVERT(char(10), DATEADD(dd, PdDt, '12/28/1800'),101)
	FROM
	@{pipeline().parameters.SOURCE_TABLE_OWNER}.chk_stage chk_stage
),
LKP_CLAIM_PAYMENT_PAY_CASHED_DT AS (
	SELECT
	claim_pay_id,
	TranCd,
	claim_pay_num,
	pay_cashed_date
	FROM (
		SELECT 
		claim_payment.claim_pay_id as claim_pay_id, 
		claim_payment.pay_cashed_date as pay_cashed_date,
		RTRIM(claim_payment.claim_pay_num) as claim_pay_num 
		FROM 
		@{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment claim_payment
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_num ORDER BY claim_pay_id) = 1
),
EXP_Default_Values AS (
	SELECT
	LKP_CLAIM_PAYMENT_PAY_CASHED_DT.claim_pay_id,
	LKP_CLAIM_PAYMENT_PAY_CASHED_DT.pay_cashed_date AS pay_cashed_date_target,
	SQ_chk_stage.extract_date AS pay_cashed_dt,
	-- *INF*: decode(true,
	-- pay_cashed_dt = TO_DATE('12/28/1800','MM/DD/YYYY'),
	-- TO_DATE('1/1/1800','MM/DD/YYYY'),
	-- pay_cashed_dt)
	-- 
	-- 
	-- 
	decode(true,
	pay_cashed_dt = TO_DATE('12/28/1800', 'MM/DD/YYYY'), TO_DATE('1/1/1800', 'MM/DD/YYYY'),
	pay_cashed_dt) AS pay_cashed_dt_source,
	@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS AUDIT_ID,
	sysdate AS modified_dt
	FROM SQ_chk_stage
	LEFT JOIN LKP_CLAIM_PAYMENT_PAY_CASHED_DT
	ON LKP_CLAIM_PAYMENT_PAY_CASHED_DT.claim_pay_num = SQ_chk_stage.TranCd
),
FIL_Changed_data AS (
	SELECT
	claim_pay_id, 
	pay_cashed_date_target, 
	pay_cashed_dt_source, 
	AUDIT_ID, 
	modified_dt
	FROM EXP_Default_Values
	WHERE pay_cashed_date_target <> pay_cashed_dt_source
),
UPD_PAY_CASHED_DATE AS (
	SELECT
	claim_pay_id, 
	pay_cashed_dt_source, 
	AUDIT_ID, 
	modified_dt
	FROM FIL_Changed_data
),
claim_payment_update_pay_cashed_dt AS (
	MERGE INTO @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment AS T
	USING UPD_PAY_CASHED_DATE AS S
	ON T.claim_pay_id = S.claim_pay_id
	WHEN MATCHED BY TARGET THEN
	UPDATE SET T.pay_cashed_date = S.pay_cashed_dt_source, T.audit_id = S.AUDIT_ID, T.modified_date = S.modified_dt
),
SQ_InsurPayPaymentStage AS (
	SELECT
		ExceedDraftNumber,
		PaymentCashedDate,
		PaymentMethod,
		PaymentType,
		SupPaymentWorkflowId,
		ExpediteRequested,
		CertifiedRequested,
		AttachedDocumentCount,
		CheckNumber
	FROM InsurPayPaymentStage
),
EXP_sup_payment_method_id AS (
	SELECT
	ExceedDraftNumber,
	PaymentCashedDate,
	PaymentMethod,
	PaymentType,
	SupPaymentWorkflowId,
	ExpediteRequested,
	CertifiedRequested,
	-- *INF*: IIF(ExpediteRequested='T',
	-- 		'Expedited',
	-- 	IIF(CertifiedRequested='T',
	-- 		'Certified',
	-- 		'N/A'))
	IFF(ExpediteRequested = 'T', 'Expedited', IFF(CertifiedRequested = 'T', 'Certified', 'N/A')) AS v_special_processing,
	v_special_processing AS o_special_processing,
	AttachedDocumentCount,
	CheckNumber,
	-- *INF*: IIF(ISNULL(CheckNumber)  OR CheckNumber = '' OR IS_SPACES(CheckNumber),'N/A',CheckNumber)
	IFF(CheckNumber IS NULL OR CheckNumber = '' OR IS_SPACES(CheckNumber), 'N/A', CheckNumber) AS v_CheckNumber,
	-- *INF*: DECODE(TRUE,
	-- 	ISNULL(PaymentMethod) OR LENGTH(RTRIM(PaymentMethod)) = 0,
	-- 		'N/A',
	-- 	IN(PaymentMethod, 'Electronic', 'Electronic to Lienholder'),
	-- 		'Electronic to Lienholder',
	-- 	IN(PaymentMethod, 'Let_Customer_Pickup', 'Let Customer Pickup'),
	-- 		'Pending Payee Will Select',
	-- 	IN(PaymentMethod, 'Generate_Barcode', 'Generate Barcode'),
	-- 		'Pending Mobile App Select',
	--      v_CheckNumber = 'N/A',
	--           'Pending Payee Will Select',
	-- 	IN(PaymentMethod, 'Direct_Deposit', 'Direct Deposit'), 
	--       	'EFT',
	-- 	IN(PaymentMethod, 'Debit_Card', 'Debit Card'), 
	-- 		'Debit Card',
	-- 	IN(PaymentMethod, 'Prepaid_Card', 'Prepaid Card'), 
	--           IIF(SUBSTR(v_CheckNumber,1,2) = 'CT', 'CAT Card', 'Digital Prepaid'),
	-- 	IN(PaymentMethod, 'Virtual Prepaid Card', 'Virtual Prepaid card'), 
	--           'Digital Prepaid',
	-- 	IN(PaymentMethod, 'Instant Prepaid Card', 'Instant Prepaid card'), 
	--           'CAT Card',
	-- 	IN(PaymentMethod, 'Virtual_Card', 'Virtual Card'),
	--       	'Virtual Payment',
	-- -- when other --
	-- 	SUBSTR(PaymentMethod,1,35)
	-- )
	DECODE(TRUE,
	PaymentMethod IS NULL OR LENGTH(RTRIM(PaymentMethod)) = 0, 'N/A',
	IN(PaymentMethod, 'Electronic', 'Electronic to Lienholder'), 'Electronic to Lienholder',
	IN(PaymentMethod, 'Let_Customer_Pickup', 'Let Customer Pickup'), 'Pending Payee Will Select',
	IN(PaymentMethod, 'Generate_Barcode', 'Generate Barcode'), 'Pending Mobile App Select',
	v_CheckNumber = 'N/A', 'Pending Payee Will Select',
	IN(PaymentMethod, 'Direct_Deposit', 'Direct Deposit'), 'EFT',
	IN(PaymentMethod, 'Debit_Card', 'Debit Card'), 'Debit Card',
	IN(PaymentMethod, 'Prepaid_Card', 'Prepaid Card'), IFF(SUBSTR(v_CheckNumber, 1, 2) = 'CT', 'CAT Card', 'Digital Prepaid'),
	IN(PaymentMethod, 'Virtual Prepaid Card', 'Virtual Prepaid card'), 'Digital Prepaid',
	IN(PaymentMethod, 'Instant Prepaid Card', 'Instant Prepaid card'), 'CAT Card',
	IN(PaymentMethod, 'Virtual_Card', 'Virtual Card'), 'Virtual Payment',
	SUBSTR(PaymentMethod, 1, 35)) AS v_payment_method,
	-- *INF*: :LKP.LKP_SUP_PAYMENT_METHOD(v_payment_method)
	LKP_SUP_PAYMENT_METHOD_v_payment_method.sup_payment_method_id AS v_sup_payment_method_id,
	-- *INF*: IIF(ISNULL(v_sup_payment_method_id), -1, v_sup_payment_method_id)
	IFF(v_sup_payment_method_id IS NULL, - 1, v_sup_payment_method_id) AS o_sup_payment_method_id
	FROM SQ_InsurPayPaymentStage
	LEFT JOIN LKP_SUP_PAYMENT_METHOD LKP_SUP_PAYMENT_METHOD_v_payment_method
	ON LKP_SUP_PAYMENT_METHOD_v_payment_method.payment_method = v_payment_method

),
LKP_claim_payment_InsurPay AS (
	SELECT
	claim_pay_id,
	pay_cashed_date,
	sup_payment_method_id,
	special_processing,
	payee_category,
	sup_claim_payment_workflow_id,
	attached_document_count,
	claim_pay_num
	FROM (
		SELECT claim_pay_id as claim_pay_id, 
			pay_cashed_date as pay_cashed_date,
			sup_payment_method_id as sup_payment_method_id,
			special_processing as special_processing,
			payee_category as payee_category,
			sup_claim_payment_workflow_id as sup_claim_payment_workflow_id,
		attached_document_count as attached_document_count,
			RTRIM(claim_payment.claim_pay_num) as claim_pay_num 
		FROM @{pipeline().parameters.TARGET_TABLE_OWNER}.claim_payment
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_num ORDER BY claim_pay_id) = 1
),
LKP_sup_claim_payment_workflow AS (
	SELECT
	sup_claim_payment_workflow_id,
	source_payment_workflow_id
	FROM (
		SELECT 
			sup_claim_payment_workflow_id,
			source_payment_workflow_id
		FROM sup_claim_payment_workflow
		WHERE crrnt_snpsht_flag=1
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY source_payment_workflow_id ORDER BY sup_claim_payment_workflow_id) = 1
),
EXP_Default_Values_InsurPay AS (
	SELECT
	EXP_sup_payment_method_id.PaymentCashedDate AS in_PaymentCashedDate,
	-- *INF*: IIF(ISNULL(in_PaymentCashedDate),
	-- TO_DATE('1/1/1800','MM/DD/YYYY'),
	-- in_PaymentCashedDate)
	IFF(in_PaymentCashedDate IS NULL, TO_DATE('1/1/1800', 'MM/DD/YYYY'), in_PaymentCashedDate) AS o_PaymentCashedDate,
	EXP_sup_payment_method_id.o_sup_payment_method_id AS sup_payment_method_id_source,
	LKP_claim_payment_InsurPay.claim_pay_id,
	LKP_claim_payment_InsurPay.pay_cashed_date AS lkp_pay_cashed_date,
	LKP_claim_payment_InsurPay.sup_payment_method_id AS lkp_sup_payment_method_id,
	LKP_claim_payment_InsurPay.special_processing AS lkp_special_processing,
	LKP_claim_payment_InsurPay.payee_category AS lkp_payee_category,
	LKP_claim_payment_InsurPay.sup_claim_payment_workflow_id AS lkp_sup_claim_payment_workflow_id,
	LKP_claim_payment_InsurPay.attached_document_count AS lkp_attached_document_count,
	SYSDATE AS modified_date,
	@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,
	EXP_sup_payment_method_id.PaymentType AS in_PaymentType,
	-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_PaymentType)
	:UDF.DEFAULT_VALUE_FOR_STRINGS(in_PaymentType) AS o_PaymentType,
	LKP_sup_claim_payment_workflow.sup_claim_payment_workflow_id AS in_sup_claim_payment_workflow_id,
	-- *INF*: IIF(ISNULL(in_sup_claim_payment_workflow_id),
	--     -1,
	-- in_sup_claim_payment_workflow_id)
	IFF(in_sup_claim_payment_workflow_id IS NULL, - 1, in_sup_claim_payment_workflow_id) AS o_sup_claim_payment_workflow_id1,
	EXP_sup_payment_method_id.o_special_processing AS special_processing,
	EXP_sup_payment_method_id.AttachedDocumentCount AS in_attached_document_count,
	-- *INF*: iif(isnull(in_attached_document_count),0,in_attached_document_count)
	IFF(in_attached_document_count IS NULL, 0, in_attached_document_count) AS o_attached_document_count
	FROM EXP_sup_payment_method_id
	LEFT JOIN LKP_claim_payment_InsurPay
	ON LKP_claim_payment_InsurPay.claim_pay_num = EXP_sup_payment_method_id.ExceedDraftNumber
	LEFT JOIN LKP_sup_claim_payment_workflow
	ON LKP_sup_claim_payment_workflow.source_payment_workflow_id = EXP_sup_payment_method_id.SupPaymentWorkflowId
),
FIL_changed_data_InsurPay AS (
	SELECT
	claim_pay_id, 
	o_PaymentCashedDate AS PaymentCashedDate, 
	sup_payment_method_id_source AS sup_payment_method_id, 
	lkp_pay_cashed_date, 
	lkp_sup_payment_method_id, 
	lkp_special_processing, 
	lkp_payee_category, 
	lkp_sup_claim_payment_workflow_id, 
	lkp_attached_document_count, 
	modified_date, 
	audit_id, 
	o_PaymentType AS PaymentType, 
	o_sup_claim_payment_workflow_id1 AS sup_claim_payment_workflow_id, 
	special_processing, 
	o_attached_document_count
	FROM EXP_Default_Values_InsurPay
	WHERE (NOT ISNULL(claim_pay_id)) 
AND 
(
	(PaymentCashedDate <> lkp_pay_cashed_date)
	OR 
	(sup_payment_method_id <> lkp_sup_payment_method_id) 
	OR 
	(special_processing != lkp_special_processing)
	OR 
	(PaymentType != lkp_payee_category)
	OR 
	(sup_claim_payment_workflow_id <> 	lkp_sup_claim_payment_workflow_id)
	OR
	(o_attached_document_count <> lkp_attached_document_count)
)
),
UPD_claim_payment_InsurPay AS (
	SELECT
	claim_pay_id, 
	PaymentCashedDate, 
	sup_payment_method_id AS sup_payment_method_id_source, 
	modified_date, 
	audit_id, 
	PaymentType, 
	sup_claim_payment_workflow_id, 
	special_processing, 
	o_attached_document_count
	FROM FIL_changed_data_InsurPay
),
claim_payment_Update_InsurPay AS (
	MERGE INTO claim_payment AS T
	USING UPD_claim_payment_InsurPay AS S
	ON T.claim_pay_id = S.claim_pay_id
	WHEN MATCHED BY TARGET THEN
	UPDATE SET T.pay_cashed_date = S.PaymentCashedDate, T.audit_id = S.audit_id, T.modified_date = S.modified_date, T.sup_payment_method_id = S.sup_payment_method_id_source, T.special_processing = S.special_processing, T.payee_category = S.PaymentType, T.sup_claim_payment_workflow_id = S.sup_claim_payment_workflow_id, T.attached_document_count = S.o_attached_document_count
),
SQ_InsurPayPaymentApprovalStage AS (
	SELECT
		InsurPayBatchId,
		ApprovalStatus,
		ApprovalByUserId,
		ApprovalDate,
		DenialReason
	FROM InsurPayPaymentApprovalStage
),
EXP_source_approval AS (
	SELECT
	InsurPayBatchId,
	ApprovalStatus,
	ApprovalByUserId,
	ApprovalDate,
	DenialReason
	FROM SQ_InsurPayPaymentApprovalStage
),
LKP_ArchInsurPayPaymentStage AS (
	SELECT
	ExceedDraftNumber,
	InsurPayBatchId
	FROM (
		select distinct
			arch.InsurPayBatchId as InsurPayBatchId, 
			FIRST_VALUE(arch.ExceedDraftNumber) OVER (PARTITION BY arch.InsurPayBatchId ORDER BY arch.ExtractDate desc) as ExceedDraftNumber
		from dbo.InsurPayPaymentApprovalStage ap
		join dbo.ArchInsurPayPaymentStage arch on arch.InsurPayBatchId = ap.InsurPayBatchId
		--
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY InsurPayBatchId ORDER BY ExceedDraftNumber) = 1
),
EXP_Default_Values_InsurPay_Approval AS (
	SELECT
	LKP_ArchInsurPayPaymentStage.ExceedDraftNumber,
	EXP_source_approval.ApprovalStatus AS in_ApprovalStatus,
	-- *INF*: IIF(:UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalStatus) = 'Denied',
	-- 		'Declined',
	-- 	:UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalStatus))
	IFF(:UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalStatus) = 'Denied', 'Declined', :UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalStatus)) AS v_ApprovalStatus,
	v_ApprovalStatus AS o_ApprovalStatus,
	EXP_source_approval.ApprovalByUserId AS in_ApprovalByUserId,
	-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalByUserId)
	:UDF.DEFAULT_VALUE_FOR_STRINGS(in_ApprovalByUserId) AS v_ApprovalByUserId,
	v_ApprovalByUserId AS o_ApprovalByUserId,
	EXP_source_approval.ApprovalDate AS in_ApprovalDate,
	-- *INF*: IIF(ISNULL(in_ApprovalDate),
	--     TO_DATE('01/01/1800 01:00:00','MM/DD/YYYY HH24:MI:SS'),
	--     in_ApprovalDate)
	IFF(in_ApprovalDate IS NULL, TO_DATE('01/01/1800 01:00:00', 'MM/DD/YYYY HH24:MI:SS'), in_ApprovalDate) AS v_ApprovalDate,
	v_ApprovalDate AS o_ApprovalDate,
	EXP_source_approval.DenialReason AS in_DenialReason,
	-- *INF*: :UDF.DEFAULT_VALUE_FOR_STRINGS(in_DenialReason)
	:UDF.DEFAULT_VALUE_FOR_STRINGS(in_DenialReason) AS v_DenialReason,
	v_DenialReason AS o_DenialReason
	FROM EXP_source_approval
	LEFT JOIN LKP_ArchInsurPayPaymentStage
	ON LKP_ArchInsurPayPaymentStage.InsurPayBatchId = EXP_source_approval.InsurPayBatchId
),
LKP_claim_payment_InsurPay_Approval AS (
	SELECT
	claim_pay_id,
	approval_status,
	approval_by_user_id,
	approval_date,
	denial_reason,
	claim_pay_num
	FROM (
		SELECT cpa.claim_pay_id as claim_pay_id, 
			cpa.approval_status as approval_status,
			cpa.approval_by_user_id as approval_by_user_id,
			cpa.approval_date as approval_date,
			cpa.denial_reason as denial_reason,
			RTRIM(cpa.claim_pay_num) as claim_pay_num 
		FROM dbo.sup_payment_system ps
		join dbo.claim_payment cpa on cpa.sup_payment_system_id = ps.sup_payment_system_id
		where ps.payment_system = 'InsurPay'
		--
	)
	QUALIFY ROW_NUMBER() OVER (PARTITION BY claim_pay_num ORDER BY claim_pay_id) = 1
),
EXP_Target_Values_InsurPay_Approval AS (
	SELECT
	EXP_Default_Values_InsurPay_Approval.o_ApprovalStatus AS ApprovalStatus,
	EXP_Default_Values_InsurPay_Approval.o_ApprovalByUserId AS ApprovalByUserId,
	EXP_Default_Values_InsurPay_Approval.o_ApprovalDate AS ApprovalDate,
	EXP_Default_Values_InsurPay_Approval.o_DenialReason AS DenialReason,
	LKP_claim_payment_InsurPay_Approval.claim_pay_id AS lkp_claim_pay_id,
	LKP_claim_payment_InsurPay_Approval.approval_status AS lkp_approval_status,
	LKP_claim_payment_InsurPay_Approval.approval_by_user_id AS lkp_approval_by_user_id,
	LKP_claim_payment_InsurPay_Approval.approval_date AS lkp_approval_date,
	LKP_claim_payment_InsurPay_Approval.denial_reason AS lkp_denial_reason,
	@{pipeline().parameters.WBMI_AUDIT_CONTROL_RUN_ID} AS audit_id,
	SYSDATE AS modified_date
	FROM EXP_Default_Values_InsurPay_Approval
	LEFT JOIN LKP_claim_payment_InsurPay_Approval
	ON LKP_claim_payment_InsurPay_Approval.claim_pay_num = EXP_Default_Values_InsurPay_Approval.ExceedDraftNumber
),
FIL_changed_data_InsurPay_Approval AS (
	SELECT
	ApprovalStatus, 
	ApprovalByUserId, 
	ApprovalDate, 
	DenialReason, 
	lkp_claim_pay_id, 
	lkp_approval_status, 
	lkp_approval_by_user_id, 
	lkp_approval_date, 
	lkp_denial_reason, 
	audit_id, 
	modified_date
	FROM EXP_Target_Values_InsurPay_Approval
	WHERE (NOT ISNULL(lkp_claim_pay_id)) 
AND 
(
	(ApprovalStatus <> lkp_approval_status)
	OR 
	(ApprovalByUserId <> lkp_approval_by_user_id)
	OR 
	(ApprovalDate <> lkp_approval_date)
	OR 
	(DenialReason <> lkp_denial_reason)
)
),
UPD_claim_payment_InsurPay_Approval AS (
	SELECT
	lkp_claim_pay_id, 
	ApprovalStatus, 
	ApprovalByUserId, 
	ApprovalDate, 
	DenialReason, 
	audit_id, 
	modified_date
	FROM FIL_changed_data_InsurPay_Approval
),
claim_payment_Update_InsurPay_Approval AS (
	MERGE INTO claim_payment AS T
	USING UPD_claim_payment_InsurPay_Approval AS S
	ON T.claim_pay_id = S.lkp_claim_pay_id
	WHEN MATCHED BY TARGET THEN
	UPDATE SET T.audit_id = S.audit_id, T.modified_date = S.modified_date, T.approval_status = S.ApprovalStatus, T.approval_by_user_id = S.ApprovalByUserId, T.approval_date = S.ApprovalDate, T.denial_reason = S.DenialReason
),